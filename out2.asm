
build/bin/ns_app.elf:	file format elf32-littlearm

Disassembly of section .privileged_functions:

08055200 <xTaskCreateRestricted>:
;     {
 8055200: b580         	push	{r7, lr}
 8055202: 466f         	mov	r7, sp
 8055204: b084         	sub	sp, #0x10
 8055206: 9003         	str	r0, [sp, #0xc]
 8055208: 9102         	str	r1, [sp, #0x8]
;         pxNewTCB = prvCreateRestrictedTask( pxTaskDefinition, pxCreatedTask );
 805520a: 9803         	ldr	r0, [sp, #0xc]
 805520c: 9902         	ldr	r1, [sp, #0x8]
 805520e: 4a09         	ldr	r2, [pc, #0x24]         @ 0x8055234 <xTaskCreateRestricted+0x34>
 8055210: 4790         	blx	r2
 8055212: 9001         	str	r0, [sp, #0x4]
;         if( pxNewTCB != NULL )
 8055214: 9801         	ldr	r0, [sp, #0x4]
 8055216: b130         	cbz	r0, 0x8055226 <xTaskCreateRestricted+0x26> @ imm = #0xc
 8055218: e7ff         	b	0x805521a <xTaskCreateRestricted+0x1a> @ imm = #-0x2
;             prvAddNewTaskToReadyList( pxNewTCB );
 805521a: 9801         	ldr	r0, [sp, #0x4]
 805521c: 4906         	ldr	r1, [pc, #0x18]         @ 0x8055238 <xTaskCreateRestricted+0x38>
 805521e: 4788         	blx	r1
 8055220: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 8055222: 9000         	str	r0, [sp]
;         }
 8055224: e003         	b	0x805522e <xTaskCreateRestricted+0x2e> @ imm = #0x6
 8055226: f04f 30ff    	mov.w	r0, #0xffffffff
;             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 805522a: 9000         	str	r0, [sp]
 805522c: e7ff         	b	0x805522e <xTaskCreateRestricted+0x2e> @ imm = #-0x2
;         return xReturn;
 805522e: 9800         	ldr	r0, [sp]
 8055230: b004         	add	sp, #0x10
 8055232: bd80         	pop	{r7, pc}

08055234 <$d.1>:
 8055234: 3d 52 05 08  	.word	0x0805523d
 8055238: e9 52 05 08  	.word	0x080552e9

0805523c <prvCreateRestrictedTask>:
;     {
 805523c: b5f0         	push	{r4, r5, r6, r7, lr}
 805523e: af03         	add	r7, sp, #0xc
 8055240: f84d bd04    	str	r11, [sp, #-4]!
 8055244: b088         	sub	sp, #0x20
 8055246: 9007         	str	r0, [sp, #0x1c]
 8055248: 9106         	str	r1, [sp, #0x18]
;         configASSERT( pxTaskDefinition->puxStackBuffer );
 805524a: 9807         	ldr	r0, [sp, #0x1c]
 805524c: 6940         	ldr	r0, [r0, #0x14]
 805524e: b920         	cbnz	r0, 0x805525a <prvCreateRestrictedTask+0x1e> @ imm = #0x8
 8055250: e7ff         	b	0x8055252 <prvCreateRestrictedTask+0x16> @ imm = #-0x2
 8055252: 4824         	ldr	r0, [pc, #0x90]         @ 0x80552e4 <prvCreateRestrictedTask+0xa8>
 8055254: 4780         	blx	r0
 8055256: e7ff         	b	0x8055258 <prvCreateRestrictedTask+0x1c> @ imm = #-0x2
 8055258: e7fe         	b	0x8055258 <prvCreateRestrictedTask+0x1c> @ imm = #-0x4
;         if( pxTaskDefinition->puxStackBuffer != NULL )
 805525a: 9807         	ldr	r0, [sp, #0x1c]
 805525c: 6940         	ldr	r0, [r0, #0x14]
 805525e: b398         	cbz	r0, 0x80552c8 <prvCreateRestrictedTask+0x8c> @ imm = #0x66
 8055260: e7ff         	b	0x8055262 <prvCreateRestrictedTask+0x26> @ imm = #-0x2
;             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8055262: 491d         	ldr	r1, [pc, #0x74]         @ 0x80552d8 <prvCreateRestrictedTask+0x9c>
 8055264: 20d8         	movs	r0, #0xd8
 8055266: 4788         	blx	r1
 8055268: 9005         	str	r0, [sp, #0x14]
;             if( pxNewTCB != NULL )
 805526a: 9805         	ldr	r0, [sp, #0x14]
 805526c: b358         	cbz	r0, 0x80552c6 <prvCreateRestrictedTask+0x8a> @ imm = #0x56
 805526e: e7ff         	b	0x8055270 <prvCreateRestrictedTask+0x34> @ imm = #-0x2
;                 ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8055270: 9805         	ldr	r0, [sp, #0x14]
 8055272: 4b1a         	ldr	r3, [pc, #0x68]         @ 0x80552dc <prvCreateRestrictedTask+0xa0>
 8055274: 2100         	movs	r1, #0x0
 8055276: 22d8         	movs	r2, #0xd8
 8055278: 4798         	blx	r3
;                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 805527a: 9807         	ldr	r0, [sp, #0x1c]
 805527c: 6940         	ldr	r0, [r0, #0x14]
 805527e: 9905         	ldr	r1, [sp, #0x14]
 8055280: f8c1 00ac    	str.w	r0, [r1, #0xac]
;                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 8055284: 9905         	ldr	r1, [sp, #0x14]
 8055286: 2001         	movs	r0, #0x1
 8055288: f881 00d5    	strb.w	r0, [r1, #0xd5]
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 805528c: f8dd e01c    	ldr.w	lr, [sp, #0x1c]
;                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 8055290: f8be 2008    	ldrh.w	r2, [lr, #0x8]
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8055294: f8de 0000    	ldr.w	r0, [lr]
;                                       pxTaskDefinition->pcName,
 8055298: f8de 1004    	ldr.w	r1, [lr, #0x4]
;                                       pxTaskDefinition->pvParameters,
 805529c: f8de 300c    	ldr.w	r3, [lr, #0xc]
;                                       pxTaskDefinition->uxPriority,
 80552a0: f8de c010    	ldr.w	r12, [lr, #0x10]
;                                       pxCreatedTask, pxNewTCB,
 80552a4: 9c06         	ldr	r4, [sp, #0x18]
 80552a6: 9d05         	ldr	r5, [sp, #0x14]
;                                       pxTaskDefinition->xRegions );
 80552a8: f10e 0618    	add.w	r6, lr, #0x18
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80552ac: 46ee         	mov	lr, sp
 80552ae: f8ce 600c    	str.w	r6, [lr, #0xc]
 80552b2: f8ce 5008    	str.w	r5, [lr, #0x8]
 80552b6: f8ce 4004    	str.w	r4, [lr, #0x4]
 80552ba: f8ce c000    	str.w	r12, [lr]
 80552be: f8df c020    	ldr.w	r12, [pc, #0x20]        @ 0x80552e0 <prvCreateRestrictedTask+0xa4>
 80552c2: 47e0         	blx	r12
;             }
 80552c4: e7ff         	b	0x80552c6 <prvCreateRestrictedTask+0x8a> @ imm = #-0x2
;         }
 80552c6: e002         	b	0x80552ce <prvCreateRestrictedTask+0x92> @ imm = #0x4
 80552c8: 2000         	movs	r0, #0x0
;             pxNewTCB = NULL;
 80552ca: 9005         	str	r0, [sp, #0x14]
 80552cc: e7ff         	b	0x80552ce <prvCreateRestrictedTask+0x92> @ imm = #-0x2
;         return pxNewTCB;
 80552ce: 9805         	ldr	r0, [sp, #0x14]
 80552d0: b008         	add	sp, #0x20
 80552d2: f85d bb04    	ldr	r11, [sp], #4
 80552d6: bdf0         	pop	{r4, r5, r6, r7, pc}

080552d8 <$d.3>:
 80552d8: dd 91 05 08  	.word	0x080591dd
 80552dc: cd eb 05 08  	.word	0x0805ebcd
 80552e0: 71 84 05 08  	.word	0x08058471
 80552e4: 55 cd 05 08  	.word	0x0805cd55

080552e8 <prvAddNewTaskToReadyList>:
;     {
 80552e8: b580         	push	{r7, lr}
 80552ea: 466f         	mov	r7, sp
 80552ec: b082         	sub	sp, #0x8
 80552ee: 9001         	str	r0, [sp, #0x4]
;         taskENTER_CRITICAL();
 80552f0: 485c         	ldr	r0, [pc, #0x170]        @ 0x8055464 <prvAddNewTaskToReadyList+0x17c>
 80552f2: 4780         	blx	r0
;             uxCurrentNumberOfTasks++;
 80552f4: f240 1120    	movw	r1, #0x120
 80552f8: f2c2 0100    	movt	r1, #0x2000
 80552fc: 6808         	ldr	r0, [r1]
 80552fe: 3001         	adds	r0, #0x1
 8055300: 6008         	str	r0, [r1]
;             if( pxCurrentTCB == NULL )
 8055302: f240 1000    	movw	r0, #0x100
 8055306: f2c2 0000    	movt	r0, #0x2000
 805530a: 6800         	ldr	r0, [r0]
 805530c: b998         	cbnz	r0, 0x8055336 <prvAddNewTaskToReadyList+0x4e> @ imm = #0x26
 805530e: e7ff         	b	0x8055310 <prvAddNewTaskToReadyList+0x28> @ imm = #-0x2
;                 pxCurrentTCB = pxNewTCB;
 8055310: 9801         	ldr	r0, [sp, #0x4]
 8055312: f240 1100    	movw	r1, #0x100
 8055316: f2c2 0100    	movt	r1, #0x2000
 805531a: 6008         	str	r0, [r1]
;                 if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 805531c: f240 1020    	movw	r0, #0x120
 8055320: f2c2 0000    	movt	r0, #0x2000
 8055324: 6800         	ldr	r0, [r0]
 8055326: 2801         	cmp	r0, #0x1
 8055328: d103         	bne	0x8055332 <prvAddNewTaskToReadyList+0x4a> @ imm = #0x6
 805532a: e7ff         	b	0x805532c <prvAddNewTaskToReadyList+0x44> @ imm = #-0x2
;                     prvInitialiseTaskLists();
 805532c: 484e         	ldr	r0, [pc, #0x138]        @ 0x8055468 <prvAddNewTaskToReadyList+0x180>
 805532e: 4780         	blx	r0
;                 }
 8055330: e000         	b	0x8055334 <prvAddNewTaskToReadyList+0x4c> @ imm = #0x0
 8055332: e7ff         	b	0x8055334 <prvAddNewTaskToReadyList+0x4c> @ imm = #-0x2
;             }
 8055334: e01e         	b	0x8055374 <prvAddNewTaskToReadyList+0x8c> @ imm = #0x3c
;                 if( xSchedulerRunning == pdFALSE )
 8055336: f240 1024    	movw	r0, #0x124
 805533a: f2c2 0000    	movt	r0, #0x2000
 805533e: 6800         	ldr	r0, [r0]
 8055340: b9b0         	cbnz	r0, 0x8055370 <prvAddNewTaskToReadyList+0x88> @ imm = #0x2c
 8055342: e7ff         	b	0x8055344 <prvAddNewTaskToReadyList+0x5c> @ imm = #-0x2
;                     if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8055344: f240 1000    	movw	r0, #0x100
 8055348: f2c2 0000    	movt	r0, #0x2000
 805534c: 6800         	ldr	r0, [r0]
 805534e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055352: 9901         	ldr	r1, [sp, #0x4]
 8055354: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055358: 4288         	cmp	r0, r1
 805535a: d807         	bhi	0x805536c <prvAddNewTaskToReadyList+0x84> @ imm = #0xe
 805535c: e7ff         	b	0x805535e <prvAddNewTaskToReadyList+0x76> @ imm = #-0x2
;                         pxCurrentTCB = pxNewTCB;
 805535e: 9801         	ldr	r0, [sp, #0x4]
 8055360: f240 1100    	movw	r1, #0x100
 8055364: f2c2 0100    	movt	r1, #0x2000
 8055368: 6008         	str	r0, [r1]
;                     }
 805536a: e000         	b	0x805536e <prvAddNewTaskToReadyList+0x86> @ imm = #0x0
 805536c: e7ff         	b	0x805536e <prvAddNewTaskToReadyList+0x86> @ imm = #-0x2
;                 }
 805536e: e000         	b	0x8055372 <prvAddNewTaskToReadyList+0x8a> @ imm = #0x0
 8055370: e7ff         	b	0x8055372 <prvAddNewTaskToReadyList+0x8a> @ imm = #-0x2
 8055372: e7ff         	b	0x8055374 <prvAddNewTaskToReadyList+0x8c> @ imm = #-0x2
;             uxTaskNumber++;
 8055374: f240 1004    	movw	r0, #0x104
 8055378: f2c2 0000    	movt	r0, #0x2000
 805537c: 6801         	ldr	r1, [r0]
 805537e: 3101         	adds	r1, #0x1
 8055380: 6001         	str	r1, [r0]
;                 pxNewTCB->uxTCBNumber = uxTaskNumber;
 8055382: 6800         	ldr	r0, [r0]
 8055384: 9901         	ldr	r1, [sp, #0x4]
 8055386: f8c1 00c0    	str.w	r0, [r1, #0xc0]
;             prvAddTaskToReadyList( pxNewTCB );
 805538a: e7ff         	b	0x805538c <prvAddNewTaskToReadyList+0xa4> @ imm = #-0x2
 805538c: e7ff         	b	0x805538e <prvAddNewTaskToReadyList+0xa6> @ imm = #-0x2
 805538e: 9801         	ldr	r0, [sp, #0x4]
 8055390: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055394: f240 21a0    	movw	r1, #0x2a0
 8055398: f2c2 0100    	movt	r1, #0x2000
 805539c: 6809         	ldr	r1, [r1]
 805539e: 4288         	cmp	r0, r1
 80553a0: d909         	bls	0x80553b6 <prvAddNewTaskToReadyList+0xce> @ imm = #0x12
 80553a2: e7ff         	b	0x80553a4 <prvAddNewTaskToReadyList+0xbc> @ imm = #-0x2
 80553a4: 9801         	ldr	r0, [sp, #0x4]
 80553a6: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80553aa: f240 21a0    	movw	r1, #0x2a0
 80553ae: f2c2 0100    	movt	r1, #0x2000
 80553b2: 6008         	str	r0, [r1]
 80553b4: e7ff         	b	0x80553b6 <prvAddNewTaskToReadyList+0xce> @ imm = #-0x2
 80553b6: e7ff         	b	0x80553b8 <prvAddNewTaskToReadyList+0xd0> @ imm = #-0x2
 80553b8: e7ff         	b	0x80553ba <prvAddNewTaskToReadyList+0xd2> @ imm = #-0x2
 80553ba: 9801         	ldr	r0, [sp, #0x4]
 80553bc: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80553c0: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80553c4: f240 1160    	movw	r1, #0x160
 80553c8: f2c2 0100    	movt	r1, #0x2000
 80553cc: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80553d0: 6840         	ldr	r0, [r0, #0x4]
 80553d2: 9000         	str	r0, [sp]
 80553d4: 9800         	ldr	r0, [sp]
 80553d6: 9a01         	ldr	r2, [sp, #0x4]
 80553d8: f8c2 0084    	str.w	r0, [r2, #0x84]
 80553dc: 9800         	ldr	r0, [sp]
 80553de: 6880         	ldr	r0, [r0, #0x8]
 80553e0: 9a01         	ldr	r2, [sp, #0x4]
 80553e2: f8c2 0088    	str.w	r0, [r2, #0x88]
 80553e6: 9801         	ldr	r0, [sp, #0x4]
 80553e8: 3080         	adds	r0, #0x80
 80553ea: 9a00         	ldr	r2, [sp]
 80553ec: 6892         	ldr	r2, [r2, #0x8]
 80553ee: 6050         	str	r0, [r2, #0x4]
 80553f0: 9801         	ldr	r0, [sp, #0x4]
 80553f2: 3080         	adds	r0, #0x80
 80553f4: 9a00         	ldr	r2, [sp]
 80553f6: 6090         	str	r0, [r2, #0x8]
 80553f8: 9a01         	ldr	r2, [sp, #0x4]
 80553fa: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80553fe: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055402: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055406: f8c2 0090    	str.w	r0, [r2, #0x90]
 805540a: 9801         	ldr	r0, [sp, #0x4]
 805540c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055410: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8055414: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8055418: 3001         	adds	r0, #0x1
 805541a: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805541e: e7ff         	b	0x8055420 <prvAddNewTaskToReadyList+0x138> @ imm = #-0x2
 8055420: e7ff         	b	0x8055422 <prvAddNewTaskToReadyList+0x13a> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8055422: 4812         	ldr	r0, [pc, #0x48]         @ 0x805546c <prvAddNewTaskToReadyList+0x184>
 8055424: 4780         	blx	r0
;         if( xSchedulerRunning != pdFALSE )
 8055426: f240 1024    	movw	r0, #0x124
 805542a: f2c2 0000    	movt	r0, #0x2000
 805542e: 6800         	ldr	r0, [r0]
 8055430: b1a0         	cbz	r0, 0x805545c <prvAddNewTaskToReadyList+0x174> @ imm = #0x28
 8055432: e7ff         	b	0x8055434 <prvAddNewTaskToReadyList+0x14c> @ imm = #-0x2
;             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8055434: e7ff         	b	0x8055436 <prvAddNewTaskToReadyList+0x14e> @ imm = #-0x2
 8055436: f240 1000    	movw	r0, #0x100
 805543a: f2c2 0000    	movt	r0, #0x2000
 805543e: 6800         	ldr	r0, [r0]
 8055440: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055444: 9901         	ldr	r1, [sp, #0x4]
 8055446: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 805544a: 4288         	cmp	r0, r1
 805544c: d203         	bhs	0x8055456 <prvAddNewTaskToReadyList+0x16e> @ imm = #0x6
 805544e: e7ff         	b	0x8055450 <prvAddNewTaskToReadyList+0x168> @ imm = #-0x2
 8055450: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8055470 <prvAddNewTaskToReadyList+0x188>
 8055452: 4780         	blx	r0
 8055454: e000         	b	0x8055458 <prvAddNewTaskToReadyList+0x170> @ imm = #0x0
 8055456: e7ff         	b	0x8055458 <prvAddNewTaskToReadyList+0x170> @ imm = #-0x2
;             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8055458: e7ff         	b	0x805545a <prvAddNewTaskToReadyList+0x172> @ imm = #-0x2
;         }
 805545a: e000         	b	0x805545e <prvAddNewTaskToReadyList+0x176> @ imm = #0x0
 805545c: e7ff         	b	0x805545e <prvAddNewTaskToReadyList+0x176> @ imm = #-0x2
;     }
 805545e: b002         	add	sp, #0x8
 8055460: bd80         	pop	{r7, pc}
 8055462: bf00         	nop

08055464 <$d.5>:
 8055464: 19 c4 05 08  	.word	0x0805c419
 8055468: f1 85 05 08  	.word	0x080585f1
 805546c: 3d c4 05 08  	.word	0x0805c43d
 8055470: ff c3 05 08  	.word	0x0805c3ff

08055474 <xTaskCreate>:
;     {
 8055474: b5d0         	push	{r4, r6, r7, lr}
 8055476: af02         	add	r7, sp, #0x8
 8055478: b088         	sub	sp, #0x20
 805547a: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 805547e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8055482: 9007         	str	r0, [sp, #0x1c]
 8055484: 9106         	str	r1, [sp, #0x18]
 8055486: f827 2c12    	strh	r2, [r7, #-18]
 805548a: 9304         	str	r3, [sp, #0x10]
;         pxNewTCB = prvCreateTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 805548c: 9807         	ldr	r0, [sp, #0x1c]
 805548e: 9906         	ldr	r1, [sp, #0x18]
 8055490: f837 2c12    	ldrh	r2, [r7, #-18]
 8055494: 9b04         	ldr	r3, [sp, #0x10]
 8055496: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805549a: 68fc         	ldr	r4, [r7, #0xc]
 805549c: 46ee         	mov	lr, sp
 805549e: f8ce 4004    	str.w	r4, [lr, #0x4]
 80554a2: f8ce c000    	str.w	r12, [lr]
 80554a6: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x80554d0 <xTaskCreate+0x5c>
 80554aa: 47e0         	blx	r12
 80554ac: 9003         	str	r0, [sp, #0xc]
;         if( pxNewTCB != NULL )
 80554ae: 9803         	ldr	r0, [sp, #0xc]
 80554b0: b130         	cbz	r0, 0x80554c0 <xTaskCreate+0x4c> @ imm = #0xc
 80554b2: e7ff         	b	0x80554b4 <xTaskCreate+0x40> @ imm = #-0x2
;             prvAddNewTaskToReadyList( pxNewTCB );
 80554b4: 9803         	ldr	r0, [sp, #0xc]
 80554b6: 4907         	ldr	r1, [pc, #0x1c]         @ 0x80554d4 <xTaskCreate+0x60>
 80554b8: 4788         	blx	r1
 80554ba: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 80554bc: 9002         	str	r0, [sp, #0x8]
;         }
 80554be: e003         	b	0x80554c8 <xTaskCreate+0x54> @ imm = #0x6
 80554c0: f04f 30ff    	mov.w	r0, #0xffffffff
;             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80554c4: 9002         	str	r0, [sp, #0x8]
 80554c6: e7ff         	b	0x80554c8 <xTaskCreate+0x54> @ imm = #-0x2
;         return xReturn;
 80554c8: 9802         	ldr	r0, [sp, #0x8]
 80554ca: b008         	add	sp, #0x20
 80554cc: bdd0         	pop	{r4, r6, r7, pc}
 80554ce: bf00         	nop

080554d0 <$d.7>:
 80554d0: d9 54 05 08  	.word	0x080554d9
 80554d4: e9 52 05 08  	.word	0x080552e9

080554d8 <prvCreateTask>:
;     {
 80554d8: b5f0         	push	{r4, r5, r6, r7, lr}
 80554da: af03         	add	r7, sp, #0xc
 80554dc: f84d bd04    	str	r11, [sp, #-4]!
 80554e0: b08a         	sub	sp, #0x28
 80554e2: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80554e6: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80554ea: 9009         	str	r0, [sp, #0x24]
 80554ec: 9108         	str	r1, [sp, #0x20]
 80554ee: f827 2c1a    	strh	r2, [r7, #-26]
 80554f2: 9306         	str	r3, [sp, #0x18]
;             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80554f4: f837 0c1a    	ldrh	r0, [r7, #-26]
 80554f8: 0080         	lsls	r0, r0, #0x2
 80554fa: 4920         	ldr	r1, [pc, #0x80]         @ 0x805557c <prvCreateTask+0xa4>
 80554fc: 4788         	blx	r1
 80554fe: 9004         	str	r0, [sp, #0x10]
;             if( pxStack != NULL )
 8055500: 9804         	ldr	r0, [sp, #0x10]
 8055502: b1b0         	cbz	r0, 0x8055532 <prvCreateTask+0x5a> @ imm = #0x2c
 8055504: e7ff         	b	0x8055506 <prvCreateTask+0x2e> @ imm = #-0x2
;                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8055506: 491e         	ldr	r1, [pc, #0x78]         @ 0x8055580 <prvCreateTask+0xa8>
 8055508: 20d8         	movs	r0, #0xd8
 805550a: 4788         	blx	r1
 805550c: 9005         	str	r0, [sp, #0x14]
;                 if( pxNewTCB != NULL )
 805550e: 9805         	ldr	r0, [sp, #0x14]
 8055510: b150         	cbz	r0, 0x8055528 <prvCreateTask+0x50> @ imm = #0x14
 8055512: e7ff         	b	0x8055514 <prvCreateTask+0x3c> @ imm = #-0x2
;                     ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8055514: 9805         	ldr	r0, [sp, #0x14]
 8055516: 4b1c         	ldr	r3, [pc, #0x70]         @ 0x8055588 <prvCreateTask+0xb0>
 8055518: 2100         	movs	r1, #0x0
 805551a: 22d8         	movs	r2, #0xd8
 805551c: 4798         	blx	r3
;                     pxNewTCB->pxStack = pxStack;
 805551e: 9804         	ldr	r0, [sp, #0x10]
 8055520: 9905         	ldr	r1, [sp, #0x14]
 8055522: f8c1 00ac    	str.w	r0, [r1, #0xac]
;                 }
 8055526: e003         	b	0x8055530 <prvCreateTask+0x58> @ imm = #0x6
;                     vPortFreeStack( pxStack );
 8055528: 9804         	ldr	r0, [sp, #0x10]
 805552a: 4916         	ldr	r1, [pc, #0x58]         @ 0x8055584 <prvCreateTask+0xac>
 805552c: 4788         	blx	r1
 805552e: e7ff         	b	0x8055530 <prvCreateTask+0x58> @ imm = #-0x2
;             }
 8055530: e002         	b	0x8055538 <prvCreateTask+0x60> @ imm = #0x4
 8055532: 2000         	movs	r0, #0x0
;                 pxNewTCB = NULL;
 8055534: 9005         	str	r0, [sp, #0x14]
 8055536: e7ff         	b	0x8055538 <prvCreateTask+0x60> @ imm = #-0x2
;         if( pxNewTCB != NULL )
 8055538: 9805         	ldr	r0, [sp, #0x14]
 805553a: b1d0         	cbz	r0, 0x8055572 <prvCreateTask+0x9a> @ imm = #0x34
 805553c: e7ff         	b	0x805553e <prvCreateTask+0x66> @ imm = #-0x2
;                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805553e: 9805         	ldr	r0, [sp, #0x14]
 8055540: 2600         	movs	r6, #0x0
 8055542: f880 60d5    	strb.w	r6, [r0, #0xd5]
;             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8055546: 9809         	ldr	r0, [sp, #0x24]
 8055548: 9908         	ldr	r1, [sp, #0x20]
 805554a: f837 2c1a    	ldrh	r2, [r7, #-26]
 805554e: 9b06         	ldr	r3, [sp, #0x18]
 8055550: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8055554: 68fc         	ldr	r4, [r7, #0xc]
 8055556: 9d05         	ldr	r5, [sp, #0x14]
 8055558: 46ee         	mov	lr, sp
 805555a: f8ce 600c    	str.w	r6, [lr, #0xc]
 805555e: f8ce 5008    	str.w	r5, [lr, #0x8]
 8055562: f8ce 4004    	str.w	r4, [lr, #0x4]
 8055566: f8ce c000    	str.w	r12, [lr]
 805556a: f8df c020    	ldr.w	r12, [pc, #0x20]        @ 0x805558c <prvCreateTask+0xb4>
 805556e: 47e0         	blx	r12
;         }
 8055570: e7ff         	b	0x8055572 <prvCreateTask+0x9a> @ imm = #-0x2
;         return pxNewTCB;
 8055572: 9805         	ldr	r0, [sp, #0x14]
 8055574: b00a         	add	sp, #0x28
 8055576: f85d bb04    	ldr	r11, [sp], #4
 805557a: bdf0         	pop	{r4, r5, r6, r7, pc}

0805557c <$d.9>:
 805557c: dd 91 05 08  	.word	0x080591dd
 8055580: dd 91 05 08  	.word	0x080591dd
 8055584: 61 95 05 08  	.word	0x08059561
 8055588: cd eb 05 08  	.word	0x0805ebcd
 805558c: 71 84 05 08  	.word	0x08058471

08055590 <vTaskDelete>:
;     {
 8055590: b580         	push	{r7, lr}
 8055592: 466f         	mov	r7, sp
 8055594: b084         	sub	sp, #0x10
 8055596: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 8055598: 483f         	ldr	r0, [pc, #0xfc]         @ 0x8055698 <vTaskDelete+0x108>
 805559a: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 805559c: 9803         	ldr	r0, [sp, #0xc]
 805559e: b938         	cbnz	r0, 0x80555b0 <vTaskDelete+0x20> @ imm = #0xe
 80555a0: e7ff         	b	0x80555a2 <vTaskDelete+0x12> @ imm = #-0x2
 80555a2: f240 1000    	movw	r0, #0x100
 80555a6: f2c2 0000    	movt	r0, #0x2000
 80555aa: 6800         	ldr	r0, [r0]
 80555ac: 9001         	str	r0, [sp, #0x4]
 80555ae: e002         	b	0x80555b6 <vTaskDelete+0x26> @ imm = #0x4
 80555b0: 9803         	ldr	r0, [sp, #0xc]
 80555b2: 9001         	str	r0, [sp, #0x4]
 80555b4: e7ff         	b	0x80555b6 <vTaskDelete+0x26> @ imm = #-0x2
 80555b6: 9801         	ldr	r0, [sp, #0x4]
 80555b8: 9002         	str	r0, [sp, #0x8]
;             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80555ba: 9802         	ldr	r0, [sp, #0x8]
 80555bc: 3080         	adds	r0, #0x80
 80555be: 4937         	ldr	r1, [pc, #0xdc]         @ 0x805569c <vTaskDelete+0x10c>
 80555c0: 4788         	blx	r1
 80555c2: b908         	cbnz	r0, 0x80555c8 <vTaskDelete+0x38> @ imm = #0x2
 80555c4: e7ff         	b	0x80555c6 <vTaskDelete+0x36> @ imm = #-0x2
;             }
 80555c6: e000         	b	0x80555ca <vTaskDelete+0x3a> @ imm = #0x0
 80555c8: e7ff         	b	0x80555ca <vTaskDelete+0x3a> @ imm = #-0x2
;             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80555ca: 9802         	ldr	r0, [sp, #0x8]
 80555cc: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80555d0: b128         	cbz	r0, 0x80555de <vTaskDelete+0x4e> @ imm = #0xa
 80555d2: e7ff         	b	0x80555d4 <vTaskDelete+0x44> @ imm = #-0x2
;                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80555d4: 9802         	ldr	r0, [sp, #0x8]
 80555d6: 3094         	adds	r0, #0x94
 80555d8: 4931         	ldr	r1, [pc, #0xc4]         @ 0x80556a0 <vTaskDelete+0x110>
 80555da: 4788         	blx	r1
;             }
 80555dc: e000         	b	0x80555e0 <vTaskDelete+0x50> @ imm = #0x0
 80555de: e7ff         	b	0x80555e0 <vTaskDelete+0x50> @ imm = #-0x2
;             uxTaskNumber++;
 80555e0: f240 1104    	movw	r1, #0x104
 80555e4: f2c2 0100    	movt	r1, #0x2000
 80555e8: 6808         	ldr	r0, [r1]
 80555ea: 3001         	adds	r0, #0x1
 80555ec: 6008         	str	r0, [r1]
;             if( taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB ) != pdFALSE )
 80555ee: 9802         	ldr	r0, [sp, #0x8]
 80555f0: f240 1100    	movw	r1, #0x100
 80555f4: f2c2 0100    	movt	r1, #0x2000
 80555f8: 6809         	ldr	r1, [r1]
 80555fa: 4288         	cmp	r0, r1
 80555fc: d111         	bne	0x8055622 <vTaskDelete+0x92> @ imm = #0x22
 80555fe: e7ff         	b	0x8055600 <vTaskDelete+0x70> @ imm = #-0x2
;                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8055600: 9802         	ldr	r0, [sp, #0x8]
 8055602: f100 0180    	add.w	r1, r0, #0x80
 8055606: f240 1008    	movw	r0, #0x108
 805560a: f2c2 0000    	movt	r0, #0x2000
 805560e: 4a26         	ldr	r2, [pc, #0x98]         @ 0x80556a8 <vTaskDelete+0x118>
 8055610: 4790         	blx	r2
;                 ++uxDeletedTasksWaitingCleanUp;
 8055612: f240 111c    	movw	r1, #0x11c
 8055616: f2c2 0100    	movt	r1, #0x2000
 805561a: 6808         	ldr	r0, [r1]
 805561c: 3001         	adds	r0, #0x1
 805561e: 6008         	str	r0, [r1]
;             }
 8055620: e009         	b	0x8055636 <vTaskDelete+0xa6> @ imm = #0x12
;                 --uxCurrentNumberOfTasks;
 8055622: f240 1120    	movw	r1, #0x120
 8055626: f2c2 0100    	movt	r1, #0x2000
 805562a: 6808         	ldr	r0, [r1]
 805562c: 3801         	subs	r0, #0x1
 805562e: 6008         	str	r0, [r1]
;                 prvResetNextTaskUnblockTime();
 8055630: 481c         	ldr	r0, [pc, #0x70]         @ 0x80556a4 <vTaskDelete+0x114>
 8055632: 4780         	blx	r0
 8055634: e7ff         	b	0x8055636 <vTaskDelete+0xa6> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 8055636: 481d         	ldr	r0, [pc, #0x74]         @ 0x80556ac <vTaskDelete+0x11c>
 8055638: 4780         	blx	r0
;             if( pxTCB != pxCurrentTCB )
 805563a: 9802         	ldr	r0, [sp, #0x8]
 805563c: f240 1100    	movw	r1, #0x100
 8055640: f2c2 0100    	movt	r1, #0x2000
 8055644: 6809         	ldr	r1, [r1]
 8055646: 4288         	cmp	r0, r1
 8055648: d004         	beq	0x8055654 <vTaskDelete+0xc4> @ imm = #0x8
 805564a: e7ff         	b	0x805564c <vTaskDelete+0xbc> @ imm = #-0x2
;                 prvDeleteTCB( pxTCB );
 805564c: 9802         	ldr	r0, [sp, #0x8]
 805564e: 4918         	ldr	r1, [pc, #0x60]         @ 0x80556b0 <vTaskDelete+0x120>
 8055650: 4788         	blx	r1
;             }
 8055652: e7ff         	b	0x8055654 <vTaskDelete+0xc4> @ imm = #-0x2
;             if( xSchedulerRunning != pdFALSE )
 8055654: f240 1024    	movw	r0, #0x124
 8055658: f2c2 0000    	movt	r0, #0x2000
 805565c: 6800         	ldr	r0, [r0]
 805565e: b1c8         	cbz	r0, 0x8055694 <vTaskDelete+0x104> @ imm = #0x32
 8055660: e7ff         	b	0x8055662 <vTaskDelete+0xd2> @ imm = #-0x2
;                 if( pxTCB == pxCurrentTCB )
 8055662: 9802         	ldr	r0, [sp, #0x8]
 8055664: f240 1100    	movw	r1, #0x100
 8055668: f2c2 0100    	movt	r1, #0x2000
 805566c: 6809         	ldr	r1, [r1]
 805566e: 4288         	cmp	r0, r1
 8055670: d10e         	bne	0x8055690 <vTaskDelete+0x100> @ imm = #0x1c
 8055672: e7ff         	b	0x8055674 <vTaskDelete+0xe4> @ imm = #-0x2
;                     configASSERT( uxSchedulerSuspended == 0 );
 8055674: f240 1028    	movw	r0, #0x128
 8055678: f2c2 0000    	movt	r0, #0x2000
 805567c: 6800         	ldr	r0, [r0]
 805567e: b120         	cbz	r0, 0x805568a <vTaskDelete+0xfa> @ imm = #0x8
 8055680: e7ff         	b	0x8055682 <vTaskDelete+0xf2> @ imm = #-0x2
 8055682: 480d         	ldr	r0, [pc, #0x34]         @ 0x80556b8 <vTaskDelete+0x128>
 8055684: 4780         	blx	r0
 8055686: e7ff         	b	0x8055688 <vTaskDelete+0xf8> @ imm = #-0x2
 8055688: e7fe         	b	0x8055688 <vTaskDelete+0xf8> @ imm = #-0x4
;                     portYIELD_WITHIN_API();
 805568a: 480a         	ldr	r0, [pc, #0x28]         @ 0x80556b4 <vTaskDelete+0x124>
 805568c: 4780         	blx	r0
;                 }
 805568e: e000         	b	0x8055692 <vTaskDelete+0x102> @ imm = #0x0
 8055690: e7ff         	b	0x8055692 <vTaskDelete+0x102> @ imm = #-0x2
;             }
 8055692: e7ff         	b	0x8055694 <vTaskDelete+0x104> @ imm = #-0x2
;     }
 8055694: b004         	add	sp, #0x10
 8055696: bd80         	pop	{r7, pc}

08055698 <$d.11>:
 8055698: 19 c4 05 08  	.word	0x0805c419
 805569c: 33 9f 05 08  	.word	0x08059f33
 80556a0: 33 9f 05 08  	.word	0x08059f33
 80556a4: bd 56 05 08  	.word	0x080556bd
 80556a8: 8f 9e 05 08  	.word	0x08059e8f
 80556ac: 3d c4 05 08  	.word	0x0805c43d
 80556b0: f9 56 05 08  	.word	0x080556f9
 80556b4: ff c3 05 08  	.word	0x0805c3ff
 80556b8: 55 cd 05 08  	.word	0x0805cd55

080556bc <prvResetNextTaskUnblockTime>:
;     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80556bc: f240 1030    	movw	r0, #0x130
 80556c0: f2c2 0000    	movt	r0, #0x2000
 80556c4: 6800         	ldr	r0, [r0]
 80556c6: 6800         	ldr	r0, [r0]
 80556c8: b940         	cbnz	r0, 0x80556dc <prvResetNextTaskUnblockTime+0x20> @ imm = #0x10
 80556ca: e7ff         	b	0x80556cc <prvResetNextTaskUnblockTime+0x10> @ imm = #-0x2
;         xNextTaskUnblockTime = portMAX_DELAY;
 80556cc: f240 21a8    	movw	r1, #0x2a8
 80556d0: f2c2 0100    	movt	r1, #0x2000
 80556d4: f04f 30ff    	mov.w	r0, #0xffffffff
 80556d8: 6008         	str	r0, [r1]
;     }
 80556da: e00c         	b	0x80556f6 <prvResetNextTaskUnblockTime+0x3a> @ imm = #0x18
;         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80556dc: f240 1030    	movw	r0, #0x130
 80556e0: f2c2 0000    	movt	r0, #0x2000
 80556e4: 6800         	ldr	r0, [r0]
 80556e6: 68c0         	ldr	r0, [r0, #0xc]
 80556e8: 6800         	ldr	r0, [r0]
 80556ea: f240 21a8    	movw	r1, #0x2a8
 80556ee: f2c2 0100    	movt	r1, #0x2000
 80556f2: 6008         	str	r0, [r1]
 80556f4: e7ff         	b	0x80556f6 <prvResetNextTaskUnblockTime+0x3a> @ imm = #-0x2
; }
 80556f6: 4770         	bx	lr

080556f8 <prvDeleteTCB>:
;     {
 80556f8: b580         	push	{r7, lr}
 80556fa: 466f         	mov	r7, sp
 80556fc: b082         	sub	sp, #0x8
 80556fe: 9001         	str	r0, [sp, #0x4]
;         portCLEAN_UP_TCB( pxTCB );
 8055700: 9801         	ldr	r0, [sp, #0x4]
;             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8055702: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 8055706: b948         	cbnz	r0, 0x805571c <prvDeleteTCB+0x24> @ imm = #0x12
 8055708: e7ff         	b	0x805570a <prvDeleteTCB+0x12> @ imm = #-0x2
;                 vPortFreeStack( pxTCB->pxStack );
 805570a: 9801         	ldr	r0, [sp, #0x4]
 805570c: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8055710: 4910         	ldr	r1, [pc, #0x40]         @ 0x8055754 <prvDeleteTCB+0x5c>
 8055712: 4788         	blx	r1
;                 vPortFree( pxTCB );
 8055714: 9801         	ldr	r0, [sp, #0x4]
 8055716: 4910         	ldr	r1, [pc, #0x40]         @ 0x8055758 <prvDeleteTCB+0x60>
 8055718: 4788         	blx	r1
;             }
 805571a: e015         	b	0x8055748 <prvDeleteTCB+0x50> @ imm = #0x2a
;             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 805571c: 9801         	ldr	r0, [sp, #0x4]
 805571e: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 8055722: 2801         	cmp	r0, #0x1
 8055724: d104         	bne	0x8055730 <prvDeleteTCB+0x38> @ imm = #0x8
 8055726: e7ff         	b	0x8055728 <prvDeleteTCB+0x30> @ imm = #-0x2
;                 vPortFree( pxTCB );
 8055728: 9801         	ldr	r0, [sp, #0x4]
 805572a: 4909         	ldr	r1, [pc, #0x24]         @ 0x8055750 <prvDeleteTCB+0x58>
 805572c: 4788         	blx	r1
;             }
 805572e: e00a         	b	0x8055746 <prvDeleteTCB+0x4e> @ imm = #0x14
;                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8055730: 9801         	ldr	r0, [sp, #0x4]
 8055732: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 8055736: 2802         	cmp	r0, #0x2
 8055738: d004         	beq	0x8055744 <prvDeleteTCB+0x4c> @ imm = #0x8
 805573a: e7ff         	b	0x805573c <prvDeleteTCB+0x44> @ imm = #-0x2
 805573c: 4803         	ldr	r0, [pc, #0xc]          @ 0x805574c <prvDeleteTCB+0x54>
 805573e: 4780         	blx	r0
 8055740: e7ff         	b	0x8055742 <prvDeleteTCB+0x4a> @ imm = #-0x2
 8055742: e7fe         	b	0x8055742 <prvDeleteTCB+0x4a> @ imm = #-0x4
 8055744: e7ff         	b	0x8055746 <prvDeleteTCB+0x4e> @ imm = #-0x2
 8055746: e7ff         	b	0x8055748 <prvDeleteTCB+0x50> @ imm = #-0x2
;     }
 8055748: b002         	add	sp, #0x8
 805574a: bd80         	pop	{r7, pc}

0805574c <$d.13>:
 805574c: 55 cd 05 08  	.word	0x0805cd55
 8055750: 61 95 05 08  	.word	0x08059561
 8055754: 61 95 05 08  	.word	0x08059561
 8055758: 61 95 05 08  	.word	0x08059561

0805575c <xTaskDelayUntil>:
;     {
 805575c: b580         	push	{r7, lr}
 805575e: 466f         	mov	r7, sp
 8055760: b086         	sub	sp, #0x18
 8055762: 9005         	str	r0, [sp, #0x14]
 8055764: 9104         	str	r1, [sp, #0x10]
 8055766: 2000         	movs	r0, #0x0
;         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8055768: 9001         	str	r0, [sp, #0x4]
;         configASSERT( pxPreviousWakeTime );
 805576a: 9805         	ldr	r0, [sp, #0x14]
 805576c: b920         	cbnz	r0, 0x8055778 <xTaskDelayUntil+0x1c> @ imm = #0x8
 805576e: e7ff         	b	0x8055770 <xTaskDelayUntil+0x14> @ imm = #-0x2
 8055770: 4838         	ldr	r0, [pc, #0xe0]         @ 0x8055854 <xTaskDelayUntil+0xf8>
 8055772: 4780         	blx	r0
 8055774: e7ff         	b	0x8055776 <xTaskDelayUntil+0x1a> @ imm = #-0x2
 8055776: e7fe         	b	0x8055776 <xTaskDelayUntil+0x1a> @ imm = #-0x4
;         configASSERT( ( xTimeIncrement > 0U ) );
 8055778: 9804         	ldr	r0, [sp, #0x10]
 805577a: b920         	cbnz	r0, 0x8055786 <xTaskDelayUntil+0x2a> @ imm = #0x8
 805577c: e7ff         	b	0x805577e <xTaskDelayUntil+0x22> @ imm = #-0x2
 805577e: 4834         	ldr	r0, [pc, #0xd0]         @ 0x8055850 <xTaskDelayUntil+0xf4>
 8055780: 4780         	blx	r0
 8055782: e7ff         	b	0x8055784 <xTaskDelayUntil+0x28> @ imm = #-0x2
 8055784: e7fe         	b	0x8055784 <xTaskDelayUntil+0x28> @ imm = #-0x4
;         vTaskSuspendAll();
 8055786: 482d         	ldr	r0, [pc, #0xb4]         @ 0x805583c <xTaskDelayUntil+0xe0>
 8055788: 4780         	blx	r0
;             const TickType_t xConstTickCount = xTickCount;
 805578a: f240 102c    	movw	r0, #0x12c
 805578e: f2c2 0000    	movt	r0, #0x2000
 8055792: 6800         	ldr	r0, [r0]
 8055794: 9000         	str	r0, [sp]
;             configASSERT( uxSchedulerSuspended == 1U );
 8055796: f240 1028    	movw	r0, #0x128
 805579a: f2c2 0000    	movt	r0, #0x2000
 805579e: 6800         	ldr	r0, [r0]
 80557a0: 2801         	cmp	r0, #0x1
 80557a2: d004         	beq	0x80557ae <xTaskDelayUntil+0x52> @ imm = #0x8
 80557a4: e7ff         	b	0x80557a6 <xTaskDelayUntil+0x4a> @ imm = #-0x2
 80557a6: 4829         	ldr	r0, [pc, #0xa4]         @ 0x805584c <xTaskDelayUntil+0xf0>
 80557a8: 4780         	blx	r0
 80557aa: e7ff         	b	0x80557ac <xTaskDelayUntil+0x50> @ imm = #-0x2
 80557ac: e7fe         	b	0x80557ac <xTaskDelayUntil+0x50> @ imm = #-0x4
;             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80557ae: 9805         	ldr	r0, [sp, #0x14]
 80557b0: 6800         	ldr	r0, [r0]
 80557b2: 9904         	ldr	r1, [sp, #0x10]
 80557b4: 4408         	add	r0, r1
 80557b6: 9003         	str	r0, [sp, #0xc]
;             if( xConstTickCount < *pxPreviousWakeTime )
 80557b8: 9800         	ldr	r0, [sp]
 80557ba: 9905         	ldr	r1, [sp, #0x14]
 80557bc: 6809         	ldr	r1, [r1]
 80557be: 4288         	cmp	r0, r1
 80557c0: d210         	bhs	0x80557e4 <xTaskDelayUntil+0x88> @ imm = #0x20
 80557c2: e7ff         	b	0x80557c4 <xTaskDelayUntil+0x68> @ imm = #-0x2
;                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80557c4: 9803         	ldr	r0, [sp, #0xc]
 80557c6: 9905         	ldr	r1, [sp, #0x14]
 80557c8: 6809         	ldr	r1, [r1]
 80557ca: 4288         	cmp	r0, r1
 80557cc: d208         	bhs	0x80557e0 <xTaskDelayUntil+0x84> @ imm = #0x10
 80557ce: e7ff         	b	0x80557d0 <xTaskDelayUntil+0x74> @ imm = #-0x2
 80557d0: 9803         	ldr	r0, [sp, #0xc]
 80557d2: 9900         	ldr	r1, [sp]
 80557d4: 4288         	cmp	r0, r1
 80557d6: d903         	bls	0x80557e0 <xTaskDelayUntil+0x84> @ imm = #0x6
 80557d8: e7ff         	b	0x80557da <xTaskDelayUntil+0x7e> @ imm = #-0x2
 80557da: 2001         	movs	r0, #0x1
;                     xShouldDelay = pdTRUE;
 80557dc: 9001         	str	r0, [sp, #0x4]
;                 }
 80557de: e000         	b	0x80557e2 <xTaskDelayUntil+0x86> @ imm = #0x0
 80557e0: e7ff         	b	0x80557e2 <xTaskDelayUntil+0x86> @ imm = #-0x2
;             }
 80557e2: e00f         	b	0x8055804 <xTaskDelayUntil+0xa8> @ imm = #0x1e
;                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80557e4: 9803         	ldr	r0, [sp, #0xc]
 80557e6: 9905         	ldr	r1, [sp, #0x14]
 80557e8: 6809         	ldr	r1, [r1]
 80557ea: 4288         	cmp	r0, r1
 80557ec: d305         	blo	0x80557fa <xTaskDelayUntil+0x9e> @ imm = #0xa
 80557ee: e7ff         	b	0x80557f0 <xTaskDelayUntil+0x94> @ imm = #-0x2
 80557f0: 9803         	ldr	r0, [sp, #0xc]
 80557f2: 9900         	ldr	r1, [sp]
 80557f4: 4288         	cmp	r0, r1
 80557f6: d903         	bls	0x8055800 <xTaskDelayUntil+0xa4> @ imm = #0x6
 80557f8: e7ff         	b	0x80557fa <xTaskDelayUntil+0x9e> @ imm = #-0x2
 80557fa: 2001         	movs	r0, #0x1
;                     xShouldDelay = pdTRUE;
 80557fc: 9001         	str	r0, [sp, #0x4]
;                 }
 80557fe: e000         	b	0x8055802 <xTaskDelayUntil+0xa6> @ imm = #0x0
 8055800: e7ff         	b	0x8055802 <xTaskDelayUntil+0xa6> @ imm = #-0x2
 8055802: e7ff         	b	0x8055804 <xTaskDelayUntil+0xa8> @ imm = #-0x2
;             *pxPreviousWakeTime = xTimeToWake;
 8055804: 9803         	ldr	r0, [sp, #0xc]
 8055806: 9905         	ldr	r1, [sp, #0x14]
 8055808: 6008         	str	r0, [r1]
;             if( xShouldDelay != pdFALSE )
 805580a: 9801         	ldr	r0, [sp, #0x4]
 805580c: b138         	cbz	r0, 0x805581e <xTaskDelayUntil+0xc2> @ imm = #0xe
 805580e: e7ff         	b	0x8055810 <xTaskDelayUntil+0xb4> @ imm = #-0x2
;                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8055810: 9803         	ldr	r0, [sp, #0xc]
 8055812: 9900         	ldr	r1, [sp]
 8055814: 1a40         	subs	r0, r0, r1
 8055816: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x8055840 <xTaskDelayUntil+0xe4>
 8055818: 2100         	movs	r1, #0x0
 805581a: 4790         	blx	r2
;             }
 805581c: e000         	b	0x8055820 <xTaskDelayUntil+0xc4> @ imm = #0x0
 805581e: e7ff         	b	0x8055820 <xTaskDelayUntil+0xc4> @ imm = #-0x2
;         xAlreadyYielded = xTaskResumeAll();
 8055820: 4808         	ldr	r0, [pc, #0x20]         @ 0x8055844 <xTaskDelayUntil+0xe8>
 8055822: 4780         	blx	r0
 8055824: 9002         	str	r0, [sp, #0x8]
;         if( xAlreadyYielded == pdFALSE )
 8055826: 9802         	ldr	r0, [sp, #0x8]
 8055828: b918         	cbnz	r0, 0x8055832 <xTaskDelayUntil+0xd6> @ imm = #0x6
 805582a: e7ff         	b	0x805582c <xTaskDelayUntil+0xd0> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 805582c: 4806         	ldr	r0, [pc, #0x18]         @ 0x8055848 <xTaskDelayUntil+0xec>
 805582e: 4780         	blx	r0
;         }
 8055830: e000         	b	0x8055834 <xTaskDelayUntil+0xd8> @ imm = #0x0
 8055832: e7ff         	b	0x8055834 <xTaskDelayUntil+0xd8> @ imm = #-0x2
;         return xShouldDelay;
 8055834: 9801         	ldr	r0, [sp, #0x4]
 8055836: b006         	add	sp, #0x18
 8055838: bd80         	pop	{r7, pc}
 805583a: bf00         	nop

0805583c <$d.15>:
 805583c: 59 58 05 08  	.word	0x08055859
 8055840: 69 58 05 08  	.word	0x08055869
 8055844: 7d 59 05 08  	.word	0x0805597d
 8055848: ff c3 05 08  	.word	0x0805c3ff
 805584c: 55 cd 05 08  	.word	0x0805cd55
 8055850: 55 cd 05 08  	.word	0x0805cd55
 8055854: 55 cd 05 08  	.word	0x0805cd55

08055858 <vTaskSuspendAll>:
;         ++uxSchedulerSuspended;
 8055858: f240 1128    	movw	r1, #0x128
 805585c: f2c2 0100    	movt	r1, #0x2000
 8055860: 6808         	ldr	r0, [r1]
 8055862: 3001         	adds	r0, #0x1
 8055864: 6008         	str	r0, [r1]
; }
 8055866: 4770         	bx	lr

08055868 <prvAddCurrentTaskToDelayedList>:
; {
 8055868: b580         	push	{r7, lr}
 805586a: 466f         	mov	r7, sp
 805586c: b086         	sub	sp, #0x18
 805586e: 9005         	str	r0, [sp, #0x14]
 8055870: 9104         	str	r1, [sp, #0x10]
;     const TickType_t xConstTickCount = xTickCount;
 8055872: f240 102c    	movw	r0, #0x12c
 8055876: f2c2 0000    	movt	r0, #0x2000
 805587a: 6800         	ldr	r0, [r0]
 805587c: 9002         	str	r0, [sp, #0x8]
;     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805587e: f240 1000    	movw	r0, #0x100
 8055882: f2c2 0000    	movt	r0, #0x2000
 8055886: 6800         	ldr	r0, [r0]
 8055888: 3080         	adds	r0, #0x80
 805588a: 4939         	ldr	r1, [pc, #0xe4]         @ 0x8055970 <prvAddCurrentTaskToDelayedList+0x108>
 805588c: 4788         	blx	r1
 805588e: b908         	cbnz	r0, 0x8055894 <prvAddCurrentTaskToDelayedList+0x2c> @ imm = #0x2
 8055890: e7ff         	b	0x8055892 <prvAddCurrentTaskToDelayedList+0x2a> @ imm = #-0x2
;     }
 8055892: e000         	b	0x8055896 <prvAddCurrentTaskToDelayedList+0x2e> @ imm = #0x0
 8055894: e7ff         	b	0x8055896 <prvAddCurrentTaskToDelayedList+0x2e> @ imm = #-0x2
;         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8055896: 9805         	ldr	r0, [sp, #0x14]
 8055898: 3001         	adds	r0, #0x1
 805589a: bb40         	cbnz	r0, 0x80558ee <prvAddCurrentTaskToDelayedList+0x86> @ imm = #0x50
 805589c: e7ff         	b	0x805589e <prvAddCurrentTaskToDelayedList+0x36> @ imm = #-0x2
 805589e: 9804         	ldr	r0, [sp, #0x10]
 80558a0: b328         	cbz	r0, 0x80558ee <prvAddCurrentTaskToDelayedList+0x86> @ imm = #0x4a
 80558a2: e7ff         	b	0x80558a4 <prvAddCurrentTaskToDelayedList+0x3c> @ imm = #-0x2
;             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80558a4: e7ff         	b	0x80558a6 <prvAddCurrentTaskToDelayedList+0x3e> @ imm = #-0x2
 80558a6: f240 114c    	movw	r1, #0x14c
 80558aa: f2c2 0100    	movt	r1, #0x2000
 80558ae: 6848         	ldr	r0, [r1, #0x4]
 80558b0: 9001         	str	r0, [sp, #0x4]
 80558b2: 9a01         	ldr	r2, [sp, #0x4]
 80558b4: f240 1000    	movw	r0, #0x100
 80558b8: f2c2 0000    	movt	r0, #0x2000
 80558bc: 6803         	ldr	r3, [r0]
 80558be: f8c3 2084    	str.w	r2, [r3, #0x84]
 80558c2: 9a01         	ldr	r2, [sp, #0x4]
 80558c4: 6892         	ldr	r2, [r2, #0x8]
 80558c6: 6803         	ldr	r3, [r0]
 80558c8: f8c3 2088    	str.w	r2, [r3, #0x88]
 80558cc: 6802         	ldr	r2, [r0]
 80558ce: 3280         	adds	r2, #0x80
 80558d0: 9b01         	ldr	r3, [sp, #0x4]
 80558d2: 689b         	ldr	r3, [r3, #0x8]
 80558d4: 605a         	str	r2, [r3, #0x4]
 80558d6: 6802         	ldr	r2, [r0]
 80558d8: 3280         	adds	r2, #0x80
 80558da: 9b01         	ldr	r3, [sp, #0x4]
 80558dc: 609a         	str	r2, [r3, #0x8]
 80558de: 6800         	ldr	r0, [r0]
 80558e0: f8c0 1090    	str.w	r1, [r0, #0x90]
 80558e4: 6808         	ldr	r0, [r1]
 80558e6: 3001         	adds	r0, #0x1
 80558e8: 6008         	str	r0, [r1]
 80558ea: e7ff         	b	0x80558ec <prvAddCurrentTaskToDelayedList+0x84> @ imm = #-0x2
;         }
 80558ec: e03e         	b	0x805596c <prvAddCurrentTaskToDelayedList+0x104> @ imm = #0x7c
;             xTimeToWake = xConstTickCount + xTicksToWait;
 80558ee: 9802         	ldr	r0, [sp, #0x8]
 80558f0: 9905         	ldr	r1, [sp, #0x14]
 80558f2: 4408         	add	r0, r1
 80558f4: 9003         	str	r0, [sp, #0xc]
;             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80558f6: 9803         	ldr	r0, [sp, #0xc]
 80558f8: f240 1100    	movw	r1, #0x100
 80558fc: f2c2 0100    	movt	r1, #0x2000
 8055900: 6809         	ldr	r1, [r1]
 8055902: f8c1 0080    	str.w	r0, [r1, #0x80]
;             if( xTimeToWake < xConstTickCount )
 8055906: 9803         	ldr	r0, [sp, #0xc]
 8055908: 9902         	ldr	r1, [sp, #0x8]
 805590a: 4288         	cmp	r0, r1
 805590c: d20e         	bhs	0x805592c <prvAddCurrentTaskToDelayedList+0xc4> @ imm = #0x1c
 805590e: e7ff         	b	0x8055910 <prvAddCurrentTaskToDelayedList+0xa8> @ imm = #-0x2
;                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8055910: f240 1034    	movw	r0, #0x134
 8055914: f2c2 0000    	movt	r0, #0x2000
 8055918: 6800         	ldr	r0, [r0]
 805591a: f240 1100    	movw	r1, #0x100
 805591e: f2c2 0100    	movt	r1, #0x2000
 8055922: 6809         	ldr	r1, [r1]
 8055924: 3180         	adds	r1, #0x80
 8055926: 4a14         	ldr	r2, [pc, #0x50]         @ 0x8055978 <prvAddCurrentTaskToDelayedList+0x110>
 8055928: 4790         	blx	r2
;             }
 805592a: e01e         	b	0x805596a <prvAddCurrentTaskToDelayedList+0x102> @ imm = #0x3c
;                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 805592c: f240 1030    	movw	r0, #0x130
 8055930: f2c2 0000    	movt	r0, #0x2000
 8055934: 6800         	ldr	r0, [r0]
 8055936: f240 1100    	movw	r1, #0x100
 805593a: f2c2 0100    	movt	r1, #0x2000
 805593e: 6809         	ldr	r1, [r1]
 8055940: 3180         	adds	r1, #0x80
 8055942: 4a0c         	ldr	r2, [pc, #0x30]         @ 0x8055974 <prvAddCurrentTaskToDelayedList+0x10c>
 8055944: 4790         	blx	r2
;                 if( xTimeToWake < xNextTaskUnblockTime )
 8055946: 9803         	ldr	r0, [sp, #0xc]
 8055948: f240 21a8    	movw	r1, #0x2a8
 805594c: f2c2 0100    	movt	r1, #0x2000
 8055950: 6809         	ldr	r1, [r1]
 8055952: 4288         	cmp	r0, r1
 8055954: d207         	bhs	0x8055966 <prvAddCurrentTaskToDelayedList+0xfe> @ imm = #0xe
 8055956: e7ff         	b	0x8055958 <prvAddCurrentTaskToDelayedList+0xf0> @ imm = #-0x2
;                     xNextTaskUnblockTime = xTimeToWake;
 8055958: 9803         	ldr	r0, [sp, #0xc]
 805595a: f240 21a8    	movw	r1, #0x2a8
 805595e: f2c2 0100    	movt	r1, #0x2000
 8055962: 6008         	str	r0, [r1]
;                 }
 8055964: e000         	b	0x8055968 <prvAddCurrentTaskToDelayedList+0x100> @ imm = #0x0
 8055966: e7ff         	b	0x8055968 <prvAddCurrentTaskToDelayedList+0x100> @ imm = #-0x2
 8055968: e7ff         	b	0x805596a <prvAddCurrentTaskToDelayedList+0x102> @ imm = #-0x2
 805596a: e7ff         	b	0x805596c <prvAddCurrentTaskToDelayedList+0x104> @ imm = #-0x2
; }
 805596c: b006         	add	sp, #0x18
 805596e: bd80         	pop	{r7, pc}

08055970 <$d.17>:
 8055970: 33 9f 05 08  	.word	0x08059f33
 8055974: c9 9e 05 08  	.word	0x08059ec9
 8055978: c9 9e 05 08  	.word	0x08059ec9

0805597c <xTaskResumeAll>:
; {
 805597c: b580         	push	{r7, lr}
 805597e: 466f         	mov	r7, sp
 8055980: b088         	sub	sp, #0x20
 8055982: 2000         	movs	r0, #0x0
;     TCB_t * pxTCB = NULL;
 8055984: 9000         	str	r0, [sp]
 8055986: 9007         	str	r0, [sp, #0x1c]
;     BaseType_t xAlreadyYielded = pdFALSE;
 8055988: 9006         	str	r0, [sp, #0x18]
;         taskENTER_CRITICAL();
 805598a: 4899         	ldr	r0, [pc, #0x264]        @ 0x8055bf0 <xTaskResumeAll+0x274>
 805598c: 4780         	blx	r0
 805598e: 9800         	ldr	r0, [sp]
;             xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8055990: 9005         	str	r0, [sp, #0x14]
;             configASSERT( uxSchedulerSuspended != 0U );
 8055992: f240 1028    	movw	r0, #0x128
 8055996: f2c2 0000    	movt	r0, #0x2000
 805599a: 6800         	ldr	r0, [r0]
 805599c: b920         	cbnz	r0, 0x80559a8 <xTaskResumeAll+0x2c> @ imm = #0x8
 805599e: e7ff         	b	0x80559a0 <xTaskResumeAll+0x24> @ imm = #-0x2
 80559a0: 4898         	ldr	r0, [pc, #0x260]        @ 0x8055c04 <xTaskResumeAll+0x288>
 80559a2: 4780         	blx	r0
 80559a4: e7ff         	b	0x80559a6 <xTaskResumeAll+0x2a> @ imm = #-0x2
 80559a6: e7fe         	b	0x80559a6 <xTaskResumeAll+0x2a> @ imm = #-0x4
;             --uxSchedulerSuspended;
 80559a8: f240 1028    	movw	r0, #0x128
 80559ac: f2c2 0000    	movt	r0, #0x2000
 80559b0: 6801         	ldr	r1, [r0]
 80559b2: 3901         	subs	r1, #0x1
 80559b4: 6001         	str	r1, [r0]
;             if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80559b6: 6800         	ldr	r0, [r0]
 80559b8: 2800         	cmp	r0, #0x0
 80559ba: f040 8113    	bne.w	0x8055be4 <xTaskResumeAll+0x268> @ imm = #0x226
 80559be: e7ff         	b	0x80559c0 <xTaskResumeAll+0x44> @ imm = #-0x2
;                 if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80559c0: f240 1020    	movw	r0, #0x120
 80559c4: f2c2 0000    	movt	r0, #0x2000
 80559c8: 6800         	ldr	r0, [r0]
 80559ca: 2800         	cmp	r0, #0x0
 80559cc: f000 8109    	beq.w	0x8055be2 <xTaskResumeAll+0x266> @ imm = #0x212
 80559d0: e7ff         	b	0x80559d2 <xTaskResumeAll+0x56> @ imm = #-0x2
;                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80559d2: e7ff         	b	0x80559d4 <xTaskResumeAll+0x58> @ imm = #-0x2
 80559d4: f240 1038    	movw	r0, #0x138
 80559d8: f2c2 0000    	movt	r0, #0x2000
 80559dc: 6800         	ldr	r0, [r0]
 80559de: 2800         	cmp	r0, #0x0
 80559e0: f000 80ba    	beq.w	0x8055b58 <xTaskResumeAll+0x1dc> @ imm = #0x174
 80559e4: e7ff         	b	0x80559e6 <xTaskResumeAll+0x6a> @ imm = #-0x2
;                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80559e6: f240 1038    	movw	r0, #0x138
 80559ea: f2c2 0000    	movt	r0, #0x2000
 80559ee: 68c0         	ldr	r0, [r0, #0xc]
 80559f0: 68c0         	ldr	r0, [r0, #0xc]
 80559f2: 9007         	str	r0, [sp, #0x1c]
;                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80559f4: e7ff         	b	0x80559f6 <xTaskResumeAll+0x7a> @ imm = #-0x2
 80559f6: 9807         	ldr	r0, [sp, #0x1c]
 80559f8: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80559fc: 9004         	str	r0, [sp, #0x10]
 80559fe: 9807         	ldr	r0, [sp, #0x1c]
 8055a00: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8055a04: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8055a08: 6088         	str	r0, [r1, #0x8]
 8055a0a: 9907         	ldr	r1, [sp, #0x1c]
 8055a0c: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8055a10: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8055a14: 6048         	str	r0, [r1, #0x4]
 8055a16: 9804         	ldr	r0, [sp, #0x10]
 8055a18: 6840         	ldr	r0, [r0, #0x4]
 8055a1a: 9907         	ldr	r1, [sp, #0x1c]
 8055a1c: 3194         	adds	r1, #0x94
 8055a1e: 4288         	cmp	r0, r1
 8055a20: d106         	bne	0x8055a30 <xTaskResumeAll+0xb4> @ imm = #0xc
 8055a22: e7ff         	b	0x8055a24 <xTaskResumeAll+0xa8> @ imm = #-0x2
 8055a24: 9807         	ldr	r0, [sp, #0x1c]
 8055a26: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8055a2a: 9904         	ldr	r1, [sp, #0x10]
 8055a2c: 6048         	str	r0, [r1, #0x4]
 8055a2e: e7ff         	b	0x8055a30 <xTaskResumeAll+0xb4> @ imm = #-0x2
 8055a30: 9907         	ldr	r1, [sp, #0x1c]
 8055a32: 2000         	movs	r0, #0x0
 8055a34: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8055a38: 9904         	ldr	r1, [sp, #0x10]
 8055a3a: 6808         	ldr	r0, [r1]
 8055a3c: 3801         	subs	r0, #0x1
 8055a3e: 6008         	str	r0, [r1]
 8055a40: e7ff         	b	0x8055a42 <xTaskResumeAll+0xc6> @ imm = #-0x2
;                         listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8055a42: e7ff         	b	0x8055a44 <xTaskResumeAll+0xc8> @ imm = #-0x2
 8055a44: 9807         	ldr	r0, [sp, #0x1c]
 8055a46: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8055a4a: 9003         	str	r0, [sp, #0xc]
 8055a4c: 9807         	ldr	r0, [sp, #0x1c]
 8055a4e: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8055a52: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8055a56: 6088         	str	r0, [r1, #0x8]
 8055a58: 9907         	ldr	r1, [sp, #0x1c]
 8055a5a: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8055a5e: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8055a62: 6048         	str	r0, [r1, #0x4]
 8055a64: 9803         	ldr	r0, [sp, #0xc]
 8055a66: 6840         	ldr	r0, [r0, #0x4]
 8055a68: 9907         	ldr	r1, [sp, #0x1c]
 8055a6a: 3180         	adds	r1, #0x80
 8055a6c: 4288         	cmp	r0, r1
 8055a6e: d106         	bne	0x8055a7e <xTaskResumeAll+0x102> @ imm = #0xc
 8055a70: e7ff         	b	0x8055a72 <xTaskResumeAll+0xf6> @ imm = #-0x2
 8055a72: 9807         	ldr	r0, [sp, #0x1c]
 8055a74: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8055a78: 9903         	ldr	r1, [sp, #0xc]
 8055a7a: 6048         	str	r0, [r1, #0x4]
 8055a7c: e7ff         	b	0x8055a7e <xTaskResumeAll+0x102> @ imm = #-0x2
 8055a7e: 9907         	ldr	r1, [sp, #0x1c]
 8055a80: 2000         	movs	r0, #0x0
 8055a82: f8c1 0090    	str.w	r0, [r1, #0x90]
 8055a86: 9903         	ldr	r1, [sp, #0xc]
 8055a88: 6808         	ldr	r0, [r1]
 8055a8a: 3801         	subs	r0, #0x1
 8055a8c: 6008         	str	r0, [r1]
 8055a8e: e7ff         	b	0x8055a90 <xTaskResumeAll+0x114> @ imm = #-0x2
;                         prvAddTaskToReadyList( pxTCB );
 8055a90: e7ff         	b	0x8055a92 <xTaskResumeAll+0x116> @ imm = #-0x2
 8055a92: e7ff         	b	0x8055a94 <xTaskResumeAll+0x118> @ imm = #-0x2
 8055a94: 9807         	ldr	r0, [sp, #0x1c]
 8055a96: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055a9a: f240 21a0    	movw	r1, #0x2a0
 8055a9e: f2c2 0100    	movt	r1, #0x2000
 8055aa2: 6809         	ldr	r1, [r1]
 8055aa4: 4288         	cmp	r0, r1
 8055aa6: d909         	bls	0x8055abc <xTaskResumeAll+0x140> @ imm = #0x12
 8055aa8: e7ff         	b	0x8055aaa <xTaskResumeAll+0x12e> @ imm = #-0x2
 8055aaa: 9807         	ldr	r0, [sp, #0x1c]
 8055aac: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055ab0: f240 21a0    	movw	r1, #0x2a0
 8055ab4: f2c2 0100    	movt	r1, #0x2000
 8055ab8: 6008         	str	r0, [r1]
 8055aba: e7ff         	b	0x8055abc <xTaskResumeAll+0x140> @ imm = #-0x2
 8055abc: e7ff         	b	0x8055abe <xTaskResumeAll+0x142> @ imm = #-0x2
 8055abe: e7ff         	b	0x8055ac0 <xTaskResumeAll+0x144> @ imm = #-0x2
 8055ac0: 9807         	ldr	r0, [sp, #0x1c]
 8055ac2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055ac6: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055aca: f240 1160    	movw	r1, #0x160
 8055ace: f2c2 0100    	movt	r1, #0x2000
 8055ad2: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055ad6: 6840         	ldr	r0, [r0, #0x4]
 8055ad8: 9002         	str	r0, [sp, #0x8]
 8055ada: 9802         	ldr	r0, [sp, #0x8]
 8055adc: 9a07         	ldr	r2, [sp, #0x1c]
 8055ade: f8c2 0084    	str.w	r0, [r2, #0x84]
 8055ae2: 9802         	ldr	r0, [sp, #0x8]
 8055ae4: 6880         	ldr	r0, [r0, #0x8]
 8055ae6: 9a07         	ldr	r2, [sp, #0x1c]
 8055ae8: f8c2 0088    	str.w	r0, [r2, #0x88]
 8055aec: 9807         	ldr	r0, [sp, #0x1c]
 8055aee: 3080         	adds	r0, #0x80
 8055af0: 9a02         	ldr	r2, [sp, #0x8]
 8055af2: 6892         	ldr	r2, [r2, #0x8]
 8055af4: 6050         	str	r0, [r2, #0x4]
 8055af6: 9807         	ldr	r0, [sp, #0x1c]
 8055af8: 3080         	adds	r0, #0x80
 8055afa: 9a02         	ldr	r2, [sp, #0x8]
 8055afc: 6090         	str	r0, [r2, #0x8]
 8055afe: 9a07         	ldr	r2, [sp, #0x1c]
 8055b00: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8055b04: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055b08: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055b0c: f8c2 0090    	str.w	r0, [r2, #0x90]
 8055b10: 9807         	ldr	r0, [sp, #0x1c]
 8055b12: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055b16: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8055b1a: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8055b1e: 3001         	adds	r0, #0x1
 8055b20: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8055b24: e7ff         	b	0x8055b26 <xTaskResumeAll+0x1aa> @ imm = #-0x2
 8055b26: e7ff         	b	0x8055b28 <xTaskResumeAll+0x1ac> @ imm = #-0x2
;                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8055b28: 9807         	ldr	r0, [sp, #0x1c]
 8055b2a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055b2e: f240 1100    	movw	r1, #0x100
 8055b32: f2c2 0100    	movt	r1, #0x2000
 8055b36: 6809         	ldr	r1, [r1]
 8055b38: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055b3c: 4288         	cmp	r0, r1
 8055b3e: d909         	bls	0x8055b54 <xTaskResumeAll+0x1d8> @ imm = #0x12
 8055b40: e7ff         	b	0x8055b42 <xTaskResumeAll+0x1c6> @ imm = #-0x2
;                                 xYieldPendings[ xCoreID ] = pdTRUE;
 8055b42: 9a05         	ldr	r2, [sp, #0x14]
 8055b44: f240 21a4    	movw	r1, #0x2a4
 8055b48: f2c2 0100    	movt	r1, #0x2000
 8055b4c: 2001         	movs	r0, #0x1
 8055b4e: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;                             }
 8055b52: e000         	b	0x8055b56 <xTaskResumeAll+0x1da> @ imm = #0x0
 8055b54: e7ff         	b	0x8055b56 <xTaskResumeAll+0x1da> @ imm = #-0x2
;                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8055b56: e73d         	b	0x80559d4 <xTaskResumeAll+0x58> @ imm = #-0x186
;                     if( pxTCB != NULL )
 8055b58: 9807         	ldr	r0, [sp, #0x1c]
 8055b5a: b118         	cbz	r0, 0x8055b64 <xTaskResumeAll+0x1e8> @ imm = #0x6
 8055b5c: e7ff         	b	0x8055b5e <xTaskResumeAll+0x1e2> @ imm = #-0x2
;                         prvResetNextTaskUnblockTime();
 8055b5e: 4825         	ldr	r0, [pc, #0x94]         @ 0x8055bf4 <xTaskResumeAll+0x278>
 8055b60: 4780         	blx	r0
;                     }
 8055b62: e7ff         	b	0x8055b64 <xTaskResumeAll+0x1e8> @ imm = #-0x2
;                         TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8055b64: f240 20b0    	movw	r0, #0x2b0
 8055b68: f2c2 0000    	movt	r0, #0x2000
 8055b6c: 6800         	ldr	r0, [r0]
 8055b6e: 9001         	str	r0, [sp, #0x4]
;                         if( xPendedCounts > ( TickType_t ) 0U )
 8055b70: 9801         	ldr	r0, [sp, #0x4]
 8055b72: b1f0         	cbz	r0, 0x8055bb2 <xTaskResumeAll+0x236> @ imm = #0x3c
 8055b74: e7ff         	b	0x8055b76 <xTaskResumeAll+0x1fa> @ imm = #-0x2
;                             do
 8055b76: e7ff         	b	0x8055b78 <xTaskResumeAll+0x1fc> @ imm = #-0x2
;                                 if( xTaskIncrementTick() != pdFALSE )
 8055b78: 481f         	ldr	r0, [pc, #0x7c]         @ 0x8055bf8 <xTaskResumeAll+0x27c>
 8055b7a: 4780         	blx	r0
 8055b7c: b148         	cbz	r0, 0x8055b92 <xTaskResumeAll+0x216> @ imm = #0x12
 8055b7e: e7ff         	b	0x8055b80 <xTaskResumeAll+0x204> @ imm = #-0x2
;                                     xYieldPendings[ xCoreID ] = pdTRUE;
 8055b80: 9a05         	ldr	r2, [sp, #0x14]
 8055b82: f240 21a4    	movw	r1, #0x2a4
 8055b86: f2c2 0100    	movt	r1, #0x2000
 8055b8a: 2001         	movs	r0, #0x1
 8055b8c: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;                                 }
 8055b90: e000         	b	0x8055b94 <xTaskResumeAll+0x218> @ imm = #0x0
 8055b92: e7ff         	b	0x8055b94 <xTaskResumeAll+0x218> @ imm = #-0x2
;                                 --xPendedCounts;
 8055b94: 9801         	ldr	r0, [sp, #0x4]
 8055b96: 3801         	subs	r0, #0x1
 8055b98: 9001         	str	r0, [sp, #0x4]
;                             } while( xPendedCounts > ( TickType_t ) 0U );
 8055b9a: e7ff         	b	0x8055b9c <xTaskResumeAll+0x220> @ imm = #-0x2
 8055b9c: 9801         	ldr	r0, [sp, #0x4]
 8055b9e: 2800         	cmp	r0, #0x0
 8055ba0: d1ea         	bne	0x8055b78 <xTaskResumeAll+0x1fc> @ imm = #-0x2c
 8055ba2: e7ff         	b	0x8055ba4 <xTaskResumeAll+0x228> @ imm = #-0x2
;                             xPendedTicks = 0;
 8055ba4: f240 21b0    	movw	r1, #0x2b0
 8055ba8: f2c2 0100    	movt	r1, #0x2000
 8055bac: 2000         	movs	r0, #0x0
 8055bae: 6008         	str	r0, [r1]
;                         }
 8055bb0: e000         	b	0x8055bb4 <xTaskResumeAll+0x238> @ imm = #0x0
 8055bb2: e7ff         	b	0x8055bb4 <xTaskResumeAll+0x238> @ imm = #-0x2
;                     if( xYieldPendings[ xCoreID ] != pdFALSE )
 8055bb4: 9905         	ldr	r1, [sp, #0x14]
 8055bb6: f240 20a4    	movw	r0, #0x2a4
 8055bba: f2c2 0000    	movt	r0, #0x2000
 8055bbe: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 8055bc2: b160         	cbz	r0, 0x8055bde <xTaskResumeAll+0x262> @ imm = #0x18
 8055bc4: e7ff         	b	0x8055bc6 <xTaskResumeAll+0x24a> @ imm = #-0x2
 8055bc6: 2001         	movs	r0, #0x1
;                             xAlreadyYielded = pdTRUE;
 8055bc8: 9006         	str	r0, [sp, #0x18]
;                             taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8055bca: e7ff         	b	0x8055bcc <xTaskResumeAll+0x250> @ imm = #-0x2
 8055bcc: f240 1000    	movw	r0, #0x100
 8055bd0: f2c2 0000    	movt	r0, #0x2000
 8055bd4: 6800         	ldr	r0, [r0]
 8055bd6: 4809         	ldr	r0, [pc, #0x24]         @ 0x8055bfc <xTaskResumeAll+0x280>
 8055bd8: 4780         	blx	r0
 8055bda: e7ff         	b	0x8055bdc <xTaskResumeAll+0x260> @ imm = #-0x2
;                     }
 8055bdc: e000         	b	0x8055be0 <xTaskResumeAll+0x264> @ imm = #0x0
 8055bde: e7ff         	b	0x8055be0 <xTaskResumeAll+0x264> @ imm = #-0x2
;                 }
 8055be0: e7ff         	b	0x8055be2 <xTaskResumeAll+0x266> @ imm = #-0x2
;             }
 8055be2: e000         	b	0x8055be6 <xTaskResumeAll+0x26a> @ imm = #0x0
 8055be4: e7ff         	b	0x8055be6 <xTaskResumeAll+0x26a> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8055be6: 4806         	ldr	r0, [pc, #0x18]         @ 0x8055c00 <xTaskResumeAll+0x284>
 8055be8: 4780         	blx	r0
;     return xAlreadyYielded;
 8055bea: 9806         	ldr	r0, [sp, #0x18]
 8055bec: b008         	add	sp, #0x20
 8055bee: bd80         	pop	{r7, pc}

08055bf0 <$d.19>:
 8055bf0: 19 c4 05 08  	.word	0x0805c419
 8055bf4: bd 56 05 08  	.word	0x080556bd
 8055bf8: ad 66 05 08  	.word	0x080566ad
 8055bfc: ff c3 05 08  	.word	0x0805c3ff
 8055c00: 3d c4 05 08  	.word	0x0805c43d
 8055c04: 55 cd 05 08  	.word	0x0805cd55

08055c08 <vTaskDelay>:
;     {
 8055c08: b580         	push	{r7, lr}
 8055c0a: 466f         	mov	r7, sp
 8055c0c: b082         	sub	sp, #0x8
 8055c0e: 9001         	str	r0, [sp, #0x4]
 8055c10: 2000         	movs	r0, #0x0
;         BaseType_t xAlreadyYielded = pdFALSE;
 8055c12: 9000         	str	r0, [sp]
;         if( xTicksToDelay > ( TickType_t ) 0U )
 8055c14: 9801         	ldr	r0, [sp, #0x4]
 8055c16: b1b0         	cbz	r0, 0x8055c46 <vTaskDelay+0x3e> @ imm = #0x2c
 8055c18: e7ff         	b	0x8055c1a <vTaskDelay+0x12> @ imm = #-0x2
;             vTaskSuspendAll();
 8055c1a: 4810         	ldr	r0, [pc, #0x40]         @ 0x8055c5c <vTaskDelay+0x54>
 8055c1c: 4780         	blx	r0
;                 configASSERT( uxSchedulerSuspended == 1U );
 8055c1e: f240 1028    	movw	r0, #0x128
 8055c22: f2c2 0000    	movt	r0, #0x2000
 8055c26: 6800         	ldr	r0, [r0]
 8055c28: 2801         	cmp	r0, #0x1
 8055c2a: d004         	beq	0x8055c36 <vTaskDelay+0x2e> @ imm = #0x8
 8055c2c: e7ff         	b	0x8055c2e <vTaskDelay+0x26> @ imm = #-0x2
 8055c2e: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8055c6c <vTaskDelay+0x64>
 8055c30: 4780         	blx	r0
 8055c32: e7ff         	b	0x8055c34 <vTaskDelay+0x2c> @ imm = #-0x2
 8055c34: e7fe         	b	0x8055c34 <vTaskDelay+0x2c> @ imm = #-0x4
;                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8055c36: 9801         	ldr	r0, [sp, #0x4]
 8055c38: 4a09         	ldr	r2, [pc, #0x24]         @ 0x8055c60 <vTaskDelay+0x58>
 8055c3a: 2100         	movs	r1, #0x0
 8055c3c: 4790         	blx	r2
;             xAlreadyYielded = xTaskResumeAll();
 8055c3e: 4809         	ldr	r0, [pc, #0x24]         @ 0x8055c64 <vTaskDelay+0x5c>
 8055c40: 4780         	blx	r0
 8055c42: 9000         	str	r0, [sp]
;         }
 8055c44: e000         	b	0x8055c48 <vTaskDelay+0x40> @ imm = #0x0
 8055c46: e7ff         	b	0x8055c48 <vTaskDelay+0x40> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 8055c48: 9800         	ldr	r0, [sp]
 8055c4a: b918         	cbnz	r0, 0x8055c54 <vTaskDelay+0x4c> @ imm = #0x6
 8055c4c: e7ff         	b	0x8055c4e <vTaskDelay+0x46> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 8055c4e: 4806         	ldr	r0, [pc, #0x18]         @ 0x8055c68 <vTaskDelay+0x60>
 8055c50: 4780         	blx	r0
;         }
 8055c52: e000         	b	0x8055c56 <vTaskDelay+0x4e> @ imm = #0x0
 8055c54: e7ff         	b	0x8055c56 <vTaskDelay+0x4e> @ imm = #-0x2
;     }
 8055c56: b002         	add	sp, #0x8
 8055c58: bd80         	pop	{r7, pc}
 8055c5a: bf00         	nop

08055c5c <$d.21>:
 8055c5c: 59 58 05 08  	.word	0x08055859
 8055c60: 69 58 05 08  	.word	0x08055869
 8055c64: 7d 59 05 08  	.word	0x0805597d
 8055c68: ff c3 05 08  	.word	0x0805c3ff
 8055c6c: 55 cd 05 08  	.word	0x0805cd55

08055c70 <eTaskGetState>:
;     {
 8055c70: b580         	push	{r7, lr}
 8055c72: 466f         	mov	r7, sp
 8055c74: b088         	sub	sp, #0x20
 8055c76: 9007         	str	r0, [sp, #0x1c]
;         const TCB_t * const pxTCB = xTask;
 8055c78: 9807         	ldr	r0, [sp, #0x1c]
 8055c7a: 9001         	str	r0, [sp, #0x4]
;         configASSERT( pxTCB );
 8055c7c: 9801         	ldr	r0, [sp, #0x4]
 8055c7e: b920         	cbnz	r0, 0x8055c8a <eTaskGetState+0x1a> @ imm = #0x8
 8055c80: e7ff         	b	0x8055c82 <eTaskGetState+0x12> @ imm = #-0x2
 8055c82: 4848         	ldr	r0, [pc, #0x120]        @ 0x8055da4 <eTaskGetState+0x134>
 8055c84: 4780         	blx	r0
 8055c86: e7ff         	b	0x8055c88 <eTaskGetState+0x18> @ imm = #-0x2
 8055c88: e7fe         	b	0x8055c88 <eTaskGetState+0x18> @ imm = #-0x4
;             if( pxTCB == pxCurrentTCB )
 8055c8a: 9801         	ldr	r0, [sp, #0x4]
 8055c8c: f240 1100    	movw	r1, #0x100
 8055c90: f2c2 0100    	movt	r1, #0x2000
 8055c94: 6809         	ldr	r1, [r1]
 8055c96: 4288         	cmp	r0, r1
 8055c98: d104         	bne	0x8055ca4 <eTaskGetState+0x34> @ imm = #0x8
 8055c9a: e7ff         	b	0x8055c9c <eTaskGetState+0x2c> @ imm = #-0x2
 8055c9c: 2000         	movs	r0, #0x0
;                 eReturn = eRunning;
 8055c9e: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055ca2: e076         	b	0x8055d92 <eTaskGetState+0x122> @ imm = #0xec
;             taskENTER_CRITICAL();
 8055ca4: 483d         	ldr	r0, [pc, #0xf4]         @ 0x8055d9c <eTaskGetState+0x12c>
 8055ca6: 4780         	blx	r0
;                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8055ca8: 9801         	ldr	r0, [sp, #0x4]
 8055caa: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8055cae: 9005         	str	r0, [sp, #0x14]
;                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8055cb0: 9801         	ldr	r0, [sp, #0x4]
 8055cb2: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055cb6: 9004         	str	r0, [sp, #0x10]
;                 pxDelayedList = pxDelayedTaskList;
 8055cb8: f240 1030    	movw	r0, #0x130
 8055cbc: f2c2 0000    	movt	r0, #0x2000
 8055cc0: 6800         	ldr	r0, [r0]
 8055cc2: 9003         	str	r0, [sp, #0xc]
;                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8055cc4: f240 1034    	movw	r0, #0x134
 8055cc8: f2c2 0000    	movt	r0, #0x2000
 8055ccc: 6800         	ldr	r0, [r0]
 8055cce: 9002         	str	r0, [sp, #0x8]
;             taskEXIT_CRITICAL();
 8055cd0: 4833         	ldr	r0, [pc, #0xcc]         @ 0x8055da0 <eTaskGetState+0x130>
 8055cd2: 4780         	blx	r0
;             if( pxEventList == &xPendingReadyList )
 8055cd4: 9804         	ldr	r0, [sp, #0x10]
 8055cd6: f240 1138    	movw	r1, #0x138
 8055cda: f2c2 0100    	movt	r1, #0x2000
 8055cde: 4288         	cmp	r0, r1
 8055ce0: d104         	bne	0x8055cec <eTaskGetState+0x7c> @ imm = #0x8
 8055ce2: e7ff         	b	0x8055ce4 <eTaskGetState+0x74> @ imm = #-0x2
 8055ce4: 2001         	movs	r0, #0x1
;                 eReturn = eReady;
 8055ce6: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055cea: e051         	b	0x8055d90 <eTaskGetState+0x120> @ imm = #0xa2
;             else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8055cec: 9805         	ldr	r0, [sp, #0x14]
 8055cee: 9903         	ldr	r1, [sp, #0xc]
 8055cf0: 4288         	cmp	r0, r1
 8055cf2: d005         	beq	0x8055d00 <eTaskGetState+0x90> @ imm = #0xa
 8055cf4: e7ff         	b	0x8055cf6 <eTaskGetState+0x86> @ imm = #-0x2
 8055cf6: 9805         	ldr	r0, [sp, #0x14]
 8055cf8: 9902         	ldr	r1, [sp, #0x8]
 8055cfa: 4288         	cmp	r0, r1
 8055cfc: d104         	bne	0x8055d08 <eTaskGetState+0x98> @ imm = #0x8
 8055cfe: e7ff         	b	0x8055d00 <eTaskGetState+0x90> @ imm = #-0x2
 8055d00: 2002         	movs	r0, #0x2
;                 eReturn = eBlocked;
 8055d02: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055d06: e042         	b	0x8055d8e <eTaskGetState+0x11e> @ imm = #0x84
;                 else if( pxStateList == &xSuspendedTaskList )
 8055d08: 9805         	ldr	r0, [sp, #0x14]
 8055d0a: f240 114c    	movw	r1, #0x14c
 8055d0e: f2c2 0100    	movt	r1, #0x2000
 8055d12: 4288         	cmp	r0, r1
 8055d14: d126         	bne	0x8055d64 <eTaskGetState+0xf4> @ imm = #0x4c
 8055d16: e7ff         	b	0x8055d18 <eTaskGetState+0xa8> @ imm = #-0x2
;                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8055d18: 9801         	ldr	r0, [sp, #0x4]
 8055d1a: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055d1e: b9e0         	cbnz	r0, 0x8055d5a <eTaskGetState+0xea> @ imm = #0x38
 8055d20: e7ff         	b	0x8055d22 <eTaskGetState+0xb2> @ imm = #-0x2
 8055d22: 2003         	movs	r0, #0x3
;                             eReturn = eSuspended;
 8055d24: f807 0c05    	strb	r0, [r7, #-5]
 8055d28: 2000         	movs	r0, #0x0
;                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8055d2a: 9000         	str	r0, [sp]
 8055d2c: e7ff         	b	0x8055d2e <eTaskGetState+0xbe> @ imm = #-0x2
 8055d2e: 9800         	ldr	r0, [sp]
 8055d30: 2800         	cmp	r0, #0x0
 8055d32: dc11         	bgt	0x8055d58 <eTaskGetState+0xe8> @ imm = #0x22
 8055d34: e7ff         	b	0x8055d36 <eTaskGetState+0xc6> @ imm = #-0x2
;                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8055d36: 9801         	ldr	r0, [sp, #0x4]
 8055d38: 9900         	ldr	r1, [sp]
 8055d3a: 4408         	add	r0, r1
 8055d3c: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8055d40: 2801         	cmp	r0, #0x1
 8055d42: d104         	bne	0x8055d4e <eTaskGetState+0xde> @ imm = #0x8
 8055d44: e7ff         	b	0x8055d46 <eTaskGetState+0xd6> @ imm = #-0x2
 8055d46: 2002         	movs	r0, #0x2
;                                     eReturn = eBlocked;
 8055d48: f807 0c05    	strb	r0, [r7, #-5]
;                                     break;
 8055d4c: e004         	b	0x8055d58 <eTaskGetState+0xe8> @ imm = #0x8
;                             }
 8055d4e: e7ff         	b	0x8055d50 <eTaskGetState+0xe0> @ imm = #-0x2
;                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8055d50: 9800         	ldr	r0, [sp]
 8055d52: 3001         	adds	r0, #0x1
 8055d54: 9000         	str	r0, [sp]
 8055d56: e7ea         	b	0x8055d2e <eTaskGetState+0xbe> @ imm = #-0x2c
;                     }
 8055d58: e003         	b	0x8055d62 <eTaskGetState+0xf2> @ imm = #0x6
 8055d5a: 2002         	movs	r0, #0x2
;                         eReturn = eBlocked;
 8055d5c: f807 0c05    	strb	r0, [r7, #-5]
 8055d60: e7ff         	b	0x8055d62 <eTaskGetState+0xf2> @ imm = #-0x2
;                 }
 8055d62: e013         	b	0x8055d8c <eTaskGetState+0x11c> @ imm = #0x26
;                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8055d64: 9805         	ldr	r0, [sp, #0x14]
 8055d66: f240 1108    	movw	r1, #0x108
 8055d6a: f2c2 0100    	movt	r1, #0x2000
 8055d6e: 4288         	cmp	r0, r1
 8055d70: d003         	beq	0x8055d7a <eTaskGetState+0x10a> @ imm = #0x6
 8055d72: e7ff         	b	0x8055d74 <eTaskGetState+0x104> @ imm = #-0x2
 8055d74: 9805         	ldr	r0, [sp, #0x14]
 8055d76: b920         	cbnz	r0, 0x8055d82 <eTaskGetState+0x112> @ imm = #0x8
 8055d78: e7ff         	b	0x8055d7a <eTaskGetState+0x10a> @ imm = #-0x2
 8055d7a: 2004         	movs	r0, #0x4
;                     eReturn = eDeleted;
 8055d7c: f807 0c05    	strb	r0, [r7, #-5]
;                 }
 8055d80: e003         	b	0x8055d8a <eTaskGetState+0x11a> @ imm = #0x6
 8055d82: 2001         	movs	r0, #0x1
;                     eReturn = eReady;
 8055d84: f807 0c05    	strb	r0, [r7, #-5]
 8055d88: e7ff         	b	0x8055d8a <eTaskGetState+0x11a> @ imm = #-0x2
 8055d8a: e7ff         	b	0x8055d8c <eTaskGetState+0x11c> @ imm = #-0x2
 8055d8c: e7ff         	b	0x8055d8e <eTaskGetState+0x11e> @ imm = #-0x2
 8055d8e: e7ff         	b	0x8055d90 <eTaskGetState+0x120> @ imm = #-0x2
 8055d90: e7ff         	b	0x8055d92 <eTaskGetState+0x122> @ imm = #-0x2
;         return eReturn;
 8055d92: f817 0c05    	ldrb	r0, [r7, #-5]
 8055d96: b008         	add	sp, #0x20
 8055d98: bd80         	pop	{r7, pc}
 8055d9a: bf00         	nop

08055d9c <$d.23>:
 8055d9c: 19 c4 05 08  	.word	0x0805c419
 8055da0: 3d c4 05 08  	.word	0x0805c43d
 8055da4: 55 cd 05 08  	.word	0x0805cd55

08055da8 <uxTaskPriorityGet>:
;     {
 8055da8: b580         	push	{r7, lr}
 8055daa: 466f         	mov	r7, sp
 8055dac: b084         	sub	sp, #0x10
 8055dae: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 8055db0: 480c         	ldr	r0, [pc, #0x30]         @ 0x8055de4 <uxTaskPriorityGet+0x3c>
 8055db2: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055db4: 9803         	ldr	r0, [sp, #0xc]
 8055db6: b938         	cbnz	r0, 0x8055dc8 <uxTaskPriorityGet+0x20> @ imm = #0xe
 8055db8: e7ff         	b	0x8055dba <uxTaskPriorityGet+0x12> @ imm = #-0x2
 8055dba: f240 1000    	movw	r0, #0x100
 8055dbe: f2c2 0000    	movt	r0, #0x2000
 8055dc2: 6800         	ldr	r0, [r0]
 8055dc4: 9000         	str	r0, [sp]
 8055dc6: e002         	b	0x8055dce <uxTaskPriorityGet+0x26> @ imm = #0x4
 8055dc8: 9803         	ldr	r0, [sp, #0xc]
 8055dca: 9000         	str	r0, [sp]
 8055dcc: e7ff         	b	0x8055dce <uxTaskPriorityGet+0x26> @ imm = #-0x2
 8055dce: 9800         	ldr	r0, [sp]
 8055dd0: 9002         	str	r0, [sp, #0x8]
;             uxReturn = pxTCB->uxPriority;
 8055dd2: 9802         	ldr	r0, [sp, #0x8]
 8055dd4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055dd8: 9001         	str	r0, [sp, #0x4]
;         taskEXIT_CRITICAL();
 8055dda: 4803         	ldr	r0, [pc, #0xc]          @ 0x8055de8 <uxTaskPriorityGet+0x40>
 8055ddc: 4780         	blx	r0
;         return uxReturn;
 8055dde: 9801         	ldr	r0, [sp, #0x4]
 8055de0: b004         	add	sp, #0x10
 8055de2: bd80         	pop	{r7, pc}

08055de4 <$d.25>:
 8055de4: 19 c4 05 08  	.word	0x0805c419
 8055de8: 3d c4 05 08  	.word	0x0805c43d

08055dec <uxTaskPriorityGetFromISR>:
;     {
 8055dec: b580         	push	{r7, lr}
 8055dee: 466f         	mov	r7, sp
 8055df0: b086         	sub	sp, #0x18
 8055df2: 9005         	str	r0, [sp, #0x14]
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8055df4: 480e         	ldr	r0, [pc, #0x38]         @ 0x8055e30 <uxTaskPriorityGetFromISR+0x44>
 8055df6: 4780         	blx	r0
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8055df8: 480e         	ldr	r0, [pc, #0x38]         @ 0x8055e34 <uxTaskPriorityGetFromISR+0x48>
 8055dfa: 4780         	blx	r0
 8055dfc: 9002         	str	r0, [sp, #0x8]
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055dfe: 9805         	ldr	r0, [sp, #0x14]
 8055e00: b938         	cbnz	r0, 0x8055e12 <uxTaskPriorityGetFromISR+0x26> @ imm = #0xe
 8055e02: e7ff         	b	0x8055e04 <uxTaskPriorityGetFromISR+0x18> @ imm = #-0x2
 8055e04: f240 1000    	movw	r0, #0x100
 8055e08: f2c2 0000    	movt	r0, #0x2000
 8055e0c: 6800         	ldr	r0, [r0]
 8055e0e: 9001         	str	r0, [sp, #0x4]
 8055e10: e002         	b	0x8055e18 <uxTaskPriorityGetFromISR+0x2c> @ imm = #0x4
 8055e12: 9805         	ldr	r0, [sp, #0x14]
 8055e14: 9001         	str	r0, [sp, #0x4]
 8055e16: e7ff         	b	0x8055e18 <uxTaskPriorityGetFromISR+0x2c> @ imm = #-0x2
 8055e18: 9801         	ldr	r0, [sp, #0x4]
 8055e1a: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxPriority;
 8055e1c: 9804         	ldr	r0, [sp, #0x10]
 8055e1e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055e22: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8055e24: 9802         	ldr	r0, [sp, #0x8]
 8055e26: 4904         	ldr	r1, [pc, #0x10]         @ 0x8055e38 <uxTaskPriorityGetFromISR+0x4c>
 8055e28: 4788         	blx	r1
;         return uxReturn;
 8055e2a: 9803         	ldr	r0, [sp, #0xc]
 8055e2c: b006         	add	sp, #0x18
 8055e2e: bd80         	pop	{r7, pc}

08055e30 <$d.27>:
 8055e30: 45 ea 05 08  	.word	0x0805ea45
 8055e34: 55 cd 05 08  	.word	0x0805cd55
 8055e38: 6b cd 05 08  	.word	0x0805cd6b

08055e3c <uxTaskBasePriorityGet>:
;     {
 8055e3c: b580         	push	{r7, lr}
 8055e3e: 466f         	mov	r7, sp
 8055e40: b084         	sub	sp, #0x10
 8055e42: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 8055e44: 480c         	ldr	r0, [pc, #0x30]         @ 0x8055e78 <uxTaskBasePriorityGet+0x3c>
 8055e46: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055e48: 9803         	ldr	r0, [sp, #0xc]
 8055e4a: b938         	cbnz	r0, 0x8055e5c <uxTaskBasePriorityGet+0x20> @ imm = #0xe
 8055e4c: e7ff         	b	0x8055e4e <uxTaskBasePriorityGet+0x12> @ imm = #-0x2
 8055e4e: f240 1000    	movw	r0, #0x100
 8055e52: f2c2 0000    	movt	r0, #0x2000
 8055e56: 6800         	ldr	r0, [r0]
 8055e58: 9000         	str	r0, [sp]
 8055e5a: e002         	b	0x8055e62 <uxTaskBasePriorityGet+0x26> @ imm = #0x4
 8055e5c: 9803         	ldr	r0, [sp, #0xc]
 8055e5e: 9000         	str	r0, [sp]
 8055e60: e7ff         	b	0x8055e62 <uxTaskBasePriorityGet+0x26> @ imm = #-0x2
 8055e62: 9800         	ldr	r0, [sp]
 8055e64: 9002         	str	r0, [sp, #0x8]
;             uxReturn = pxTCB->uxBasePriority;
 8055e66: 9802         	ldr	r0, [sp, #0x8]
 8055e68: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055e6c: 9001         	str	r0, [sp, #0x4]
;         taskEXIT_CRITICAL();
 8055e6e: 4803         	ldr	r0, [pc, #0xc]          @ 0x8055e7c <uxTaskBasePriorityGet+0x40>
 8055e70: 4780         	blx	r0
;         return uxReturn;
 8055e72: 9801         	ldr	r0, [sp, #0x4]
 8055e74: b004         	add	sp, #0x10
 8055e76: bd80         	pop	{r7, pc}

08055e78 <$d.29>:
 8055e78: 19 c4 05 08  	.word	0x0805c419
 8055e7c: 3d c4 05 08  	.word	0x0805c43d

08055e80 <uxTaskBasePriorityGetFromISR>:
;     {
 8055e80: b580         	push	{r7, lr}
 8055e82: 466f         	mov	r7, sp
 8055e84: b086         	sub	sp, #0x18
 8055e86: 9005         	str	r0, [sp, #0x14]
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8055e88: 480e         	ldr	r0, [pc, #0x38]         @ 0x8055ec4 <uxTaskBasePriorityGetFromISR+0x44>
 8055e8a: 4780         	blx	r0
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8055e8c: 480e         	ldr	r0, [pc, #0x38]         @ 0x8055ec8 <uxTaskBasePriorityGetFromISR+0x48>
 8055e8e: 4780         	blx	r0
 8055e90: 9002         	str	r0, [sp, #0x8]
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055e92: 9805         	ldr	r0, [sp, #0x14]
 8055e94: b938         	cbnz	r0, 0x8055ea6 <uxTaskBasePriorityGetFromISR+0x26> @ imm = #0xe
 8055e96: e7ff         	b	0x8055e98 <uxTaskBasePriorityGetFromISR+0x18> @ imm = #-0x2
 8055e98: f240 1000    	movw	r0, #0x100
 8055e9c: f2c2 0000    	movt	r0, #0x2000
 8055ea0: 6800         	ldr	r0, [r0]
 8055ea2: 9001         	str	r0, [sp, #0x4]
 8055ea4: e002         	b	0x8055eac <uxTaskBasePriorityGetFromISR+0x2c> @ imm = #0x4
 8055ea6: 9805         	ldr	r0, [sp, #0x14]
 8055ea8: 9001         	str	r0, [sp, #0x4]
 8055eaa: e7ff         	b	0x8055eac <uxTaskBasePriorityGetFromISR+0x2c> @ imm = #-0x2
 8055eac: 9801         	ldr	r0, [sp, #0x4]
 8055eae: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxBasePriority;
 8055eb0: 9804         	ldr	r0, [sp, #0x10]
 8055eb2: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055eb6: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8055eb8: 9802         	ldr	r0, [sp, #0x8]
 8055eba: 4904         	ldr	r1, [pc, #0x10]         @ 0x8055ecc <uxTaskBasePriorityGetFromISR+0x4c>
 8055ebc: 4788         	blx	r1
;         return uxReturn;
 8055ebe: 9803         	ldr	r0, [sp, #0xc]
 8055ec0: b006         	add	sp, #0x18
 8055ec2: bd80         	pop	{r7, pc}

08055ec4 <$d.31>:
 8055ec4: 45 ea 05 08  	.word	0x0805ea45
 8055ec8: 55 cd 05 08  	.word	0x0805cd55
 8055ecc: 6b cd 05 08  	.word	0x0805cd6b

08055ed0 <vTaskPrioritySet>:
;     {
 8055ed0: b580         	push	{r7, lr}
 8055ed2: 466f         	mov	r7, sp
 8055ed4: b088         	sub	sp, #0x20
 8055ed6: 9007         	str	r0, [sp, #0x1c]
 8055ed8: 9106         	str	r1, [sp, #0x18]
 8055eda: 2000         	movs	r0, #0x0
;         BaseType_t xYieldRequired = pdFALSE;
 8055edc: 9002         	str	r0, [sp, #0x8]
;         configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8055ede: 9806         	ldr	r0, [sp, #0x18]
 8055ee0: 2810         	cmp	r0, #0x10
 8055ee2: d304         	blo	0x8055eee <vTaskPrioritySet+0x1e> @ imm = #0x8
 8055ee4: e7ff         	b	0x8055ee6 <vTaskPrioritySet+0x16> @ imm = #-0x2
 8055ee6: 487e         	ldr	r0, [pc, #0x1f8]        @ 0x80560e0 <vTaskPrioritySet+0x210>
 8055ee8: 4780         	blx	r0
 8055eea: e7ff         	b	0x8055eec <vTaskPrioritySet+0x1c> @ imm = #-0x2
 8055eec: e7fe         	b	0x8055eec <vTaskPrioritySet+0x1c> @ imm = #-0x4
;         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8055eee: 9806         	ldr	r0, [sp, #0x18]
 8055ef0: 2810         	cmp	r0, #0x10
 8055ef2: d303         	blo	0x8055efc <vTaskPrioritySet+0x2c> @ imm = #0x6
 8055ef4: e7ff         	b	0x8055ef6 <vTaskPrioritySet+0x26> @ imm = #-0x2
 8055ef6: 200f         	movs	r0, #0xf
;             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8055ef8: 9006         	str	r0, [sp, #0x18]
;         }
 8055efa: e000         	b	0x8055efe <vTaskPrioritySet+0x2e> @ imm = #0x0
 8055efc: e7ff         	b	0x8055efe <vTaskPrioritySet+0x2e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8055efe: 4874         	ldr	r0, [pc, #0x1d0]        @ 0x80560d0 <vTaskPrioritySet+0x200>
 8055f00: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055f02: 9807         	ldr	r0, [sp, #0x1c]
 8055f04: b938         	cbnz	r0, 0x8055f16 <vTaskPrioritySet+0x46> @ imm = #0xe
 8055f06: e7ff         	b	0x8055f08 <vTaskPrioritySet+0x38> @ imm = #-0x2
 8055f08: f240 1000    	movw	r0, #0x100
 8055f0c: f2c2 0000    	movt	r0, #0x2000
 8055f10: 6800         	ldr	r0, [r0]
 8055f12: 9000         	str	r0, [sp]
 8055f14: e002         	b	0x8055f1c <vTaskPrioritySet+0x4c> @ imm = #0x4
 8055f16: 9807         	ldr	r0, [sp, #0x1c]
 8055f18: 9000         	str	r0, [sp]
 8055f1a: e7ff         	b	0x8055f1c <vTaskPrioritySet+0x4c> @ imm = #-0x2
 8055f1c: 9800         	ldr	r0, [sp]
 8055f1e: 9005         	str	r0, [sp, #0x14]
;                 uxCurrentBasePriority = pxTCB->uxBasePriority;
 8055f20: 9805         	ldr	r0, [sp, #0x14]
 8055f22: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055f26: 9004         	str	r0, [sp, #0x10]
;             if( uxCurrentBasePriority != uxNewPriority )
 8055f28: 9804         	ldr	r0, [sp, #0x10]
 8055f2a: 9906         	ldr	r1, [sp, #0x18]
 8055f2c: 4288         	cmp	r0, r1
 8055f2e: f000 80ca    	beq.w	0x80560c6 <vTaskPrioritySet+0x1f6> @ imm = #0x194
 8055f32: e7ff         	b	0x8055f34 <vTaskPrioritySet+0x64> @ imm = #-0x2
;                 if( uxNewPriority > uxCurrentBasePriority )
 8055f34: 9806         	ldr	r0, [sp, #0x18]
 8055f36: 9904         	ldr	r1, [sp, #0x10]
 8055f38: 4288         	cmp	r0, r1
 8055f3a: d91b         	bls	0x8055f74 <vTaskPrioritySet+0xa4> @ imm = #0x36
 8055f3c: e7ff         	b	0x8055f3e <vTaskPrioritySet+0x6e> @ imm = #-0x2
;                         if( pxTCB != pxCurrentTCB )
 8055f3e: 9805         	ldr	r0, [sp, #0x14]
 8055f40: f240 1100    	movw	r1, #0x100
 8055f44: f2c2 0100    	movt	r1, #0x2000
 8055f48: 6809         	ldr	r1, [r1]
 8055f4a: 4288         	cmp	r0, r1
 8055f4c: d010         	beq	0x8055f70 <vTaskPrioritySet+0xa0> @ imm = #0x20
 8055f4e: e7ff         	b	0x8055f50 <vTaskPrioritySet+0x80> @ imm = #-0x2
;                             if( uxNewPriority > pxCurrentTCB->uxPriority )
 8055f50: 9806         	ldr	r0, [sp, #0x18]
 8055f52: f240 1100    	movw	r1, #0x100
 8055f56: f2c2 0100    	movt	r1, #0x2000
 8055f5a: 6809         	ldr	r1, [r1]
 8055f5c: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055f60: 4288         	cmp	r0, r1
 8055f62: d903         	bls	0x8055f6c <vTaskPrioritySet+0x9c> @ imm = #0x6
 8055f64: e7ff         	b	0x8055f66 <vTaskPrioritySet+0x96> @ imm = #-0x2
 8055f66: 2001         	movs	r0, #0x1
;                                 xYieldRequired = pdTRUE;
 8055f68: 9002         	str	r0, [sp, #0x8]
;                             }
 8055f6a: e000         	b	0x8055f6e <vTaskPrioritySet+0x9e> @ imm = #0x0
 8055f6c: e7ff         	b	0x8055f6e <vTaskPrioritySet+0x9e> @ imm = #-0x2
;                         }
 8055f6e: e000         	b	0x8055f72 <vTaskPrioritySet+0xa2> @ imm = #0x0
 8055f70: e7ff         	b	0x8055f72 <vTaskPrioritySet+0xa2> @ imm = #-0x2
;                 }
 8055f72: e00d         	b	0x8055f90 <vTaskPrioritySet+0xc0> @ imm = #0x1a
;                 else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8055f74: 9805         	ldr	r0, [sp, #0x14]
 8055f76: f240 1100    	movw	r1, #0x100
 8055f7a: f2c2 0100    	movt	r1, #0x2000
 8055f7e: 6809         	ldr	r1, [r1]
 8055f80: 4288         	cmp	r0, r1
 8055f82: d103         	bne	0x8055f8c <vTaskPrioritySet+0xbc> @ imm = #0x6
 8055f84: e7ff         	b	0x8055f86 <vTaskPrioritySet+0xb6> @ imm = #-0x2
 8055f86: 2001         	movs	r0, #0x1
;                         xYieldRequired = pdTRUE;
 8055f88: 9002         	str	r0, [sp, #0x8]
;                 }
 8055f8a: e000         	b	0x8055f8e <vTaskPrioritySet+0xbe> @ imm = #0x0
 8055f8c: e7ff         	b	0x8055f8e <vTaskPrioritySet+0xbe> @ imm = #-0x2
 8055f8e: e7ff         	b	0x8055f90 <vTaskPrioritySet+0xc0> @ imm = #-0x2
;                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8055f90: 9805         	ldr	r0, [sp, #0x14]
 8055f92: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055f96: 9003         	str	r0, [sp, #0xc]
;                     if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 8055f98: 9805         	ldr	r0, [sp, #0x14]
 8055f9a: f8d0 10a8    	ldr.w	r1, [r0, #0xa8]
 8055f9e: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055fa2: 4288         	cmp	r0, r1
 8055fa4: d007         	beq	0x8055fb6 <vTaskPrioritySet+0xe6> @ imm = #0xe
 8055fa6: e7ff         	b	0x8055fa8 <vTaskPrioritySet+0xd8> @ imm = #-0x2
 8055fa8: 9806         	ldr	r0, [sp, #0x18]
 8055faa: 9905         	ldr	r1, [sp, #0x14]
 8055fac: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055fb0: 4288         	cmp	r0, r1
 8055fb2: d905         	bls	0x8055fc0 <vTaskPrioritySet+0xf0> @ imm = #0xa
 8055fb4: e7ff         	b	0x8055fb6 <vTaskPrioritySet+0xe6> @ imm = #-0x2
;                         pxTCB->uxPriority = uxNewPriority;
 8055fb6: 9806         	ldr	r0, [sp, #0x18]
 8055fb8: 9905         	ldr	r1, [sp, #0x14]
 8055fba: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     }
 8055fbe: e000         	b	0x8055fc2 <vTaskPrioritySet+0xf2> @ imm = #0x0
 8055fc0: e7ff         	b	0x8055fc2 <vTaskPrioritySet+0xf2> @ imm = #-0x2
;                     pxTCB->uxBasePriority = uxNewPriority;
 8055fc2: 9806         	ldr	r0, [sp, #0x18]
 8055fc4: 9905         	ldr	r1, [sp, #0x14]
 8055fc6: f8c1 00c8    	str.w	r0, [r1, #0xc8]
;                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8055fca: 9805         	ldr	r0, [sp, #0x14]
 8055fcc: f890 0097    	ldrb.w	r0, [r0, #0x97]
 8055fd0: 0600         	lsls	r0, r0, #0x18
 8055fd2: 2800         	cmp	r0, #0x0
 8055fd4: d407         	bmi	0x8055fe6 <vTaskPrioritySet+0x116> @ imm = #0xe
 8055fd6: e7ff         	b	0x8055fd8 <vTaskPrioritySet+0x108> @ imm = #-0x2
;                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8055fd8: 9806         	ldr	r0, [sp, #0x18]
 8055fda: f1c0 0010    	rsb.w	r0, r0, #0x10
 8055fde: 9905         	ldr	r1, [sp, #0x14]
 8055fe0: f8c1 0094    	str.w	r0, [r1, #0x94]
;                 }
 8055fe4: e000         	b	0x8055fe8 <vTaskPrioritySet+0x118> @ imm = #0x0
 8055fe6: e7ff         	b	0x8055fe8 <vTaskPrioritySet+0x118> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8055fe8: 9805         	ldr	r0, [sp, #0x14]
 8055fea: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8055fee: 9903         	ldr	r1, [sp, #0xc]
 8055ff0: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8055ff4: f240 1160    	movw	r1, #0x160
 8055ff8: f2c2 0100    	movt	r1, #0x2000
 8055ffc: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8056000: 4288         	cmp	r0, r1
 8056002: d155         	bne	0x80560b0 <vTaskPrioritySet+0x1e0> @ imm = #0xaa
 8056004: e7ff         	b	0x8056006 <vTaskPrioritySet+0x136> @ imm = #-0x2
;                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8056006: 9805         	ldr	r0, [sp, #0x14]
 8056008: 3080         	adds	r0, #0x80
 805600a: 4932         	ldr	r1, [pc, #0xc8]         @ 0x80560d4 <vTaskPrioritySet+0x204>
 805600c: 4788         	blx	r1
 805600e: b908         	cbnz	r0, 0x8056014 <vTaskPrioritySet+0x144> @ imm = #0x2
 8056010: e7ff         	b	0x8056012 <vTaskPrioritySet+0x142> @ imm = #-0x2
;                     }
 8056012: e000         	b	0x8056016 <vTaskPrioritySet+0x146> @ imm = #0x0
 8056014: e7ff         	b	0x8056016 <vTaskPrioritySet+0x146> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8056016: e7ff         	b	0x8056018 <vTaskPrioritySet+0x148> @ imm = #-0x2
 8056018: e7ff         	b	0x805601a <vTaskPrioritySet+0x14a> @ imm = #-0x2
 805601a: 9805         	ldr	r0, [sp, #0x14]
 805601c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056020: f240 21a0    	movw	r1, #0x2a0
 8056024: f2c2 0100    	movt	r1, #0x2000
 8056028: 6809         	ldr	r1, [r1]
 805602a: 4288         	cmp	r0, r1
 805602c: d909         	bls	0x8056042 <vTaskPrioritySet+0x172> @ imm = #0x12
 805602e: e7ff         	b	0x8056030 <vTaskPrioritySet+0x160> @ imm = #-0x2
 8056030: 9805         	ldr	r0, [sp, #0x14]
 8056032: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056036: f240 21a0    	movw	r1, #0x2a0
 805603a: f2c2 0100    	movt	r1, #0x2000
 805603e: 6008         	str	r0, [r1]
 8056040: e7ff         	b	0x8056042 <vTaskPrioritySet+0x172> @ imm = #-0x2
 8056042: e7ff         	b	0x8056044 <vTaskPrioritySet+0x174> @ imm = #-0x2
 8056044: e7ff         	b	0x8056046 <vTaskPrioritySet+0x176> @ imm = #-0x2
 8056046: 9805         	ldr	r0, [sp, #0x14]
 8056048: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805604c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056050: f240 1160    	movw	r1, #0x160
 8056054: f2c2 0100    	movt	r1, #0x2000
 8056058: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805605c: 6840         	ldr	r0, [r0, #0x4]
 805605e: 9001         	str	r0, [sp, #0x4]
 8056060: 9801         	ldr	r0, [sp, #0x4]
 8056062: 9a05         	ldr	r2, [sp, #0x14]
 8056064: f8c2 0084    	str.w	r0, [r2, #0x84]
 8056068: 9801         	ldr	r0, [sp, #0x4]
 805606a: 6880         	ldr	r0, [r0, #0x8]
 805606c: 9a05         	ldr	r2, [sp, #0x14]
 805606e: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056072: 9805         	ldr	r0, [sp, #0x14]
 8056074: 3080         	adds	r0, #0x80
 8056076: 9a01         	ldr	r2, [sp, #0x4]
 8056078: 6892         	ldr	r2, [r2, #0x8]
 805607a: 6050         	str	r0, [r2, #0x4]
 805607c: 9805         	ldr	r0, [sp, #0x14]
 805607e: 3080         	adds	r0, #0x80
 8056080: 9a01         	ldr	r2, [sp, #0x4]
 8056082: 6090         	str	r0, [r2, #0x8]
 8056084: 9a05         	ldr	r2, [sp, #0x14]
 8056086: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 805608a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805608e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056092: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056096: 9805         	ldr	r0, [sp, #0x14]
 8056098: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805609c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80560a0: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80560a4: 3001         	adds	r0, #0x1
 80560a6: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80560aa: e7ff         	b	0x80560ac <vTaskPrioritySet+0x1dc> @ imm = #-0x2
 80560ac: e7ff         	b	0x80560ae <vTaskPrioritySet+0x1de> @ imm = #-0x2
;                 }
 80560ae: e000         	b	0x80560b2 <vTaskPrioritySet+0x1e2> @ imm = #0x0
 80560b0: e7ff         	b	0x80560b2 <vTaskPrioritySet+0x1e2> @ imm = #-0x2
;                 if( xYieldRequired != pdFALSE )
 80560b2: 9802         	ldr	r0, [sp, #0x8]
 80560b4: b128         	cbz	r0, 0x80560c2 <vTaskPrioritySet+0x1f2> @ imm = #0xa
 80560b6: e7ff         	b	0x80560b8 <vTaskPrioritySet+0x1e8> @ imm = #-0x2
;                     taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 80560b8: e7ff         	b	0x80560ba <vTaskPrioritySet+0x1ea> @ imm = #-0x2
 80560ba: 4807         	ldr	r0, [pc, #0x1c]         @ 0x80560d8 <vTaskPrioritySet+0x208>
 80560bc: 4780         	blx	r0
 80560be: e7ff         	b	0x80560c0 <vTaskPrioritySet+0x1f0> @ imm = #-0x2
;                 }
 80560c0: e000         	b	0x80560c4 <vTaskPrioritySet+0x1f4> @ imm = #0x0
 80560c2: e7ff         	b	0x80560c4 <vTaskPrioritySet+0x1f4> @ imm = #-0x2
;             }
 80560c4: e7ff         	b	0x80560c6 <vTaskPrioritySet+0x1f6> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 80560c6: 4805         	ldr	r0, [pc, #0x14]         @ 0x80560dc <vTaskPrioritySet+0x20c>
 80560c8: 4780         	blx	r0
;     }
 80560ca: b008         	add	sp, #0x20
 80560cc: bd80         	pop	{r7, pc}
 80560ce: bf00         	nop

080560d0 <$d.33>:
 80560d0: 19 c4 05 08  	.word	0x0805c419
 80560d4: 33 9f 05 08  	.word	0x08059f33
 80560d8: ff c3 05 08  	.word	0x0805c3ff
 80560dc: 3d c4 05 08  	.word	0x0805c43d
 80560e0: 55 cd 05 08  	.word	0x0805cd55

080560e4 <vTaskSuspend>:
;     {
 80560e4: b580         	push	{r7, lr}
 80560e6: 466f         	mov	r7, sp
 80560e8: b084         	sub	sp, #0x10
 80560ea: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 80560ec: 4849         	ldr	r0, [pc, #0x124]        @ 0x8056214 <vTaskSuspend+0x130>
 80560ee: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80560f0: 9803         	ldr	r0, [sp, #0xc]
 80560f2: b938         	cbnz	r0, 0x8056104 <vTaskSuspend+0x20> @ imm = #0xe
 80560f4: e7ff         	b	0x80560f6 <vTaskSuspend+0x12> @ imm = #-0x2
 80560f6: f240 1000    	movw	r0, #0x100
 80560fa: f2c2 0000    	movt	r0, #0x2000
 80560fe: 6800         	ldr	r0, [r0]
 8056100: 9000         	str	r0, [sp]
 8056102: e002         	b	0x805610a <vTaskSuspend+0x26> @ imm = #0x4
 8056104: 9803         	ldr	r0, [sp, #0xc]
 8056106: 9000         	str	r0, [sp]
 8056108: e7ff         	b	0x805610a <vTaskSuspend+0x26> @ imm = #-0x2
 805610a: 9800         	ldr	r0, [sp]
 805610c: 9002         	str	r0, [sp, #0x8]
;             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805610e: 9802         	ldr	r0, [sp, #0x8]
 8056110: 3080         	adds	r0, #0x80
 8056112: 4941         	ldr	r1, [pc, #0x104]        @ 0x8056218 <vTaskSuspend+0x134>
 8056114: 4788         	blx	r1
 8056116: b908         	cbnz	r0, 0x805611c <vTaskSuspend+0x38> @ imm = #0x2
 8056118: e7ff         	b	0x805611a <vTaskSuspend+0x36> @ imm = #-0x2
;             }
 805611a: e000         	b	0x805611e <vTaskSuspend+0x3a> @ imm = #0x0
 805611c: e7ff         	b	0x805611e <vTaskSuspend+0x3a> @ imm = #-0x2
;             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 805611e: 9802         	ldr	r0, [sp, #0x8]
 8056120: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056124: b128         	cbz	r0, 0x8056132 <vTaskSuspend+0x4e> @ imm = #0xa
 8056126: e7ff         	b	0x8056128 <vTaskSuspend+0x44> @ imm = #-0x2
;                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8056128: 9802         	ldr	r0, [sp, #0x8]
 805612a: 3094         	adds	r0, #0x94
 805612c: 493b         	ldr	r1, [pc, #0xec]         @ 0x805621c <vTaskSuspend+0x138>
 805612e: 4788         	blx	r1
;             }
 8056130: e000         	b	0x8056134 <vTaskSuspend+0x50> @ imm = #0x0
 8056132: e7ff         	b	0x8056134 <vTaskSuspend+0x50> @ imm = #-0x2
;             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8056134: 9802         	ldr	r0, [sp, #0x8]
 8056136: f100 0180    	add.w	r1, r0, #0x80
 805613a: f240 104c    	movw	r0, #0x14c
 805613e: f2c2 0000    	movt	r0, #0x2000
 8056142: 4a37         	ldr	r2, [pc, #0xdc]         @ 0x8056220 <vTaskSuspend+0x13c>
 8056144: 4790         	blx	r2
 8056146: 2000         	movs	r0, #0x0
;                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8056148: 9001         	str	r0, [sp, #0x4]
 805614a: e7ff         	b	0x805614c <vTaskSuspend+0x68> @ imm = #-0x2
 805614c: 9801         	ldr	r0, [sp, #0x4]
 805614e: 2800         	cmp	r0, #0x0
 8056150: dc14         	bgt	0x805617c <vTaskSuspend+0x98> @ imm = #0x28
 8056152: e7ff         	b	0x8056154 <vTaskSuspend+0x70> @ imm = #-0x2
;                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8056154: 9802         	ldr	r0, [sp, #0x8]
 8056156: 9901         	ldr	r1, [sp, #0x4]
 8056158: 4408         	add	r0, r1
 805615a: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 805615e: 2801         	cmp	r0, #0x1
 8056160: d107         	bne	0x8056172 <vTaskSuspend+0x8e> @ imm = #0xe
 8056162: e7ff         	b	0x8056164 <vTaskSuspend+0x80> @ imm = #-0x2
;                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8056164: 9802         	ldr	r0, [sp, #0x8]
 8056166: 9901         	ldr	r1, [sp, #0x4]
 8056168: 4401         	add	r1, r0
 805616a: 2000         	movs	r0, #0x0
 805616c: f881 00d4    	strb.w	r0, [r1, #0xd4]
;                     }
 8056170: e7ff         	b	0x8056172 <vTaskSuspend+0x8e> @ imm = #-0x2
;                 }
 8056172: e7ff         	b	0x8056174 <vTaskSuspend+0x90> @ imm = #-0x2
;                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8056174: 9801         	ldr	r0, [sp, #0x4]
 8056176: 3001         	adds	r0, #0x1
 8056178: 9001         	str	r0, [sp, #0x4]
 805617a: e7e7         	b	0x805614c <vTaskSuspend+0x68> @ imm = #-0x32
;             taskEXIT_CRITICAL();
 805617c: 4829         	ldr	r0, [pc, #0xa4]         @ 0x8056224 <vTaskSuspend+0x140>
 805617e: 4780         	blx	r0
;             if( xSchedulerRunning != pdFALSE )
 8056180: f240 1024    	movw	r0, #0x124
 8056184: f2c2 0000    	movt	r0, #0x2000
 8056188: 6800         	ldr	r0, [r0]
 805618a: b138         	cbz	r0, 0x805619c <vTaskSuspend+0xb8> @ imm = #0xe
 805618c: e7ff         	b	0x805618e <vTaskSuspend+0xaa> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 805618e: 4826         	ldr	r0, [pc, #0x98]         @ 0x8056228 <vTaskSuspend+0x144>
 8056190: 4780         	blx	r0
;                     prvResetNextTaskUnblockTime();
 8056192: 4826         	ldr	r0, [pc, #0x98]         @ 0x805622c <vTaskSuspend+0x148>
 8056194: 4780         	blx	r0
;                 taskEXIT_CRITICAL();
 8056196: 4826         	ldr	r0, [pc, #0x98]         @ 0x8056230 <vTaskSuspend+0x14c>
 8056198: 4780         	blx	r0
;             }
 805619a: e000         	b	0x805619e <vTaskSuspend+0xba> @ imm = #0x0
 805619c: e7ff         	b	0x805619e <vTaskSuspend+0xba> @ imm = #-0x2
;             if( pxTCB == pxCurrentTCB )
 805619e: 9802         	ldr	r0, [sp, #0x8]
 80561a0: f240 1100    	movw	r1, #0x100
 80561a4: f2c2 0100    	movt	r1, #0x2000
 80561a8: 6809         	ldr	r1, [r1]
 80561aa: 4288         	cmp	r0, r1
 80561ac: d12e         	bne	0x805620c <vTaskSuspend+0x128> @ imm = #0x5c
 80561ae: e7ff         	b	0x80561b0 <vTaskSuspend+0xcc> @ imm = #-0x2
;                 if( xSchedulerRunning != pdFALSE )
 80561b0: f240 1024    	movw	r0, #0x124
 80561b4: f2c2 0000    	movt	r0, #0x2000
 80561b8: 6800         	ldr	r0, [r0]
 80561ba: b170         	cbz	r0, 0x80561da <vTaskSuspend+0xf6> @ imm = #0x1c
 80561bc: e7ff         	b	0x80561be <vTaskSuspend+0xda> @ imm = #-0x2
;                     configASSERT( uxSchedulerSuspended == 0 );
 80561be: f240 1028    	movw	r0, #0x128
 80561c2: f2c2 0000    	movt	r0, #0x2000
 80561c6: 6800         	ldr	r0, [r0]
 80561c8: b120         	cbz	r0, 0x80561d4 <vTaskSuspend+0xf0> @ imm = #0x8
 80561ca: e7ff         	b	0x80561cc <vTaskSuspend+0xe8> @ imm = #-0x2
 80561cc: 481b         	ldr	r0, [pc, #0x6c]         @ 0x805623c <vTaskSuspend+0x158>
 80561ce: 4780         	blx	r0
 80561d0: e7ff         	b	0x80561d2 <vTaskSuspend+0xee> @ imm = #-0x2
 80561d2: e7fe         	b	0x80561d2 <vTaskSuspend+0xee> @ imm = #-0x4
;                     portYIELD_WITHIN_API();
 80561d4: 4818         	ldr	r0, [pc, #0x60]         @ 0x8056238 <vTaskSuspend+0x154>
 80561d6: 4780         	blx	r0
;                 }
 80561d8: e017         	b	0x805620a <vTaskSuspend+0x126> @ imm = #0x2e
;                     if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80561da: f240 104c    	movw	r0, #0x14c
 80561de: f2c2 0000    	movt	r0, #0x2000
 80561e2: 6800         	ldr	r0, [r0]
 80561e4: f240 1120    	movw	r1, #0x120
 80561e8: f2c2 0100    	movt	r1, #0x2000
 80561ec: 6809         	ldr	r1, [r1]
 80561ee: 4288         	cmp	r0, r1
 80561f0: d107         	bne	0x8056202 <vTaskSuspend+0x11e> @ imm = #0xe
 80561f2: e7ff         	b	0x80561f4 <vTaskSuspend+0x110> @ imm = #-0x2
;                         pxCurrentTCB = NULL;
 80561f4: f240 1100    	movw	r1, #0x100
 80561f8: f2c2 0100    	movt	r1, #0x2000
 80561fc: 2000         	movs	r0, #0x0
 80561fe: 6008         	str	r0, [r1]
;                     }
 8056200: e002         	b	0x8056208 <vTaskSuspend+0x124> @ imm = #0x4
;                         vTaskSwitchContext();
 8056202: 480c         	ldr	r0, [pc, #0x30]         @ 0x8056234 <vTaskSuspend+0x150>
 8056204: 4780         	blx	r0
 8056206: e7ff         	b	0x8056208 <vTaskSuspend+0x124> @ imm = #-0x2
 8056208: e7ff         	b	0x805620a <vTaskSuspend+0x126> @ imm = #-0x2
;             }
 805620a: e000         	b	0x805620e <vTaskSuspend+0x12a> @ imm = #0x0
 805620c: e7ff         	b	0x805620e <vTaskSuspend+0x12a> @ imm = #-0x2
;     }
 805620e: b004         	add	sp, #0x10
 8056210: bd80         	pop	{r7, pc}
 8056212: bf00         	nop

08056214 <$d.35>:
 8056214: 19 c4 05 08  	.word	0x0805c419
 8056218: 33 9f 05 08  	.word	0x08059f33
 805621c: 33 9f 05 08  	.word	0x08059f33
 8056220: 8f 9e 05 08  	.word	0x08059e8f
 8056224: 3d c4 05 08  	.word	0x0805c43d
 8056228: 19 c4 05 08  	.word	0x0805c419
 805622c: bd 56 05 08  	.word	0x080556bd
 8056230: 3d c4 05 08  	.word	0x0805c43d
 8056234: 41 62 05 08  	.word	0x08056241
 8056238: ff c3 05 08  	.word	0x0805c3ff
 805623c: 55 cd 05 08  	.word	0x0805cd55

08056240 <vTaskSwitchContext>:
;     {
 8056240: b580         	push	{r7, lr}
 8056242: 466f         	mov	r7, sp
 8056244: b082         	sub	sp, #0x8
;         if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8056246: f240 1028    	movw	r0, #0x128
 805624a: f2c2 0000    	movt	r0, #0x2000
 805624e: 6800         	ldr	r0, [r0]
 8056250: b138         	cbz	r0, 0x8056262 <vTaskSwitchContext+0x22> @ imm = #0xe
 8056252: e7ff         	b	0x8056254 <vTaskSwitchContext+0x14> @ imm = #-0x2
;             xYieldPendings[ 0 ] = pdTRUE;
 8056254: f240 21a4    	movw	r1, #0x2a4
 8056258: f2c2 0100    	movt	r1, #0x2000
 805625c: 2001         	movs	r0, #0x1
 805625e: 6008         	str	r0, [r1]
;         }
 8056260: e04d         	b	0x80562fe <vTaskSwitchContext+0xbe> @ imm = #0x9a
;             xYieldPendings[ 0 ] = pdFALSE;
 8056262: f240 21a4    	movw	r1, #0x2a4
 8056266: f2c2 0100    	movt	r1, #0x2000
 805626a: 2000         	movs	r0, #0x0
 805626c: 6008         	str	r0, [r1]
;             taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 805626e: e7ff         	b	0x8056270 <vTaskSwitchContext+0x30> @ imm = #-0x2
 8056270: f240 20a0    	movw	r0, #0x2a0
 8056274: f2c2 0000    	movt	r0, #0x2000
 8056278: 6800         	ldr	r0, [r0]
 805627a: 9001         	str	r0, [sp, #0x4]
 805627c: e7ff         	b	0x805627e <vTaskSwitchContext+0x3e> @ imm = #-0x2
 805627e: 9801         	ldr	r0, [sp, #0x4]
 8056280: eb00 0180    	add.w	r1, r0, r0, lsl #2
 8056284: f240 1060    	movw	r0, #0x160
 8056288: f2c2 0000    	movt	r0, #0x2000
 805628c: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 8056290: b958         	cbnz	r0, 0x80562aa <vTaskSwitchContext+0x6a> @ imm = #0x16
 8056292: e7ff         	b	0x8056294 <vTaskSwitchContext+0x54> @ imm = #-0x2
 8056294: 9801         	ldr	r0, [sp, #0x4]
 8056296: b920         	cbnz	r0, 0x80562a2 <vTaskSwitchContext+0x62> @ imm = #0x8
 8056298: e7ff         	b	0x805629a <vTaskSwitchContext+0x5a> @ imm = #-0x2
 805629a: 481a         	ldr	r0, [pc, #0x68]         @ 0x8056304 <vTaskSwitchContext+0xc4>
 805629c: 4780         	blx	r0
 805629e: e7ff         	b	0x80562a0 <vTaskSwitchContext+0x60> @ imm = #-0x2
 80562a0: e7fe         	b	0x80562a0 <vTaskSwitchContext+0x60> @ imm = #-0x4
 80562a2: 9801         	ldr	r0, [sp, #0x4]
 80562a4: 3801         	subs	r0, #0x1
 80562a6: 9001         	str	r0, [sp, #0x4]
 80562a8: e7e9         	b	0x805627e <vTaskSwitchContext+0x3e> @ imm = #-0x2e
 80562aa: e7ff         	b	0x80562ac <vTaskSwitchContext+0x6c> @ imm = #-0x2
 80562ac: 9801         	ldr	r0, [sp, #0x4]
 80562ae: eb00 0180    	add.w	r1, r0, r0, lsl #2
 80562b2: f240 1060    	movw	r0, #0x160
 80562b6: f2c2 0000    	movt	r0, #0x2000
 80562ba: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80562be: 9000         	str	r0, [sp]
 80562c0: 9900         	ldr	r1, [sp]
 80562c2: 6848         	ldr	r0, [r1, #0x4]
 80562c4: 6840         	ldr	r0, [r0, #0x4]
 80562c6: 6048         	str	r0, [r1, #0x4]
 80562c8: 9900         	ldr	r1, [sp]
 80562ca: 6848         	ldr	r0, [r1, #0x4]
 80562cc: 3108         	adds	r1, #0x8
 80562ce: 4288         	cmp	r0, r1
 80562d0: d104         	bne	0x80562dc <vTaskSwitchContext+0x9c> @ imm = #0x8
 80562d2: e7ff         	b	0x80562d4 <vTaskSwitchContext+0x94> @ imm = #-0x2
 80562d4: 9900         	ldr	r1, [sp]
 80562d6: 68c8         	ldr	r0, [r1, #0xc]
 80562d8: 6048         	str	r0, [r1, #0x4]
 80562da: e7ff         	b	0x80562dc <vTaskSwitchContext+0x9c> @ imm = #-0x2
 80562dc: 9800         	ldr	r0, [sp]
 80562de: 6840         	ldr	r0, [r0, #0x4]
 80562e0: 68c0         	ldr	r0, [r0, #0xc]
 80562e2: f240 1100    	movw	r1, #0x100
 80562e6: f2c2 0100    	movt	r1, #0x2000
 80562ea: 6008         	str	r0, [r1]
 80562ec: e7ff         	b	0x80562ee <vTaskSwitchContext+0xae> @ imm = #-0x2
 80562ee: 9801         	ldr	r0, [sp, #0x4]
 80562f0: f240 21a0    	movw	r1, #0x2a0
 80562f4: f2c2 0100    	movt	r1, #0x2000
 80562f8: 6008         	str	r0, [r1]
 80562fa: e7ff         	b	0x80562fc <vTaskSwitchContext+0xbc> @ imm = #-0x2
 80562fc: e7ff         	b	0x80562fe <vTaskSwitchContext+0xbe> @ imm = #-0x2
;     }
 80562fe: b002         	add	sp, #0x8
 8056300: bd80         	pop	{r7, pc}
 8056302: bf00         	nop

08056304 <$d.37>:
 8056304: 55 cd 05 08  	.word	0x0805cd55

08056308 <vTaskResume>:
;     {
 8056308: b580         	push	{r7, lr}
 805630a: 466f         	mov	r7, sp
 805630c: b084         	sub	sp, #0x10
 805630e: 9003         	str	r0, [sp, #0xc]
;         TCB_t * const pxTCB = xTaskToResume;
 8056310: 9803         	ldr	r0, [sp, #0xc]
 8056312: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTaskToResume );
 8056314: 9803         	ldr	r0, [sp, #0xc]
 8056316: b920         	cbnz	r0, 0x8056322 <vTaskResume+0x1a> @ imm = #0x8
 8056318: e7ff         	b	0x805631a <vTaskResume+0x12> @ imm = #-0x2
 805631a: 4847         	ldr	r0, [pc, #0x11c]        @ 0x8056438 <vTaskResume+0x130>
 805631c: 4780         	blx	r0
 805631e: e7ff         	b	0x8056320 <vTaskResume+0x18> @ imm = #-0x2
 8056320: e7fe         	b	0x8056320 <vTaskResume+0x18> @ imm = #-0x4
;             if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8056322: 9802         	ldr	r0, [sp, #0x8]
 8056324: f240 1100    	movw	r1, #0x100
 8056328: f2c2 0100    	movt	r1, #0x2000
 805632c: 6809         	ldr	r1, [r1]
 805632e: 4288         	cmp	r0, r1
 8056330: d074         	beq	0x805641c <vTaskResume+0x114> @ imm = #0xe8
 8056332: e7ff         	b	0x8056334 <vTaskResume+0x2c> @ imm = #-0x2
 8056334: 9802         	ldr	r0, [sp, #0x8]
 8056336: 2800         	cmp	r0, #0x0
 8056338: d070         	beq	0x805641c <vTaskResume+0x114> @ imm = #0xe0
 805633a: e7ff         	b	0x805633c <vTaskResume+0x34> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805633c: 4839         	ldr	r0, [pc, #0xe4]         @ 0x8056424 <vTaskResume+0x11c>
 805633e: 4780         	blx	r0
;                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8056340: 9802         	ldr	r0, [sp, #0x8]
 8056342: 4939         	ldr	r1, [pc, #0xe4]         @ 0x8056428 <vTaskResume+0x120>
 8056344: 4788         	blx	r1
 8056346: 2800         	cmp	r0, #0x0
 8056348: d064         	beq	0x8056414 <vTaskResume+0x10c> @ imm = #0xc8
 805634a: e7ff         	b	0x805634c <vTaskResume+0x44> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 805634c: 9802         	ldr	r0, [sp, #0x8]
 805634e: 3080         	adds	r0, #0x80
 8056350: 4936         	ldr	r1, [pc, #0xd8]         @ 0x805642c <vTaskResume+0x124>
 8056352: 4788         	blx	r1
;                     prvAddTaskToReadyList( pxTCB );
 8056354: e7ff         	b	0x8056356 <vTaskResume+0x4e> @ imm = #-0x2
 8056356: e7ff         	b	0x8056358 <vTaskResume+0x50> @ imm = #-0x2
 8056358: 9802         	ldr	r0, [sp, #0x8]
 805635a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805635e: f240 21a0    	movw	r1, #0x2a0
 8056362: f2c2 0100    	movt	r1, #0x2000
 8056366: 6809         	ldr	r1, [r1]
 8056368: 4288         	cmp	r0, r1
 805636a: d909         	bls	0x8056380 <vTaskResume+0x78> @ imm = #0x12
 805636c: e7ff         	b	0x805636e <vTaskResume+0x66> @ imm = #-0x2
 805636e: 9802         	ldr	r0, [sp, #0x8]
 8056370: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056374: f240 21a0    	movw	r1, #0x2a0
 8056378: f2c2 0100    	movt	r1, #0x2000
 805637c: 6008         	str	r0, [r1]
 805637e: e7ff         	b	0x8056380 <vTaskResume+0x78> @ imm = #-0x2
 8056380: e7ff         	b	0x8056382 <vTaskResume+0x7a> @ imm = #-0x2
 8056382: e7ff         	b	0x8056384 <vTaskResume+0x7c> @ imm = #-0x2
 8056384: 9802         	ldr	r0, [sp, #0x8]
 8056386: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805638a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805638e: f240 1160    	movw	r1, #0x160
 8056392: f2c2 0100    	movt	r1, #0x2000
 8056396: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805639a: 6840         	ldr	r0, [r0, #0x4]
 805639c: 9001         	str	r0, [sp, #0x4]
 805639e: 9801         	ldr	r0, [sp, #0x4]
 80563a0: 9a02         	ldr	r2, [sp, #0x8]
 80563a2: f8c2 0084    	str.w	r0, [r2, #0x84]
 80563a6: 9801         	ldr	r0, [sp, #0x4]
 80563a8: 6880         	ldr	r0, [r0, #0x8]
 80563aa: 9a02         	ldr	r2, [sp, #0x8]
 80563ac: f8c2 0088    	str.w	r0, [r2, #0x88]
 80563b0: 9802         	ldr	r0, [sp, #0x8]
 80563b2: 3080         	adds	r0, #0x80
 80563b4: 9a01         	ldr	r2, [sp, #0x4]
 80563b6: 6892         	ldr	r2, [r2, #0x8]
 80563b8: 6050         	str	r0, [r2, #0x4]
 80563ba: 9802         	ldr	r0, [sp, #0x8]
 80563bc: 3080         	adds	r0, #0x80
 80563be: 9a01         	ldr	r2, [sp, #0x4]
 80563c0: 6090         	str	r0, [r2, #0x8]
 80563c2: 9a02         	ldr	r2, [sp, #0x8]
 80563c4: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80563c8: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80563cc: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80563d0: f8c2 0090    	str.w	r0, [r2, #0x90]
 80563d4: 9802         	ldr	r0, [sp, #0x8]
 80563d6: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80563da: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80563de: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80563e2: 3001         	adds	r0, #0x1
 80563e4: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80563e8: e7ff         	b	0x80563ea <vTaskResume+0xe2> @ imm = #-0x2
 80563ea: e7ff         	b	0x80563ec <vTaskResume+0xe4> @ imm = #-0x2
;                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80563ec: e7ff         	b	0x80563ee <vTaskResume+0xe6> @ imm = #-0x2
 80563ee: f240 1000    	movw	r0, #0x100
 80563f2: f2c2 0000    	movt	r0, #0x2000
 80563f6: 6800         	ldr	r0, [r0]
 80563f8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80563fc: 9902         	ldr	r1, [sp, #0x8]
 80563fe: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056402: 4288         	cmp	r0, r1
 8056404: d203         	bhs	0x805640e <vTaskResume+0x106> @ imm = #0x6
 8056406: e7ff         	b	0x8056408 <vTaskResume+0x100> @ imm = #-0x2
 8056408: 4809         	ldr	r0, [pc, #0x24]         @ 0x8056430 <vTaskResume+0x128>
 805640a: 4780         	blx	r0
 805640c: e000         	b	0x8056410 <vTaskResume+0x108> @ imm = #0x0
 805640e: e7ff         	b	0x8056410 <vTaskResume+0x108> @ imm = #-0x2
;                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8056410: e7ff         	b	0x8056412 <vTaskResume+0x10a> @ imm = #-0x2
;                 }
 8056412: e000         	b	0x8056416 <vTaskResume+0x10e> @ imm = #0x0
 8056414: e7ff         	b	0x8056416 <vTaskResume+0x10e> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 8056416: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8056434 <vTaskResume+0x12c>
 8056418: 4780         	blx	r0
;         }
 805641a: e000         	b	0x805641e <vTaskResume+0x116> @ imm = #0x0
 805641c: e7ff         	b	0x805641e <vTaskResume+0x116> @ imm = #-0x2
;     }
 805641e: b004         	add	sp, #0x10
 8056420: bd80         	pop	{r7, pc}
 8056422: bf00         	nop

08056424 <$d.39>:
 8056424: 19 c4 05 08  	.word	0x0805c419
 8056428: 3d 64 05 08  	.word	0x0805643d
 805642c: 33 9f 05 08  	.word	0x08059f33
 8056430: ff c3 05 08  	.word	0x0805c3ff
 8056434: 3d c4 05 08  	.word	0x0805c43d
 8056438: 55 cd 05 08  	.word	0x0805cd55

0805643c <prvTaskIsTaskSuspended>:
;     {
 805643c: b580         	push	{r7, lr}
 805643e: 466f         	mov	r7, sp
 8056440: b084         	sub	sp, #0x10
 8056442: 9003         	str	r0, [sp, #0xc]
 8056444: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 8056446: 9002         	str	r0, [sp, #0x8]
;         const TCB_t * const pxTCB = xTask;
 8056448: 9803         	ldr	r0, [sp, #0xc]
 805644a: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTask );
 805644c: 9803         	ldr	r0, [sp, #0xc]
 805644e: b920         	cbnz	r0, 0x805645a <prvTaskIsTaskSuspended+0x1e> @ imm = #0x8
 8056450: e7ff         	b	0x8056452 <prvTaskIsTaskSuspended+0x16> @ imm = #-0x2
 8056452: 4814         	ldr	r0, [pc, #0x50]         @ 0x80564a4 <prvTaskIsTaskSuspended+0x68>
 8056454: 4780         	blx	r0
 8056456: e7ff         	b	0x8056458 <prvTaskIsTaskSuspended+0x1c> @ imm = #-0x2
 8056458: e7fe         	b	0x8056458 <prvTaskIsTaskSuspended+0x1c> @ imm = #-0x4
;         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 805645a: 9801         	ldr	r0, [sp, #0x4]
 805645c: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8056460: f240 114c    	movw	r1, #0x14c
 8056464: f2c2 0100    	movt	r1, #0x2000
 8056468: 4288         	cmp	r0, r1
 805646a: d116         	bne	0x805649a <prvTaskIsTaskSuspended+0x5e> @ imm = #0x2c
 805646c: e7ff         	b	0x805646e <prvTaskIsTaskSuspended+0x32> @ imm = #-0x2
;             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 805646e: 9801         	ldr	r0, [sp, #0x4]
 8056470: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056474: f240 1138    	movw	r1, #0x138
 8056478: f2c2 0100    	movt	r1, #0x2000
 805647c: 4288         	cmp	r0, r1
 805647e: d00a         	beq	0x8056496 <prvTaskIsTaskSuspended+0x5a> @ imm = #0x14
 8056480: e7ff         	b	0x8056482 <prvTaskIsTaskSuspended+0x46> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8056482: 9801         	ldr	r0, [sp, #0x4]
 8056484: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056488: b918         	cbnz	r0, 0x8056492 <prvTaskIsTaskSuspended+0x56> @ imm = #0x6
 805648a: e7ff         	b	0x805648c <prvTaskIsTaskSuspended+0x50> @ imm = #-0x2
 805648c: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 805648e: 9002         	str	r0, [sp, #0x8]
;                 }
 8056490: e000         	b	0x8056494 <prvTaskIsTaskSuspended+0x58> @ imm = #0x0
 8056492: e7ff         	b	0x8056494 <prvTaskIsTaskSuspended+0x58> @ imm = #-0x2
;             }
 8056494: e000         	b	0x8056498 <prvTaskIsTaskSuspended+0x5c> @ imm = #0x0
 8056496: e7ff         	b	0x8056498 <prvTaskIsTaskSuspended+0x5c> @ imm = #-0x2
;         }
 8056498: e000         	b	0x805649c <prvTaskIsTaskSuspended+0x60> @ imm = #0x0
 805649a: e7ff         	b	0x805649c <prvTaskIsTaskSuspended+0x60> @ imm = #-0x2
;         return xReturn;
 805649c: 9802         	ldr	r0, [sp, #0x8]
 805649e: b004         	add	sp, #0x10
 80564a0: bd80         	pop	{r7, pc}
 80564a2: bf00         	nop

080564a4 <$d.41>:
 80564a4: 55 cd 05 08  	.word	0x0805cd55

080564a8 <xTaskResumeFromISR>:
;     {
 80564a8: b580         	push	{r7, lr}
 80564aa: 466f         	mov	r7, sp
 80564ac: b086         	sub	sp, #0x18
 80564ae: 9005         	str	r0, [sp, #0x14]
 80564b0: 2000         	movs	r0, #0x0
;         BaseType_t xYieldRequired = pdFALSE;
 80564b2: 9004         	str	r0, [sp, #0x10]
;         TCB_t * const pxTCB = xTaskToResume;
 80564b4: 9805         	ldr	r0, [sp, #0x14]
 80564b6: 9003         	str	r0, [sp, #0xc]
;         configASSERT( xTaskToResume );
 80564b8: 9805         	ldr	r0, [sp, #0x14]
 80564ba: b920         	cbnz	r0, 0x80564c6 <xTaskResumeFromISR+0x1e> @ imm = #0x8
 80564bc: e7ff         	b	0x80564be <xTaskResumeFromISR+0x16> @ imm = #-0x2
 80564be: 484e         	ldr	r0, [pc, #0x138]        @ 0x80565f8 <xTaskResumeFromISR+0x150>
 80564c0: 4780         	blx	r0
 80564c2: e7ff         	b	0x80564c4 <xTaskResumeFromISR+0x1c> @ imm = #-0x2
 80564c4: e7fe         	b	0x80564c4 <xTaskResumeFromISR+0x1c> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80564c6: 4846         	ldr	r0, [pc, #0x118]        @ 0x80565e0 <xTaskResumeFromISR+0x138>
 80564c8: 4780         	blx	r0
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 80564ca: 4846         	ldr	r0, [pc, #0x118]        @ 0x80565e4 <xTaskResumeFromISR+0x13c>
 80564cc: 4780         	blx	r0
 80564ce: 9002         	str	r0, [sp, #0x8]
;             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80564d0: 9803         	ldr	r0, [sp, #0xc]
 80564d2: 4945         	ldr	r1, [pc, #0x114]        @ 0x80565e8 <xTaskResumeFromISR+0x140>
 80564d4: 4788         	blx	r1
 80564d6: 2800         	cmp	r0, #0x0
 80564d8: d07a         	beq	0x80565d0 <xTaskResumeFromISR+0x128> @ imm = #0xf4
 80564da: e7ff         	b	0x80564dc <xTaskResumeFromISR+0x34> @ imm = #-0x2
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80564dc: f240 1028    	movw	r0, #0x128
 80564e0: f2c2 0000    	movt	r0, #0x2000
 80564e4: 6800         	ldr	r0, [r0]
 80564e6: 2800         	cmp	r0, #0x0
 80564e8: d167         	bne	0x80565ba <xTaskResumeFromISR+0x112> @ imm = #0xce
 80564ea: e7ff         	b	0x80564ec <xTaskResumeFromISR+0x44> @ imm = #-0x2
;                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80564ec: 9803         	ldr	r0, [sp, #0xc]
 80564ee: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80564f2: f240 1100    	movw	r1, #0x100
 80564f6: f2c2 0100    	movt	r1, #0x2000
 80564fa: 6809         	ldr	r1, [r1]
 80564fc: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056500: 4288         	cmp	r0, r1
 8056502: d908         	bls	0x8056516 <xTaskResumeFromISR+0x6e> @ imm = #0x10
 8056504: e7ff         	b	0x8056506 <xTaskResumeFromISR+0x5e> @ imm = #-0x2
 8056506: 2001         	movs	r0, #0x1
;                             xYieldRequired = pdTRUE;
 8056508: 9004         	str	r0, [sp, #0x10]
;                             xYieldPendings[ 0 ] = pdTRUE;
 805650a: f240 21a4    	movw	r1, #0x2a4
 805650e: f2c2 0100    	movt	r1, #0x2000
 8056512: 6008         	str	r0, [r1]
;                         }
 8056514: e000         	b	0x8056518 <xTaskResumeFromISR+0x70> @ imm = #0x0
 8056516: e7ff         	b	0x8056518 <xTaskResumeFromISR+0x70> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8056518: 9803         	ldr	r0, [sp, #0xc]
 805651a: 3080         	adds	r0, #0x80
 805651c: 4934         	ldr	r1, [pc, #0xd0]         @ 0x80565f0 <xTaskResumeFromISR+0x148>
 805651e: 4788         	blx	r1
;                     prvAddTaskToReadyList( pxTCB );
 8056520: e7ff         	b	0x8056522 <xTaskResumeFromISR+0x7a> @ imm = #-0x2
 8056522: e7ff         	b	0x8056524 <xTaskResumeFromISR+0x7c> @ imm = #-0x2
 8056524: 9803         	ldr	r0, [sp, #0xc]
 8056526: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805652a: f240 21a0    	movw	r1, #0x2a0
 805652e: f2c2 0100    	movt	r1, #0x2000
 8056532: 6809         	ldr	r1, [r1]
 8056534: 4288         	cmp	r0, r1
 8056536: d909         	bls	0x805654c <xTaskResumeFromISR+0xa4> @ imm = #0x12
 8056538: e7ff         	b	0x805653a <xTaskResumeFromISR+0x92> @ imm = #-0x2
 805653a: 9803         	ldr	r0, [sp, #0xc]
 805653c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056540: f240 21a0    	movw	r1, #0x2a0
 8056544: f2c2 0100    	movt	r1, #0x2000
 8056548: 6008         	str	r0, [r1]
 805654a: e7ff         	b	0x805654c <xTaskResumeFromISR+0xa4> @ imm = #-0x2
 805654c: e7ff         	b	0x805654e <xTaskResumeFromISR+0xa6> @ imm = #-0x2
 805654e: e7ff         	b	0x8056550 <xTaskResumeFromISR+0xa8> @ imm = #-0x2
 8056550: 9803         	ldr	r0, [sp, #0xc]
 8056552: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056556: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805655a: f240 1160    	movw	r1, #0x160
 805655e: f2c2 0100    	movt	r1, #0x2000
 8056562: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056566: 6840         	ldr	r0, [r0, #0x4]
 8056568: 9001         	str	r0, [sp, #0x4]
 805656a: 9801         	ldr	r0, [sp, #0x4]
 805656c: 9a03         	ldr	r2, [sp, #0xc]
 805656e: f8c2 0084    	str.w	r0, [r2, #0x84]
 8056572: 9801         	ldr	r0, [sp, #0x4]
 8056574: 6880         	ldr	r0, [r0, #0x8]
 8056576: 9a03         	ldr	r2, [sp, #0xc]
 8056578: f8c2 0088    	str.w	r0, [r2, #0x88]
 805657c: 9803         	ldr	r0, [sp, #0xc]
 805657e: 3080         	adds	r0, #0x80
 8056580: 9a01         	ldr	r2, [sp, #0x4]
 8056582: 6892         	ldr	r2, [r2, #0x8]
 8056584: 6050         	str	r0, [r2, #0x4]
 8056586: 9803         	ldr	r0, [sp, #0xc]
 8056588: 3080         	adds	r0, #0x80
 805658a: 9a01         	ldr	r2, [sp, #0x4]
 805658c: 6090         	str	r0, [r2, #0x8]
 805658e: 9a03         	ldr	r2, [sp, #0xc]
 8056590: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8056594: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056598: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805659c: f8c2 0090    	str.w	r0, [r2, #0x90]
 80565a0: 9803         	ldr	r0, [sp, #0xc]
 80565a2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80565a6: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80565aa: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80565ae: 3001         	adds	r0, #0x1
 80565b0: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80565b4: e7ff         	b	0x80565b6 <xTaskResumeFromISR+0x10e> @ imm = #-0x2
 80565b6: e7ff         	b	0x80565b8 <xTaskResumeFromISR+0x110> @ imm = #-0x2
;                 }
 80565b8: e009         	b	0x80565ce <xTaskResumeFromISR+0x126> @ imm = #0x12
;                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80565ba: 9803         	ldr	r0, [sp, #0xc]
 80565bc: f100 0194    	add.w	r1, r0, #0x94
 80565c0: f240 1038    	movw	r0, #0x138
 80565c4: f2c2 0000    	movt	r0, #0x2000
 80565c8: 4a08         	ldr	r2, [pc, #0x20]         @ 0x80565ec <xTaskResumeFromISR+0x144>
 80565ca: 4790         	blx	r2
 80565cc: e7ff         	b	0x80565ce <xTaskResumeFromISR+0x126> @ imm = #-0x2
;             }
 80565ce: e000         	b	0x80565d2 <xTaskResumeFromISR+0x12a> @ imm = #0x0
 80565d0: e7ff         	b	0x80565d2 <xTaskResumeFromISR+0x12a> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 80565d2: 9802         	ldr	r0, [sp, #0x8]
 80565d4: 4907         	ldr	r1, [pc, #0x1c]         @ 0x80565f4 <xTaskResumeFromISR+0x14c>
 80565d6: 4788         	blx	r1
;         return xYieldRequired;
 80565d8: 9804         	ldr	r0, [sp, #0x10]
 80565da: b006         	add	sp, #0x18
 80565dc: bd80         	pop	{r7, pc}
 80565de: bf00         	nop

080565e0 <$d.43>:
 80565e0: 45 ea 05 08  	.word	0x0805ea45
 80565e4: 55 cd 05 08  	.word	0x0805cd55
 80565e8: 3d 64 05 08  	.word	0x0805643d
 80565ec: 8f 9e 05 08  	.word	0x08059e8f
 80565f0: 33 9f 05 08  	.word	0x08059f33
 80565f4: 6b cd 05 08  	.word	0x0805cd6b
 80565f8: 55 cd 05 08  	.word	0x0805cd55

080565fc <vTaskStartScheduler>:
; {
 80565fc: b580         	push	{r7, lr}
 80565fe: 466f         	mov	r7, sp
 8056600: b082         	sub	sp, #0x8
;     xReturn = prvCreateIdleTasks();
 8056602: 481c         	ldr	r0, [pc, #0x70]         @ 0x8056674 <vTaskStartScheduler+0x78>
 8056604: 4780         	blx	r0
 8056606: 9001         	str	r0, [sp, #0x4]
;         if( xReturn == pdPASS )
 8056608: 9801         	ldr	r0, [sp, #0x4]
 805660a: 2801         	cmp	r0, #0x1
 805660c: d104         	bne	0x8056618 <vTaskStartScheduler+0x1c> @ imm = #0x8
 805660e: e7ff         	b	0x8056610 <vTaskStartScheduler+0x14> @ imm = #-0x2
;             xReturn = xTimerCreateTimerTask();
 8056610: 4819         	ldr	r0, [pc, #0x64]         @ 0x8056678 <vTaskStartScheduler+0x7c>
 8056612: 4780         	blx	r0
 8056614: 9001         	str	r0, [sp, #0x4]
;         }
 8056616: e000         	b	0x805661a <vTaskStartScheduler+0x1e> @ imm = #0x0
 8056618: e7ff         	b	0x805661a <vTaskStartScheduler+0x1e> @ imm = #-0x2
;     if( xReturn == pdPASS )
 805661a: 9801         	ldr	r0, [sp, #0x4]
 805661c: 2801         	cmp	r0, #0x1
 805661e: d118         	bne	0x8056652 <vTaskStartScheduler+0x56> @ imm = #0x30
 8056620: e7ff         	b	0x8056622 <vTaskStartScheduler+0x26> @ imm = #-0x2
;         portDISABLE_INTERRUPTS();
 8056622: 4817         	ldr	r0, [pc, #0x5c]         @ 0x8056680 <vTaskStartScheduler+0x84>
 8056624: 4780         	blx	r0
;         xNextTaskUnblockTime = portMAX_DELAY;
 8056626: f240 21a8    	movw	r1, #0x2a8
 805662a: f2c2 0100    	movt	r1, #0x2000
 805662e: f04f 30ff    	mov.w	r0, #0xffffffff
 8056632: 6008         	str	r0, [r1]
;         xSchedulerRunning = pdTRUE;
 8056634: f240 1124    	movw	r1, #0x124
 8056638: f2c2 0100    	movt	r1, #0x2000
 805663c: 2001         	movs	r0, #0x1
 805663e: 6008         	str	r0, [r1]
;         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8056640: f240 112c    	movw	r1, #0x12c
 8056644: f2c2 0100    	movt	r1, #0x2000
 8056648: 2000         	movs	r0, #0x0
 805664a: 6008         	str	r0, [r1]
;         xPortStartScheduler();
 805664c: 480d         	ldr	r0, [pc, #0x34]         @ 0x8056684 <vTaskStartScheduler+0x88>
 805664e: 4780         	blx	r0
;     }
 8056650: e008         	b	0x8056664 <vTaskStartScheduler+0x68> @ imm = #0x10
;         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8056652: 9801         	ldr	r0, [sp, #0x4]
 8056654: 3001         	adds	r0, #0x1
 8056656: b920         	cbnz	r0, 0x8056662 <vTaskStartScheduler+0x66> @ imm = #0x8
 8056658: e7ff         	b	0x805665a <vTaskStartScheduler+0x5e> @ imm = #-0x2
 805665a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805667c <vTaskStartScheduler+0x80>
 805665c: 4780         	blx	r0
 805665e: e7ff         	b	0x8056660 <vTaskStartScheduler+0x64> @ imm = #-0x2
 8056660: e7fe         	b	0x8056660 <vTaskStartScheduler+0x64> @ imm = #-0x4
 8056662: e7ff         	b	0x8056664 <vTaskStartScheduler+0x68> @ imm = #-0x2
;     ( void ) uxTopUsedPriority;
 8056664: f645 10a8    	movw	r0, #0x59a8
 8056668: f6c0 0006    	movt	r0, #0x806
 805666c: 6800         	ldr	r0, [r0]
; }
 805666e: b002         	add	sp, #0x8
 8056670: bd80         	pop	{r7, pc}
 8056672: bf00         	nop

08056674 <$d.45>:
 8056674: 69 e9 05 08  	.word	0x0805e969
 8056678: 31 87 05 08  	.word	0x08058731
 805667c: 55 cd 05 08  	.word	0x0805cd55
 8056680: 55 cd 05 08  	.word	0x0805cd55
 8056684: 55 c7 05 08  	.word	0x0805c755

08056688 <vTaskEndScheduler>:
; {
 8056688: b580         	push	{r7, lr}
 805668a: 466f         	mov	r7, sp
;     portDISABLE_INTERRUPTS();
 805668c: 4805         	ldr	r0, [pc, #0x14]         @ 0x80566a4 <vTaskEndScheduler+0x1c>
 805668e: 4780         	blx	r0
;     xSchedulerRunning = pdFALSE;
 8056690: f240 1124    	movw	r1, #0x124
 8056694: f2c2 0100    	movt	r1, #0x2000
 8056698: 2000         	movs	r0, #0x0
 805669a: 6008         	str	r0, [r1]
;     vPortEndScheduler();
 805669c: 4802         	ldr	r0, [pc, #0x8]          @ 0x80566a8 <vTaskEndScheduler+0x20>
 805669e: 4780         	blx	r0
; }
 80566a0: bd80         	pop	{r7, pc}
 80566a2: bf00         	nop

080566a4 <$d.49>:
 80566a4: 55 cd 05 08  	.word	0x0805cd55
 80566a8: 8d c9 05 08  	.word	0x0805c98d

080566ac <xTaskIncrementTick>:
; {
 80566ac: b580         	push	{r7, lr}
 80566ae: 466f         	mov	r7, sp
 80566b0: b088         	sub	sp, #0x20
 80566b2: 2000         	movs	r0, #0x0
;     BaseType_t xSwitchRequired = pdFALSE;
 80566b4: 9005         	str	r0, [sp, #0x14]
;     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80566b6: f240 1028    	movw	r0, #0x128
 80566ba: f2c2 0000    	movt	r0, #0x2000
 80566be: 6800         	ldr	r0, [r0]
 80566c0: 2800         	cmp	r0, #0x0
 80566c2: f040 813f    	bne.w	0x8056944 <xTaskIncrementTick+0x298> @ imm = #0x27e
 80566c6: e7ff         	b	0x80566c8 <xTaskIncrementTick+0x1c> @ imm = #-0x2
;         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80566c8: f240 112c    	movw	r1, #0x12c
 80566cc: f2c2 0100    	movt	r1, #0x2000
 80566d0: 6808         	ldr	r0, [r1]
 80566d2: 3001         	adds	r0, #0x1
 80566d4: 9004         	str	r0, [sp, #0x10]
;         xTickCount = xConstTickCount;
 80566d6: 9804         	ldr	r0, [sp, #0x10]
 80566d8: 6008         	str	r0, [r1]
;         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80566da: 9804         	ldr	r0, [sp, #0x10]
 80566dc: bb30         	cbnz	r0, 0x805672c <xTaskIncrementTick+0x80> @ imm = #0x4c
 80566de: e7ff         	b	0x80566e0 <xTaskIncrementTick+0x34> @ imm = #-0x2
;             taskSWITCH_DELAYED_LISTS();
 80566e0: e7ff         	b	0x80566e2 <xTaskIncrementTick+0x36> @ imm = #-0x2
 80566e2: f240 1030    	movw	r0, #0x130
 80566e6: f2c2 0000    	movt	r0, #0x2000
 80566ea: 6800         	ldr	r0, [r0]
 80566ec: 6800         	ldr	r0, [r0]
 80566ee: b120         	cbz	r0, 0x80566fa <xTaskIncrementTick+0x4e> @ imm = #0x8
 80566f0: e7ff         	b	0x80566f2 <xTaskIncrementTick+0x46> @ imm = #-0x2
 80566f2: 489b         	ldr	r0, [pc, #0x26c]        @ 0x8056960 <xTaskIncrementTick+0x2b4>
 80566f4: 4780         	blx	r0
 80566f6: e7ff         	b	0x80566f8 <xTaskIncrementTick+0x4c> @ imm = #-0x2
 80566f8: e7fe         	b	0x80566f8 <xTaskIncrementTick+0x4c> @ imm = #-0x4
 80566fa: f240 1230    	movw	r2, #0x130
 80566fe: f2c2 0200    	movt	r2, #0x2000
 8056702: 6810         	ldr	r0, [r2]
 8056704: 9003         	str	r0, [sp, #0xc]
 8056706: f240 1134    	movw	r1, #0x134
 805670a: f2c2 0100    	movt	r1, #0x2000
 805670e: 6808         	ldr	r0, [r1]
 8056710: 6010         	str	r0, [r2]
 8056712: 9803         	ldr	r0, [sp, #0xc]
 8056714: 6008         	str	r0, [r1]
 8056716: f240 21b4    	movw	r1, #0x2b4
 805671a: f2c2 0100    	movt	r1, #0x2000
 805671e: 6808         	ldr	r0, [r1]
 8056720: 3001         	adds	r0, #0x1
 8056722: 6008         	str	r0, [r1]
 8056724: 488d         	ldr	r0, [pc, #0x234]        @ 0x805695c <xTaskIncrementTick+0x2b0>
 8056726: 4780         	blx	r0
 8056728: e7ff         	b	0x805672a <xTaskIncrementTick+0x7e> @ imm = #-0x2
;         }
 805672a: e000         	b	0x805672e <xTaskIncrementTick+0x82> @ imm = #0x0
 805672c: e7ff         	b	0x805672e <xTaskIncrementTick+0x82> @ imm = #-0x2
;         if( xConstTickCount >= xNextTaskUnblockTime )
 805672e: 9804         	ldr	r0, [sp, #0x10]
 8056730: f240 21a8    	movw	r1, #0x2a8
 8056734: f2c2 0100    	movt	r1, #0x2000
 8056738: 6809         	ldr	r1, [r1]
 805673a: 4288         	cmp	r0, r1
 805673c: f0c0 80e0    	blo.w	0x8056900 <xTaskIncrementTick+0x254> @ imm = #0x1c0
 8056740: e7ff         	b	0x8056742 <xTaskIncrementTick+0x96> @ imm = #-0x2
;             for( ; ; )
 8056742: e7ff         	b	0x8056744 <xTaskIncrementTick+0x98> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8056744: f240 1030    	movw	r0, #0x130
 8056748: f2c2 0000    	movt	r0, #0x2000
 805674c: 6800         	ldr	r0, [r0]
 805674e: 6800         	ldr	r0, [r0]
 8056750: b940         	cbnz	r0, 0x8056764 <xTaskIncrementTick+0xb8> @ imm = #0x10
 8056752: e7ff         	b	0x8056754 <xTaskIncrementTick+0xa8> @ imm = #-0x2
;                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8056754: f240 21a8    	movw	r1, #0x2a8
 8056758: f2c2 0100    	movt	r1, #0x2000
 805675c: f04f 30ff    	mov.w	r0, #0xffffffff
 8056760: 6008         	str	r0, [r1]
;                     break;
 8056762: e0cc         	b	0x80568fe <xTaskIncrementTick+0x252> @ imm = #0x198
;                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056764: f240 1030    	movw	r0, #0x130
 8056768: f2c2 0000    	movt	r0, #0x2000
 805676c: 6800         	ldr	r0, [r0]
 805676e: 68c0         	ldr	r0, [r0, #0xc]
 8056770: 68c0         	ldr	r0, [r0, #0xc]
 8056772: 9007         	str	r0, [sp, #0x1c]
;                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8056774: 9807         	ldr	r0, [sp, #0x1c]
 8056776: f8d0 0080    	ldr.w	r0, [r0, #0x80]
 805677a: 9006         	str	r0, [sp, #0x18]
;                     if( xConstTickCount < xItemValue )
 805677c: 9804         	ldr	r0, [sp, #0x10]
 805677e: 9906         	ldr	r1, [sp, #0x18]
 8056780: 4288         	cmp	r0, r1
 8056782: d207         	bhs	0x8056794 <xTaskIncrementTick+0xe8> @ imm = #0xe
 8056784: e7ff         	b	0x8056786 <xTaskIncrementTick+0xda> @ imm = #-0x2
;                         xNextTaskUnblockTime = xItemValue;
 8056786: 9806         	ldr	r0, [sp, #0x18]
 8056788: f240 21a8    	movw	r1, #0x2a8
 805678c: f2c2 0100    	movt	r1, #0x2000
 8056790: 6008         	str	r0, [r1]
;                         break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8056792: e0b4         	b	0x80568fe <xTaskIncrementTick+0x252> @ imm = #0x168
 8056794: e7ff         	b	0x8056796 <xTaskIncrementTick+0xea> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8056796: e7ff         	b	0x8056798 <xTaskIncrementTick+0xec> @ imm = #-0x2
 8056798: 9807         	ldr	r0, [sp, #0x1c]
 805679a: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 805679e: 9002         	str	r0, [sp, #0x8]
 80567a0: 9807         	ldr	r0, [sp, #0x1c]
 80567a2: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 80567a6: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80567aa: 6088         	str	r0, [r1, #0x8]
 80567ac: 9907         	ldr	r1, [sp, #0x1c]
 80567ae: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 80567b2: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 80567b6: 6048         	str	r0, [r1, #0x4]
 80567b8: 9802         	ldr	r0, [sp, #0x8]
 80567ba: 6840         	ldr	r0, [r0, #0x4]
 80567bc: 9907         	ldr	r1, [sp, #0x1c]
 80567be: 3180         	adds	r1, #0x80
 80567c0: 4288         	cmp	r0, r1
 80567c2: d106         	bne	0x80567d2 <xTaskIncrementTick+0x126> @ imm = #0xc
 80567c4: e7ff         	b	0x80567c6 <xTaskIncrementTick+0x11a> @ imm = #-0x2
 80567c6: 9807         	ldr	r0, [sp, #0x1c]
 80567c8: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80567cc: 9902         	ldr	r1, [sp, #0x8]
 80567ce: 6048         	str	r0, [r1, #0x4]
 80567d0: e7ff         	b	0x80567d2 <xTaskIncrementTick+0x126> @ imm = #-0x2
 80567d2: 9907         	ldr	r1, [sp, #0x1c]
 80567d4: 2000         	movs	r0, #0x0
 80567d6: f8c1 0090    	str.w	r0, [r1, #0x90]
 80567da: 9902         	ldr	r1, [sp, #0x8]
 80567dc: 6808         	ldr	r0, [r1]
 80567de: 3801         	subs	r0, #0x1
 80567e0: 6008         	str	r0, [r1]
 80567e2: e7ff         	b	0x80567e4 <xTaskIncrementTick+0x138> @ imm = #-0x2
;                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80567e4: 9807         	ldr	r0, [sp, #0x1c]
 80567e6: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80567ea: b340         	cbz	r0, 0x805683e <xTaskIncrementTick+0x192> @ imm = #0x50
 80567ec: e7ff         	b	0x80567ee <xTaskIncrementTick+0x142> @ imm = #-0x2
;                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80567ee: e7ff         	b	0x80567f0 <xTaskIncrementTick+0x144> @ imm = #-0x2
 80567f0: 9807         	ldr	r0, [sp, #0x1c]
 80567f2: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80567f6: 9001         	str	r0, [sp, #0x4]
 80567f8: 9807         	ldr	r0, [sp, #0x1c]
 80567fa: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 80567fe: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056802: 6088         	str	r0, [r1, #0x8]
 8056804: 9907         	ldr	r1, [sp, #0x1c]
 8056806: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 805680a: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 805680e: 6048         	str	r0, [r1, #0x4]
 8056810: 9801         	ldr	r0, [sp, #0x4]
 8056812: 6840         	ldr	r0, [r0, #0x4]
 8056814: 9907         	ldr	r1, [sp, #0x1c]
 8056816: 3194         	adds	r1, #0x94
 8056818: 4288         	cmp	r0, r1
 805681a: d106         	bne	0x805682a <xTaskIncrementTick+0x17e> @ imm = #0xc
 805681c: e7ff         	b	0x805681e <xTaskIncrementTick+0x172> @ imm = #-0x2
 805681e: 9807         	ldr	r0, [sp, #0x1c]
 8056820: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056824: 9901         	ldr	r1, [sp, #0x4]
 8056826: 6048         	str	r0, [r1, #0x4]
 8056828: e7ff         	b	0x805682a <xTaskIncrementTick+0x17e> @ imm = #-0x2
 805682a: 9907         	ldr	r1, [sp, #0x1c]
 805682c: 2000         	movs	r0, #0x0
 805682e: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056832: 9901         	ldr	r1, [sp, #0x4]
 8056834: 6808         	ldr	r0, [r1]
 8056836: 3801         	subs	r0, #0x1
 8056838: 6008         	str	r0, [r1]
 805683a: e7ff         	b	0x805683c <xTaskIncrementTick+0x190> @ imm = #-0x2
;                     }
 805683c: e000         	b	0x8056840 <xTaskIncrementTick+0x194> @ imm = #0x0
 805683e: e7ff         	b	0x8056840 <xTaskIncrementTick+0x194> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8056840: e7ff         	b	0x8056842 <xTaskIncrementTick+0x196> @ imm = #-0x2
 8056842: e7ff         	b	0x8056844 <xTaskIncrementTick+0x198> @ imm = #-0x2
 8056844: 9807         	ldr	r0, [sp, #0x1c]
 8056846: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805684a: f240 21a0    	movw	r1, #0x2a0
 805684e: f2c2 0100    	movt	r1, #0x2000
 8056852: 6809         	ldr	r1, [r1]
 8056854: 4288         	cmp	r0, r1
 8056856: d909         	bls	0x805686c <xTaskIncrementTick+0x1c0> @ imm = #0x12
 8056858: e7ff         	b	0x805685a <xTaskIncrementTick+0x1ae> @ imm = #-0x2
 805685a: 9807         	ldr	r0, [sp, #0x1c]
 805685c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056860: f240 21a0    	movw	r1, #0x2a0
 8056864: f2c2 0100    	movt	r1, #0x2000
 8056868: 6008         	str	r0, [r1]
 805686a: e7ff         	b	0x805686c <xTaskIncrementTick+0x1c0> @ imm = #-0x2
 805686c: e7ff         	b	0x805686e <xTaskIncrementTick+0x1c2> @ imm = #-0x2
 805686e: e7ff         	b	0x8056870 <xTaskIncrementTick+0x1c4> @ imm = #-0x2
 8056870: 9807         	ldr	r0, [sp, #0x1c]
 8056872: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056876: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805687a: f240 1160    	movw	r1, #0x160
 805687e: f2c2 0100    	movt	r1, #0x2000
 8056882: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056886: 6840         	ldr	r0, [r0, #0x4]
 8056888: 9000         	str	r0, [sp]
 805688a: 9800         	ldr	r0, [sp]
 805688c: 9a07         	ldr	r2, [sp, #0x1c]
 805688e: f8c2 0084    	str.w	r0, [r2, #0x84]
 8056892: 9800         	ldr	r0, [sp]
 8056894: 6880         	ldr	r0, [r0, #0x8]
 8056896: 9a07         	ldr	r2, [sp, #0x1c]
 8056898: f8c2 0088    	str.w	r0, [r2, #0x88]
 805689c: 9807         	ldr	r0, [sp, #0x1c]
 805689e: 3080         	adds	r0, #0x80
 80568a0: 9a00         	ldr	r2, [sp]
 80568a2: 6892         	ldr	r2, [r2, #0x8]
 80568a4: 6050         	str	r0, [r2, #0x4]
 80568a6: 9807         	ldr	r0, [sp, #0x1c]
 80568a8: 3080         	adds	r0, #0x80
 80568aa: 9a00         	ldr	r2, [sp]
 80568ac: 6090         	str	r0, [r2, #0x8]
 80568ae: 9a07         	ldr	r2, [sp, #0x1c]
 80568b0: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80568b4: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80568b8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80568bc: f8c2 0090    	str.w	r0, [r2, #0x90]
 80568c0: 9807         	ldr	r0, [sp, #0x1c]
 80568c2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80568c6: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80568ca: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80568ce: 3001         	adds	r0, #0x1
 80568d0: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80568d4: e7ff         	b	0x80568d6 <xTaskIncrementTick+0x22a> @ imm = #-0x2
 80568d6: e7ff         	b	0x80568d8 <xTaskIncrementTick+0x22c> @ imm = #-0x2
;                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80568d8: 9807         	ldr	r0, [sp, #0x1c]
 80568da: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80568de: f240 1100    	movw	r1, #0x100
 80568e2: f2c2 0100    	movt	r1, #0x2000
 80568e6: 6809         	ldr	r1, [r1]
 80568e8: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80568ec: 4288         	cmp	r0, r1
 80568ee: d903         	bls	0x80568f8 <xTaskIncrementTick+0x24c> @ imm = #0x6
 80568f0: e7ff         	b	0x80568f2 <xTaskIncrementTick+0x246> @ imm = #-0x2
 80568f2: 2001         	movs	r0, #0x1
;                                 xSwitchRequired = pdTRUE;
 80568f4: 9005         	str	r0, [sp, #0x14]
;                             }
 80568f6: e000         	b	0x80568fa <xTaskIncrementTick+0x24e> @ imm = #0x0
 80568f8: e7ff         	b	0x80568fa <xTaskIncrementTick+0x24e> @ imm = #-0x2
 80568fa: e7ff         	b	0x80568fc <xTaskIncrementTick+0x250> @ imm = #-0x2
;             for( ; ; )
 80568fc: e722         	b	0x8056744 <xTaskIncrementTick+0x98> @ imm = #-0x1bc
;         }
 80568fe: e7ff         	b	0x8056900 <xTaskIncrementTick+0x254> @ imm = #-0x2
;                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8056900: f240 1000    	movw	r0, #0x100
 8056904: f2c2 0000    	movt	r0, #0x2000
 8056908: 6800         	ldr	r0, [r0]
 805690a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805690e: eb00 0180    	add.w	r1, r0, r0, lsl #2
 8056912: f240 1060    	movw	r0, #0x160
 8056916: f2c2 0000    	movt	r0, #0x2000
 805691a: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 805691e: 2802         	cmp	r0, #0x2
 8056920: d303         	blo	0x805692a <xTaskIncrementTick+0x27e> @ imm = #0x6
 8056922: e7ff         	b	0x8056924 <xTaskIncrementTick+0x278> @ imm = #-0x2
 8056924: 2001         	movs	r0, #0x1
;                     xSwitchRequired = pdTRUE;
 8056926: 9005         	str	r0, [sp, #0x14]
;                 }
 8056928: e000         	b	0x805692c <xTaskIncrementTick+0x280> @ imm = #0x0
 805692a: e7ff         	b	0x805692c <xTaskIncrementTick+0x280> @ imm = #-0x2
;                 if( xYieldPendings[ 0 ] != pdFALSE )
 805692c: f240 20a4    	movw	r0, #0x2a4
 8056930: f2c2 0000    	movt	r0, #0x2000
 8056934: 6800         	ldr	r0, [r0]
 8056936: b118         	cbz	r0, 0x8056940 <xTaskIncrementTick+0x294> @ imm = #0x6
 8056938: e7ff         	b	0x805693a <xTaskIncrementTick+0x28e> @ imm = #-0x2
 805693a: 2001         	movs	r0, #0x1
;                     xSwitchRequired = pdTRUE;
 805693c: 9005         	str	r0, [sp, #0x14]
;                 }
 805693e: e000         	b	0x8056942 <xTaskIncrementTick+0x296> @ imm = #0x0
 8056940: e7ff         	b	0x8056942 <xTaskIncrementTick+0x296> @ imm = #-0x2
;     }
 8056942: e007         	b	0x8056954 <xTaskIncrementTick+0x2a8> @ imm = #0xe
;         ++xPendedTicks;
 8056944: f240 21b0    	movw	r1, #0x2b0
 8056948: f2c2 0100    	movt	r1, #0x2000
 805694c: 6808         	ldr	r0, [r1]
 805694e: 3001         	adds	r0, #0x1
 8056950: 6008         	str	r0, [r1]
 8056952: e7ff         	b	0x8056954 <xTaskIncrementTick+0x2a8> @ imm = #-0x2
;     return xSwitchRequired;
 8056954: 9805         	ldr	r0, [sp, #0x14]
 8056956: b008         	add	sp, #0x20
 8056958: bd80         	pop	{r7, pc}
 805695a: bf00         	nop

0805695c <$d.51>:
 805695c: bd 56 05 08  	.word	0x080556bd
 8056960: 55 cd 05 08  	.word	0x0805cd55

08056964 <xTaskGetTickCount>:
; {
 8056964: b081         	sub	sp, #0x4
;         xTicks = xTickCount;
 8056966: f240 102c    	movw	r0, #0x12c
 805696a: f2c2 0000    	movt	r0, #0x2000
 805696e: 6800         	ldr	r0, [r0]
 8056970: 9000         	str	r0, [sp]
;     return xTicks;
 8056972: 9800         	ldr	r0, [sp]
 8056974: b001         	add	sp, #0x4
 8056976: 4770         	bx	lr

08056978 <xTaskGetTickCountFromISR>:
; {
 8056978: b580         	push	{r7, lr}
 805697a: 466f         	mov	r7, sp
 805697c: b082         	sub	sp, #0x8
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805697e: 4806         	ldr	r0, [pc, #0x18]         @ 0x8056998 <xTaskGetTickCountFromISR+0x20>
 8056980: 4780         	blx	r0
 8056982: 2000         	movs	r0, #0x0
;     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8056984: 9000         	str	r0, [sp]
;         xReturn = xTickCount;
 8056986: f240 102c    	movw	r0, #0x12c
 805698a: f2c2 0000    	movt	r0, #0x2000
 805698e: 6800         	ldr	r0, [r0]
 8056990: 9001         	str	r0, [sp, #0x4]
;     return xReturn;
 8056992: 9801         	ldr	r0, [sp, #0x4]
 8056994: b002         	add	sp, #0x8
 8056996: bd80         	pop	{r7, pc}

08056998 <$d.53>:
 8056998: 45 ea 05 08  	.word	0x0805ea45

0805699c <uxTaskGetNumberOfTasks>:
;     return uxCurrentNumberOfTasks;
 805699c: f240 1020    	movw	r0, #0x120
 80569a0: f2c2 0000    	movt	r0, #0x2000
 80569a4: 6800         	ldr	r0, [r0]
 80569a6: 4770         	bx	lr

080569a8 <pcTaskGetName>:
; {
 80569a8: b580         	push	{r7, lr}
 80569aa: 466f         	mov	r7, sp
 80569ac: b084         	sub	sp, #0x10
 80569ae: 9003         	str	r0, [sp, #0xc]
;     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80569b0: 9803         	ldr	r0, [sp, #0xc]
 80569b2: b938         	cbnz	r0, 0x80569c4 <pcTaskGetName+0x1c> @ imm = #0xe
 80569b4: e7ff         	b	0x80569b6 <pcTaskGetName+0xe> @ imm = #-0x2
 80569b6: f240 1000    	movw	r0, #0x100
 80569ba: f2c2 0000    	movt	r0, #0x2000
 80569be: 6800         	ldr	r0, [r0]
 80569c0: 9001         	str	r0, [sp, #0x4]
 80569c2: e002         	b	0x80569ca <pcTaskGetName+0x22> @ imm = #0x4
 80569c4: 9803         	ldr	r0, [sp, #0xc]
 80569c6: 9001         	str	r0, [sp, #0x4]
 80569c8: e7ff         	b	0x80569ca <pcTaskGetName+0x22> @ imm = #-0x2
 80569ca: 9801         	ldr	r0, [sp, #0x4]
 80569cc: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxTCB );
 80569ce: 9802         	ldr	r0, [sp, #0x8]
 80569d0: b920         	cbnz	r0, 0x80569dc <pcTaskGetName+0x34> @ imm = #0x8
 80569d2: e7ff         	b	0x80569d4 <pcTaskGetName+0x2c> @ imm = #-0x2
 80569d4: 4803         	ldr	r0, [pc, #0xc]          @ 0x80569e4 <pcTaskGetName+0x3c>
 80569d6: 4780         	blx	r0
 80569d8: e7ff         	b	0x80569da <pcTaskGetName+0x32> @ imm = #-0x2
 80569da: e7fe         	b	0x80569da <pcTaskGetName+0x32> @ imm = #-0x4
;     return &( pxTCB->pcTaskName[ 0 ] );
 80569dc: 9802         	ldr	r0, [sp, #0x8]
 80569de: 30b0         	adds	r0, #0xb0
 80569e0: b004         	add	sp, #0x10
 80569e2: bd80         	pop	{r7, pc}

080569e4 <$d.55>:
 80569e4: 55 cd 05 08  	.word	0x0805cd55

080569e8 <uxTaskGetSystemState>:
;     {
 80569e8: b580         	push	{r7, lr}
 80569ea: 466f         	mov	r7, sp
 80569ec: b08c         	sub	sp, #0x30
 80569ee: 900b         	str	r0, [sp, #0x2c]
 80569f0: 910a         	str	r1, [sp, #0x28]
 80569f2: 9209         	str	r2, [sp, #0x24]
 80569f4: 2000         	movs	r0, #0x0
;         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80569f6: 9008         	str	r0, [sp, #0x20]
 80569f8: 2010         	movs	r0, #0x10
 80569fa: 9007         	str	r0, [sp, #0x1c]
;         vTaskSuspendAll();
 80569fc: 4841         	ldr	r0, [pc, #0x104]        @ 0x8056b04 <uxTaskGetSystemState+0x11c>
 80569fe: 4780         	blx	r0
;             if( uxArraySize >= uxCurrentNumberOfTasks )
 8056a00: 980a         	ldr	r0, [sp, #0x28]
 8056a02: f240 1120    	movw	r1, #0x120
 8056a06: f2c2 0100    	movt	r1, #0x2000
 8056a0a: 6809         	ldr	r1, [r1]
 8056a0c: 4288         	cmp	r0, r1
 8056a0e: d373         	blo	0x8056af8 <uxTaskGetSystemState+0x110> @ imm = #0xe6
 8056a10: e7ff         	b	0x8056a12 <uxTaskGetSystemState+0x2a> @ imm = #-0x2
;                 do
 8056a12: e7ff         	b	0x8056a14 <uxTaskGetSystemState+0x2c> @ imm = #-0x2
;                     uxQueue--;
 8056a14: 9807         	ldr	r0, [sp, #0x1c]
 8056a16: 3801         	subs	r0, #0x1
 8056a18: 9007         	str	r0, [sp, #0x1c]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 8056a1a: 9908         	ldr	r1, [sp, #0x20]
 8056a1c: 9106         	str	r1, [sp, #0x18]
 8056a1e: 980b         	ldr	r0, [sp, #0x2c]
 8056a20: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056a24: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056a28: 9907         	ldr	r1, [sp, #0x1c]
 8056a2a: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8056a2e: f240 1160    	movw	r1, #0x160
 8056a32: f2c2 0100    	movt	r1, #0x2000
 8056a36: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8056a3a: 4b33         	ldr	r3, [pc, #0xcc]         @ 0x8056b08 <uxTaskGetSystemState+0x120>
 8056a3c: 2201         	movs	r2, #0x1
 8056a3e: 4798         	blx	r3
 8056a40: 4601         	mov	r1, r0
 8056a42: 9806         	ldr	r0, [sp, #0x18]
 8056a44: 4408         	add	r0, r1
 8056a46: 9008         	str	r0, [sp, #0x20]
;                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8056a48: e7ff         	b	0x8056a4a <uxTaskGetSystemState+0x62> @ imm = #-0x2
 8056a4a: 9807         	ldr	r0, [sp, #0x1c]
 8056a4c: 2800         	cmp	r0, #0x0
 8056a4e: d1e1         	bne	0x8056a14 <uxTaskGetSystemState+0x2c> @ imm = #-0x3e
 8056a50: e7ff         	b	0x8056a52 <uxTaskGetSystemState+0x6a> @ imm = #-0x2
;                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 8056a52: 9908         	ldr	r1, [sp, #0x20]
 8056a54: 9102         	str	r1, [sp, #0x8]
 8056a56: 980b         	ldr	r0, [sp, #0x2c]
 8056a58: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056a5c: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056a60: f240 1130    	movw	r1, #0x130
 8056a64: f2c2 0100    	movt	r1, #0x2000
 8056a68: 6809         	ldr	r1, [r1]
 8056a6a: 4b28         	ldr	r3, [pc, #0xa0]         @ 0x8056b0c <uxTaskGetSystemState+0x124>
 8056a6c: 2202         	movs	r2, #0x2
 8056a6e: 9201         	str	r2, [sp, #0x4]
 8056a70: 4798         	blx	r3
 8056a72: 9a01         	ldr	r2, [sp, #0x4]
 8056a74: 4601         	mov	r1, r0
 8056a76: 9802         	ldr	r0, [sp, #0x8]
 8056a78: 4408         	add	r0, r1
 8056a7a: 9008         	str	r0, [sp, #0x20]
;                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 8056a7c: 9908         	ldr	r1, [sp, #0x20]
 8056a7e: 9103         	str	r1, [sp, #0xc]
 8056a80: 980b         	ldr	r0, [sp, #0x2c]
 8056a82: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056a86: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056a8a: f240 1134    	movw	r1, #0x134
 8056a8e: f2c2 0100    	movt	r1, #0x2000
 8056a92: 6809         	ldr	r1, [r1]
 8056a94: 4b1e         	ldr	r3, [pc, #0x78]         @ 0x8056b10 <uxTaskGetSystemState+0x128>
 8056a96: 4798         	blx	r3
 8056a98: 4601         	mov	r1, r0
 8056a9a: 9803         	ldr	r0, [sp, #0xc]
 8056a9c: 4408         	add	r0, r1
 8056a9e: 9008         	str	r0, [sp, #0x20]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 8056aa0: 9908         	ldr	r1, [sp, #0x20]
 8056aa2: 9104         	str	r1, [sp, #0x10]
 8056aa4: 980b         	ldr	r0, [sp, #0x2c]
 8056aa6: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056aaa: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056aae: f240 1108    	movw	r1, #0x108
 8056ab2: f2c2 0100    	movt	r1, #0x2000
 8056ab6: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x8056b14 <uxTaskGetSystemState+0x12c>
 8056ab8: 2204         	movs	r2, #0x4
 8056aba: 4798         	blx	r3
 8056abc: 4601         	mov	r1, r0
 8056abe: 9804         	ldr	r0, [sp, #0x10]
 8056ac0: 4408         	add	r0, r1
 8056ac2: 9008         	str	r0, [sp, #0x20]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 8056ac4: 9908         	ldr	r1, [sp, #0x20]
 8056ac6: 9105         	str	r1, [sp, #0x14]
 8056ac8: 980b         	ldr	r0, [sp, #0x2c]
 8056aca: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056ace: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056ad2: f240 114c    	movw	r1, #0x14c
 8056ad6: f2c2 0100    	movt	r1, #0x2000
 8056ada: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x8056b18 <uxTaskGetSystemState+0x130>
 8056adc: 2203         	movs	r2, #0x3
 8056ade: 4798         	blx	r3
 8056ae0: 4601         	mov	r1, r0
 8056ae2: 9805         	ldr	r0, [sp, #0x14]
 8056ae4: 4408         	add	r0, r1
 8056ae6: 9008         	str	r0, [sp, #0x20]
;                     if( pulTotalRunTime != NULL )
 8056ae8: 9809         	ldr	r0, [sp, #0x24]
 8056aea: b120         	cbz	r0, 0x8056af6 <uxTaskGetSystemState+0x10e> @ imm = #0x8
 8056aec: e7ff         	b	0x8056aee <uxTaskGetSystemState+0x106> @ imm = #-0x2
;                         *pulTotalRunTime = 0;
 8056aee: 9909         	ldr	r1, [sp, #0x24]
 8056af0: 2000         	movs	r0, #0x0
 8056af2: 6008         	str	r0, [r1]
;                     }
 8056af4: e7ff         	b	0x8056af6 <uxTaskGetSystemState+0x10e> @ imm = #-0x2
;             }
 8056af6: e000         	b	0x8056afa <uxTaskGetSystemState+0x112> @ imm = #0x0
 8056af8: e7ff         	b	0x8056afa <uxTaskGetSystemState+0x112> @ imm = #-0x2
;         ( void ) xTaskResumeAll();
 8056afa: 4808         	ldr	r0, [pc, #0x20]         @ 0x8056b1c <uxTaskGetSystemState+0x134>
 8056afc: 4780         	blx	r0
;         return uxTask;
 8056afe: 9808         	ldr	r0, [sp, #0x20]
 8056b00: b00c         	add	sp, #0x30
 8056b02: bd80         	pop	{r7, pc}

08056b04 <$d.57>:
 8056b04: 59 58 05 08  	.word	0x08055859
 8056b08: 21 6b 05 08  	.word	0x08056b21
 8056b0c: 21 6b 05 08  	.word	0x08056b21
 8056b10: 21 6b 05 08  	.word	0x08056b21
 8056b14: 21 6b 05 08  	.word	0x08056b21
 8056b18: 21 6b 05 08  	.word	0x08056b21
 8056b1c: 7d 59 05 08  	.word	0x0805597d

08056b20 <prvListTasksWithinSingleList>:
;     {
 8056b20: b580         	push	{r7, lr}
 8056b22: 466f         	mov	r7, sp
 8056b24: b088         	sub	sp, #0x20
 8056b26: 9007         	str	r0, [sp, #0x1c]
 8056b28: 9106         	str	r1, [sp, #0x18]
 8056b2a: f807 2c09    	strb	r2, [r7, #-9]
 8056b2e: 2000         	movs	r0, #0x0
;         UBaseType_t uxTask = 0;
 8056b30: 9002         	str	r0, [sp, #0x8]
;         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8056b32: 9806         	ldr	r0, [sp, #0x18]
 8056b34: 6800         	ldr	r0, [r0]
 8056b36: 2800         	cmp	r0, #0x0
 8056b38: d044         	beq	0x8056bc4 <prvListTasksWithinSingleList+0xa4> @ imm = #0x88
 8056b3a: e7ff         	b	0x8056b3c <prvListTasksWithinSingleList+0x1c> @ imm = #-0x2
;             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056b3c: e7ff         	b	0x8056b3e <prvListTasksWithinSingleList+0x1e> @ imm = #-0x2
 8056b3e: 9806         	ldr	r0, [sp, #0x18]
 8056b40: 9001         	str	r0, [sp, #0x4]
 8056b42: 9901         	ldr	r1, [sp, #0x4]
 8056b44: 6848         	ldr	r0, [r1, #0x4]
 8056b46: 6840         	ldr	r0, [r0, #0x4]
 8056b48: 6048         	str	r0, [r1, #0x4]
 8056b4a: 9901         	ldr	r1, [sp, #0x4]
 8056b4c: 6848         	ldr	r0, [r1, #0x4]
 8056b4e: 3108         	adds	r1, #0x8
 8056b50: 4288         	cmp	r0, r1
 8056b52: d104         	bne	0x8056b5e <prvListTasksWithinSingleList+0x3e> @ imm = #0x8
 8056b54: e7ff         	b	0x8056b56 <prvListTasksWithinSingleList+0x36> @ imm = #-0x2
 8056b56: 9901         	ldr	r1, [sp, #0x4]
 8056b58: 68c8         	ldr	r0, [r1, #0xc]
 8056b5a: 6048         	str	r0, [r1, #0x4]
 8056b5c: e7ff         	b	0x8056b5e <prvListTasksWithinSingleList+0x3e> @ imm = #-0x2
 8056b5e: 9801         	ldr	r0, [sp, #0x4]
 8056b60: 6840         	ldr	r0, [r0, #0x4]
 8056b62: 68c0         	ldr	r0, [r0, #0xc]
 8056b64: 9003         	str	r0, [sp, #0xc]
 8056b66: e7ff         	b	0x8056b68 <prvListTasksWithinSingleList+0x48> @ imm = #-0x2
;             do
 8056b68: e7ff         	b	0x8056b6a <prvListTasksWithinSingleList+0x4a> @ imm = #-0x2
;                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056b6a: e7ff         	b	0x8056b6c <prvListTasksWithinSingleList+0x4c> @ imm = #-0x2
 8056b6c: 9806         	ldr	r0, [sp, #0x18]
 8056b6e: 9000         	str	r0, [sp]
 8056b70: 9900         	ldr	r1, [sp]
 8056b72: 6848         	ldr	r0, [r1, #0x4]
 8056b74: 6840         	ldr	r0, [r0, #0x4]
 8056b76: 6048         	str	r0, [r1, #0x4]
 8056b78: 9900         	ldr	r1, [sp]
 8056b7a: 6848         	ldr	r0, [r1, #0x4]
 8056b7c: 3108         	adds	r1, #0x8
 8056b7e: 4288         	cmp	r0, r1
 8056b80: d104         	bne	0x8056b8c <prvListTasksWithinSingleList+0x6c> @ imm = #0x8
 8056b82: e7ff         	b	0x8056b84 <prvListTasksWithinSingleList+0x64> @ imm = #-0x2
 8056b84: 9900         	ldr	r1, [sp]
 8056b86: 68c8         	ldr	r0, [r1, #0xc]
 8056b88: 6048         	str	r0, [r1, #0x4]
 8056b8a: e7ff         	b	0x8056b8c <prvListTasksWithinSingleList+0x6c> @ imm = #-0x2
 8056b8c: 9800         	ldr	r0, [sp]
 8056b8e: 6840         	ldr	r0, [r0, #0x4]
 8056b90: 68c0         	ldr	r0, [r0, #0xc]
 8056b92: 9004         	str	r0, [sp, #0x10]
 8056b94: e7ff         	b	0x8056b96 <prvListTasksWithinSingleList+0x76> @ imm = #-0x2
;                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8056b96: 9804         	ldr	r0, [sp, #0x10]
 8056b98: 9907         	ldr	r1, [sp, #0x1c]
 8056b9a: 9a02         	ldr	r2, [sp, #0x8]
 8056b9c: eb02 02c2    	add.w	r2, r2, r2, lsl #3
 8056ba0: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8056ba4: f817 3c09    	ldrb	r3, [r7, #-9]
 8056ba8: f8df c020    	ldr.w	r12, [pc, #0x20]        @ 0x8056bcc <prvListTasksWithinSingleList+0xac>
 8056bac: 2201         	movs	r2, #0x1
 8056bae: 47e0         	blx	r12
;                 uxTask++;
 8056bb0: 9802         	ldr	r0, [sp, #0x8]
 8056bb2: 3001         	adds	r0, #0x1
 8056bb4: 9002         	str	r0, [sp, #0x8]
;             } while( pxNextTCB != pxFirstTCB );
 8056bb6: e7ff         	b	0x8056bb8 <prvListTasksWithinSingleList+0x98> @ imm = #-0x2
 8056bb8: 9804         	ldr	r0, [sp, #0x10]
 8056bba: 9903         	ldr	r1, [sp, #0xc]
 8056bbc: 4288         	cmp	r0, r1
 8056bbe: d1d4         	bne	0x8056b6a <prvListTasksWithinSingleList+0x4a> @ imm = #-0x58
 8056bc0: e7ff         	b	0x8056bc2 <prvListTasksWithinSingleList+0xa2> @ imm = #-0x2
;         }
 8056bc2: e000         	b	0x8056bc6 <prvListTasksWithinSingleList+0xa6> @ imm = #0x0
 8056bc4: e7ff         	b	0x8056bc6 <prvListTasksWithinSingleList+0xa6> @ imm = #-0x2
;         return uxTask;
 8056bc6: 9802         	ldr	r0, [sp, #0x8]
 8056bc8: b008         	add	sp, #0x20
 8056bca: bd80         	pop	{r7, pc}

08056bcc <$d.59>:
 8056bcc: dd 72 05 08  	.word	0x080572dd

08056bd0 <xTaskCatchUpTicks>:
; {
 8056bd0: b580         	push	{r7, lr}
 8056bd2: 466f         	mov	r7, sp
 8056bd4: b082         	sub	sp, #0x8
 8056bd6: 9001         	str	r0, [sp, #0x4]
;     configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8056bd8: f240 1028    	movw	r0, #0x128
 8056bdc: f2c2 0000    	movt	r0, #0x2000
 8056be0: 6800         	ldr	r0, [r0]
 8056be2: b120         	cbz	r0, 0x8056bee <xTaskCatchUpTicks+0x1e> @ imm = #0x8
 8056be4: e7ff         	b	0x8056be6 <xTaskCatchUpTicks+0x16> @ imm = #-0x2
 8056be6: 4810         	ldr	r0, [pc, #0x40]         @ 0x8056c28 <xTaskCatchUpTicks+0x58>
 8056be8: 4780         	blx	r0
 8056bea: e7ff         	b	0x8056bec <xTaskCatchUpTicks+0x1c> @ imm = #-0x2
 8056bec: e7fe         	b	0x8056bec <xTaskCatchUpTicks+0x1c> @ imm = #-0x4
;     vTaskSuspendAll();
 8056bee: 480a         	ldr	r0, [pc, #0x28]         @ 0x8056c18 <xTaskCatchUpTicks+0x48>
 8056bf0: 4780         	blx	r0
;     taskENTER_CRITICAL();
 8056bf2: 480a         	ldr	r0, [pc, #0x28]         @ 0x8056c1c <xTaskCatchUpTicks+0x4c>
 8056bf4: 4780         	blx	r0
;         xPendedTicks += xTicksToCatchUp;
 8056bf6: 9a01         	ldr	r2, [sp, #0x4]
 8056bf8: f240 21b0    	movw	r1, #0x2b0
 8056bfc: f2c2 0100    	movt	r1, #0x2000
 8056c00: 6808         	ldr	r0, [r1]
 8056c02: 4410         	add	r0, r2
 8056c04: 6008         	str	r0, [r1]
;     taskEXIT_CRITICAL();
 8056c06: 4806         	ldr	r0, [pc, #0x18]         @ 0x8056c20 <xTaskCatchUpTicks+0x50>
 8056c08: 4780         	blx	r0
;     xYieldOccurred = xTaskResumeAll();
 8056c0a: 4806         	ldr	r0, [pc, #0x18]         @ 0x8056c24 <xTaskCatchUpTicks+0x54>
 8056c0c: 4780         	blx	r0
 8056c0e: 9000         	str	r0, [sp]
;     return xYieldOccurred;
 8056c10: 9800         	ldr	r0, [sp]
 8056c12: b002         	add	sp, #0x8
 8056c14: bd80         	pop	{r7, pc}
 8056c16: bf00         	nop

08056c18 <$d.61>:
 8056c18: 59 58 05 08  	.word	0x08055859
 8056c1c: 19 c4 05 08  	.word	0x0805c419
 8056c20: 3d c4 05 08  	.word	0x0805c43d
 8056c24: 7d 59 05 08  	.word	0x0805597d
 8056c28: 55 cd 05 08  	.word	0x0805cd55

08056c2c <vTaskPlaceOnEventList>:
; {
 8056c2c: b580         	push	{r7, lr}
 8056c2e: 466f         	mov	r7, sp
 8056c30: b082         	sub	sp, #0x8
 8056c32: 9001         	str	r0, [sp, #0x4]
 8056c34: 9100         	str	r1, [sp]
;     configASSERT( pxEventList );
 8056c36: 9801         	ldr	r0, [sp, #0x4]
 8056c38: b920         	cbnz	r0, 0x8056c44 <vTaskPlaceOnEventList+0x18> @ imm = #0x8
 8056c3a: e7ff         	b	0x8056c3c <vTaskPlaceOnEventList+0x10> @ imm = #-0x2
 8056c3c: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8056c6c <vTaskPlaceOnEventList+0x40>
 8056c3e: 4780         	blx	r0
 8056c40: e7ff         	b	0x8056c42 <vTaskPlaceOnEventList+0x16> @ imm = #-0x2
 8056c42: e7fe         	b	0x8056c42 <vTaskPlaceOnEventList+0x16> @ imm = #-0x4
;     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8056c44: 9801         	ldr	r0, [sp, #0x4]
 8056c46: f240 1100    	movw	r1, #0x100
 8056c4a: f2c2 0100    	movt	r1, #0x2000
 8056c4e: 6809         	ldr	r1, [r1]
 8056c50: 3194         	adds	r1, #0x94
 8056c52: 4a04         	ldr	r2, [pc, #0x10]         @ 0x8056c64 <vTaskPlaceOnEventList+0x38>
 8056c54: 4790         	blx	r2
;     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8056c56: 9800         	ldr	r0, [sp]
 8056c58: 4a03         	ldr	r2, [pc, #0xc]          @ 0x8056c68 <vTaskPlaceOnEventList+0x3c>
 8056c5a: 2101         	movs	r1, #0x1
 8056c5c: 4790         	blx	r2
; }
 8056c5e: b002         	add	sp, #0x8
 8056c60: bd80         	pop	{r7, pc}
 8056c62: bf00         	nop

08056c64 <$d.63>:
 8056c64: c9 9e 05 08  	.word	0x08059ec9
 8056c68: 69 58 05 08  	.word	0x08055869
 8056c6c: 55 cd 05 08  	.word	0x0805cd55

08056c70 <vTaskPlaceOnUnorderedEventList>:
; {
 8056c70: b580         	push	{r7, lr}
 8056c72: 466f         	mov	r7, sp
 8056c74: b084         	sub	sp, #0x10
 8056c76: 9003         	str	r0, [sp, #0xc]
 8056c78: 9102         	str	r1, [sp, #0x8]
 8056c7a: 9201         	str	r2, [sp, #0x4]
;     configASSERT( pxEventList );
 8056c7c: 9803         	ldr	r0, [sp, #0xc]
 8056c7e: b920         	cbnz	r0, 0x8056c8a <vTaskPlaceOnUnorderedEventList+0x1a> @ imm = #0x8
 8056c80: e7ff         	b	0x8056c82 <vTaskPlaceOnUnorderedEventList+0x12> @ imm = #-0x2
 8056c82: 4823         	ldr	r0, [pc, #0x8c]         @ 0x8056d10 <vTaskPlaceOnUnorderedEventList+0xa0>
 8056c84: 4780         	blx	r0
 8056c86: e7ff         	b	0x8056c88 <vTaskPlaceOnUnorderedEventList+0x18> @ imm = #-0x2
 8056c88: e7fe         	b	0x8056c88 <vTaskPlaceOnUnorderedEventList+0x18> @ imm = #-0x4
;     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8056c8a: f240 1028    	movw	r0, #0x128
 8056c8e: f2c2 0000    	movt	r0, #0x2000
 8056c92: 6800         	ldr	r0, [r0]
 8056c94: b920         	cbnz	r0, 0x8056ca0 <vTaskPlaceOnUnorderedEventList+0x30> @ imm = #0x8
 8056c96: e7ff         	b	0x8056c98 <vTaskPlaceOnUnorderedEventList+0x28> @ imm = #-0x2
 8056c98: 481c         	ldr	r0, [pc, #0x70]         @ 0x8056d0c <vTaskPlaceOnUnorderedEventList+0x9c>
 8056c9a: 4780         	blx	r0
 8056c9c: e7ff         	b	0x8056c9e <vTaskPlaceOnUnorderedEventList+0x2e> @ imm = #-0x2
 8056c9e: e7fe         	b	0x8056c9e <vTaskPlaceOnUnorderedEventList+0x2e> @ imm = #-0x4
;     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8056ca0: 9802         	ldr	r0, [sp, #0x8]
 8056ca2: f040 4000    	orr	r0, r0, #0x80000000
 8056ca6: f240 1100    	movw	r1, #0x100
 8056caa: f2c2 0100    	movt	r1, #0x2000
 8056cae: 6809         	ldr	r1, [r1]
 8056cb0: f8c1 0094    	str.w	r0, [r1, #0x94]
;     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8056cb4: e7ff         	b	0x8056cb6 <vTaskPlaceOnUnorderedEventList+0x46> @ imm = #-0x2
 8056cb6: 9803         	ldr	r0, [sp, #0xc]
 8056cb8: 6840         	ldr	r0, [r0, #0x4]
 8056cba: 9000         	str	r0, [sp]
 8056cbc: 9800         	ldr	r0, [sp]
 8056cbe: f240 1100    	movw	r1, #0x100
 8056cc2: f2c2 0100    	movt	r1, #0x2000
 8056cc6: 680a         	ldr	r2, [r1]
 8056cc8: f8c2 0098    	str.w	r0, [r2, #0x98]
 8056ccc: 9800         	ldr	r0, [sp]
 8056cce: 6880         	ldr	r0, [r0, #0x8]
 8056cd0: 680a         	ldr	r2, [r1]
 8056cd2: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8056cd6: 6808         	ldr	r0, [r1]
 8056cd8: 3094         	adds	r0, #0x94
 8056cda: 9a00         	ldr	r2, [sp]
 8056cdc: 6892         	ldr	r2, [r2, #0x8]
 8056cde: 6050         	str	r0, [r2, #0x4]
 8056ce0: 6808         	ldr	r0, [r1]
 8056ce2: 3094         	adds	r0, #0x94
 8056ce4: 9a00         	ldr	r2, [sp]
 8056ce6: 6090         	str	r0, [r2, #0x8]
 8056ce8: 9803         	ldr	r0, [sp, #0xc]
 8056cea: 6809         	ldr	r1, [r1]
 8056cec: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056cf0: 9903         	ldr	r1, [sp, #0xc]
 8056cf2: 6808         	ldr	r0, [r1]
 8056cf4: 3001         	adds	r0, #0x1
 8056cf6: 6008         	str	r0, [r1]
 8056cf8: e7ff         	b	0x8056cfa <vTaskPlaceOnUnorderedEventList+0x8a> @ imm = #-0x2
;     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8056cfa: 9801         	ldr	r0, [sp, #0x4]
 8056cfc: 4a02         	ldr	r2, [pc, #0x8]          @ 0x8056d08 <vTaskPlaceOnUnorderedEventList+0x98>
 8056cfe: 2101         	movs	r1, #0x1
 8056d00: 4790         	blx	r2
; }
 8056d02: b004         	add	sp, #0x10
 8056d04: bd80         	pop	{r7, pc}
 8056d06: bf00         	nop

08056d08 <$d.65>:
 8056d08: 69 58 05 08  	.word	0x08055869
 8056d0c: 55 cd 05 08  	.word	0x0805cd55
 8056d10: 55 cd 05 08  	.word	0x0805cd55

08056d14 <vTaskPlaceOnEventListRestricted>:
;     {
 8056d14: b580         	push	{r7, lr}
 8056d16: 466f         	mov	r7, sp
 8056d18: b084         	sub	sp, #0x10
 8056d1a: 9003         	str	r0, [sp, #0xc]
 8056d1c: 9102         	str	r1, [sp, #0x8]
 8056d1e: 9201         	str	r2, [sp, #0x4]
;         configASSERT( pxEventList );
 8056d20: 9803         	ldr	r0, [sp, #0xc]
 8056d22: b920         	cbnz	r0, 0x8056d2e <vTaskPlaceOnEventListRestricted+0x1a> @ imm = #0x8
 8056d24: e7ff         	b	0x8056d26 <vTaskPlaceOnEventListRestricted+0x12> @ imm = #-0x2
 8056d26: 481b         	ldr	r0, [pc, #0x6c]         @ 0x8056d94 <vTaskPlaceOnEventListRestricted+0x80>
 8056d28: 4780         	blx	r0
 8056d2a: e7ff         	b	0x8056d2c <vTaskPlaceOnEventListRestricted+0x18> @ imm = #-0x2
 8056d2c: e7fe         	b	0x8056d2c <vTaskPlaceOnEventListRestricted+0x18> @ imm = #-0x4
;         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8056d2e: e7ff         	b	0x8056d30 <vTaskPlaceOnEventListRestricted+0x1c> @ imm = #-0x2
 8056d30: 9803         	ldr	r0, [sp, #0xc]
 8056d32: 6840         	ldr	r0, [r0, #0x4]
 8056d34: 9000         	str	r0, [sp]
 8056d36: 9800         	ldr	r0, [sp]
 8056d38: f240 1100    	movw	r1, #0x100
 8056d3c: f2c2 0100    	movt	r1, #0x2000
 8056d40: 680a         	ldr	r2, [r1]
 8056d42: f8c2 0098    	str.w	r0, [r2, #0x98]
 8056d46: 9800         	ldr	r0, [sp]
 8056d48: 6880         	ldr	r0, [r0, #0x8]
 8056d4a: 680a         	ldr	r2, [r1]
 8056d4c: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8056d50: 6808         	ldr	r0, [r1]
 8056d52: 3094         	adds	r0, #0x94
 8056d54: 9a00         	ldr	r2, [sp]
 8056d56: 6892         	ldr	r2, [r2, #0x8]
 8056d58: 6050         	str	r0, [r2, #0x4]
 8056d5a: 6808         	ldr	r0, [r1]
 8056d5c: 3094         	adds	r0, #0x94
 8056d5e: 9a00         	ldr	r2, [sp]
 8056d60: 6090         	str	r0, [r2, #0x8]
 8056d62: 9803         	ldr	r0, [sp, #0xc]
 8056d64: 6809         	ldr	r1, [r1]
 8056d66: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056d6a: 9903         	ldr	r1, [sp, #0xc]
 8056d6c: 6808         	ldr	r0, [r1]
 8056d6e: 3001         	adds	r0, #0x1
 8056d70: 6008         	str	r0, [r1]
 8056d72: e7ff         	b	0x8056d74 <vTaskPlaceOnEventListRestricted+0x60> @ imm = #-0x2
;         if( xWaitIndefinitely != pdFALSE )
 8056d74: 9801         	ldr	r0, [sp, #0x4]
 8056d76: b120         	cbz	r0, 0x8056d82 <vTaskPlaceOnEventListRestricted+0x6e> @ imm = #0x8
 8056d78: e7ff         	b	0x8056d7a <vTaskPlaceOnEventListRestricted+0x66> @ imm = #-0x2
 8056d7a: f04f 30ff    	mov.w	r0, #0xffffffff
;             xTicksToWait = portMAX_DELAY;
 8056d7e: 9002         	str	r0, [sp, #0x8]
;         }
 8056d80: e7ff         	b	0x8056d82 <vTaskPlaceOnEventListRestricted+0x6e> @ imm = #-0x2
;         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8056d82: 9802         	ldr	r0, [sp, #0x8]
 8056d84: 9901         	ldr	r1, [sp, #0x4]
 8056d86: 4a02         	ldr	r2, [pc, #0x8]          @ 0x8056d90 <vTaskPlaceOnEventListRestricted+0x7c>
 8056d88: 4790         	blx	r2
;     }
 8056d8a: b004         	add	sp, #0x10
 8056d8c: bd80         	pop	{r7, pc}
 8056d8e: bf00         	nop

08056d90 <$d.67>:
 8056d90: 69 58 05 08  	.word	0x08055869
 8056d94: 55 cd 05 08  	.word	0x0805cd55

08056d98 <xTaskRemoveFromEventList>:
; {
 8056d98: b580         	push	{r7, lr}
 8056d9a: 466f         	mov	r7, sp
 8056d9c: b088         	sub	sp, #0x20
 8056d9e: 9007         	str	r0, [sp, #0x1c]
;     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056da0: 9807         	ldr	r0, [sp, #0x1c]
 8056da2: 68c0         	ldr	r0, [r0, #0xc]
 8056da4: 68c0         	ldr	r0, [r0, #0xc]
 8056da6: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pxUnblockedTCB );
 8056da8: 9806         	ldr	r0, [sp, #0x18]
 8056daa: b920         	cbnz	r0, 0x8056db6 <xTaskRemoveFromEventList+0x1e> @ imm = #0x8
 8056dac: e7ff         	b	0x8056dae <xTaskRemoveFromEventList+0x16> @ imm = #-0x2
 8056dae: 4871         	ldr	r0, [pc, #0x1c4]        @ 0x8056f74 <xTaskRemoveFromEventList+0x1dc>
 8056db0: 4780         	blx	r0
 8056db2: e7ff         	b	0x8056db4 <xTaskRemoveFromEventList+0x1c> @ imm = #-0x2
 8056db4: e7fe         	b	0x8056db4 <xTaskRemoveFromEventList+0x1c> @ imm = #-0x4
;     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8056db6: e7ff         	b	0x8056db8 <xTaskRemoveFromEventList+0x20> @ imm = #-0x2
 8056db8: 9806         	ldr	r0, [sp, #0x18]
 8056dba: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056dbe: 9004         	str	r0, [sp, #0x10]
 8056dc0: 9806         	ldr	r0, [sp, #0x18]
 8056dc2: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8056dc6: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056dca: 6088         	str	r0, [r1, #0x8]
 8056dcc: 9906         	ldr	r1, [sp, #0x18]
 8056dce: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8056dd2: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8056dd6: 6048         	str	r0, [r1, #0x4]
 8056dd8: 9804         	ldr	r0, [sp, #0x10]
 8056dda: 6840         	ldr	r0, [r0, #0x4]
 8056ddc: 9906         	ldr	r1, [sp, #0x18]
 8056dde: 3194         	adds	r1, #0x94
 8056de0: 4288         	cmp	r0, r1
 8056de2: d106         	bne	0x8056df2 <xTaskRemoveFromEventList+0x5a> @ imm = #0xc
 8056de4: e7ff         	b	0x8056de6 <xTaskRemoveFromEventList+0x4e> @ imm = #-0x2
 8056de6: 9806         	ldr	r0, [sp, #0x18]
 8056de8: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056dec: 9904         	ldr	r1, [sp, #0x10]
 8056dee: 6048         	str	r0, [r1, #0x4]
 8056df0: e7ff         	b	0x8056df2 <xTaskRemoveFromEventList+0x5a> @ imm = #-0x2
 8056df2: 9906         	ldr	r1, [sp, #0x18]
 8056df4: 2000         	movs	r0, #0x0
 8056df6: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056dfa: 9904         	ldr	r1, [sp, #0x10]
 8056dfc: 6808         	ldr	r0, [r1]
 8056dfe: 3801         	subs	r0, #0x1
 8056e00: 6008         	str	r0, [r1]
 8056e02: e7ff         	b	0x8056e04 <xTaskRemoveFromEventList+0x6c> @ imm = #-0x2
;     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8056e04: f240 1028    	movw	r0, #0x128
 8056e08: f2c2 0000    	movt	r0, #0x2000
 8056e0c: 6800         	ldr	r0, [r0]
 8056e0e: 2800         	cmp	r0, #0x0
 8056e10: d174         	bne	0x8056efc <xTaskRemoveFromEventList+0x164> @ imm = #0xe8
 8056e12: e7ff         	b	0x8056e14 <xTaskRemoveFromEventList+0x7c> @ imm = #-0x2
;         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8056e14: e7ff         	b	0x8056e16 <xTaskRemoveFromEventList+0x7e> @ imm = #-0x2
 8056e16: 9806         	ldr	r0, [sp, #0x18]
 8056e18: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8056e1c: 9003         	str	r0, [sp, #0xc]
 8056e1e: 9806         	ldr	r0, [sp, #0x18]
 8056e20: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8056e24: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056e28: 6088         	str	r0, [r1, #0x8]
 8056e2a: 9906         	ldr	r1, [sp, #0x18]
 8056e2c: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8056e30: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8056e34: 6048         	str	r0, [r1, #0x4]
 8056e36: 9803         	ldr	r0, [sp, #0xc]
 8056e38: 6840         	ldr	r0, [r0, #0x4]
 8056e3a: 9906         	ldr	r1, [sp, #0x18]
 8056e3c: 3180         	adds	r1, #0x80
 8056e3e: 4288         	cmp	r0, r1
 8056e40: d106         	bne	0x8056e50 <xTaskRemoveFromEventList+0xb8> @ imm = #0xc
 8056e42: e7ff         	b	0x8056e44 <xTaskRemoveFromEventList+0xac> @ imm = #-0x2
 8056e44: 9806         	ldr	r0, [sp, #0x18]
 8056e46: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056e4a: 9903         	ldr	r1, [sp, #0xc]
 8056e4c: 6048         	str	r0, [r1, #0x4]
 8056e4e: e7ff         	b	0x8056e50 <xTaskRemoveFromEventList+0xb8> @ imm = #-0x2
 8056e50: 9906         	ldr	r1, [sp, #0x18]
 8056e52: 2000         	movs	r0, #0x0
 8056e54: f8c1 0090    	str.w	r0, [r1, #0x90]
 8056e58: 9903         	ldr	r1, [sp, #0xc]
 8056e5a: 6808         	ldr	r0, [r1]
 8056e5c: 3801         	subs	r0, #0x1
 8056e5e: 6008         	str	r0, [r1]
 8056e60: e7ff         	b	0x8056e62 <xTaskRemoveFromEventList+0xca> @ imm = #-0x2
;         prvAddTaskToReadyList( pxUnblockedTCB );
 8056e62: e7ff         	b	0x8056e64 <xTaskRemoveFromEventList+0xcc> @ imm = #-0x2
 8056e64: e7ff         	b	0x8056e66 <xTaskRemoveFromEventList+0xce> @ imm = #-0x2
 8056e66: 9806         	ldr	r0, [sp, #0x18]
 8056e68: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056e6c: f240 21a0    	movw	r1, #0x2a0
 8056e70: f2c2 0100    	movt	r1, #0x2000
 8056e74: 6809         	ldr	r1, [r1]
 8056e76: 4288         	cmp	r0, r1
 8056e78: d909         	bls	0x8056e8e <xTaskRemoveFromEventList+0xf6> @ imm = #0x12
 8056e7a: e7ff         	b	0x8056e7c <xTaskRemoveFromEventList+0xe4> @ imm = #-0x2
 8056e7c: 9806         	ldr	r0, [sp, #0x18]
 8056e7e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056e82: f240 21a0    	movw	r1, #0x2a0
 8056e86: f2c2 0100    	movt	r1, #0x2000
 8056e8a: 6008         	str	r0, [r1]
 8056e8c: e7ff         	b	0x8056e8e <xTaskRemoveFromEventList+0xf6> @ imm = #-0x2
 8056e8e: e7ff         	b	0x8056e90 <xTaskRemoveFromEventList+0xf8> @ imm = #-0x2
 8056e90: e7ff         	b	0x8056e92 <xTaskRemoveFromEventList+0xfa> @ imm = #-0x2
 8056e92: 9806         	ldr	r0, [sp, #0x18]
 8056e94: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056e98: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056e9c: f240 1160    	movw	r1, #0x160
 8056ea0: f2c2 0100    	movt	r1, #0x2000
 8056ea4: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056ea8: 6840         	ldr	r0, [r0, #0x4]
 8056eaa: 9002         	str	r0, [sp, #0x8]
 8056eac: 9802         	ldr	r0, [sp, #0x8]
 8056eae: 9a06         	ldr	r2, [sp, #0x18]
 8056eb0: f8c2 0084    	str.w	r0, [r2, #0x84]
 8056eb4: 9802         	ldr	r0, [sp, #0x8]
 8056eb6: 6880         	ldr	r0, [r0, #0x8]
 8056eb8: 9a06         	ldr	r2, [sp, #0x18]
 8056eba: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056ebe: 9806         	ldr	r0, [sp, #0x18]
 8056ec0: 3080         	adds	r0, #0x80
 8056ec2: 9a02         	ldr	r2, [sp, #0x8]
 8056ec4: 6892         	ldr	r2, [r2, #0x8]
 8056ec6: 6050         	str	r0, [r2, #0x4]
 8056ec8: 9806         	ldr	r0, [sp, #0x18]
 8056eca: 3080         	adds	r0, #0x80
 8056ecc: 9a02         	ldr	r2, [sp, #0x8]
 8056ece: 6090         	str	r0, [r2, #0x8]
 8056ed0: 9a06         	ldr	r2, [sp, #0x18]
 8056ed2: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8056ed6: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056eda: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056ede: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056ee2: 9806         	ldr	r0, [sp, #0x18]
 8056ee4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056ee8: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056eec: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056ef0: 3001         	adds	r0, #0x1
 8056ef2: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8056ef6: e7ff         	b	0x8056ef8 <xTaskRemoveFromEventList+0x160> @ imm = #-0x2
 8056ef8: e7ff         	b	0x8056efa <xTaskRemoveFromEventList+0x162> @ imm = #-0x2
;     }
 8056efa: e020         	b	0x8056f3e <xTaskRemoveFromEventList+0x1a6> @ imm = #0x40
;         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8056efc: e7ff         	b	0x8056efe <xTaskRemoveFromEventList+0x166> @ imm = #-0x2
 8056efe: f240 1138    	movw	r1, #0x138
 8056f02: f2c2 0100    	movt	r1, #0x2000
 8056f06: 6848         	ldr	r0, [r1, #0x4]
 8056f08: 9001         	str	r0, [sp, #0x4]
 8056f0a: 9801         	ldr	r0, [sp, #0x4]
 8056f0c: 9a06         	ldr	r2, [sp, #0x18]
 8056f0e: f8c2 0098    	str.w	r0, [r2, #0x98]
 8056f12: 9801         	ldr	r0, [sp, #0x4]
 8056f14: 6880         	ldr	r0, [r0, #0x8]
 8056f16: 9a06         	ldr	r2, [sp, #0x18]
 8056f18: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8056f1c: 9806         	ldr	r0, [sp, #0x18]
 8056f1e: 3094         	adds	r0, #0x94
 8056f20: 9a01         	ldr	r2, [sp, #0x4]
 8056f22: 6892         	ldr	r2, [r2, #0x8]
 8056f24: 6050         	str	r0, [r2, #0x4]
 8056f26: 9806         	ldr	r0, [sp, #0x18]
 8056f28: 3094         	adds	r0, #0x94
 8056f2a: 9a01         	ldr	r2, [sp, #0x4]
 8056f2c: 6090         	str	r0, [r2, #0x8]
 8056f2e: 9806         	ldr	r0, [sp, #0x18]
 8056f30: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 8056f34: 6808         	ldr	r0, [r1]
 8056f36: 3001         	adds	r0, #0x1
 8056f38: 6008         	str	r0, [r1]
 8056f3a: e7ff         	b	0x8056f3c <xTaskRemoveFromEventList+0x1a4> @ imm = #-0x2
 8056f3c: e7ff         	b	0x8056f3e <xTaskRemoveFromEventList+0x1a6> @ imm = #-0x2
;         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056f3e: 9806         	ldr	r0, [sp, #0x18]
 8056f40: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056f44: f240 1100    	movw	r1, #0x100
 8056f48: f2c2 0100    	movt	r1, #0x2000
 8056f4c: 6809         	ldr	r1, [r1]
 8056f4e: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056f52: 4288         	cmp	r0, r1
 8056f54: d908         	bls	0x8056f68 <xTaskRemoveFromEventList+0x1d0> @ imm = #0x10
 8056f56: e7ff         	b	0x8056f58 <xTaskRemoveFromEventList+0x1c0> @ imm = #-0x2
 8056f58: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 8056f5a: 9005         	str	r0, [sp, #0x14]
;             xYieldPendings[ 0 ] = pdTRUE;
 8056f5c: f240 21a4    	movw	r1, #0x2a4
 8056f60: f2c2 0100    	movt	r1, #0x2000
 8056f64: 6008         	str	r0, [r1]
;         }
 8056f66: e002         	b	0x8056f6e <xTaskRemoveFromEventList+0x1d6> @ imm = #0x4
 8056f68: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 8056f6a: 9005         	str	r0, [sp, #0x14]
 8056f6c: e7ff         	b	0x8056f6e <xTaskRemoveFromEventList+0x1d6> @ imm = #-0x2
;     return xReturn;
 8056f6e: 9805         	ldr	r0, [sp, #0x14]
 8056f70: b008         	add	sp, #0x20
 8056f72: bd80         	pop	{r7, pc}

08056f74 <$d.69>:
 8056f74: 55 cd 05 08  	.word	0x0805cd55

08056f78 <vTaskRemoveFromUnorderedEventList>:
; {
 8056f78: b580         	push	{r7, lr}
 8056f7a: 466f         	mov	r7, sp
 8056f7c: b086         	sub	sp, #0x18
 8056f7e: 9005         	str	r0, [sp, #0x14]
 8056f80: 9104         	str	r1, [sp, #0x10]
;     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8056f82: f240 1028    	movw	r0, #0x128
 8056f86: f2c2 0000    	movt	r0, #0x2000
 8056f8a: 6800         	ldr	r0, [r0]
 8056f8c: b920         	cbnz	r0, 0x8056f98 <vTaskRemoveFromUnorderedEventList+0x20> @ imm = #0x8
 8056f8e: e7ff         	b	0x8056f90 <vTaskRemoveFromUnorderedEventList+0x18> @ imm = #-0x2
 8056f90: 485e         	ldr	r0, [pc, #0x178]        @ 0x805710c <vTaskRemoveFromUnorderedEventList+0x194>
 8056f92: 4780         	blx	r0
 8056f94: e7ff         	b	0x8056f96 <vTaskRemoveFromUnorderedEventList+0x1e> @ imm = #-0x2
 8056f96: e7fe         	b	0x8056f96 <vTaskRemoveFromUnorderedEventList+0x1e> @ imm = #-0x4
;     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8056f98: 9804         	ldr	r0, [sp, #0x10]
 8056f9a: f040 4000    	orr	r0, r0, #0x80000000
 8056f9e: 9905         	ldr	r1, [sp, #0x14]
 8056fa0: 6008         	str	r0, [r1]
;     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056fa2: 9805         	ldr	r0, [sp, #0x14]
 8056fa4: 68c0         	ldr	r0, [r0, #0xc]
 8056fa6: 9003         	str	r0, [sp, #0xc]
;     configASSERT( pxUnblockedTCB );
 8056fa8: 9803         	ldr	r0, [sp, #0xc]
 8056faa: b920         	cbnz	r0, 0x8056fb6 <vTaskRemoveFromUnorderedEventList+0x3e> @ imm = #0x8
 8056fac: e7ff         	b	0x8056fae <vTaskRemoveFromUnorderedEventList+0x36> @ imm = #-0x2
 8056fae: 4856         	ldr	r0, [pc, #0x158]        @ 0x8057108 <vTaskRemoveFromUnorderedEventList+0x190>
 8056fb0: 4780         	blx	r0
 8056fb2: e7ff         	b	0x8056fb4 <vTaskRemoveFromUnorderedEventList+0x3c> @ imm = #-0x2
 8056fb4: e7fe         	b	0x8056fb4 <vTaskRemoveFromUnorderedEventList+0x3c> @ imm = #-0x4
;     listREMOVE_ITEM( pxEventListItem );
 8056fb6: e7ff         	b	0x8056fb8 <vTaskRemoveFromUnorderedEventList+0x40> @ imm = #-0x2
 8056fb8: 9805         	ldr	r0, [sp, #0x14]
 8056fba: 6900         	ldr	r0, [r0, #0x10]
 8056fbc: 9002         	str	r0, [sp, #0x8]
 8056fbe: 9805         	ldr	r0, [sp, #0x14]
 8056fc0: 6841         	ldr	r1, [r0, #0x4]
 8056fc2: 6880         	ldr	r0, [r0, #0x8]
 8056fc4: 6088         	str	r0, [r1, #0x8]
 8056fc6: 9905         	ldr	r1, [sp, #0x14]
 8056fc8: 6848         	ldr	r0, [r1, #0x4]
 8056fca: 6889         	ldr	r1, [r1, #0x8]
 8056fcc: 6048         	str	r0, [r1, #0x4]
 8056fce: 9802         	ldr	r0, [sp, #0x8]
 8056fd0: 6840         	ldr	r0, [r0, #0x4]
 8056fd2: 9905         	ldr	r1, [sp, #0x14]
 8056fd4: 4288         	cmp	r0, r1
 8056fd6: d105         	bne	0x8056fe4 <vTaskRemoveFromUnorderedEventList+0x6c> @ imm = #0xa
 8056fd8: e7ff         	b	0x8056fda <vTaskRemoveFromUnorderedEventList+0x62> @ imm = #-0x2
 8056fda: 9805         	ldr	r0, [sp, #0x14]
 8056fdc: 6880         	ldr	r0, [r0, #0x8]
 8056fde: 9902         	ldr	r1, [sp, #0x8]
 8056fe0: 6048         	str	r0, [r1, #0x4]
 8056fe2: e7ff         	b	0x8056fe4 <vTaskRemoveFromUnorderedEventList+0x6c> @ imm = #-0x2
 8056fe4: 9905         	ldr	r1, [sp, #0x14]
 8056fe6: 2000         	movs	r0, #0x0
 8056fe8: 6108         	str	r0, [r1, #0x10]
 8056fea: 9902         	ldr	r1, [sp, #0x8]
 8056fec: 6808         	ldr	r0, [r1]
 8056fee: 3801         	subs	r0, #0x1
 8056ff0: 6008         	str	r0, [r1]
 8056ff2: e7ff         	b	0x8056ff4 <vTaskRemoveFromUnorderedEventList+0x7c> @ imm = #-0x2
;     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8056ff4: e7ff         	b	0x8056ff6 <vTaskRemoveFromUnorderedEventList+0x7e> @ imm = #-0x2
 8056ff6: 9803         	ldr	r0, [sp, #0xc]
 8056ff8: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8056ffc: 9001         	str	r0, [sp, #0x4]
 8056ffe: 9803         	ldr	r0, [sp, #0xc]
 8057000: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8057004: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057008: 6088         	str	r0, [r1, #0x8]
 805700a: 9903         	ldr	r1, [sp, #0xc]
 805700c: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8057010: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8057014: 6048         	str	r0, [r1, #0x4]
 8057016: 9801         	ldr	r0, [sp, #0x4]
 8057018: 6840         	ldr	r0, [r0, #0x4]
 805701a: 9903         	ldr	r1, [sp, #0xc]
 805701c: 3180         	adds	r1, #0x80
 805701e: 4288         	cmp	r0, r1
 8057020: d106         	bne	0x8057030 <vTaskRemoveFromUnorderedEventList+0xb8> @ imm = #0xc
 8057022: e7ff         	b	0x8057024 <vTaskRemoveFromUnorderedEventList+0xac> @ imm = #-0x2
 8057024: 9803         	ldr	r0, [sp, #0xc]
 8057026: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 805702a: 9901         	ldr	r1, [sp, #0x4]
 805702c: 6048         	str	r0, [r1, #0x4]
 805702e: e7ff         	b	0x8057030 <vTaskRemoveFromUnorderedEventList+0xb8> @ imm = #-0x2
 8057030: 9903         	ldr	r1, [sp, #0xc]
 8057032: 2000         	movs	r0, #0x0
 8057034: f8c1 0090    	str.w	r0, [r1, #0x90]
 8057038: 9901         	ldr	r1, [sp, #0x4]
 805703a: 6808         	ldr	r0, [r1]
 805703c: 3801         	subs	r0, #0x1
 805703e: 6008         	str	r0, [r1]
 8057040: e7ff         	b	0x8057042 <vTaskRemoveFromUnorderedEventList+0xca> @ imm = #-0x2
;     prvAddTaskToReadyList( pxUnblockedTCB );
 8057042: e7ff         	b	0x8057044 <vTaskRemoveFromUnorderedEventList+0xcc> @ imm = #-0x2
 8057044: e7ff         	b	0x8057046 <vTaskRemoveFromUnorderedEventList+0xce> @ imm = #-0x2
 8057046: 9803         	ldr	r0, [sp, #0xc]
 8057048: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805704c: f240 21a0    	movw	r1, #0x2a0
 8057050: f2c2 0100    	movt	r1, #0x2000
 8057054: 6809         	ldr	r1, [r1]
 8057056: 4288         	cmp	r0, r1
 8057058: d909         	bls	0x805706e <vTaskRemoveFromUnorderedEventList+0xf6> @ imm = #0x12
 805705a: e7ff         	b	0x805705c <vTaskRemoveFromUnorderedEventList+0xe4> @ imm = #-0x2
 805705c: 9803         	ldr	r0, [sp, #0xc]
 805705e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057062: f240 21a0    	movw	r1, #0x2a0
 8057066: f2c2 0100    	movt	r1, #0x2000
 805706a: 6008         	str	r0, [r1]
 805706c: e7ff         	b	0x805706e <vTaskRemoveFromUnorderedEventList+0xf6> @ imm = #-0x2
 805706e: e7ff         	b	0x8057070 <vTaskRemoveFromUnorderedEventList+0xf8> @ imm = #-0x2
 8057070: e7ff         	b	0x8057072 <vTaskRemoveFromUnorderedEventList+0xfa> @ imm = #-0x2
 8057072: 9803         	ldr	r0, [sp, #0xc]
 8057074: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057078: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805707c: f240 1160    	movw	r1, #0x160
 8057080: f2c2 0100    	movt	r1, #0x2000
 8057084: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057088: 6840         	ldr	r0, [r0, #0x4]
 805708a: 9000         	str	r0, [sp]
 805708c: 9800         	ldr	r0, [sp]
 805708e: 9a03         	ldr	r2, [sp, #0xc]
 8057090: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057094: 9800         	ldr	r0, [sp]
 8057096: 6880         	ldr	r0, [r0, #0x8]
 8057098: 9a03         	ldr	r2, [sp, #0xc]
 805709a: f8c2 0088    	str.w	r0, [r2, #0x88]
 805709e: 9803         	ldr	r0, [sp, #0xc]
 80570a0: 3080         	adds	r0, #0x80
 80570a2: 9a00         	ldr	r2, [sp]
 80570a4: 6892         	ldr	r2, [r2, #0x8]
 80570a6: 6050         	str	r0, [r2, #0x4]
 80570a8: 9803         	ldr	r0, [sp, #0xc]
 80570aa: 3080         	adds	r0, #0x80
 80570ac: 9a00         	ldr	r2, [sp]
 80570ae: 6090         	str	r0, [r2, #0x8]
 80570b0: 9a03         	ldr	r2, [sp, #0xc]
 80570b2: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80570b6: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80570ba: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80570be: f8c2 0090    	str.w	r0, [r2, #0x90]
 80570c2: 9803         	ldr	r0, [sp, #0xc]
 80570c4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80570c8: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80570cc: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80570d0: 3001         	adds	r0, #0x1
 80570d2: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80570d6: e7ff         	b	0x80570d8 <vTaskRemoveFromUnorderedEventList+0x160> @ imm = #-0x2
 80570d8: e7ff         	b	0x80570da <vTaskRemoveFromUnorderedEventList+0x162> @ imm = #-0x2
;         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80570da: 9803         	ldr	r0, [sp, #0xc]
 80570dc: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80570e0: f240 1100    	movw	r1, #0x100
 80570e4: f2c2 0100    	movt	r1, #0x2000
 80570e8: 6809         	ldr	r1, [r1]
 80570ea: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80570ee: 4288         	cmp	r0, r1
 80570f0: d907         	bls	0x8057102 <vTaskRemoveFromUnorderedEventList+0x18a> @ imm = #0xe
 80570f2: e7ff         	b	0x80570f4 <vTaskRemoveFromUnorderedEventList+0x17c> @ imm = #-0x2
;             xYieldPendings[ 0 ] = pdTRUE;
 80570f4: f240 21a4    	movw	r1, #0x2a4
 80570f8: f2c2 0100    	movt	r1, #0x2000
 80570fc: 2001         	movs	r0, #0x1
 80570fe: 6008         	str	r0, [r1]
;         }
 8057100: e7ff         	b	0x8057102 <vTaskRemoveFromUnorderedEventList+0x18a> @ imm = #-0x2
; }
 8057102: b006         	add	sp, #0x18
 8057104: bd80         	pop	{r7, pc}
 8057106: bf00         	nop

08057108 <$d.71>:
 8057108: 55 cd 05 08  	.word	0x0805cd55
 805710c: 55 cd 05 08  	.word	0x0805cd55

08057110 <vTaskSetTimeOutState>:
; {
 8057110: b580         	push	{r7, lr}
 8057112: 466f         	mov	r7, sp
 8057114: b082         	sub	sp, #0x8
 8057116: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxTimeOut );
 8057118: 9801         	ldr	r0, [sp, #0x4]
 805711a: b920         	cbnz	r0, 0x8057126 <vTaskSetTimeOutState+0x16> @ imm = #0x8
 805711c: e7ff         	b	0x805711e <vTaskSetTimeOutState+0xe> @ imm = #-0x2
 805711e: 480e         	ldr	r0, [pc, #0x38]         @ 0x8057158 <vTaskSetTimeOutState+0x48>
 8057120: 4780         	blx	r0
 8057122: e7ff         	b	0x8057124 <vTaskSetTimeOutState+0x14> @ imm = #-0x2
 8057124: e7fe         	b	0x8057124 <vTaskSetTimeOutState+0x14> @ imm = #-0x4
;     taskENTER_CRITICAL();
 8057126: 480a         	ldr	r0, [pc, #0x28]         @ 0x8057150 <vTaskSetTimeOutState+0x40>
 8057128: 4780         	blx	r0
;         pxTimeOut->xOverflowCount = xNumOfOverflows;
 805712a: f240 20b4    	movw	r0, #0x2b4
 805712e: f2c2 0000    	movt	r0, #0x2000
 8057132: 6800         	ldr	r0, [r0]
 8057134: 9901         	ldr	r1, [sp, #0x4]
 8057136: 6008         	str	r0, [r1]
;         pxTimeOut->xTimeOnEntering = xTickCount;
 8057138: f240 102c    	movw	r0, #0x12c
 805713c: f2c2 0000    	movt	r0, #0x2000
 8057140: 6800         	ldr	r0, [r0]
 8057142: 9901         	ldr	r1, [sp, #0x4]
 8057144: 6048         	str	r0, [r1, #0x4]
;     taskEXIT_CRITICAL();
 8057146: 4803         	ldr	r0, [pc, #0xc]          @ 0x8057154 <vTaskSetTimeOutState+0x44>
 8057148: 4780         	blx	r0
; }
 805714a: b002         	add	sp, #0x8
 805714c: bd80         	pop	{r7, pc}
 805714e: bf00         	nop

08057150 <$d.73>:
 8057150: 19 c4 05 08  	.word	0x0805c419
 8057154: 3d c4 05 08  	.word	0x0805c43d
 8057158: 55 cd 05 08  	.word	0x0805cd55

0805715c <vTaskInternalSetTimeOutState>:
; {
 805715c: b081         	sub	sp, #0x4
 805715e: 9000         	str	r0, [sp]
;     pxTimeOut->xOverflowCount = xNumOfOverflows;
 8057160: f240 20b4    	movw	r0, #0x2b4
 8057164: f2c2 0000    	movt	r0, #0x2000
 8057168: 6800         	ldr	r0, [r0]
 805716a: 9900         	ldr	r1, [sp]
 805716c: 6008         	str	r0, [r1]
;     pxTimeOut->xTimeOnEntering = xTickCount;
 805716e: f240 102c    	movw	r0, #0x12c
 8057172: f2c2 0000    	movt	r0, #0x2000
 8057176: 6800         	ldr	r0, [r0]
 8057178: 9900         	ldr	r1, [sp]
 805717a: 6048         	str	r0, [r1, #0x4]
; }
 805717c: b001         	add	sp, #0x4
 805717e: 4770         	bx	lr

08057180 <xTaskCheckForTimeOut>:
; {
 8057180: b580         	push	{r7, lr}
 8057182: 466f         	mov	r7, sp
 8057184: b086         	sub	sp, #0x18
 8057186: 9005         	str	r0, [sp, #0x14]
 8057188: 9104         	str	r1, [sp, #0x10]
;     configASSERT( pxTimeOut );
 805718a: 9805         	ldr	r0, [sp, #0x14]
 805718c: b920         	cbnz	r0, 0x8057198 <xTaskCheckForTimeOut+0x18> @ imm = #0x8
 805718e: e7ff         	b	0x8057190 <xTaskCheckForTimeOut+0x10> @ imm = #-0x2
 8057190: 482d         	ldr	r0, [pc, #0xb4]         @ 0x8057248 <xTaskCheckForTimeOut+0xc8>
 8057192: 4780         	blx	r0
 8057194: e7ff         	b	0x8057196 <xTaskCheckForTimeOut+0x16> @ imm = #-0x2
 8057196: e7fe         	b	0x8057196 <xTaskCheckForTimeOut+0x16> @ imm = #-0x4
;     configASSERT( pxTicksToWait );
 8057198: 9804         	ldr	r0, [sp, #0x10]
 805719a: b920         	cbnz	r0, 0x80571a6 <xTaskCheckForTimeOut+0x26> @ imm = #0x8
 805719c: e7ff         	b	0x805719e <xTaskCheckForTimeOut+0x1e> @ imm = #-0x2
 805719e: 4829         	ldr	r0, [pc, #0xa4]         @ 0x8057244 <xTaskCheckForTimeOut+0xc4>
 80571a0: 4780         	blx	r0
 80571a2: e7ff         	b	0x80571a4 <xTaskCheckForTimeOut+0x24> @ imm = #-0x2
 80571a4: e7fe         	b	0x80571a4 <xTaskCheckForTimeOut+0x24> @ imm = #-0x4
;     taskENTER_CRITICAL();
 80571a6: 4824         	ldr	r0, [pc, #0x90]         @ 0x8057238 <xTaskCheckForTimeOut+0xb8>
 80571a8: 4780         	blx	r0
;         const TickType_t xConstTickCount = xTickCount;
 80571aa: f240 102c    	movw	r0, #0x12c
 80571ae: f2c2 0000    	movt	r0, #0x2000
 80571b2: 6800         	ldr	r0, [r0]
 80571b4: 9002         	str	r0, [sp, #0x8]
;         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80571b6: 9802         	ldr	r0, [sp, #0x8]
 80571b8: 9905         	ldr	r1, [sp, #0x14]
 80571ba: 6849         	ldr	r1, [r1, #0x4]
 80571bc: 1a40         	subs	r0, r0, r1
 80571be: 9001         	str	r0, [sp, #0x4]
;             if( *pxTicksToWait == portMAX_DELAY )
 80571c0: 9804         	ldr	r0, [sp, #0x10]
 80571c2: 6800         	ldr	r0, [r0]
 80571c4: 3001         	adds	r0, #0x1
 80571c6: b918         	cbnz	r0, 0x80571d0 <xTaskCheckForTimeOut+0x50> @ imm = #0x6
 80571c8: e7ff         	b	0x80571ca <xTaskCheckForTimeOut+0x4a> @ imm = #-0x2
 80571ca: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 80571cc: 9003         	str	r0, [sp, #0xc]
;             }
 80571ce: e02e         	b	0x805722e <xTaskCheckForTimeOut+0xae> @ imm = #0x5c
;         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80571d0: f240 20b4    	movw	r0, #0x2b4
 80571d4: f2c2 0000    	movt	r0, #0x2000
 80571d8: 6800         	ldr	r0, [r0]
 80571da: 9905         	ldr	r1, [sp, #0x14]
 80571dc: 6809         	ldr	r1, [r1]
 80571de: 4288         	cmp	r0, r1
 80571e0: d00c         	beq	0x80571fc <xTaskCheckForTimeOut+0x7c> @ imm = #0x18
 80571e2: e7ff         	b	0x80571e4 <xTaskCheckForTimeOut+0x64> @ imm = #-0x2
 80571e4: 9802         	ldr	r0, [sp, #0x8]
 80571e6: 9905         	ldr	r1, [sp, #0x14]
 80571e8: 6849         	ldr	r1, [r1, #0x4]
 80571ea: 4288         	cmp	r0, r1
 80571ec: d306         	blo	0x80571fc <xTaskCheckForTimeOut+0x7c> @ imm = #0xc
 80571ee: e7ff         	b	0x80571f0 <xTaskCheckForTimeOut+0x70> @ imm = #-0x2
 80571f0: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 80571f2: 9003         	str	r0, [sp, #0xc]
;             *pxTicksToWait = ( TickType_t ) 0;
 80571f4: 9904         	ldr	r1, [sp, #0x10]
 80571f6: 2000         	movs	r0, #0x0
 80571f8: 6008         	str	r0, [r1]
;         }
 80571fa: e017         	b	0x805722c <xTaskCheckForTimeOut+0xac> @ imm = #0x2e
;         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80571fc: 9801         	ldr	r0, [sp, #0x4]
 80571fe: 9904         	ldr	r1, [sp, #0x10]
 8057200: 6809         	ldr	r1, [r1]
 8057202: 4288         	cmp	r0, r1
 8057204: d20b         	bhs	0x805721e <xTaskCheckForTimeOut+0x9e> @ imm = #0x16
 8057206: e7ff         	b	0x8057208 <xTaskCheckForTimeOut+0x88> @ imm = #-0x2
;             *pxTicksToWait -= xElapsedTime;
 8057208: 9a01         	ldr	r2, [sp, #0x4]
 805720a: 9904         	ldr	r1, [sp, #0x10]
 805720c: 6808         	ldr	r0, [r1]
 805720e: 1a80         	subs	r0, r0, r2
 8057210: 6008         	str	r0, [r1]
;             vTaskInternalSetTimeOutState( pxTimeOut );
 8057212: 9805         	ldr	r0, [sp, #0x14]
 8057214: 4909         	ldr	r1, [pc, #0x24]         @ 0x805723c <xTaskCheckForTimeOut+0xbc>
 8057216: 4788         	blx	r1
 8057218: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805721a: 9003         	str	r0, [sp, #0xc]
;         }
 805721c: e005         	b	0x805722a <xTaskCheckForTimeOut+0xaa> @ imm = #0xa
;             *pxTicksToWait = ( TickType_t ) 0;
 805721e: 9904         	ldr	r1, [sp, #0x10]
 8057220: 2000         	movs	r0, #0x0
 8057222: 6008         	str	r0, [r1]
 8057224: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 8057226: 9003         	str	r0, [sp, #0xc]
 8057228: e7ff         	b	0x805722a <xTaskCheckForTimeOut+0xaa> @ imm = #-0x2
 805722a: e7ff         	b	0x805722c <xTaskCheckForTimeOut+0xac> @ imm = #-0x2
 805722c: e7ff         	b	0x805722e <xTaskCheckForTimeOut+0xae> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805722e: 4804         	ldr	r0, [pc, #0x10]         @ 0x8057240 <xTaskCheckForTimeOut+0xc0>
 8057230: 4780         	blx	r0
;     return xReturn;
 8057232: 9803         	ldr	r0, [sp, #0xc]
 8057234: b006         	add	sp, #0x18
 8057236: bd80         	pop	{r7, pc}

08057238 <$d.75>:
 8057238: 19 c4 05 08  	.word	0x0805c419
 805723c: 5d 71 05 08  	.word	0x0805715d
 8057240: 3d c4 05 08  	.word	0x0805c43d
 8057244: 55 cd 05 08  	.word	0x0805cd55
 8057248: 55 cd 05 08  	.word	0x0805cd55

0805724c <vTaskMissedYield>:
;     xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 805724c: f240 21a4    	movw	r1, #0x2a4
 8057250: f2c2 0100    	movt	r1, #0x2000
 8057254: 2001         	movs	r0, #0x1
 8057256: 6008         	str	r0, [r1]
; }
 8057258: 4770         	bx	lr

0805725a <uxTaskGetTaskNumber>:
;     {
 805725a: b083         	sub	sp, #0xc
 805725c: 9002         	str	r0, [sp, #0x8]
;         if( xTask != NULL )
 805725e: 9802         	ldr	r0, [sp, #0x8]
 8057260: b138         	cbz	r0, 0x8057272 <uxTaskGetTaskNumber+0x18> @ imm = #0xe
 8057262: e7ff         	b	0x8057264 <uxTaskGetTaskNumber+0xa> @ imm = #-0x2
;             pxTCB = xTask;
 8057264: 9802         	ldr	r0, [sp, #0x8]
 8057266: 9000         	str	r0, [sp]
;             uxReturn = pxTCB->uxTaskNumber;
 8057268: 9800         	ldr	r0, [sp]
 805726a: f8d0 00c4    	ldr.w	r0, [r0, #0xc4]
 805726e: 9001         	str	r0, [sp, #0x4]
;         }
 8057270: e002         	b	0x8057278 <uxTaskGetTaskNumber+0x1e> @ imm = #0x4
 8057272: 2000         	movs	r0, #0x0
;             uxReturn = 0U;
 8057274: 9001         	str	r0, [sp, #0x4]
 8057276: e7ff         	b	0x8057278 <uxTaskGetTaskNumber+0x1e> @ imm = #-0x2
;         return uxReturn;
 8057278: 9801         	ldr	r0, [sp, #0x4]
 805727a: b003         	add	sp, #0xc
 805727c: 4770         	bx	lr

0805727e <vTaskSetTaskNumber>:
;     {
 805727e: b083         	sub	sp, #0xc
 8057280: 9002         	str	r0, [sp, #0x8]
 8057282: 9101         	str	r1, [sp, #0x4]
;         if( xTask != NULL )
 8057284: 9802         	ldr	r0, [sp, #0x8]
 8057286: b138         	cbz	r0, 0x8057298 <vTaskSetTaskNumber+0x1a> @ imm = #0xe
 8057288: e7ff         	b	0x805728a <vTaskSetTaskNumber+0xc> @ imm = #-0x2
;             pxTCB = xTask;
 805728a: 9802         	ldr	r0, [sp, #0x8]
 805728c: 9000         	str	r0, [sp]
;             pxTCB->uxTaskNumber = uxHandle;
 805728e: 9801         	ldr	r0, [sp, #0x4]
 8057290: 9900         	ldr	r1, [sp]
 8057292: f8c1 00c4    	str.w	r0, [r1, #0xc4]
;         }
 8057296: e7ff         	b	0x8057298 <vTaskSetTaskNumber+0x1a> @ imm = #-0x2
;     }
 8057298: b003         	add	sp, #0xc
 805729a: 4770         	bx	lr

0805729c <vTaskAllocateMPURegions>:
;     {
 805729c: b580         	push	{r7, lr}
 805729e: 466f         	mov	r7, sp
 80572a0: b084         	sub	sp, #0x10
 80572a2: 9003         	str	r0, [sp, #0xc]
 80572a4: 9102         	str	r1, [sp, #0x8]
;         pxTCB = prvGetTCBFromHandle( xTaskToModify );
 80572a6: 9803         	ldr	r0, [sp, #0xc]
 80572a8: b938         	cbnz	r0, 0x80572ba <vTaskAllocateMPURegions+0x1e> @ imm = #0xe
 80572aa: e7ff         	b	0x80572ac <vTaskAllocateMPURegions+0x10> @ imm = #-0x2
 80572ac: f240 1000    	movw	r0, #0x100
 80572b0: f2c2 0000    	movt	r0, #0x2000
 80572b4: 6800         	ldr	r0, [r0]
 80572b6: 9000         	str	r0, [sp]
 80572b8: e002         	b	0x80572c0 <vTaskAllocateMPURegions+0x24> @ imm = #0x4
 80572ba: 9803         	ldr	r0, [sp, #0xc]
 80572bc: 9000         	str	r0, [sp]
 80572be: e7ff         	b	0x80572c0 <vTaskAllocateMPURegions+0x24> @ imm = #-0x2
 80572c0: 9800         	ldr	r0, [sp]
 80572c2: 9001         	str	r0, [sp, #0x4]
;         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), pxRegions, NULL, 0 );
 80572c4: 9801         	ldr	r0, [sp, #0x4]
 80572c6: 3004         	adds	r0, #0x4
 80572c8: 9902         	ldr	r1, [sp, #0x8]
 80572ca: f8df c00c    	ldr.w	r12, [pc, #0xc]         @ 0x80572d8 <vTaskAllocateMPURegions+0x3c>
 80572ce: 2300         	movs	r3, #0x0
 80572d0: 461a         	mov	r2, r3
 80572d2: 47e0         	blx	r12
;     }
 80572d4: b004         	add	sp, #0x10
 80572d6: bd80         	pop	{r7, pc}

080572d8 <$d.77>:
 80572d8: b1 c9 05 08  	.word	0x0805c9b1

080572dc <vTaskGetInfo>:
;     {
 80572dc: b580         	push	{r7, lr}
 80572de: 466f         	mov	r7, sp
 80572e0: b086         	sub	sp, #0x18
 80572e2: 9005         	str	r0, [sp, #0x14]
 80572e4: 9104         	str	r1, [sp, #0x10]
 80572e6: 9203         	str	r2, [sp, #0xc]
 80572e8: f807 3c0d    	strb	r3, [r7, #-13]
;         pxTCB = prvGetTCBFromHandle( xTask );
 80572ec: 9805         	ldr	r0, [sp, #0x14]
 80572ee: b938         	cbnz	r0, 0x8057300 <vTaskGetInfo+0x24> @ imm = #0xe
 80572f0: e7ff         	b	0x80572f2 <vTaskGetInfo+0x16> @ imm = #-0x2
 80572f2: f240 1000    	movw	r0, #0x100
 80572f6: f2c2 0000    	movt	r0, #0x2000
 80572fa: 6800         	ldr	r0, [r0]
 80572fc: 9000         	str	r0, [sp]
 80572fe: e002         	b	0x8057306 <vTaskGetInfo+0x2a> @ imm = #0x4
 8057300: 9805         	ldr	r0, [sp, #0x14]
 8057302: 9000         	str	r0, [sp]
 8057304: e7ff         	b	0x8057306 <vTaskGetInfo+0x2a> @ imm = #-0x2
 8057306: 9800         	ldr	r0, [sp]
 8057308: 9001         	str	r0, [sp, #0x4]
;         pxTaskStatus->xHandle = pxTCB;
 805730a: 9801         	ldr	r0, [sp, #0x4]
 805730c: 9904         	ldr	r1, [sp, #0x10]
 805730e: 6008         	str	r0, [r1]
;         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8057310: 9801         	ldr	r0, [sp, #0x4]
 8057312: 30b0         	adds	r0, #0xb0
 8057314: 9904         	ldr	r1, [sp, #0x10]
 8057316: 6048         	str	r0, [r1, #0x4]
;         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8057318: 9801         	ldr	r0, [sp, #0x4]
 805731a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805731e: 9904         	ldr	r1, [sp, #0x10]
 8057320: 6108         	str	r0, [r1, #0x10]
;         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8057322: 9801         	ldr	r0, [sp, #0x4]
 8057324: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8057328: 9904         	ldr	r1, [sp, #0x10]
 805732a: 61c8         	str	r0, [r1, #0x1c]
;         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 805732c: 9801         	ldr	r0, [sp, #0x4]
 805732e: f8d0 00c0    	ldr.w	r0, [r0, #0xc0]
 8057332: 9904         	ldr	r1, [sp, #0x10]
 8057334: 6088         	str	r0, [r1, #0x8]
;             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8057336: 9801         	ldr	r0, [sp, #0x4]
 8057338: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 805733c: 9904         	ldr	r1, [sp, #0x10]
 805733e: 6148         	str	r0, [r1, #0x14]
;             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8057340: 9904         	ldr	r1, [sp, #0x10]
 8057342: 2000         	movs	r0, #0x0
 8057344: 6188         	str	r0, [r1, #0x18]
;         if( eState != eInvalid )
 8057346: f817 0c0d    	ldrb	r0, [r7, #-13]
 805734a: 2805         	cmp	r0, #0x5
 805734c: d038         	beq	0x80573c0 <vTaskGetInfo+0xe4> @ imm = #0x70
 805734e: e7ff         	b	0x8057350 <vTaskGetInfo+0x74> @ imm = #-0x2
;             if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8057350: 9801         	ldr	r0, [sp, #0x4]
 8057352: f240 1100    	movw	r1, #0x100
 8057356: f2c2 0100    	movt	r1, #0x2000
 805735a: 6809         	ldr	r1, [r1]
 805735c: 4288         	cmp	r0, r1
 805735e: d104         	bne	0x805736a <vTaskGetInfo+0x8e> @ imm = #0x8
 8057360: e7ff         	b	0x8057362 <vTaskGetInfo+0x86> @ imm = #-0x2
;                 pxTaskStatus->eCurrentState = eRunning;
 8057362: 9904         	ldr	r1, [sp, #0x10]
 8057364: 2000         	movs	r0, #0x0
 8057366: 7308         	strb	r0, [r1, #0xc]
;             }
 8057368: e029         	b	0x80573be <vTaskGetInfo+0xe2> @ imm = #0x52
;                 pxTaskStatus->eCurrentState = eState;
 805736a: f817 0c0d    	ldrb	r0, [r7, #-13]
 805736e: 9904         	ldr	r1, [sp, #0x10]
 8057370: 7308         	strb	r0, [r1, #0xc]
;                     if( eState == eSuspended )
 8057372: f817 0c0d    	ldrb	r0, [r7, #-13]
 8057376: 2803         	cmp	r0, #0x3
 8057378: d10e         	bne	0x8057398 <vTaskGetInfo+0xbc> @ imm = #0x1c
 805737a: e7ff         	b	0x805737c <vTaskGetInfo+0xa0> @ imm = #-0x2
;                         vTaskSuspendAll();
 805737c: 481d         	ldr	r0, [pc, #0x74]         @ 0x80573f4 <vTaskGetInfo+0x118>
 805737e: 4780         	blx	r0
;                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8057380: 9801         	ldr	r0, [sp, #0x4]
 8057382: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057386: b120         	cbz	r0, 0x8057392 <vTaskGetInfo+0xb6> @ imm = #0x8
 8057388: e7ff         	b	0x805738a <vTaskGetInfo+0xae> @ imm = #-0x2
;                                 pxTaskStatus->eCurrentState = eBlocked;
 805738a: 9904         	ldr	r1, [sp, #0x10]
 805738c: 2002         	movs	r0, #0x2
 805738e: 7308         	strb	r0, [r1, #0xc]
;                             }
 8057390: e7ff         	b	0x8057392 <vTaskGetInfo+0xb6> @ imm = #-0x2
;                         ( void ) xTaskResumeAll();
 8057392: 4819         	ldr	r0, [pc, #0x64]         @ 0x80573f8 <vTaskGetInfo+0x11c>
 8057394: 4780         	blx	r0
;                     }
 8057396: e7ff         	b	0x8057398 <vTaskGetInfo+0xbc> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 8057398: 4818         	ldr	r0, [pc, #0x60]         @ 0x80573fc <vTaskGetInfo+0x120>
 805739a: 4780         	blx	r0
;                     if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 805739c: 9801         	ldr	r0, [sp, #0x4]
 805739e: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80573a2: f240 1138    	movw	r1, #0x138
 80573a6: f2c2 0100    	movt	r1, #0x2000
 80573aa: 4288         	cmp	r0, r1
 80573ac: d104         	bne	0x80573b8 <vTaskGetInfo+0xdc> @ imm = #0x8
 80573ae: e7ff         	b	0x80573b0 <vTaskGetInfo+0xd4> @ imm = #-0x2
;                         pxTaskStatus->eCurrentState = eReady;
 80573b0: 9904         	ldr	r1, [sp, #0x10]
 80573b2: 2001         	movs	r0, #0x1
 80573b4: 7308         	strb	r0, [r1, #0xc]
;                     }
 80573b6: e7ff         	b	0x80573b8 <vTaskGetInfo+0xdc> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 80573b8: 4811         	ldr	r0, [pc, #0x44]         @ 0x8057400 <vTaskGetInfo+0x124>
 80573ba: 4780         	blx	r0
 80573bc: e7ff         	b	0x80573be <vTaskGetInfo+0xe2> @ imm = #-0x2
;         }
 80573be: e005         	b	0x80573cc <vTaskGetInfo+0xf0> @ imm = #0xa
;             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80573c0: 9801         	ldr	r0, [sp, #0x4]
 80573c2: 490b         	ldr	r1, [pc, #0x2c]         @ 0x80573f0 <vTaskGetInfo+0x114>
 80573c4: 4788         	blx	r1
 80573c6: 9904         	ldr	r1, [sp, #0x10]
 80573c8: 7308         	strb	r0, [r1, #0xc]
 80573ca: e7ff         	b	0x80573cc <vTaskGetInfo+0xf0> @ imm = #-0x2
;         if( xGetFreeStackSpace != pdFALSE )
 80573cc: 9803         	ldr	r0, [sp, #0xc]
 80573ce: b140         	cbz	r0, 0x80573e2 <vTaskGetInfo+0x106> @ imm = #0x10
 80573d0: e7ff         	b	0x80573d2 <vTaskGetInfo+0xf6> @ imm = #-0x2
;                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80573d2: 9801         	ldr	r0, [sp, #0x4]
 80573d4: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 80573d8: 490a         	ldr	r1, [pc, #0x28]         @ 0x8057404 <vTaskGetInfo+0x128>
 80573da: 4788         	blx	r1
 80573dc: 9904         	ldr	r1, [sp, #0x10]
 80573de: 8408         	strh	r0, [r1, #0x20]
;         }
 80573e0: e003         	b	0x80573ea <vTaskGetInfo+0x10e> @ imm = #0x6
;             pxTaskStatus->usStackHighWaterMark = 0;
 80573e2: 9904         	ldr	r1, [sp, #0x10]
 80573e4: 2000         	movs	r0, #0x0
 80573e6: 8408         	strh	r0, [r1, #0x20]
 80573e8: e7ff         	b	0x80573ea <vTaskGetInfo+0x10e> @ imm = #-0x2
;     }
 80573ea: b006         	add	sp, #0x18
 80573ec: bd80         	pop	{r7, pc}
 80573ee: bf00         	nop

080573f0 <$d.79>:
 80573f0: 71 5c 05 08  	.word	0x08055c71
 80573f4: 59 58 05 08  	.word	0x08055859
 80573f8: 7d 59 05 08  	.word	0x0805597d
 80573fc: 19 c4 05 08  	.word	0x0805c419
 8057400: 3d c4 05 08  	.word	0x0805c43d
 8057404: 09 74 05 08  	.word	0x08057409

08057408 <prvTaskCheckFreeStackSpace>:
;     {
 8057408: b082         	sub	sp, #0x8
 805740a: 9001         	str	r0, [sp, #0x4]
 805740c: 2000         	movs	r0, #0x0
;         uint32_t ulCount = 0U;
 805740e: 9000         	str	r0, [sp]
;         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8057410: e7ff         	b	0x8057412 <prvTaskCheckFreeStackSpace+0xa> @ imm = #-0x2
 8057412: 9801         	ldr	r0, [sp, #0x4]
 8057414: 7800         	ldrb	r0, [r0]
 8057416: 28a5         	cmp	r0, #0xa5
 8057418: d107         	bne	0x805742a <prvTaskCheckFreeStackSpace+0x22> @ imm = #0xe
 805741a: e7ff         	b	0x805741c <prvTaskCheckFreeStackSpace+0x14> @ imm = #-0x2
;             pucStackByte -= portSTACK_GROWTH;
 805741c: 9801         	ldr	r0, [sp, #0x4]
 805741e: 3001         	adds	r0, #0x1
 8057420: 9001         	str	r0, [sp, #0x4]
;             ulCount++;
 8057422: 9800         	ldr	r0, [sp]
 8057424: 3001         	adds	r0, #0x1
 8057426: 9000         	str	r0, [sp]
;         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8057428: e7f3         	b	0x8057412 <prvTaskCheckFreeStackSpace+0xa> @ imm = #-0x1a
;         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 805742a: 9800         	ldr	r0, [sp]
 805742c: 0880         	lsrs	r0, r0, #0x2
 805742e: 9000         	str	r0, [sp]
;         return ( configSTACK_DEPTH_TYPE ) ulCount;
 8057430: f8bd 0000    	ldrh.w	r0, [sp]
 8057434: b002         	add	sp, #0x8
 8057436: 4770         	bx	lr

08057438 <uxTaskGetStackHighWaterMark>:
;     {
 8057438: b580         	push	{r7, lr}
 805743a: 466f         	mov	r7, sp
 805743c: b086         	sub	sp, #0x18
 805743e: 9005         	str	r0, [sp, #0x14]
;         pxTCB = prvGetTCBFromHandle( xTask );
 8057440: 9805         	ldr	r0, [sp, #0x14]
 8057442: b938         	cbnz	r0, 0x8057454 <uxTaskGetStackHighWaterMark+0x1c> @ imm = #0xe
 8057444: e7ff         	b	0x8057446 <uxTaskGetStackHighWaterMark+0xe> @ imm = #-0x2
 8057446: f240 1000    	movw	r0, #0x100
 805744a: f2c2 0000    	movt	r0, #0x2000
 805744e: 6800         	ldr	r0, [r0]
 8057450: 9001         	str	r0, [sp, #0x4]
 8057452: e002         	b	0x805745a <uxTaskGetStackHighWaterMark+0x22> @ imm = #0x4
 8057454: 9805         	ldr	r0, [sp, #0x14]
 8057456: 9001         	str	r0, [sp, #0x4]
 8057458: e7ff         	b	0x805745a <uxTaskGetStackHighWaterMark+0x22> @ imm = #-0x2
 805745a: 9801         	ldr	r0, [sp, #0x4]
 805745c: 9004         	str	r0, [sp, #0x10]
;             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 805745e: 9804         	ldr	r0, [sp, #0x10]
 8057460: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8057464: 9003         	str	r0, [sp, #0xc]
;         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8057466: 9803         	ldr	r0, [sp, #0xc]
 8057468: 4902         	ldr	r1, [pc, #0x8]          @ 0x8057474 <uxTaskGetStackHighWaterMark+0x3c>
 805746a: 4788         	blx	r1
 805746c: 9002         	str	r0, [sp, #0x8]
;         return uxReturn;
 805746e: 9802         	ldr	r0, [sp, #0x8]
 8057470: b006         	add	sp, #0x18
 8057472: bd80         	pop	{r7, pc}

08057474 <$d.81>:
 8057474: 09 74 05 08  	.word	0x08057409

08057478 <xTaskGetCurrentTaskHandle>:
;         {
 8057478: b081         	sub	sp, #0x4
;             xReturn = pxCurrentTCB;
 805747a: f240 1000    	movw	r0, #0x100
 805747e: f2c2 0000    	movt	r0, #0x2000
 8057482: 6800         	ldr	r0, [r0]
 8057484: 9000         	str	r0, [sp]
;             return xReturn;
 8057486: 9800         	ldr	r0, [sp]
 8057488: b001         	add	sp, #0x4
 805748a: 4770         	bx	lr

0805748c <xTaskGetSchedulerState>:
;     {
 805748c: b081         	sub	sp, #0x4
;         if( xSchedulerRunning == pdFALSE )
 805748e: f240 1024    	movw	r0, #0x124
 8057492: f2c2 0000    	movt	r0, #0x2000
 8057496: 6800         	ldr	r0, [r0]
 8057498: b918         	cbnz	r0, 0x80574a2 <xTaskGetSchedulerState+0x16> @ imm = #0x6
 805749a: e7ff         	b	0x805749c <xTaskGetSchedulerState+0x10> @ imm = #-0x2
 805749c: 2001         	movs	r0, #0x1
;             xReturn = taskSCHEDULER_NOT_STARTED;
 805749e: 9000         	str	r0, [sp]
;         }
 80574a0: e00d         	b	0x80574be <xTaskGetSchedulerState+0x32> @ imm = #0x1a
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80574a2: f240 1028    	movw	r0, #0x128
 80574a6: f2c2 0000    	movt	r0, #0x2000
 80574aa: 6800         	ldr	r0, [r0]
 80574ac: b918         	cbnz	r0, 0x80574b6 <xTaskGetSchedulerState+0x2a> @ imm = #0x6
 80574ae: e7ff         	b	0x80574b0 <xTaskGetSchedulerState+0x24> @ imm = #-0x2
 80574b0: 2002         	movs	r0, #0x2
;                     xReturn = taskSCHEDULER_RUNNING;
 80574b2: 9000         	str	r0, [sp]
;                 }
 80574b4: e002         	b	0x80574bc <xTaskGetSchedulerState+0x30> @ imm = #0x4
 80574b6: 2000         	movs	r0, #0x0
;                     xReturn = taskSCHEDULER_SUSPENDED;
 80574b8: 9000         	str	r0, [sp]
 80574ba: e7ff         	b	0x80574bc <xTaskGetSchedulerState+0x30> @ imm = #-0x2
 80574bc: e7ff         	b	0x80574be <xTaskGetSchedulerState+0x32> @ imm = #-0x2
;         return xReturn;
 80574be: 9800         	ldr	r0, [sp]
 80574c0: b001         	add	sp, #0x4
 80574c2: 4770         	bx	lr

080574c4 <xTaskPriorityInherit>:
;     {
 80574c4: b580         	push	{r7, lr}
 80574c6: 466f         	mov	r7, sp
 80574c8: b084         	sub	sp, #0x10
 80574ca: 9003         	str	r0, [sp, #0xc]
;         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80574cc: 9803         	ldr	r0, [sp, #0xc]
 80574ce: 9002         	str	r0, [sp, #0x8]
 80574d0: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 80574d2: 9001         	str	r0, [sp, #0x4]
;         if( pxMutexHolder != NULL )
 80574d4: 9803         	ldr	r0, [sp, #0xc]
 80574d6: 2800         	cmp	r0, #0x0
 80574d8: f000 80b4    	beq.w	0x8057644 <xTaskPriorityInherit+0x180> @ imm = #0x168
 80574dc: e7ff         	b	0x80574de <xTaskPriorityInherit+0x1a> @ imm = #-0x2
;             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80574de: 9802         	ldr	r0, [sp, #0x8]
 80574e0: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80574e4: f240 1100    	movw	r1, #0x100
 80574e8: f2c2 0100    	movt	r1, #0x2000
 80574ec: 6809         	ldr	r1, [r1]
 80574ee: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80574f2: 4288         	cmp	r0, r1
 80574f4: f080 8093    	bhs.w	0x805761e <xTaskPriorityInherit+0x15a> @ imm = #0x126
 80574f8: e7ff         	b	0x80574fa <xTaskPriorityInherit+0x36> @ imm = #-0x2
;                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80574fa: 9802         	ldr	r0, [sp, #0x8]
 80574fc: f890 0097    	ldrb.w	r0, [r0, #0x97]
 8057500: 0600         	lsls	r0, r0, #0x18
 8057502: 2800         	cmp	r0, #0x0
 8057504: d40d         	bmi	0x8057522 <xTaskPriorityInherit+0x5e> @ imm = #0x1a
 8057506: e7ff         	b	0x8057508 <xTaskPriorityInherit+0x44> @ imm = #-0x2
;                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057508: f240 1000    	movw	r0, #0x100
 805750c: f2c2 0000    	movt	r0, #0x2000
 8057510: 6800         	ldr	r0, [r0]
 8057512: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057516: f1c0 0010    	rsb.w	r0, r0, #0x10
 805751a: 9902         	ldr	r1, [sp, #0x8]
 805751c: f8c1 0094    	str.w	r0, [r1, #0x94]
;                 }
 8057520: e000         	b	0x8057524 <xTaskPriorityInherit+0x60> @ imm = #0x0
 8057522: e7ff         	b	0x8057524 <xTaskPriorityInherit+0x60> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8057524: 9902         	ldr	r1, [sp, #0x8]
 8057526: f8d1 0090    	ldr.w	r0, [r1, #0x90]
 805752a: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 805752e: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8057532: f240 1160    	movw	r1, #0x160
 8057536: f2c2 0100    	movt	r1, #0x2000
 805753a: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805753e: 4288         	cmp	r0, r1
 8057540: d15f         	bne	0x8057602 <xTaskPriorityInherit+0x13e> @ imm = #0xbe
 8057542: e7ff         	b	0x8057544 <xTaskPriorityInherit+0x80> @ imm = #-0x2
;                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8057544: 9802         	ldr	r0, [sp, #0x8]
 8057546: 3080         	adds	r0, #0x80
 8057548: 4940         	ldr	r1, [pc, #0x100]        @ 0x805764c <xTaskPriorityInherit+0x188>
 805754a: 4788         	blx	r1
 805754c: b908         	cbnz	r0, 0x8057552 <xTaskPriorityInherit+0x8e> @ imm = #0x2
 805754e: e7ff         	b	0x8057550 <xTaskPriorityInherit+0x8c> @ imm = #-0x2
;                     }
 8057550: e000         	b	0x8057554 <xTaskPriorityInherit+0x90> @ imm = #0x0
 8057552: e7ff         	b	0x8057554 <xTaskPriorityInherit+0x90> @ imm = #-0x2
;                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8057554: f240 1000    	movw	r0, #0x100
 8057558: f2c2 0000    	movt	r0, #0x2000
 805755c: 6800         	ldr	r0, [r0]
 805755e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057562: 9902         	ldr	r1, [sp, #0x8]
 8057564: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     prvAddTaskToReadyList( pxMutexHolderTCB );
 8057568: e7ff         	b	0x805756a <xTaskPriorityInherit+0xa6> @ imm = #-0x2
 805756a: e7ff         	b	0x805756c <xTaskPriorityInherit+0xa8> @ imm = #-0x2
 805756c: 9802         	ldr	r0, [sp, #0x8]
 805756e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057572: f240 21a0    	movw	r1, #0x2a0
 8057576: f2c2 0100    	movt	r1, #0x2000
 805757a: 6809         	ldr	r1, [r1]
 805757c: 4288         	cmp	r0, r1
 805757e: d909         	bls	0x8057594 <xTaskPriorityInherit+0xd0> @ imm = #0x12
 8057580: e7ff         	b	0x8057582 <xTaskPriorityInherit+0xbe> @ imm = #-0x2
 8057582: 9802         	ldr	r0, [sp, #0x8]
 8057584: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057588: f240 21a0    	movw	r1, #0x2a0
 805758c: f2c2 0100    	movt	r1, #0x2000
 8057590: 6008         	str	r0, [r1]
 8057592: e7ff         	b	0x8057594 <xTaskPriorityInherit+0xd0> @ imm = #-0x2
 8057594: e7ff         	b	0x8057596 <xTaskPriorityInherit+0xd2> @ imm = #-0x2
 8057596: e7ff         	b	0x8057598 <xTaskPriorityInherit+0xd4> @ imm = #-0x2
 8057598: 9802         	ldr	r0, [sp, #0x8]
 805759a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805759e: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80575a2: f240 1160    	movw	r1, #0x160
 80575a6: f2c2 0100    	movt	r1, #0x2000
 80575aa: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80575ae: 6840         	ldr	r0, [r0, #0x4]
 80575b0: 9000         	str	r0, [sp]
 80575b2: 9800         	ldr	r0, [sp]
 80575b4: 9a02         	ldr	r2, [sp, #0x8]
 80575b6: f8c2 0084    	str.w	r0, [r2, #0x84]
 80575ba: 9800         	ldr	r0, [sp]
 80575bc: 6880         	ldr	r0, [r0, #0x8]
 80575be: 9a02         	ldr	r2, [sp, #0x8]
 80575c0: f8c2 0088    	str.w	r0, [r2, #0x88]
 80575c4: 9802         	ldr	r0, [sp, #0x8]
 80575c6: 3080         	adds	r0, #0x80
 80575c8: 9a00         	ldr	r2, [sp]
 80575ca: 6892         	ldr	r2, [r2, #0x8]
 80575cc: 6050         	str	r0, [r2, #0x4]
 80575ce: 9802         	ldr	r0, [sp, #0x8]
 80575d0: 3080         	adds	r0, #0x80
 80575d2: 9a00         	ldr	r2, [sp]
 80575d4: 6090         	str	r0, [r2, #0x8]
 80575d6: 9a02         	ldr	r2, [sp, #0x8]
 80575d8: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80575dc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80575e0: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80575e4: f8c2 0090    	str.w	r0, [r2, #0x90]
 80575e8: 9802         	ldr	r0, [sp, #0x8]
 80575ea: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80575ee: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80575f2: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80575f6: 3001         	adds	r0, #0x1
 80575f8: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80575fc: e7ff         	b	0x80575fe <xTaskPriorityInherit+0x13a> @ imm = #-0x2
 80575fe: e7ff         	b	0x8057600 <xTaskPriorityInherit+0x13c> @ imm = #-0x2
;                 }
 8057600: e00a         	b	0x8057618 <xTaskPriorityInherit+0x154> @ imm = #0x14
;                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8057602: f240 1000    	movw	r0, #0x100
 8057606: f2c2 0000    	movt	r0, #0x2000
 805760a: 6800         	ldr	r0, [r0]
 805760c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057610: 9902         	ldr	r1, [sp, #0x8]
 8057612: f8c1 00a8    	str.w	r0, [r1, #0xa8]
 8057616: e7ff         	b	0x8057618 <xTaskPriorityInherit+0x154> @ imm = #-0x2
 8057618: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 805761a: 9001         	str	r0, [sp, #0x4]
;             }
 805761c: e011         	b	0x8057642 <xTaskPriorityInherit+0x17e> @ imm = #0x22
;                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 805761e: 9802         	ldr	r0, [sp, #0x8]
 8057620: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8057624: f240 1100    	movw	r1, #0x100
 8057628: f2c2 0100    	movt	r1, #0x2000
 805762c: 6809         	ldr	r1, [r1]
 805762e: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057632: 4288         	cmp	r0, r1
 8057634: d203         	bhs	0x805763e <xTaskPriorityInherit+0x17a> @ imm = #0x6
 8057636: e7ff         	b	0x8057638 <xTaskPriorityInherit+0x174> @ imm = #-0x2
 8057638: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 805763a: 9001         	str	r0, [sp, #0x4]
;                 }
 805763c: e000         	b	0x8057640 <xTaskPriorityInherit+0x17c> @ imm = #0x0
 805763e: e7ff         	b	0x8057640 <xTaskPriorityInherit+0x17c> @ imm = #-0x2
 8057640: e7ff         	b	0x8057642 <xTaskPriorityInherit+0x17e> @ imm = #-0x2
;         }
 8057642: e000         	b	0x8057646 <xTaskPriorityInherit+0x182> @ imm = #0x0
 8057644: e7ff         	b	0x8057646 <xTaskPriorityInherit+0x182> @ imm = #-0x2
;         return xReturn;
 8057646: 9801         	ldr	r0, [sp, #0x4]
 8057648: b004         	add	sp, #0x10
 805764a: bd80         	pop	{r7, pc}

0805764c <$d.83>:
 805764c: 33 9f 05 08  	.word	0x08059f33

08057650 <xTaskPriorityDisinherit>:
;     {
 8057650: b580         	push	{r7, lr}
 8057652: 466f         	mov	r7, sp
 8057654: b084         	sub	sp, #0x10
 8057656: 9003         	str	r0, [sp, #0xc]
;         TCB_t * const pxTCB = pxMutexHolder;
 8057658: 9803         	ldr	r0, [sp, #0xc]
 805765a: 9002         	str	r0, [sp, #0x8]
 805765c: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 805765e: 9001         	str	r0, [sp, #0x4]
;         if( pxMutexHolder != NULL )
 8057660: 9803         	ldr	r0, [sp, #0xc]
 8057662: 2800         	cmp	r0, #0x0
 8057664: f000 8092    	beq.w	0x805778c <xTaskPriorityDisinherit+0x13c> @ imm = #0x124
 8057668: e7ff         	b	0x805766a <xTaskPriorityDisinherit+0x1a> @ imm = #-0x2
;             configASSERT( pxTCB == pxCurrentTCB );
 805766a: 9802         	ldr	r0, [sp, #0x8]
 805766c: f240 1100    	movw	r1, #0x100
 8057670: f2c2 0100    	movt	r1, #0x2000
 8057674: 6809         	ldr	r1, [r1]
 8057676: 4288         	cmp	r0, r1
 8057678: d004         	beq	0x8057684 <xTaskPriorityDisinherit+0x34> @ imm = #0x8
 805767a: e7ff         	b	0x805767c <xTaskPriorityDisinherit+0x2c> @ imm = #-0x2
 805767c: 4847         	ldr	r0, [pc, #0x11c]        @ 0x805779c <xTaskPriorityDisinherit+0x14c>
 805767e: 4780         	blx	r0
 8057680: e7ff         	b	0x8057682 <xTaskPriorityDisinherit+0x32> @ imm = #-0x2
 8057682: e7fe         	b	0x8057682 <xTaskPriorityDisinherit+0x32> @ imm = #-0x4
;             configASSERT( pxTCB->uxMutexesHeld );
 8057684: 9802         	ldr	r0, [sp, #0x8]
 8057686: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 805768a: b920         	cbnz	r0, 0x8057696 <xTaskPriorityDisinherit+0x46> @ imm = #0x8
 805768c: e7ff         	b	0x805768e <xTaskPriorityDisinherit+0x3e> @ imm = #-0x2
 805768e: 4842         	ldr	r0, [pc, #0x108]        @ 0x8057798 <xTaskPriorityDisinherit+0x148>
 8057690: 4780         	blx	r0
 8057692: e7ff         	b	0x8057694 <xTaskPriorityDisinherit+0x44> @ imm = #-0x2
 8057694: e7fe         	b	0x8057694 <xTaskPriorityDisinherit+0x44> @ imm = #-0x4
;             ( pxTCB->uxMutexesHeld )--;
 8057696: 9902         	ldr	r1, [sp, #0x8]
 8057698: f8d1 00cc    	ldr.w	r0, [r1, #0xcc]
 805769c: 3801         	subs	r0, #0x1
 805769e: f8c1 00cc    	str.w	r0, [r1, #0xcc]
;             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80576a2: 9902         	ldr	r1, [sp, #0x8]
 80576a4: f8d1 00a8    	ldr.w	r0, [r1, #0xa8]
 80576a8: f8d1 10c8    	ldr.w	r1, [r1, #0xc8]
 80576ac: 4288         	cmp	r0, r1
 80576ae: d06b         	beq	0x8057788 <xTaskPriorityDisinherit+0x138> @ imm = #0xd6
 80576b0: e7ff         	b	0x80576b2 <xTaskPriorityDisinherit+0x62> @ imm = #-0x2
;                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80576b2: 9802         	ldr	r0, [sp, #0x8]
 80576b4: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 80576b8: 2800         	cmp	r0, #0x0
 80576ba: d163         	bne	0x8057784 <xTaskPriorityDisinherit+0x134> @ imm = #0xc6
 80576bc: e7ff         	b	0x80576be <xTaskPriorityDisinherit+0x6e> @ imm = #-0x2
;                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80576be: 9802         	ldr	r0, [sp, #0x8]
 80576c0: 3080         	adds	r0, #0x80
 80576c2: 4934         	ldr	r1, [pc, #0xd0]         @ 0x8057794 <xTaskPriorityDisinherit+0x144>
 80576c4: 4788         	blx	r1
 80576c6: b908         	cbnz	r0, 0x80576cc <xTaskPriorityDisinherit+0x7c> @ imm = #0x2
 80576c8: e7ff         	b	0x80576ca <xTaskPriorityDisinherit+0x7a> @ imm = #-0x2
;                     }
 80576ca: e000         	b	0x80576ce <xTaskPriorityDisinherit+0x7e> @ imm = #0x0
 80576cc: e7ff         	b	0x80576ce <xTaskPriorityDisinherit+0x7e> @ imm = #-0x2
;                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 80576ce: 9902         	ldr	r1, [sp, #0x8]
 80576d0: f8d1 00c8    	ldr.w	r0, [r1, #0xc8]
 80576d4: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80576d8: 9902         	ldr	r1, [sp, #0x8]
 80576da: f8d1 00a8    	ldr.w	r0, [r1, #0xa8]
 80576de: f1c0 0010    	rsb.w	r0, r0, #0x10
 80576e2: f8c1 0094    	str.w	r0, [r1, #0x94]
;                     prvAddTaskToReadyList( pxTCB );
 80576e6: e7ff         	b	0x80576e8 <xTaskPriorityDisinherit+0x98> @ imm = #-0x2
 80576e8: e7ff         	b	0x80576ea <xTaskPriorityDisinherit+0x9a> @ imm = #-0x2
 80576ea: 9802         	ldr	r0, [sp, #0x8]
 80576ec: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80576f0: f240 21a0    	movw	r1, #0x2a0
 80576f4: f2c2 0100    	movt	r1, #0x2000
 80576f8: 6809         	ldr	r1, [r1]
 80576fa: 4288         	cmp	r0, r1
 80576fc: d909         	bls	0x8057712 <xTaskPriorityDisinherit+0xc2> @ imm = #0x12
 80576fe: e7ff         	b	0x8057700 <xTaskPriorityDisinherit+0xb0> @ imm = #-0x2
 8057700: 9802         	ldr	r0, [sp, #0x8]
 8057702: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057706: f240 21a0    	movw	r1, #0x2a0
 805770a: f2c2 0100    	movt	r1, #0x2000
 805770e: 6008         	str	r0, [r1]
 8057710: e7ff         	b	0x8057712 <xTaskPriorityDisinherit+0xc2> @ imm = #-0x2
 8057712: e7ff         	b	0x8057714 <xTaskPriorityDisinherit+0xc4> @ imm = #-0x2
 8057714: e7ff         	b	0x8057716 <xTaskPriorityDisinherit+0xc6> @ imm = #-0x2
 8057716: 9802         	ldr	r0, [sp, #0x8]
 8057718: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805771c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057720: f240 1160    	movw	r1, #0x160
 8057724: f2c2 0100    	movt	r1, #0x2000
 8057728: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805772c: 6840         	ldr	r0, [r0, #0x4]
 805772e: 9000         	str	r0, [sp]
 8057730: 9800         	ldr	r0, [sp]
 8057732: 9a02         	ldr	r2, [sp, #0x8]
 8057734: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057738: 9800         	ldr	r0, [sp]
 805773a: 6880         	ldr	r0, [r0, #0x8]
 805773c: 9a02         	ldr	r2, [sp, #0x8]
 805773e: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057742: 9802         	ldr	r0, [sp, #0x8]
 8057744: 3080         	adds	r0, #0x80
 8057746: 9a00         	ldr	r2, [sp]
 8057748: 6892         	ldr	r2, [r2, #0x8]
 805774a: 6050         	str	r0, [r2, #0x4]
 805774c: 9802         	ldr	r0, [sp, #0x8]
 805774e: 3080         	adds	r0, #0x80
 8057750: 9a00         	ldr	r2, [sp]
 8057752: 6090         	str	r0, [r2, #0x8]
 8057754: 9a02         	ldr	r2, [sp, #0x8]
 8057756: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 805775a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805775e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057762: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057766: 9802         	ldr	r0, [sp, #0x8]
 8057768: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805776c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057770: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057774: 3001         	adds	r0, #0x1
 8057776: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805777a: e7ff         	b	0x805777c <xTaskPriorityDisinherit+0x12c> @ imm = #-0x2
 805777c: e7ff         	b	0x805777e <xTaskPriorityDisinherit+0x12e> @ imm = #-0x2
 805777e: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 8057780: 9001         	str	r0, [sp, #0x4]
;                 }
 8057782: e000         	b	0x8057786 <xTaskPriorityDisinherit+0x136> @ imm = #0x0
 8057784: e7ff         	b	0x8057786 <xTaskPriorityDisinherit+0x136> @ imm = #-0x2
;             }
 8057786: e000         	b	0x805778a <xTaskPriorityDisinherit+0x13a> @ imm = #0x0
 8057788: e7ff         	b	0x805778a <xTaskPriorityDisinherit+0x13a> @ imm = #-0x2
;         }
 805778a: e000         	b	0x805778e <xTaskPriorityDisinherit+0x13e> @ imm = #0x0
 805778c: e7ff         	b	0x805778e <xTaskPriorityDisinherit+0x13e> @ imm = #-0x2
;         return xReturn;
 805778e: 9801         	ldr	r0, [sp, #0x4]
 8057790: b004         	add	sp, #0x10
 8057792: bd80         	pop	{r7, pc}

08057794 <$d.85>:
 8057794: 33 9f 05 08  	.word	0x08059f33
 8057798: 55 cd 05 08  	.word	0x0805cd55
 805779c: 55 cd 05 08  	.word	0x0805cd55

080577a0 <vTaskPriorityDisinheritAfterTimeout>:
;     {
 80577a0: b580         	push	{r7, lr}
 80577a2: 466f         	mov	r7, sp
 80577a4: b088         	sub	sp, #0x20
 80577a6: 9007         	str	r0, [sp, #0x1c]
 80577a8: 9106         	str	r1, [sp, #0x18]
;         TCB_t * const pxTCB = pxMutexHolder;
 80577aa: 9807         	ldr	r0, [sp, #0x1c]
 80577ac: 9005         	str	r0, [sp, #0x14]
 80577ae: 2001         	movs	r0, #0x1
;         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80577b0: 9002         	str	r0, [sp, #0x8]
;         if( pxMutexHolder != NULL )
 80577b2: 9807         	ldr	r0, [sp, #0x1c]
 80577b4: 2800         	cmp	r0, #0x0
 80577b6: f000 80b6    	beq.w	0x8057926 <vTaskPriorityDisinheritAfterTimeout+0x186> @ imm = #0x16c
 80577ba: e7ff         	b	0x80577bc <vTaskPriorityDisinheritAfterTimeout+0x1c> @ imm = #-0x2
;             configASSERT( pxTCB->uxMutexesHeld );
 80577bc: 9805         	ldr	r0, [sp, #0x14]
 80577be: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 80577c2: b920         	cbnz	r0, 0x80577ce <vTaskPriorityDisinheritAfterTimeout+0x2e> @ imm = #0x8
 80577c4: e7ff         	b	0x80577c6 <vTaskPriorityDisinheritAfterTimeout+0x26> @ imm = #-0x2
 80577c6: 485b         	ldr	r0, [pc, #0x16c]        @ 0x8057934 <vTaskPriorityDisinheritAfterTimeout+0x194>
 80577c8: 4780         	blx	r0
 80577ca: e7ff         	b	0x80577cc <vTaskPriorityDisinheritAfterTimeout+0x2c> @ imm = #-0x2
 80577cc: e7fe         	b	0x80577cc <vTaskPriorityDisinheritAfterTimeout+0x2c> @ imm = #-0x4
;             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80577ce: 9805         	ldr	r0, [sp, #0x14]
 80577d0: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 80577d4: 9906         	ldr	r1, [sp, #0x18]
 80577d6: 4288         	cmp	r0, r1
 80577d8: d203         	bhs	0x80577e2 <vTaskPriorityDisinheritAfterTimeout+0x42> @ imm = #0x6
 80577da: e7ff         	b	0x80577dc <vTaskPriorityDisinheritAfterTimeout+0x3c> @ imm = #-0x2
;                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 80577dc: 9806         	ldr	r0, [sp, #0x18]
 80577de: 9003         	str	r0, [sp, #0xc]
;             }
 80577e0: e004         	b	0x80577ec <vTaskPriorityDisinheritAfterTimeout+0x4c> @ imm = #0x8
;                 uxPriorityToUse = pxTCB->uxBasePriority;
 80577e2: 9805         	ldr	r0, [sp, #0x14]
 80577e4: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 80577e8: 9003         	str	r0, [sp, #0xc]
 80577ea: e7ff         	b	0x80577ec <vTaskPriorityDisinheritAfterTimeout+0x4c> @ imm = #-0x2
;             if( pxTCB->uxPriority != uxPriorityToUse )
 80577ec: 9805         	ldr	r0, [sp, #0x14]
 80577ee: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80577f2: 9903         	ldr	r1, [sp, #0xc]
 80577f4: 4288         	cmp	r0, r1
 80577f6: f000 8094    	beq.w	0x8057922 <vTaskPriorityDisinheritAfterTimeout+0x182> @ imm = #0x128
 80577fa: e7ff         	b	0x80577fc <vTaskPriorityDisinheritAfterTimeout+0x5c> @ imm = #-0x2
;                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80577fc: 9805         	ldr	r0, [sp, #0x14]
 80577fe: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8057802: 2801         	cmp	r0, #0x1
 8057804: f040 808b    	bne.w	0x805791e <vTaskPriorityDisinheritAfterTimeout+0x17e> @ imm = #0x116
 8057808: e7ff         	b	0x805780a <vTaskPriorityDisinheritAfterTimeout+0x6a> @ imm = #-0x2
;                     configASSERT( pxTCB != pxCurrentTCB );
 805780a: 9805         	ldr	r0, [sp, #0x14]
 805780c: f240 1100    	movw	r1, #0x100
 8057810: f2c2 0100    	movt	r1, #0x2000
 8057814: 6809         	ldr	r1, [r1]
 8057816: 4288         	cmp	r0, r1
 8057818: d104         	bne	0x8057824 <vTaskPriorityDisinheritAfterTimeout+0x84> @ imm = #0x8
 805781a: e7ff         	b	0x805781c <vTaskPriorityDisinheritAfterTimeout+0x7c> @ imm = #-0x2
 805781c: 4844         	ldr	r0, [pc, #0x110]        @ 0x8057930 <vTaskPriorityDisinheritAfterTimeout+0x190>
 805781e: 4780         	blx	r0
 8057820: e7ff         	b	0x8057822 <vTaskPriorityDisinheritAfterTimeout+0x82> @ imm = #-0x2
 8057822: e7fe         	b	0x8057822 <vTaskPriorityDisinheritAfterTimeout+0x82> @ imm = #-0x4
;                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8057824: 9805         	ldr	r0, [sp, #0x14]
 8057826: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805782a: 9004         	str	r0, [sp, #0x10]
;                     pxTCB->uxPriority = uxPriorityToUse;
 805782c: 9803         	ldr	r0, [sp, #0xc]
 805782e: 9905         	ldr	r1, [sp, #0x14]
 8057830: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8057834: 9805         	ldr	r0, [sp, #0x14]
 8057836: f890 0097    	ldrb.w	r0, [r0, #0x97]
 805783a: 0600         	lsls	r0, r0, #0x18
 805783c: 2800         	cmp	r0, #0x0
 805783e: d407         	bmi	0x8057850 <vTaskPriorityDisinheritAfterTimeout+0xb0> @ imm = #0xe
 8057840: e7ff         	b	0x8057842 <vTaskPriorityDisinheritAfterTimeout+0xa2> @ imm = #-0x2
;                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057842: 9803         	ldr	r0, [sp, #0xc]
 8057844: f1c0 0010    	rsb.w	r0, r0, #0x10
 8057848: 9905         	ldr	r1, [sp, #0x14]
 805784a: f8c1 0094    	str.w	r0, [r1, #0x94]
;                     }
 805784e: e000         	b	0x8057852 <vTaskPriorityDisinheritAfterTimeout+0xb2> @ imm = #0x0
 8057850: e7ff         	b	0x8057852 <vTaskPriorityDisinheritAfterTimeout+0xb2> @ imm = #-0x2
;                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8057852: 9805         	ldr	r0, [sp, #0x14]
 8057854: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8057858: 9904         	ldr	r1, [sp, #0x10]
 805785a: eb01 0281    	add.w	r2, r1, r1, lsl #2
 805785e: f240 1160    	movw	r1, #0x160
 8057862: f2c2 0100    	movt	r1, #0x2000
 8057866: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805786a: 4288         	cmp	r0, r1
 805786c: d155         	bne	0x805791a <vTaskPriorityDisinheritAfterTimeout+0x17a> @ imm = #0xaa
 805786e: e7ff         	b	0x8057870 <vTaskPriorityDisinheritAfterTimeout+0xd0> @ imm = #-0x2
;                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8057870: 9805         	ldr	r0, [sp, #0x14]
 8057872: 3080         	adds	r0, #0x80
 8057874: 492d         	ldr	r1, [pc, #0xb4]         @ 0x805792c <vTaskPriorityDisinheritAfterTimeout+0x18c>
 8057876: 4788         	blx	r1
 8057878: b908         	cbnz	r0, 0x805787e <vTaskPriorityDisinheritAfterTimeout+0xde> @ imm = #0x2
 805787a: e7ff         	b	0x805787c <vTaskPriorityDisinheritAfterTimeout+0xdc> @ imm = #-0x2
;                         }
 805787c: e000         	b	0x8057880 <vTaskPriorityDisinheritAfterTimeout+0xe0> @ imm = #0x0
 805787e: e7ff         	b	0x8057880 <vTaskPriorityDisinheritAfterTimeout+0xe0> @ imm = #-0x2
;                         prvAddTaskToReadyList( pxTCB );
 8057880: e7ff         	b	0x8057882 <vTaskPriorityDisinheritAfterTimeout+0xe2> @ imm = #-0x2
 8057882: e7ff         	b	0x8057884 <vTaskPriorityDisinheritAfterTimeout+0xe4> @ imm = #-0x2
 8057884: 9805         	ldr	r0, [sp, #0x14]
 8057886: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805788a: f240 21a0    	movw	r1, #0x2a0
 805788e: f2c2 0100    	movt	r1, #0x2000
 8057892: 6809         	ldr	r1, [r1]
 8057894: 4288         	cmp	r0, r1
 8057896: d909         	bls	0x80578ac <vTaskPriorityDisinheritAfterTimeout+0x10c> @ imm = #0x12
 8057898: e7ff         	b	0x805789a <vTaskPriorityDisinheritAfterTimeout+0xfa> @ imm = #-0x2
 805789a: 9805         	ldr	r0, [sp, #0x14]
 805789c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80578a0: f240 21a0    	movw	r1, #0x2a0
 80578a4: f2c2 0100    	movt	r1, #0x2000
 80578a8: 6008         	str	r0, [r1]
 80578aa: e7ff         	b	0x80578ac <vTaskPriorityDisinheritAfterTimeout+0x10c> @ imm = #-0x2
 80578ac: e7ff         	b	0x80578ae <vTaskPriorityDisinheritAfterTimeout+0x10e> @ imm = #-0x2
 80578ae: e7ff         	b	0x80578b0 <vTaskPriorityDisinheritAfterTimeout+0x110> @ imm = #-0x2
 80578b0: 9805         	ldr	r0, [sp, #0x14]
 80578b2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80578b6: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80578ba: f240 1160    	movw	r1, #0x160
 80578be: f2c2 0100    	movt	r1, #0x2000
 80578c2: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80578c6: 6840         	ldr	r0, [r0, #0x4]
 80578c8: 9001         	str	r0, [sp, #0x4]
 80578ca: 9801         	ldr	r0, [sp, #0x4]
 80578cc: 9a05         	ldr	r2, [sp, #0x14]
 80578ce: f8c2 0084    	str.w	r0, [r2, #0x84]
 80578d2: 9801         	ldr	r0, [sp, #0x4]
 80578d4: 6880         	ldr	r0, [r0, #0x8]
 80578d6: 9a05         	ldr	r2, [sp, #0x14]
 80578d8: f8c2 0088    	str.w	r0, [r2, #0x88]
 80578dc: 9805         	ldr	r0, [sp, #0x14]
 80578de: 3080         	adds	r0, #0x80
 80578e0: 9a01         	ldr	r2, [sp, #0x4]
 80578e2: 6892         	ldr	r2, [r2, #0x8]
 80578e4: 6050         	str	r0, [r2, #0x4]
 80578e6: 9805         	ldr	r0, [sp, #0x14]
 80578e8: 3080         	adds	r0, #0x80
 80578ea: 9a01         	ldr	r2, [sp, #0x4]
 80578ec: 6090         	str	r0, [r2, #0x8]
 80578ee: 9a05         	ldr	r2, [sp, #0x14]
 80578f0: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80578f4: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80578f8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80578fc: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057900: 9805         	ldr	r0, [sp, #0x14]
 8057902: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057906: eb00 0280    	add.w	r2, r0, r0, lsl #2
 805790a: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 805790e: 3001         	adds	r0, #0x1
 8057910: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057914: e7ff         	b	0x8057916 <vTaskPriorityDisinheritAfterTimeout+0x176> @ imm = #-0x2
 8057916: e7ff         	b	0x8057918 <vTaskPriorityDisinheritAfterTimeout+0x178> @ imm = #-0x2
;                     }
 8057918: e000         	b	0x805791c <vTaskPriorityDisinheritAfterTimeout+0x17c> @ imm = #0x0
 805791a: e7ff         	b	0x805791c <vTaskPriorityDisinheritAfterTimeout+0x17c> @ imm = #-0x2
;                 }
 805791c: e000         	b	0x8057920 <vTaskPriorityDisinheritAfterTimeout+0x180> @ imm = #0x0
 805791e: e7ff         	b	0x8057920 <vTaskPriorityDisinheritAfterTimeout+0x180> @ imm = #-0x2
;             }
 8057920: e000         	b	0x8057924 <vTaskPriorityDisinheritAfterTimeout+0x184> @ imm = #0x0
 8057922: e7ff         	b	0x8057924 <vTaskPriorityDisinheritAfterTimeout+0x184> @ imm = #-0x2
;         }
 8057924: e000         	b	0x8057928 <vTaskPriorityDisinheritAfterTimeout+0x188> @ imm = #0x0
 8057926: e7ff         	b	0x8057928 <vTaskPriorityDisinheritAfterTimeout+0x188> @ imm = #-0x2
;     }
 8057928: b008         	add	sp, #0x20
 805792a: bd80         	pop	{r7, pc}

0805792c <$d.87>:
 805792c: 33 9f 05 08  	.word	0x08059f33
 8057930: 55 cd 05 08  	.word	0x0805cd55
 8057934: 55 cd 05 08  	.word	0x0805cd55

08057938 <uxTaskResetEventItemValue>:
; {
 8057938: b081         	sub	sp, #0x4
;     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 805793a: f240 1100    	movw	r1, #0x100
 805793e: f2c2 0100    	movt	r1, #0x2000
 8057942: 6808         	ldr	r0, [r1]
 8057944: f8d0 0094    	ldr.w	r0, [r0, #0x94]
 8057948: 9000         	str	r0, [sp]
;     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805794a: 6808         	ldr	r0, [r1]
 805794c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057950: f1c0 0010    	rsb.w	r0, r0, #0x10
 8057954: 6809         	ldr	r1, [r1]
 8057956: f8c1 0094    	str.w	r0, [r1, #0x94]
;     return uxReturn;
 805795a: 9800         	ldr	r0, [sp]
 805795c: b001         	add	sp, #0x4
 805795e: 4770         	bx	lr

08057960 <pvTaskIncrementMutexHeldCount>:
;     {
 8057960: b081         	sub	sp, #0x4
;         pxTCB = pxCurrentTCB;
 8057962: f240 1000    	movw	r0, #0x100
 8057966: f2c2 0000    	movt	r0, #0x2000
 805796a: 6800         	ldr	r0, [r0]
 805796c: 9000         	str	r0, [sp]
;         if( pxTCB != NULL )
 805796e: 9800         	ldr	r0, [sp]
 8057970: b138         	cbz	r0, 0x8057982 <pvTaskIncrementMutexHeldCount+0x22> @ imm = #0xe
 8057972: e7ff         	b	0x8057974 <pvTaskIncrementMutexHeldCount+0x14> @ imm = #-0x2
;             ( pxTCB->uxMutexesHeld )++;
 8057974: 9900         	ldr	r1, [sp]
 8057976: f8d1 00cc    	ldr.w	r0, [r1, #0xcc]
 805797a: 3001         	adds	r0, #0x1
 805797c: f8c1 00cc    	str.w	r0, [r1, #0xcc]
;         }
 8057980: e7ff         	b	0x8057982 <pvTaskIncrementMutexHeldCount+0x22> @ imm = #-0x2
;         return pxTCB;
 8057982: 9800         	ldr	r0, [sp]
 8057984: b001         	add	sp, #0x4
 8057986: 4770         	bx	lr

08057988 <ulTaskGenericNotifyTake>:
;     {
 8057988: b580         	push	{r7, lr}
 805798a: 466f         	mov	r7, sp
 805798c: b086         	sub	sp, #0x18
 805798e: 9005         	str	r0, [sp, #0x14]
 8057990: 9104         	str	r1, [sp, #0x10]
 8057992: 9203         	str	r2, [sp, #0xc]
;         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057994: 9805         	ldr	r0, [sp, #0x14]
 8057996: b120         	cbz	r0, 0x80579a2 <ulTaskGenericNotifyTake+0x1a> @ imm = #0x8
 8057998: e7ff         	b	0x805799a <ulTaskGenericNotifyTake+0x12> @ imm = #-0x2
 805799a: 4845         	ldr	r0, [pc, #0x114]        @ 0x8057ab0 <ulTaskGenericNotifyTake+0x128>
 805799c: 4780         	blx	r0
 805799e: e7ff         	b	0x80579a0 <ulTaskGenericNotifyTake+0x18> @ imm = #-0x2
 80579a0: e7fe         	b	0x80579a0 <ulTaskGenericNotifyTake+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 80579a2: 4839         	ldr	r0, [pc, #0xe4]         @ 0x8057a88 <ulTaskGenericNotifyTake+0x100>
 80579a4: 4780         	blx	r0
;         if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0UL )
 80579a6: f240 1000    	movw	r0, #0x100
 80579aa: f2c2 0000    	movt	r0, #0x2000
 80579ae: 6800         	ldr	r0, [r0]
 80579b0: 9905         	ldr	r1, [sp, #0x14]
 80579b2: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80579b6: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 80579ba: bb20         	cbnz	r0, 0x8057a06 <ulTaskGenericNotifyTake+0x7e> @ imm = #0x48
 80579bc: e7ff         	b	0x80579be <ulTaskGenericNotifyTake+0x36> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80579be: f240 1000    	movw	r0, #0x100
 80579c2: f2c2 0000    	movt	r0, #0x2000
 80579c6: 6800         	ldr	r0, [r0]
 80579c8: 9905         	ldr	r1, [sp, #0x14]
 80579ca: 4401         	add	r1, r0
 80579cc: 2001         	movs	r0, #0x1
 80579ce: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             if( xTicksToWait > ( TickType_t ) 0 )
 80579d2: 9803         	ldr	r0, [sp, #0xc]
 80579d4: b198         	cbz	r0, 0x80579fe <ulTaskGenericNotifyTake+0x76> @ imm = #0x26
 80579d6: e7ff         	b	0x80579d8 <ulTaskGenericNotifyTake+0x50> @ imm = #-0x2
;                 vTaskSuspendAll();
 80579d8: 482e         	ldr	r0, [pc, #0xb8]         @ 0x8057a94 <ulTaskGenericNotifyTake+0x10c>
 80579da: 4780         	blx	r0
;                     taskEXIT_CRITICAL();
 80579dc: 482e         	ldr	r0, [pc, #0xb8]         @ 0x8057a98 <ulTaskGenericNotifyTake+0x110>
 80579de: 4780         	blx	r0
;                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80579e0: 9803         	ldr	r0, [sp, #0xc]
 80579e2: 4a2e         	ldr	r2, [pc, #0xb8]         @ 0x8057a9c <ulTaskGenericNotifyTake+0x114>
 80579e4: 2101         	movs	r1, #0x1
 80579e6: 4790         	blx	r2
;                 xAlreadyYielded = xTaskResumeAll();
 80579e8: 482d         	ldr	r0, [pc, #0xb4]         @ 0x8057aa0 <ulTaskGenericNotifyTake+0x118>
 80579ea: 4780         	blx	r0
 80579ec: 9001         	str	r0, [sp, #0x4]
;                 if( xAlreadyYielded == pdFALSE )
 80579ee: 9801         	ldr	r0, [sp, #0x4]
 80579f0: b918         	cbnz	r0, 0x80579fa <ulTaskGenericNotifyTake+0x72> @ imm = #0x6
 80579f2: e7ff         	b	0x80579f4 <ulTaskGenericNotifyTake+0x6c> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 80579f4: 482b         	ldr	r0, [pc, #0xac]         @ 0x8057aa4 <ulTaskGenericNotifyTake+0x11c>
 80579f6: 4780         	blx	r0
;                 }
 80579f8: e000         	b	0x80579fc <ulTaskGenericNotifyTake+0x74> @ imm = #0x0
 80579fa: e7ff         	b	0x80579fc <ulTaskGenericNotifyTake+0x74> @ imm = #-0x2
;             }
 80579fc: e002         	b	0x8057a04 <ulTaskGenericNotifyTake+0x7c> @ imm = #0x4
;                 taskEXIT_CRITICAL();
 80579fe: 4824         	ldr	r0, [pc, #0x90]         @ 0x8057a90 <ulTaskGenericNotifyTake+0x108>
 8057a00: 4780         	blx	r0
 8057a02: e7ff         	b	0x8057a04 <ulTaskGenericNotifyTake+0x7c> @ imm = #-0x2
;         }
 8057a04: e002         	b	0x8057a0c <ulTaskGenericNotifyTake+0x84> @ imm = #0x4
;             taskEXIT_CRITICAL();
 8057a06: 4821         	ldr	r0, [pc, #0x84]         @ 0x8057a8c <ulTaskGenericNotifyTake+0x104>
 8057a08: 4780         	blx	r0
 8057a0a: e7ff         	b	0x8057a0c <ulTaskGenericNotifyTake+0x84> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8057a0c: 4826         	ldr	r0, [pc, #0x98]         @ 0x8057aa8 <ulTaskGenericNotifyTake+0x120>
 8057a0e: 4780         	blx	r0
;             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8057a10: f240 1000    	movw	r0, #0x100
 8057a14: f2c2 0000    	movt	r0, #0x2000
 8057a18: 6800         	ldr	r0, [r0]
 8057a1a: 9905         	ldr	r1, [sp, #0x14]
 8057a1c: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8057a20: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8057a24: 9002         	str	r0, [sp, #0x8]
;             if( ulReturn != 0UL )
 8057a26: 9802         	ldr	r0, [sp, #0x8]
 8057a28: b1e8         	cbz	r0, 0x8057a66 <ulTaskGenericNotifyTake+0xde> @ imm = #0x3a
 8057a2a: e7ff         	b	0x8057a2c <ulTaskGenericNotifyTake+0xa4> @ imm = #-0x2
;                 if( xClearCountOnExit != pdFALSE )
 8057a2c: 9804         	ldr	r0, [sp, #0x10]
 8057a2e: b160         	cbz	r0, 0x8057a4a <ulTaskGenericNotifyTake+0xc2> @ imm = #0x18
 8057a30: e7ff         	b	0x8057a32 <ulTaskGenericNotifyTake+0xaa> @ imm = #-0x2
;                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = 0UL;
 8057a32: f240 1000    	movw	r0, #0x100
 8057a36: f2c2 0000    	movt	r0, #0x2000
 8057a3a: 6800         	ldr	r0, [r0]
 8057a3c: 9905         	ldr	r1, [sp, #0x14]
 8057a3e: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057a42: 2000         	movs	r0, #0x0
 8057a44: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                 }
 8057a48: e00c         	b	0x8057a64 <ulTaskGenericNotifyTake+0xdc> @ imm = #0x18
;                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8057a4a: 9802         	ldr	r0, [sp, #0x8]
 8057a4c: 3801         	subs	r0, #0x1
 8057a4e: f240 1100    	movw	r1, #0x100
 8057a52: f2c2 0100    	movt	r1, #0x2000
 8057a56: 6809         	ldr	r1, [r1]
 8057a58: 9a05         	ldr	r2, [sp, #0x14]
 8057a5a: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057a5e: f8c1 00d0    	str.w	r0, [r1, #0xd0]
 8057a62: e7ff         	b	0x8057a64 <ulTaskGenericNotifyTake+0xdc> @ imm = #-0x2
;             }
 8057a64: e000         	b	0x8057a68 <ulTaskGenericNotifyTake+0xe0> @ imm = #0x0
 8057a66: e7ff         	b	0x8057a68 <ulTaskGenericNotifyTake+0xe0> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8057a68: f240 1000    	movw	r0, #0x100
 8057a6c: f2c2 0000    	movt	r0, #0x2000
 8057a70: 6800         	ldr	r0, [r0]
 8057a72: 9905         	ldr	r1, [sp, #0x14]
 8057a74: 4401         	add	r1, r0
 8057a76: 2000         	movs	r0, #0x0
 8057a78: f881 00d4    	strb.w	r0, [r1, #0xd4]
;         taskEXIT_CRITICAL();
 8057a7c: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8057aac <ulTaskGenericNotifyTake+0x124>
 8057a7e: 4780         	blx	r0
;         return ulReturn;
 8057a80: 9802         	ldr	r0, [sp, #0x8]
 8057a82: b006         	add	sp, #0x18
 8057a84: bd80         	pop	{r7, pc}
 8057a86: bf00         	nop

08057a88 <$d.89>:
 8057a88: 19 c4 05 08  	.word	0x0805c419
 8057a8c: 3d c4 05 08  	.word	0x0805c43d
 8057a90: 3d c4 05 08  	.word	0x0805c43d
 8057a94: 59 58 05 08  	.word	0x08055859
 8057a98: 3d c4 05 08  	.word	0x0805c43d
 8057a9c: 69 58 05 08  	.word	0x08055869
 8057aa0: 7d 59 05 08  	.word	0x0805597d
 8057aa4: ff c3 05 08  	.word	0x0805c3ff
 8057aa8: 19 c4 05 08  	.word	0x0805c419
 8057aac: 3d c4 05 08  	.word	0x0805c43d
 8057ab0: 55 cd 05 08  	.word	0x0805cd55

08057ab4 <xTaskGenericNotifyWait>:
;     {
 8057ab4: b580         	push	{r7, lr}
 8057ab6: 466f         	mov	r7, sp
 8057ab8: b086         	sub	sp, #0x18
 8057aba: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8057abe: 9005         	str	r0, [sp, #0x14]
 8057ac0: 9104         	str	r1, [sp, #0x10]
 8057ac2: 9203         	str	r2, [sp, #0xc]
 8057ac4: 9302         	str	r3, [sp, #0x8]
;         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057ac6: 9805         	ldr	r0, [sp, #0x14]
 8057ac8: b120         	cbz	r0, 0x8057ad4 <xTaskGenericNotifyWait+0x20> @ imm = #0x8
 8057aca: e7ff         	b	0x8057acc <xTaskGenericNotifyWait+0x18> @ imm = #-0x2
 8057acc: 484b         	ldr	r0, [pc, #0x12c]        @ 0x8057bfc <xTaskGenericNotifyWait+0x148>
 8057ace: 4780         	blx	r0
 8057ad0: e7ff         	b	0x8057ad2 <xTaskGenericNotifyWait+0x1e> @ imm = #-0x2
 8057ad2: e7fe         	b	0x8057ad2 <xTaskGenericNotifyWait+0x1e> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8057ad4: 483f         	ldr	r0, [pc, #0xfc]         @ 0x8057bd4 <xTaskGenericNotifyWait+0x120>
 8057ad6: 4780         	blx	r0
;         if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8057ad8: f240 1000    	movw	r0, #0x100
 8057adc: f2c2 0000    	movt	r0, #0x2000
 8057ae0: 6800         	ldr	r0, [r0]
 8057ae2: 9905         	ldr	r1, [sp, #0x14]
 8057ae4: 4408         	add	r0, r1
 8057ae6: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8057aea: 2802         	cmp	r0, #0x2
 8057aec: d02e         	beq	0x8057b4c <xTaskGenericNotifyWait+0x98> @ imm = #0x5c
 8057aee: e7ff         	b	0x8057af0 <xTaskGenericNotifyWait+0x3c> @ imm = #-0x2
;             pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8057af0: 9b04         	ldr	r3, [sp, #0x10]
 8057af2: f240 1000    	movw	r0, #0x100
 8057af6: f2c2 0000    	movt	r0, #0x2000
 8057afa: 6801         	ldr	r1, [r0]
 8057afc: 9a05         	ldr	r2, [sp, #0x14]
 8057afe: eb01 0282    	add.w	r2, r1, r2, lsl #2
 8057b02: f8d2 10d0    	ldr.w	r1, [r2, #0xd0]
 8057b06: 4399         	bics	r1, r3
 8057b08: f8c2 10d0    	str.w	r1, [r2, #0xd0]
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8057b0c: 6800         	ldr	r0, [r0]
 8057b0e: 9905         	ldr	r1, [sp, #0x14]
 8057b10: 4401         	add	r1, r0
 8057b12: 2001         	movs	r0, #0x1
 8057b14: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             if( xTicksToWait > ( TickType_t ) 0 )
 8057b18: 68b8         	ldr	r0, [r7, #0x8]
 8057b1a: b198         	cbz	r0, 0x8057b44 <xTaskGenericNotifyWait+0x90> @ imm = #0x26
 8057b1c: e7ff         	b	0x8057b1e <xTaskGenericNotifyWait+0x6a> @ imm = #-0x2
;                 vTaskSuspendAll();
 8057b1e: 4830         	ldr	r0, [pc, #0xc0]         @ 0x8057be0 <xTaskGenericNotifyWait+0x12c>
 8057b20: 4780         	blx	r0
;                     taskEXIT_CRITICAL();
 8057b22: 4830         	ldr	r0, [pc, #0xc0]         @ 0x8057be4 <xTaskGenericNotifyWait+0x130>
 8057b24: 4780         	blx	r0
;                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8057b26: 68b8         	ldr	r0, [r7, #0x8]
 8057b28: 4a2f         	ldr	r2, [pc, #0xbc]         @ 0x8057be8 <xTaskGenericNotifyWait+0x134>
 8057b2a: 2101         	movs	r1, #0x1
 8057b2c: 4790         	blx	r2
;                 xAlreadyYielded = xTaskResumeAll();
 8057b2e: 482f         	ldr	r0, [pc, #0xbc]         @ 0x8057bec <xTaskGenericNotifyWait+0x138>
 8057b30: 4780         	blx	r0
 8057b32: 9000         	str	r0, [sp]
;                 if( xAlreadyYielded == pdFALSE )
 8057b34: 9800         	ldr	r0, [sp]
 8057b36: b918         	cbnz	r0, 0x8057b40 <xTaskGenericNotifyWait+0x8c> @ imm = #0x6
 8057b38: e7ff         	b	0x8057b3a <xTaskGenericNotifyWait+0x86> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 8057b3a: 482d         	ldr	r0, [pc, #0xb4]         @ 0x8057bf0 <xTaskGenericNotifyWait+0x13c>
 8057b3c: 4780         	blx	r0
;                 }
 8057b3e: e000         	b	0x8057b42 <xTaskGenericNotifyWait+0x8e> @ imm = #0x0
 8057b40: e7ff         	b	0x8057b42 <xTaskGenericNotifyWait+0x8e> @ imm = #-0x2
;             }
 8057b42: e002         	b	0x8057b4a <xTaskGenericNotifyWait+0x96> @ imm = #0x4
;                 taskEXIT_CRITICAL();
 8057b44: 4825         	ldr	r0, [pc, #0x94]         @ 0x8057bdc <xTaskGenericNotifyWait+0x128>
 8057b46: 4780         	blx	r0
 8057b48: e7ff         	b	0x8057b4a <xTaskGenericNotifyWait+0x96> @ imm = #-0x2
;         }
 8057b4a: e002         	b	0x8057b52 <xTaskGenericNotifyWait+0x9e> @ imm = #0x4
;             taskEXIT_CRITICAL();
 8057b4c: 4822         	ldr	r0, [pc, #0x88]         @ 0x8057bd8 <xTaskGenericNotifyWait+0x124>
 8057b4e: 4780         	blx	r0
 8057b50: e7ff         	b	0x8057b52 <xTaskGenericNotifyWait+0x9e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8057b52: 4828         	ldr	r0, [pc, #0xa0]         @ 0x8057bf4 <xTaskGenericNotifyWait+0x140>
 8057b54: 4780         	blx	r0
;             if( pulNotificationValue != NULL )
 8057b56: 9802         	ldr	r0, [sp, #0x8]
 8057b58: b168         	cbz	r0, 0x8057b76 <xTaskGenericNotifyWait+0xc2> @ imm = #0x1a
 8057b5a: e7ff         	b	0x8057b5c <xTaskGenericNotifyWait+0xa8> @ imm = #-0x2
;                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8057b5c: f240 1000    	movw	r0, #0x100
 8057b60: f2c2 0000    	movt	r0, #0x2000
 8057b64: 6800         	ldr	r0, [r0]
 8057b66: 9905         	ldr	r1, [sp, #0x14]
 8057b68: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8057b6c: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8057b70: 9902         	ldr	r1, [sp, #0x8]
 8057b72: 6008         	str	r0, [r1]
;             }
 8057b74: e7ff         	b	0x8057b76 <xTaskGenericNotifyWait+0xc2> @ imm = #-0x2
;             if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8057b76: f240 1000    	movw	r0, #0x100
 8057b7a: f2c2 0000    	movt	r0, #0x2000
 8057b7e: 6800         	ldr	r0, [r0]
 8057b80: 9905         	ldr	r1, [sp, #0x14]
 8057b82: 4408         	add	r0, r1
 8057b84: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8057b88: 2802         	cmp	r0, #0x2
 8057b8a: d003         	beq	0x8057b94 <xTaskGenericNotifyWait+0xe0> @ imm = #0x6
 8057b8c: e7ff         	b	0x8057b8e <xTaskGenericNotifyWait+0xda> @ imm = #-0x2
 8057b8e: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 8057b90: 9001         	str	r0, [sp, #0x4]
;             }
 8057b92: e010         	b	0x8057bb6 <xTaskGenericNotifyWait+0x102> @ imm = #0x20
;                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8057b94: 9a03         	ldr	r2, [sp, #0xc]
 8057b96: f240 1000    	movw	r0, #0x100
 8057b9a: f2c2 0000    	movt	r0, #0x2000
 8057b9e: 6800         	ldr	r0, [r0]
 8057ba0: 9905         	ldr	r1, [sp, #0x14]
 8057ba2: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057ba6: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057baa: 4390         	bics	r0, r2
 8057bac: f8c1 00d0    	str.w	r0, [r1, #0xd0]
 8057bb0: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 8057bb2: 9001         	str	r0, [sp, #0x4]
 8057bb4: e7ff         	b	0x8057bb6 <xTaskGenericNotifyWait+0x102> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8057bb6: f240 1000    	movw	r0, #0x100
 8057bba: f2c2 0000    	movt	r0, #0x2000
 8057bbe: 6800         	ldr	r0, [r0]
 8057bc0: 9905         	ldr	r1, [sp, #0x14]
 8057bc2: 4401         	add	r1, r0
 8057bc4: 2000         	movs	r0, #0x0
 8057bc6: f881 00d4    	strb.w	r0, [r1, #0xd4]
;         taskEXIT_CRITICAL();
 8057bca: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8057bf8 <xTaskGenericNotifyWait+0x144>
 8057bcc: 4780         	blx	r0
;         return xReturn;
 8057bce: 9801         	ldr	r0, [sp, #0x4]
 8057bd0: b006         	add	sp, #0x18
 8057bd2: bd80         	pop	{r7, pc}

08057bd4 <$d.91>:
 8057bd4: 19 c4 05 08  	.word	0x0805c419
 8057bd8: 3d c4 05 08  	.word	0x0805c43d
 8057bdc: 3d c4 05 08  	.word	0x0805c43d
 8057be0: 59 58 05 08  	.word	0x08055859
 8057be4: 3d c4 05 08  	.word	0x0805c43d
 8057be8: 69 58 05 08  	.word	0x08055869
 8057bec: 7d 59 05 08  	.word	0x0805597d
 8057bf0: ff c3 05 08  	.word	0x0805c3ff
 8057bf4: 19 c4 05 08  	.word	0x0805c419
 8057bf8: 3d c4 05 08  	.word	0x0805c43d
 8057bfc: 55 cd 05 08  	.word	0x0805cd55

08057c00 <xTaskGenericNotify>:
;     {
 8057c00: b580         	push	{r7, lr}
 8057c02: 466f         	mov	r7, sp
 8057c04: b08a         	sub	sp, #0x28
 8057c06: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8057c0a: 9009         	str	r0, [sp, #0x24]
 8057c0c: 9108         	str	r1, [sp, #0x20]
 8057c0e: 9207         	str	r2, [sp, #0x1c]
 8057c10: f807 3c0d    	strb	r3, [r7, #-13]
 8057c14: 2001         	movs	r0, #0x1
;         BaseType_t xReturn = pdPASS;
 8057c16: 9004         	str	r0, [sp, #0x10]
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057c18: 9808         	ldr	r0, [sp, #0x20]
 8057c1a: b120         	cbz	r0, 0x8057c26 <xTaskGenericNotify+0x26> @ imm = #0x8
 8057c1c: e7ff         	b	0x8057c1e <xTaskGenericNotify+0x1e> @ imm = #-0x2
 8057c1e: 4891         	ldr	r0, [pc, #0x244]        @ 0x8057e64 <xTaskGenericNotify+0x264>
 8057c20: 4780         	blx	r0
 8057c22: e7ff         	b	0x8057c24 <xTaskGenericNotify+0x24> @ imm = #-0x2
 8057c24: e7fe         	b	0x8057c24 <xTaskGenericNotify+0x24> @ imm = #-0x4
;         configASSERT( xTaskToNotify );
 8057c26: 9809         	ldr	r0, [sp, #0x24]
 8057c28: b920         	cbnz	r0, 0x8057c34 <xTaskGenericNotify+0x34> @ imm = #0x8
 8057c2a: e7ff         	b	0x8057c2c <xTaskGenericNotify+0x2c> @ imm = #-0x2
 8057c2c: 488c         	ldr	r0, [pc, #0x230]        @ 0x8057e60 <xTaskGenericNotify+0x260>
 8057c2e: 4780         	blx	r0
 8057c30: e7ff         	b	0x8057c32 <xTaskGenericNotify+0x32> @ imm = #-0x2
 8057c32: e7fe         	b	0x8057c32 <xTaskGenericNotify+0x32> @ imm = #-0x4
;         pxTCB = xTaskToNotify;
 8057c34: 9809         	ldr	r0, [sp, #0x24]
 8057c36: 9005         	str	r0, [sp, #0x14]
;         taskENTER_CRITICAL();
 8057c38: 4884         	ldr	r0, [pc, #0x210]        @ 0x8057e4c <xTaskGenericNotify+0x24c>
 8057c3a: 4780         	blx	r0
;             if( pulPreviousNotificationValue != NULL )
 8057c3c: 68b8         	ldr	r0, [r7, #0x8]
 8057c3e: b148         	cbz	r0, 0x8057c54 <xTaskGenericNotify+0x54> @ imm = #0x12
 8057c40: e7ff         	b	0x8057c42 <xTaskGenericNotify+0x42> @ imm = #-0x2
;                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8057c42: 9805         	ldr	r0, [sp, #0x14]
 8057c44: 9908         	ldr	r1, [sp, #0x20]
 8057c46: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8057c4a: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8057c4e: 68b9         	ldr	r1, [r7, #0x8]
 8057c50: 6008         	str	r0, [r1]
;             }
 8057c52: e7ff         	b	0x8057c54 <xTaskGenericNotify+0x54> @ imm = #-0x2
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8057c54: 9805         	ldr	r0, [sp, #0x14]
 8057c56: 9908         	ldr	r1, [sp, #0x20]
 8057c58: 4408         	add	r0, r1
 8057c5a: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8057c5e: f807 0c19    	strb	r0, [r7, #-25]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8057c62: 9805         	ldr	r0, [sp, #0x14]
 8057c64: 9908         	ldr	r1, [sp, #0x20]
 8057c66: 4401         	add	r1, r0
 8057c68: 2002         	movs	r0, #0x2
 8057c6a: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             switch( eAction )
 8057c6e: f817 0c0d    	ldrb	r0, [r7, #-13]
 8057c72: 4601         	mov	r1, r0
 8057c74: 9100         	str	r1, [sp]
 8057c76: 2800         	cmp	r0, #0x0
 8057c78: d03e         	beq	0x8057cf8 <xTaskGenericNotify+0xf8> @ imm = #0x7c
 8057c7a: e7ff         	b	0x8057c7c <xTaskGenericNotify+0x7c> @ imm = #-0x2
 8057c7c: 9800         	ldr	r0, [sp]
 8057c7e: 2801         	cmp	r0, #0x1
 8057c80: d00c         	beq	0x8057c9c <xTaskGenericNotify+0x9c> @ imm = #0x18
 8057c82: e7ff         	b	0x8057c84 <xTaskGenericNotify+0x84> @ imm = #-0x2
 8057c84: 9800         	ldr	r0, [sp]
 8057c86: 2802         	cmp	r0, #0x2
 8057c88: d013         	beq	0x8057cb2 <xTaskGenericNotify+0xb2> @ imm = #0x26
 8057c8a: e7ff         	b	0x8057c8c <xTaskGenericNotify+0x8c> @ imm = #-0x2
 8057c8c: 9800         	ldr	r0, [sp]
 8057c8e: 2803         	cmp	r0, #0x3
 8057c90: d019         	beq	0x8057cc6 <xTaskGenericNotify+0xc6> @ imm = #0x32
 8057c92: e7ff         	b	0x8057c94 <xTaskGenericNotify+0x94> @ imm = #-0x2
 8057c94: 9800         	ldr	r0, [sp]
 8057c96: 2804         	cmp	r0, #0x4
 8057c98: d01d         	beq	0x8057cd6 <xTaskGenericNotify+0xd6> @ imm = #0x3a
 8057c9a: e02e         	b	0x8057cfa <xTaskGenericNotify+0xfa> @ imm = #0x5c
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8057c9c: 9a07         	ldr	r2, [sp, #0x1c]
 8057c9e: 9805         	ldr	r0, [sp, #0x14]
 8057ca0: 9908         	ldr	r1, [sp, #0x20]
 8057ca2: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057ca6: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057caa: 4310         	orrs	r0, r2
 8057cac: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057cb0: e02f         	b	0x8057d12 <xTaskGenericNotify+0x112> @ imm = #0x5e
;                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8057cb2: 9805         	ldr	r0, [sp, #0x14]
 8057cb4: 9908         	ldr	r1, [sp, #0x20]
 8057cb6: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057cba: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057cbe: 3001         	adds	r0, #0x1
 8057cc0: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057cc4: e025         	b	0x8057d12 <xTaskGenericNotify+0x112> @ imm = #0x4a
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057cc6: 9807         	ldr	r0, [sp, #0x1c]
 8057cc8: 9905         	ldr	r1, [sp, #0x14]
 8057cca: 9a08         	ldr	r2, [sp, #0x20]
 8057ccc: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057cd0: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057cd4: e01d         	b	0x8057d12 <xTaskGenericNotify+0x112> @ imm = #0x3a
;                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8057cd6: f817 0c19    	ldrb	r0, [r7, #-25]
 8057cda: 2802         	cmp	r0, #0x2
 8057cdc: d008         	beq	0x8057cf0 <xTaskGenericNotify+0xf0> @ imm = #0x10
 8057cde: e7ff         	b	0x8057ce0 <xTaskGenericNotify+0xe0> @ imm = #-0x2
;                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057ce0: 9807         	ldr	r0, [sp, #0x1c]
 8057ce2: 9905         	ldr	r1, [sp, #0x14]
 8057ce4: 9a08         	ldr	r2, [sp, #0x20]
 8057ce6: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057cea: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     }
 8057cee: e002         	b	0x8057cf6 <xTaskGenericNotify+0xf6> @ imm = #0x4
 8057cf0: 2000         	movs	r0, #0x0
;                         xReturn = pdFAIL;
 8057cf2: 9004         	str	r0, [sp, #0x10]
 8057cf4: e7ff         	b	0x8057cf6 <xTaskGenericNotify+0xf6> @ imm = #-0x2
;                     break;
 8057cf6: e00c         	b	0x8057d12 <xTaskGenericNotify+0x112> @ imm = #0x18
;                     break;
 8057cf8: e00b         	b	0x8057d12 <xTaskGenericNotify+0x112> @ imm = #0x16
;                     configASSERT( xTickCount == ( TickType_t ) 0 );
 8057cfa: f240 102c    	movw	r0, #0x12c
 8057cfe: f2c2 0000    	movt	r0, #0x2000
 8057d02: 6800         	ldr	r0, [r0]
 8057d04: b120         	cbz	r0, 0x8057d10 <xTaskGenericNotify+0x110> @ imm = #0x8
 8057d06: e7ff         	b	0x8057d08 <xTaskGenericNotify+0x108> @ imm = #-0x2
 8057d08: 4854         	ldr	r0, [pc, #0x150]        @ 0x8057e5c <xTaskGenericNotify+0x25c>
 8057d0a: 4780         	blx	r0
 8057d0c: e7ff         	b	0x8057d0e <xTaskGenericNotify+0x10e> @ imm = #-0x2
 8057d0e: e7fe         	b	0x8057d0e <xTaskGenericNotify+0x10e> @ imm = #-0x4
;                     break;
 8057d10: e7ff         	b	0x8057d12 <xTaskGenericNotify+0x112> @ imm = #-0x2
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8057d12: f817 0c19    	ldrb	r0, [r7, #-25]
 8057d16: 2801         	cmp	r0, #0x1
 8057d18: f040 8091    	bne.w	0x8057e3e <xTaskGenericNotify+0x23e> @ imm = #0x122
 8057d1c: e7ff         	b	0x8057d1e <xTaskGenericNotify+0x11e> @ imm = #-0x2
;                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8057d1e: e7ff         	b	0x8057d20 <xTaskGenericNotify+0x120> @ imm = #-0x2
 8057d20: 9805         	ldr	r0, [sp, #0x14]
 8057d22: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8057d26: 9002         	str	r0, [sp, #0x8]
 8057d28: 9805         	ldr	r0, [sp, #0x14]
 8057d2a: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8057d2e: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057d32: 6088         	str	r0, [r1, #0x8]
 8057d34: 9905         	ldr	r1, [sp, #0x14]
 8057d36: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8057d3a: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8057d3e: 6048         	str	r0, [r1, #0x4]
 8057d40: 9802         	ldr	r0, [sp, #0x8]
 8057d42: 6840         	ldr	r0, [r0, #0x4]
 8057d44: 9905         	ldr	r1, [sp, #0x14]
 8057d46: 3180         	adds	r1, #0x80
 8057d48: 4288         	cmp	r0, r1
 8057d4a: d106         	bne	0x8057d5a <xTaskGenericNotify+0x15a> @ imm = #0xc
 8057d4c: e7ff         	b	0x8057d4e <xTaskGenericNotify+0x14e> @ imm = #-0x2
 8057d4e: 9805         	ldr	r0, [sp, #0x14]
 8057d50: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057d54: 9902         	ldr	r1, [sp, #0x8]
 8057d56: 6048         	str	r0, [r1, #0x4]
 8057d58: e7ff         	b	0x8057d5a <xTaskGenericNotify+0x15a> @ imm = #-0x2
 8057d5a: 9905         	ldr	r1, [sp, #0x14]
 8057d5c: 2000         	movs	r0, #0x0
 8057d5e: f8c1 0090    	str.w	r0, [r1, #0x90]
 8057d62: 9902         	ldr	r1, [sp, #0x8]
 8057d64: 6808         	ldr	r0, [r1]
 8057d66: 3801         	subs	r0, #0x1
 8057d68: 6008         	str	r0, [r1]
 8057d6a: e7ff         	b	0x8057d6c <xTaskGenericNotify+0x16c> @ imm = #-0x2
;                 prvAddTaskToReadyList( pxTCB );
 8057d6c: e7ff         	b	0x8057d6e <xTaskGenericNotify+0x16e> @ imm = #-0x2
 8057d6e: e7ff         	b	0x8057d70 <xTaskGenericNotify+0x170> @ imm = #-0x2
 8057d70: 9805         	ldr	r0, [sp, #0x14]
 8057d72: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057d76: f240 21a0    	movw	r1, #0x2a0
 8057d7a: f2c2 0100    	movt	r1, #0x2000
 8057d7e: 6809         	ldr	r1, [r1]
 8057d80: 4288         	cmp	r0, r1
 8057d82: d909         	bls	0x8057d98 <xTaskGenericNotify+0x198> @ imm = #0x12
 8057d84: e7ff         	b	0x8057d86 <xTaskGenericNotify+0x186> @ imm = #-0x2
 8057d86: 9805         	ldr	r0, [sp, #0x14]
 8057d88: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057d8c: f240 21a0    	movw	r1, #0x2a0
 8057d90: f2c2 0100    	movt	r1, #0x2000
 8057d94: 6008         	str	r0, [r1]
 8057d96: e7ff         	b	0x8057d98 <xTaskGenericNotify+0x198> @ imm = #-0x2
 8057d98: e7ff         	b	0x8057d9a <xTaskGenericNotify+0x19a> @ imm = #-0x2
 8057d9a: e7ff         	b	0x8057d9c <xTaskGenericNotify+0x19c> @ imm = #-0x2
 8057d9c: 9805         	ldr	r0, [sp, #0x14]
 8057d9e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057da2: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057da6: f240 1160    	movw	r1, #0x160
 8057daa: f2c2 0100    	movt	r1, #0x2000
 8057dae: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057db2: 6840         	ldr	r0, [r0, #0x4]
 8057db4: 9001         	str	r0, [sp, #0x4]
 8057db6: 9801         	ldr	r0, [sp, #0x4]
 8057db8: 9a05         	ldr	r2, [sp, #0x14]
 8057dba: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057dbe: 9801         	ldr	r0, [sp, #0x4]
 8057dc0: 6880         	ldr	r0, [r0, #0x8]
 8057dc2: 9a05         	ldr	r2, [sp, #0x14]
 8057dc4: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057dc8: 9805         	ldr	r0, [sp, #0x14]
 8057dca: 3080         	adds	r0, #0x80
 8057dcc: 9a01         	ldr	r2, [sp, #0x4]
 8057dce: 6892         	ldr	r2, [r2, #0x8]
 8057dd0: 6050         	str	r0, [r2, #0x4]
 8057dd2: 9805         	ldr	r0, [sp, #0x14]
 8057dd4: 3080         	adds	r0, #0x80
 8057dd6: 9a01         	ldr	r2, [sp, #0x4]
 8057dd8: 6090         	str	r0, [r2, #0x8]
 8057dda: 9a05         	ldr	r2, [sp, #0x14]
 8057ddc: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057de0: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057de4: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057de8: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057dec: 9805         	ldr	r0, [sp, #0x14]
 8057dee: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057df2: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057df6: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057dfa: 3001         	adds	r0, #0x1
 8057dfc: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057e00: e7ff         	b	0x8057e02 <xTaskGenericNotify+0x202> @ imm = #-0x2
 8057e02: e7ff         	b	0x8057e04 <xTaskGenericNotify+0x204> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8057e04: 9805         	ldr	r0, [sp, #0x14]
 8057e06: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057e0a: b120         	cbz	r0, 0x8057e16 <xTaskGenericNotify+0x216> @ imm = #0x8
 8057e0c: e7ff         	b	0x8057e0e <xTaskGenericNotify+0x20e> @ imm = #-0x2
 8057e0e: 4812         	ldr	r0, [pc, #0x48]         @ 0x8057e58 <xTaskGenericNotify+0x258>
 8057e10: 4780         	blx	r0
 8057e12: e7ff         	b	0x8057e14 <xTaskGenericNotify+0x214> @ imm = #-0x2
 8057e14: e7fe         	b	0x8057e14 <xTaskGenericNotify+0x214> @ imm = #-0x4
;                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8057e16: e7ff         	b	0x8057e18 <xTaskGenericNotify+0x218> @ imm = #-0x2
 8057e18: f240 1000    	movw	r0, #0x100
 8057e1c: f2c2 0000    	movt	r0, #0x2000
 8057e20: 6800         	ldr	r0, [r0]
 8057e22: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057e26: 9905         	ldr	r1, [sp, #0x14]
 8057e28: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057e2c: 4288         	cmp	r0, r1
 8057e2e: d203         	bhs	0x8057e38 <xTaskGenericNotify+0x238> @ imm = #0x6
 8057e30: e7ff         	b	0x8057e32 <xTaskGenericNotify+0x232> @ imm = #-0x2
 8057e32: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8057e50 <xTaskGenericNotify+0x250>
 8057e34: 4780         	blx	r0
 8057e36: e000         	b	0x8057e3a <xTaskGenericNotify+0x23a> @ imm = #0x0
 8057e38: e7ff         	b	0x8057e3a <xTaskGenericNotify+0x23a> @ imm = #-0x2
;                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8057e3a: e7ff         	b	0x8057e3c <xTaskGenericNotify+0x23c> @ imm = #-0x2
;             }
 8057e3c: e000         	b	0x8057e40 <xTaskGenericNotify+0x240> @ imm = #0x0
 8057e3e: e7ff         	b	0x8057e40 <xTaskGenericNotify+0x240> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8057e40: 4804         	ldr	r0, [pc, #0x10]         @ 0x8057e54 <xTaskGenericNotify+0x254>
 8057e42: 4780         	blx	r0
;         return xReturn;
 8057e44: 9804         	ldr	r0, [sp, #0x10]
 8057e46: b00a         	add	sp, #0x28
 8057e48: bd80         	pop	{r7, pc}
 8057e4a: bf00         	nop

08057e4c <$d.93>:
 8057e4c: 19 c4 05 08  	.word	0x0805c419
 8057e50: ff c3 05 08  	.word	0x0805c3ff
 8057e54: 3d c4 05 08  	.word	0x0805c43d
 8057e58: 55 cd 05 08  	.word	0x0805cd55
 8057e5c: 55 cd 05 08  	.word	0x0805cd55
 8057e60: 55 cd 05 08  	.word	0x0805cd55
 8057e64: 55 cd 05 08  	.word	0x0805cd55

08057e68 <xTaskGenericNotifyFromISR>:
;     {
 8057e68: b580         	push	{r7, lr}
 8057e6a: 466f         	mov	r7, sp
 8057e6c: b08c         	sub	sp, #0x30
 8057e6e: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8057e72: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8057e76: 900b         	str	r0, [sp, #0x2c]
 8057e78: 910a         	str	r1, [sp, #0x28]
 8057e7a: 9209         	str	r2, [sp, #0x24]
 8057e7c: f807 3c0d    	strb	r3, [r7, #-13]
 8057e80: 2001         	movs	r0, #0x1
;         BaseType_t xReturn = pdPASS;
 8057e82: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTaskToNotify );
 8057e84: 980b         	ldr	r0, [sp, #0x2c]
 8057e86: b920         	cbnz	r0, 0x8057e92 <xTaskGenericNotifyFromISR+0x2a> @ imm = #0x8
 8057e88: e7ff         	b	0x8057e8a <xTaskGenericNotifyFromISR+0x22> @ imm = #-0x2
 8057e8a: 48ac         	ldr	r0, [pc, #0x2b0]        @ 0x805813c <xTaskGenericNotifyFromISR+0x2d4>
 8057e8c: 4780         	blx	r0
 8057e8e: e7ff         	b	0x8057e90 <xTaskGenericNotifyFromISR+0x28> @ imm = #-0x2
 8057e90: e7fe         	b	0x8057e90 <xTaskGenericNotifyFromISR+0x28> @ imm = #-0x4
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057e92: 980a         	ldr	r0, [sp, #0x28]
 8057e94: b120         	cbz	r0, 0x8057ea0 <xTaskGenericNotifyFromISR+0x38> @ imm = #0x8
 8057e96: e7ff         	b	0x8057e98 <xTaskGenericNotifyFromISR+0x30> @ imm = #-0x2
 8057e98: 48a7         	ldr	r0, [pc, #0x29c]        @ 0x8058138 <xTaskGenericNotifyFromISR+0x2d0>
 8057e9a: 4780         	blx	r0
 8057e9c: e7ff         	b	0x8057e9e <xTaskGenericNotifyFromISR+0x36> @ imm = #-0x2
 8057e9e: e7fe         	b	0x8057e9e <xTaskGenericNotifyFromISR+0x36> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8057ea0: 48a0         	ldr	r0, [pc, #0x280]        @ 0x8058124 <xTaskGenericNotifyFromISR+0x2bc>
 8057ea2: 4780         	blx	r0
;         pxTCB = xTaskToNotify;
 8057ea4: 980b         	ldr	r0, [sp, #0x2c]
 8057ea6: 9007         	str	r0, [sp, #0x1c]
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8057ea8: 489f         	ldr	r0, [pc, #0x27c]        @ 0x8058128 <xTaskGenericNotifyFromISR+0x2c0>
 8057eaa: 4780         	blx	r0
 8057eac: 9004         	str	r0, [sp, #0x10]
;             if( pulPreviousNotificationValue != NULL )
 8057eae: 68b8         	ldr	r0, [r7, #0x8]
 8057eb0: b148         	cbz	r0, 0x8057ec6 <xTaskGenericNotifyFromISR+0x5e> @ imm = #0x12
 8057eb2: e7ff         	b	0x8057eb4 <xTaskGenericNotifyFromISR+0x4c> @ imm = #-0x2
;                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8057eb4: 9807         	ldr	r0, [sp, #0x1c]
 8057eb6: 990a         	ldr	r1, [sp, #0x28]
 8057eb8: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8057ebc: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8057ec0: 68b9         	ldr	r1, [r7, #0x8]
 8057ec2: 6008         	str	r0, [r1]
;             }
 8057ec4: e7ff         	b	0x8057ec6 <xTaskGenericNotifyFromISR+0x5e> @ imm = #-0x2
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8057ec6: 9807         	ldr	r0, [sp, #0x1c]
 8057ec8: 990a         	ldr	r1, [sp, #0x28]
 8057eca: 4408         	add	r0, r1
 8057ecc: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8057ed0: f807 0c15    	strb	r0, [r7, #-21]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8057ed4: 9807         	ldr	r0, [sp, #0x1c]
 8057ed6: 990a         	ldr	r1, [sp, #0x28]
 8057ed8: 4401         	add	r1, r0
 8057eda: 2002         	movs	r0, #0x2
 8057edc: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             switch( eAction )
 8057ee0: f817 0c0d    	ldrb	r0, [r7, #-13]
 8057ee4: 4601         	mov	r1, r0
 8057ee6: 9100         	str	r1, [sp]
 8057ee8: 2800         	cmp	r0, #0x0
 8057eea: d03e         	beq	0x8057f6a <xTaskGenericNotifyFromISR+0x102> @ imm = #0x7c
 8057eec: e7ff         	b	0x8057eee <xTaskGenericNotifyFromISR+0x86> @ imm = #-0x2
 8057eee: 9800         	ldr	r0, [sp]
 8057ef0: 2801         	cmp	r0, #0x1
 8057ef2: d00c         	beq	0x8057f0e <xTaskGenericNotifyFromISR+0xa6> @ imm = #0x18
 8057ef4: e7ff         	b	0x8057ef6 <xTaskGenericNotifyFromISR+0x8e> @ imm = #-0x2
 8057ef6: 9800         	ldr	r0, [sp]
 8057ef8: 2802         	cmp	r0, #0x2
 8057efa: d013         	beq	0x8057f24 <xTaskGenericNotifyFromISR+0xbc> @ imm = #0x26
 8057efc: e7ff         	b	0x8057efe <xTaskGenericNotifyFromISR+0x96> @ imm = #-0x2
 8057efe: 9800         	ldr	r0, [sp]
 8057f00: 2803         	cmp	r0, #0x3
 8057f02: d019         	beq	0x8057f38 <xTaskGenericNotifyFromISR+0xd0> @ imm = #0x32
 8057f04: e7ff         	b	0x8057f06 <xTaskGenericNotifyFromISR+0x9e> @ imm = #-0x2
 8057f06: 9800         	ldr	r0, [sp]
 8057f08: 2804         	cmp	r0, #0x4
 8057f0a: d01d         	beq	0x8057f48 <xTaskGenericNotifyFromISR+0xe0> @ imm = #0x3a
 8057f0c: e02e         	b	0x8057f6c <xTaskGenericNotifyFromISR+0x104> @ imm = #0x5c
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8057f0e: 9a09         	ldr	r2, [sp, #0x24]
 8057f10: 9807         	ldr	r0, [sp, #0x1c]
 8057f12: 990a         	ldr	r1, [sp, #0x28]
 8057f14: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057f18: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057f1c: 4310         	orrs	r0, r2
 8057f1e: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057f22: e02f         	b	0x8057f84 <xTaskGenericNotifyFromISR+0x11c> @ imm = #0x5e
;                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8057f24: 9807         	ldr	r0, [sp, #0x1c]
 8057f26: 990a         	ldr	r1, [sp, #0x28]
 8057f28: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057f2c: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057f30: 3001         	adds	r0, #0x1
 8057f32: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057f36: e025         	b	0x8057f84 <xTaskGenericNotifyFromISR+0x11c> @ imm = #0x4a
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057f38: 9809         	ldr	r0, [sp, #0x24]
 8057f3a: 9907         	ldr	r1, [sp, #0x1c]
 8057f3c: 9a0a         	ldr	r2, [sp, #0x28]
 8057f3e: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057f42: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057f46: e01d         	b	0x8057f84 <xTaskGenericNotifyFromISR+0x11c> @ imm = #0x3a
;                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8057f48: f817 0c15    	ldrb	r0, [r7, #-21]
 8057f4c: 2802         	cmp	r0, #0x2
 8057f4e: d008         	beq	0x8057f62 <xTaskGenericNotifyFromISR+0xfa> @ imm = #0x10
 8057f50: e7ff         	b	0x8057f52 <xTaskGenericNotifyFromISR+0xea> @ imm = #-0x2
;                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057f52: 9809         	ldr	r0, [sp, #0x24]
 8057f54: 9907         	ldr	r1, [sp, #0x1c]
 8057f56: 9a0a         	ldr	r2, [sp, #0x28]
 8057f58: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057f5c: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     }
 8057f60: e002         	b	0x8057f68 <xTaskGenericNotifyFromISR+0x100> @ imm = #0x4
 8057f62: 2000         	movs	r0, #0x0
;                         xReturn = pdFAIL;
 8057f64: 9005         	str	r0, [sp, #0x14]
 8057f66: e7ff         	b	0x8057f68 <xTaskGenericNotifyFromISR+0x100> @ imm = #-0x2
;                     break;
 8057f68: e00c         	b	0x8057f84 <xTaskGenericNotifyFromISR+0x11c> @ imm = #0x18
;                     break;
 8057f6a: e00b         	b	0x8057f84 <xTaskGenericNotifyFromISR+0x11c> @ imm = #0x16
;                     configASSERT( xTickCount == ( TickType_t ) 0 );
 8057f6c: f240 102c    	movw	r0, #0x12c
 8057f70: f2c2 0000    	movt	r0, #0x2000
 8057f74: 6800         	ldr	r0, [r0]
 8057f76: b120         	cbz	r0, 0x8057f82 <xTaskGenericNotifyFromISR+0x11a> @ imm = #0x8
 8057f78: e7ff         	b	0x8057f7a <xTaskGenericNotifyFromISR+0x112> @ imm = #-0x2
 8057f7a: 486e         	ldr	r0, [pc, #0x1b8]        @ 0x8058134 <xTaskGenericNotifyFromISR+0x2cc>
 8057f7c: 4780         	blx	r0
 8057f7e: e7ff         	b	0x8057f80 <xTaskGenericNotifyFromISR+0x118> @ imm = #-0x2
 8057f80: e7fe         	b	0x8057f80 <xTaskGenericNotifyFromISR+0x118> @ imm = #-0x4
;                     break;
 8057f82: e7ff         	b	0x8057f84 <xTaskGenericNotifyFromISR+0x11c> @ imm = #-0x2
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8057f84: f817 0c15    	ldrb	r0, [r7, #-21]
 8057f88: 2801         	cmp	r0, #0x1
 8057f8a: f040 80c4    	bne.w	0x8058116 <xTaskGenericNotifyFromISR+0x2ae> @ imm = #0x188
 8057f8e: e7ff         	b	0x8057f90 <xTaskGenericNotifyFromISR+0x128> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8057f90: 9807         	ldr	r0, [sp, #0x1c]
 8057f92: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057f96: b120         	cbz	r0, 0x8057fa2 <xTaskGenericNotifyFromISR+0x13a> @ imm = #0x8
 8057f98: e7ff         	b	0x8057f9a <xTaskGenericNotifyFromISR+0x132> @ imm = #-0x2
 8057f9a: 4865         	ldr	r0, [pc, #0x194]        @ 0x8058130 <xTaskGenericNotifyFromISR+0x2c8>
 8057f9c: 4780         	blx	r0
 8057f9e: e7ff         	b	0x8057fa0 <xTaskGenericNotifyFromISR+0x138> @ imm = #-0x2
 8057fa0: e7fe         	b	0x8057fa0 <xTaskGenericNotifyFromISR+0x138> @ imm = #-0x4
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8057fa2: f240 1028    	movw	r0, #0x128
 8057fa6: f2c2 0000    	movt	r0, #0x2000
 8057faa: 6800         	ldr	r0, [r0]
 8057fac: 2800         	cmp	r0, #0x0
 8057fae: d174         	bne	0x805809a <xTaskGenericNotifyFromISR+0x232> @ imm = #0xe8
 8057fb0: e7ff         	b	0x8057fb2 <xTaskGenericNotifyFromISR+0x14a> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8057fb2: e7ff         	b	0x8057fb4 <xTaskGenericNotifyFromISR+0x14c> @ imm = #-0x2
 8057fb4: 9807         	ldr	r0, [sp, #0x1c]
 8057fb6: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8057fba: 9003         	str	r0, [sp, #0xc]
 8057fbc: 9807         	ldr	r0, [sp, #0x1c]
 8057fbe: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8057fc2: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057fc6: 6088         	str	r0, [r1, #0x8]
 8057fc8: 9907         	ldr	r1, [sp, #0x1c]
 8057fca: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8057fce: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8057fd2: 6048         	str	r0, [r1, #0x4]
 8057fd4: 9803         	ldr	r0, [sp, #0xc]
 8057fd6: 6840         	ldr	r0, [r0, #0x4]
 8057fd8: 9907         	ldr	r1, [sp, #0x1c]
 8057fda: 3180         	adds	r1, #0x80
 8057fdc: 4288         	cmp	r0, r1
 8057fde: d106         	bne	0x8057fee <xTaskGenericNotifyFromISR+0x186> @ imm = #0xc
 8057fe0: e7ff         	b	0x8057fe2 <xTaskGenericNotifyFromISR+0x17a> @ imm = #-0x2
 8057fe2: 9807         	ldr	r0, [sp, #0x1c]
 8057fe4: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057fe8: 9903         	ldr	r1, [sp, #0xc]
 8057fea: 6048         	str	r0, [r1, #0x4]
 8057fec: e7ff         	b	0x8057fee <xTaskGenericNotifyFromISR+0x186> @ imm = #-0x2
 8057fee: 9907         	ldr	r1, [sp, #0x1c]
 8057ff0: 2000         	movs	r0, #0x0
 8057ff2: f8c1 0090    	str.w	r0, [r1, #0x90]
 8057ff6: 9903         	ldr	r1, [sp, #0xc]
 8057ff8: 6808         	ldr	r0, [r1]
 8057ffa: 3801         	subs	r0, #0x1
 8057ffc: 6008         	str	r0, [r1]
 8057ffe: e7ff         	b	0x8058000 <xTaskGenericNotifyFromISR+0x198> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8058000: e7ff         	b	0x8058002 <xTaskGenericNotifyFromISR+0x19a> @ imm = #-0x2
 8058002: e7ff         	b	0x8058004 <xTaskGenericNotifyFromISR+0x19c> @ imm = #-0x2
 8058004: 9807         	ldr	r0, [sp, #0x1c]
 8058006: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805800a: f240 21a0    	movw	r1, #0x2a0
 805800e: f2c2 0100    	movt	r1, #0x2000
 8058012: 6809         	ldr	r1, [r1]
 8058014: 4288         	cmp	r0, r1
 8058016: d909         	bls	0x805802c <xTaskGenericNotifyFromISR+0x1c4> @ imm = #0x12
 8058018: e7ff         	b	0x805801a <xTaskGenericNotifyFromISR+0x1b2> @ imm = #-0x2
 805801a: 9807         	ldr	r0, [sp, #0x1c]
 805801c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058020: f240 21a0    	movw	r1, #0x2a0
 8058024: f2c2 0100    	movt	r1, #0x2000
 8058028: 6008         	str	r0, [r1]
 805802a: e7ff         	b	0x805802c <xTaskGenericNotifyFromISR+0x1c4> @ imm = #-0x2
 805802c: e7ff         	b	0x805802e <xTaskGenericNotifyFromISR+0x1c6> @ imm = #-0x2
 805802e: e7ff         	b	0x8058030 <xTaskGenericNotifyFromISR+0x1c8> @ imm = #-0x2
 8058030: 9807         	ldr	r0, [sp, #0x1c]
 8058032: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058036: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805803a: f240 1160    	movw	r1, #0x160
 805803e: f2c2 0100    	movt	r1, #0x2000
 8058042: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8058046: 6840         	ldr	r0, [r0, #0x4]
 8058048: 9002         	str	r0, [sp, #0x8]
 805804a: 9802         	ldr	r0, [sp, #0x8]
 805804c: 9a07         	ldr	r2, [sp, #0x1c]
 805804e: f8c2 0084    	str.w	r0, [r2, #0x84]
 8058052: 9802         	ldr	r0, [sp, #0x8]
 8058054: 6880         	ldr	r0, [r0, #0x8]
 8058056: 9a07         	ldr	r2, [sp, #0x1c]
 8058058: f8c2 0088    	str.w	r0, [r2, #0x88]
 805805c: 9807         	ldr	r0, [sp, #0x1c]
 805805e: 3080         	adds	r0, #0x80
 8058060: 9a02         	ldr	r2, [sp, #0x8]
 8058062: 6892         	ldr	r2, [r2, #0x8]
 8058064: 6050         	str	r0, [r2, #0x4]
 8058066: 9807         	ldr	r0, [sp, #0x1c]
 8058068: 3080         	adds	r0, #0x80
 805806a: 9a02         	ldr	r2, [sp, #0x8]
 805806c: 6090         	str	r0, [r2, #0x8]
 805806e: 9a07         	ldr	r2, [sp, #0x1c]
 8058070: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8058074: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058078: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805807c: f8c2 0090    	str.w	r0, [r2, #0x90]
 8058080: 9807         	ldr	r0, [sp, #0x1c]
 8058082: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058086: eb00 0280    	add.w	r2, r0, r0, lsl #2
 805808a: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 805808e: 3001         	adds	r0, #0x1
 8058090: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8058094: e7ff         	b	0x8058096 <xTaskGenericNotifyFromISR+0x22e> @ imm = #-0x2
 8058096: e7ff         	b	0x8058098 <xTaskGenericNotifyFromISR+0x230> @ imm = #-0x2
;                 }
 8058098: e020         	b	0x80580dc <xTaskGenericNotifyFromISR+0x274> @ imm = #0x40
;                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 805809a: e7ff         	b	0x805809c <xTaskGenericNotifyFromISR+0x234> @ imm = #-0x2
 805809c: f240 1138    	movw	r1, #0x138
 80580a0: f2c2 0100    	movt	r1, #0x2000
 80580a4: 6848         	ldr	r0, [r1, #0x4]
 80580a6: 9001         	str	r0, [sp, #0x4]
 80580a8: 9801         	ldr	r0, [sp, #0x4]
 80580aa: 9a07         	ldr	r2, [sp, #0x1c]
 80580ac: f8c2 0098    	str.w	r0, [r2, #0x98]
 80580b0: 9801         	ldr	r0, [sp, #0x4]
 80580b2: 6880         	ldr	r0, [r0, #0x8]
 80580b4: 9a07         	ldr	r2, [sp, #0x1c]
 80580b6: f8c2 009c    	str.w	r0, [r2, #0x9c]
 80580ba: 9807         	ldr	r0, [sp, #0x1c]
 80580bc: 3094         	adds	r0, #0x94
 80580be: 9a01         	ldr	r2, [sp, #0x4]
 80580c0: 6892         	ldr	r2, [r2, #0x8]
 80580c2: 6050         	str	r0, [r2, #0x4]
 80580c4: 9807         	ldr	r0, [sp, #0x1c]
 80580c6: 3094         	adds	r0, #0x94
 80580c8: 9a01         	ldr	r2, [sp, #0x4]
 80580ca: 6090         	str	r0, [r2, #0x8]
 80580cc: 9807         	ldr	r0, [sp, #0x1c]
 80580ce: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 80580d2: 6808         	ldr	r0, [r1]
 80580d4: 3001         	adds	r0, #0x1
 80580d6: 6008         	str	r0, [r1]
 80580d8: e7ff         	b	0x80580da <xTaskGenericNotifyFromISR+0x272> @ imm = #-0x2
 80580da: e7ff         	b	0x80580dc <xTaskGenericNotifyFromISR+0x274> @ imm = #-0x2
;                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80580dc: 9807         	ldr	r0, [sp, #0x1c]
 80580de: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80580e2: f240 1100    	movw	r1, #0x100
 80580e6: f2c2 0100    	movt	r1, #0x2000
 80580ea: 6809         	ldr	r1, [r1]
 80580ec: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80580f0: 4288         	cmp	r0, r1
 80580f2: d90e         	bls	0x8058112 <xTaskGenericNotifyFromISR+0x2aa> @ imm = #0x1c
 80580f4: e7ff         	b	0x80580f6 <xTaskGenericNotifyFromISR+0x28e> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 80580f6: 68f8         	ldr	r0, [r7, #0xc]
 80580f8: b120         	cbz	r0, 0x8058104 <xTaskGenericNotifyFromISR+0x29c> @ imm = #0x8
 80580fa: e7ff         	b	0x80580fc <xTaskGenericNotifyFromISR+0x294> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 80580fc: 68f9         	ldr	r1, [r7, #0xc]
 80580fe: 2001         	movs	r0, #0x1
 8058100: 6008         	str	r0, [r1]
;                         }
 8058102: e7ff         	b	0x8058104 <xTaskGenericNotifyFromISR+0x29c> @ imm = #-0x2
;                         xYieldPendings[ 0 ] = pdTRUE;
 8058104: f240 21a4    	movw	r1, #0x2a4
 8058108: f2c2 0100    	movt	r1, #0x2000
 805810c: 2001         	movs	r0, #0x1
 805810e: 6008         	str	r0, [r1]
;                     }
 8058110: e000         	b	0x8058114 <xTaskGenericNotifyFromISR+0x2ac> @ imm = #0x0
 8058112: e7ff         	b	0x8058114 <xTaskGenericNotifyFromISR+0x2ac> @ imm = #-0x2
;             }
 8058114: e7ff         	b	0x8058116 <xTaskGenericNotifyFromISR+0x2ae> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8058116: 9804         	ldr	r0, [sp, #0x10]
 8058118: 4904         	ldr	r1, [pc, #0x10]         @ 0x805812c <xTaskGenericNotifyFromISR+0x2c4>
 805811a: 4788         	blx	r1
;         return xReturn;
 805811c: 9805         	ldr	r0, [sp, #0x14]
 805811e: b00c         	add	sp, #0x30
 8058120: bd80         	pop	{r7, pc}
 8058122: bf00         	nop

08058124 <$d.95>:
 8058124: 45 ea 05 08  	.word	0x0805ea45
 8058128: 55 cd 05 08  	.word	0x0805cd55
 805812c: 6b cd 05 08  	.word	0x0805cd6b
 8058130: 55 cd 05 08  	.word	0x0805cd55
 8058134: 55 cd 05 08  	.word	0x0805cd55
 8058138: 55 cd 05 08  	.word	0x0805cd55
 805813c: 55 cd 05 08  	.word	0x0805cd55

08058140 <vTaskGenericNotifyGiveFromISR>:
;     {
 8058140: b580         	push	{r7, lr}
 8058142: 466f         	mov	r7, sp
 8058144: b08a         	sub	sp, #0x28
 8058146: 9009         	str	r0, [sp, #0x24]
 8058148: 9108         	str	r1, [sp, #0x20]
 805814a: 9207         	str	r2, [sp, #0x1c]
;         configASSERT( xTaskToNotify );
 805814c: 9809         	ldr	r0, [sp, #0x24]
 805814e: b920         	cbnz	r0, 0x805815a <vTaskGenericNotifyGiveFromISR+0x1a> @ imm = #0x8
 8058150: e7ff         	b	0x8058152 <vTaskGenericNotifyGiveFromISR+0x12> @ imm = #-0x2
 8058152: 4880         	ldr	r0, [pc, #0x200]        @ 0x8058354 <vTaskGenericNotifyGiveFromISR+0x214>
 8058154: 4780         	blx	r0
 8058156: e7ff         	b	0x8058158 <vTaskGenericNotifyGiveFromISR+0x18> @ imm = #-0x2
 8058158: e7fe         	b	0x8058158 <vTaskGenericNotifyGiveFromISR+0x18> @ imm = #-0x4
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 805815a: 9808         	ldr	r0, [sp, #0x20]
 805815c: b120         	cbz	r0, 0x8058168 <vTaskGenericNotifyGiveFromISR+0x28> @ imm = #0x8
 805815e: e7ff         	b	0x8058160 <vTaskGenericNotifyGiveFromISR+0x20> @ imm = #-0x2
 8058160: 487b         	ldr	r0, [pc, #0x1ec]        @ 0x8058350 <vTaskGenericNotifyGiveFromISR+0x210>
 8058162: 4780         	blx	r0
 8058164: e7ff         	b	0x8058166 <vTaskGenericNotifyGiveFromISR+0x26> @ imm = #-0x2
 8058166: e7fe         	b	0x8058166 <vTaskGenericNotifyGiveFromISR+0x26> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8058168: 4875         	ldr	r0, [pc, #0x1d4]        @ 0x8058340 <vTaskGenericNotifyGiveFromISR+0x200>
 805816a: 4780         	blx	r0
;         pxTCB = xTaskToNotify;
 805816c: 9809         	ldr	r0, [sp, #0x24]
 805816e: 9006         	str	r0, [sp, #0x18]
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8058170: 4874         	ldr	r0, [pc, #0x1d0]        @ 0x8058344 <vTaskGenericNotifyGiveFromISR+0x204>
 8058172: 4780         	blx	r0
 8058174: 9004         	str	r0, [sp, #0x10]
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8058176: 9806         	ldr	r0, [sp, #0x18]
 8058178: 9908         	ldr	r1, [sp, #0x20]
 805817a: 4408         	add	r0, r1
 805817c: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8058180: f807 0c11    	strb	r0, [r7, #-17]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8058184: 9806         	ldr	r0, [sp, #0x18]
 8058186: 9908         	ldr	r1, [sp, #0x20]
 8058188: 4401         	add	r1, r0
 805818a: 2002         	movs	r0, #0x2
 805818c: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8058190: 9806         	ldr	r0, [sp, #0x18]
 8058192: 9908         	ldr	r1, [sp, #0x20]
 8058194: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8058198: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 805819c: 3001         	adds	r0, #0x1
 805819e: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80581a2: f817 0c11    	ldrb	r0, [r7, #-17]
 80581a6: 2801         	cmp	r0, #0x1
 80581a8: f040 80c4    	bne.w	0x8058334 <vTaskGenericNotifyGiveFromISR+0x1f4> @ imm = #0x188
 80581ac: e7ff         	b	0x80581ae <vTaskGenericNotifyGiveFromISR+0x6e> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80581ae: 9806         	ldr	r0, [sp, #0x18]
 80581b0: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80581b4: b120         	cbz	r0, 0x80581c0 <vTaskGenericNotifyGiveFromISR+0x80> @ imm = #0x8
 80581b6: e7ff         	b	0x80581b8 <vTaskGenericNotifyGiveFromISR+0x78> @ imm = #-0x2
 80581b8: 4864         	ldr	r0, [pc, #0x190]        @ 0x805834c <vTaskGenericNotifyGiveFromISR+0x20c>
 80581ba: 4780         	blx	r0
 80581bc: e7ff         	b	0x80581be <vTaskGenericNotifyGiveFromISR+0x7e> @ imm = #-0x2
 80581be: e7fe         	b	0x80581be <vTaskGenericNotifyGiveFromISR+0x7e> @ imm = #-0x4
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80581c0: f240 1028    	movw	r0, #0x128
 80581c4: f2c2 0000    	movt	r0, #0x2000
 80581c8: 6800         	ldr	r0, [r0]
 80581ca: 2800         	cmp	r0, #0x0
 80581cc: d174         	bne	0x80582b8 <vTaskGenericNotifyGiveFromISR+0x178> @ imm = #0xe8
 80581ce: e7ff         	b	0x80581d0 <vTaskGenericNotifyGiveFromISR+0x90> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80581d0: e7ff         	b	0x80581d2 <vTaskGenericNotifyGiveFromISR+0x92> @ imm = #-0x2
 80581d2: 9806         	ldr	r0, [sp, #0x18]
 80581d4: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80581d8: 9003         	str	r0, [sp, #0xc]
 80581da: 9806         	ldr	r0, [sp, #0x18]
 80581dc: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 80581e0: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80581e4: 6088         	str	r0, [r1, #0x8]
 80581e6: 9906         	ldr	r1, [sp, #0x18]
 80581e8: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 80581ec: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 80581f0: 6048         	str	r0, [r1, #0x4]
 80581f2: 9803         	ldr	r0, [sp, #0xc]
 80581f4: 6840         	ldr	r0, [r0, #0x4]
 80581f6: 9906         	ldr	r1, [sp, #0x18]
 80581f8: 3180         	adds	r1, #0x80
 80581fa: 4288         	cmp	r0, r1
 80581fc: d106         	bne	0x805820c <vTaskGenericNotifyGiveFromISR+0xcc> @ imm = #0xc
 80581fe: e7ff         	b	0x8058200 <vTaskGenericNotifyGiveFromISR+0xc0> @ imm = #-0x2
 8058200: 9806         	ldr	r0, [sp, #0x18]
 8058202: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8058206: 9903         	ldr	r1, [sp, #0xc]
 8058208: 6048         	str	r0, [r1, #0x4]
 805820a: e7ff         	b	0x805820c <vTaskGenericNotifyGiveFromISR+0xcc> @ imm = #-0x2
 805820c: 9906         	ldr	r1, [sp, #0x18]
 805820e: 2000         	movs	r0, #0x0
 8058210: f8c1 0090    	str.w	r0, [r1, #0x90]
 8058214: 9903         	ldr	r1, [sp, #0xc]
 8058216: 6808         	ldr	r0, [r1]
 8058218: 3801         	subs	r0, #0x1
 805821a: 6008         	str	r0, [r1]
 805821c: e7ff         	b	0x805821e <vTaskGenericNotifyGiveFromISR+0xde> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 805821e: e7ff         	b	0x8058220 <vTaskGenericNotifyGiveFromISR+0xe0> @ imm = #-0x2
 8058220: e7ff         	b	0x8058222 <vTaskGenericNotifyGiveFromISR+0xe2> @ imm = #-0x2
 8058222: 9806         	ldr	r0, [sp, #0x18]
 8058224: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058228: f240 21a0    	movw	r1, #0x2a0
 805822c: f2c2 0100    	movt	r1, #0x2000
 8058230: 6809         	ldr	r1, [r1]
 8058232: 4288         	cmp	r0, r1
 8058234: d909         	bls	0x805824a <vTaskGenericNotifyGiveFromISR+0x10a> @ imm = #0x12
 8058236: e7ff         	b	0x8058238 <vTaskGenericNotifyGiveFromISR+0xf8> @ imm = #-0x2
 8058238: 9806         	ldr	r0, [sp, #0x18]
 805823a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805823e: f240 21a0    	movw	r1, #0x2a0
 8058242: f2c2 0100    	movt	r1, #0x2000
 8058246: 6008         	str	r0, [r1]
 8058248: e7ff         	b	0x805824a <vTaskGenericNotifyGiveFromISR+0x10a> @ imm = #-0x2
 805824a: e7ff         	b	0x805824c <vTaskGenericNotifyGiveFromISR+0x10c> @ imm = #-0x2
 805824c: e7ff         	b	0x805824e <vTaskGenericNotifyGiveFromISR+0x10e> @ imm = #-0x2
 805824e: 9806         	ldr	r0, [sp, #0x18]
 8058250: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058254: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058258: f240 1160    	movw	r1, #0x160
 805825c: f2c2 0100    	movt	r1, #0x2000
 8058260: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8058264: 6840         	ldr	r0, [r0, #0x4]
 8058266: 9002         	str	r0, [sp, #0x8]
 8058268: 9802         	ldr	r0, [sp, #0x8]
 805826a: 9a06         	ldr	r2, [sp, #0x18]
 805826c: f8c2 0084    	str.w	r0, [r2, #0x84]
 8058270: 9802         	ldr	r0, [sp, #0x8]
 8058272: 6880         	ldr	r0, [r0, #0x8]
 8058274: 9a06         	ldr	r2, [sp, #0x18]
 8058276: f8c2 0088    	str.w	r0, [r2, #0x88]
 805827a: 9806         	ldr	r0, [sp, #0x18]
 805827c: 3080         	adds	r0, #0x80
 805827e: 9a02         	ldr	r2, [sp, #0x8]
 8058280: 6892         	ldr	r2, [r2, #0x8]
 8058282: 6050         	str	r0, [r2, #0x4]
 8058284: 9806         	ldr	r0, [sp, #0x18]
 8058286: 3080         	adds	r0, #0x80
 8058288: 9a02         	ldr	r2, [sp, #0x8]
 805828a: 6090         	str	r0, [r2, #0x8]
 805828c: 9a06         	ldr	r2, [sp, #0x18]
 805828e: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8058292: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058296: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805829a: f8c2 0090    	str.w	r0, [r2, #0x90]
 805829e: 9806         	ldr	r0, [sp, #0x18]
 80582a0: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80582a4: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80582a8: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80582ac: 3001         	adds	r0, #0x1
 80582ae: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80582b2: e7ff         	b	0x80582b4 <vTaskGenericNotifyGiveFromISR+0x174> @ imm = #-0x2
 80582b4: e7ff         	b	0x80582b6 <vTaskGenericNotifyGiveFromISR+0x176> @ imm = #-0x2
;                 }
 80582b6: e020         	b	0x80582fa <vTaskGenericNotifyGiveFromISR+0x1ba> @ imm = #0x40
;                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80582b8: e7ff         	b	0x80582ba <vTaskGenericNotifyGiveFromISR+0x17a> @ imm = #-0x2
 80582ba: f240 1138    	movw	r1, #0x138
 80582be: f2c2 0100    	movt	r1, #0x2000
 80582c2: 6848         	ldr	r0, [r1, #0x4]
 80582c4: 9001         	str	r0, [sp, #0x4]
 80582c6: 9801         	ldr	r0, [sp, #0x4]
 80582c8: 9a06         	ldr	r2, [sp, #0x18]
 80582ca: f8c2 0098    	str.w	r0, [r2, #0x98]
 80582ce: 9801         	ldr	r0, [sp, #0x4]
 80582d0: 6880         	ldr	r0, [r0, #0x8]
 80582d2: 9a06         	ldr	r2, [sp, #0x18]
 80582d4: f8c2 009c    	str.w	r0, [r2, #0x9c]
 80582d8: 9806         	ldr	r0, [sp, #0x18]
 80582da: 3094         	adds	r0, #0x94
 80582dc: 9a01         	ldr	r2, [sp, #0x4]
 80582de: 6892         	ldr	r2, [r2, #0x8]
 80582e0: 6050         	str	r0, [r2, #0x4]
 80582e2: 9806         	ldr	r0, [sp, #0x18]
 80582e4: 3094         	adds	r0, #0x94
 80582e6: 9a01         	ldr	r2, [sp, #0x4]
 80582e8: 6090         	str	r0, [r2, #0x8]
 80582ea: 9806         	ldr	r0, [sp, #0x18]
 80582ec: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 80582f0: 6808         	ldr	r0, [r1]
 80582f2: 3001         	adds	r0, #0x1
 80582f4: 6008         	str	r0, [r1]
 80582f6: e7ff         	b	0x80582f8 <vTaskGenericNotifyGiveFromISR+0x1b8> @ imm = #-0x2
 80582f8: e7ff         	b	0x80582fa <vTaskGenericNotifyGiveFromISR+0x1ba> @ imm = #-0x2
;                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80582fa: 9806         	ldr	r0, [sp, #0x18]
 80582fc: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058300: f240 1100    	movw	r1, #0x100
 8058304: f2c2 0100    	movt	r1, #0x2000
 8058308: 6809         	ldr	r1, [r1]
 805830a: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 805830e: 4288         	cmp	r0, r1
 8058310: d90e         	bls	0x8058330 <vTaskGenericNotifyGiveFromISR+0x1f0> @ imm = #0x1c
 8058312: e7ff         	b	0x8058314 <vTaskGenericNotifyGiveFromISR+0x1d4> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 8058314: 9807         	ldr	r0, [sp, #0x1c]
 8058316: b120         	cbz	r0, 0x8058322 <vTaskGenericNotifyGiveFromISR+0x1e2> @ imm = #0x8
 8058318: e7ff         	b	0x805831a <vTaskGenericNotifyGiveFromISR+0x1da> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 805831a: 9907         	ldr	r1, [sp, #0x1c]
 805831c: 2001         	movs	r0, #0x1
 805831e: 6008         	str	r0, [r1]
;                         }
 8058320: e7ff         	b	0x8058322 <vTaskGenericNotifyGiveFromISR+0x1e2> @ imm = #-0x2
;                         xYieldPendings[ 0 ] = pdTRUE;
 8058322: f240 21a4    	movw	r1, #0x2a4
 8058326: f2c2 0100    	movt	r1, #0x2000
 805832a: 2001         	movs	r0, #0x1
 805832c: 6008         	str	r0, [r1]
;                     }
 805832e: e000         	b	0x8058332 <vTaskGenericNotifyGiveFromISR+0x1f2> @ imm = #0x0
 8058330: e7ff         	b	0x8058332 <vTaskGenericNotifyGiveFromISR+0x1f2> @ imm = #-0x2
;             }
 8058332: e7ff         	b	0x8058334 <vTaskGenericNotifyGiveFromISR+0x1f4> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8058334: 9804         	ldr	r0, [sp, #0x10]
 8058336: 4904         	ldr	r1, [pc, #0x10]         @ 0x8058348 <vTaskGenericNotifyGiveFromISR+0x208>
 8058338: 4788         	blx	r1
;     }
 805833a: b00a         	add	sp, #0x28
 805833c: bd80         	pop	{r7, pc}
 805833e: bf00         	nop

08058340 <$d.97>:
 8058340: 45 ea 05 08  	.word	0x0805ea45
 8058344: 55 cd 05 08  	.word	0x0805cd55
 8058348: 6b cd 05 08  	.word	0x0805cd6b
 805834c: 55 cd 05 08  	.word	0x0805cd55
 8058350: 55 cd 05 08  	.word	0x0805cd55
 8058354: 55 cd 05 08  	.word	0x0805cd55

08058358 <xTaskGenericNotifyStateClear>:
;     {
 8058358: b580         	push	{r7, lr}
 805835a: 466f         	mov	r7, sp
 805835c: b086         	sub	sp, #0x18
 805835e: 9005         	str	r0, [sp, #0x14]
 8058360: 9104         	str	r1, [sp, #0x10]
;         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8058362: 9804         	ldr	r0, [sp, #0x10]
 8058364: b120         	cbz	r0, 0x8058370 <xTaskGenericNotifyStateClear+0x18> @ imm = #0x8
 8058366: e7ff         	b	0x8058368 <xTaskGenericNotifyStateClear+0x10> @ imm = #-0x2
 8058368: 4818         	ldr	r0, [pc, #0x60]         @ 0x80583cc <xTaskGenericNotifyStateClear+0x74>
 805836a: 4780         	blx	r0
 805836c: e7ff         	b	0x805836e <xTaskGenericNotifyStateClear+0x16> @ imm = #-0x2
 805836e: e7fe         	b	0x805836e <xTaskGenericNotifyStateClear+0x16> @ imm = #-0x4
;         pxTCB = prvGetTCBFromHandle( xTask );
 8058370: 9805         	ldr	r0, [sp, #0x14]
 8058372: b938         	cbnz	r0, 0x8058384 <xTaskGenericNotifyStateClear+0x2c> @ imm = #0xe
 8058374: e7ff         	b	0x8058376 <xTaskGenericNotifyStateClear+0x1e> @ imm = #-0x2
 8058376: f240 1000    	movw	r0, #0x100
 805837a: f2c2 0000    	movt	r0, #0x2000
 805837e: 6800         	ldr	r0, [r0]
 8058380: 9001         	str	r0, [sp, #0x4]
 8058382: e002         	b	0x805838a <xTaskGenericNotifyStateClear+0x32> @ imm = #0x4
 8058384: 9805         	ldr	r0, [sp, #0x14]
 8058386: 9001         	str	r0, [sp, #0x4]
 8058388: e7ff         	b	0x805838a <xTaskGenericNotifyStateClear+0x32> @ imm = #-0x2
 805838a: 9801         	ldr	r0, [sp, #0x4]
 805838c: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 805838e: 480d         	ldr	r0, [pc, #0x34]         @ 0x80583c4 <xTaskGenericNotifyStateClear+0x6c>
 8058390: 4780         	blx	r0
;             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8058392: 9803         	ldr	r0, [sp, #0xc]
 8058394: 9904         	ldr	r1, [sp, #0x10]
 8058396: 4408         	add	r0, r1
 8058398: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 805839c: 2802         	cmp	r0, #0x2
 805839e: d109         	bne	0x80583b4 <xTaskGenericNotifyStateClear+0x5c> @ imm = #0x12
 80583a0: e7ff         	b	0x80583a2 <xTaskGenericNotifyStateClear+0x4a> @ imm = #-0x2
;                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 80583a2: 9803         	ldr	r0, [sp, #0xc]
 80583a4: 9904         	ldr	r1, [sp, #0x10]
 80583a6: 4401         	add	r1, r0
 80583a8: 2000         	movs	r0, #0x0
 80583aa: f881 00d4    	strb.w	r0, [r1, #0xd4]
 80583ae: 2001         	movs	r0, #0x1
;                 xReturn = pdPASS;
 80583b0: 9002         	str	r0, [sp, #0x8]
;             }
 80583b2: e002         	b	0x80583ba <xTaskGenericNotifyStateClear+0x62> @ imm = #0x4
 80583b4: 2000         	movs	r0, #0x0
;                 xReturn = pdFAIL;
 80583b6: 9002         	str	r0, [sp, #0x8]
 80583b8: e7ff         	b	0x80583ba <xTaskGenericNotifyStateClear+0x62> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 80583ba: 4803         	ldr	r0, [pc, #0xc]          @ 0x80583c8 <xTaskGenericNotifyStateClear+0x70>
 80583bc: 4780         	blx	r0
;         return xReturn;
 80583be: 9802         	ldr	r0, [sp, #0x8]
 80583c0: b006         	add	sp, #0x18
 80583c2: bd80         	pop	{r7, pc}

080583c4 <$d.99>:
 80583c4: 19 c4 05 08  	.word	0x0805c419
 80583c8: 3d c4 05 08  	.word	0x0805c43d
 80583cc: 55 cd 05 08  	.word	0x0805cd55

080583d0 <ulTaskGenericNotifyValueClear>:
;     {
 80583d0: b580         	push	{r7, lr}
 80583d2: 466f         	mov	r7, sp
 80583d4: b086         	sub	sp, #0x18
 80583d6: 9005         	str	r0, [sp, #0x14]
 80583d8: 9104         	str	r1, [sp, #0x10]
 80583da: 9203         	str	r2, [sp, #0xc]
;         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80583dc: 9804         	ldr	r0, [sp, #0x10]
 80583de: b120         	cbz	r0, 0x80583ea <ulTaskGenericNotifyValueClear+0x1a> @ imm = #0x8
 80583e0: e7ff         	b	0x80583e2 <ulTaskGenericNotifyValueClear+0x12> @ imm = #-0x2
 80583e2: 4817         	ldr	r0, [pc, #0x5c]         @ 0x8058440 <ulTaskGenericNotifyValueClear+0x70>
 80583e4: 4780         	blx	r0
 80583e6: e7ff         	b	0x80583e8 <ulTaskGenericNotifyValueClear+0x18> @ imm = #-0x2
 80583e8: e7fe         	b	0x80583e8 <ulTaskGenericNotifyValueClear+0x18> @ imm = #-0x4
;         pxTCB = prvGetTCBFromHandle( xTask );
 80583ea: 9805         	ldr	r0, [sp, #0x14]
 80583ec: b938         	cbnz	r0, 0x80583fe <ulTaskGenericNotifyValueClear+0x2e> @ imm = #0xe
 80583ee: e7ff         	b	0x80583f0 <ulTaskGenericNotifyValueClear+0x20> @ imm = #-0x2
 80583f0: f240 1000    	movw	r0, #0x100
 80583f4: f2c2 0000    	movt	r0, #0x2000
 80583f8: 6800         	ldr	r0, [r0]
 80583fa: 9000         	str	r0, [sp]
 80583fc: e002         	b	0x8058404 <ulTaskGenericNotifyValueClear+0x34> @ imm = #0x4
 80583fe: 9805         	ldr	r0, [sp, #0x14]
 8058400: 9000         	str	r0, [sp]
 8058402: e7ff         	b	0x8058404 <ulTaskGenericNotifyValueClear+0x34> @ imm = #-0x2
 8058404: 9800         	ldr	r0, [sp]
 8058406: 9002         	str	r0, [sp, #0x8]
;         taskENTER_CRITICAL();
 8058408: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8058438 <ulTaskGenericNotifyValueClear+0x68>
 805840a: 4780         	blx	r0
;             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 805840c: 9802         	ldr	r0, [sp, #0x8]
 805840e: 9904         	ldr	r1, [sp, #0x10]
 8058410: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8058414: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8058418: 9001         	str	r0, [sp, #0x4]
;             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 805841a: 9a03         	ldr	r2, [sp, #0xc]
 805841c: 9802         	ldr	r0, [sp, #0x8]
 805841e: 9904         	ldr	r1, [sp, #0x10]
 8058420: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8058424: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8058428: 4390         	bics	r0, r2
 805842a: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;         taskEXIT_CRITICAL();
 805842e: 4803         	ldr	r0, [pc, #0xc]          @ 0x805843c <ulTaskGenericNotifyValueClear+0x6c>
 8058430: 4780         	blx	r0
;         return ulReturn;
 8058432: 9801         	ldr	r0, [sp, #0x4]
 8058434: b006         	add	sp, #0x18
 8058436: bd80         	pop	{r7, pc}

08058438 <$d.101>:
 8058438: 19 c4 05 08  	.word	0x0805c419
 805843c: 3d c4 05 08  	.word	0x0805c43d
 8058440: 55 cd 05 08  	.word	0x0805cd55

08058444 <xTaskGetMPUSettings>:
;     {
 8058444: b083         	sub	sp, #0xc
 8058446: 9002         	str	r0, [sp, #0x8]
;         pxTCB = prvGetTCBFromHandle( xTask );
 8058448: 9802         	ldr	r0, [sp, #0x8]
 805844a: b938         	cbnz	r0, 0x805845c <xTaskGetMPUSettings+0x18> @ imm = #0xe
 805844c: e7ff         	b	0x805844e <xTaskGetMPUSettings+0xa> @ imm = #-0x2
 805844e: f240 1000    	movw	r0, #0x100
 8058452: f2c2 0000    	movt	r0, #0x2000
 8058456: 6800         	ldr	r0, [r0]
 8058458: 9000         	str	r0, [sp]
 805845a: e002         	b	0x8058462 <xTaskGetMPUSettings+0x1e> @ imm = #0x4
 805845c: 9802         	ldr	r0, [sp, #0x8]
 805845e: 9000         	str	r0, [sp]
 8058460: e7ff         	b	0x8058462 <xTaskGetMPUSettings+0x1e> @ imm = #-0x2
 8058462: 9800         	ldr	r0, [sp]
 8058464: 9001         	str	r0, [sp, #0x4]
;         return &( pxTCB->xMPUSettings );
 8058466: 9801         	ldr	r0, [sp, #0x4]
 8058468: 3004         	adds	r0, #0x4
 805846a: b003         	add	sp, #0xc
 805846c: 4770         	bx	lr
 805846e: bf00         	nop

08058470 <prvInitialiseNewTask>:
; {
 8058470: b5d0         	push	{r4, r6, r7, lr}
 8058472: af02         	add	r7, sp, #0x8
 8058474: b08a         	sub	sp, #0x28
 8058476: f8d7 c014    	ldr.w	r12, [r7, #0x14]
 805847a: f8d7 c010    	ldr.w	r12, [r7, #0x10]
 805847e: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8058482: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8058486: 9009         	str	r0, [sp, #0x24]
 8058488: 9108         	str	r1, [sp, #0x20]
 805848a: 9207         	str	r2, [sp, #0x1c]
 805848c: 9306         	str	r3, [sp, #0x18]
;         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 805848e: 7af8         	ldrb	r0, [r7, #0xb]
 8058490: 0600         	lsls	r0, r0, #0x18
 8058492: 2800         	cmp	r0, #0x0
 8058494: d503         	bpl	0x805849e <prvInitialiseNewTask+0x2e> @ imm = #0x6
 8058496: e7ff         	b	0x8058498 <prvInitialiseNewTask+0x28> @ imm = #-0x2
 8058498: 2001         	movs	r0, #0x1
;             xRunPrivileged = pdTRUE;
 805849a: 9003         	str	r0, [sp, #0xc]
;         }
 805849c: e002         	b	0x80584a4 <prvInitialiseNewTask+0x34> @ imm = #0x4
 805849e: 2000         	movs	r0, #0x0
;             xRunPrivileged = pdFALSE;
 80584a0: 9003         	str	r0, [sp, #0xc]
 80584a2: e7ff         	b	0x80584a4 <prvInitialiseNewTask+0x34> @ imm = #-0x2
;         uxPriority &= ~portPRIVILEGE_BIT;
 80584a4: 68b8         	ldr	r0, [r7, #0x8]
 80584a6: f020 4000    	bic	r0, r0, #0x80000000
 80584aa: 60b8         	str	r0, [r7, #0x8]
;         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80584ac: 6938         	ldr	r0, [r7, #0x10]
 80584ae: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 80584b2: 9907         	ldr	r1, [sp, #0x1c]
 80584b4: 008a         	lsls	r2, r1, #0x2
 80584b6: 4b47         	ldr	r3, [pc, #0x11c]        @ 0x80585d4 <prvInitialiseNewTask+0x164>
 80584b8: 21a5         	movs	r1, #0xa5
 80584ba: 4798         	blx	r3
;         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80584bc: 6938         	ldr	r0, [r7, #0x10]
 80584be: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 80584c2: 9907         	ldr	r1, [sp, #0x1c]
 80584c4: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80584c8: 3804         	subs	r0, #0x4
 80584ca: 9005         	str	r0, [sp, #0x14]
;         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80584cc: 9805         	ldr	r0, [sp, #0x14]
 80584ce: f020 0007    	bic	r0, r0, #0x7
 80584d2: 9005         	str	r0, [sp, #0x14]
;         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80584d4: f89d 0014    	ldrb.w	r0, [sp, #0x14]
 80584d8: 0740         	lsls	r0, r0, #0x1d
 80584da: b120         	cbz	r0, 0x80584e6 <prvInitialiseNewTask+0x76> @ imm = #0x8
 80584dc: e7ff         	b	0x80584de <prvInitialiseNewTask+0x6e> @ imm = #-0x2
 80584de: 4843         	ldr	r0, [pc, #0x10c]        @ 0x80585ec <prvInitialiseNewTask+0x17c>
 80584e0: 4780         	blx	r0
 80584e2: e7ff         	b	0x80584e4 <prvInitialiseNewTask+0x74> @ imm = #-0x2
 80584e4: e7fe         	b	0x80584e4 <prvInitialiseNewTask+0x74> @ imm = #-0x4
;     if( pcName != NULL )
 80584e6: 9808         	ldr	r0, [sp, #0x20]
 80584e8: b1f8         	cbz	r0, 0x805852a <prvInitialiseNewTask+0xba> @ imm = #0x3e
 80584ea: e7ff         	b	0x80584ec <prvInitialiseNewTask+0x7c> @ imm = #-0x2
 80584ec: 2000         	movs	r0, #0x0
;         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80584ee: 9004         	str	r0, [sp, #0x10]
 80584f0: e7ff         	b	0x80584f2 <prvInitialiseNewTask+0x82> @ imm = #-0x2
 80584f2: 9804         	ldr	r0, [sp, #0x10]
 80584f4: 280f         	cmp	r0, #0xf
 80584f6: d813         	bhi	0x8058520 <prvInitialiseNewTask+0xb0> @ imm = #0x26
 80584f8: e7ff         	b	0x80584fa <prvInitialiseNewTask+0x8a> @ imm = #-0x2
;             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80584fa: 9808         	ldr	r0, [sp, #0x20]
 80584fc: 9a04         	ldr	r2, [sp, #0x10]
 80584fe: 5c80         	ldrb	r0, [r0, r2]
 8058500: 6939         	ldr	r1, [r7, #0x10]
 8058502: 4411         	add	r1, r2
 8058504: f881 00b0    	strb.w	r0, [r1, #0xb0]
;             if( pcName[ x ] == ( char ) 0x00 )
 8058508: 9808         	ldr	r0, [sp, #0x20]
 805850a: 9904         	ldr	r1, [sp, #0x10]
 805850c: 5c40         	ldrb	r0, [r0, r1]
 805850e: b908         	cbnz	r0, 0x8058514 <prvInitialiseNewTask+0xa4> @ imm = #0x2
 8058510: e7ff         	b	0x8058512 <prvInitialiseNewTask+0xa2> @ imm = #-0x2
;                 break;
 8058512: e005         	b	0x8058520 <prvInitialiseNewTask+0xb0> @ imm = #0xa
 8058514: e7ff         	b	0x8058516 <prvInitialiseNewTask+0xa6> @ imm = #-0x2
;         }
 8058516: e7ff         	b	0x8058518 <prvInitialiseNewTask+0xa8> @ imm = #-0x2
;         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8058518: 9804         	ldr	r0, [sp, #0x10]
 805851a: 3001         	adds	r0, #0x1
 805851c: 9004         	str	r0, [sp, #0x10]
 805851e: e7e8         	b	0x80584f2 <prvInitialiseNewTask+0x82> @ imm = #-0x30
;         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8058520: 6939         	ldr	r1, [r7, #0x10]
 8058522: 2000         	movs	r0, #0x0
 8058524: f881 00bf    	strb.w	r0, [r1, #0xbf]
;     }
 8058528: e000         	b	0x805852c <prvInitialiseNewTask+0xbc> @ imm = #0x0
 805852a: e7ff         	b	0x805852c <prvInitialiseNewTask+0xbc> @ imm = #-0x2
;     configASSERT( uxPriority < configMAX_PRIORITIES );
 805852c: 68b8         	ldr	r0, [r7, #0x8]
 805852e: 2810         	cmp	r0, #0x10
 8058530: d304         	blo	0x805853c <prvInitialiseNewTask+0xcc> @ imm = #0x8
 8058532: e7ff         	b	0x8058534 <prvInitialiseNewTask+0xc4> @ imm = #-0x2
 8058534: 482c         	ldr	r0, [pc, #0xb0]         @ 0x80585e8 <prvInitialiseNewTask+0x178>
 8058536: 4780         	blx	r0
 8058538: e7ff         	b	0x805853a <prvInitialiseNewTask+0xca> @ imm = #-0x2
 805853a: e7fe         	b	0x805853a <prvInitialiseNewTask+0xca> @ imm = #-0x4
;     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 805853c: 68b8         	ldr	r0, [r7, #0x8]
 805853e: 2810         	cmp	r0, #0x10
 8058540: d303         	blo	0x805854a <prvInitialiseNewTask+0xda> @ imm = #0x6
 8058542: e7ff         	b	0x8058544 <prvInitialiseNewTask+0xd4> @ imm = #-0x2
 8058544: 200f         	movs	r0, #0xf
;         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8058546: 60b8         	str	r0, [r7, #0x8]
;     }
 8058548: e000         	b	0x805854c <prvInitialiseNewTask+0xdc> @ imm = #0x0
 805854a: e7ff         	b	0x805854c <prvInitialiseNewTask+0xdc> @ imm = #-0x2
;     pxNewTCB->uxPriority = uxPriority;
 805854c: 68b8         	ldr	r0, [r7, #0x8]
 805854e: 6939         	ldr	r1, [r7, #0x10]
 8058550: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;         pxNewTCB->uxBasePriority = uxPriority;
 8058554: 68b8         	ldr	r0, [r7, #0x8]
 8058556: 6939         	ldr	r1, [r7, #0x10]
 8058558: f8c1 00c8    	str.w	r0, [r1, #0xc8]
;     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 805855c: 6938         	ldr	r0, [r7, #0x10]
 805855e: 3080         	adds	r0, #0x80
 8058560: 491d         	ldr	r1, [pc, #0x74]         @ 0x80585d8 <prvInitialiseNewTask+0x168>
 8058562: 4788         	blx	r1
;     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8058564: 6938         	ldr	r0, [r7, #0x10]
 8058566: 3094         	adds	r0, #0x94
 8058568: 491c         	ldr	r1, [pc, #0x70]         @ 0x80585dc <prvInitialiseNewTask+0x16c>
 805856a: 4788         	blx	r1
;     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 805856c: 6938         	ldr	r0, [r7, #0x10]
 805856e: f8c0 008c    	str.w	r0, [r0, #0x8c]
;     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8058572: 68b8         	ldr	r0, [r7, #0x8]
 8058574: f1c0 0010    	rsb.w	r0, r0, #0x10
 8058578: 6939         	ldr	r1, [r7, #0x10]
 805857a: f8c1 0094    	str.w	r0, [r1, #0x94]
;     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 805857e: 6938         	ldr	r0, [r7, #0x10]
 8058580: f8c0 00a0    	str.w	r0, [r0, #0xa0]
;         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 8058584: 693a         	ldr	r2, [r7, #0x10]
 8058586: 1d10         	adds	r0, r2, #0x4
 8058588: 6979         	ldr	r1, [r7, #0x14]
 805858a: f8d2 20ac    	ldr.w	r2, [r2, #0xac]
 805858e: 9b07         	ldr	r3, [sp, #0x1c]
 8058590: f8df c04c    	ldr.w	r12, [pc, #0x4c]        @ 0x80585e0 <prvInitialiseNewTask+0x170>
 8058594: 47e0         	blx	r12
;                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters, xRunPrivileged, &( pxNewTCB->xMPUSettings ) );
 8058596: 9805         	ldr	r0, [sp, #0x14]
 8058598: f8d7 e010    	ldr.w	lr, [r7, #0x10]
 805859c: f8de 10ac    	ldr.w	r1, [lr, #0xac]
 80585a0: 9a09         	ldr	r2, [sp, #0x24]
 80585a2: 9b06         	ldr	r3, [sp, #0x18]
 80585a4: f8dd c00c    	ldr.w	r12, [sp, #0xc]
 80585a8: f10e 0404    	add.w	r4, lr, #0x4
 80585ac: 46ee         	mov	lr, sp
 80585ae: f8ce 4004    	str.w	r4, [lr, #0x4]
 80585b2: f8ce c000    	str.w	r12, [lr]
 80585b6: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x80585e4 <prvInitialiseNewTask+0x174>
 80585ba: 47e0         	blx	r12
 80585bc: 6939         	ldr	r1, [r7, #0x10]
 80585be: 6008         	str	r0, [r1]
;     if( pxCreatedTask != NULL )
 80585c0: 68f8         	ldr	r0, [r7, #0xc]
 80585c2: b120         	cbz	r0, 0x80585ce <prvInitialiseNewTask+0x15e> @ imm = #0x8
 80585c4: e7ff         	b	0x80585c6 <prvInitialiseNewTask+0x156> @ imm = #-0x2
;         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80585c6: 6938         	ldr	r0, [r7, #0x10]
 80585c8: 68f9         	ldr	r1, [r7, #0xc]
 80585ca: 6008         	str	r0, [r1]
;     }
 80585cc: e000         	b	0x80585d0 <prvInitialiseNewTask+0x160> @ imm = #0x0
 80585ce: e7ff         	b	0x80585d0 <prvInitialiseNewTask+0x160> @ imm = #-0x2
; }
 80585d0: b00a         	add	sp, #0x28
 80585d2: bdd0         	pop	{r4, r6, r7, pc}

080585d4 <$d.103>:
 80585d4: cd eb 05 08  	.word	0x0805ebcd
 80585d8: 81 9e 05 08  	.word	0x08059e81
 80585dc: 81 9e 05 08  	.word	0x08059e81
 80585e0: b1 c9 05 08  	.word	0x0805c9b1
 80585e4: 71 c5 05 08  	.word	0x0805c571
 80585e8: 55 cd 05 08  	.word	0x0805cd55
 80585ec: 55 cd 05 08  	.word	0x0805cd55

080585f0 <prvInitialiseTaskLists>:
; {
 80585f0: b580         	push	{r7, lr}
 80585f2: 466f         	mov	r7, sp
 80585f4: b084         	sub	sp, #0x10
 80585f6: 2000         	movs	r0, #0x0
;     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80585f8: 9003         	str	r0, [sp, #0xc]
 80585fa: e7ff         	b	0x80585fc <prvInitialiseTaskLists+0xc> @ imm = #-0x2
 80585fc: 9803         	ldr	r0, [sp, #0xc]
 80585fe: 280f         	cmp	r0, #0xf
 8058600: d810         	bhi	0x8058624 <prvInitialiseTaskLists+0x34> @ imm = #0x20
 8058602: e7ff         	b	0x8058604 <prvInitialiseTaskLists+0x14> @ imm = #-0x2
;         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8058604: 9803         	ldr	r0, [sp, #0xc]
 8058606: eb00 0180    	add.w	r1, r0, r0, lsl #2
 805860a: f240 1060    	movw	r0, #0x160
 805860e: f2c2 0000    	movt	r0, #0x2000
 8058612: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8058616: 491f         	ldr	r1, [pc, #0x7c]         @ 0x8058694 <prvInitialiseTaskLists+0xa4>
 8058618: 4788         	blx	r1
;     }
 805861a: e7ff         	b	0x805861c <prvInitialiseTaskLists+0x2c> @ imm = #-0x2
;     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 805861c: 9803         	ldr	r0, [sp, #0xc]
 805861e: 3001         	adds	r0, #0x1
 8058620: 9003         	str	r0, [sp, #0xc]
 8058622: e7eb         	b	0x80585fc <prvInitialiseTaskLists+0xc> @ imm = #-0x2a
;     vListInitialise( &xDelayedTaskList1 );
 8058624: f240 20b8    	movw	r0, #0x2b8
 8058628: f2c2 0000    	movt	r0, #0x2000
 805862c: 9001         	str	r0, [sp, #0x4]
 805862e: 4914         	ldr	r1, [pc, #0x50]         @ 0x8058680 <prvInitialiseTaskLists+0x90>
 8058630: 4788         	blx	r1
;     vListInitialise( &xDelayedTaskList2 );
 8058632: f240 20cc    	movw	r0, #0x2cc
 8058636: f2c2 0000    	movt	r0, #0x2000
 805863a: 9002         	str	r0, [sp, #0x8]
 805863c: 4911         	ldr	r1, [pc, #0x44]         @ 0x8058684 <prvInitialiseTaskLists+0x94>
 805863e: 4788         	blx	r1
;     vListInitialise( &xPendingReadyList );
 8058640: f240 1038    	movw	r0, #0x138
 8058644: f2c2 0000    	movt	r0, #0x2000
 8058648: 490f         	ldr	r1, [pc, #0x3c]         @ 0x8058688 <prvInitialiseTaskLists+0x98>
 805864a: 4788         	blx	r1
;         vListInitialise( &xTasksWaitingTermination );
 805864c: f240 1008    	movw	r0, #0x108
 8058650: f2c2 0000    	movt	r0, #0x2000
 8058654: 490d         	ldr	r1, [pc, #0x34]         @ 0x805868c <prvInitialiseTaskLists+0x9c>
 8058656: 4788         	blx	r1
;         vListInitialise( &xSuspendedTaskList );
 8058658: f240 104c    	movw	r0, #0x14c
 805865c: f2c2 0000    	movt	r0, #0x2000
 8058660: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8058690 <prvInitialiseTaskLists+0xa0>
 8058662: 4788         	blx	r1
 8058664: 9901         	ldr	r1, [sp, #0x4]
 8058666: 9802         	ldr	r0, [sp, #0x8]
;     pxDelayedTaskList = &xDelayedTaskList1;
 8058668: f240 1230    	movw	r2, #0x130
 805866c: f2c2 0200    	movt	r2, #0x2000
 8058670: 6011         	str	r1, [r2]
;     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8058672: f240 1134    	movw	r1, #0x134
 8058676: f2c2 0100    	movt	r1, #0x2000
 805867a: 6008         	str	r0, [r1]
; }
 805867c: b004         	add	sp, #0x10
 805867e: bd80         	pop	{r7, pc}

08058680 <$d.105>:
 8058680: 53 9e 05 08  	.word	0x08059e53
 8058684: 53 9e 05 08  	.word	0x08059e53
 8058688: 53 9e 05 08  	.word	0x08059e53
 805868c: 53 9e 05 08  	.word	0x08059e53
 8058690: 53 9e 05 08  	.word	0x08059e53
 8058694: 53 9e 05 08  	.word	0x08059e53

08058698 <prvIdleTask>:
; {
 8058698: b580         	push	{r7, lr}
 805869a: 466f         	mov	r7, sp
 805869c: b082         	sub	sp, #0x8
 805869e: 9001         	str	r0, [sp, #0x4]
;     for( ; configCONTROL_INFINITE_LOOP(); )
 80586a0: e7ff         	b	0x80586a2 <prvIdleTask+0xa> @ imm = #-0x2
;         prvCheckTasksWaitingTermination();
 80586a2: 4807         	ldr	r0, [pc, #0x1c]         @ 0x80586c0 <prvIdleTask+0x28>
 80586a4: 4780         	blx	r0
;             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80586a6: f240 1060    	movw	r0, #0x160
 80586aa: f2c2 0000    	movt	r0, #0x2000
 80586ae: 6800         	ldr	r0, [r0]
 80586b0: 2802         	cmp	r0, #0x2
 80586b2: d302         	blo	0x80586ba <prvIdleTask+0x22> @ imm = #0x4
 80586b4: e7ff         	b	0x80586b6 <prvIdleTask+0x1e> @ imm = #-0x2
;                 taskYIELD();
 80586b6: df07         	svc	#0x7
;             }
 80586b8: e000         	b	0x80586bc <prvIdleTask+0x24> @ imm = #0x0
 80586ba: e7ff         	b	0x80586bc <prvIdleTask+0x24> @ imm = #-0x2
;     for( ; configCONTROL_INFINITE_LOOP(); )
 80586bc: e7f1         	b	0x80586a2 <prvIdleTask+0xa> @ imm = #-0x1e
 80586be: bf00         	nop

080586c0 <$d.107>:
 80586c0: c5 86 05 08  	.word	0x080586c5

080586c4 <prvCheckTasksWaitingTermination>:
; {
 80586c4: b580         	push	{r7, lr}
 80586c6: 466f         	mov	r7, sp
 80586c8: b082         	sub	sp, #0x8
;         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80586ca: e7ff         	b	0x80586cc <prvCheckTasksWaitingTermination+0x8> @ imm = #-0x2
 80586cc: f240 101c    	movw	r0, #0x11c
 80586d0: f2c2 0000    	movt	r0, #0x2000
 80586d4: 6800         	ldr	r0, [r0]
 80586d6: b308         	cbz	r0, 0x805871c <prvCheckTasksWaitingTermination+0x58> @ imm = #0x42
 80586d8: e7ff         	b	0x80586da <prvCheckTasksWaitingTermination+0x16> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 80586da: 4811         	ldr	r0, [pc, #0x44]         @ 0x8058720 <prvCheckTasksWaitingTermination+0x5c>
 80586dc: 4780         	blx	r0
;                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80586de: f240 1008    	movw	r0, #0x108
 80586e2: f2c2 0000    	movt	r0, #0x2000
 80586e6: 68c0         	ldr	r0, [r0, #0xc]
 80586e8: 68c0         	ldr	r0, [r0, #0xc]
 80586ea: 9001         	str	r0, [sp, #0x4]
;                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80586ec: 9801         	ldr	r0, [sp, #0x4]
 80586ee: 3080         	adds	r0, #0x80
 80586f0: 490c         	ldr	r1, [pc, #0x30]         @ 0x8058724 <prvCheckTasksWaitingTermination+0x60>
 80586f2: 4788         	blx	r1
;                         --uxCurrentNumberOfTasks;
 80586f4: f240 1120    	movw	r1, #0x120
 80586f8: f2c2 0100    	movt	r1, #0x2000
 80586fc: 6808         	ldr	r0, [r1]
 80586fe: 3801         	subs	r0, #0x1
 8058700: 6008         	str	r0, [r1]
;                         --uxDeletedTasksWaitingCleanUp;
 8058702: f240 111c    	movw	r1, #0x11c
 8058706: f2c2 0100    	movt	r1, #0x2000
 805870a: 6808         	ldr	r0, [r1]
 805870c: 3801         	subs	r0, #0x1
 805870e: 6008         	str	r0, [r1]
;                 taskEXIT_CRITICAL();
 8058710: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058728 <prvCheckTasksWaitingTermination+0x64>
 8058712: 4780         	blx	r0
;                 prvDeleteTCB( pxTCB );
 8058714: 9801         	ldr	r0, [sp, #0x4]
 8058716: 4905         	ldr	r1, [pc, #0x14]         @ 0x805872c <prvCheckTasksWaitingTermination+0x68>
 8058718: 4788         	blx	r1
;         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 805871a: e7d7         	b	0x80586cc <prvCheckTasksWaitingTermination+0x8> @ imm = #-0x52
; }
 805871c: b002         	add	sp, #0x8
 805871e: bd80         	pop	{r7, pc}

08058720 <$d.109>:
 8058720: 19 c4 05 08  	.word	0x0805c419
 8058724: 33 9f 05 08  	.word	0x08059f33
 8058728: 3d c4 05 08  	.word	0x0805c43d
 805872c: f9 56 05 08  	.word	0x080556f9

08058730 <xTimerCreateTimerTask>:
;     {
 8058730: b580         	push	{r7, lr}
 8058732: 466f         	mov	r7, sp
 8058734: b084         	sub	sp, #0x10
 8058736: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 8058738: 9003         	str	r0, [sp, #0xc]
;         prvCheckForValidListAndQueue();
 805873a: 4817         	ldr	r0, [pc, #0x5c]         @ 0x8058798 <xTimerCreateTimerTask+0x68>
 805873c: 4780         	blx	r0
;         if( xTimerQueue != NULL )
 805873e: f240 20e0    	movw	r0, #0x2e0
 8058742: f2c2 0000    	movt	r0, #0x2000
 8058746: 6800         	ldr	r0, [r0]
 8058748: b1d0         	cbz	r0, 0x8058780 <xTimerCreateTimerTask+0x50> @ imm = #0x34
 805874a: e7ff         	b	0x805874c <xTimerCreateTimerTask+0x1c> @ imm = #-0x2
;                     xReturn = xTaskCreate( prvTimerTask,
 805874c: f240 20e4    	movw	r0, #0x2e4
 8058750: f2c2 0000    	movt	r0, #0x2000
 8058754: 4669         	mov	r1, sp
 8058756: 6048         	str	r0, [r1, #0x4]
 8058758: 2002         	movs	r0, #0x2
 805875a: f2c8 0000    	movt	r0, #0x8000
 805875e: 6008         	str	r0, [r1]
 8058760: f648 004d    	movw	r0, #0x884d
 8058764: f6c0 0005    	movt	r0, #0x805
 8058768: f645 11b1    	movw	r1, #0x59b1
 805876c: f6c0 0106    	movt	r1, #0x806
 8058770: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x805879c <xTimerCreateTimerTask+0x6c>
 8058774: f44f 7280    	mov.w	r2, #0x100
 8058778: 2300         	movs	r3, #0x0
 805877a: 47e0         	blx	r12
 805877c: 9003         	str	r0, [sp, #0xc]
;         }
 805877e: e000         	b	0x8058782 <xTimerCreateTimerTask+0x52> @ imm = #0x0
 8058780: e7ff         	b	0x8058782 <xTimerCreateTimerTask+0x52> @ imm = #-0x2
;         configASSERT( xReturn );
 8058782: 9803         	ldr	r0, [sp, #0xc]
 8058784: b920         	cbnz	r0, 0x8058790 <xTimerCreateTimerTask+0x60> @ imm = #0x8
 8058786: e7ff         	b	0x8058788 <xTimerCreateTimerTask+0x58> @ imm = #-0x2
 8058788: 4805         	ldr	r0, [pc, #0x14]         @ 0x80587a0 <xTimerCreateTimerTask+0x70>
 805878a: 4780         	blx	r0
 805878c: e7ff         	b	0x805878e <xTimerCreateTimerTask+0x5e> @ imm = #-0x2
 805878e: e7fe         	b	0x805878e <xTimerCreateTimerTask+0x5e> @ imm = #-0x4
;         return xReturn;
 8058790: 9803         	ldr	r0, [sp, #0xc]
 8058792: b004         	add	sp, #0x10
 8058794: bd80         	pop	{r7, pc}
 8058796: bf00         	nop

08058798 <$d.1>:
 8058798: a5 87 05 08  	.word	0x080587a5
 805879c: 75 54 05 08  	.word	0x08055475
 80587a0: 55 cd 05 08  	.word	0x0805cd55

080587a4 <prvCheckForValidListAndQueue>:
;     {
 80587a4: b580         	push	{r7, lr}
 80587a6: 466f         	mov	r7, sp
 80587a8: b082         	sub	sp, #0x8
;         taskENTER_CRITICAL();
 80587aa: 4822         	ldr	r0, [pc, #0x88]         @ 0x8058834 <prvCheckForValidListAndQueue+0x90>
 80587ac: 4780         	blx	r0
;             if( xTimerQueue == NULL )
 80587ae: f240 20e0    	movw	r0, #0x2e0
 80587b2: f2c2 0000    	movt	r0, #0x2000
 80587b6: 6800         	ldr	r0, [r0]
 80587b8: bbb0         	cbnz	r0, 0x8058828 <prvCheckForValidListAndQueue+0x84> @ imm = #0x6c
 80587ba: e7ff         	b	0x80587bc <prvCheckForValidListAndQueue+0x18> @ imm = #-0x2
;                 vListInitialise( &xActiveTimerList1 );
 80587bc: f240 20f4    	movw	r0, #0x2f4
 80587c0: f2c2 0000    	movt	r0, #0x2000
 80587c4: 9000         	str	r0, [sp]
 80587c6: 491c         	ldr	r1, [pc, #0x70]         @ 0x8058838 <prvCheckForValidListAndQueue+0x94>
 80587c8: 4788         	blx	r1
;                 vListInitialise( &xActiveTimerList2 );
 80587ca: f240 3008    	movw	r0, #0x308
 80587ce: f2c2 0000    	movt	r0, #0x2000
 80587d2: 9001         	str	r0, [sp, #0x4]
 80587d4: 4919         	ldr	r1, [pc, #0x64]         @ 0x805883c <prvCheckForValidListAndQueue+0x98>
 80587d6: 4788         	blx	r1
 80587d8: 9900         	ldr	r1, [sp]
 80587da: 9801         	ldr	r0, [sp, #0x4]
;                 pxCurrentTimerList = &xActiveTimerList1;
 80587dc: f240 22e8    	movw	r2, #0x2e8
 80587e0: f2c2 0200    	movt	r2, #0x2000
 80587e4: 6011         	str	r1, [r2]
;                 pxOverflowTimerList = &xActiveTimerList2;
 80587e6: f240 21ec    	movw	r1, #0x2ec
 80587ea: f2c2 0100    	movt	r1, #0x2000
 80587ee: 6008         	str	r0, [r1]
;                     xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80587f0: 4b13         	ldr	r3, [pc, #0x4c]         @ 0x8058840 <prvCheckForValidListAndQueue+0x9c>
 80587f2: 200a         	movs	r0, #0xa
 80587f4: 2110         	movs	r1, #0x10
 80587f6: 2200         	movs	r2, #0x0
 80587f8: 4798         	blx	r3
 80587fa: 4601         	mov	r1, r0
 80587fc: f240 20e0    	movw	r0, #0x2e0
 8058800: f2c2 0000    	movt	r0, #0x2000
 8058804: 6001         	str	r1, [r0]
;                     if( xTimerQueue != NULL )
 8058806: 6800         	ldr	r0, [r0]
 8058808: b160         	cbz	r0, 0x8058824 <prvCheckForValidListAndQueue+0x80> @ imm = #0x18
 805880a: e7ff         	b	0x805880c <prvCheckForValidListAndQueue+0x68> @ imm = #-0x2
;                         vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 805880c: f240 20e0    	movw	r0, #0x2e0
 8058810: f2c2 0000    	movt	r0, #0x2000
 8058814: 6800         	ldr	r0, [r0]
 8058816: f645 11b9    	movw	r1, #0x59b9
 805881a: f6c0 0106    	movt	r1, #0x806
 805881e: 4a09         	ldr	r2, [pc, #0x24]         @ 0x8058844 <prvCheckForValidListAndQueue+0xa0>
 8058820: 4790         	blx	r2
;                     }
 8058822: e000         	b	0x8058826 <prvCheckForValidListAndQueue+0x82> @ imm = #0x0
 8058824: e7ff         	b	0x8058826 <prvCheckForValidListAndQueue+0x82> @ imm = #-0x2
;             }
 8058826: e000         	b	0x805882a <prvCheckForValidListAndQueue+0x86> @ imm = #0x0
 8058828: e7ff         	b	0x805882a <prvCheckForValidListAndQueue+0x86> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805882a: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8058848 <prvCheckForValidListAndQueue+0xa4>
 805882c: 4780         	blx	r0
;     }
 805882e: b002         	add	sp, #0x8
 8058830: bd80         	pop	{r7, pc}
 8058832: bf00         	nop

08058834 <$d.3>:
 8058834: 19 c4 05 08  	.word	0x0805c419
 8058838: 53 9e 05 08  	.word	0x08059e53
 805883c: 53 9e 05 08  	.word	0x08059e53
 8058840: 79 a0 05 08  	.word	0x0805a079
 8058844: dd b4 05 08  	.word	0x0805b4dd
 8058848: 3d c4 05 08  	.word	0x0805c43d

0805884c <prvTimerTask>:
;     {
 805884c: b580         	push	{r7, lr}
 805884e: 466f         	mov	r7, sp
 8058850: b084         	sub	sp, #0x10
 8058852: 9003         	str	r0, [sp, #0xc]
;         for( ; configCONTROL_INFINITE_LOOP(); )
 8058854: e7ff         	b	0x8058856 <prvTimerTask+0xa> @ imm = #-0x2
;             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8058856: 4905         	ldr	r1, [pc, #0x14]         @ 0x805886c <prvTimerTask+0x20>
 8058858: a801         	add	r0, sp, #0x4
 805885a: 4788         	blx	r1
 805885c: 9002         	str	r0, [sp, #0x8]
;             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 805885e: 9802         	ldr	r0, [sp, #0x8]
 8058860: 9901         	ldr	r1, [sp, #0x4]
 8058862: 4a03         	ldr	r2, [pc, #0xc]          @ 0x8058870 <prvTimerTask+0x24>
 8058864: 4790         	blx	r2
;             prvProcessReceivedCommands();
 8058866: 4803         	ldr	r0, [pc, #0xc]          @ 0x8058874 <prvTimerTask+0x28>
 8058868: 4780         	blx	r0
;         for( ; configCONTROL_INFINITE_LOOP(); )
 805886a: e7f4         	b	0x8058856 <prvTimerTask+0xa> @ imm = #-0x18

0805886c <$d.5>:
 805886c: 6d 8d 05 08  	.word	0x08058d6d
 8058870: ad 8d 05 08  	.word	0x08058dad
 8058874: 59 8e 05 08  	.word	0x08058e59

08058878 <xTimerCreate>:
;         {
 8058878: b5d0         	push	{r4, r6, r7, lr}
 805887a: af02         	add	r7, sp, #0x8
 805887c: b088         	sub	sp, #0x20
 805887e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8058882: 9007         	str	r0, [sp, #0x1c]
 8058884: 9106         	str	r1, [sp, #0x18]
 8058886: 9205         	str	r2, [sp, #0x14]
 8058888: 9304         	str	r3, [sp, #0x10]
;             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's name. */
 805888a: 490f         	ldr	r1, [pc, #0x3c]         @ 0x80588c8 <xTimerCreate+0x50>
 805888c: 202c         	movs	r0, #0x2c
 805888e: 4788         	blx	r1
 8058890: 9003         	str	r0, [sp, #0xc]
;             if( pxNewTimer != NULL )
 8058892: 9803         	ldr	r0, [sp, #0xc]
 8058894: b1a0         	cbz	r0, 0x80588c0 <xTimerCreate+0x48> @ imm = #0x28
 8058896: e7ff         	b	0x8058898 <xTimerCreate+0x20> @ imm = #-0x2
;                 pxNewTimer->ucStatus = 0x00;
 8058898: 9903         	ldr	r1, [sp, #0xc]
 805889a: 2000         	movs	r0, #0x0
 805889c: f881 0028    	strb.w	r0, [r1, #0x28]
;                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80588a0: 9807         	ldr	r0, [sp, #0x1c]
 80588a2: 9906         	ldr	r1, [sp, #0x18]
 80588a4: 9a05         	ldr	r2, [sp, #0x14]
 80588a6: 9b04         	ldr	r3, [sp, #0x10]
 80588a8: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80588ac: 9c03         	ldr	r4, [sp, #0xc]
 80588ae: 46ee         	mov	lr, sp
 80588b0: f8ce 4004    	str.w	r4, [lr, #0x4]
 80588b4: f8ce c000    	str.w	r12, [lr]
 80588b8: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x80588cc <xTimerCreate+0x54>
 80588bc: 47e0         	blx	r12
;             }
 80588be: e7ff         	b	0x80588c0 <xTimerCreate+0x48> @ imm = #-0x2
;             return pxNewTimer;
 80588c0: 9803         	ldr	r0, [sp, #0xc]
 80588c2: b008         	add	sp, #0x20
 80588c4: bdd0         	pop	{r4, r6, r7, pc}
 80588c6: bf00         	nop

080588c8 <$d.7>:
 80588c8: dd 91 05 08  	.word	0x080591dd
 80588cc: d1 88 05 08  	.word	0x080588d1

080588d0 <prvInitialiseNewTimer>:
;     {
 80588d0: b580         	push	{r7, lr}
 80588d2: 466f         	mov	r7, sp
 80588d4: b084         	sub	sp, #0x10
 80588d6: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80588da: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80588de: 9003         	str	r0, [sp, #0xc]
 80588e0: 9102         	str	r1, [sp, #0x8]
 80588e2: 9201         	str	r2, [sp, #0x4]
 80588e4: 9300         	str	r3, [sp]
;         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80588e6: 9802         	ldr	r0, [sp, #0x8]
 80588e8: b920         	cbnz	r0, 0x80588f4 <prvInitialiseNewTimer+0x24> @ imm = #0x8
 80588ea: e7ff         	b	0x80588ec <prvInitialiseNewTimer+0x1c> @ imm = #-0x2
 80588ec: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805893c <prvInitialiseNewTimer+0x6c>
 80588ee: 4780         	blx	r0
 80588f0: e7ff         	b	0x80588f2 <prvInitialiseNewTimer+0x22> @ imm = #-0x2
 80588f2: e7fe         	b	0x80588f2 <prvInitialiseNewTimer+0x22> @ imm = #-0x4
;         prvCheckForValidListAndQueue();
 80588f4: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8058934 <prvInitialiseNewTimer+0x64>
 80588f6: 4780         	blx	r0
;         pxNewTimer->pcTimerName = pcTimerName;
 80588f8: 9803         	ldr	r0, [sp, #0xc]
 80588fa: 68f9         	ldr	r1, [r7, #0xc]
 80588fc: 6008         	str	r0, [r1]
;         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80588fe: 9802         	ldr	r0, [sp, #0x8]
 8058900: 68f9         	ldr	r1, [r7, #0xc]
 8058902: 6188         	str	r0, [r1, #0x18]
;         pxNewTimer->pvTimerID = pvTimerID;
 8058904: 9800         	ldr	r0, [sp]
 8058906: 68f9         	ldr	r1, [r7, #0xc]
 8058908: 61c8         	str	r0, [r1, #0x1c]
;         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 805890a: 68b8         	ldr	r0, [r7, #0x8]
 805890c: 68f9         	ldr	r1, [r7, #0xc]
 805890e: 6208         	str	r0, [r1, #0x20]
;         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8058910: 68f8         	ldr	r0, [r7, #0xc]
 8058912: 3004         	adds	r0, #0x4
 8058914: 4908         	ldr	r1, [pc, #0x20]         @ 0x8058938 <prvInitialiseNewTimer+0x68>
 8058916: 4788         	blx	r1
;         if( xAutoReload != pdFALSE )
 8058918: 9801         	ldr	r0, [sp, #0x4]
 805891a: b140         	cbz	r0, 0x805892e <prvInitialiseNewTimer+0x5e> @ imm = #0x10
 805891c: e7ff         	b	0x805891e <prvInitialiseNewTimer+0x4e> @ imm = #-0x2
;             pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 805891e: 68f9         	ldr	r1, [r7, #0xc]
 8058920: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058924: f040 0004    	orr	r0, r0, #0x4
 8058928: f881 0028    	strb.w	r0, [r1, #0x28]
;         }
 805892c: e7ff         	b	0x805892e <prvInitialiseNewTimer+0x5e> @ imm = #-0x2
;     }
 805892e: b004         	add	sp, #0x10
 8058930: bd80         	pop	{r7, pc}
 8058932: bf00         	nop

08058934 <$d.9>:
 8058934: a5 87 05 08  	.word	0x080587a5
 8058938: 81 9e 05 08  	.word	0x08059e81
 805893c: 55 cd 05 08  	.word	0x0805cd55

08058940 <xTimerGenericCommandFromTask>:
;     {
 8058940: b580         	push	{r7, lr}
 8058942: 466f         	mov	r7, sp
 8058944: b08a         	sub	sp, #0x28
 8058946: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805894a: 9009         	str	r0, [sp, #0x24]
 805894c: 9108         	str	r1, [sp, #0x20]
 805894e: 9207         	str	r2, [sp, #0x1c]
 8058950: 9306         	str	r3, [sp, #0x18]
 8058952: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 8058954: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTimer );
 8058956: 9809         	ldr	r0, [sp, #0x24]
 8058958: b920         	cbnz	r0, 0x8058964 <xTimerGenericCommandFromTask+0x24> @ imm = #0x8
 805895a: e7ff         	b	0x805895c <xTimerGenericCommandFromTask+0x1c> @ imm = #-0x2
 805895c: 4824         	ldr	r0, [pc, #0x90]         @ 0x80589f0 <xTimerGenericCommandFromTask+0xb0>
 805895e: 4780         	blx	r0
 8058960: e7ff         	b	0x8058962 <xTimerGenericCommandFromTask+0x22> @ imm = #-0x2
 8058962: e7fe         	b	0x8058962 <xTimerGenericCommandFromTask+0x22> @ imm = #-0x4
;         if( xTimerQueue != NULL )
 8058964: f240 20e0    	movw	r0, #0x2e0
 8058968: f2c2 0000    	movt	r0, #0x2000
 805896c: 6800         	ldr	r0, [r0]
 805896e: b398         	cbz	r0, 0x80589d8 <xTimerGenericCommandFromTask+0x98> @ imm = #0x66
 8058970: e7ff         	b	0x8058972 <xTimerGenericCommandFromTask+0x32> @ imm = #-0x2
;             xMessage.xMessageID = xCommandID;
 8058972: 9808         	ldr	r0, [sp, #0x20]
 8058974: 9001         	str	r0, [sp, #0x4]
;             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8058976: 9807         	ldr	r0, [sp, #0x1c]
 8058978: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xTimerParameters.pxTimer = xTimer;
 805897a: 9809         	ldr	r0, [sp, #0x24]
 805897c: 9003         	str	r0, [sp, #0xc]
;             configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 805897e: 9808         	ldr	r0, [sp, #0x20]
 8058980: 2806         	cmp	r0, #0x6
 8058982: db04         	blt	0x805898e <xTimerGenericCommandFromTask+0x4e> @ imm = #0x8
 8058984: e7ff         	b	0x8058986 <xTimerGenericCommandFromTask+0x46> @ imm = #-0x2
 8058986: 4819         	ldr	r0, [pc, #0x64]         @ 0x80589ec <xTimerGenericCommandFromTask+0xac>
 8058988: 4780         	blx	r0
 805898a: e7ff         	b	0x805898c <xTimerGenericCommandFromTask+0x4c> @ imm = #-0x2
 805898c: e7fe         	b	0x805898c <xTimerGenericCommandFromTask+0x4c> @ imm = #-0x4
;             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 805898e: 9808         	ldr	r0, [sp, #0x20]
 8058990: 2805         	cmp	r0, #0x5
 8058992: dc20         	bgt	0x80589d6 <xTimerGenericCommandFromTask+0x96> @ imm = #0x40
 8058994: e7ff         	b	0x8058996 <xTimerGenericCommandFromTask+0x56> @ imm = #-0x2
;                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8058996: 4812         	ldr	r0, [pc, #0x48]         @ 0x80589e0 <xTimerGenericCommandFromTask+0xa0>
 8058998: 4780         	blx	r0
 805899a: 2802         	cmp	r0, #0x2
 805899c: d10d         	bne	0x80589ba <xTimerGenericCommandFromTask+0x7a> @ imm = #0x1a
 805899e: e7ff         	b	0x80589a0 <xTimerGenericCommandFromTask+0x60> @ imm = #-0x2
;                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80589a0: f240 20e0    	movw	r0, #0x2e0
 80589a4: f2c2 0000    	movt	r0, #0x2000
 80589a8: 6800         	ldr	r0, [r0]
 80589aa: 68ba         	ldr	r2, [r7, #0x8]
 80589ac: f8df c038    	ldr.w	r12, [pc, #0x38]        @ 0x80589e8 <xTimerGenericCommandFromTask+0xa8>
 80589b0: a901         	add	r1, sp, #0x4
 80589b2: 2300         	movs	r3, #0x0
 80589b4: 47e0         	blx	r12
 80589b6: 9005         	str	r0, [sp, #0x14]
;                 }
 80589b8: e00c         	b	0x80589d4 <xTimerGenericCommandFromTask+0x94> @ imm = #0x18
;                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80589ba: f240 20e0    	movw	r0, #0x2e0
 80589be: f2c2 0000    	movt	r0, #0x2000
 80589c2: 6800         	ldr	r0, [r0]
 80589c4: f8df c01c    	ldr.w	r12, [pc, #0x1c]        @ 0x80589e4 <xTimerGenericCommandFromTask+0xa4>
 80589c8: a901         	add	r1, sp, #0x4
 80589ca: 2300         	movs	r3, #0x0
 80589cc: 461a         	mov	r2, r3
 80589ce: 47e0         	blx	r12
 80589d0: 9005         	str	r0, [sp, #0x14]
 80589d2: e7ff         	b	0x80589d4 <xTimerGenericCommandFromTask+0x94> @ imm = #-0x2
;             }
 80589d4: e7ff         	b	0x80589d6 <xTimerGenericCommandFromTask+0x96> @ imm = #-0x2
;         }
 80589d6: e000         	b	0x80589da <xTimerGenericCommandFromTask+0x9a> @ imm = #0x0
 80589d8: e7ff         	b	0x80589da <xTimerGenericCommandFromTask+0x9a> @ imm = #-0x2
;         return xReturn;
 80589da: 9805         	ldr	r0, [sp, #0x14]
 80589dc: b00a         	add	sp, #0x28
 80589de: bd80         	pop	{r7, pc}

080589e0 <$d.11>:
 80589e0: 8d 74 05 08  	.word	0x0805748d
 80589e4: bd a2 05 08  	.word	0x0805a2bd
 80589e8: bd a2 05 08  	.word	0x0805a2bd
 80589ec: 55 cd 05 08  	.word	0x0805cd55
 80589f0: 55 cd 05 08  	.word	0x0805cd55

080589f4 <xTimerGenericCommandFromISR>:
;     {
 80589f4: b580         	push	{r7, lr}
 80589f6: 466f         	mov	r7, sp
 80589f8: b08a         	sub	sp, #0x28
 80589fa: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80589fe: 9009         	str	r0, [sp, #0x24]
 8058a00: 9108         	str	r1, [sp, #0x20]
 8058a02: 9207         	str	r2, [sp, #0x1c]
 8058a04: 9306         	str	r3, [sp, #0x18]
 8058a06: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 8058a08: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTimer );
 8058a0a: 9809         	ldr	r0, [sp, #0x24]
 8058a0c: b920         	cbnz	r0, 0x8058a18 <xTimerGenericCommandFromISR+0x24> @ imm = #0x8
 8058a0e: e7ff         	b	0x8058a10 <xTimerGenericCommandFromISR+0x1c> @ imm = #-0x2
 8058a10: 4819         	ldr	r0, [pc, #0x64]         @ 0x8058a78 <xTimerGenericCommandFromISR+0x84>
 8058a12: 4780         	blx	r0
 8058a14: e7ff         	b	0x8058a16 <xTimerGenericCommandFromISR+0x22> @ imm = #-0x2
 8058a16: e7fe         	b	0x8058a16 <xTimerGenericCommandFromISR+0x22> @ imm = #-0x4
;         if( xTimerQueue != NULL )
 8058a18: f240 20e0    	movw	r0, #0x2e0
 8058a1c: f2c2 0000    	movt	r0, #0x2000
 8058a20: 6800         	ldr	r0, [r0]
 8058a22: b300         	cbz	r0, 0x8058a66 <xTimerGenericCommandFromISR+0x72> @ imm = #0x40
 8058a24: e7ff         	b	0x8058a26 <xTimerGenericCommandFromISR+0x32> @ imm = #-0x2
;             xMessage.xMessageID = xCommandID;
 8058a26: 9808         	ldr	r0, [sp, #0x20]
 8058a28: 9001         	str	r0, [sp, #0x4]
;             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8058a2a: 9807         	ldr	r0, [sp, #0x1c]
 8058a2c: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xTimerParameters.pxTimer = xTimer;
 8058a2e: 9809         	ldr	r0, [sp, #0x24]
 8058a30: 9003         	str	r0, [sp, #0xc]
;             configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );
 8058a32: 9808         	ldr	r0, [sp, #0x20]
 8058a34: 2805         	cmp	r0, #0x5
 8058a36: dc04         	bgt	0x8058a42 <xTimerGenericCommandFromISR+0x4e> @ imm = #0x8
 8058a38: e7ff         	b	0x8058a3a <xTimerGenericCommandFromISR+0x46> @ imm = #-0x2
 8058a3a: 480e         	ldr	r0, [pc, #0x38]         @ 0x8058a74 <xTimerGenericCommandFromISR+0x80>
 8058a3c: 4780         	blx	r0
 8058a3e: e7ff         	b	0x8058a40 <xTimerGenericCommandFromISR+0x4c> @ imm = #-0x2
 8058a40: e7fe         	b	0x8058a40 <xTimerGenericCommandFromISR+0x4c> @ imm = #-0x4
;             if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
 8058a42: 9808         	ldr	r0, [sp, #0x20]
 8058a44: 2806         	cmp	r0, #0x6
 8058a46: db0d         	blt	0x8058a64 <xTimerGenericCommandFromISR+0x70> @ imm = #0x1a
 8058a48: e7ff         	b	0x8058a4a <xTimerGenericCommandFromISR+0x56> @ imm = #-0x2
;                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8058a4a: f240 20e0    	movw	r0, #0x2e0
 8058a4e: f2c2 0000    	movt	r0, #0x2000
 8058a52: 6800         	ldr	r0, [r0]
 8058a54: 9a06         	ldr	r2, [sp, #0x18]
 8058a56: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x8058a70 <xTimerGenericCommandFromISR+0x7c>
 8058a5a: a901         	add	r1, sp, #0x4
 8058a5c: 2300         	movs	r3, #0x0
 8058a5e: 47e0         	blx	r12
 8058a60: 9005         	str	r0, [sp, #0x14]
;             }
 8058a62: e7ff         	b	0x8058a64 <xTimerGenericCommandFromISR+0x70> @ imm = #-0x2
;         }
 8058a64: e000         	b	0x8058a68 <xTimerGenericCommandFromISR+0x74> @ imm = #0x0
 8058a66: e7ff         	b	0x8058a68 <xTimerGenericCommandFromISR+0x74> @ imm = #-0x2
;         return xReturn;
 8058a68: 9805         	ldr	r0, [sp, #0x14]
 8058a6a: b00a         	add	sp, #0x28
 8058a6c: bd80         	pop	{r7, pc}
 8058a6e: bf00         	nop

08058a70 <$d.13>:
 8058a70: e1 a9 05 08  	.word	0x0805a9e1
 8058a74: 55 cd 05 08  	.word	0x0805cd55
 8058a78: 55 cd 05 08  	.word	0x0805cd55

08058a7c <xTimerGetTimerDaemonTaskHandle>:
;     {
 8058a7c: b580         	push	{r7, lr}
 8058a7e: 466f         	mov	r7, sp
;         configASSERT( ( xTimerTaskHandle != NULL ) );
 8058a80: f240 20e4    	movw	r0, #0x2e4
 8058a84: f2c2 0000    	movt	r0, #0x2000
 8058a88: 6800         	ldr	r0, [r0]
 8058a8a: b920         	cbnz	r0, 0x8058a96 <xTimerGetTimerDaemonTaskHandle+0x1a> @ imm = #0x8
 8058a8c: e7ff         	b	0x8058a8e <xTimerGetTimerDaemonTaskHandle+0x12> @ imm = #-0x2
 8058a8e: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058aa4 <xTimerGetTimerDaemonTaskHandle+0x28>
 8058a90: 4780         	blx	r0
 8058a92: e7ff         	b	0x8058a94 <xTimerGetTimerDaemonTaskHandle+0x18> @ imm = #-0x2
 8058a94: e7fe         	b	0x8058a94 <xTimerGetTimerDaemonTaskHandle+0x18> @ imm = #-0x4
;         return xTimerTaskHandle;
 8058a96: f240 20e4    	movw	r0, #0x2e4
 8058a9a: f2c2 0000    	movt	r0, #0x2000
 8058a9e: 6800         	ldr	r0, [r0]
 8058aa0: bd80         	pop	{r7, pc}
 8058aa2: bf00         	nop

08058aa4 <$d.15>:
 8058aa4: 55 cd 05 08  	.word	0x0805cd55

08058aa8 <xTimerGetPeriod>:
;     {
 8058aa8: b580         	push	{r7, lr}
 8058aaa: 466f         	mov	r7, sp
 8058aac: b082         	sub	sp, #0x8
 8058aae: 9001         	str	r0, [sp, #0x4]
;         Timer_t * pxTimer = xTimer;
 8058ab0: 9801         	ldr	r0, [sp, #0x4]
 8058ab2: 9000         	str	r0, [sp]
;         configASSERT( xTimer );
 8058ab4: 9801         	ldr	r0, [sp, #0x4]
 8058ab6: b920         	cbnz	r0, 0x8058ac2 <xTimerGetPeriod+0x1a> @ imm = #0x8
 8058ab8: e7ff         	b	0x8058aba <xTimerGetPeriod+0x12> @ imm = #-0x2
 8058aba: 4804         	ldr	r0, [pc, #0x10]         @ 0x8058acc <xTimerGetPeriod+0x24>
 8058abc: 4780         	blx	r0
 8058abe: e7ff         	b	0x8058ac0 <xTimerGetPeriod+0x18> @ imm = #-0x2
 8058ac0: e7fe         	b	0x8058ac0 <xTimerGetPeriod+0x18> @ imm = #-0x4
;         return pxTimer->xTimerPeriodInTicks;
 8058ac2: 9800         	ldr	r0, [sp]
 8058ac4: 6980         	ldr	r0, [r0, #0x18]
 8058ac6: b002         	add	sp, #0x8
 8058ac8: bd80         	pop	{r7, pc}
 8058aca: bf00         	nop

08058acc <$d.17>:
 8058acc: 55 cd 05 08  	.word	0x0805cd55

08058ad0 <vTimerSetReloadMode>:
;     {
 8058ad0: b580         	push	{r7, lr}
 8058ad2: 466f         	mov	r7, sp
 8058ad4: b084         	sub	sp, #0x10
 8058ad6: 9003         	str	r0, [sp, #0xc]
 8058ad8: 9102         	str	r1, [sp, #0x8]
;         Timer_t * pxTimer = xTimer;
 8058ada: 9803         	ldr	r0, [sp, #0xc]
 8058adc: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 8058ade: 9803         	ldr	r0, [sp, #0xc]
 8058ae0: b920         	cbnz	r0, 0x8058aec <vTimerSetReloadMode+0x1c> @ imm = #0x8
 8058ae2: e7ff         	b	0x8058ae4 <vTimerSetReloadMode+0x14> @ imm = #-0x2
 8058ae4: 4810         	ldr	r0, [pc, #0x40]         @ 0x8058b28 <vTimerSetReloadMode+0x58>
 8058ae6: 4780         	blx	r0
 8058ae8: e7ff         	b	0x8058aea <vTimerSetReloadMode+0x1a> @ imm = #-0x2
 8058aea: e7fe         	b	0x8058aea <vTimerSetReloadMode+0x1a> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058aec: 480c         	ldr	r0, [pc, #0x30]         @ 0x8058b20 <vTimerSetReloadMode+0x50>
 8058aee: 4780         	blx	r0
;             if( xAutoReload != pdFALSE )
 8058af0: 9802         	ldr	r0, [sp, #0x8]
 8058af2: b140         	cbz	r0, 0x8058b06 <vTimerSetReloadMode+0x36> @ imm = #0x10
 8058af4: e7ff         	b	0x8058af6 <vTimerSetReloadMode+0x26> @ imm = #-0x2
;                 pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8058af6: 9901         	ldr	r1, [sp, #0x4]
 8058af8: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058afc: f040 0004    	orr	r0, r0, #0x4
 8058b00: f881 0028    	strb.w	r0, [r1, #0x28]
;             }
 8058b04: e007         	b	0x8058b16 <vTimerSetReloadMode+0x46> @ imm = #0xe
;                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 8058b06: 9901         	ldr	r1, [sp, #0x4]
 8058b08: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058b0c: f000 00fb    	and	r0, r0, #0xfb
 8058b10: f881 0028    	strb.w	r0, [r1, #0x28]
 8058b14: e7ff         	b	0x8058b16 <vTimerSetReloadMode+0x46> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058b16: 4803         	ldr	r0, [pc, #0xc]          @ 0x8058b24 <vTimerSetReloadMode+0x54>
 8058b18: 4780         	blx	r0
;     }
 8058b1a: b004         	add	sp, #0x10
 8058b1c: bd80         	pop	{r7, pc}
 8058b1e: bf00         	nop

08058b20 <$d.19>:
 8058b20: 19 c4 05 08  	.word	0x0805c419
 8058b24: 3d c4 05 08  	.word	0x0805c43d
 8058b28: 55 cd 05 08  	.word	0x0805cd55

08058b2c <xTimerGetReloadMode>:
;     {
 8058b2c: b580         	push	{r7, lr}
 8058b2e: 466f         	mov	r7, sp
 8058b30: b084         	sub	sp, #0x10
 8058b32: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 8058b34: 9803         	ldr	r0, [sp, #0xc]
 8058b36: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 8058b38: 9803         	ldr	r0, [sp, #0xc]
 8058b3a: b920         	cbnz	r0, 0x8058b46 <xTimerGetReloadMode+0x1a> @ imm = #0x8
 8058b3c: e7ff         	b	0x8058b3e <xTimerGetReloadMode+0x12> @ imm = #-0x2
 8058b3e: 480e         	ldr	r0, [pc, #0x38]         @ 0x8058b78 <xTimerGetReloadMode+0x4c>
 8058b40: 4780         	blx	r0
 8058b42: e7ff         	b	0x8058b44 <xTimerGetReloadMode+0x18> @ imm = #-0x2
 8058b44: e7fe         	b	0x8058b44 <xTimerGetReloadMode+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058b46: 480a         	ldr	r0, [pc, #0x28]         @ 0x8058b70 <xTimerGetReloadMode+0x44>
 8058b48: 4780         	blx	r0
;             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 8058b4a: 9802         	ldr	r0, [sp, #0x8]
 8058b4c: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058b50: 0740         	lsls	r0, r0, #0x1d
 8058b52: 2800         	cmp	r0, #0x0
 8058b54: d403         	bmi	0x8058b5e <xTimerGetReloadMode+0x32> @ imm = #0x6
 8058b56: e7ff         	b	0x8058b58 <xTimerGetReloadMode+0x2c> @ imm = #-0x2
 8058b58: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 8058b5a: 9001         	str	r0, [sp, #0x4]
;             }
 8058b5c: e002         	b	0x8058b64 <xTimerGetReloadMode+0x38> @ imm = #0x4
 8058b5e: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 8058b60: 9001         	str	r0, [sp, #0x4]
 8058b62: e7ff         	b	0x8058b64 <xTimerGetReloadMode+0x38> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058b64: 4803         	ldr	r0, [pc, #0xc]          @ 0x8058b74 <xTimerGetReloadMode+0x48>
 8058b66: 4780         	blx	r0
;         return xReturn;
 8058b68: 9801         	ldr	r0, [sp, #0x4]
 8058b6a: b004         	add	sp, #0x10
 8058b6c: bd80         	pop	{r7, pc}
 8058b6e: bf00         	nop

08058b70 <$d.21>:
 8058b70: 19 c4 05 08  	.word	0x0805c419
 8058b74: 3d c4 05 08  	.word	0x0805c43d
 8058b78: 55 cd 05 08  	.word	0x0805cd55

08058b7c <uxTimerGetReloadMode>:
;     {
 8058b7c: b580         	push	{r7, lr}
 8058b7e: 466f         	mov	r7, sp
 8058b80: b082         	sub	sp, #0x8
 8058b82: 9001         	str	r0, [sp, #0x4]
;         uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 8058b84: 9801         	ldr	r0, [sp, #0x4]
 8058b86: 4903         	ldr	r1, [pc, #0xc]          @ 0x8058b94 <uxTimerGetReloadMode+0x18>
 8058b88: 4788         	blx	r1
 8058b8a: 9000         	str	r0, [sp]
;         return uxReturn;
 8058b8c: 9800         	ldr	r0, [sp]
 8058b8e: b002         	add	sp, #0x8
 8058b90: bd80         	pop	{r7, pc}
 8058b92: bf00         	nop

08058b94 <$d.23>:
 8058b94: 2d 8b 05 08  	.word	0x08058b2d

08058b98 <xTimerGetExpiryTime>:
;     {
 8058b98: b580         	push	{r7, lr}
 8058b9a: 466f         	mov	r7, sp
 8058b9c: b084         	sub	sp, #0x10
 8058b9e: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 8058ba0: 9803         	ldr	r0, [sp, #0xc]
 8058ba2: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 8058ba4: 9803         	ldr	r0, [sp, #0xc]
 8058ba6: b920         	cbnz	r0, 0x8058bb2 <xTimerGetExpiryTime+0x1a> @ imm = #0x8
 8058ba8: e7ff         	b	0x8058baa <xTimerGetExpiryTime+0x12> @ imm = #-0x2
 8058baa: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058bc0 <xTimerGetExpiryTime+0x28>
 8058bac: 4780         	blx	r0
 8058bae: e7ff         	b	0x8058bb0 <xTimerGetExpiryTime+0x18> @ imm = #-0x2
 8058bb0: e7fe         	b	0x8058bb0 <xTimerGetExpiryTime+0x18> @ imm = #-0x4
;         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8058bb2: 9802         	ldr	r0, [sp, #0x8]
 8058bb4: 6840         	ldr	r0, [r0, #0x4]
 8058bb6: 9001         	str	r0, [sp, #0x4]
;         return xReturn;
 8058bb8: 9801         	ldr	r0, [sp, #0x4]
 8058bba: b004         	add	sp, #0x10
 8058bbc: bd80         	pop	{r7, pc}
 8058bbe: bf00         	nop

08058bc0 <$d.25>:
 8058bc0: 55 cd 05 08  	.word	0x0805cd55

08058bc4 <pcTimerGetName>:
;     {
 8058bc4: b580         	push	{r7, lr}
 8058bc6: 466f         	mov	r7, sp
 8058bc8: b082         	sub	sp, #0x8
 8058bca: 9001         	str	r0, [sp, #0x4]
;         Timer_t * pxTimer = xTimer;
 8058bcc: 9801         	ldr	r0, [sp, #0x4]
 8058bce: 9000         	str	r0, [sp]
;         configASSERT( xTimer );
 8058bd0: 9801         	ldr	r0, [sp, #0x4]
 8058bd2: b920         	cbnz	r0, 0x8058bde <pcTimerGetName+0x1a> @ imm = #0x8
 8058bd4: e7ff         	b	0x8058bd6 <pcTimerGetName+0x12> @ imm = #-0x2
 8058bd6: 4804         	ldr	r0, [pc, #0x10]         @ 0x8058be8 <pcTimerGetName+0x24>
 8058bd8: 4780         	blx	r0
 8058bda: e7ff         	b	0x8058bdc <pcTimerGetName+0x18> @ imm = #-0x2
 8058bdc: e7fe         	b	0x8058bdc <pcTimerGetName+0x18> @ imm = #-0x4
;         return pxTimer->pcTimerName;
 8058bde: 9800         	ldr	r0, [sp]
 8058be0: 6800         	ldr	r0, [r0]
 8058be2: b002         	add	sp, #0x8
 8058be4: bd80         	pop	{r7, pc}
 8058be6: bf00         	nop

08058be8 <$d.27>:
 8058be8: 55 cd 05 08  	.word	0x0805cd55

08058bec <xTimerIsTimerActive>:
;     {
 8058bec: b580         	push	{r7, lr}
 8058bee: 466f         	mov	r7, sp
 8058bf0: b084         	sub	sp, #0x10
 8058bf2: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 8058bf4: 9803         	ldr	r0, [sp, #0xc]
 8058bf6: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 8058bf8: 9803         	ldr	r0, [sp, #0xc]
 8058bfa: b920         	cbnz	r0, 0x8058c06 <xTimerIsTimerActive+0x1a> @ imm = #0x8
 8058bfc: e7ff         	b	0x8058bfe <xTimerIsTimerActive+0x12> @ imm = #-0x2
 8058bfe: 480d         	ldr	r0, [pc, #0x34]         @ 0x8058c34 <xTimerIsTimerActive+0x48>
 8058c00: 4780         	blx	r0
 8058c02: e7ff         	b	0x8058c04 <xTimerIsTimerActive+0x18> @ imm = #-0x2
 8058c04: e7fe         	b	0x8058c04 <xTimerIsTimerActive+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058c06: 4809         	ldr	r0, [pc, #0x24]         @ 0x8058c2c <xTimerIsTimerActive+0x40>
 8058c08: 4780         	blx	r0
;             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8058c0a: 9801         	ldr	r0, [sp, #0x4]
 8058c0c: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058c10: 07c0         	lsls	r0, r0, #0x1f
 8058c12: b918         	cbnz	r0, 0x8058c1c <xTimerIsTimerActive+0x30> @ imm = #0x6
 8058c14: e7ff         	b	0x8058c16 <xTimerIsTimerActive+0x2a> @ imm = #-0x2
 8058c16: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 8058c18: 9002         	str	r0, [sp, #0x8]
;             }
 8058c1a: e002         	b	0x8058c22 <xTimerIsTimerActive+0x36> @ imm = #0x4
 8058c1c: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 8058c1e: 9002         	str	r0, [sp, #0x8]
 8058c20: e7ff         	b	0x8058c22 <xTimerIsTimerActive+0x36> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058c22: 4803         	ldr	r0, [pc, #0xc]          @ 0x8058c30 <xTimerIsTimerActive+0x44>
 8058c24: 4780         	blx	r0
;         return xReturn;
 8058c26: 9802         	ldr	r0, [sp, #0x8]
 8058c28: b004         	add	sp, #0x10
 8058c2a: bd80         	pop	{r7, pc}

08058c2c <$d.29>:
 8058c2c: 19 c4 05 08  	.word	0x0805c419
 8058c30: 3d c4 05 08  	.word	0x0805c43d
 8058c34: 55 cd 05 08  	.word	0x0805cd55

08058c38 <pvTimerGetTimerID>:
;     {
 8058c38: b580         	push	{r7, lr}
 8058c3a: 466f         	mov	r7, sp
 8058c3c: b084         	sub	sp, #0x10
 8058c3e: 9003         	str	r0, [sp, #0xc]
;         Timer_t * const pxTimer = xTimer;
 8058c40: 9803         	ldr	r0, [sp, #0xc]
 8058c42: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 8058c44: 9803         	ldr	r0, [sp, #0xc]
 8058c46: b920         	cbnz	r0, 0x8058c52 <pvTimerGetTimerID+0x1a> @ imm = #0x8
 8058c48: e7ff         	b	0x8058c4a <pvTimerGetTimerID+0x12> @ imm = #-0x2
 8058c4a: 4809         	ldr	r0, [pc, #0x24]         @ 0x8058c70 <pvTimerGetTimerID+0x38>
 8058c4c: 4780         	blx	r0
 8058c4e: e7ff         	b	0x8058c50 <pvTimerGetTimerID+0x18> @ imm = #-0x2
 8058c50: e7fe         	b	0x8058c50 <pvTimerGetTimerID+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058c52: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058c68 <pvTimerGetTimerID+0x30>
 8058c54: 4780         	blx	r0
;             pvReturn = pxTimer->pvTimerID;
 8058c56: 9802         	ldr	r0, [sp, #0x8]
 8058c58: 69c0         	ldr	r0, [r0, #0x1c]
 8058c5a: 9001         	str	r0, [sp, #0x4]
;         taskEXIT_CRITICAL();
 8058c5c: 4803         	ldr	r0, [pc, #0xc]          @ 0x8058c6c <pvTimerGetTimerID+0x34>
 8058c5e: 4780         	blx	r0
;         return pvReturn;
 8058c60: 9801         	ldr	r0, [sp, #0x4]
 8058c62: b004         	add	sp, #0x10
 8058c64: bd80         	pop	{r7, pc}
 8058c66: bf00         	nop

08058c68 <$d.31>:
 8058c68: 19 c4 05 08  	.word	0x0805c419
 8058c6c: 3d c4 05 08  	.word	0x0805c43d
 8058c70: 55 cd 05 08  	.word	0x0805cd55

08058c74 <vTimerSetTimerID>:
;     {
 8058c74: b580         	push	{r7, lr}
 8058c76: 466f         	mov	r7, sp
 8058c78: b084         	sub	sp, #0x10
 8058c7a: 9003         	str	r0, [sp, #0xc]
 8058c7c: 9102         	str	r1, [sp, #0x8]
;         Timer_t * const pxTimer = xTimer;
 8058c7e: 9803         	ldr	r0, [sp, #0xc]
 8058c80: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 8058c82: 9803         	ldr	r0, [sp, #0xc]
 8058c84: b920         	cbnz	r0, 0x8058c90 <vTimerSetTimerID+0x1c> @ imm = #0x8
 8058c86: e7ff         	b	0x8058c88 <vTimerSetTimerID+0x14> @ imm = #-0x2
 8058c88: 4808         	ldr	r0, [pc, #0x20]         @ 0x8058cac <vTimerSetTimerID+0x38>
 8058c8a: 4780         	blx	r0
 8058c8c: e7ff         	b	0x8058c8e <vTimerSetTimerID+0x1a> @ imm = #-0x2
 8058c8e: e7fe         	b	0x8058c8e <vTimerSetTimerID+0x1a> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058c90: 4804         	ldr	r0, [pc, #0x10]         @ 0x8058ca4 <vTimerSetTimerID+0x30>
 8058c92: 4780         	blx	r0
;             pxTimer->pvTimerID = pvNewID;
 8058c94: 9802         	ldr	r0, [sp, #0x8]
 8058c96: 9901         	ldr	r1, [sp, #0x4]
 8058c98: 61c8         	str	r0, [r1, #0x1c]
;         taskEXIT_CRITICAL();
 8058c9a: 4803         	ldr	r0, [pc, #0xc]          @ 0x8058ca8 <vTimerSetTimerID+0x34>
 8058c9c: 4780         	blx	r0
;     }
 8058c9e: b004         	add	sp, #0x10
 8058ca0: bd80         	pop	{r7, pc}
 8058ca2: bf00         	nop

08058ca4 <$d.33>:
 8058ca4: 19 c4 05 08  	.word	0x0805c419
 8058ca8: 3d c4 05 08  	.word	0x0805c43d
 8058cac: 55 cd 05 08  	.word	0x0805cd55

08058cb0 <xTimerPendFunctionCallFromISR>:
;         {
 8058cb0: b580         	push	{r7, lr}
 8058cb2: 466f         	mov	r7, sp
 8058cb4: b08a         	sub	sp, #0x28
 8058cb6: 9009         	str	r0, [sp, #0x24]
 8058cb8: 9108         	str	r1, [sp, #0x20]
 8058cba: 9207         	str	r2, [sp, #0x1c]
 8058cbc: 9306         	str	r3, [sp, #0x18]
 8058cbe: f06f 0001    	mvn	r0, #0x1
;             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8058cc2: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8058cc4: 9809         	ldr	r0, [sp, #0x24]
 8058cc6: 9003         	str	r0, [sp, #0xc]
;             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8058cc8: 9808         	ldr	r0, [sp, #0x20]
 8058cca: 9004         	str	r0, [sp, #0x10]
;             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8058ccc: 9807         	ldr	r0, [sp, #0x1c]
 8058cce: 9005         	str	r0, [sp, #0x14]
;             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8058cd0: f240 20e0    	movw	r0, #0x2e0
 8058cd4: f2c2 0000    	movt	r0, #0x2000
 8058cd8: 6800         	ldr	r0, [r0]
 8058cda: 9a06         	ldr	r2, [sp, #0x18]
 8058cdc: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x8058cf0 <xTimerPendFunctionCallFromISR+0x40>
 8058ce0: a902         	add	r1, sp, #0x8
 8058ce2: 2300         	movs	r3, #0x0
 8058ce4: 47e0         	blx	r12
 8058ce6: 9001         	str	r0, [sp, #0x4]
;             return xReturn;
 8058ce8: 9801         	ldr	r0, [sp, #0x4]
 8058cea: b00a         	add	sp, #0x28
 8058cec: bd80         	pop	{r7, pc}
 8058cee: bf00         	nop

08058cf0 <$d.35>:
 8058cf0: e1 a9 05 08  	.word	0x0805a9e1

08058cf4 <xTimerPendFunctionCall>:
;         {
 8058cf4: b580         	push	{r7, lr}
 8058cf6: 466f         	mov	r7, sp
 8058cf8: b08a         	sub	sp, #0x28
 8058cfa: 9009         	str	r0, [sp, #0x24]
 8058cfc: 9108         	str	r1, [sp, #0x20]
 8058cfe: 9207         	str	r2, [sp, #0x1c]
 8058d00: 9306         	str	r3, [sp, #0x18]
;             configASSERT( xTimerQueue );
 8058d02: f240 20e0    	movw	r0, #0x2e0
 8058d06: f2c2 0000    	movt	r0, #0x2000
 8058d0a: 6800         	ldr	r0, [r0]
 8058d0c: b920         	cbnz	r0, 0x8058d18 <xTimerPendFunctionCall+0x24> @ imm = #0x8
 8058d0e: e7ff         	b	0x8058d10 <xTimerPendFunctionCall+0x1c> @ imm = #-0x2
 8058d10: 480e         	ldr	r0, [pc, #0x38]         @ 0x8058d4c <xTimerPendFunctionCall+0x58>
 8058d12: 4780         	blx	r0
 8058d14: e7ff         	b	0x8058d16 <xTimerPendFunctionCall+0x22> @ imm = #-0x2
 8058d16: e7fe         	b	0x8058d16 <xTimerPendFunctionCall+0x22> @ imm = #-0x4
 8058d18: f04f 30ff    	mov.w	r0, #0xffffffff
;             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 8058d1c: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8058d1e: 9809         	ldr	r0, [sp, #0x24]
 8058d20: 9003         	str	r0, [sp, #0xc]
;             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8058d22: 9808         	ldr	r0, [sp, #0x20]
 8058d24: 9004         	str	r0, [sp, #0x10]
;             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8058d26: 9807         	ldr	r0, [sp, #0x1c]
 8058d28: 9005         	str	r0, [sp, #0x14]
;             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8058d2a: f240 20e0    	movw	r0, #0x2e0
 8058d2e: f2c2 0000    	movt	r0, #0x2000
 8058d32: 6800         	ldr	r0, [r0]
 8058d34: 9a06         	ldr	r2, [sp, #0x18]
 8058d36: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x8058d48 <xTimerPendFunctionCall+0x54>
 8058d3a: a902         	add	r1, sp, #0x8
 8058d3c: 2300         	movs	r3, #0x0
 8058d3e: 47e0         	blx	r12
 8058d40: 9001         	str	r0, [sp, #0x4]
;             return xReturn;
 8058d42: 9801         	ldr	r0, [sp, #0x4]
 8058d44: b00a         	add	sp, #0x28
 8058d46: bd80         	pop	{r7, pc}

08058d48 <$d.37>:
 8058d48: bd a2 05 08  	.word	0x0805a2bd
 8058d4c: 55 cd 05 08  	.word	0x0805cd55

08058d50 <uxTimerGetTimerNumber>:
;         {
 8058d50: b081         	sub	sp, #0x4
 8058d52: 9000         	str	r0, [sp]
;             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8058d54: 9800         	ldr	r0, [sp]
 8058d56: 6a40         	ldr	r0, [r0, #0x24]
 8058d58: b001         	add	sp, #0x4
 8058d5a: 4770         	bx	lr

08058d5c <vTimerSetTimerNumber>:
;         {
 8058d5c: b082         	sub	sp, #0x8
 8058d5e: 9001         	str	r0, [sp, #0x4]
 8058d60: 9100         	str	r1, [sp]
;             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 8058d62: 9800         	ldr	r0, [sp]
 8058d64: 9901         	ldr	r1, [sp, #0x4]
 8058d66: 6248         	str	r0, [r1, #0x24]
;         }
 8058d68: b002         	add	sp, #0x8
 8058d6a: 4770         	bx	lr

08058d6c <prvGetNextExpireTime>:
;     {
 8058d6c: b082         	sub	sp, #0x8
 8058d6e: 9001         	str	r0, [sp, #0x4]
;         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8058d70: f240 20e8    	movw	r0, #0x2e8
 8058d74: f2c2 0000    	movt	r0, #0x2000
 8058d78: 6800         	ldr	r0, [r0]
 8058d7a: 6800         	ldr	r0, [r0]
 8058d7c: fab0 f080    	clz	r0, r0
 8058d80: 0940         	lsrs	r0, r0, #0x5
 8058d82: 9901         	ldr	r1, [sp, #0x4]
 8058d84: 6008         	str	r0, [r1]
;         if( *pxListWasEmpty == pdFALSE )
 8058d86: 9801         	ldr	r0, [sp, #0x4]
 8058d88: 6800         	ldr	r0, [r0]
 8058d8a: b948         	cbnz	r0, 0x8058da0 <prvGetNextExpireTime+0x34> @ imm = #0x12
 8058d8c: e7ff         	b	0x8058d8e <prvGetNextExpireTime+0x22> @ imm = #-0x2
;             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8058d8e: f240 20e8    	movw	r0, #0x2e8
 8058d92: f2c2 0000    	movt	r0, #0x2000
 8058d96: 6800         	ldr	r0, [r0]
 8058d98: 68c0         	ldr	r0, [r0, #0xc]
 8058d9a: 6800         	ldr	r0, [r0]
 8058d9c: 9000         	str	r0, [sp]
;         }
 8058d9e: e002         	b	0x8058da6 <prvGetNextExpireTime+0x3a> @ imm = #0x4
 8058da0: 2000         	movs	r0, #0x0
;             xNextExpireTime = ( TickType_t ) 0U;
 8058da2: 9000         	str	r0, [sp]
 8058da4: e7ff         	b	0x8058da6 <prvGetNextExpireTime+0x3a> @ imm = #-0x2
;         return xNextExpireTime;
 8058da6: 9800         	ldr	r0, [sp]
 8058da8: b002         	add	sp, #0x8
 8058daa: 4770         	bx	lr

08058dac <prvProcessTimerOrBlockTask>:
;     {
 8058dac: b580         	push	{r7, lr}
 8058dae: 466f         	mov	r7, sp
 8058db0: b084         	sub	sp, #0x10
 8058db2: 9003         	str	r0, [sp, #0xc]
 8058db4: 9102         	str	r1, [sp, #0x8]
;         vTaskSuspendAll();
 8058db6: 4820         	ldr	r0, [pc, #0x80]         @ 0x8058e38 <prvProcessTimerOrBlockTask+0x8c>
 8058db8: 4780         	blx	r0
;             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8058dba: 4920         	ldr	r1, [pc, #0x80]         @ 0x8058e3c <prvProcessTimerOrBlockTask+0x90>
 8058dbc: 4668         	mov	r0, sp
 8058dbe: 4788         	blx	r1
 8058dc0: 9001         	str	r0, [sp, #0x4]
;             if( xTimerListsWereSwitched == pdFALSE )
 8058dc2: 9800         	ldr	r0, [sp]
 8058dc4: bb90         	cbnz	r0, 0x8058e2c <prvProcessTimerOrBlockTask+0x80> @ imm = #0x64
 8058dc6: e7ff         	b	0x8058dc8 <prvProcessTimerOrBlockTask+0x1c> @ imm = #-0x2
;                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8058dc8: 9802         	ldr	r0, [sp, #0x8]
 8058dca: b960         	cbnz	r0, 0x8058de6 <prvProcessTimerOrBlockTask+0x3a> @ imm = #0x18
 8058dcc: e7ff         	b	0x8058dce <prvProcessTimerOrBlockTask+0x22> @ imm = #-0x2
 8058dce: 9803         	ldr	r0, [sp, #0xc]
 8058dd0: 9901         	ldr	r1, [sp, #0x4]
 8058dd2: 4288         	cmp	r0, r1
 8058dd4: d807         	bhi	0x8058de6 <prvProcessTimerOrBlockTask+0x3a> @ imm = #0xe
 8058dd6: e7ff         	b	0x8058dd8 <prvProcessTimerOrBlockTask+0x2c> @ imm = #-0x2
;                     ( void ) xTaskResumeAll();
 8058dd8: 481d         	ldr	r0, [pc, #0x74]         @ 0x8058e50 <prvProcessTimerOrBlockTask+0xa4>
 8058dda: 4780         	blx	r0
;                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8058ddc: 9803         	ldr	r0, [sp, #0xc]
 8058dde: 9901         	ldr	r1, [sp, #0x4]
 8058de0: 4a1c         	ldr	r2, [pc, #0x70]         @ 0x8058e54 <prvProcessTimerOrBlockTask+0xa8>
 8058de2: 4790         	blx	r2
;                 }
 8058de4: e021         	b	0x8058e2a <prvProcessTimerOrBlockTask+0x7e> @ imm = #0x42
;                     if( xListWasEmpty != pdFALSE )
 8058de6: 9802         	ldr	r0, [sp, #0x8]
 8058de8: b158         	cbz	r0, 0x8058e02 <prvProcessTimerOrBlockTask+0x56> @ imm = #0x16
 8058dea: e7ff         	b	0x8058dec <prvProcessTimerOrBlockTask+0x40> @ imm = #-0x2
;                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8058dec: f240 20ec    	movw	r0, #0x2ec
 8058df0: f2c2 0000    	movt	r0, #0x2000
 8058df4: 6800         	ldr	r0, [r0]
 8058df6: 6800         	ldr	r0, [r0]
 8058df8: fab0 f080    	clz	r0, r0
 8058dfc: 0940         	lsrs	r0, r0, #0x5
 8058dfe: 9002         	str	r0, [sp, #0x8]
;                     }
 8058e00: e7ff         	b	0x8058e02 <prvProcessTimerOrBlockTask+0x56> @ imm = #-0x2
;                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8058e02: f240 20e0    	movw	r0, #0x2e0
 8058e06: f2c2 0000    	movt	r0, #0x2000
 8058e0a: 6800         	ldr	r0, [r0]
 8058e0c: 9903         	ldr	r1, [sp, #0xc]
 8058e0e: 9a01         	ldr	r2, [sp, #0x4]
 8058e10: 1a89         	subs	r1, r1, r2
 8058e12: 9a02         	ldr	r2, [sp, #0x8]
 8058e14: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x8058e44 <prvProcessTimerOrBlockTask+0x98>
 8058e16: 4798         	blx	r3
;                     if( xTaskResumeAll() == pdFALSE )
 8058e18: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8058e48 <prvProcessTimerOrBlockTask+0x9c>
 8058e1a: 4780         	blx	r0
 8058e1c: b918         	cbnz	r0, 0x8058e26 <prvProcessTimerOrBlockTask+0x7a> @ imm = #0x6
 8058e1e: e7ff         	b	0x8058e20 <prvProcessTimerOrBlockTask+0x74> @ imm = #-0x2
;                         taskYIELD_WITHIN_API();
 8058e20: 480a         	ldr	r0, [pc, #0x28]         @ 0x8058e4c <prvProcessTimerOrBlockTask+0xa0>
 8058e22: 4780         	blx	r0
;                     }
 8058e24: e000         	b	0x8058e28 <prvProcessTimerOrBlockTask+0x7c> @ imm = #0x0
 8058e26: e7ff         	b	0x8058e28 <prvProcessTimerOrBlockTask+0x7c> @ imm = #-0x2
 8058e28: e7ff         	b	0x8058e2a <prvProcessTimerOrBlockTask+0x7e> @ imm = #-0x2
;             }
 8058e2a: e002         	b	0x8058e32 <prvProcessTimerOrBlockTask+0x86> @ imm = #0x4
;                 ( void ) xTaskResumeAll();
 8058e2c: 4804         	ldr	r0, [pc, #0x10]         @ 0x8058e40 <prvProcessTimerOrBlockTask+0x94>
 8058e2e: 4780         	blx	r0
 8058e30: e7ff         	b	0x8058e32 <prvProcessTimerOrBlockTask+0x86> @ imm = #-0x2
;     }
 8058e32: b004         	add	sp, #0x10
 8058e34: bd80         	pop	{r7, pc}
 8058e36: bf00         	nop

08058e38 <$d.39>:
 8058e38: 59 58 05 08  	.word	0x08055859
 8058e3c: 09 90 05 08  	.word	0x08059009
 8058e40: 7d 59 05 08  	.word	0x0805597d
 8058e44: f5 b5 05 08  	.word	0x0805b5f5
 8058e48: 7d 59 05 08  	.word	0x0805597d
 8058e4c: ff c3 05 08  	.word	0x0805c3ff
 8058e50: 7d 59 05 08  	.word	0x0805597d
 8058e54: 59 90 05 08  	.word	0x08059059

08058e58 <prvProcessReceivedCommands>:
;     {
 8058e58: b580         	push	{r7, lr}
 8058e5a: 466f         	mov	r7, sp
 8058e5c: b08a         	sub	sp, #0x28
;         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8058e5e: e7ff         	b	0x8058e60 <prvProcessReceivedCommands+0x8> @ imm = #-0x2
 8058e60: f240 20e0    	movw	r0, #0x2e0
 8058e64: f2c2 0000    	movt	r0, #0x2000
 8058e68: 6800         	ldr	r0, [r0]
 8058e6a: 4b5e         	ldr	r3, [pc, #0x178]        @ 0x8058fe4 <prvProcessReceivedCommands+0x18c>
 8058e6c: a906         	add	r1, sp, #0x18
 8058e6e: 2200         	movs	r2, #0x0
 8058e70: 4798         	blx	r3
 8058e72: 2800         	cmp	r0, #0x0
 8058e74: f000 80b3    	beq.w	0x8058fde <prvProcessReceivedCommands+0x186> @ imm = #0x166
 8058e78: e7ff         	b	0x8058e7a <prvProcessReceivedCommands+0x22> @ imm = #-0x2
;                 if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8058e7a: 9806         	ldr	r0, [sp, #0x18]
 8058e7c: f1b0 3fff    	cmp.w	r0, #0xffffffff
 8058e80: dc10         	bgt	0x8058ea4 <prvProcessReceivedCommands+0x4c> @ imm = #0x20
 8058e82: e7ff         	b	0x8058e84 <prvProcessReceivedCommands+0x2c> @ imm = #-0x2
 8058e84: a806         	add	r0, sp, #0x18
;                     const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8058e86: 3004         	adds	r0, #0x4
 8058e88: 9002         	str	r0, [sp, #0x8]
;                     configASSERT( pxCallback );
 8058e8a: 9802         	ldr	r0, [sp, #0x8]
 8058e8c: b920         	cbnz	r0, 0x8058e98 <prvProcessReceivedCommands+0x40> @ imm = #0x8
 8058e8e: e7ff         	b	0x8058e90 <prvProcessReceivedCommands+0x38> @ imm = #-0x2
 8058e90: 485c         	ldr	r0, [pc, #0x170]        @ 0x8059004 <prvProcessReceivedCommands+0x1ac>
 8058e92: 4780         	blx	r0
 8058e94: e7ff         	b	0x8058e96 <prvProcessReceivedCommands+0x3e> @ imm = #-0x2
 8058e96: e7fe         	b	0x8058e96 <prvProcessReceivedCommands+0x3e> @ imm = #-0x4
;                     pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8058e98: 9902         	ldr	r1, [sp, #0x8]
 8058e9a: 680a         	ldr	r2, [r1]
 8058e9c: 6848         	ldr	r0, [r1, #0x4]
 8058e9e: 6889         	ldr	r1, [r1, #0x8]
 8058ea0: 4790         	blx	r2
;                 }
 8058ea2: e000         	b	0x8058ea6 <prvProcessReceivedCommands+0x4e> @ imm = #0x0
 8058ea4: e7ff         	b	0x8058ea6 <prvProcessReceivedCommands+0x4e> @ imm = #-0x2
;             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8058ea6: 9806         	ldr	r0, [sp, #0x18]
 8058ea8: 2800         	cmp	r0, #0x0
 8058eaa: f100 8097    	bmi.w	0x8058fdc <prvProcessReceivedCommands+0x184> @ imm = #0x12e
 8058eae: e7ff         	b	0x8058eb0 <prvProcessReceivedCommands+0x58> @ imm = #-0x2
;                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8058eb0: 9808         	ldr	r0, [sp, #0x20]
 8058eb2: 9005         	str	r0, [sp, #0x14]
;                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8058eb4: 9805         	ldr	r0, [sp, #0x14]
 8058eb6: 6940         	ldr	r0, [r0, #0x14]
 8058eb8: b128         	cbz	r0, 0x8058ec6 <prvProcessReceivedCommands+0x6e> @ imm = #0xa
 8058eba: e7ff         	b	0x8058ebc <prvProcessReceivedCommands+0x64> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8058ebc: 9805         	ldr	r0, [sp, #0x14]
 8058ebe: 3004         	adds	r0, #0x4
 8058ec0: 4949         	ldr	r1, [pc, #0x124]        @ 0x8058fe8 <prvProcessReceivedCommands+0x190>
 8058ec2: 4788         	blx	r1
;                 }
 8058ec4: e000         	b	0x8058ec8 <prvProcessReceivedCommands+0x70> @ imm = #0x0
 8058ec6: e7ff         	b	0x8058ec8 <prvProcessReceivedCommands+0x70> @ imm = #-0x2
;                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8058ec8: 4948         	ldr	r1, [pc, #0x120]        @ 0x8058fec <prvProcessReceivedCommands+0x194>
 8058eca: a804         	add	r0, sp, #0x10
 8058ecc: 4788         	blx	r1
 8058ece: 9003         	str	r0, [sp, #0xc]
;                 switch( xMessage.xMessageID )
 8058ed0: 9806         	ldr	r0, [sp, #0x18]
 8058ed2: 9001         	str	r0, [sp, #0x4]
 8058ed4: 3801         	subs	r0, #0x1
 8058ed6: 2802         	cmp	r0, #0x2
 8058ed8: d319         	blo	0x8058f0e <prvProcessReceivedCommands+0xb6> @ imm = #0x32
 8058eda: e7ff         	b	0x8058edc <prvProcessReceivedCommands+0x84> @ imm = #-0x2
 8058edc: 9801         	ldr	r0, [sp, #0x4]
 8058ede: 2803         	cmp	r0, #0x3
 8058ee0: d043         	beq	0x8058f6a <prvProcessReceivedCommands+0x112> @ imm = #0x86
 8058ee2: e7ff         	b	0x8058ee4 <prvProcessReceivedCommands+0x8c> @ imm = #-0x2
 8058ee4: 9801         	ldr	r0, [sp, #0x4]
 8058ee6: 2804         	cmp	r0, #0x4
 8058ee8: d047         	beq	0x8058f7a <prvProcessReceivedCommands+0x122> @ imm = #0x8e
 8058eea: e7ff         	b	0x8058eec <prvProcessReceivedCommands+0x94> @ imm = #-0x2
 8058eec: 9801         	ldr	r0, [sp, #0x4]
 8058eee: 2805         	cmp	r0, #0x5
 8058ef0: d05e         	beq	0x8058fb0 <prvProcessReceivedCommands+0x158> @ imm = #0xbc
 8058ef2: e7ff         	b	0x8058ef4 <prvProcessReceivedCommands+0x9c> @ imm = #-0x2
 8058ef4: 9801         	ldr	r0, [sp, #0x4]
 8058ef6: 3806         	subs	r0, #0x6
 8058ef8: 2802         	cmp	r0, #0x2
 8058efa: d308         	blo	0x8058f0e <prvProcessReceivedCommands+0xb6> @ imm = #0x10
 8058efc: e7ff         	b	0x8058efe <prvProcessReceivedCommands+0xa6> @ imm = #-0x2
 8058efe: 9801         	ldr	r0, [sp, #0x4]
 8058f00: 2808         	cmp	r0, #0x8
 8058f02: d032         	beq	0x8058f6a <prvProcessReceivedCommands+0x112> @ imm = #0x64
 8058f04: e7ff         	b	0x8058f06 <prvProcessReceivedCommands+0xae> @ imm = #-0x2
 8058f06: 9801         	ldr	r0, [sp, #0x4]
 8058f08: 2809         	cmp	r0, #0x9
 8058f0a: d036         	beq	0x8058f7a <prvProcessReceivedCommands+0x122> @ imm = #0x6c
 8058f0c: e064         	b	0x8058fd8 <prvProcessReceivedCommands+0x180> @ imm = #0xc8
;                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8058f0e: 9905         	ldr	r1, [sp, #0x14]
 8058f10: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058f14: f040 0001    	orr	r0, r0, #0x1
 8058f18: f881 0028    	strb.w	r0, [r1, #0x28]
;                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8058f1c: 9805         	ldr	r0, [sp, #0x14]
 8058f1e: 9b07         	ldr	r3, [sp, #0x1c]
 8058f20: 6981         	ldr	r1, [r0, #0x18]
 8058f22: 4419         	add	r1, r3
 8058f24: 9a03         	ldr	r2, [sp, #0xc]
 8058f26: f8df c0d4    	ldr.w	r12, [pc, #0xd4]        @ 0x8058ffc <prvProcessReceivedCommands+0x1a4>
 8058f2a: 47e0         	blx	r12
 8058f2c: b1d8         	cbz	r0, 0x8058f66 <prvProcessReceivedCommands+0x10e> @ imm = #0x36
 8058f2e: e7ff         	b	0x8058f30 <prvProcessReceivedCommands+0xd8> @ imm = #-0x2
;                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8058f30: 9805         	ldr	r0, [sp, #0x14]
 8058f32: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058f36: 0740         	lsls	r0, r0, #0x1d
 8058f38: 2800         	cmp	r0, #0x0
 8058f3a: d508         	bpl	0x8058f4e <prvProcessReceivedCommands+0xf6> @ imm = #0x10
 8058f3c: e7ff         	b	0x8058f3e <prvProcessReceivedCommands+0xe6> @ imm = #-0x2
;                                 prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8058f3e: 9805         	ldr	r0, [sp, #0x14]
 8058f40: 9907         	ldr	r1, [sp, #0x1c]
 8058f42: 6982         	ldr	r2, [r0, #0x18]
 8058f44: 4411         	add	r1, r2
 8058f46: 9a03         	ldr	r2, [sp, #0xc]
 8058f48: 4b2d         	ldr	r3, [pc, #0xb4]         @ 0x8059000 <prvProcessReceivedCommands+0x1a8>
 8058f4a: 4798         	blx	r3
;                             }
 8058f4c: e007         	b	0x8058f5e <prvProcessReceivedCommands+0x106> @ imm = #0xe
;                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058f4e: 9905         	ldr	r1, [sp, #0x14]
 8058f50: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058f54: f000 00fe    	and	r0, r0, #0xfe
 8058f58: f881 0028    	strb.w	r0, [r1, #0x28]
 8058f5c: e7ff         	b	0x8058f5e <prvProcessReceivedCommands+0x106> @ imm = #-0x2
;                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058f5e: 9805         	ldr	r0, [sp, #0x14]
 8058f60: 6a01         	ldr	r1, [r0, #0x20]
 8058f62: 4788         	blx	r1
;                         }
 8058f64: e000         	b	0x8058f68 <prvProcessReceivedCommands+0x110> @ imm = #0x0
 8058f66: e7ff         	b	0x8058f68 <prvProcessReceivedCommands+0x110> @ imm = #-0x2
;                         break;
 8058f68: e037         	b	0x8058fda <prvProcessReceivedCommands+0x182> @ imm = #0x6e
;                         pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058f6a: 9905         	ldr	r1, [sp, #0x14]
 8058f6c: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058f70: f000 00fe    	and	r0, r0, #0xfe
 8058f74: f881 0028    	strb.w	r0, [r1, #0x28]
;                         break;
 8058f78: e02f         	b	0x8058fda <prvProcessReceivedCommands+0x182> @ imm = #0x5e
;                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8058f7a: 9905         	ldr	r1, [sp, #0x14]
 8058f7c: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058f80: f040 0001    	orr	r0, r0, #0x1
 8058f84: f881 0028    	strb.w	r0, [r1, #0x28]
;                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8058f88: 9807         	ldr	r0, [sp, #0x1c]
 8058f8a: 9905         	ldr	r1, [sp, #0x14]
 8058f8c: 6188         	str	r0, [r1, #0x18]
;                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8058f8e: 9805         	ldr	r0, [sp, #0x14]
 8058f90: 6980         	ldr	r0, [r0, #0x18]
 8058f92: b920         	cbnz	r0, 0x8058f9e <prvProcessReceivedCommands+0x146> @ imm = #0x8
 8058f94: e7ff         	b	0x8058f96 <prvProcessReceivedCommands+0x13e> @ imm = #-0x2
 8058f96: 4818         	ldr	r0, [pc, #0x60]         @ 0x8058ff8 <prvProcessReceivedCommands+0x1a0>
 8058f98: 4780         	blx	r0
 8058f9a: e7ff         	b	0x8058f9c <prvProcessReceivedCommands+0x144> @ imm = #-0x2
 8058f9c: e7fe         	b	0x8058f9c <prvProcessReceivedCommands+0x144> @ imm = #-0x4
;                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8058f9e: 9805         	ldr	r0, [sp, #0x14]
 8058fa0: 9b03         	ldr	r3, [sp, #0xc]
 8058fa2: 6981         	ldr	r1, [r0, #0x18]
 8058fa4: 4419         	add	r1, r3
 8058fa6: f8df c04c    	ldr.w	r12, [pc, #0x4c]        @ 0x8058ff4 <prvProcessReceivedCommands+0x19c>
 8058faa: 461a         	mov	r2, r3
 8058fac: 47e0         	blx	r12
;                         break;
 8058fae: e014         	b	0x8058fda <prvProcessReceivedCommands+0x182> @ imm = #0x28
;                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8058fb0: 9805         	ldr	r0, [sp, #0x14]
 8058fb2: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058fb6: 0780         	lsls	r0, r0, #0x1e
 8058fb8: 2800         	cmp	r0, #0x0
 8058fba: d404         	bmi	0x8058fc6 <prvProcessReceivedCommands+0x16e> @ imm = #0x8
 8058fbc: e7ff         	b	0x8058fbe <prvProcessReceivedCommands+0x166> @ imm = #-0x2
;                                 vPortFree( pxTimer );
 8058fbe: 9805         	ldr	r0, [sp, #0x14]
 8058fc0: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8058ff0 <prvProcessReceivedCommands+0x198>
 8058fc2: 4788         	blx	r1
;                             }
 8058fc4: e007         	b	0x8058fd6 <prvProcessReceivedCommands+0x17e> @ imm = #0xe
;                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058fc6: 9905         	ldr	r1, [sp, #0x14]
 8058fc8: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058fcc: f000 00fe    	and	r0, r0, #0xfe
 8058fd0: f881 0028    	strb.w	r0, [r1, #0x28]
 8058fd4: e7ff         	b	0x8058fd6 <prvProcessReceivedCommands+0x17e> @ imm = #-0x2
;                         break;
 8058fd6: e000         	b	0x8058fda <prvProcessReceivedCommands+0x182> @ imm = #0x0
;                         break;
 8058fd8: e7ff         	b	0x8058fda <prvProcessReceivedCommands+0x182> @ imm = #-0x2
;             }
 8058fda: e7ff         	b	0x8058fdc <prvProcessReceivedCommands+0x184> @ imm = #-0x2
;         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8058fdc: e740         	b	0x8058e60 <prvProcessReceivedCommands+0x8> @ imm = #-0x180
;     }
 8058fde: b00a         	add	sp, #0x28
 8058fe0: bd80         	pop	{r7, pc}
 8058fe2: bf00         	nop

08058fe4 <$d.41>:
 8058fe4: 6d ac 05 08  	.word	0x0805ac6d
 8058fe8: 33 9f 05 08  	.word	0x08059f33
 8058fec: 09 90 05 08  	.word	0x08059009
 8058ff0: 61 95 05 08  	.word	0x08059561
 8058ff4: 4d 91 05 08  	.word	0x0805914d
 8058ff8: 55 cd 05 08  	.word	0x0805cd55
 8058ffc: 4d 91 05 08  	.word	0x0805914d
 8059000: 11 91 05 08  	.word	0x08059111
 8059004: 55 cd 05 08  	.word	0x0805cd55

08059008 <prvSampleTimeNow>:
;     {
 8059008: b580         	push	{r7, lr}
 805900a: 466f         	mov	r7, sp
 805900c: b082         	sub	sp, #0x8
 805900e: 9001         	str	r0, [sp, #0x4]
;         xTimeNow = xTaskGetTickCount();
 8059010: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8059050 <prvSampleTimeNow+0x48>
 8059012: 4780         	blx	r0
 8059014: 9000         	str	r0, [sp]
;         if( xTimeNow < xLastTime )
 8059016: 9800         	ldr	r0, [sp]
 8059018: f240 21f0    	movw	r1, #0x2f0
 805901c: f2c2 0100    	movt	r1, #0x2000
 8059020: 6809         	ldr	r1, [r1]
 8059022: 4288         	cmp	r0, r1
 8059024: d206         	bhs	0x8059034 <prvSampleTimeNow+0x2c> @ imm = #0xc
 8059026: e7ff         	b	0x8059028 <prvSampleTimeNow+0x20> @ imm = #-0x2
;             prvSwitchTimerLists();
 8059028: 480a         	ldr	r0, [pc, #0x28]         @ 0x8059054 <prvSampleTimeNow+0x4c>
 805902a: 4780         	blx	r0
;             *pxTimerListsWereSwitched = pdTRUE;
 805902c: 9901         	ldr	r1, [sp, #0x4]
 805902e: 2001         	movs	r0, #0x1
 8059030: 6008         	str	r0, [r1]
;         }
 8059032: e003         	b	0x805903c <prvSampleTimeNow+0x34> @ imm = #0x6
;             *pxTimerListsWereSwitched = pdFALSE;
 8059034: 9901         	ldr	r1, [sp, #0x4]
 8059036: 2000         	movs	r0, #0x0
 8059038: 6008         	str	r0, [r1]
 805903a: e7ff         	b	0x805903c <prvSampleTimeNow+0x34> @ imm = #-0x2
;         xLastTime = xTimeNow;
 805903c: 9800         	ldr	r0, [sp]
 805903e: f240 21f0    	movw	r1, #0x2f0
 8059042: f2c2 0100    	movt	r1, #0x2000
 8059046: 6008         	str	r0, [r1]
;         return xTimeNow;
 8059048: 9800         	ldr	r0, [sp]
 805904a: b002         	add	sp, #0x8
 805904c: bd80         	pop	{r7, pc}
 805904e: bf00         	nop

08059050 <$d.43>:
 8059050: 65 69 05 08  	.word	0x08056965
 8059054: b9 90 05 08  	.word	0x080590b9

08059058 <prvProcessExpiredTimer>:
;     {
 8059058: b580         	push	{r7, lr}
 805905a: 466f         	mov	r7, sp
 805905c: b084         	sub	sp, #0x10
 805905e: 9003         	str	r0, [sp, #0xc]
 8059060: 9102         	str	r1, [sp, #0x8]
;         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8059062: f240 20e8    	movw	r0, #0x2e8
 8059066: f2c2 0000    	movt	r0, #0x2000
 805906a: 6800         	ldr	r0, [r0]
 805906c: 68c0         	ldr	r0, [r0, #0xc]
 805906e: 68c0         	ldr	r0, [r0, #0xc]
 8059070: 9001         	str	r0, [sp, #0x4]
;         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8059072: 9801         	ldr	r0, [sp, #0x4]
 8059074: 3004         	adds	r0, #0x4
 8059076: 490e         	ldr	r1, [pc, #0x38]         @ 0x80590b0 <prvProcessExpiredTimer+0x58>
 8059078: 4788         	blx	r1
;         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 805907a: 9801         	ldr	r0, [sp, #0x4]
 805907c: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8059080: 0740         	lsls	r0, r0, #0x1d
 8059082: 2800         	cmp	r0, #0x0
 8059084: d506         	bpl	0x8059094 <prvProcessExpiredTimer+0x3c> @ imm = #0xc
 8059086: e7ff         	b	0x8059088 <prvProcessExpiredTimer+0x30> @ imm = #-0x2
;             prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8059088: 9801         	ldr	r0, [sp, #0x4]
 805908a: 9903         	ldr	r1, [sp, #0xc]
 805908c: 9a02         	ldr	r2, [sp, #0x8]
 805908e: 4b09         	ldr	r3, [pc, #0x24]         @ 0x80590b4 <prvProcessExpiredTimer+0x5c>
 8059090: 4798         	blx	r3
;         }
 8059092: e007         	b	0x80590a4 <prvProcessExpiredTimer+0x4c> @ imm = #0xe
;             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8059094: 9901         	ldr	r1, [sp, #0x4]
 8059096: f891 0028    	ldrb.w	r0, [r1, #0x28]
 805909a: f000 00fe    	and	r0, r0, #0xfe
 805909e: f881 0028    	strb.w	r0, [r1, #0x28]
 80590a2: e7ff         	b	0x80590a4 <prvProcessExpiredTimer+0x4c> @ imm = #-0x2
;         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80590a4: 9801         	ldr	r0, [sp, #0x4]
 80590a6: 6a01         	ldr	r1, [r0, #0x20]
 80590a8: 4788         	blx	r1
;     }
 80590aa: b004         	add	sp, #0x10
 80590ac: bd80         	pop	{r7, pc}
 80590ae: bf00         	nop

080590b0 <$d.45>:
 80590b0: 33 9f 05 08  	.word	0x08059f33
 80590b4: 11 91 05 08  	.word	0x08059111

080590b8 <prvSwitchTimerLists>:
;     {
 80590b8: b580         	push	{r7, lr}
 80590ba: 466f         	mov	r7, sp
 80590bc: b082         	sub	sp, #0x8
;         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80590be: e7ff         	b	0x80590c0 <prvSwitchTimerLists+0x8> @ imm = #-0x2
 80590c0: f240 20e8    	movw	r0, #0x2e8
 80590c4: f2c2 0000    	movt	r0, #0x2000
 80590c8: 6800         	ldr	r0, [r0]
 80590ca: 6800         	ldr	r0, [r0]
 80590cc: b170         	cbz	r0, 0x80590ec <prvSwitchTimerLists+0x34> @ imm = #0x1c
 80590ce: e7ff         	b	0x80590d0 <prvSwitchTimerLists+0x18> @ imm = #-0x2
;             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80590d0: f240 20e8    	movw	r0, #0x2e8
 80590d4: f2c2 0000    	movt	r0, #0x2000
 80590d8: 6800         	ldr	r0, [r0]
 80590da: 68c0         	ldr	r0, [r0, #0xc]
 80590dc: 6800         	ldr	r0, [r0]
 80590de: 9001         	str	r0, [sp, #0x4]
;             prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80590e0: 9801         	ldr	r0, [sp, #0x4]
 80590e2: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x805910c <prvSwitchTimerLists+0x54>
 80590e4: f04f 31ff    	mov.w	r1, #0xffffffff
 80590e8: 4790         	blx	r2
;         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80590ea: e7e9         	b	0x80590c0 <prvSwitchTimerLists+0x8> @ imm = #-0x2e
;         pxTemp = pxCurrentTimerList;
 80590ec: f240 22e8    	movw	r2, #0x2e8
 80590f0: f2c2 0200    	movt	r2, #0x2000
 80590f4: 6810         	ldr	r0, [r2]
 80590f6: 9000         	str	r0, [sp]
;         pxCurrentTimerList = pxOverflowTimerList;
 80590f8: f240 21ec    	movw	r1, #0x2ec
 80590fc: f2c2 0100    	movt	r1, #0x2000
 8059100: 6808         	ldr	r0, [r1]
 8059102: 6010         	str	r0, [r2]
;         pxOverflowTimerList = pxTemp;
 8059104: 9800         	ldr	r0, [sp]
 8059106: 6008         	str	r0, [r1]
;     }
 8059108: b002         	add	sp, #0x8
 805910a: bd80         	pop	{r7, pc}

0805910c <$d.47>:
 805910c: 59 90 05 08  	.word	0x08059059

08059110 <prvReloadTimer>:
;     {
 8059110: b580         	push	{r7, lr}
 8059112: 466f         	mov	r7, sp
 8059114: b084         	sub	sp, #0x10
 8059116: 9003         	str	r0, [sp, #0xc]
 8059118: 9102         	str	r1, [sp, #0x8]
 805911a: 9201         	str	r2, [sp, #0x4]
;         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 805911c: e7ff         	b	0x805911e <prvReloadTimer+0xe> @ imm = #-0x2
 805911e: 9803         	ldr	r0, [sp, #0xc]
 8059120: 9b02         	ldr	r3, [sp, #0x8]
 8059122: 6981         	ldr	r1, [r0, #0x18]
 8059124: 4419         	add	r1, r3
 8059126: 9a01         	ldr	r2, [sp, #0x4]
 8059128: f8df c01c    	ldr.w	r12, [pc, #0x1c]        @ 0x8059148 <prvReloadTimer+0x38>
 805912c: 47e0         	blx	r12
 805912e: b148         	cbz	r0, 0x8059144 <prvReloadTimer+0x34> @ imm = #0x12
 8059130: e7ff         	b	0x8059132 <prvReloadTimer+0x22> @ imm = #-0x2
;             xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8059132: 9803         	ldr	r0, [sp, #0xc]
 8059134: 6981         	ldr	r1, [r0, #0x18]
 8059136: 9802         	ldr	r0, [sp, #0x8]
 8059138: 4408         	add	r0, r1
 805913a: 9002         	str	r0, [sp, #0x8]
;             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 805913c: 9803         	ldr	r0, [sp, #0xc]
 805913e: 6a01         	ldr	r1, [r0, #0x20]
 8059140: 4788         	blx	r1
;         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8059142: e7ec         	b	0x805911e <prvReloadTimer+0xe> @ imm = #-0x28
;     }
 8059144: b004         	add	sp, #0x10
 8059146: bd80         	pop	{r7, pc}

08059148 <$d.49>:
 8059148: 4d 91 05 08  	.word	0x0805914d

0805914c <prvInsertTimerInActiveList>:
;     {
 805914c: b580         	push	{r7, lr}
 805914e: 466f         	mov	r7, sp
 8059150: b086         	sub	sp, #0x18
 8059152: 9005         	str	r0, [sp, #0x14]
 8059154: 9104         	str	r1, [sp, #0x10]
 8059156: 9203         	str	r2, [sp, #0xc]
 8059158: 9302         	str	r3, [sp, #0x8]
 805915a: 2000         	movs	r0, #0x0
;         BaseType_t xProcessTimerNow = pdFALSE;
 805915c: 9001         	str	r0, [sp, #0x4]
;         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 805915e: 9804         	ldr	r0, [sp, #0x10]
 8059160: 9905         	ldr	r1, [sp, #0x14]
 8059162: 6048         	str	r0, [r1, #0x4]
;         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8059164: 9805         	ldr	r0, [sp, #0x14]
 8059166: 6100         	str	r0, [r0, #0x10]
;         if( xNextExpiryTime <= xTimeNow )
 8059168: 9804         	ldr	r0, [sp, #0x10]
 805916a: 9903         	ldr	r1, [sp, #0xc]
 805916c: 4288         	cmp	r0, r1
 805916e: d816         	bhi	0x805919e <prvInsertTimerInActiveList+0x52> @ imm = #0x2c
 8059170: e7ff         	b	0x8059172 <prvInsertTimerInActiveList+0x26> @ imm = #-0x2
;             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8059172: 9803         	ldr	r0, [sp, #0xc]
 8059174: 9902         	ldr	r1, [sp, #0x8]
 8059176: 1a40         	subs	r0, r0, r1
 8059178: 9905         	ldr	r1, [sp, #0x14]
 805917a: 6989         	ldr	r1, [r1, #0x18]
 805917c: 4288         	cmp	r0, r1
 805917e: d303         	blo	0x8059188 <prvInsertTimerInActiveList+0x3c> @ imm = #0x6
 8059180: e7ff         	b	0x8059182 <prvInsertTimerInActiveList+0x36> @ imm = #-0x2
 8059182: 2001         	movs	r0, #0x1
;                 xProcessTimerNow = pdTRUE;
 8059184: 9001         	str	r0, [sp, #0x4]
;             }
 8059186: e009         	b	0x805919c <prvInsertTimerInActiveList+0x50> @ imm = #0x12
;                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8059188: f240 20ec    	movw	r0, #0x2ec
 805918c: f2c2 0000    	movt	r0, #0x2000
 8059190: 6800         	ldr	r0, [r0]
 8059192: 9905         	ldr	r1, [sp, #0x14]
 8059194: 3104         	adds	r1, #0x4
 8059196: 4a10         	ldr	r2, [pc, #0x40]         @ 0x80591d8 <prvInsertTimerInActiveList+0x8c>
 8059198: 4790         	blx	r2
 805919a: e7ff         	b	0x805919c <prvInsertTimerInActiveList+0x50> @ imm = #-0x2
;         }
 805919c: e017         	b	0x80591ce <prvInsertTimerInActiveList+0x82> @ imm = #0x2e
;             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 805919e: 9803         	ldr	r0, [sp, #0xc]
 80591a0: 9902         	ldr	r1, [sp, #0x8]
 80591a2: 4288         	cmp	r0, r1
 80591a4: d208         	bhs	0x80591b8 <prvInsertTimerInActiveList+0x6c> @ imm = #0x10
 80591a6: e7ff         	b	0x80591a8 <prvInsertTimerInActiveList+0x5c> @ imm = #-0x2
 80591a8: 9804         	ldr	r0, [sp, #0x10]
 80591aa: 9902         	ldr	r1, [sp, #0x8]
 80591ac: 4288         	cmp	r0, r1
 80591ae: d303         	blo	0x80591b8 <prvInsertTimerInActiveList+0x6c> @ imm = #0x6
 80591b0: e7ff         	b	0x80591b2 <prvInsertTimerInActiveList+0x66> @ imm = #-0x2
 80591b2: 2001         	movs	r0, #0x1
;                 xProcessTimerNow = pdTRUE;
 80591b4: 9001         	str	r0, [sp, #0x4]
;             }
 80591b6: e009         	b	0x80591cc <prvInsertTimerInActiveList+0x80> @ imm = #0x12
;                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80591b8: f240 20e8    	movw	r0, #0x2e8
 80591bc: f2c2 0000    	movt	r0, #0x2000
 80591c0: 6800         	ldr	r0, [r0]
 80591c2: 9905         	ldr	r1, [sp, #0x14]
 80591c4: 3104         	adds	r1, #0x4
 80591c6: 4a03         	ldr	r2, [pc, #0xc]          @ 0x80591d4 <prvInsertTimerInActiveList+0x88>
 80591c8: 4790         	blx	r2
 80591ca: e7ff         	b	0x80591cc <prvInsertTimerInActiveList+0x80> @ imm = #-0x2
 80591cc: e7ff         	b	0x80591ce <prvInsertTimerInActiveList+0x82> @ imm = #-0x2
;         return xProcessTimerNow;
 80591ce: 9801         	ldr	r0, [sp, #0x4]
 80591d0: b006         	add	sp, #0x18
 80591d2: bd80         	pop	{r7, pc}

080591d4 <$d.51>:
 80591d4: c9 9e 05 08  	.word	0x08059ec9
 80591d8: c9 9e 05 08  	.word	0x08059ec9

080591dc <pvPortMalloc>:
; {
 80591dc: b580         	push	{r7, lr}
 80591de: 466f         	mov	r7, sp
 80591e0: b08a         	sub	sp, #0x28
 80591e2: 9009         	str	r0, [sp, #0x24]
 80591e4: 2000         	movs	r0, #0x0
;     void * pvReturn = NULL;
 80591e6: 9005         	str	r0, [sp, #0x14]
;     if( xWantedSize > 0 )
 80591e8: 9809         	ldr	r0, [sp, #0x24]
 80591ea: b340         	cbz	r0, 0x805923e <pvPortMalloc+0x62> @ imm = #0x50
 80591ec: e7ff         	b	0x80591ee <pvPortMalloc+0x12> @ imm = #-0x2
;         if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80591ee: 9809         	ldr	r0, [sp, #0x24]
 80591f0: f110 0f09    	cmn.w	r0, #0x9
 80591f4: d81f         	bhi	0x8059236 <pvPortMalloc+0x5a> @ imm = #0x3e
 80591f6: e7ff         	b	0x80591f8 <pvPortMalloc+0x1c> @ imm = #-0x2
;             xWantedSize += xHeapStructSize;
 80591f8: 9809         	ldr	r0, [sp, #0x24]
 80591fa: 3008         	adds	r0, #0x8
 80591fc: 9009         	str	r0, [sp, #0x24]
;             if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80591fe: f89d 0024    	ldrb.w	r0, [sp, #0x24]
 8059202: 0740         	lsls	r0, r0, #0x1d
 8059204: b1a8         	cbz	r0, 0x8059232 <pvPortMalloc+0x56> @ imm = #0x2a
 8059206: e7ff         	b	0x8059208 <pvPortMalloc+0x2c> @ imm = #-0x2
;                 xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8059208: 9809         	ldr	r0, [sp, #0x24]
 805920a: f000 0007    	and	r0, r0, #0x7
 805920e: f1c0 0008    	rsb.w	r0, r0, #0x8
 8059212: 9004         	str	r0, [sp, #0x10]
;                 if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8059214: 9809         	ldr	r0, [sp, #0x24]
 8059216: 9904         	ldr	r1, [sp, #0x10]
 8059218: 43c9         	mvns	r1, r1
 805921a: 4288         	cmp	r0, r1
 805921c: d805         	bhi	0x805922a <pvPortMalloc+0x4e> @ imm = #0xa
 805921e: e7ff         	b	0x8059220 <pvPortMalloc+0x44> @ imm = #-0x2
;                     xWantedSize += xAdditionalRequiredSize;
 8059220: 9904         	ldr	r1, [sp, #0x10]
 8059222: 9809         	ldr	r0, [sp, #0x24]
 8059224: 4408         	add	r0, r1
 8059226: 9009         	str	r0, [sp, #0x24]
;                 }
 8059228: e002         	b	0x8059230 <pvPortMalloc+0x54> @ imm = #0x4
 805922a: 2000         	movs	r0, #0x0
;                     xWantedSize = 0;
 805922c: 9009         	str	r0, [sp, #0x24]
 805922e: e7ff         	b	0x8059230 <pvPortMalloc+0x54> @ imm = #-0x2
;             }
 8059230: e000         	b	0x8059234 <pvPortMalloc+0x58> @ imm = #0x0
 8059232: e7ff         	b	0x8059234 <pvPortMalloc+0x58> @ imm = #-0x2
;         }
 8059234: e002         	b	0x805923c <pvPortMalloc+0x60> @ imm = #0x4
 8059236: 2000         	movs	r0, #0x0
;             xWantedSize = 0;
 8059238: 9009         	str	r0, [sp, #0x24]
 805923a: e7ff         	b	0x805923c <pvPortMalloc+0x60> @ imm = #-0x2
;     }
 805923c: e000         	b	0x8059240 <pvPortMalloc+0x64> @ imm = #0x0
 805923e: e7ff         	b	0x8059240 <pvPortMalloc+0x64> @ imm = #-0x2
;     vTaskSuspendAll();
 8059240: 4893         	ldr	r0, [pc, #0x24c]        @ 0x8059490 <pvPortMalloc+0x2b4>
 8059242: 4780         	blx	r0
;         if( pxEnd == NULL )
 8059244: f240 301c    	movw	r0, #0x31c
 8059248: f2c2 0000    	movt	r0, #0x2000
 805924c: 6800         	ldr	r0, [r0]
 805924e: b918         	cbnz	r0, 0x8059258 <pvPortMalloc+0x7c> @ imm = #0x6
 8059250: e7ff         	b	0x8059252 <pvPortMalloc+0x76> @ imm = #-0x2
;             prvHeapInit();
 8059252: 4890         	ldr	r0, [pc, #0x240]        @ 0x8059494 <pvPortMalloc+0x2b8>
 8059254: 4780         	blx	r0
;         }
 8059256: e000         	b	0x805925a <pvPortMalloc+0x7e> @ imm = #0x0
 8059258: e7ff         	b	0x805925a <pvPortMalloc+0x7e> @ imm = #-0x2
;         if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 805925a: f89d 0027    	ldrb.w	r0, [sp, #0x27]
 805925e: 0600         	lsls	r0, r0, #0x18
 8059260: 2800         	cmp	r0, #0x0
 8059262: f100 8105    	bmi.w	0x8059470 <pvPortMalloc+0x294> @ imm = #0x20a
 8059266: e7ff         	b	0x8059268 <pvPortMalloc+0x8c> @ imm = #-0x2
;             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8059268: 9809         	ldr	r0, [sp, #0x24]
 805926a: 2800         	cmp	r0, #0x0
 805926c: f000 80fe    	beq.w	0x805946c <pvPortMalloc+0x290> @ imm = #0x1fc
 8059270: e7ff         	b	0x8059272 <pvPortMalloc+0x96> @ imm = #-0x2
 8059272: 9809         	ldr	r0, [sp, #0x24]
 8059274: f240 3120    	movw	r1, #0x320
 8059278: f2c2 0100    	movt	r1, #0x2000
 805927c: 6809         	ldr	r1, [r1]
 805927e: 4288         	cmp	r0, r1
 8059280: f200 80f4    	bhi.w	0x805946c <pvPortMalloc+0x290> @ imm = #0x1e8
 8059284: e7ff         	b	0x8059286 <pvPortMalloc+0xaa> @ imm = #-0x2
;                 pxPreviousBlock = &xStart;
 8059286: f240 3024    	movw	r0, #0x324
 805928a: f2c2 0000    	movt	r0, #0x2000
 805928e: 9007         	str	r0, [sp, #0x1c]
;                 pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8059290: 6800         	ldr	r0, [r0]
 8059292: 9008         	str	r0, [sp, #0x20]
;                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 8059294: 9908         	ldr	r1, [sp, #0x20]
 8059296: 2000         	movs	r0, #0x0
 8059298: f240 322c    	movw	r2, #0x32c
 805929c: f2c2 0200    	movt	r2, #0x2000
 80592a0: 4291         	cmp	r1, r2
 80592a2: 9003         	str	r0, [sp, #0xc]
 80592a4: d30e         	blo	0x80592c4 <pvPortMalloc+0xe8> @ imm = #0x1c
 80592a6: e7ff         	b	0x80592a8 <pvPortMalloc+0xcc> @ imm = #-0x2
 80592a8: 9908         	ldr	r1, [sp, #0x20]
 80592aa: f240 302c    	movw	r0, #0x32c
 80592ae: f2c2 0000    	movt	r0, #0x2000
 80592b2: f641 72ff    	movw	r2, #0x1fff
 80592b6: 4402         	add	r2, r0
 80592b8: 2000         	movs	r0, #0x0
 80592ba: 4291         	cmp	r1, r2
 80592bc: bf98         	it	ls
 80592be: 2001         	movls	r0, #0x1
 80592c0: 9003         	str	r0, [sp, #0xc]
 80592c2: e7ff         	b	0x80592c4 <pvPortMalloc+0xe8> @ imm = #-0x2
 80592c4: 9803         	ldr	r0, [sp, #0xc]
;                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 80592c6: 07c0         	lsls	r0, r0, #0x1f
 80592c8: b920         	cbnz	r0, 0x80592d4 <pvPortMalloc+0xf8> @ imm = #0x8
 80592ca: e7ff         	b	0x80592cc <pvPortMalloc+0xf0> @ imm = #-0x2
 80592cc: 4878         	ldr	r0, [pc, #0x1e0]        @ 0x80594b0 <pvPortMalloc+0x2d4>
 80592ce: 4780         	blx	r0
 80592d0: e7ff         	b	0x80592d2 <pvPortMalloc+0xf6> @ imm = #-0x2
 80592d2: e7fe         	b	0x80592d2 <pvPortMalloc+0xf6> @ imm = #-0x4
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80592d4: e7ff         	b	0x80592d6 <pvPortMalloc+0xfa> @ imm = #-0x2
 80592d6: 9808         	ldr	r0, [sp, #0x20]
 80592d8: 6841         	ldr	r1, [r0, #0x4]
 80592da: 9a09         	ldr	r2, [sp, #0x24]
 80592dc: 2000         	movs	r0, #0x0
 80592de: 4291         	cmp	r1, r2
 80592e0: 9002         	str	r0, [sp, #0x8]
 80592e2: d207         	bhs	0x80592f4 <pvPortMalloc+0x118> @ imm = #0xe
 80592e4: e7ff         	b	0x80592e6 <pvPortMalloc+0x10a> @ imm = #-0x2
 80592e6: 9808         	ldr	r0, [sp, #0x20]
 80592e8: 6800         	ldr	r0, [r0]
 80592ea: 2800         	cmp	r0, #0x0
 80592ec: bf18         	it	ne
 80592ee: 2001         	movne	r0, #0x1
 80592f0: 9002         	str	r0, [sp, #0x8]
 80592f2: e7ff         	b	0x80592f4 <pvPortMalloc+0x118> @ imm = #-0x2
 80592f4: 9802         	ldr	r0, [sp, #0x8]
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80592f6: 07c0         	lsls	r0, r0, #0x1f
 80592f8: b330         	cbz	r0, 0x8059348 <pvPortMalloc+0x16c> @ imm = #0x4c
 80592fa: e7ff         	b	0x80592fc <pvPortMalloc+0x120> @ imm = #-0x2
;                     pxPreviousBlock = pxBlock;
 80592fc: 9808         	ldr	r0, [sp, #0x20]
 80592fe: 9007         	str	r0, [sp, #0x1c]
;                     pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8059300: 9808         	ldr	r0, [sp, #0x20]
 8059302: 6800         	ldr	r0, [r0]
 8059304: 9008         	str	r0, [sp, #0x20]
;                     heapVALIDATE_BLOCK_POINTER( pxBlock );
 8059306: 9908         	ldr	r1, [sp, #0x20]
 8059308: 2000         	movs	r0, #0x0
 805930a: f240 322c    	movw	r2, #0x32c
 805930e: f2c2 0200    	movt	r2, #0x2000
 8059312: 4291         	cmp	r1, r2
 8059314: 9001         	str	r0, [sp, #0x4]
 8059316: d30e         	blo	0x8059336 <pvPortMalloc+0x15a> @ imm = #0x1c
 8059318: e7ff         	b	0x805931a <pvPortMalloc+0x13e> @ imm = #-0x2
 805931a: 9908         	ldr	r1, [sp, #0x20]
 805931c: f240 302c    	movw	r0, #0x32c
 8059320: f2c2 0000    	movt	r0, #0x2000
 8059324: f641 72ff    	movw	r2, #0x1fff
 8059328: 4402         	add	r2, r0
 805932a: 2000         	movs	r0, #0x0
 805932c: 4291         	cmp	r1, r2
 805932e: bf98         	it	ls
 8059330: 2001         	movls	r0, #0x1
 8059332: 9001         	str	r0, [sp, #0x4]
 8059334: e7ff         	b	0x8059336 <pvPortMalloc+0x15a> @ imm = #-0x2
 8059336: 9801         	ldr	r0, [sp, #0x4]
;                     heapVALIDATE_BLOCK_POINTER( pxBlock );
 8059338: 07c0         	lsls	r0, r0, #0x1f
 805933a: b920         	cbnz	r0, 0x8059346 <pvPortMalloc+0x16a> @ imm = #0x8
 805933c: e7ff         	b	0x805933e <pvPortMalloc+0x162> @ imm = #-0x2
 805933e: 485b         	ldr	r0, [pc, #0x16c]        @ 0x80594ac <pvPortMalloc+0x2d0>
 8059340: 4780         	blx	r0
 8059342: e7ff         	b	0x8059344 <pvPortMalloc+0x168> @ imm = #-0x2
 8059344: e7fe         	b	0x8059344 <pvPortMalloc+0x168> @ imm = #-0x4
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8059346: e7c6         	b	0x80592d6 <pvPortMalloc+0xfa> @ imm = #-0x74
;                 if( pxBlock != pxEnd )
 8059348: 9808         	ldr	r0, [sp, #0x20]
 805934a: f240 311c    	movw	r1, #0x31c
 805934e: f2c2 0100    	movt	r1, #0x2000
 8059352: 6809         	ldr	r1, [r1]
 8059354: 4288         	cmp	r0, r1
 8059356: f000 8087    	beq.w	0x8059468 <pvPortMalloc+0x28c> @ imm = #0x10e
 805935a: e7ff         	b	0x805935c <pvPortMalloc+0x180> @ imm = #-0x2
;                     pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 805935c: 9807         	ldr	r0, [sp, #0x1c]
 805935e: 6800         	ldr	r0, [r0]
 8059360: 3008         	adds	r0, #0x8
 8059362: 9005         	str	r0, [sp, #0x14]
;                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 8059364: 9905         	ldr	r1, [sp, #0x14]
 8059366: 2000         	movs	r0, #0x0
 8059368: f240 322c    	movw	r2, #0x32c
 805936c: f2c2 0200    	movt	r2, #0x2000
 8059370: 4291         	cmp	r1, r2
 8059372: 9000         	str	r0, [sp]
 8059374: d30e         	blo	0x8059394 <pvPortMalloc+0x1b8> @ imm = #0x1c
 8059376: e7ff         	b	0x8059378 <pvPortMalloc+0x19c> @ imm = #-0x2
 8059378: 9905         	ldr	r1, [sp, #0x14]
 805937a: f240 302c    	movw	r0, #0x32c
 805937e: f2c2 0000    	movt	r0, #0x2000
 8059382: f641 72ff    	movw	r2, #0x1fff
 8059386: 4402         	add	r2, r0
 8059388: 2000         	movs	r0, #0x0
 805938a: 4291         	cmp	r1, r2
 805938c: bf98         	it	ls
 805938e: 2001         	movls	r0, #0x1
 8059390: 9000         	str	r0, [sp]
 8059392: e7ff         	b	0x8059394 <pvPortMalloc+0x1b8> @ imm = #-0x2
 8059394: 9800         	ldr	r0, [sp]
;                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 8059396: 07c0         	lsls	r0, r0, #0x1f
 8059398: b920         	cbnz	r0, 0x80593a4 <pvPortMalloc+0x1c8> @ imm = #0x8
 805939a: e7ff         	b	0x805939c <pvPortMalloc+0x1c0> @ imm = #-0x2
 805939c: 4842         	ldr	r0, [pc, #0x108]        @ 0x80594a8 <pvPortMalloc+0x2cc>
 805939e: 4780         	blx	r0
 80593a0: e7ff         	b	0x80593a2 <pvPortMalloc+0x1c6> @ imm = #-0x2
 80593a2: e7fe         	b	0x80593a2 <pvPortMalloc+0x1c6> @ imm = #-0x4
;                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80593a4: 9808         	ldr	r0, [sp, #0x20]
 80593a6: 6800         	ldr	r0, [r0]
 80593a8: 9907         	ldr	r1, [sp, #0x1c]
 80593aa: 6008         	str	r0, [r1]
;                     configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80593ac: 9808         	ldr	r0, [sp, #0x20]
 80593ae: 6840         	ldr	r0, [r0, #0x4]
 80593b0: 9909         	ldr	r1, [sp, #0x24]
 80593b2: 4288         	cmp	r0, r1
 80593b4: d204         	bhs	0x80593c0 <pvPortMalloc+0x1e4> @ imm = #0x8
 80593b6: e7ff         	b	0x80593b8 <pvPortMalloc+0x1dc> @ imm = #-0x2
 80593b8: 483a         	ldr	r0, [pc, #0xe8]         @ 0x80594a4 <pvPortMalloc+0x2c8>
 80593ba: 4780         	blx	r0
 80593bc: e7ff         	b	0x80593be <pvPortMalloc+0x1e2> @ imm = #-0x2
 80593be: e7fe         	b	0x80593be <pvPortMalloc+0x1e2> @ imm = #-0x4
;                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80593c0: 9808         	ldr	r0, [sp, #0x20]
 80593c2: 6840         	ldr	r0, [r0, #0x4]
 80593c4: 9909         	ldr	r1, [sp, #0x24]
 80593c6: 1a40         	subs	r0, r0, r1
 80593c8: 2811         	cmp	r0, #0x11
 80593ca: d31e         	blo	0x805940a <pvPortMalloc+0x22e> @ imm = #0x3c
 80593cc: e7ff         	b	0x80593ce <pvPortMalloc+0x1f2> @ imm = #-0x2
;                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80593ce: 9808         	ldr	r0, [sp, #0x20]
 80593d0: 9909         	ldr	r1, [sp, #0x24]
 80593d2: 4408         	add	r0, r1
 80593d4: 9006         	str	r0, [sp, #0x18]
;                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80593d6: f89d 0018    	ldrb.w	r0, [sp, #0x18]
 80593da: 0740         	lsls	r0, r0, #0x1d
 80593dc: b120         	cbz	r0, 0x80593e8 <pvPortMalloc+0x20c> @ imm = #0x8
 80593de: e7ff         	b	0x80593e0 <pvPortMalloc+0x204> @ imm = #-0x2
 80593e0: 482f         	ldr	r0, [pc, #0xbc]         @ 0x80594a0 <pvPortMalloc+0x2c4>
 80593e2: 4780         	blx	r0
 80593e4: e7ff         	b	0x80593e6 <pvPortMalloc+0x20a> @ imm = #-0x2
 80593e6: e7fe         	b	0x80593e6 <pvPortMalloc+0x20a> @ imm = #-0x4
;                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80593e8: 9808         	ldr	r0, [sp, #0x20]
 80593ea: 6840         	ldr	r0, [r0, #0x4]
 80593ec: 9909         	ldr	r1, [sp, #0x24]
 80593ee: 1a40         	subs	r0, r0, r1
 80593f0: 9906         	ldr	r1, [sp, #0x18]
 80593f2: 6048         	str	r0, [r1, #0x4]
;                         pxBlock->xBlockSize = xWantedSize;
 80593f4: 9809         	ldr	r0, [sp, #0x24]
 80593f6: 9908         	ldr	r1, [sp, #0x20]
 80593f8: 6048         	str	r0, [r1, #0x4]
;                         pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80593fa: 9807         	ldr	r0, [sp, #0x1c]
 80593fc: 6800         	ldr	r0, [r0]
 80593fe: 9906         	ldr	r1, [sp, #0x18]
 8059400: 6008         	str	r0, [r1]
;                         pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8059402: 9806         	ldr	r0, [sp, #0x18]
 8059404: 9907         	ldr	r1, [sp, #0x1c]
 8059406: 6008         	str	r0, [r1]
;                     }
 8059408: e000         	b	0x805940c <pvPortMalloc+0x230> @ imm = #0x0
 805940a: e7ff         	b	0x805940c <pvPortMalloc+0x230> @ imm = #-0x2
;                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 805940c: 9808         	ldr	r0, [sp, #0x20]
 805940e: 6842         	ldr	r2, [r0, #0x4]
 8059410: f240 3020    	movw	r0, #0x320
 8059414: f2c2 0000    	movt	r0, #0x2000
 8059418: 6801         	ldr	r1, [r0]
 805941a: 1a89         	subs	r1, r1, r2
 805941c: 6001         	str	r1, [r0]
;                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 805941e: 6800         	ldr	r0, [r0]
 8059420: f242 312c    	movw	r1, #0x232c
 8059424: f2c2 0100    	movt	r1, #0x2000
 8059428: 6809         	ldr	r1, [r1]
 805942a: 4288         	cmp	r0, r1
 805942c: d20b         	bhs	0x8059446 <pvPortMalloc+0x26a> @ imm = #0x16
 805942e: e7ff         	b	0x8059430 <pvPortMalloc+0x254> @ imm = #-0x2
;                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8059430: f240 3020    	movw	r0, #0x320
 8059434: f2c2 0000    	movt	r0, #0x2000
 8059438: 6800         	ldr	r0, [r0]
 805943a: f242 312c    	movw	r1, #0x232c
 805943e: f2c2 0100    	movt	r1, #0x2000
 8059442: 6008         	str	r0, [r1]
;                     }
 8059444: e000         	b	0x8059448 <pvPortMalloc+0x26c> @ imm = #0x0
 8059446: e7ff         	b	0x8059448 <pvPortMalloc+0x26c> @ imm = #-0x2
;                     heapALLOCATE_BLOCK( pxBlock );
 8059448: 9908         	ldr	r1, [sp, #0x20]
 805944a: 6848         	ldr	r0, [r1, #0x4]
 805944c: f040 4000    	orr	r0, r0, #0x80000000
 8059450: 6048         	str	r0, [r1, #0x4]
;                     pxBlock->pxNextFreeBlock = NULL;
 8059452: 9908         	ldr	r1, [sp, #0x20]
 8059454: 2000         	movs	r0, #0x0
 8059456: 6008         	str	r0, [r1]
;                     xNumberOfSuccessfulAllocations++;
 8059458: f242 3130    	movw	r1, #0x2330
 805945c: f2c2 0100    	movt	r1, #0x2000
 8059460: 6808         	ldr	r0, [r1]
 8059462: 3001         	adds	r0, #0x1
 8059464: 6008         	str	r0, [r1]
;                 }
 8059466: e000         	b	0x805946a <pvPortMalloc+0x28e> @ imm = #0x0
 8059468: e7ff         	b	0x805946a <pvPortMalloc+0x28e> @ imm = #-0x2
;             }
 805946a: e000         	b	0x805946e <pvPortMalloc+0x292> @ imm = #0x0
 805946c: e7ff         	b	0x805946e <pvPortMalloc+0x292> @ imm = #-0x2
;         }
 805946e: e000         	b	0x8059472 <pvPortMalloc+0x296> @ imm = #0x0
 8059470: e7ff         	b	0x8059472 <pvPortMalloc+0x296> @ imm = #-0x2
;     ( void ) xTaskResumeAll();
 8059472: 4809         	ldr	r0, [pc, #0x24]         @ 0x8059498 <pvPortMalloc+0x2bc>
 8059474: 4780         	blx	r0
;     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8059476: f89d 0014    	ldrb.w	r0, [sp, #0x14]
 805947a: 0740         	lsls	r0, r0, #0x1d
 805947c: b120         	cbz	r0, 0x8059488 <pvPortMalloc+0x2ac> @ imm = #0x8
 805947e: e7ff         	b	0x8059480 <pvPortMalloc+0x2a4> @ imm = #-0x2
 8059480: 4806         	ldr	r0, [pc, #0x18]         @ 0x805949c <pvPortMalloc+0x2c0>
 8059482: 4780         	blx	r0
 8059484: e7ff         	b	0x8059486 <pvPortMalloc+0x2aa> @ imm = #-0x2
 8059486: e7fe         	b	0x8059486 <pvPortMalloc+0x2aa> @ imm = #-0x4
;     return pvReturn;
 8059488: 9805         	ldr	r0, [sp, #0x14]
 805948a: b00a         	add	sp, #0x28
 805948c: bd80         	pop	{r7, pc}
 805948e: bf00         	nop

08059490 <$d.1>:
 8059490: 59 58 05 08  	.word	0x08055859
 8059494: b5 94 05 08  	.word	0x080594b5
 8059498: 7d 59 05 08  	.word	0x0805597d
 805949c: 55 cd 05 08  	.word	0x0805cd55
 80594a0: 55 cd 05 08  	.word	0x0805cd55
 80594a4: 55 cd 05 08  	.word	0x0805cd55
 80594a8: 55 cd 05 08  	.word	0x0805cd55
 80594ac: 55 cd 05 08  	.word	0x0805cd55
 80594b0: 55 cd 05 08  	.word	0x0805cd55

080594b4 <prvHeapInit>:
; {
 80594b4: b084         	sub	sp, #0x10
 80594b6: f44f 5000    	mov.w	r0, #0x2000
;     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80594ba: 9000         	str	r0, [sp]
;     uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80594bc: f240 302c    	movw	r0, #0x32c
 80594c0: f2c2 0000    	movt	r0, #0x2000
 80594c4: 9002         	str	r0, [sp, #0x8]
;     if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80594c6: f89d 0008    	ldrb.w	r0, [sp, #0x8]
 80594ca: 0740         	lsls	r0, r0, #0x1d
 80594cc: b188         	cbz	r0, 0x80594f2 <prvHeapInit+0x3e> @ imm = #0x22
 80594ce: e7ff         	b	0x80594d0 <prvHeapInit+0x1c> @ imm = #-0x2
;         uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80594d0: 9802         	ldr	r0, [sp, #0x8]
 80594d2: 3007         	adds	r0, #0x7
 80594d4: 9002         	str	r0, [sp, #0x8]
;         uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80594d6: 9802         	ldr	r0, [sp, #0x8]
 80594d8: f020 0007    	bic	r0, r0, #0x7
 80594dc: 9002         	str	r0, [sp, #0x8]
;         xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80594de: 9a02         	ldr	r2, [sp, #0x8]
 80594e0: f240 312c    	movw	r1, #0x32c
 80594e4: f2c2 0100    	movt	r1, #0x2000
 80594e8: 9800         	ldr	r0, [sp]
 80594ea: 1a89         	subs	r1, r1, r2
 80594ec: 4408         	add	r0, r1
 80594ee: 9000         	str	r0, [sp]
;     }
 80594f0: e7ff         	b	0x80594f2 <prvHeapInit+0x3e> @ imm = #-0x2
;     xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80594f2: 9902         	ldr	r1, [sp, #0x8]
 80594f4: f240 3024    	movw	r0, #0x324
 80594f8: f2c2 0000    	movt	r0, #0x2000
 80594fc: 6001         	str	r1, [r0]
 80594fe: 2100         	movs	r1, #0x0
;     xStart.xBlockSize = ( size_t ) 0;
 8059500: 6041         	str	r1, [r0, #0x4]
;     uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8059502: 9802         	ldr	r0, [sp, #0x8]
 8059504: 9a00         	ldr	r2, [sp]
 8059506: 4410         	add	r0, r2
 8059508: 9001         	str	r0, [sp, #0x4]
;     uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 805950a: 9801         	ldr	r0, [sp, #0x4]
 805950c: 3808         	subs	r0, #0x8
 805950e: 9001         	str	r0, [sp, #0x4]
;     uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8059510: 9801         	ldr	r0, [sp, #0x4]
 8059512: f020 0007    	bic	r0, r0, #0x7
 8059516: 9001         	str	r0, [sp, #0x4]
;     pxEnd = ( BlockLink_t * ) uxEndAddress;
 8059518: 9a01         	ldr	r2, [sp, #0x4]
 805951a: f240 301c    	movw	r0, #0x31c
 805951e: f2c2 0000    	movt	r0, #0x2000
 8059522: 6002         	str	r2, [r0]
;     pxEnd->xBlockSize = 0;
 8059524: 6802         	ldr	r2, [r0]
 8059526: 6051         	str	r1, [r2, #0x4]
;     pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8059528: 6802         	ldr	r2, [r0]
 805952a: 6011         	str	r1, [r2]
;     pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 805952c: 9902         	ldr	r1, [sp, #0x8]
 805952e: 9103         	str	r1, [sp, #0xc]
;     pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8059530: 9901         	ldr	r1, [sp, #0x4]
 8059532: 9a03         	ldr	r2, [sp, #0xc]
 8059534: 1a89         	subs	r1, r1, r2
 8059536: 6051         	str	r1, [r2, #0x4]
;     pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8059538: 6800         	ldr	r0, [r0]
 805953a: 9903         	ldr	r1, [sp, #0xc]
 805953c: 6008         	str	r0, [r1]
;     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 805953e: 9803         	ldr	r0, [sp, #0xc]
 8059540: 6840         	ldr	r0, [r0, #0x4]
 8059542: f242 312c    	movw	r1, #0x232c
 8059546: f2c2 0100    	movt	r1, #0x2000
 805954a: 6008         	str	r0, [r1]
;     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 805954c: 9803         	ldr	r0, [sp, #0xc]
 805954e: 6840         	ldr	r0, [r0, #0x4]
 8059550: f240 3120    	movw	r1, #0x320
 8059554: f2c2 0100    	movt	r1, #0x2000
 8059558: 6008         	str	r0, [r1]
; }
 805955a: b004         	add	sp, #0x10
 805955c: 4770         	bx	lr
 805955e: bf00         	nop

08059560 <vPortFree>:
; {
 8059560: b580         	push	{r7, lr}
 8059562: 466f         	mov	r7, sp
 8059564: b084         	sub	sp, #0x10
 8059566: 9003         	str	r0, [sp, #0xc]
;     uint8_t * puc = ( uint8_t * ) pv;
 8059568: 9803         	ldr	r0, [sp, #0xc]
 805956a: 9002         	str	r0, [sp, #0x8]
;     if( pv != NULL )
 805956c: 9803         	ldr	r0, [sp, #0xc]
 805956e: 2800         	cmp	r0, #0x0
 8059570: d064         	beq	0x805963c <vPortFree+0xdc> @ imm = #0xc8
 8059572: e7ff         	b	0x8059574 <vPortFree+0x14> @ imm = #-0x2
;         puc -= xHeapStructSize;
 8059574: 9802         	ldr	r0, [sp, #0x8]
 8059576: 3808         	subs	r0, #0x8
 8059578: 9002         	str	r0, [sp, #0x8]
;         pxLink = ( void * ) puc;
 805957a: 9802         	ldr	r0, [sp, #0x8]
 805957c: 9001         	str	r0, [sp, #0x4]
;         heapVALIDATE_BLOCK_POINTER( pxLink );
 805957e: 9901         	ldr	r1, [sp, #0x4]
 8059580: 2000         	movs	r0, #0x0
 8059582: f240 322c    	movw	r2, #0x32c
 8059586: f2c2 0200    	movt	r2, #0x2000
 805958a: 4291         	cmp	r1, r2
 805958c: 9000         	str	r0, [sp]
 805958e: d30e         	blo	0x80595ae <vPortFree+0x4e> @ imm = #0x1c
 8059590: e7ff         	b	0x8059592 <vPortFree+0x32> @ imm = #-0x2
 8059592: 9901         	ldr	r1, [sp, #0x4]
 8059594: f240 302c    	movw	r0, #0x32c
 8059598: f2c2 0000    	movt	r0, #0x2000
 805959c: f641 72ff    	movw	r2, #0x1fff
 80595a0: 4402         	add	r2, r0
 80595a2: 2000         	movs	r0, #0x0
 80595a4: 4291         	cmp	r1, r2
 80595a6: bf98         	it	ls
 80595a8: 2001         	movls	r0, #0x1
 80595aa: 9000         	str	r0, [sp]
 80595ac: e7ff         	b	0x80595ae <vPortFree+0x4e> @ imm = #-0x2
 80595ae: 9800         	ldr	r0, [sp]
;         heapVALIDATE_BLOCK_POINTER( pxLink );
 80595b0: 07c0         	lsls	r0, r0, #0x1f
 80595b2: b920         	cbnz	r0, 0x80595be <vPortFree+0x5e> @ imm = #0x8
 80595b4: e7ff         	b	0x80595b6 <vPortFree+0x56> @ imm = #-0x2
 80595b6: 4827         	ldr	r0, [pc, #0x9c]         @ 0x8059654 <vPortFree+0xf4>
 80595b8: 4780         	blx	r0
 80595ba: e7ff         	b	0x80595bc <vPortFree+0x5c> @ imm = #-0x2
 80595bc: e7fe         	b	0x80595bc <vPortFree+0x5c> @ imm = #-0x4
;         configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80595be: 9801         	ldr	r0, [sp, #0x4]
 80595c0: 79c1         	ldrb	r1, [r0, #0x7]
 80595c2: 2000         	movs	r0, #0x0
 80595c4: ebb0 1fd1    	cmp.w	r0, r1, lsr #7
 80595c8: d104         	bne	0x80595d4 <vPortFree+0x74> @ imm = #0x8
 80595ca: e7ff         	b	0x80595cc <vPortFree+0x6c> @ imm = #-0x2
 80595cc: 4820         	ldr	r0, [pc, #0x80]         @ 0x8059650 <vPortFree+0xf0>
 80595ce: 4780         	blx	r0
 80595d0: e7ff         	b	0x80595d2 <vPortFree+0x72> @ imm = #-0x2
 80595d2: e7fe         	b	0x80595d2 <vPortFree+0x72> @ imm = #-0x4
;         configASSERT( pxLink->pxNextFreeBlock == NULL );
 80595d4: 9801         	ldr	r0, [sp, #0x4]
 80595d6: 6800         	ldr	r0, [r0]
 80595d8: b120         	cbz	r0, 0x80595e4 <vPortFree+0x84> @ imm = #0x8
 80595da: e7ff         	b	0x80595dc <vPortFree+0x7c> @ imm = #-0x2
 80595dc: 481b         	ldr	r0, [pc, #0x6c]         @ 0x805964c <vPortFree+0xec>
 80595de: 4780         	blx	r0
 80595e0: e7ff         	b	0x80595e2 <vPortFree+0x82> @ imm = #-0x2
 80595e2: e7fe         	b	0x80595e2 <vPortFree+0x82> @ imm = #-0x4
;         if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80595e4: 9801         	ldr	r0, [sp, #0x4]
 80595e6: 79c1         	ldrb	r1, [r0, #0x7]
 80595e8: 2000         	movs	r0, #0x0
 80595ea: ebb0 1fd1    	cmp.w	r0, r1, lsr #7
 80595ee: d023         	beq	0x8059638 <vPortFree+0xd8> @ imm = #0x46
 80595f0: e7ff         	b	0x80595f2 <vPortFree+0x92> @ imm = #-0x2
;             if( pxLink->pxNextFreeBlock == NULL )
 80595f2: 9801         	ldr	r0, [sp, #0x4]
 80595f4: 6800         	ldr	r0, [r0]
 80595f6: b9e8         	cbnz	r0, 0x8059634 <vPortFree+0xd4> @ imm = #0x3a
 80595f8: e7ff         	b	0x80595fa <vPortFree+0x9a> @ imm = #-0x2
;                 heapFREE_BLOCK( pxLink );
 80595fa: 9901         	ldr	r1, [sp, #0x4]
 80595fc: 6848         	ldr	r0, [r1, #0x4]
 80595fe: f020 4000    	bic	r0, r0, #0x80000000
 8059602: 6048         	str	r0, [r1, #0x4]
;                 vTaskSuspendAll();
 8059604: 480e         	ldr	r0, [pc, #0x38]         @ 0x8059640 <vPortFree+0xe0>
 8059606: 4780         	blx	r0
;                     xFreeBytesRemaining += pxLink->xBlockSize;
 8059608: 9801         	ldr	r0, [sp, #0x4]
 805960a: 6842         	ldr	r2, [r0, #0x4]
 805960c: f240 3120    	movw	r1, #0x320
 8059610: f2c2 0100    	movt	r1, #0x2000
 8059614: 6808         	ldr	r0, [r1]
 8059616: 4410         	add	r0, r2
 8059618: 6008         	str	r0, [r1]
;                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 805961a: 9801         	ldr	r0, [sp, #0x4]
 805961c: 4909         	ldr	r1, [pc, #0x24]         @ 0x8059644 <vPortFree+0xe4>
 805961e: 4788         	blx	r1
;                     xNumberOfSuccessfulFrees++;
 8059620: f242 3134    	movw	r1, #0x2334
 8059624: f2c2 0100    	movt	r1, #0x2000
 8059628: 6808         	ldr	r0, [r1]
 805962a: 3001         	adds	r0, #0x1
 805962c: 6008         	str	r0, [r1]
;                 ( void ) xTaskResumeAll();
 805962e: 4806         	ldr	r0, [pc, #0x18]         @ 0x8059648 <vPortFree+0xe8>
 8059630: 4780         	blx	r0
;             }
 8059632: e000         	b	0x8059636 <vPortFree+0xd6> @ imm = #0x0
 8059634: e7ff         	b	0x8059636 <vPortFree+0xd6> @ imm = #-0x2
;         }
 8059636: e000         	b	0x805963a <vPortFree+0xda> @ imm = #0x0
 8059638: e7ff         	b	0x805963a <vPortFree+0xda> @ imm = #-0x2
;     }
 805963a: e7ff         	b	0x805963c <vPortFree+0xdc> @ imm = #-0x2
; }
 805963c: b004         	add	sp, #0x10
 805963e: bd80         	pop	{r7, pc}

08059640 <$d.3>:
 8059640: 59 58 05 08  	.word	0x08055859
 8059644: 59 96 05 08  	.word	0x08059659
 8059648: 7d 59 05 08  	.word	0x0805597d
 805964c: 55 cd 05 08  	.word	0x0805cd55
 8059650: 55 cd 05 08  	.word	0x0805cd55
 8059654: 55 cd 05 08  	.word	0x0805cd55

08059658 <prvInsertBlockIntoFreeList>:
; {
 8059658: b580         	push	{r7, lr}
 805965a: 466f         	mov	r7, sp
 805965c: b084         	sub	sp, #0x10
 805965e: 9003         	str	r0, [sp, #0xc]
;     for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8059660: f240 3024    	movw	r0, #0x324
 8059664: f2c2 0000    	movt	r0, #0x2000
 8059668: 9002         	str	r0, [sp, #0x8]
 805966a: e7ff         	b	0x805966c <prvInsertBlockIntoFreeList+0x14> @ imm = #-0x2
 805966c: 9802         	ldr	r0, [sp, #0x8]
 805966e: 6800         	ldr	r0, [r0]
 8059670: 9903         	ldr	r1, [sp, #0xc]
 8059672: 4288         	cmp	r0, r1
 8059674: d205         	bhs	0x8059682 <prvInsertBlockIntoFreeList+0x2a> @ imm = #0xa
 8059676: e7ff         	b	0x8059678 <prvInsertBlockIntoFreeList+0x20> @ imm = #-0x2
;     }
 8059678: e7ff         	b	0x805967a <prvInsertBlockIntoFreeList+0x22> @ imm = #-0x2
;     for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 805967a: 9802         	ldr	r0, [sp, #0x8]
 805967c: 6800         	ldr	r0, [r0]
 805967e: 9002         	str	r0, [sp, #0x8]
 8059680: e7f4         	b	0x805966c <prvInsertBlockIntoFreeList+0x14> @ imm = #-0x18
;     if( pxIterator != &xStart )
 8059682: 9802         	ldr	r0, [sp, #0x8]
 8059684: f240 3124    	movw	r1, #0x324
 8059688: f2c2 0100    	movt	r1, #0x2000
 805968c: 4288         	cmp	r0, r1
 805968e: d021         	beq	0x80596d4 <prvInsertBlockIntoFreeList+0x7c> @ imm = #0x42
 8059690: e7ff         	b	0x8059692 <prvInsertBlockIntoFreeList+0x3a> @ imm = #-0x2
;         heapVALIDATE_BLOCK_POINTER( pxIterator );
 8059692: 9902         	ldr	r1, [sp, #0x8]
 8059694: 2000         	movs	r0, #0x0
 8059696: f240 322c    	movw	r2, #0x32c
 805969a: f2c2 0200    	movt	r2, #0x2000
 805969e: 4291         	cmp	r1, r2
 80596a0: 9000         	str	r0, [sp]
 80596a2: d30e         	blo	0x80596c2 <prvInsertBlockIntoFreeList+0x6a> @ imm = #0x1c
 80596a4: e7ff         	b	0x80596a6 <prvInsertBlockIntoFreeList+0x4e> @ imm = #-0x2
 80596a6: 9902         	ldr	r1, [sp, #0x8]
 80596a8: f240 302c    	movw	r0, #0x32c
 80596ac: f2c2 0000    	movt	r0, #0x2000
 80596b0: f641 72ff    	movw	r2, #0x1fff
 80596b4: 4402         	add	r2, r0
 80596b6: 2000         	movs	r0, #0x0
 80596b8: 4291         	cmp	r1, r2
 80596ba: bf98         	it	ls
 80596bc: 2001         	movls	r0, #0x1
 80596be: 9000         	str	r0, [sp]
 80596c0: e7ff         	b	0x80596c2 <prvInsertBlockIntoFreeList+0x6a> @ imm = #-0x2
 80596c2: 9800         	ldr	r0, [sp]
;         heapVALIDATE_BLOCK_POINTER( pxIterator );
 80596c4: 07c0         	lsls	r0, r0, #0x1f
 80596c6: b920         	cbnz	r0, 0x80596d2 <prvInsertBlockIntoFreeList+0x7a> @ imm = #0x8
 80596c8: e7ff         	b	0x80596ca <prvInsertBlockIntoFreeList+0x72> @ imm = #-0x2
 80596ca: 482a         	ldr	r0, [pc, #0xa8]         @ 0x8059774 <prvInsertBlockIntoFreeList+0x11c>
 80596cc: 4780         	blx	r0
 80596ce: e7ff         	b	0x80596d0 <prvInsertBlockIntoFreeList+0x78> @ imm = #-0x2
 80596d0: e7fe         	b	0x80596d0 <prvInsertBlockIntoFreeList+0x78> @ imm = #-0x4
;     }
 80596d2: e7ff         	b	0x80596d4 <prvInsertBlockIntoFreeList+0x7c> @ imm = #-0x2
;     puc = ( uint8_t * ) pxIterator;
 80596d4: 9802         	ldr	r0, [sp, #0x8]
 80596d6: 9001         	str	r0, [sp, #0x4]
;     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80596d8: 9801         	ldr	r0, [sp, #0x4]
 80596da: 9902         	ldr	r1, [sp, #0x8]
 80596dc: 6849         	ldr	r1, [r1, #0x4]
 80596de: 4408         	add	r0, r1
 80596e0: 9903         	ldr	r1, [sp, #0xc]
 80596e2: 4288         	cmp	r0, r1
 80596e4: d109         	bne	0x80596fa <prvInsertBlockIntoFreeList+0xa2> @ imm = #0x12
 80596e6: e7ff         	b	0x80596e8 <prvInsertBlockIntoFreeList+0x90> @ imm = #-0x2
;         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80596e8: 9803         	ldr	r0, [sp, #0xc]
 80596ea: 6842         	ldr	r2, [r0, #0x4]
 80596ec: 9902         	ldr	r1, [sp, #0x8]
 80596ee: 6848         	ldr	r0, [r1, #0x4]
 80596f0: 4410         	add	r0, r2
 80596f2: 6048         	str	r0, [r1, #0x4]
;         pxBlockToInsert = pxIterator;
 80596f4: 9802         	ldr	r0, [sp, #0x8]
 80596f6: 9003         	str	r0, [sp, #0xc]
;     }
 80596f8: e000         	b	0x80596fc <prvInsertBlockIntoFreeList+0xa4> @ imm = #0x0
 80596fa: e7ff         	b	0x80596fc <prvInsertBlockIntoFreeList+0xa4> @ imm = #-0x2
;     puc = ( uint8_t * ) pxBlockToInsert;
 80596fc: 9803         	ldr	r0, [sp, #0xc]
 80596fe: 9001         	str	r0, [sp, #0x4]
;     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8059700: 9801         	ldr	r0, [sp, #0x4]
 8059702: 9903         	ldr	r1, [sp, #0xc]
 8059704: 6849         	ldr	r1, [r1, #0x4]
 8059706: 4408         	add	r0, r1
 8059708: 9902         	ldr	r1, [sp, #0x8]
 805970a: 6809         	ldr	r1, [r1]
 805970c: 4288         	cmp	r0, r1
 805970e: d120         	bne	0x8059752 <prvInsertBlockIntoFreeList+0xfa> @ imm = #0x40
 8059710: e7ff         	b	0x8059712 <prvInsertBlockIntoFreeList+0xba> @ imm = #-0x2
;         if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8059712: 9802         	ldr	r0, [sp, #0x8]
 8059714: 6800         	ldr	r0, [r0]
 8059716: f240 311c    	movw	r1, #0x31c
 805971a: f2c2 0100    	movt	r1, #0x2000
 805971e: 6809         	ldr	r1, [r1]
 8059720: 4288         	cmp	r0, r1
 8059722: d00d         	beq	0x8059740 <prvInsertBlockIntoFreeList+0xe8> @ imm = #0x1a
 8059724: e7ff         	b	0x8059726 <prvInsertBlockIntoFreeList+0xce> @ imm = #-0x2
;             pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8059726: 9802         	ldr	r0, [sp, #0x8]
 8059728: 6800         	ldr	r0, [r0]
 805972a: 6842         	ldr	r2, [r0, #0x4]
 805972c: 9903         	ldr	r1, [sp, #0xc]
 805972e: 6848         	ldr	r0, [r1, #0x4]
 8059730: 4410         	add	r0, r2
 8059732: 6048         	str	r0, [r1, #0x4]
;             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8059734: 9802         	ldr	r0, [sp, #0x8]
 8059736: 6800         	ldr	r0, [r0]
 8059738: 6800         	ldr	r0, [r0]
 805973a: 9903         	ldr	r1, [sp, #0xc]
 805973c: 6008         	str	r0, [r1]
;         }
 805973e: e007         	b	0x8059750 <prvInsertBlockIntoFreeList+0xf8> @ imm = #0xe
;             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8059740: f240 301c    	movw	r0, #0x31c
 8059744: f2c2 0000    	movt	r0, #0x2000
 8059748: 6800         	ldr	r0, [r0]
 805974a: 9903         	ldr	r1, [sp, #0xc]
 805974c: 6008         	str	r0, [r1]
 805974e: e7ff         	b	0x8059750 <prvInsertBlockIntoFreeList+0xf8> @ imm = #-0x2
;     }
 8059750: e004         	b	0x805975c <prvInsertBlockIntoFreeList+0x104> @ imm = #0x8
;         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8059752: 9802         	ldr	r0, [sp, #0x8]
 8059754: 6800         	ldr	r0, [r0]
 8059756: 9903         	ldr	r1, [sp, #0xc]
 8059758: 6008         	str	r0, [r1]
 805975a: e7ff         	b	0x805975c <prvInsertBlockIntoFreeList+0x104> @ imm = #-0x2
;     if( pxIterator != pxBlockToInsert )
 805975c: 9802         	ldr	r0, [sp, #0x8]
 805975e: 9903         	ldr	r1, [sp, #0xc]
 8059760: 4288         	cmp	r0, r1
 8059762: d004         	beq	0x805976e <prvInsertBlockIntoFreeList+0x116> @ imm = #0x8
 8059764: e7ff         	b	0x8059766 <prvInsertBlockIntoFreeList+0x10e> @ imm = #-0x2
;         pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8059766: 9803         	ldr	r0, [sp, #0xc]
 8059768: 9902         	ldr	r1, [sp, #0x8]
 805976a: 6008         	str	r0, [r1]
;     }
 805976c: e000         	b	0x8059770 <prvInsertBlockIntoFreeList+0x118> @ imm = #0x0
 805976e: e7ff         	b	0x8059770 <prvInsertBlockIntoFreeList+0x118> @ imm = #-0x2
; }
 8059770: b004         	add	sp, #0x10
 8059772: bd80         	pop	{r7, pc}

08059774 <$d.5>:
 8059774: 55 cd 05 08  	.word	0x0805cd55

08059778 <xPortGetFreeHeapSize>:
;     return xFreeBytesRemaining;
 8059778: f240 3020    	movw	r0, #0x320
 805977c: f2c2 0000    	movt	r0, #0x2000
 8059780: 6800         	ldr	r0, [r0]
 8059782: 4770         	bx	lr

08059784 <xPortGetMinimumEverFreeHeapSize>:
;     return xMinimumEverFreeBytesRemaining;
 8059784: f242 302c    	movw	r0, #0x232c
 8059788: f2c2 0000    	movt	r0, #0x2000
 805978c: 6800         	ldr	r0, [r0]
 805978e: 4770         	bx	lr

08059790 <vPortInitialiseBlocks>:
; }
 8059790: 4770         	bx	lr
 8059792: bf00         	nop

08059794 <pvPortCalloc>:
; {
 8059794: b580         	push	{r7, lr}
 8059796: 466f         	mov	r7, sp
 8059798: b084         	sub	sp, #0x10
 805979a: 9003         	str	r0, [sp, #0xc]
 805979c: 9102         	str	r1, [sp, #0x8]
 805979e: 2000         	movs	r0, #0x0
;     void * pv = NULL;
 80597a0: 9001         	str	r0, [sp, #0x4]
;     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 80597a2: 9903         	ldr	r1, [sp, #0xc]
 80597a4: 9000         	str	r0, [sp]
 80597a6: b161         	cbz	r1, 0x80597c2 <pvPortCalloc+0x2e> @ imm = #0x18
 80597a8: e7ff         	b	0x80597aa <pvPortCalloc+0x16> @ imm = #-0x2
 80597aa: 9902         	ldr	r1, [sp, #0x8]
 80597ac: 9a03         	ldr	r2, [sp, #0xc]
 80597ae: f04f 30ff    	mov.w	r0, #0xffffffff
 80597b2: fbb0 f2f2    	udiv	r2, r0, r2
 80597b6: 2000         	movs	r0, #0x0
 80597b8: 4291         	cmp	r1, r2
 80597ba: bf88         	it	hi
 80597bc: 2001         	movhi	r0, #0x1
 80597be: 9000         	str	r0, [sp]
 80597c0: e7ff         	b	0x80597c2 <pvPortCalloc+0x2e> @ imm = #-0x2
 80597c2: 9800         	ldr	r0, [sp]
;     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 80597c4: 07c0         	lsls	r0, r0, #0x1f
 80597c6: b990         	cbnz	r0, 0x80597ee <pvPortCalloc+0x5a> @ imm = #0x24
 80597c8: e7ff         	b	0x80597ca <pvPortCalloc+0x36> @ imm = #-0x2
;         pv = pvPortMalloc( xNum * xSize );
 80597ca: 9803         	ldr	r0, [sp, #0xc]
 80597cc: 9902         	ldr	r1, [sp, #0x8]
 80597ce: 4348         	muls	r0, r1, r0
 80597d0: 4908         	ldr	r1, [pc, #0x20]         @ 0x80597f4 <pvPortCalloc+0x60>
 80597d2: 4788         	blx	r1
 80597d4: 9001         	str	r0, [sp, #0x4]
;         if( pv != NULL )
 80597d6: 9801         	ldr	r0, [sp, #0x4]
 80597d8: b140         	cbz	r0, 0x80597ec <pvPortCalloc+0x58> @ imm = #0x10
 80597da: e7ff         	b	0x80597dc <pvPortCalloc+0x48> @ imm = #-0x2
;             ( void ) memset( pv, 0, xNum * xSize );
 80597dc: 9801         	ldr	r0, [sp, #0x4]
 80597de: 9903         	ldr	r1, [sp, #0xc]
 80597e0: 9a02         	ldr	r2, [sp, #0x8]
 80597e2: 434a         	muls	r2, r1, r2
 80597e4: 4b04         	ldr	r3, [pc, #0x10]         @ 0x80597f8 <pvPortCalloc+0x64>
 80597e6: 2100         	movs	r1, #0x0
 80597e8: 4798         	blx	r3
;         }
 80597ea: e7ff         	b	0x80597ec <pvPortCalloc+0x58> @ imm = #-0x2
;     }
 80597ec: e7ff         	b	0x80597ee <pvPortCalloc+0x5a> @ imm = #-0x2
;     return pv;
 80597ee: 9801         	ldr	r0, [sp, #0x4]
 80597f0: b004         	add	sp, #0x10
 80597f2: bd80         	pop	{r7, pc}

080597f4 <$d.7>:
 80597f4: dd 91 05 08  	.word	0x080591dd
 80597f8: cd eb 05 08  	.word	0x0805ebcd

080597fc <xEventGroupCreate>:
;     {
 80597fc: b580         	push	{r7, lr}
 80597fe: 466f         	mov	r7, sp
 8059800: b082         	sub	sp, #0x8
;         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8059802: 4909         	ldr	r1, [pc, #0x24]         @ 0x8059828 <xEventGroupCreate+0x2c>
 8059804: 201c         	movs	r0, #0x1c
 8059806: 4788         	blx	r1
 8059808: 9001         	str	r0, [sp, #0x4]
;         if( pxEventBits != NULL )
 805980a: 9801         	ldr	r0, [sp, #0x4]
 805980c: b140         	cbz	r0, 0x8059820 <xEventGroupCreate+0x24> @ imm = #0x10
 805980e: e7ff         	b	0x8059810 <xEventGroupCreate+0x14> @ imm = #-0x2
;             pxEventBits->uxEventBits = 0;
 8059810: 9901         	ldr	r1, [sp, #0x4]
 8059812: 2000         	movs	r0, #0x0
 8059814: 6008         	str	r0, [r1]
;             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8059816: 9801         	ldr	r0, [sp, #0x4]
 8059818: 3004         	adds	r0, #0x4
 805981a: 4904         	ldr	r1, [pc, #0x10]         @ 0x805982c <xEventGroupCreate+0x30>
 805981c: 4788         	blx	r1
;         }
 805981e: e000         	b	0x8059822 <xEventGroupCreate+0x26> @ imm = #0x0
 8059820: e7ff         	b	0x8059822 <xEventGroupCreate+0x26> @ imm = #-0x2
;         return pxEventBits;
 8059822: 9801         	ldr	r0, [sp, #0x4]
 8059824: b002         	add	sp, #0x8
 8059826: bd80         	pop	{r7, pc}

08059828 <$d.1>:
 8059828: dd 91 05 08  	.word	0x080591dd
 805982c: 53 9e 05 08  	.word	0x08059e53

08059830 <xEventGroupSync>:
; {
 8059830: b580         	push	{r7, lr}
 8059832: 466f         	mov	r7, sp
 8059834: b08a         	sub	sp, #0x28
 8059836: 9009         	str	r0, [sp, #0x24]
 8059838: 9108         	str	r1, [sp, #0x20]
 805983a: 9207         	str	r2, [sp, #0x1c]
 805983c: 9306         	str	r3, [sp, #0x18]
;     EventGroup_t * pxEventBits = xEventGroup;
 805983e: 9809         	ldr	r0, [sp, #0x24]
 8059840: 9003         	str	r0, [sp, #0xc]
 8059842: 2000         	movs	r0, #0x0
;     BaseType_t xTimeoutOccurred = pdFALSE;
 8059844: 9001         	str	r0, [sp, #0x4]
;     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8059846: f89d 001f    	ldrb.w	r0, [sp, #0x1f]
 805984a: b120         	cbz	r0, 0x8059856 <xEventGroupSync+0x26> @ imm = #0x8
 805984c: e7ff         	b	0x805984e <xEventGroupSync+0x1e> @ imm = #-0x2
 805984e: 484f         	ldr	r0, [pc, #0x13c]        @ 0x805998c <xEventGroupSync+0x15c>
 8059850: 4780         	blx	r0
 8059852: e7ff         	b	0x8059854 <xEventGroupSync+0x24> @ imm = #-0x2
 8059854: e7fe         	b	0x8059854 <xEventGroupSync+0x24> @ imm = #-0x4
;     configASSERT( uxBitsToWaitFor != 0 );
 8059856: 9807         	ldr	r0, [sp, #0x1c]
 8059858: b920         	cbnz	r0, 0x8059864 <xEventGroupSync+0x34> @ imm = #0x8
 805985a: e7ff         	b	0x805985c <xEventGroupSync+0x2c> @ imm = #-0x2
 805985c: 484a         	ldr	r0, [pc, #0x128]        @ 0x8059988 <xEventGroupSync+0x158>
 805985e: 4780         	blx	r0
 8059860: e7ff         	b	0x8059862 <xEventGroupSync+0x32> @ imm = #-0x2
 8059862: e7fe         	b	0x8059862 <xEventGroupSync+0x32> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059864: 483e         	ldr	r0, [pc, #0xf8]         @ 0x8059960 <xEventGroupSync+0x130>
 8059866: 4780         	blx	r0
 8059868: 4601         	mov	r1, r0
 805986a: 2000         	movs	r0, #0x0
 805986c: 9000         	str	r0, [sp]
 805986e: b931         	cbnz	r1, 0x805987e <xEventGroupSync+0x4e> @ imm = #0xc
 8059870: e7ff         	b	0x8059872 <xEventGroupSync+0x42> @ imm = #-0x2
 8059872: 9806         	ldr	r0, [sp, #0x18]
 8059874: 2800         	cmp	r0, #0x0
 8059876: bf18         	it	ne
 8059878: 2001         	movne	r0, #0x1
 805987a: 9000         	str	r0, [sp]
 805987c: e7ff         	b	0x805987e <xEventGroupSync+0x4e> @ imm = #-0x2
 805987e: 9800         	ldr	r0, [sp]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059880: 07c0         	lsls	r0, r0, #0x1f
 8059882: b120         	cbz	r0, 0x805988e <xEventGroupSync+0x5e> @ imm = #0x8
 8059884: e7ff         	b	0x8059886 <xEventGroupSync+0x56> @ imm = #-0x2
 8059886: 483f         	ldr	r0, [pc, #0xfc]         @ 0x8059984 <xEventGroupSync+0x154>
 8059888: 4780         	blx	r0
 805988a: e7ff         	b	0x805988c <xEventGroupSync+0x5c> @ imm = #-0x2
 805988c: e7fe         	b	0x805988c <xEventGroupSync+0x5c> @ imm = #-0x4
;     vTaskSuspendAll();
 805988e: 4835         	ldr	r0, [pc, #0xd4]         @ 0x8059964 <xEventGroupSync+0x134>
 8059890: 4780         	blx	r0
;         uxOriginalBitValue = pxEventBits->uxEventBits;
 8059892: 9803         	ldr	r0, [sp, #0xc]
 8059894: 6800         	ldr	r0, [r0]
 8059896: 9005         	str	r0, [sp, #0x14]
;         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8059898: 9809         	ldr	r0, [sp, #0x24]
 805989a: 9908         	ldr	r1, [sp, #0x20]
 805989c: 4a32         	ldr	r2, [pc, #0xc8]         @ 0x8059968 <xEventGroupSync+0x138>
 805989e: 4790         	blx	r2
;         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80598a0: 9805         	ldr	r0, [sp, #0x14]
 80598a2: 9908         	ldr	r1, [sp, #0x20]
 80598a4: 4308         	orrs	r0, r1
 80598a6: 9907         	ldr	r1, [sp, #0x1c]
 80598a8: 4008         	ands	r0, r1
 80598aa: 4288         	cmp	r0, r1
 80598ac: d10c         	bne	0x80598c8 <xEventGroupSync+0x98> @ imm = #0x18
 80598ae: e7ff         	b	0x80598b0 <xEventGroupSync+0x80> @ imm = #-0x2
;             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 80598b0: 9805         	ldr	r0, [sp, #0x14]
 80598b2: 9908         	ldr	r1, [sp, #0x20]
 80598b4: 4308         	orrs	r0, r1
 80598b6: 9004         	str	r0, [sp, #0x10]
;             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80598b8: 9a07         	ldr	r2, [sp, #0x1c]
 80598ba: 9903         	ldr	r1, [sp, #0xc]
 80598bc: 6808         	ldr	r0, [r1]
 80598be: 4390         	bics	r0, r2
 80598c0: 6008         	str	r0, [r1]
 80598c2: 2000         	movs	r0, #0x0
;             xTicksToWait = 0;
 80598c4: 9006         	str	r0, [sp, #0x18]
;         }
 80598c6: e014         	b	0x80598f2 <xEventGroupSync+0xc2> @ imm = #0x28
;             if( xTicksToWait != ( TickType_t ) 0 )
 80598c8: 9806         	ldr	r0, [sp, #0x18]
 80598ca: b158         	cbz	r0, 0x80598e4 <xEventGroupSync+0xb4> @ imm = #0x16
 80598cc: e7ff         	b	0x80598ce <xEventGroupSync+0x9e> @ imm = #-0x2
;                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 80598ce: 9803         	ldr	r0, [sp, #0xc]
 80598d0: 3004         	adds	r0, #0x4
 80598d2: 9907         	ldr	r1, [sp, #0x1c]
 80598d4: f041 61a0    	orr	r1, r1, #0x5000000
 80598d8: 9a06         	ldr	r2, [sp, #0x18]
 80598da: 4b24         	ldr	r3, [pc, #0x90]         @ 0x805996c <xEventGroupSync+0x13c>
 80598dc: 4798         	blx	r3
 80598de: 2000         	movs	r0, #0x0
;                 uxReturn = 0;
 80598e0: 9004         	str	r0, [sp, #0x10]
;             }
 80598e2: e005         	b	0x80598f0 <xEventGroupSync+0xc0> @ imm = #0xa
;                 uxReturn = pxEventBits->uxEventBits;
 80598e4: 9803         	ldr	r0, [sp, #0xc]
 80598e6: 6800         	ldr	r0, [r0]
 80598e8: 9004         	str	r0, [sp, #0x10]
 80598ea: 2001         	movs	r0, #0x1
;                 xTimeoutOccurred = pdTRUE;
 80598ec: 9001         	str	r0, [sp, #0x4]
 80598ee: e7ff         	b	0x80598f0 <xEventGroupSync+0xc0> @ imm = #-0x2
 80598f0: e7ff         	b	0x80598f2 <xEventGroupSync+0xc2> @ imm = #-0x2
;     xAlreadyYielded = xTaskResumeAll();
 80598f2: 481f         	ldr	r0, [pc, #0x7c]         @ 0x8059970 <xEventGroupSync+0x140>
 80598f4: 4780         	blx	r0
 80598f6: 9002         	str	r0, [sp, #0x8]
;     if( xTicksToWait != ( TickType_t ) 0 )
 80598f8: 9806         	ldr	r0, [sp, #0x18]
 80598fa: b368         	cbz	r0, 0x8059958 <xEventGroupSync+0x128> @ imm = #0x5a
 80598fc: e7ff         	b	0x80598fe <xEventGroupSync+0xce> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 80598fe: 9802         	ldr	r0, [sp, #0x8]
 8059900: b918         	cbnz	r0, 0x805990a <xEventGroupSync+0xda> @ imm = #0x6
 8059902: e7ff         	b	0x8059904 <xEventGroupSync+0xd4> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 8059904: 481b         	ldr	r0, [pc, #0x6c]         @ 0x8059974 <xEventGroupSync+0x144>
 8059906: 4780         	blx	r0
;         }
 8059908: e000         	b	0x805990c <xEventGroupSync+0xdc> @ imm = #0x0
 805990a: e7ff         	b	0x805990c <xEventGroupSync+0xdc> @ imm = #-0x2
;         uxReturn = uxTaskResetEventItemValue();
 805990c: 481a         	ldr	r0, [pc, #0x68]         @ 0x8059978 <xEventGroupSync+0x148>
 805990e: 4780         	blx	r0
 8059910: 9004         	str	r0, [sp, #0x10]
;         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8059912: f89d 0013    	ldrb.w	r0, [sp, #0x13]
 8059916: 0780         	lsls	r0, r0, #0x1e
 8059918: 2800         	cmp	r0, #0x0
 805991a: d417         	bmi	0x805994c <xEventGroupSync+0x11c> @ imm = #0x2e
 805991c: e7ff         	b	0x805991e <xEventGroupSync+0xee> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805991e: 4817         	ldr	r0, [pc, #0x5c]         @ 0x805997c <xEventGroupSync+0x14c>
 8059920: 4780         	blx	r0
;                 uxReturn = pxEventBits->uxEventBits;
 8059922: 9803         	ldr	r0, [sp, #0xc]
 8059924: 6800         	ldr	r0, [r0]
 8059926: 9004         	str	r0, [sp, #0x10]
;                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8059928: 9804         	ldr	r0, [sp, #0x10]
 805992a: 9907         	ldr	r1, [sp, #0x1c]
 805992c: 4008         	ands	r0, r1
 805992e: 4288         	cmp	r0, r1
 8059930: d106         	bne	0x8059940 <xEventGroupSync+0x110> @ imm = #0xc
 8059932: e7ff         	b	0x8059934 <xEventGroupSync+0x104> @ imm = #-0x2
;                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8059934: 9a07         	ldr	r2, [sp, #0x1c]
 8059936: 9903         	ldr	r1, [sp, #0xc]
 8059938: 6808         	ldr	r0, [r1]
 805993a: 4390         	bics	r0, r2
 805993c: 6008         	str	r0, [r1]
;                 }
 805993e: e000         	b	0x8059942 <xEventGroupSync+0x112> @ imm = #0x0
 8059940: e7ff         	b	0x8059942 <xEventGroupSync+0x112> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 8059942: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8059980 <xEventGroupSync+0x150>
 8059944: 4780         	blx	r0
 8059946: 2001         	movs	r0, #0x1
;             xTimeoutOccurred = pdTRUE;
 8059948: 9001         	str	r0, [sp, #0x4]
;         }
 805994a: e000         	b	0x805994e <xEventGroupSync+0x11e> @ imm = #0x0
 805994c: e7ff         	b	0x805994e <xEventGroupSync+0x11e> @ imm = #-0x2
;         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 805994e: 9804         	ldr	r0, [sp, #0x10]
 8059950: f020 407f    	bic	r0, r0, #0xff000000
 8059954: 9004         	str	r0, [sp, #0x10]
;     }
 8059956: e7ff         	b	0x8059958 <xEventGroupSync+0x128> @ imm = #-0x2
;     return uxReturn;
 8059958: 9804         	ldr	r0, [sp, #0x10]
 805995a: b00a         	add	sp, #0x28
 805995c: bd80         	pop	{r7, pc}
 805995e: bf00         	nop

08059960 <$d.3>:
 8059960: 8d 74 05 08  	.word	0x0805748d
 8059964: 59 58 05 08  	.word	0x08055859
 8059968: 91 99 05 08  	.word	0x08059991
 805996c: 71 6c 05 08  	.word	0x08056c71
 8059970: 7d 59 05 08  	.word	0x0805597d
 8059974: ff c3 05 08  	.word	0x0805c3ff
 8059978: 39 79 05 08  	.word	0x08057939
 805997c: 19 c4 05 08  	.word	0x0805c419
 8059980: 3d c4 05 08  	.word	0x0805c43d
 8059984: 55 cd 05 08  	.word	0x0805cd55
 8059988: 55 cd 05 08  	.word	0x0805cd55
 805998c: 55 cd 05 08  	.word	0x0805cd55

08059990 <xEventGroupSetBits>:
; {
 8059990: b580         	push	{r7, lr}
 8059992: 466f         	mov	r7, sp
 8059994: b08c         	sub	sp, #0x30
 8059996: 900b         	str	r0, [sp, #0x2c]
 8059998: 910a         	str	r1, [sp, #0x28]
 805999a: 2000         	movs	r0, #0x0
;     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 805999c: 9005         	str	r0, [sp, #0x14]
;     EventGroup_t * pxEventBits = xEventGroup;
 805999e: 990b         	ldr	r1, [sp, #0x2c]
 80599a0: 9102         	str	r1, [sp, #0x8]
;     BaseType_t xMatchFound = pdFALSE;
 80599a2: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xEventGroup );
 80599a4: 980b         	ldr	r0, [sp, #0x2c]
 80599a6: b920         	cbnz	r0, 0x80599b2 <xEventGroupSetBits+0x22> @ imm = #0x8
 80599a8: e7ff         	b	0x80599aa <xEventGroupSetBits+0x1a> @ imm = #-0x2
 80599aa: 483d         	ldr	r0, [pc, #0xf4]         @ 0x8059aa0 <xEventGroupSetBits+0x110>
 80599ac: 4780         	blx	r0
 80599ae: e7ff         	b	0x80599b0 <xEventGroupSetBits+0x20> @ imm = #-0x2
 80599b0: e7fe         	b	0x80599b0 <xEventGroupSetBits+0x20> @ imm = #-0x4
;     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80599b2: f89d 002b    	ldrb.w	r0, [sp, #0x2b]
 80599b6: b120         	cbz	r0, 0x80599c2 <xEventGroupSetBits+0x32> @ imm = #0x8
 80599b8: e7ff         	b	0x80599ba <xEventGroupSetBits+0x2a> @ imm = #-0x2
 80599ba: 4838         	ldr	r0, [pc, #0xe0]         @ 0x8059a9c <xEventGroupSetBits+0x10c>
 80599bc: 4780         	blx	r0
 80599be: e7ff         	b	0x80599c0 <xEventGroupSetBits+0x30> @ imm = #-0x2
 80599c0: e7fe         	b	0x80599c0 <xEventGroupSetBits+0x30> @ imm = #-0x4
;     pxList = &( pxEventBits->xTasksWaitingForBits );
 80599c2: 9802         	ldr	r0, [sp, #0x8]
 80599c4: 3004         	adds	r0, #0x4
 80599c6: 9006         	str	r0, [sp, #0x18]
;     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80599c8: 9806         	ldr	r0, [sp, #0x18]
 80599ca: 3008         	adds	r0, #0x8
 80599cc: 9007         	str	r0, [sp, #0x1c]
;     vTaskSuspendAll();
 80599ce: 4830         	ldr	r0, [pc, #0xc0]         @ 0x8059a90 <xEventGroupSetBits+0x100>
 80599d0: 4780         	blx	r0
;         pxListItem = listGET_HEAD_ENTRY( pxList );
 80599d2: 9806         	ldr	r0, [sp, #0x18]
 80599d4: 68c0         	ldr	r0, [r0, #0xc]
 80599d6: 9009         	str	r0, [sp, #0x24]
;         pxEventBits->uxEventBits |= uxBitsToSet;
 80599d8: 9a0a         	ldr	r2, [sp, #0x28]
 80599da: 9902         	ldr	r1, [sp, #0x8]
 80599dc: 6808         	ldr	r0, [r1]
 80599de: 4310         	orrs	r0, r2
 80599e0: 6008         	str	r0, [r1]
;         while( pxListItem != pxListEnd )
 80599e2: e7ff         	b	0x80599e4 <xEventGroupSetBits+0x54> @ imm = #-0x2
 80599e4: 9809         	ldr	r0, [sp, #0x24]
 80599e6: 9907         	ldr	r1, [sp, #0x1c]
 80599e8: 4288         	cmp	r0, r1
 80599ea: d046         	beq	0x8059a7a <xEventGroupSetBits+0xea> @ imm = #0x8c
 80599ec: e7ff         	b	0x80599ee <xEventGroupSetBits+0x5e> @ imm = #-0x2
;             pxNext = listGET_NEXT( pxListItem );
 80599ee: 9809         	ldr	r0, [sp, #0x24]
 80599f0: 6840         	ldr	r0, [r0, #0x4]
 80599f2: 9008         	str	r0, [sp, #0x20]
;             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80599f4: 9809         	ldr	r0, [sp, #0x24]
 80599f6: 6800         	ldr	r0, [r0]
 80599f8: 9004         	str	r0, [sp, #0x10]
 80599fa: 2000         	movs	r0, #0x0
;             xMatchFound = pdFALSE;
 80599fc: 9001         	str	r0, [sp, #0x4]
;             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80599fe: f89d 0013    	ldrb.w	r0, [sp, #0x13]
 8059a02: 0600         	lsls	r0, r0, #0x18
 8059a04: 9003         	str	r0, [sp, #0xc]
;             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8059a06: 9804         	ldr	r0, [sp, #0x10]
 8059a08: f020 407f    	bic	r0, r0, #0xff000000
 8059a0c: 9004         	str	r0, [sp, #0x10]
;             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8059a0e: f89d 000f    	ldrb.w	r0, [sp, #0xf]
 8059a12: 0740         	lsls	r0, r0, #0x1d
 8059a14: 2800         	cmp	r0, #0x0
 8059a16: d40b         	bmi	0x8059a30 <xEventGroupSetBits+0xa0> @ imm = #0x16
 8059a18: e7ff         	b	0x8059a1a <xEventGroupSetBits+0x8a> @ imm = #-0x2
;                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8059a1a: 9804         	ldr	r0, [sp, #0x10]
 8059a1c: 9902         	ldr	r1, [sp, #0x8]
 8059a1e: 6809         	ldr	r1, [r1]
 8059a20: 4208         	tst	r0, r1
 8059a22: d003         	beq	0x8059a2c <xEventGroupSetBits+0x9c> @ imm = #0x6
 8059a24: e7ff         	b	0x8059a26 <xEventGroupSetBits+0x96> @ imm = #-0x2
 8059a26: 2001         	movs	r0, #0x1
;                     xMatchFound = pdTRUE;
 8059a28: 9001         	str	r0, [sp, #0x4]
;                 }
 8059a2a: e000         	b	0x8059a2e <xEventGroupSetBits+0x9e> @ imm = #0x0
 8059a2c: e7ff         	b	0x8059a2e <xEventGroupSetBits+0x9e> @ imm = #-0x2
;             }
 8059a2e: e00b         	b	0x8059a48 <xEventGroupSetBits+0xb8> @ imm = #0x16
;             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8059a30: 9904         	ldr	r1, [sp, #0x10]
 8059a32: 9802         	ldr	r0, [sp, #0x8]
 8059a34: 6800         	ldr	r0, [r0]
 8059a36: 4008         	ands	r0, r1
 8059a38: 4288         	cmp	r0, r1
 8059a3a: d103         	bne	0x8059a44 <xEventGroupSetBits+0xb4> @ imm = #0x6
 8059a3c: e7ff         	b	0x8059a3e <xEventGroupSetBits+0xae> @ imm = #-0x2
 8059a3e: 2001         	movs	r0, #0x1
;                 xMatchFound = pdTRUE;
 8059a40: 9001         	str	r0, [sp, #0x4]
;             }
 8059a42: e000         	b	0x8059a46 <xEventGroupSetBits+0xb6> @ imm = #0x0
 8059a44: e7ff         	b	0x8059a46 <xEventGroupSetBits+0xb6> @ imm = #-0x2
 8059a46: e7ff         	b	0x8059a48 <xEventGroupSetBits+0xb8> @ imm = #-0x2
;             if( xMatchFound != pdFALSE )
 8059a48: 9801         	ldr	r0, [sp, #0x4]
 8059a4a: b198         	cbz	r0, 0x8059a74 <xEventGroupSetBits+0xe4> @ imm = #0x26
 8059a4c: e7ff         	b	0x8059a4e <xEventGroupSetBits+0xbe> @ imm = #-0x2
;                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8059a4e: f89d 000f    	ldrb.w	r0, [sp, #0xf]
 8059a52: 07c0         	lsls	r0, r0, #0x1f
 8059a54: b128         	cbz	r0, 0x8059a62 <xEventGroupSetBits+0xd2> @ imm = #0xa
 8059a56: e7ff         	b	0x8059a58 <xEventGroupSetBits+0xc8> @ imm = #-0x2
;                     uxBitsToClear |= uxBitsWaitedFor;
 8059a58: 9904         	ldr	r1, [sp, #0x10]
 8059a5a: 9805         	ldr	r0, [sp, #0x14]
 8059a5c: 4308         	orrs	r0, r1
 8059a5e: 9005         	str	r0, [sp, #0x14]
;                 }
 8059a60: e000         	b	0x8059a64 <xEventGroupSetBits+0xd4> @ imm = #0x0
 8059a62: e7ff         	b	0x8059a64 <xEventGroupSetBits+0xd4> @ imm = #-0x2
;                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8059a64: 9809         	ldr	r0, [sp, #0x24]
 8059a66: 9902         	ldr	r1, [sp, #0x8]
 8059a68: 6809         	ldr	r1, [r1]
 8059a6a: f041 7100    	orr	r1, r1, #0x2000000
 8059a6e: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x8059a98 <xEventGroupSetBits+0x108>
 8059a70: 4790         	blx	r2
;             }
 8059a72: e7ff         	b	0x8059a74 <xEventGroupSetBits+0xe4> @ imm = #-0x2
;             pxListItem = pxNext;
 8059a74: 9808         	ldr	r0, [sp, #0x20]
 8059a76: 9009         	str	r0, [sp, #0x24]
;         while( pxListItem != pxListEnd )
 8059a78: e7b4         	b	0x80599e4 <xEventGroupSetBits+0x54> @ imm = #-0x98
;         pxEventBits->uxEventBits &= ~uxBitsToClear;
 8059a7a: 9a05         	ldr	r2, [sp, #0x14]
 8059a7c: 9902         	ldr	r1, [sp, #0x8]
 8059a7e: 6808         	ldr	r0, [r1]
 8059a80: 4390         	bics	r0, r2
 8059a82: 6008         	str	r0, [r1]
;     ( void ) xTaskResumeAll();
 8059a84: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059a94 <xEventGroupSetBits+0x104>
 8059a86: 4780         	blx	r0
;     return pxEventBits->uxEventBits;
 8059a88: 9802         	ldr	r0, [sp, #0x8]
 8059a8a: 6800         	ldr	r0, [r0]
 8059a8c: b00c         	add	sp, #0x30
 8059a8e: bd80         	pop	{r7, pc}

08059a90 <$d.5>:
 8059a90: 59 58 05 08  	.word	0x08055859
 8059a94: 7d 59 05 08  	.word	0x0805597d
 8059a98: 79 6f 05 08  	.word	0x08056f79
 8059a9c: 55 cd 05 08  	.word	0x0805cd55
 8059aa0: 55 cd 05 08  	.word	0x0805cd55

08059aa4 <xEventGroupWaitBits>:
; {
 8059aa4: b580         	push	{r7, lr}
 8059aa6: 466f         	mov	r7, sp
 8059aa8: b08c         	sub	sp, #0x30
 8059aaa: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8059aae: 900b         	str	r0, [sp, #0x2c]
 8059ab0: 910a         	str	r1, [sp, #0x28]
 8059ab2: 9209         	str	r2, [sp, #0x24]
 8059ab4: 9308         	str	r3, [sp, #0x20]
;     EventGroup_t * pxEventBits = xEventGroup;
 8059ab6: 980b         	ldr	r0, [sp, #0x2c]
 8059ab8: 9007         	str	r0, [sp, #0x1c]
 8059aba: 2000         	movs	r0, #0x0
;     EventBits_t uxReturn, uxControlBits = 0;
 8059abc: 9005         	str	r0, [sp, #0x14]
;     BaseType_t xTimeoutOccurred = pdFALSE;
 8059abe: 9002         	str	r0, [sp, #0x8]
;     configASSERT( xEventGroup );
 8059ac0: 980b         	ldr	r0, [sp, #0x2c]
 8059ac2: b920         	cbnz	r0, 0x8059ace <xEventGroupWaitBits+0x2a> @ imm = #0x8
 8059ac4: e7ff         	b	0x8059ac6 <xEventGroupWaitBits+0x22> @ imm = #-0x2
 8059ac6: 4860         	ldr	r0, [pc, #0x180]        @ 0x8059c48 <xEventGroupWaitBits+0x1a4>
 8059ac8: 4780         	blx	r0
 8059aca: e7ff         	b	0x8059acc <xEventGroupWaitBits+0x28> @ imm = #-0x2
 8059acc: e7fe         	b	0x8059acc <xEventGroupWaitBits+0x28> @ imm = #-0x4
;     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8059ace: f89d 002b    	ldrb.w	r0, [sp, #0x2b]
 8059ad2: b120         	cbz	r0, 0x8059ade <xEventGroupWaitBits+0x3a> @ imm = #0x8
 8059ad4: e7ff         	b	0x8059ad6 <xEventGroupWaitBits+0x32> @ imm = #-0x2
 8059ad6: 485b         	ldr	r0, [pc, #0x16c]        @ 0x8059c44 <xEventGroupWaitBits+0x1a0>
 8059ad8: 4780         	blx	r0
 8059ada: e7ff         	b	0x8059adc <xEventGroupWaitBits+0x38> @ imm = #-0x2
 8059adc: e7fe         	b	0x8059adc <xEventGroupWaitBits+0x38> @ imm = #-0x4
;     configASSERT( uxBitsToWaitFor != 0 );
 8059ade: 980a         	ldr	r0, [sp, #0x28]
 8059ae0: b920         	cbnz	r0, 0x8059aec <xEventGroupWaitBits+0x48> @ imm = #0x8
 8059ae2: e7ff         	b	0x8059ae4 <xEventGroupWaitBits+0x40> @ imm = #-0x2
 8059ae4: 4856         	ldr	r0, [pc, #0x158]        @ 0x8059c40 <xEventGroupWaitBits+0x19c>
 8059ae6: 4780         	blx	r0
 8059ae8: e7ff         	b	0x8059aea <xEventGroupWaitBits+0x46> @ imm = #-0x2
 8059aea: e7fe         	b	0x8059aea <xEventGroupWaitBits+0x46> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059aec: 4849         	ldr	r0, [pc, #0x124]        @ 0x8059c14 <xEventGroupWaitBits+0x170>
 8059aee: 4780         	blx	r0
 8059af0: 4601         	mov	r1, r0
 8059af2: 2000         	movs	r0, #0x0
 8059af4: 9000         	str	r0, [sp]
 8059af6: b931         	cbnz	r1, 0x8059b06 <xEventGroupWaitBits+0x62> @ imm = #0xc
 8059af8: e7ff         	b	0x8059afa <xEventGroupWaitBits+0x56> @ imm = #-0x2
 8059afa: 68b8         	ldr	r0, [r7, #0x8]
 8059afc: 2800         	cmp	r0, #0x0
 8059afe: bf18         	it	ne
 8059b00: 2001         	movne	r0, #0x1
 8059b02: 9000         	str	r0, [sp]
 8059b04: e7ff         	b	0x8059b06 <xEventGroupWaitBits+0x62> @ imm = #-0x2
 8059b06: 9800         	ldr	r0, [sp]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059b08: 07c0         	lsls	r0, r0, #0x1f
 8059b0a: b120         	cbz	r0, 0x8059b16 <xEventGroupWaitBits+0x72> @ imm = #0x8
 8059b0c: e7ff         	b	0x8059b0e <xEventGroupWaitBits+0x6a> @ imm = #-0x2
 8059b0e: 484b         	ldr	r0, [pc, #0x12c]        @ 0x8059c3c <xEventGroupWaitBits+0x198>
 8059b10: 4780         	blx	r0
 8059b12: e7ff         	b	0x8059b14 <xEventGroupWaitBits+0x70> @ imm = #-0x2
 8059b14: e7fe         	b	0x8059b14 <xEventGroupWaitBits+0x70> @ imm = #-0x4
;     vTaskSuspendAll();
 8059b16: 4840         	ldr	r0, [pc, #0x100]        @ 0x8059c18 <xEventGroupWaitBits+0x174>
 8059b18: 4780         	blx	r0
;         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8059b1a: 9807         	ldr	r0, [sp, #0x1c]
 8059b1c: 6800         	ldr	r0, [r0]
 8059b1e: 9001         	str	r0, [sp, #0x4]
;         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8059b20: 9801         	ldr	r0, [sp, #0x4]
 8059b22: 990a         	ldr	r1, [sp, #0x28]
 8059b24: 9a08         	ldr	r2, [sp, #0x20]
 8059b26: 4b3d         	ldr	r3, [pc, #0xf4]         @ 0x8059c1c <xEventGroupWaitBits+0x178>
 8059b28: 4798         	blx	r3
 8059b2a: 9004         	str	r0, [sp, #0x10]
;         if( xWaitConditionMet != pdFALSE )
 8059b2c: 9804         	ldr	r0, [sp, #0x10]
 8059b2e: b178         	cbz	r0, 0x8059b50 <xEventGroupWaitBits+0xac> @ imm = #0x1e
 8059b30: e7ff         	b	0x8059b32 <xEventGroupWaitBits+0x8e> @ imm = #-0x2
;             uxReturn = uxCurrentEventBits;
 8059b32: 9801         	ldr	r0, [sp, #0x4]
 8059b34: 9006         	str	r0, [sp, #0x18]
 8059b36: 2000         	movs	r0, #0x0
;             xTicksToWait = ( TickType_t ) 0;
 8059b38: 60b8         	str	r0, [r7, #0x8]
;             if( xClearOnExit != pdFALSE )
 8059b3a: 9809         	ldr	r0, [sp, #0x24]
 8059b3c: b130         	cbz	r0, 0x8059b4c <xEventGroupWaitBits+0xa8> @ imm = #0xc
 8059b3e: e7ff         	b	0x8059b40 <xEventGroupWaitBits+0x9c> @ imm = #-0x2
;                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8059b40: 9a0a         	ldr	r2, [sp, #0x28]
 8059b42: 9907         	ldr	r1, [sp, #0x1c]
 8059b44: 6808         	ldr	r0, [r1]
 8059b46: 4390         	bics	r0, r2
 8059b48: 6008         	str	r0, [r1]
;             }
 8059b4a: e000         	b	0x8059b4e <xEventGroupWaitBits+0xaa> @ imm = #0x0
 8059b4c: e7ff         	b	0x8059b4e <xEventGroupWaitBits+0xaa> @ imm = #-0x2
;         }
 8059b4e: e025         	b	0x8059b9c <xEventGroupWaitBits+0xf8> @ imm = #0x4a
;         else if( xTicksToWait == ( TickType_t ) 0 )
 8059b50: 68b8         	ldr	r0, [r7, #0x8]
 8059b52: b928         	cbnz	r0, 0x8059b60 <xEventGroupWaitBits+0xbc> @ imm = #0xa
 8059b54: e7ff         	b	0x8059b56 <xEventGroupWaitBits+0xb2> @ imm = #-0x2
;             uxReturn = uxCurrentEventBits;
 8059b56: 9801         	ldr	r0, [sp, #0x4]
 8059b58: 9006         	str	r0, [sp, #0x18]
 8059b5a: 2001         	movs	r0, #0x1
;             xTimeoutOccurred = pdTRUE;
 8059b5c: 9002         	str	r0, [sp, #0x8]
;         }
 8059b5e: e01c         	b	0x8059b9a <xEventGroupWaitBits+0xf6> @ imm = #0x38
;             if( xClearOnExit != pdFALSE )
 8059b60: 9809         	ldr	r0, [sp, #0x24]
 8059b62: b128         	cbz	r0, 0x8059b70 <xEventGroupWaitBits+0xcc> @ imm = #0xa
 8059b64: e7ff         	b	0x8059b66 <xEventGroupWaitBits+0xc2> @ imm = #-0x2
;                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8059b66: 9805         	ldr	r0, [sp, #0x14]
 8059b68: f040 7080    	orr	r0, r0, #0x1000000
 8059b6c: 9005         	str	r0, [sp, #0x14]
;             }
 8059b6e: e000         	b	0x8059b72 <xEventGroupWaitBits+0xce> @ imm = #0x0
 8059b70: e7ff         	b	0x8059b72 <xEventGroupWaitBits+0xce> @ imm = #-0x2
;             if( xWaitForAllBits != pdFALSE )
 8059b72: 9808         	ldr	r0, [sp, #0x20]
 8059b74: b128         	cbz	r0, 0x8059b82 <xEventGroupWaitBits+0xde> @ imm = #0xa
 8059b76: e7ff         	b	0x8059b78 <xEventGroupWaitBits+0xd4> @ imm = #-0x2
;                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8059b78: 9805         	ldr	r0, [sp, #0x14]
 8059b7a: f040 6080    	orr	r0, r0, #0x4000000
 8059b7e: 9005         	str	r0, [sp, #0x14]
;             }
 8059b80: e000         	b	0x8059b84 <xEventGroupWaitBits+0xe0> @ imm = #0x0
 8059b82: e7ff         	b	0x8059b84 <xEventGroupWaitBits+0xe0> @ imm = #-0x2
;             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8059b84: 9807         	ldr	r0, [sp, #0x1c]
 8059b86: 3004         	adds	r0, #0x4
 8059b88: 990a         	ldr	r1, [sp, #0x28]
 8059b8a: 9a05         	ldr	r2, [sp, #0x14]
 8059b8c: 4311         	orrs	r1, r2
 8059b8e: 68ba         	ldr	r2, [r7, #0x8]
 8059b90: 4b23         	ldr	r3, [pc, #0x8c]         @ 0x8059c20 <xEventGroupWaitBits+0x17c>
 8059b92: 4798         	blx	r3
 8059b94: 2000         	movs	r0, #0x0
;             uxReturn = 0;
 8059b96: 9006         	str	r0, [sp, #0x18]
 8059b98: e7ff         	b	0x8059b9a <xEventGroupWaitBits+0xf6> @ imm = #-0x2
 8059b9a: e7ff         	b	0x8059b9c <xEventGroupWaitBits+0xf8> @ imm = #-0x2
;     xAlreadyYielded = xTaskResumeAll();
 8059b9c: 4821         	ldr	r0, [pc, #0x84]         @ 0x8059c24 <xEventGroupWaitBits+0x180>
 8059b9e: 4780         	blx	r0
 8059ba0: 9003         	str	r0, [sp, #0xc]
;     if( xTicksToWait != ( TickType_t ) 0 )
 8059ba2: 68b8         	ldr	r0, [r7, #0x8]
 8059ba4: b398         	cbz	r0, 0x8059c0e <xEventGroupWaitBits+0x16a> @ imm = #0x66
 8059ba6: e7ff         	b	0x8059ba8 <xEventGroupWaitBits+0x104> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 8059ba8: 9803         	ldr	r0, [sp, #0xc]
 8059baa: b918         	cbnz	r0, 0x8059bb4 <xEventGroupWaitBits+0x110> @ imm = #0x6
 8059bac: e7ff         	b	0x8059bae <xEventGroupWaitBits+0x10a> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 8059bae: 481e         	ldr	r0, [pc, #0x78]         @ 0x8059c28 <xEventGroupWaitBits+0x184>
 8059bb0: 4780         	blx	r0
;         }
 8059bb2: e000         	b	0x8059bb6 <xEventGroupWaitBits+0x112> @ imm = #0x0
 8059bb4: e7ff         	b	0x8059bb6 <xEventGroupWaitBits+0x112> @ imm = #-0x2
;         uxReturn = uxTaskResetEventItemValue();
 8059bb6: 481d         	ldr	r0, [pc, #0x74]         @ 0x8059c2c <xEventGroupWaitBits+0x188>
 8059bb8: 4780         	blx	r0
 8059bba: 9006         	str	r0, [sp, #0x18]
;         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8059bbc: f89d 001b    	ldrb.w	r0, [sp, #0x1b]
 8059bc0: 0780         	lsls	r0, r0, #0x1e
 8059bc2: 2800         	cmp	r0, #0x0
 8059bc4: d41d         	bmi	0x8059c02 <xEventGroupWaitBits+0x15e> @ imm = #0x3a
 8059bc6: e7ff         	b	0x8059bc8 <xEventGroupWaitBits+0x124> @ imm = #-0x2
;             taskENTER_CRITICAL();
 8059bc8: 4819         	ldr	r0, [pc, #0x64]         @ 0x8059c30 <xEventGroupWaitBits+0x18c>
 8059bca: 4780         	blx	r0
;                 uxReturn = pxEventBits->uxEventBits;
 8059bcc: 9807         	ldr	r0, [sp, #0x1c]
 8059bce: 6800         	ldr	r0, [r0]
 8059bd0: 9006         	str	r0, [sp, #0x18]
;                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8059bd2: 9806         	ldr	r0, [sp, #0x18]
 8059bd4: 990a         	ldr	r1, [sp, #0x28]
 8059bd6: 9a08         	ldr	r2, [sp, #0x20]
 8059bd8: 4b16         	ldr	r3, [pc, #0x58]         @ 0x8059c34 <xEventGroupWaitBits+0x190>
 8059bda: 4798         	blx	r3
 8059bdc: b158         	cbz	r0, 0x8059bf6 <xEventGroupWaitBits+0x152> @ imm = #0x16
 8059bde: e7ff         	b	0x8059be0 <xEventGroupWaitBits+0x13c> @ imm = #-0x2
;                     if( xClearOnExit != pdFALSE )
 8059be0: 9809         	ldr	r0, [sp, #0x24]
 8059be2: b130         	cbz	r0, 0x8059bf2 <xEventGroupWaitBits+0x14e> @ imm = #0xc
 8059be4: e7ff         	b	0x8059be6 <xEventGroupWaitBits+0x142> @ imm = #-0x2
;                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8059be6: 9a0a         	ldr	r2, [sp, #0x28]
 8059be8: 9907         	ldr	r1, [sp, #0x1c]
 8059bea: 6808         	ldr	r0, [r1]
 8059bec: 4390         	bics	r0, r2
 8059bee: 6008         	str	r0, [r1]
;                     }
 8059bf0: e000         	b	0x8059bf4 <xEventGroupWaitBits+0x150> @ imm = #0x0
 8059bf2: e7ff         	b	0x8059bf4 <xEventGroupWaitBits+0x150> @ imm = #-0x2
;                 }
 8059bf4: e000         	b	0x8059bf8 <xEventGroupWaitBits+0x154> @ imm = #0x0
 8059bf6: e7ff         	b	0x8059bf8 <xEventGroupWaitBits+0x154> @ imm = #-0x2
 8059bf8: 2001         	movs	r0, #0x1
;                 xTimeoutOccurred = pdTRUE;
 8059bfa: 9002         	str	r0, [sp, #0x8]
;             taskEXIT_CRITICAL();
 8059bfc: 480e         	ldr	r0, [pc, #0x38]         @ 0x8059c38 <xEventGroupWaitBits+0x194>
 8059bfe: 4780         	blx	r0
;         }
 8059c00: e000         	b	0x8059c04 <xEventGroupWaitBits+0x160> @ imm = #0x0
 8059c02: e7ff         	b	0x8059c04 <xEventGroupWaitBits+0x160> @ imm = #-0x2
;         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8059c04: 9806         	ldr	r0, [sp, #0x18]
 8059c06: f020 407f    	bic	r0, r0, #0xff000000
 8059c0a: 9006         	str	r0, [sp, #0x18]
;     }
 8059c0c: e7ff         	b	0x8059c0e <xEventGroupWaitBits+0x16a> @ imm = #-0x2
;     return uxReturn;
 8059c0e: 9806         	ldr	r0, [sp, #0x18]
 8059c10: b00c         	add	sp, #0x30
 8059c12: bd80         	pop	{r7, pc}

08059c14 <$d.7>:
 8059c14: 8d 74 05 08  	.word	0x0805748d
 8059c18: 59 58 05 08  	.word	0x08055859
 8059c1c: 4d 9c 05 08  	.word	0x08059c4d
 8059c20: 71 6c 05 08  	.word	0x08056c71
 8059c24: 7d 59 05 08  	.word	0x0805597d
 8059c28: ff c3 05 08  	.word	0x0805c3ff
 8059c2c: 39 79 05 08  	.word	0x08057939
 8059c30: 19 c4 05 08  	.word	0x0805c419
 8059c34: 4d 9c 05 08  	.word	0x08059c4d
 8059c38: 3d c4 05 08  	.word	0x0805c43d
 8059c3c: 55 cd 05 08  	.word	0x0805cd55
 8059c40: 55 cd 05 08  	.word	0x0805cd55
 8059c44: 55 cd 05 08  	.word	0x0805cd55
 8059c48: 55 cd 05 08  	.word	0x0805cd55

08059c4c <prvTestWaitCondition>:
; {
 8059c4c: b084         	sub	sp, #0x10
 8059c4e: 9003         	str	r0, [sp, #0xc]
 8059c50: 9102         	str	r1, [sp, #0x8]
 8059c52: 9201         	str	r2, [sp, #0x4]
 8059c54: 2000         	movs	r0, #0x0
;     BaseType_t xWaitConditionMet = pdFALSE;
 8059c56: 9000         	str	r0, [sp]
;     if( xWaitForAllBits == pdFALSE )
 8059c58: 9801         	ldr	r0, [sp, #0x4]
 8059c5a: b950         	cbnz	r0, 0x8059c72 <prvTestWaitCondition+0x26> @ imm = #0x14
 8059c5c: e7ff         	b	0x8059c5e <prvTestWaitCondition+0x12> @ imm = #-0x2
;         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8059c5e: 9803         	ldr	r0, [sp, #0xc]
 8059c60: 9902         	ldr	r1, [sp, #0x8]
 8059c62: 4208         	tst	r0, r1
 8059c64: d003         	beq	0x8059c6e <prvTestWaitCondition+0x22> @ imm = #0x6
 8059c66: e7ff         	b	0x8059c68 <prvTestWaitCondition+0x1c> @ imm = #-0x2
 8059c68: 2001         	movs	r0, #0x1
;             xWaitConditionMet = pdTRUE;
 8059c6a: 9000         	str	r0, [sp]
;         }
 8059c6c: e000         	b	0x8059c70 <prvTestWaitCondition+0x24> @ imm = #0x0
 8059c6e: e7ff         	b	0x8059c70 <prvTestWaitCondition+0x24> @ imm = #-0x2
;     }
 8059c70: e00a         	b	0x8059c88 <prvTestWaitCondition+0x3c> @ imm = #0x14
;         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8059c72: 9803         	ldr	r0, [sp, #0xc]
 8059c74: 9902         	ldr	r1, [sp, #0x8]
 8059c76: 4008         	ands	r0, r1
 8059c78: 4288         	cmp	r0, r1
 8059c7a: d103         	bne	0x8059c84 <prvTestWaitCondition+0x38> @ imm = #0x6
 8059c7c: e7ff         	b	0x8059c7e <prvTestWaitCondition+0x32> @ imm = #-0x2
 8059c7e: 2001         	movs	r0, #0x1
;             xWaitConditionMet = pdTRUE;
 8059c80: 9000         	str	r0, [sp]
;         }
 8059c82: e000         	b	0x8059c86 <prvTestWaitCondition+0x3a> @ imm = #0x0
 8059c84: e7ff         	b	0x8059c86 <prvTestWaitCondition+0x3a> @ imm = #-0x2
 8059c86: e7ff         	b	0x8059c88 <prvTestWaitCondition+0x3c> @ imm = #-0x2
;     return xWaitConditionMet;
 8059c88: 9800         	ldr	r0, [sp]
 8059c8a: b004         	add	sp, #0x10
 8059c8c: 4770         	bx	lr
 8059c8e: bf00         	nop

08059c90 <xEventGroupClearBits>:
; {
 8059c90: b580         	push	{r7, lr}
 8059c92: 466f         	mov	r7, sp
 8059c94: b084         	sub	sp, #0x10
 8059c96: 9003         	str	r0, [sp, #0xc]
 8059c98: 9102         	str	r1, [sp, #0x8]
;     EventGroup_t * pxEventBits = xEventGroup;
 8059c9a: 9803         	ldr	r0, [sp, #0xc]
 8059c9c: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xEventGroup );
 8059c9e: 9803         	ldr	r0, [sp, #0xc]
 8059ca0: b920         	cbnz	r0, 0x8059cac <xEventGroupClearBits+0x1c> @ imm = #0x8
 8059ca2: e7ff         	b	0x8059ca4 <xEventGroupClearBits+0x14> @ imm = #-0x2
 8059ca4: 4810         	ldr	r0, [pc, #0x40]         @ 0x8059ce8 <xEventGroupClearBits+0x58>
 8059ca6: 4780         	blx	r0
 8059ca8: e7ff         	b	0x8059caa <xEventGroupClearBits+0x1a> @ imm = #-0x2
 8059caa: e7fe         	b	0x8059caa <xEventGroupClearBits+0x1a> @ imm = #-0x4
;     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8059cac: f89d 000b    	ldrb.w	r0, [sp, #0xb]
 8059cb0: b120         	cbz	r0, 0x8059cbc <xEventGroupClearBits+0x2c> @ imm = #0x8
 8059cb2: e7ff         	b	0x8059cb4 <xEventGroupClearBits+0x24> @ imm = #-0x2
 8059cb4: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8059ce4 <xEventGroupClearBits+0x54>
 8059cb6: 4780         	blx	r0
 8059cb8: e7ff         	b	0x8059cba <xEventGroupClearBits+0x2a> @ imm = #-0x2
 8059cba: e7fe         	b	0x8059cba <xEventGroupClearBits+0x2a> @ imm = #-0x4
;     taskENTER_CRITICAL();
 8059cbc: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8059cdc <xEventGroupClearBits+0x4c>
 8059cbe: 4780         	blx	r0
;         uxReturn = pxEventBits->uxEventBits;
 8059cc0: 9801         	ldr	r0, [sp, #0x4]
 8059cc2: 6800         	ldr	r0, [r0]
 8059cc4: 9000         	str	r0, [sp]
;         pxEventBits->uxEventBits &= ~uxBitsToClear;
 8059cc6: 9a02         	ldr	r2, [sp, #0x8]
 8059cc8: 9901         	ldr	r1, [sp, #0x4]
 8059cca: 6808         	ldr	r0, [r1]
 8059ccc: 4390         	bics	r0, r2
 8059cce: 6008         	str	r0, [r1]
;     taskEXIT_CRITICAL();
 8059cd0: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059ce0 <xEventGroupClearBits+0x50>
 8059cd2: 4780         	blx	r0
;     return uxReturn;
 8059cd4: 9800         	ldr	r0, [sp]
 8059cd6: b004         	add	sp, #0x10
 8059cd8: bd80         	pop	{r7, pc}
 8059cda: bf00         	nop

08059cdc <$d.9>:
 8059cdc: 19 c4 05 08  	.word	0x0805c419
 8059ce0: 3d c4 05 08  	.word	0x0805c43d
 8059ce4: 55 cd 05 08  	.word	0x0805cd55
 8059ce8: 55 cd 05 08  	.word	0x0805cd55

08059cec <xEventGroupClearBitsFromISR>:
;     {
 8059cec: b580         	push	{r7, lr}
 8059cee: 466f         	mov	r7, sp
 8059cf0: b084         	sub	sp, #0x10
 8059cf2: 9003         	str	r0, [sp, #0xc]
 8059cf4: 9102         	str	r1, [sp, #0x8]
;         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8059cf6: 9903         	ldr	r1, [sp, #0xc]
 8059cf8: 9a02         	ldr	r2, [sp, #0x8]
 8059cfa: f649 5019    	movw	r0, #0x9d19
 8059cfe: f6c0 0005    	movt	r0, #0x805
 8059d02: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x8059d14 <xEventGroupClearBitsFromISR+0x28>
 8059d06: 2300         	movs	r3, #0x0
 8059d08: 47e0         	blx	r12
 8059d0a: 9001         	str	r0, [sp, #0x4]
;         return xReturn;
 8059d0c: 9801         	ldr	r0, [sp, #0x4]
 8059d0e: b004         	add	sp, #0x10
 8059d10: bd80         	pop	{r7, pc}
 8059d12: bf00         	nop

08059d14 <$d.11>:
 8059d14: b1 8c 05 08  	.word	0x08058cb1

08059d18 <vEventGroupClearBitsCallback>:
; {
 8059d18: b580         	push	{r7, lr}
 8059d1a: 466f         	mov	r7, sp
 8059d1c: b082         	sub	sp, #0x8
 8059d1e: 9001         	str	r0, [sp, #0x4]
 8059d20: 9100         	str	r1, [sp]
;     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8059d22: 9801         	ldr	r0, [sp, #0x4]
 8059d24: 9900         	ldr	r1, [sp]
 8059d26: 4a02         	ldr	r2, [pc, #0x8]          @ 0x8059d30 <vEventGroupClearBitsCallback+0x18>
 8059d28: 4790         	blx	r2
; }
 8059d2a: b002         	add	sp, #0x8
 8059d2c: bd80         	pop	{r7, pc}
 8059d2e: bf00         	nop

08059d30 <$d.13>:
 8059d30: 91 9c 05 08  	.word	0x08059c91

08059d34 <xEventGroupGetBitsFromISR>:
; {
 8059d34: b580         	push	{r7, lr}
 8059d36: 466f         	mov	r7, sp
 8059d38: b084         	sub	sp, #0x10
 8059d3a: 9003         	str	r0, [sp, #0xc]
;     EventGroup_t const * const pxEventBits = xEventGroup;
 8059d3c: 9803         	ldr	r0, [sp, #0xc]
 8059d3e: 9001         	str	r0, [sp, #0x4]
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8059d40: 4805         	ldr	r0, [pc, #0x14]         @ 0x8059d58 <xEventGroupGetBitsFromISR+0x24>
 8059d42: 4780         	blx	r0
 8059d44: 9002         	str	r0, [sp, #0x8]
;         uxReturn = pxEventBits->uxEventBits;
 8059d46: 9801         	ldr	r0, [sp, #0x4]
 8059d48: 6800         	ldr	r0, [r0]
 8059d4a: 9000         	str	r0, [sp]
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8059d4c: 9802         	ldr	r0, [sp, #0x8]
 8059d4e: 4903         	ldr	r1, [pc, #0xc]          @ 0x8059d5c <xEventGroupGetBitsFromISR+0x28>
 8059d50: 4788         	blx	r1
;     return uxReturn;
 8059d52: 9800         	ldr	r0, [sp]
 8059d54: b004         	add	sp, #0x10
 8059d56: bd80         	pop	{r7, pc}

08059d58 <$d.15>:
 8059d58: 55 cd 05 08  	.word	0x0805cd55
 8059d5c: 6b cd 05 08  	.word	0x0805cd6b

08059d60 <vEventGroupDelete>:
; {
 8059d60: b580         	push	{r7, lr}
 8059d62: 466f         	mov	r7, sp
 8059d64: b084         	sub	sp, #0x10
 8059d66: 9003         	str	r0, [sp, #0xc]
;     EventGroup_t * pxEventBits = xEventGroup;
 8059d68: 9803         	ldr	r0, [sp, #0xc]
 8059d6a: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxEventBits );
 8059d6c: 9802         	ldr	r0, [sp, #0x8]
 8059d6e: b920         	cbnz	r0, 0x8059d7a <vEventGroupDelete+0x1a> @ imm = #0x8
 8059d70: e7ff         	b	0x8059d72 <vEventGroupDelete+0x12> @ imm = #-0x2
 8059d72: 4818         	ldr	r0, [pc, #0x60]         @ 0x8059dd4 <vEventGroupDelete+0x74>
 8059d74: 4780         	blx	r0
 8059d76: e7ff         	b	0x8059d78 <vEventGroupDelete+0x18> @ imm = #-0x2
 8059d78: e7fe         	b	0x8059d78 <vEventGroupDelete+0x18> @ imm = #-0x4
;     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8059d7a: 9802         	ldr	r0, [sp, #0x8]
 8059d7c: 3004         	adds	r0, #0x4
 8059d7e: 9001         	str	r0, [sp, #0x4]
;     vTaskSuspendAll();
 8059d80: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8059dc0 <vEventGroupDelete+0x60>
 8059d82: 4780         	blx	r0
;         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8059d84: e7ff         	b	0x8059d86 <vEventGroupDelete+0x26> @ imm = #-0x2
 8059d86: 9801         	ldr	r0, [sp, #0x4]
 8059d88: 6800         	ldr	r0, [r0]
 8059d8a: b190         	cbz	r0, 0x8059db2 <vEventGroupDelete+0x52> @ imm = #0x24
 8059d8c: e7ff         	b	0x8059d8e <vEventGroupDelete+0x2e> @ imm = #-0x2
;             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8059d8e: 9801         	ldr	r0, [sp, #0x4]
 8059d90: f100 0108    	add.w	r1, r0, #0x8
 8059d94: 68c0         	ldr	r0, [r0, #0xc]
 8059d96: 4288         	cmp	r0, r1
 8059d98: d104         	bne	0x8059da4 <vEventGroupDelete+0x44> @ imm = #0x8
 8059d9a: e7ff         	b	0x8059d9c <vEventGroupDelete+0x3c> @ imm = #-0x2
 8059d9c: 480c         	ldr	r0, [pc, #0x30]         @ 0x8059dd0 <vEventGroupDelete+0x70>
 8059d9e: 4780         	blx	r0
 8059da0: e7ff         	b	0x8059da2 <vEventGroupDelete+0x42> @ imm = #-0x2
 8059da2: e7fe         	b	0x8059da2 <vEventGroupDelete+0x42> @ imm = #-0x4
;             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8059da4: 9801         	ldr	r0, [sp, #0x4]
 8059da6: 68c0         	ldr	r0, [r0, #0xc]
 8059da8: 4a08         	ldr	r2, [pc, #0x20]         @ 0x8059dcc <vEventGroupDelete+0x6c>
 8059daa: f04f 7100    	mov.w	r1, #0x2000000
 8059dae: 4790         	blx	r2
;         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8059db0: e7e9         	b	0x8059d86 <vEventGroupDelete+0x26> @ imm = #-0x2e
;     ( void ) xTaskResumeAll();
 8059db2: 4804         	ldr	r0, [pc, #0x10]         @ 0x8059dc4 <vEventGroupDelete+0x64>
 8059db4: 4780         	blx	r0
;         vPortFree( pxEventBits );
 8059db6: 9802         	ldr	r0, [sp, #0x8]
 8059db8: 4903         	ldr	r1, [pc, #0xc]          @ 0x8059dc8 <vEventGroupDelete+0x68>
 8059dba: 4788         	blx	r1
; }
 8059dbc: b004         	add	sp, #0x10
 8059dbe: bd80         	pop	{r7, pc}

08059dc0 <$d.17>:
 8059dc0: 59 58 05 08  	.word	0x08055859
 8059dc4: 7d 59 05 08  	.word	0x0805597d
 8059dc8: 61 95 05 08  	.word	0x08059561
 8059dcc: 79 6f 05 08  	.word	0x08056f79
 8059dd0: 55 cd 05 08  	.word	0x0805cd55
 8059dd4: 55 cd 05 08  	.word	0x0805cd55

08059dd8 <vEventGroupSetBitsCallback>:
; {
 8059dd8: b580         	push	{r7, lr}
 8059dda: 466f         	mov	r7, sp
 8059ddc: b082         	sub	sp, #0x8
 8059dde: 9001         	str	r0, [sp, #0x4]
 8059de0: 9100         	str	r1, [sp]
;     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8059de2: 9801         	ldr	r0, [sp, #0x4]
 8059de4: 9900         	ldr	r1, [sp]
 8059de6: 4a02         	ldr	r2, [pc, #0x8]          @ 0x8059df0 <vEventGroupSetBitsCallback+0x18>
 8059de8: 4790         	blx	r2
; }
 8059dea: b002         	add	sp, #0x8
 8059dec: bd80         	pop	{r7, pc}
 8059dee: bf00         	nop

08059df0 <$d.19>:
 8059df0: 91 99 05 08  	.word	0x08059991

08059df4 <xEventGroupSetBitsFromISR>:
;     {
 8059df4: b580         	push	{r7, lr}
 8059df6: 466f         	mov	r7, sp
 8059df8: b084         	sub	sp, #0x10
 8059dfa: 9003         	str	r0, [sp, #0xc]
 8059dfc: 9102         	str	r1, [sp, #0x8]
 8059dfe: 9201         	str	r2, [sp, #0x4]
;         xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8059e00: 9903         	ldr	r1, [sp, #0xc]
 8059e02: 9a02         	ldr	r2, [sp, #0x8]
 8059e04: 9b01         	ldr	r3, [sp, #0x4]
 8059e06: f649 50d9    	movw	r0, #0x9dd9
 8059e0a: f6c0 0005    	movt	r0, #0x805
 8059e0e: f8df c00c    	ldr.w	r12, [pc, #0xc]         @ 0x8059e1c <xEventGroupSetBitsFromISR+0x28>
 8059e12: 47e0         	blx	r12
 8059e14: 9000         	str	r0, [sp]
;         return xReturn;
 8059e16: 9800         	ldr	r0, [sp]
 8059e18: b004         	add	sp, #0x10
 8059e1a: bd80         	pop	{r7, pc}

08059e1c <$d.21>:
 8059e1c: b1 8c 05 08  	.word	0x08058cb1

08059e20 <uxEventGroupGetNumber>:
;     {
 8059e20: b083         	sub	sp, #0xc
 8059e22: 9002         	str	r0, [sp, #0x8]
;         EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8059e24: 9802         	ldr	r0, [sp, #0x8]
 8059e26: 9000         	str	r0, [sp]
;         if( xEventGroup == NULL )
 8059e28: 9802         	ldr	r0, [sp, #0x8]
 8059e2a: b918         	cbnz	r0, 0x8059e34 <uxEventGroupGetNumber+0x14> @ imm = #0x6
 8059e2c: e7ff         	b	0x8059e2e <uxEventGroupGetNumber+0xe> @ imm = #-0x2
 8059e2e: 2000         	movs	r0, #0x0
;             xReturn = 0;
 8059e30: 9001         	str	r0, [sp, #0x4]
;         }
 8059e32: e003         	b	0x8059e3c <uxEventGroupGetNumber+0x1c> @ imm = #0x6
;             xReturn = pxEventBits->uxEventGroupNumber;
 8059e34: 9800         	ldr	r0, [sp]
 8059e36: 6980         	ldr	r0, [r0, #0x18]
 8059e38: 9001         	str	r0, [sp, #0x4]
 8059e3a: e7ff         	b	0x8059e3c <uxEventGroupGetNumber+0x1c> @ imm = #-0x2
;         return xReturn;
 8059e3c: 9801         	ldr	r0, [sp, #0x4]
 8059e3e: b003         	add	sp, #0xc
 8059e40: 4770         	bx	lr

08059e42 <vEventGroupSetNumber>:
;     {
 8059e42: b082         	sub	sp, #0x8
 8059e44: 9001         	str	r0, [sp, #0x4]
 8059e46: 9100         	str	r1, [sp]
;         ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8059e48: 9800         	ldr	r0, [sp]
 8059e4a: 9901         	ldr	r1, [sp, #0x4]
 8059e4c: 6188         	str	r0, [r1, #0x18]
;     }
 8059e4e: b002         	add	sp, #0x8
 8059e50: 4770         	bx	lr

08059e52 <vListInitialise>:
; {
 8059e52: b081         	sub	sp, #0x4
 8059e54: 9000         	str	r0, [sp]
;     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8059e56: 9900         	ldr	r1, [sp]
 8059e58: f101 0008    	add.w	r0, r1, #0x8
 8059e5c: 6048         	str	r0, [r1, #0x4]
;     pxList->xListEnd.xItemValue = portMAX_DELAY;
 8059e5e: 9900         	ldr	r1, [sp]
 8059e60: f04f 30ff    	mov.w	r0, #0xffffffff
 8059e64: 6088         	str	r0, [r1, #0x8]
;     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8059e66: 9900         	ldr	r1, [sp]
 8059e68: f101 0008    	add.w	r0, r1, #0x8
 8059e6c: 60c8         	str	r0, [r1, #0xc]
;     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8059e6e: 9900         	ldr	r1, [sp]
 8059e70: f101 0008    	add.w	r0, r1, #0x8
 8059e74: 6108         	str	r0, [r1, #0x10]
;     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8059e76: 9900         	ldr	r1, [sp]
 8059e78: 2000         	movs	r0, #0x0
 8059e7a: 6008         	str	r0, [r1]
; }
 8059e7c: b001         	add	sp, #0x4
 8059e7e: 4770         	bx	lr

08059e80 <vListInitialiseItem>:
; {
 8059e80: b081         	sub	sp, #0x4
 8059e82: 9000         	str	r0, [sp]
;     pxItem->pxContainer = NULL;
 8059e84: 9900         	ldr	r1, [sp]
 8059e86: 2000         	movs	r0, #0x0
 8059e88: 6108         	str	r0, [r1, #0x10]
; }
 8059e8a: b001         	add	sp, #0x4
 8059e8c: 4770         	bx	lr

08059e8e <vListInsertEnd>:
; {
 8059e8e: b083         	sub	sp, #0xc
 8059e90: 9002         	str	r0, [sp, #0x8]
 8059e92: 9101         	str	r1, [sp, #0x4]
;     ListItem_t * const pxIndex = pxList->pxIndex;
 8059e94: 9802         	ldr	r0, [sp, #0x8]
 8059e96: 6840         	ldr	r0, [r0, #0x4]
 8059e98: 9000         	str	r0, [sp]
;     pxNewListItem->pxNext = pxIndex;
 8059e9a: 9800         	ldr	r0, [sp]
 8059e9c: 9901         	ldr	r1, [sp, #0x4]
 8059e9e: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8059ea0: 9800         	ldr	r0, [sp]
 8059ea2: 6880         	ldr	r0, [r0, #0x8]
 8059ea4: 9901         	ldr	r1, [sp, #0x4]
 8059ea6: 6088         	str	r0, [r1, #0x8]
;     pxIndex->pxPrevious->pxNext = pxNewListItem;
 8059ea8: 9801         	ldr	r0, [sp, #0x4]
 8059eaa: 9900         	ldr	r1, [sp]
 8059eac: 6889         	ldr	r1, [r1, #0x8]
 8059eae: 6048         	str	r0, [r1, #0x4]
;     pxIndex->pxPrevious = pxNewListItem;
 8059eb0: 9801         	ldr	r0, [sp, #0x4]
 8059eb2: 9900         	ldr	r1, [sp]
 8059eb4: 6088         	str	r0, [r1, #0x8]
;     pxNewListItem->pxContainer = pxList;
 8059eb6: 9802         	ldr	r0, [sp, #0x8]
 8059eb8: 9901         	ldr	r1, [sp, #0x4]
 8059eba: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )++;
 8059ebc: 9902         	ldr	r1, [sp, #0x8]
 8059ebe: 6808         	ldr	r0, [r1]
 8059ec0: 3001         	adds	r0, #0x1
 8059ec2: 6008         	str	r0, [r1]
; }
 8059ec4: b003         	add	sp, #0xc
 8059ec6: 4770         	bx	lr

08059ec8 <vListInsert>:
; {
 8059ec8: b084         	sub	sp, #0x10
 8059eca: 9003         	str	r0, [sp, #0xc]
 8059ecc: 9102         	str	r1, [sp, #0x8]
;     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8059ece: 9802         	ldr	r0, [sp, #0x8]
 8059ed0: 6800         	ldr	r0, [r0]
 8059ed2: 9000         	str	r0, [sp]
;     if( xValueOfInsertion == portMAX_DELAY )
 8059ed4: 9800         	ldr	r0, [sp]
 8059ed6: 3001         	adds	r0, #0x1
 8059ed8: b920         	cbnz	r0, 0x8059ee4 <vListInsert+0x1c> @ imm = #0x8
 8059eda: e7ff         	b	0x8059edc <vListInsert+0x14> @ imm = #-0x2
;         pxIterator = pxList->xListEnd.pxPrevious;
 8059edc: 9803         	ldr	r0, [sp, #0xc]
 8059ede: 6900         	ldr	r0, [r0, #0x10]
 8059ee0: 9001         	str	r0, [sp, #0x4]
;     }
 8059ee2: e010         	b	0x8059f06 <vListInsert+0x3e> @ imm = #0x20
;         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8059ee4: 9803         	ldr	r0, [sp, #0xc]
 8059ee6: 3008         	adds	r0, #0x8
 8059ee8: 9001         	str	r0, [sp, #0x4]
 8059eea: e7ff         	b	0x8059eec <vListInsert+0x24> @ imm = #-0x2
 8059eec: 9801         	ldr	r0, [sp, #0x4]
 8059eee: 6840         	ldr	r0, [r0, #0x4]
 8059ef0: 6800         	ldr	r0, [r0]
 8059ef2: 9900         	ldr	r1, [sp]
 8059ef4: 4288         	cmp	r0, r1
 8059ef6: d805         	bhi	0x8059f04 <vListInsert+0x3c> @ imm = #0xa
 8059ef8: e7ff         	b	0x8059efa <vListInsert+0x32> @ imm = #-0x2
;         }
 8059efa: e7ff         	b	0x8059efc <vListInsert+0x34> @ imm = #-0x2
;         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8059efc: 9801         	ldr	r0, [sp, #0x4]
 8059efe: 6840         	ldr	r0, [r0, #0x4]
 8059f00: 9001         	str	r0, [sp, #0x4]
 8059f02: e7f3         	b	0x8059eec <vListInsert+0x24> @ imm = #-0x1a
 8059f04: e7ff         	b	0x8059f06 <vListInsert+0x3e> @ imm = #-0x2
;     pxNewListItem->pxNext = pxIterator->pxNext;
 8059f06: 9801         	ldr	r0, [sp, #0x4]
 8059f08: 6840         	ldr	r0, [r0, #0x4]
 8059f0a: 9902         	ldr	r1, [sp, #0x8]
 8059f0c: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8059f0e: 9802         	ldr	r0, [sp, #0x8]
 8059f10: 6841         	ldr	r1, [r0, #0x4]
 8059f12: 6088         	str	r0, [r1, #0x8]
;     pxNewListItem->pxPrevious = pxIterator;
 8059f14: 9801         	ldr	r0, [sp, #0x4]
 8059f16: 9902         	ldr	r1, [sp, #0x8]
 8059f18: 6088         	str	r0, [r1, #0x8]
;     pxIterator->pxNext = pxNewListItem;
 8059f1a: 9802         	ldr	r0, [sp, #0x8]
 8059f1c: 9901         	ldr	r1, [sp, #0x4]
 8059f1e: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxContainer = pxList;
 8059f20: 9803         	ldr	r0, [sp, #0xc]
 8059f22: 9902         	ldr	r1, [sp, #0x8]
 8059f24: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )++;
 8059f26: 9903         	ldr	r1, [sp, #0xc]
 8059f28: 6808         	ldr	r0, [r1]
 8059f2a: 3001         	adds	r0, #0x1
 8059f2c: 6008         	str	r0, [r1]
; }
 8059f2e: b004         	add	sp, #0x10
 8059f30: 4770         	bx	lr

08059f32 <uxListRemove>:
; {
 8059f32: b082         	sub	sp, #0x8
 8059f34: 9001         	str	r0, [sp, #0x4]
;     List_t * const pxList = pxItemToRemove->pxContainer;
 8059f36: 9801         	ldr	r0, [sp, #0x4]
 8059f38: 6900         	ldr	r0, [r0, #0x10]
 8059f3a: 9000         	str	r0, [sp]
;     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8059f3c: 9801         	ldr	r0, [sp, #0x4]
 8059f3e: 6841         	ldr	r1, [r0, #0x4]
 8059f40: 6880         	ldr	r0, [r0, #0x8]
 8059f42: 6088         	str	r0, [r1, #0x8]
;     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8059f44: 9901         	ldr	r1, [sp, #0x4]
 8059f46: 6848         	ldr	r0, [r1, #0x4]
 8059f48: 6889         	ldr	r1, [r1, #0x8]
 8059f4a: 6048         	str	r0, [r1, #0x4]
;     if( pxList->pxIndex == pxItemToRemove )
 8059f4c: 9800         	ldr	r0, [sp]
 8059f4e: 6840         	ldr	r0, [r0, #0x4]
 8059f50: 9901         	ldr	r1, [sp, #0x4]
 8059f52: 4288         	cmp	r0, r1
 8059f54: d105         	bne	0x8059f62 <uxListRemove+0x30> @ imm = #0xa
 8059f56: e7ff         	b	0x8059f58 <uxListRemove+0x26> @ imm = #-0x2
;         pxList->pxIndex = pxItemToRemove->pxPrevious;
 8059f58: 9801         	ldr	r0, [sp, #0x4]
 8059f5a: 6880         	ldr	r0, [r0, #0x8]
 8059f5c: 9900         	ldr	r1, [sp]
 8059f5e: 6048         	str	r0, [r1, #0x4]
;     }
 8059f60: e000         	b	0x8059f64 <uxListRemove+0x32> @ imm = #0x0
 8059f62: e7ff         	b	0x8059f64 <uxListRemove+0x32> @ imm = #-0x2
;     pxItemToRemove->pxContainer = NULL;
 8059f64: 9901         	ldr	r1, [sp, #0x4]
 8059f66: 2000         	movs	r0, #0x0
 8059f68: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )--;
 8059f6a: 9900         	ldr	r1, [sp]
 8059f6c: 6808         	ldr	r0, [r1]
 8059f6e: 3801         	subs	r0, #0x1
 8059f70: 6008         	str	r0, [r1]
;     return pxList->uxNumberOfItems;
 8059f72: 9800         	ldr	r0, [sp]
 8059f74: 6800         	ldr	r0, [r0]
 8059f76: b002         	add	sp, #0x8
 8059f78: 4770         	bx	lr
 8059f7a: 0000         	movs	r0, r0

08059f7c <xQueueGenericReset>:
; {
 8059f7c: b580         	push	{r7, lr}
 8059f7e: 466f         	mov	r7, sp
 8059f80: b084         	sub	sp, #0x10
 8059f82: 9003         	str	r0, [sp, #0xc]
 8059f84: 9102         	str	r1, [sp, #0x8]
 8059f86: 2001         	movs	r0, #0x1
;     BaseType_t xReturn = pdPASS;
 8059f88: 9001         	str	r0, [sp, #0x4]
;     Queue_t * const pxQueue = xQueue;
 8059f8a: 9803         	ldr	r0, [sp, #0xc]
 8059f8c: 9000         	str	r0, [sp]
;     configASSERT( pxQueue );
 8059f8e: 9800         	ldr	r0, [sp]
 8059f90: b920         	cbnz	r0, 0x8059f9c <xQueueGenericReset+0x20> @ imm = #0x8
 8059f92: e7ff         	b	0x8059f94 <xQueueGenericReset+0x18> @ imm = #-0x2
 8059f94: 4837         	ldr	r0, [pc, #0xdc]         @ 0x805a074 <xQueueGenericReset+0xf8>
 8059f96: 4780         	blx	r0
 8059f98: e7ff         	b	0x8059f9a <xQueueGenericReset+0x1e> @ imm = #-0x2
 8059f9a: e7fe         	b	0x8059f9a <xQueueGenericReset+0x1e> @ imm = #-0x4
;     if( ( pxQueue != NULL ) &&
 8059f9c: 9800         	ldr	r0, [sp]
 8059f9e: 2800         	cmp	r0, #0x0
 8059fa0: d04d         	beq	0x805a03e <xQueueGenericReset+0xc2> @ imm = #0x9a
 8059fa2: e7ff         	b	0x8059fa4 <xQueueGenericReset+0x28> @ imm = #-0x2
;         ( pxQueue->uxLength >= 1U ) &&
 8059fa4: 9800         	ldr	r0, [sp]
 8059fa6: 6bc0         	ldr	r0, [r0, #0x3c]
 8059fa8: 2800         	cmp	r0, #0x0
 8059faa: d048         	beq	0x805a03e <xQueueGenericReset+0xc2> @ imm = #0x90
 8059fac: e7ff         	b	0x8059fae <xQueueGenericReset+0x32> @ imm = #-0x2
;         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8059fae: 9800         	ldr	r0, [sp]
 8059fb0: 6bc2         	ldr	r2, [r0, #0x3c]
 8059fb2: 6c01         	ldr	r1, [r0, #0x40]
 8059fb4: f04f 30ff    	mov.w	r0, #0xffffffff
 8059fb8: fbb0 f0f2    	udiv	r0, r0, r2
;     if( ( pxQueue != NULL ) &&
 8059fbc: 4288         	cmp	r0, r1
 8059fbe: d33e         	blo	0x805a03e <xQueueGenericReset+0xc2> @ imm = #0x7c
 8059fc0: e7ff         	b	0x8059fc2 <xQueueGenericReset+0x46> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8059fc2: 4825         	ldr	r0, [pc, #0x94]         @ 0x805a058 <xQueueGenericReset+0xdc>
 8059fc4: 4780         	blx	r0
;             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8059fc6: 9900         	ldr	r1, [sp]
 8059fc8: 680b         	ldr	r3, [r1]
 8059fca: 6bc8         	ldr	r0, [r1, #0x3c]
 8059fcc: 6c0a         	ldr	r2, [r1, #0x40]
 8059fce: fb00 3002    	mla	r0, r0, r2, r3
 8059fd2: 6088         	str	r0, [r1, #0x8]
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8059fd4: 9900         	ldr	r1, [sp]
 8059fd6: 2000         	movs	r0, #0x0
 8059fd8: 6388         	str	r0, [r1, #0x38]
;             pxQueue->pcWriteTo = pxQueue->pcHead;
 8059fda: 9900         	ldr	r1, [sp]
 8059fdc: 6808         	ldr	r0, [r1]
 8059fde: 6048         	str	r0, [r1, #0x4]
;             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8059fe0: 9900         	ldr	r1, [sp]
 8059fe2: 680b         	ldr	r3, [r1]
 8059fe4: 6bc8         	ldr	r0, [r1, #0x3c]
 8059fe6: 6c0a         	ldr	r2, [r1, #0x40]
 8059fe8: 3801         	subs	r0, #0x1
 8059fea: fb00 3002    	mla	r0, r0, r2, r3
 8059fee: 60c8         	str	r0, [r1, #0xc]
;             pxQueue->cRxLock = queueUNLOCKED;
 8059ff0: 9900         	ldr	r1, [sp]
 8059ff2: 20ff         	movs	r0, #0xff
 8059ff4: f881 0044    	strb.w	r0, [r1, #0x44]
;             pxQueue->cTxLock = queueUNLOCKED;
 8059ff8: 9900         	ldr	r1, [sp]
 8059ffa: f881 0045    	strb.w	r0, [r1, #0x45]
;             if( xNewQueue == pdFALSE )
 8059ffe: 9802         	ldr	r0, [sp, #0x8]
 805a000: b988         	cbnz	r0, 0x805a026 <xQueueGenericReset+0xaa> @ imm = #0x22
 805a002: e7ff         	b	0x805a004 <xQueueGenericReset+0x88> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805a004: 9800         	ldr	r0, [sp]
 805a006: 6900         	ldr	r0, [r0, #0x10]
 805a008: b158         	cbz	r0, 0x805a022 <xQueueGenericReset+0xa6> @ imm = #0x16
 805a00a: e7ff         	b	0x805a00c <xQueueGenericReset+0x90> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805a00c: 9800         	ldr	r0, [sp]
 805a00e: 3010         	adds	r0, #0x10
 805a010: 4914         	ldr	r1, [pc, #0x50]         @ 0x805a064 <xQueueGenericReset+0xe8>
 805a012: 4788         	blx	r1
 805a014: b118         	cbz	r0, 0x805a01e <xQueueGenericReset+0xa2> @ imm = #0x6
 805a016: e7ff         	b	0x805a018 <xQueueGenericReset+0x9c> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805a018: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805a068 <xQueueGenericReset+0xec>
 805a01a: 4780         	blx	r0
;                     }
 805a01c: e000         	b	0x805a020 <xQueueGenericReset+0xa4> @ imm = #0x0
 805a01e: e7ff         	b	0x805a020 <xQueueGenericReset+0xa4> @ imm = #-0x2
;                 }
 805a020: e000         	b	0x805a024 <xQueueGenericReset+0xa8> @ imm = #0x0
 805a022: e7ff         	b	0x805a024 <xQueueGenericReset+0xa8> @ imm = #-0x2
;             }
 805a024: e008         	b	0x805a038 <xQueueGenericReset+0xbc> @ imm = #0x10
;                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 805a026: 9800         	ldr	r0, [sp]
 805a028: 3010         	adds	r0, #0x10
 805a02a: 490c         	ldr	r1, [pc, #0x30]         @ 0x805a05c <xQueueGenericReset+0xe0>
 805a02c: 4788         	blx	r1
;                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 805a02e: 9800         	ldr	r0, [sp]
 805a030: 3024         	adds	r0, #0x24
 805a032: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805a060 <xQueueGenericReset+0xe4>
 805a034: 4788         	blx	r1
 805a036: e7ff         	b	0x805a038 <xQueueGenericReset+0xbc> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805a038: 480c         	ldr	r0, [pc, #0x30]         @ 0x805a06c <xQueueGenericReset+0xf0>
 805a03a: 4780         	blx	r0
;     }
 805a03c: e002         	b	0x805a044 <xQueueGenericReset+0xc8> @ imm = #0x4
 805a03e: 2000         	movs	r0, #0x0
;         xReturn = pdFAIL;
 805a040: 9001         	str	r0, [sp, #0x4]
 805a042: e7ff         	b	0x805a044 <xQueueGenericReset+0xc8> @ imm = #-0x2
;     configASSERT( xReturn != pdFAIL );
 805a044: 9801         	ldr	r0, [sp, #0x4]
 805a046: b920         	cbnz	r0, 0x805a052 <xQueueGenericReset+0xd6> @ imm = #0x8
 805a048: e7ff         	b	0x805a04a <xQueueGenericReset+0xce> @ imm = #-0x2
 805a04a: 4809         	ldr	r0, [pc, #0x24]         @ 0x805a070 <xQueueGenericReset+0xf4>
 805a04c: 4780         	blx	r0
 805a04e: e7ff         	b	0x805a050 <xQueueGenericReset+0xd4> @ imm = #-0x2
 805a050: e7fe         	b	0x805a050 <xQueueGenericReset+0xd4> @ imm = #-0x4
;     return xReturn;
 805a052: 9801         	ldr	r0, [sp, #0x4]
 805a054: b004         	add	sp, #0x10
 805a056: bd80         	pop	{r7, pc}

0805a058 <$d.1>:
 805a058: 19 c4 05 08  	.word	0x0805c419
 805a05c: 53 9e 05 08  	.word	0x08059e53
 805a060: 53 9e 05 08  	.word	0x08059e53
 805a064: 99 6d 05 08  	.word	0x08056d99
 805a068: ff c3 05 08  	.word	0x0805c3ff
 805a06c: 3d c4 05 08  	.word	0x0805c43d
 805a070: 55 cd 05 08  	.word	0x0805cd55
 805a074: 55 cd 05 08  	.word	0x0805cd55

0805a078 <xQueueGenericCreate>:
;     {
 805a078: b580         	push	{r7, lr}
 805a07a: 466f         	mov	r7, sp
 805a07c: b088         	sub	sp, #0x20
 805a07e: 9007         	str	r0, [sp, #0x1c]
 805a080: 9106         	str	r1, [sp, #0x18]
 805a082: f807 2c09    	strb	r2, [r7, #-9]
 805a086: 2000         	movs	r0, #0x0
;         Queue_t * pxNewQueue = NULL;
 805a088: 9004         	str	r0, [sp, #0x10]
;         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 805a08a: 9807         	ldr	r0, [sp, #0x1c]
 805a08c: b388         	cbz	r0, 0x805a0f2 <xQueueGenericCreate+0x7a> @ imm = #0x62
 805a08e: e7ff         	b	0x805a090 <xQueueGenericCreate+0x18> @ imm = #-0x2
;             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 805a090: 9907         	ldr	r1, [sp, #0x1c]
 805a092: f04f 30ff    	mov.w	r0, #0xffffffff
 805a096: fbb0 f0f1    	udiv	r0, r0, r1
 805a09a: 9906         	ldr	r1, [sp, #0x18]
 805a09c: 4288         	cmp	r0, r1
 805a09e: d328         	blo	0x805a0f2 <xQueueGenericCreate+0x7a> @ imm = #0x50
 805a0a0: e7ff         	b	0x805a0a2 <xQueueGenericCreate+0x2a> @ imm = #-0x2
;             ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 805a0a2: 9807         	ldr	r0, [sp, #0x1c]
 805a0a4: 9906         	ldr	r1, [sp, #0x18]
 805a0a6: 4348         	muls	r0, r1, r0
;         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 805a0a8: f110 0f51    	cmn.w	r0, #0x51
 805a0ac: d821         	bhi	0x805a0f2 <xQueueGenericCreate+0x7a> @ imm = #0x42
 805a0ae: e7ff         	b	0x805a0b0 <xQueueGenericCreate+0x38> @ imm = #-0x2
;             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805a0b0: 9807         	ldr	r0, [sp, #0x1c]
 805a0b2: 9906         	ldr	r1, [sp, #0x18]
 805a0b4: 4348         	muls	r0, r1, r0
 805a0b6: 9003         	str	r0, [sp, #0xc]
;             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 805a0b8: 9803         	ldr	r0, [sp, #0xc]
 805a0ba: 3050         	adds	r0, #0x50
 805a0bc: 4913         	ldr	r1, [pc, #0x4c]         @ 0x805a10c <xQueueGenericCreate+0x94>
 805a0be: 4788         	blx	r1
 805a0c0: 9004         	str	r0, [sp, #0x10]
;             if( pxNewQueue != NULL )
 805a0c2: 9804         	ldr	r0, [sp, #0x10]
 805a0c4: b198         	cbz	r0, 0x805a0ee <xQueueGenericCreate+0x76> @ imm = #0x26
 805a0c6: e7ff         	b	0x805a0c8 <xQueueGenericCreate+0x50> @ imm = #-0x2
;                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 805a0c8: 9804         	ldr	r0, [sp, #0x10]
 805a0ca: 9002         	str	r0, [sp, #0x8]
;                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 805a0cc: 9802         	ldr	r0, [sp, #0x8]
 805a0ce: 3050         	adds	r0, #0x50
 805a0d0: 9002         	str	r0, [sp, #0x8]
;                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 805a0d2: 9807         	ldr	r0, [sp, #0x1c]
 805a0d4: 9906         	ldr	r1, [sp, #0x18]
 805a0d6: 9a02         	ldr	r2, [sp, #0x8]
 805a0d8: f817 3c09    	ldrb	r3, [r7, #-9]
 805a0dc: f8dd c010    	ldr.w	r12, [sp, #0x10]
 805a0e0: 46ee         	mov	lr, sp
 805a0e2: f8ce c000    	str.w	r12, [lr]
 805a0e6: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x805a110 <xQueueGenericCreate+0x98>
 805a0ea: 47e0         	blx	r12
;             }
 805a0ec: e000         	b	0x805a0f0 <xQueueGenericCreate+0x78> @ imm = #0x0
 805a0ee: e7ff         	b	0x805a0f0 <xQueueGenericCreate+0x78> @ imm = #-0x2
;         }
 805a0f0: e007         	b	0x805a102 <xQueueGenericCreate+0x8a> @ imm = #0xe
;             configASSERT( pxNewQueue );
 805a0f2: 9804         	ldr	r0, [sp, #0x10]
 805a0f4: b920         	cbnz	r0, 0x805a100 <xQueueGenericCreate+0x88> @ imm = #0x8
 805a0f6: e7ff         	b	0x805a0f8 <xQueueGenericCreate+0x80> @ imm = #-0x2
 805a0f8: 4803         	ldr	r0, [pc, #0xc]          @ 0x805a108 <xQueueGenericCreate+0x90>
 805a0fa: 4780         	blx	r0
 805a0fc: e7ff         	b	0x805a0fe <xQueueGenericCreate+0x86> @ imm = #-0x2
 805a0fe: e7fe         	b	0x805a0fe <xQueueGenericCreate+0x86> @ imm = #-0x4
 805a100: e7ff         	b	0x805a102 <xQueueGenericCreate+0x8a> @ imm = #-0x2
;         return pxNewQueue;
 805a102: 9804         	ldr	r0, [sp, #0x10]
 805a104: b008         	add	sp, #0x20
 805a106: bd80         	pop	{r7, pc}

0805a108 <$d.3>:
 805a108: 55 cd 05 08  	.word	0x0805cd55
 805a10c: dd 91 05 08  	.word	0x080591dd
 805a110: 15 a1 05 08  	.word	0x0805a115

0805a114 <prvInitialiseNewQueue>:
; {
 805a114: b580         	push	{r7, lr}
 805a116: 466f         	mov	r7, sp
 805a118: b084         	sub	sp, #0x10
 805a11a: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805a11e: 9003         	str	r0, [sp, #0xc]
 805a120: 9102         	str	r1, [sp, #0x8]
 805a122: 9201         	str	r2, [sp, #0x4]
 805a124: f807 3c0d    	strb	r3, [r7, #-13]
;     if( uxItemSize == ( UBaseType_t ) 0 )
 805a128: 9802         	ldr	r0, [sp, #0x8]
 805a12a: b918         	cbnz	r0, 0x805a134 <prvInitialiseNewQueue+0x20> @ imm = #0x6
 805a12c: e7ff         	b	0x805a12e <prvInitialiseNewQueue+0x1a> @ imm = #-0x2
;         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 805a12e: 68b8         	ldr	r0, [r7, #0x8]
 805a130: 6000         	str	r0, [r0]
;     }
 805a132: e003         	b	0x805a13c <prvInitialiseNewQueue+0x28> @ imm = #0x6
;         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 805a134: 9801         	ldr	r0, [sp, #0x4]
 805a136: 68b9         	ldr	r1, [r7, #0x8]
 805a138: 6008         	str	r0, [r1]
 805a13a: e7ff         	b	0x805a13c <prvInitialiseNewQueue+0x28> @ imm = #-0x2
;     pxNewQueue->uxLength = uxQueueLength;
 805a13c: 9803         	ldr	r0, [sp, #0xc]
 805a13e: 68b9         	ldr	r1, [r7, #0x8]
 805a140: 63c8         	str	r0, [r1, #0x3c]
;     pxNewQueue->uxItemSize = uxItemSize;
 805a142: 9802         	ldr	r0, [sp, #0x8]
 805a144: 68b9         	ldr	r1, [r7, #0x8]
 805a146: 6408         	str	r0, [r1, #0x40]
;     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 805a148: 68b8         	ldr	r0, [r7, #0x8]
 805a14a: 4a05         	ldr	r2, [pc, #0x14]         @ 0x805a160 <prvInitialiseNewQueue+0x4c>
 805a14c: 2101         	movs	r1, #0x1
 805a14e: 4790         	blx	r2
;         pxNewQueue->ucQueueType = ucQueueType;
 805a150: f817 0c0d    	ldrb	r0, [r7, #-13]
 805a154: 68b9         	ldr	r1, [r7, #0x8]
 805a156: f881 004c    	strb.w	r0, [r1, #0x4c]
; }
 805a15a: b004         	add	sp, #0x10
 805a15c: bd80         	pop	{r7, pc}
 805a15e: bf00         	nop

0805a160 <$d.5>:
 805a160: 7d 9f 05 08  	.word	0x08059f7d

0805a164 <xQueueCreateMutex>:
;     {
 805a164: b580         	push	{r7, lr}
 805a166: 466f         	mov	r7, sp
 805a168: b084         	sub	sp, #0x10
 805a16a: f807 0c01    	strb	r0, [r7, #-1]
 805a16e: 2001         	movs	r0, #0x1
;         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 805a170: 9001         	str	r0, [sp, #0x4]
 805a172: 2100         	movs	r1, #0x0
 805a174: 9100         	str	r1, [sp]
;         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 805a176: f817 2c01    	ldrb	r2, [r7, #-1]
 805a17a: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805a18c <xQueueCreateMutex+0x28>
 805a17c: 4798         	blx	r3
 805a17e: 9002         	str	r0, [sp, #0x8]
;         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 805a180: 9802         	ldr	r0, [sp, #0x8]
 805a182: 4903         	ldr	r1, [pc, #0xc]          @ 0x805a190 <xQueueCreateMutex+0x2c>
 805a184: 4788         	blx	r1
;         return xNewQueue;
 805a186: 9802         	ldr	r0, [sp, #0x8]
 805a188: b004         	add	sp, #0x10
 805a18a: bd80         	pop	{r7, pc}

0805a18c <$d.7>:
 805a18c: 79 a0 05 08  	.word	0x0805a079
 805a190: 95 a1 05 08  	.word	0x0805a195

0805a194 <prvInitialiseMutex>:
;     {
 805a194: b580         	push	{r7, lr}
 805a196: 466f         	mov	r7, sp
 805a198: b082         	sub	sp, #0x8
 805a19a: 9001         	str	r0, [sp, #0x4]
;         if( pxNewQueue != NULL )
 805a19c: 9801         	ldr	r0, [sp, #0x4]
 805a19e: b170         	cbz	r0, 0x805a1be <prvInitialiseMutex+0x2a> @ imm = #0x1c
 805a1a0: e7ff         	b	0x805a1a2 <prvInitialiseMutex+0xe> @ imm = #-0x2
;             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 805a1a2: 9801         	ldr	r0, [sp, #0x4]
 805a1a4: 2300         	movs	r3, #0x0
 805a1a6: 6083         	str	r3, [r0, #0x8]
;             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 805a1a8: 9801         	ldr	r0, [sp, #0x4]
 805a1aa: 6003         	str	r3, [r0]
;             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 805a1ac: 9801         	ldr	r0, [sp, #0x4]
 805a1ae: 60c3         	str	r3, [r0, #0xc]
;             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 805a1b0: 9801         	ldr	r0, [sp, #0x4]
 805a1b2: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x805a1c4 <prvInitialiseMutex+0x30>
 805a1b6: 4619         	mov	r1, r3
 805a1b8: 461a         	mov	r2, r3
 805a1ba: 47e0         	blx	r12
;         }
 805a1bc: e000         	b	0x805a1c0 <prvInitialiseMutex+0x2c> @ imm = #0x0
 805a1be: e7ff         	b	0x805a1c0 <prvInitialiseMutex+0x2c> @ imm = #-0x2
;     }
 805a1c0: b002         	add	sp, #0x8
 805a1c2: bd80         	pop	{r7, pc}

0805a1c4 <$d.9>:
 805a1c4: bd a2 05 08  	.word	0x0805a2bd

0805a1c8 <xQueueGetMutexHolder>:
;     {
 805a1c8: b580         	push	{r7, lr}
 805a1ca: 466f         	mov	r7, sp
 805a1cc: b084         	sub	sp, #0x10
 805a1ce: 9003         	str	r0, [sp, #0xc]
;         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 805a1d0: 9803         	ldr	r0, [sp, #0xc]
 805a1d2: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xSemaphore );
 805a1d4: 9803         	ldr	r0, [sp, #0xc]
 805a1d6: b920         	cbnz	r0, 0x805a1e2 <xQueueGetMutexHolder+0x1a> @ imm = #0x8
 805a1d8: e7ff         	b	0x805a1da <xQueueGetMutexHolder+0x12> @ imm = #-0x2
 805a1da: 480d         	ldr	r0, [pc, #0x34]         @ 0x805a210 <xQueueGetMutexHolder+0x48>
 805a1dc: 4780         	blx	r0
 805a1de: e7ff         	b	0x805a1e0 <xQueueGetMutexHolder+0x18> @ imm = #-0x2
 805a1e0: e7fe         	b	0x805a1e0 <xQueueGetMutexHolder+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 805a1e2: 4809         	ldr	r0, [pc, #0x24]         @ 0x805a208 <xQueueGetMutexHolder+0x40>
 805a1e4: 4780         	blx	r0
;             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 805a1e6: 9801         	ldr	r0, [sp, #0x4]
 805a1e8: 6800         	ldr	r0, [r0]
 805a1ea: b920         	cbnz	r0, 0x805a1f6 <xQueueGetMutexHolder+0x2e> @ imm = #0x8
 805a1ec: e7ff         	b	0x805a1ee <xQueueGetMutexHolder+0x26> @ imm = #-0x2
;                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 805a1ee: 9801         	ldr	r0, [sp, #0x4]
 805a1f0: 6880         	ldr	r0, [r0, #0x8]
 805a1f2: 9002         	str	r0, [sp, #0x8]
;             }
 805a1f4: e002         	b	0x805a1fc <xQueueGetMutexHolder+0x34> @ imm = #0x4
 805a1f6: 2000         	movs	r0, #0x0
;                 pxReturn = NULL;
 805a1f8: 9002         	str	r0, [sp, #0x8]
 805a1fa: e7ff         	b	0x805a1fc <xQueueGetMutexHolder+0x34> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805a1fc: 4803         	ldr	r0, [pc, #0xc]          @ 0x805a20c <xQueueGetMutexHolder+0x44>
 805a1fe: 4780         	blx	r0
;         return pxReturn;
 805a200: 9802         	ldr	r0, [sp, #0x8]
 805a202: b004         	add	sp, #0x10
 805a204: bd80         	pop	{r7, pc}
 805a206: bf00         	nop

0805a208 <$d.11>:
 805a208: 19 c4 05 08  	.word	0x0805c419
 805a20c: 3d c4 05 08  	.word	0x0805c43d
 805a210: 55 cd 05 08  	.word	0x0805cd55

0805a214 <xQueueGetMutexHolderFromISR>:
;     {
 805a214: b580         	push	{r7, lr}
 805a216: 466f         	mov	r7, sp
 805a218: b082         	sub	sp, #0x8
 805a21a: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xSemaphore );
 805a21c: 9801         	ldr	r0, [sp, #0x4]
 805a21e: b920         	cbnz	r0, 0x805a22a <xQueueGetMutexHolderFromISR+0x16> @ imm = #0x8
 805a220: e7ff         	b	0x805a222 <xQueueGetMutexHolderFromISR+0xe> @ imm = #-0x2
 805a222: 4809         	ldr	r0, [pc, #0x24]         @ 0x805a248 <xQueueGetMutexHolderFromISR+0x34>
 805a224: 4780         	blx	r0
 805a226: e7ff         	b	0x805a228 <xQueueGetMutexHolderFromISR+0x14> @ imm = #-0x2
 805a228: e7fe         	b	0x805a228 <xQueueGetMutexHolderFromISR+0x14> @ imm = #-0x4
;         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 805a22a: 9801         	ldr	r0, [sp, #0x4]
 805a22c: 6800         	ldr	r0, [r0]
 805a22e: b920         	cbnz	r0, 0x805a23a <xQueueGetMutexHolderFromISR+0x26> @ imm = #0x8
 805a230: e7ff         	b	0x805a232 <xQueueGetMutexHolderFromISR+0x1e> @ imm = #-0x2
;             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 805a232: 9801         	ldr	r0, [sp, #0x4]
 805a234: 6880         	ldr	r0, [r0, #0x8]
 805a236: 9000         	str	r0, [sp]
;         }
 805a238: e002         	b	0x805a240 <xQueueGetMutexHolderFromISR+0x2c> @ imm = #0x4
 805a23a: 2000         	movs	r0, #0x0
;             pxReturn = NULL;
 805a23c: 9000         	str	r0, [sp]
 805a23e: e7ff         	b	0x805a240 <xQueueGetMutexHolderFromISR+0x2c> @ imm = #-0x2
;         return pxReturn;
 805a240: 9800         	ldr	r0, [sp]
 805a242: b002         	add	sp, #0x8
 805a244: bd80         	pop	{r7, pc}
 805a246: bf00         	nop

0805a248 <$d.13>:
 805a248: 55 cd 05 08  	.word	0x0805cd55

0805a24c <xQueueGiveMutexRecursive>:
;     {
 805a24c: b580         	push	{r7, lr}
 805a24e: 466f         	mov	r7, sp
 805a250: b084         	sub	sp, #0x10
 805a252: 9003         	str	r0, [sp, #0xc]
;         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 805a254: 9803         	ldr	r0, [sp, #0xc]
 805a256: 9001         	str	r0, [sp, #0x4]
;         configASSERT( pxMutex );
 805a258: 9801         	ldr	r0, [sp, #0x4]
 805a25a: b920         	cbnz	r0, 0x805a266 <xQueueGiveMutexRecursive+0x1a> @ imm = #0x8
 805a25c: e7ff         	b	0x805a25e <xQueueGiveMutexRecursive+0x12> @ imm = #-0x2
 805a25e: 4816         	ldr	r0, [pc, #0x58]         @ 0x805a2b8 <xQueueGiveMutexRecursive+0x6c>
 805a260: 4780         	blx	r0
 805a262: e7ff         	b	0x805a264 <xQueueGiveMutexRecursive+0x18> @ imm = #-0x2
 805a264: e7fe         	b	0x805a264 <xQueueGiveMutexRecursive+0x18> @ imm = #-0x4
;         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 805a266: 9801         	ldr	r0, [sp, #0x4]
 805a268: 6880         	ldr	r0, [r0, #0x8]
 805a26a: 9000         	str	r0, [sp]
 805a26c: 4810         	ldr	r0, [pc, #0x40]         @ 0x805a2b0 <xQueueGiveMutexRecursive+0x64>
 805a26e: 4780         	blx	r0
 805a270: 4601         	mov	r1, r0
 805a272: 9800         	ldr	r0, [sp]
 805a274: 4288         	cmp	r0, r1
 805a276: d114         	bne	0x805a2a2 <xQueueGiveMutexRecursive+0x56> @ imm = #0x28
 805a278: e7ff         	b	0x805a27a <xQueueGiveMutexRecursive+0x2e> @ imm = #-0x2
;             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 805a27a: 9901         	ldr	r1, [sp, #0x4]
 805a27c: 68c8         	ldr	r0, [r1, #0xc]
 805a27e: 3801         	subs	r0, #0x1
 805a280: 60c8         	str	r0, [r1, #0xc]
;             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 805a282: 9801         	ldr	r0, [sp, #0x4]
 805a284: 68c0         	ldr	r0, [r0, #0xc]
 805a286: b940         	cbnz	r0, 0x805a29a <xQueueGiveMutexRecursive+0x4e> @ imm = #0x10
 805a288: e7ff         	b	0x805a28a <xQueueGiveMutexRecursive+0x3e> @ imm = #-0x2
;                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 805a28a: 9801         	ldr	r0, [sp, #0x4]
 805a28c: f8df c024    	ldr.w	r12, [pc, #0x24]        @ 0x805a2b4 <xQueueGiveMutexRecursive+0x68>
 805a290: 2300         	movs	r3, #0x0
 805a292: 4619         	mov	r1, r3
 805a294: 461a         	mov	r2, r3
 805a296: 47e0         	blx	r12
;             }
 805a298: e000         	b	0x805a29c <xQueueGiveMutexRecursive+0x50> @ imm = #0x0
 805a29a: e7ff         	b	0x805a29c <xQueueGiveMutexRecursive+0x50> @ imm = #-0x2
 805a29c: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805a29e: 9002         	str	r0, [sp, #0x8]
;         }
 805a2a0: e002         	b	0x805a2a8 <xQueueGiveMutexRecursive+0x5c> @ imm = #0x4
 805a2a2: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805a2a4: 9002         	str	r0, [sp, #0x8]
 805a2a6: e7ff         	b	0x805a2a8 <xQueueGiveMutexRecursive+0x5c> @ imm = #-0x2
;         return xReturn;
 805a2a8: 9802         	ldr	r0, [sp, #0x8]
 805a2aa: b004         	add	sp, #0x10
 805a2ac: bd80         	pop	{r7, pc}
 805a2ae: bf00         	nop

0805a2b0 <$d.15>:
 805a2b0: 79 74 05 08  	.word	0x08057479
 805a2b4: bd a2 05 08  	.word	0x0805a2bd
 805a2b8: 55 cd 05 08  	.word	0x0805cd55

0805a2bc <xQueueGenericSend>:
; {
 805a2bc: b580         	push	{r7, lr}
 805a2be: 466f         	mov	r7, sp
 805a2c0: b08e         	sub	sp, #0x38
 805a2c2: 900c         	str	r0, [sp, #0x30]
 805a2c4: 910b         	str	r1, [sp, #0x2c]
 805a2c6: 920a         	str	r2, [sp, #0x28]
 805a2c8: 9309         	str	r3, [sp, #0x24]
 805a2ca: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 805a2cc: 9008         	str	r0, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805a2ce: 980c         	ldr	r0, [sp, #0x30]
 805a2d0: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxQueue );
 805a2d2: 9804         	ldr	r0, [sp, #0x10]
 805a2d4: b920         	cbnz	r0, 0x805a2e0 <xQueueGenericSend+0x24> @ imm = #0x8
 805a2d6: e7ff         	b	0x805a2d8 <xQueueGenericSend+0x1c> @ imm = #-0x2
 805a2d8: 4882         	ldr	r0, [pc, #0x208]        @ 0x805a4e4 <xQueueGenericSend+0x228>
 805a2da: 4780         	blx	r0
 805a2dc: e7ff         	b	0x805a2de <xQueueGenericSend+0x22> @ imm = #-0x2
 805a2de: e7fe         	b	0x805a2de <xQueueGenericSend+0x22> @ imm = #-0x4
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a2e0: 990b         	ldr	r1, [sp, #0x2c]
 805a2e2: 2000         	movs	r0, #0x0
 805a2e4: 9003         	str	r0, [sp, #0xc]
 805a2e6: b939         	cbnz	r1, 0x805a2f8 <xQueueGenericSend+0x3c> @ imm = #0xe
 805a2e8: e7ff         	b	0x805a2ea <xQueueGenericSend+0x2e> @ imm = #-0x2
 805a2ea: 9804         	ldr	r0, [sp, #0x10]
 805a2ec: 6c00         	ldr	r0, [r0, #0x40]
 805a2ee: 2800         	cmp	r0, #0x0
 805a2f0: bf18         	it	ne
 805a2f2: 2001         	movne	r0, #0x1
 805a2f4: 9003         	str	r0, [sp, #0xc]
 805a2f6: e7ff         	b	0x805a2f8 <xQueueGenericSend+0x3c> @ imm = #-0x2
 805a2f8: 9803         	ldr	r0, [sp, #0xc]
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a2fa: 07c0         	lsls	r0, r0, #0x1f
 805a2fc: b120         	cbz	r0, 0x805a308 <xQueueGenericSend+0x4c> @ imm = #0x8
 805a2fe: e7ff         	b	0x805a300 <xQueueGenericSend+0x44> @ imm = #-0x2
 805a300: 4877         	ldr	r0, [pc, #0x1dc]        @ 0x805a4e0 <xQueueGenericSend+0x224>
 805a302: 4780         	blx	r0
 805a304: e7ff         	b	0x805a306 <xQueueGenericSend+0x4a> @ imm = #-0x2
 805a306: e7fe         	b	0x805a306 <xQueueGenericSend+0x4a> @ imm = #-0x4
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805a308: 9909         	ldr	r1, [sp, #0x24]
 805a30a: 2000         	movs	r0, #0x0
 805a30c: 2902         	cmp	r1, #0x2
 805a30e: 9002         	str	r0, [sp, #0x8]
 805a310: d107         	bne	0x805a322 <xQueueGenericSend+0x66> @ imm = #0xe
 805a312: e7ff         	b	0x805a314 <xQueueGenericSend+0x58> @ imm = #-0x2
 805a314: 9804         	ldr	r0, [sp, #0x10]
 805a316: 6bc0         	ldr	r0, [r0, #0x3c]
 805a318: 3801         	subs	r0, #0x1
 805a31a: bf18         	it	ne
 805a31c: 2001         	movne	r0, #0x1
 805a31e: 9002         	str	r0, [sp, #0x8]
 805a320: e7ff         	b	0x805a322 <xQueueGenericSend+0x66> @ imm = #-0x2
 805a322: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805a324: 07c0         	lsls	r0, r0, #0x1f
 805a326: b120         	cbz	r0, 0x805a332 <xQueueGenericSend+0x76> @ imm = #0x8
 805a328: e7ff         	b	0x805a32a <xQueueGenericSend+0x6e> @ imm = #-0x2
 805a32a: 486c         	ldr	r0, [pc, #0x1b0]        @ 0x805a4dc <xQueueGenericSend+0x220>
 805a32c: 4780         	blx	r0
 805a32e: e7ff         	b	0x805a330 <xQueueGenericSend+0x74> @ imm = #-0x2
 805a330: e7fe         	b	0x805a330 <xQueueGenericSend+0x74> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a332: 4852         	ldr	r0, [pc, #0x148]        @ 0x805a47c <xQueueGenericSend+0x1c0>
 805a334: 4780         	blx	r0
 805a336: 4601         	mov	r1, r0
 805a338: 2000         	movs	r0, #0x0
 805a33a: 9001         	str	r0, [sp, #0x4]
 805a33c: b931         	cbnz	r1, 0x805a34c <xQueueGenericSend+0x90> @ imm = #0xc
 805a33e: e7ff         	b	0x805a340 <xQueueGenericSend+0x84> @ imm = #-0x2
 805a340: 980a         	ldr	r0, [sp, #0x28]
 805a342: 2800         	cmp	r0, #0x0
 805a344: bf18         	it	ne
 805a346: 2001         	movne	r0, #0x1
 805a348: 9001         	str	r0, [sp, #0x4]
 805a34a: e7ff         	b	0x805a34c <xQueueGenericSend+0x90> @ imm = #-0x2
 805a34c: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a34e: 07c0         	lsls	r0, r0, #0x1f
 805a350: b120         	cbz	r0, 0x805a35c <xQueueGenericSend+0xa0> @ imm = #0x8
 805a352: e7ff         	b	0x805a354 <xQueueGenericSend+0x98> @ imm = #-0x2
 805a354: 4860         	ldr	r0, [pc, #0x180]        @ 0x805a4d8 <xQueueGenericSend+0x21c>
 805a356: 4780         	blx	r0
 805a358: e7ff         	b	0x805a35a <xQueueGenericSend+0x9e> @ imm = #-0x2
 805a35a: e7fe         	b	0x805a35a <xQueueGenericSend+0x9e> @ imm = #-0x4
;     for( ; ; )
 805a35c: e7ff         	b	0x805a35e <xQueueGenericSend+0xa2> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805a35e: 4848         	ldr	r0, [pc, #0x120]        @ 0x805a480 <xQueueGenericSend+0x1c4>
 805a360: 4780         	blx	r0
;             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 805a362: 9804         	ldr	r0, [sp, #0x10]
 805a364: 6b80         	ldr	r0, [r0, #0x38]
 805a366: 9904         	ldr	r1, [sp, #0x10]
 805a368: 6bc9         	ldr	r1, [r1, #0x3c]
 805a36a: 4288         	cmp	r0, r1
 805a36c: d304         	blo	0x805a378 <xQueueGenericSend+0xbc> @ imm = #0x8
 805a36e: e7ff         	b	0x805a370 <xQueueGenericSend+0xb4> @ imm = #-0x2
 805a370: 9809         	ldr	r0, [sp, #0x24]
 805a372: 2802         	cmp	r0, #0x2
 805a374: d122         	bne	0x805a3bc <xQueueGenericSend+0x100> @ imm = #0x44
 805a376: e7ff         	b	0x805a378 <xQueueGenericSend+0xbc> @ imm = #-0x2
;                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 805a378: 9804         	ldr	r0, [sp, #0x10]
 805a37a: 990b         	ldr	r1, [sp, #0x2c]
 805a37c: 9a09         	ldr	r2, [sp, #0x24]
 805a37e: 4b51         	ldr	r3, [pc, #0x144]        @ 0x805a4c4 <xQueueGenericSend+0x208>
 805a380: 4798         	blx	r3
 805a382: 9007         	str	r0, [sp, #0x1c]
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805a384: 9804         	ldr	r0, [sp, #0x10]
 805a386: 6a40         	ldr	r0, [r0, #0x24]
 805a388: b158         	cbz	r0, 0x805a3a2 <xQueueGenericSend+0xe6> @ imm = #0x16
 805a38a: e7ff         	b	0x805a38c <xQueueGenericSend+0xd0> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805a38c: 9804         	ldr	r0, [sp, #0x10]
 805a38e: 3024         	adds	r0, #0x24
 805a390: 494e         	ldr	r1, [pc, #0x138]        @ 0x805a4cc <xQueueGenericSend+0x210>
 805a392: 4788         	blx	r1
 805a394: b118         	cbz	r0, 0x805a39e <xQueueGenericSend+0xe2> @ imm = #0x6
 805a396: e7ff         	b	0x805a398 <xQueueGenericSend+0xdc> @ imm = #-0x2
;                             queueYIELD_IF_USING_PREEMPTION();
 805a398: 484d         	ldr	r0, [pc, #0x134]        @ 0x805a4d0 <xQueueGenericSend+0x214>
 805a39a: 4780         	blx	r0
;                         }
 805a39c: e000         	b	0x805a3a0 <xQueueGenericSend+0xe4> @ imm = #0x0
 805a39e: e7ff         	b	0x805a3a0 <xQueueGenericSend+0xe4> @ imm = #-0x2
;                     }
 805a3a0: e007         	b	0x805a3b2 <xQueueGenericSend+0xf6> @ imm = #0xe
;                     else if( xYieldRequired != pdFALSE )
 805a3a2: 9807         	ldr	r0, [sp, #0x1c]
 805a3a4: b118         	cbz	r0, 0x805a3ae <xQueueGenericSend+0xf2> @ imm = #0x6
 805a3a6: e7ff         	b	0x805a3a8 <xQueueGenericSend+0xec> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805a3a8: 4847         	ldr	r0, [pc, #0x11c]        @ 0x805a4c8 <xQueueGenericSend+0x20c>
 805a3aa: 4780         	blx	r0
;                     }
 805a3ac: e000         	b	0x805a3b0 <xQueueGenericSend+0xf4> @ imm = #0x0
 805a3ae: e7ff         	b	0x805a3b0 <xQueueGenericSend+0xf4> @ imm = #-0x2
 805a3b0: e7ff         	b	0x805a3b2 <xQueueGenericSend+0xf6> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805a3b2: 4848         	ldr	r0, [pc, #0x120]        @ 0x805a4d4 <xQueueGenericSend+0x218>
 805a3b4: 4780         	blx	r0
 805a3b6: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805a3b8: 900d         	str	r0, [sp, #0x34]
 805a3ba: e05c         	b	0x805a476 <xQueueGenericSend+0x1ba> @ imm = #0xb8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805a3bc: 980a         	ldr	r0, [sp, #0x28]
 805a3be: b928         	cbnz	r0, 0x805a3cc <xQueueGenericSend+0x110> @ imm = #0xa
 805a3c0: e7ff         	b	0x805a3c2 <xQueueGenericSend+0x106> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805a3c2: 483f         	ldr	r0, [pc, #0xfc]         @ 0x805a4c0 <xQueueGenericSend+0x204>
 805a3c4: 4780         	blx	r0
 805a3c6: 2000         	movs	r0, #0x0
;                     return errQUEUE_FULL;
 805a3c8: 900d         	str	r0, [sp, #0x34]
 805a3ca: e054         	b	0x805a476 <xQueueGenericSend+0x1ba> @ imm = #0xa8
;                 else if( xEntryTimeSet == pdFALSE )
 805a3cc: 9808         	ldr	r0, [sp, #0x20]
 805a3ce: b930         	cbnz	r0, 0x805a3de <xQueueGenericSend+0x122> @ imm = #0xc
 805a3d0: e7ff         	b	0x805a3d2 <xQueueGenericSend+0x116> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805a3d2: 492c         	ldr	r1, [pc, #0xb0]         @ 0x805a484 <xQueueGenericSend+0x1c8>
 805a3d4: a805         	add	r0, sp, #0x14
 805a3d6: 4788         	blx	r1
 805a3d8: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805a3da: 9008         	str	r0, [sp, #0x20]
;                 }
 805a3dc: e000         	b	0x805a3e0 <xQueueGenericSend+0x124> @ imm = #0x0
 805a3de: e7ff         	b	0x805a3e0 <xQueueGenericSend+0x124> @ imm = #-0x2
 805a3e0: e7ff         	b	0x805a3e2 <xQueueGenericSend+0x126> @ imm = #-0x2
 805a3e2: e7ff         	b	0x805a3e4 <xQueueGenericSend+0x128> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805a3e4: 4828         	ldr	r0, [pc, #0xa0]         @ 0x805a488 <xQueueGenericSend+0x1cc>
 805a3e6: 4780         	blx	r0
;         vTaskSuspendAll();
 805a3e8: 4828         	ldr	r0, [pc, #0xa0]         @ 0x805a48c <xQueueGenericSend+0x1d0>
 805a3ea: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805a3ec: 4828         	ldr	r0, [pc, #0xa0]         @ 0x805a490 <xQueueGenericSend+0x1d4>
 805a3ee: 4780         	blx	r0
 805a3f0: 9804         	ldr	r0, [sp, #0x10]
 805a3f2: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805a3f6: 3001         	adds	r0, #0x1
 805a3f8: b928         	cbnz	r0, 0x805a406 <xQueueGenericSend+0x14a> @ imm = #0xa
 805a3fa: e7ff         	b	0x805a3fc <xQueueGenericSend+0x140> @ imm = #-0x2
 805a3fc: 9904         	ldr	r1, [sp, #0x10]
 805a3fe: 2000         	movs	r0, #0x0
 805a400: f881 0044    	strb.w	r0, [r1, #0x44]
 805a404: e7ff         	b	0x805a406 <xQueueGenericSend+0x14a> @ imm = #-0x2
 805a406: 9804         	ldr	r0, [sp, #0x10]
 805a408: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805a40c: 3001         	adds	r0, #0x1
 805a40e: b928         	cbnz	r0, 0x805a41c <xQueueGenericSend+0x160> @ imm = #0xa
 805a410: e7ff         	b	0x805a412 <xQueueGenericSend+0x156> @ imm = #-0x2
 805a412: 9904         	ldr	r1, [sp, #0x10]
 805a414: 2000         	movs	r0, #0x0
 805a416: f881 0045    	strb.w	r0, [r1, #0x45]
 805a41a: e7ff         	b	0x805a41c <xQueueGenericSend+0x160> @ imm = #-0x2
 805a41c: 481d         	ldr	r0, [pc, #0x74]         @ 0x805a494 <xQueueGenericSend+0x1d8>
 805a41e: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805a420: 4a1d         	ldr	r2, [pc, #0x74]         @ 0x805a498 <xQueueGenericSend+0x1dc>
 805a422: a805         	add	r0, sp, #0x14
 805a424: a90a         	add	r1, sp, #0x28
 805a426: 4790         	blx	r2
 805a428: b9e0         	cbnz	r0, 0x805a464 <xQueueGenericSend+0x1a8> @ imm = #0x38
 805a42a: e7ff         	b	0x805a42c <xQueueGenericSend+0x170> @ imm = #-0x2
;             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 805a42c: 9804         	ldr	r0, [sp, #0x10]
 805a42e: 491d         	ldr	r1, [pc, #0x74]         @ 0x805a4a4 <xQueueGenericSend+0x1e8>
 805a430: 4788         	blx	r1
 805a432: b180         	cbz	r0, 0x805a456 <xQueueGenericSend+0x19a> @ imm = #0x20
 805a434: e7ff         	b	0x805a436 <xQueueGenericSend+0x17a> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 805a436: 9804         	ldr	r0, [sp, #0x10]
 805a438: 3010         	adds	r0, #0x10
 805a43a: 990a         	ldr	r1, [sp, #0x28]
 805a43c: 4a1c         	ldr	r2, [pc, #0x70]         @ 0x805a4b0 <xQueueGenericSend+0x1f4>
 805a43e: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805a440: 9804         	ldr	r0, [sp, #0x10]
 805a442: 491c         	ldr	r1, [pc, #0x70]         @ 0x805a4b4 <xQueueGenericSend+0x1f8>
 805a444: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805a446: 481c         	ldr	r0, [pc, #0x70]         @ 0x805a4b8 <xQueueGenericSend+0x1fc>
 805a448: 4780         	blx	r0
 805a44a: b918         	cbnz	r0, 0x805a454 <xQueueGenericSend+0x198> @ imm = #0x6
 805a44c: e7ff         	b	0x805a44e <xQueueGenericSend+0x192> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805a44e: 481b         	ldr	r0, [pc, #0x6c]         @ 0x805a4bc <xQueueGenericSend+0x200>
 805a450: 4780         	blx	r0
;                 }
 805a452: e7ff         	b	0x805a454 <xQueueGenericSend+0x198> @ imm = #-0x2
;             }
 805a454: e005         	b	0x805a462 <xQueueGenericSend+0x1a6> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805a456: 9804         	ldr	r0, [sp, #0x10]
 805a458: 4913         	ldr	r1, [pc, #0x4c]         @ 0x805a4a8 <xQueueGenericSend+0x1ec>
 805a45a: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805a45c: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805a4ac <xQueueGenericSend+0x1f0>
 805a45e: 4780         	blx	r0
 805a460: e7ff         	b	0x805a462 <xQueueGenericSend+0x1a6> @ imm = #-0x2
;         }
 805a462: e007         	b	0x805a474 <xQueueGenericSend+0x1b8> @ imm = #0xe
;             prvUnlockQueue( pxQueue );
 805a464: 9804         	ldr	r0, [sp, #0x10]
 805a466: 490d         	ldr	r1, [pc, #0x34]         @ 0x805a49c <xQueueGenericSend+0x1e0>
 805a468: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805a46a: 480d         	ldr	r0, [pc, #0x34]         @ 0x805a4a0 <xQueueGenericSend+0x1e4>
 805a46c: 4780         	blx	r0
 805a46e: 2000         	movs	r0, #0x0
;             return errQUEUE_FULL;
 805a470: 900d         	str	r0, [sp, #0x34]
 805a472: e000         	b	0x805a476 <xQueueGenericSend+0x1ba> @ imm = #0x0
;     for( ; ; )
 805a474: e773         	b	0x805a35e <xQueueGenericSend+0xa2> @ imm = #-0x11a
; }
 805a476: 980d         	ldr	r0, [sp, #0x34]
 805a478: b00e         	add	sp, #0x38
 805a47a: bd80         	pop	{r7, pc}

0805a47c <$d.17>:
 805a47c: 8d 74 05 08  	.word	0x0805748d
 805a480: 19 c4 05 08  	.word	0x0805c419
 805a484: 5d 71 05 08  	.word	0x0805715d
 805a488: 3d c4 05 08  	.word	0x0805c43d
 805a48c: 59 58 05 08  	.word	0x08055859
 805a490: 19 c4 05 08  	.word	0x0805c419
 805a494: 3d c4 05 08  	.word	0x0805c43d
 805a498: 81 71 05 08  	.word	0x08057181
 805a49c: 11 a9 05 08  	.word	0x0805a911
 805a4a0: 7d 59 05 08  	.word	0x0805597d
 805a4a4: d9 a8 05 08  	.word	0x0805a8d9
 805a4a8: 11 a9 05 08  	.word	0x0805a911
 805a4ac: 7d 59 05 08  	.word	0x0805597d
 805a4b0: 2d 6c 05 08  	.word	0x08056c2d
 805a4b4: 11 a9 05 08  	.word	0x0805a911
 805a4b8: 7d 59 05 08  	.word	0x0805597d
 805a4bc: ff c3 05 08  	.word	0x0805c3ff
 805a4c0: 3d c4 05 08  	.word	0x0805c43d
 805a4c4: fd a7 05 08  	.word	0x0805a7fd
 805a4c8: ff c3 05 08  	.word	0x0805c3ff
 805a4cc: 99 6d 05 08  	.word	0x08056d99
 805a4d0: ff c3 05 08  	.word	0x0805c3ff
 805a4d4: 3d c4 05 08  	.word	0x0805c43d
 805a4d8: 55 cd 05 08  	.word	0x0805cd55
 805a4dc: 55 cd 05 08  	.word	0x0805cd55
 805a4e0: 55 cd 05 08  	.word	0x0805cd55
 805a4e4: 55 cd 05 08  	.word	0x0805cd55

0805a4e8 <xQueueTakeMutexRecursive>:
;     {
 805a4e8: b580         	push	{r7, lr}
 805a4ea: 466f         	mov	r7, sp
 805a4ec: b086         	sub	sp, #0x18
 805a4ee: 9005         	str	r0, [sp, #0x14]
 805a4f0: 9104         	str	r1, [sp, #0x10]
;         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 805a4f2: 9805         	ldr	r0, [sp, #0x14]
 805a4f4: 9002         	str	r0, [sp, #0x8]
;         configASSERT( pxMutex );
 805a4f6: 9802         	ldr	r0, [sp, #0x8]
 805a4f8: b920         	cbnz	r0, 0x805a504 <xQueueTakeMutexRecursive+0x1c> @ imm = #0x8
 805a4fa: e7ff         	b	0x805a4fc <xQueueTakeMutexRecursive+0x14> @ imm = #-0x2
 805a4fc: 4815         	ldr	r0, [pc, #0x54]         @ 0x805a554 <xQueueTakeMutexRecursive+0x6c>
 805a4fe: 4780         	blx	r0
 805a500: e7ff         	b	0x805a502 <xQueueTakeMutexRecursive+0x1a> @ imm = #-0x2
 805a502: e7fe         	b	0x805a502 <xQueueTakeMutexRecursive+0x1a> @ imm = #-0x4
;         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 805a504: 9802         	ldr	r0, [sp, #0x8]
 805a506: 6880         	ldr	r0, [r0, #0x8]
 805a508: 9001         	str	r0, [sp, #0x4]
 805a50a: 4810         	ldr	r0, [pc, #0x40]         @ 0x805a54c <xQueueTakeMutexRecursive+0x64>
 805a50c: 4780         	blx	r0
 805a50e: 4601         	mov	r1, r0
 805a510: 9801         	ldr	r0, [sp, #0x4]
 805a512: 4288         	cmp	r0, r1
 805a514: d107         	bne	0x805a526 <xQueueTakeMutexRecursive+0x3e> @ imm = #0xe
 805a516: e7ff         	b	0x805a518 <xQueueTakeMutexRecursive+0x30> @ imm = #-0x2
;             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 805a518: 9902         	ldr	r1, [sp, #0x8]
 805a51a: 68c8         	ldr	r0, [r1, #0xc]
 805a51c: 3001         	adds	r0, #0x1
 805a51e: 60c8         	str	r0, [r1, #0xc]
 805a520: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805a522: 9003         	str	r0, [sp, #0xc]
;         }
 805a524: e00e         	b	0x805a544 <xQueueTakeMutexRecursive+0x5c> @ imm = #0x1c
;             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 805a526: 9802         	ldr	r0, [sp, #0x8]
 805a528: 9904         	ldr	r1, [sp, #0x10]
 805a52a: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805a550 <xQueueTakeMutexRecursive+0x68>
 805a52c: 4790         	blx	r2
 805a52e: 9003         	str	r0, [sp, #0xc]
;             if( xReturn != pdFAIL )
 805a530: 9803         	ldr	r0, [sp, #0xc]
 805a532: b128         	cbz	r0, 0x805a540 <xQueueTakeMutexRecursive+0x58> @ imm = #0xa
 805a534: e7ff         	b	0x805a536 <xQueueTakeMutexRecursive+0x4e> @ imm = #-0x2
;                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 805a536: 9902         	ldr	r1, [sp, #0x8]
 805a538: 68c8         	ldr	r0, [r1, #0xc]
 805a53a: 3001         	adds	r0, #0x1
 805a53c: 60c8         	str	r0, [r1, #0xc]
;             }
 805a53e: e000         	b	0x805a542 <xQueueTakeMutexRecursive+0x5a> @ imm = #0x0
 805a540: e7ff         	b	0x805a542 <xQueueTakeMutexRecursive+0x5a> @ imm = #-0x2
 805a542: e7ff         	b	0x805a544 <xQueueTakeMutexRecursive+0x5c> @ imm = #-0x2
;         return xReturn;
 805a544: 9803         	ldr	r0, [sp, #0xc]
 805a546: b006         	add	sp, #0x18
 805a548: bd80         	pop	{r7, pc}
 805a54a: bf00         	nop

0805a54c <$d.19>:
 805a54c: 79 74 05 08  	.word	0x08057479
 805a550: 59 a5 05 08  	.word	0x0805a559
 805a554: 55 cd 05 08  	.word	0x0805cd55

0805a558 <xQueueSemaphoreTake>:
; {
 805a558: b580         	push	{r7, lr}
 805a55a: 466f         	mov	r7, sp
 805a55c: b08c         	sub	sp, #0x30
 805a55e: 900a         	str	r0, [sp, #0x28]
 805a560: 9109         	str	r1, [sp, #0x24]
 805a562: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805a564: 9008         	str	r0, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805a566: 990a         	ldr	r1, [sp, #0x28]
 805a568: 9105         	str	r1, [sp, #0x14]
;         BaseType_t xInheritanceOccurred = pdFALSE;
 805a56a: 9004         	str	r0, [sp, #0x10]
;     configASSERT( ( pxQueue ) );
 805a56c: 9805         	ldr	r0, [sp, #0x14]
 805a56e: b920         	cbnz	r0, 0x805a57a <xQueueSemaphoreTake+0x22> @ imm = #0x8
 805a570: e7ff         	b	0x805a572 <xQueueSemaphoreTake+0x1a> @ imm = #-0x2
 805a572: 488a         	ldr	r0, [pc, #0x228]        @ 0x805a79c <xQueueSemaphoreTake+0x244>
 805a574: 4780         	blx	r0
 805a576: e7ff         	b	0x805a578 <xQueueSemaphoreTake+0x20> @ imm = #-0x2
 805a578: e7fe         	b	0x805a578 <xQueueSemaphoreTake+0x20> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize == 0 );
 805a57a: 9805         	ldr	r0, [sp, #0x14]
 805a57c: 6c00         	ldr	r0, [r0, #0x40]
 805a57e: b120         	cbz	r0, 0x805a58a <xQueueSemaphoreTake+0x32> @ imm = #0x8
 805a580: e7ff         	b	0x805a582 <xQueueSemaphoreTake+0x2a> @ imm = #-0x2
 805a582: 4885         	ldr	r0, [pc, #0x214]        @ 0x805a798 <xQueueSemaphoreTake+0x240>
 805a584: 4780         	blx	r0
 805a586: e7ff         	b	0x805a588 <xQueueSemaphoreTake+0x30> @ imm = #-0x2
 805a588: e7fe         	b	0x805a588 <xQueueSemaphoreTake+0x30> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a58a: 4864         	ldr	r0, [pc, #0x190]        @ 0x805a71c <xQueueSemaphoreTake+0x1c4>
 805a58c: 4780         	blx	r0
 805a58e: 4601         	mov	r1, r0
 805a590: 2000         	movs	r0, #0x0
 805a592: 9001         	str	r0, [sp, #0x4]
 805a594: b931         	cbnz	r1, 0x805a5a4 <xQueueSemaphoreTake+0x4c> @ imm = #0xc
 805a596: e7ff         	b	0x805a598 <xQueueSemaphoreTake+0x40> @ imm = #-0x2
 805a598: 9809         	ldr	r0, [sp, #0x24]
 805a59a: 2800         	cmp	r0, #0x0
 805a59c: bf18         	it	ne
 805a59e: 2001         	movne	r0, #0x1
 805a5a0: 9001         	str	r0, [sp, #0x4]
 805a5a2: e7ff         	b	0x805a5a4 <xQueueSemaphoreTake+0x4c> @ imm = #-0x2
 805a5a4: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a5a6: 07c0         	lsls	r0, r0, #0x1f
 805a5a8: b120         	cbz	r0, 0x805a5b4 <xQueueSemaphoreTake+0x5c> @ imm = #0x8
 805a5aa: e7ff         	b	0x805a5ac <xQueueSemaphoreTake+0x54> @ imm = #-0x2
 805a5ac: 4879         	ldr	r0, [pc, #0x1e4]        @ 0x805a794 <xQueueSemaphoreTake+0x23c>
 805a5ae: 4780         	blx	r0
 805a5b0: e7ff         	b	0x805a5b2 <xQueueSemaphoreTake+0x5a> @ imm = #-0x2
 805a5b2: e7fe         	b	0x805a5b2 <xQueueSemaphoreTake+0x5a> @ imm = #-0x4
;     for( ; ; )
 805a5b4: e7ff         	b	0x805a5b6 <xQueueSemaphoreTake+0x5e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805a5b6: 485a         	ldr	r0, [pc, #0x168]        @ 0x805a720 <xQueueSemaphoreTake+0x1c8>
 805a5b8: 4780         	blx	r0
;             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 805a5ba: 9805         	ldr	r0, [sp, #0x14]
 805a5bc: 6b80         	ldr	r0, [r0, #0x38]
 805a5be: 9003         	str	r0, [sp, #0xc]
;             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 805a5c0: 9803         	ldr	r0, [sp, #0xc]
 805a5c2: b318         	cbz	r0, 0x805a60c <xQueueSemaphoreTake+0xb4> @ imm = #0x46
 805a5c4: e7ff         	b	0x805a5c6 <xQueueSemaphoreTake+0x6e> @ imm = #-0x2
;                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 805a5c6: 9803         	ldr	r0, [sp, #0xc]
 805a5c8: 3801         	subs	r0, #0x1
 805a5ca: 9905         	ldr	r1, [sp, #0x14]
 805a5cc: 6388         	str	r0, [r1, #0x38]
;                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805a5ce: 9805         	ldr	r0, [sp, #0x14]
 805a5d0: 6800         	ldr	r0, [r0]
 805a5d2: b928         	cbnz	r0, 0x805a5e0 <xQueueSemaphoreTake+0x88> @ imm = #0xa
 805a5d4: e7ff         	b	0x805a5d6 <xQueueSemaphoreTake+0x7e> @ imm = #-0x2
;                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 805a5d6: 486b         	ldr	r0, [pc, #0x1ac]        @ 0x805a784 <xQueueSemaphoreTake+0x22c>
 805a5d8: 4780         	blx	r0
 805a5da: 9905         	ldr	r1, [sp, #0x14]
 805a5dc: 6088         	str	r0, [r1, #0x8]
;                     }
 805a5de: e000         	b	0x805a5e2 <xQueueSemaphoreTake+0x8a> @ imm = #0x0
 805a5e0: e7ff         	b	0x805a5e2 <xQueueSemaphoreTake+0x8a> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805a5e2: 9805         	ldr	r0, [sp, #0x14]
 805a5e4: 6900         	ldr	r0, [r0, #0x10]
 805a5e6: b158         	cbz	r0, 0x805a600 <xQueueSemaphoreTake+0xa8> @ imm = #0x16
 805a5e8: e7ff         	b	0x805a5ea <xQueueSemaphoreTake+0x92> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805a5ea: 9805         	ldr	r0, [sp, #0x14]
 805a5ec: 3010         	adds	r0, #0x10
 805a5ee: 4966         	ldr	r1, [pc, #0x198]        @ 0x805a788 <xQueueSemaphoreTake+0x230>
 805a5f0: 4788         	blx	r1
 805a5f2: b118         	cbz	r0, 0x805a5fc <xQueueSemaphoreTake+0xa4> @ imm = #0x6
 805a5f4: e7ff         	b	0x805a5f6 <xQueueSemaphoreTake+0x9e> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805a5f6: 4865         	ldr	r0, [pc, #0x194]        @ 0x805a78c <xQueueSemaphoreTake+0x234>
 805a5f8: 4780         	blx	r0
;                     }
 805a5fa: e000         	b	0x805a5fe <xQueueSemaphoreTake+0xa6> @ imm = #0x0
 805a5fc: e7ff         	b	0x805a5fe <xQueueSemaphoreTake+0xa6> @ imm = #-0x2
;                 }
 805a5fe: e000         	b	0x805a602 <xQueueSemaphoreTake+0xaa> @ imm = #0x0
 805a600: e7ff         	b	0x805a602 <xQueueSemaphoreTake+0xaa> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805a602: 4863         	ldr	r0, [pc, #0x18c]        @ 0x805a790 <xQueueSemaphoreTake+0x238>
 805a604: 4780         	blx	r0
 805a606: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805a608: 900b         	str	r0, [sp, #0x2c]
 805a60a: e084         	b	0x805a716 <xQueueSemaphoreTake+0x1be> @ imm = #0x108
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805a60c: 9809         	ldr	r0, [sp, #0x24]
 805a60e: b928         	cbnz	r0, 0x805a61c <xQueueSemaphoreTake+0xc4> @ imm = #0xa
 805a610: e7ff         	b	0x805a612 <xQueueSemaphoreTake+0xba> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805a612: 485b         	ldr	r0, [pc, #0x16c]        @ 0x805a780 <xQueueSemaphoreTake+0x228>
 805a614: 4780         	blx	r0
 805a616: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805a618: 900b         	str	r0, [sp, #0x2c]
 805a61a: e07c         	b	0x805a716 <xQueueSemaphoreTake+0x1be> @ imm = #0xf8
;                 else if( xEntryTimeSet == pdFALSE )
 805a61c: 9808         	ldr	r0, [sp, #0x20]
 805a61e: b930         	cbnz	r0, 0x805a62e <xQueueSemaphoreTake+0xd6> @ imm = #0xc
 805a620: e7ff         	b	0x805a622 <xQueueSemaphoreTake+0xca> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805a622: 4940         	ldr	r1, [pc, #0x100]        @ 0x805a724 <xQueueSemaphoreTake+0x1cc>
 805a624: a806         	add	r0, sp, #0x18
 805a626: 4788         	blx	r1
 805a628: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805a62a: 9008         	str	r0, [sp, #0x20]
;                 }
 805a62c: e000         	b	0x805a630 <xQueueSemaphoreTake+0xd8> @ imm = #0x0
 805a62e: e7ff         	b	0x805a630 <xQueueSemaphoreTake+0xd8> @ imm = #-0x2
 805a630: e7ff         	b	0x805a632 <xQueueSemaphoreTake+0xda> @ imm = #-0x2
 805a632: e7ff         	b	0x805a634 <xQueueSemaphoreTake+0xdc> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805a634: 483c         	ldr	r0, [pc, #0xf0]         @ 0x805a728 <xQueueSemaphoreTake+0x1d0>
 805a636: 4780         	blx	r0
;         vTaskSuspendAll();
 805a638: 483c         	ldr	r0, [pc, #0xf0]         @ 0x805a72c <xQueueSemaphoreTake+0x1d4>
 805a63a: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805a63c: 483c         	ldr	r0, [pc, #0xf0]         @ 0x805a730 <xQueueSemaphoreTake+0x1d8>
 805a63e: 4780         	blx	r0
 805a640: 9805         	ldr	r0, [sp, #0x14]
 805a642: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805a646: 3001         	adds	r0, #0x1
 805a648: b928         	cbnz	r0, 0x805a656 <xQueueSemaphoreTake+0xfe> @ imm = #0xa
 805a64a: e7ff         	b	0x805a64c <xQueueSemaphoreTake+0xf4> @ imm = #-0x2
 805a64c: 9905         	ldr	r1, [sp, #0x14]
 805a64e: 2000         	movs	r0, #0x0
 805a650: f881 0044    	strb.w	r0, [r1, #0x44]
 805a654: e7ff         	b	0x805a656 <xQueueSemaphoreTake+0xfe> @ imm = #-0x2
 805a656: 9805         	ldr	r0, [sp, #0x14]
 805a658: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805a65c: 3001         	adds	r0, #0x1
 805a65e: b928         	cbnz	r0, 0x805a66c <xQueueSemaphoreTake+0x114> @ imm = #0xa
 805a660: e7ff         	b	0x805a662 <xQueueSemaphoreTake+0x10a> @ imm = #-0x2
 805a662: 9905         	ldr	r1, [sp, #0x14]
 805a664: 2000         	movs	r0, #0x0
 805a666: f881 0045    	strb.w	r0, [r1, #0x45]
 805a66a: e7ff         	b	0x805a66c <xQueueSemaphoreTake+0x114> @ imm = #-0x2
 805a66c: 4831         	ldr	r0, [pc, #0xc4]         @ 0x805a734 <xQueueSemaphoreTake+0x1dc>
 805a66e: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805a670: 4a31         	ldr	r2, [pc, #0xc4]         @ 0x805a738 <xQueueSemaphoreTake+0x1e0>
 805a672: a806         	add	r0, sp, #0x18
 805a674: a909         	add	r1, sp, #0x24
 805a676: 4790         	blx	r2
 805a678: bb60         	cbnz	r0, 0x805a6d4 <xQueueSemaphoreTake+0x17c> @ imm = #0x58
 805a67a: e7ff         	b	0x805a67c <xQueueSemaphoreTake+0x124> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805a67c: 9805         	ldr	r0, [sp, #0x14]
 805a67e: 4936         	ldr	r1, [pc, #0xd8]         @ 0x805a758 <xQueueSemaphoreTake+0x200>
 805a680: 4788         	blx	r1
 805a682: b300         	cbz	r0, 0x805a6c6 <xQueueSemaphoreTake+0x16e> @ imm = #0x40
 805a684: e7ff         	b	0x805a686 <xQueueSemaphoreTake+0x12e> @ imm = #-0x2
;                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805a686: 9805         	ldr	r0, [sp, #0x14]
 805a688: 6800         	ldr	r0, [r0]
 805a68a: b950         	cbnz	r0, 0x805a6a2 <xQueueSemaphoreTake+0x14a> @ imm = #0x14
 805a68c: e7ff         	b	0x805a68e <xQueueSemaphoreTake+0x136> @ imm = #-0x2
;                         taskENTER_CRITICAL();
 805a68e: 4835         	ldr	r0, [pc, #0xd4]         @ 0x805a764 <xQueueSemaphoreTake+0x20c>
 805a690: 4780         	blx	r0
;                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 805a692: 9805         	ldr	r0, [sp, #0x14]
 805a694: 6880         	ldr	r0, [r0, #0x8]
 805a696: 4934         	ldr	r1, [pc, #0xd0]         @ 0x805a768 <xQueueSemaphoreTake+0x210>
 805a698: 4788         	blx	r1
 805a69a: 9004         	str	r0, [sp, #0x10]
;                         taskEXIT_CRITICAL();
 805a69c: 4833         	ldr	r0, [pc, #0xcc]         @ 0x805a76c <xQueueSemaphoreTake+0x214>
 805a69e: 4780         	blx	r0
;                     }
 805a6a0: e000         	b	0x805a6a4 <xQueueSemaphoreTake+0x14c> @ imm = #0x0
 805a6a2: e7ff         	b	0x805a6a4 <xQueueSemaphoreTake+0x14c> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805a6a4: 9805         	ldr	r0, [sp, #0x14]
 805a6a6: 3024         	adds	r0, #0x24
 805a6a8: 9909         	ldr	r1, [sp, #0x24]
 805a6aa: 4a31         	ldr	r2, [pc, #0xc4]         @ 0x805a770 <xQueueSemaphoreTake+0x218>
 805a6ac: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805a6ae: 9805         	ldr	r0, [sp, #0x14]
 805a6b0: 4930         	ldr	r1, [pc, #0xc0]         @ 0x805a774 <xQueueSemaphoreTake+0x21c>
 805a6b2: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805a6b4: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805a778 <xQueueSemaphoreTake+0x220>
 805a6b6: 4780         	blx	r0
 805a6b8: b918         	cbnz	r0, 0x805a6c2 <xQueueSemaphoreTake+0x16a> @ imm = #0x6
 805a6ba: e7ff         	b	0x805a6bc <xQueueSemaphoreTake+0x164> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805a6bc: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805a77c <xQueueSemaphoreTake+0x224>
 805a6be: 4780         	blx	r0
;                 }
 805a6c0: e000         	b	0x805a6c4 <xQueueSemaphoreTake+0x16c> @ imm = #0x0
 805a6c2: e7ff         	b	0x805a6c4 <xQueueSemaphoreTake+0x16c> @ imm = #-0x2
;             }
 805a6c4: e005         	b	0x805a6d2 <xQueueSemaphoreTake+0x17a> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805a6c6: 9805         	ldr	r0, [sp, #0x14]
 805a6c8: 4924         	ldr	r1, [pc, #0x90]         @ 0x805a75c <xQueueSemaphoreTake+0x204>
 805a6ca: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805a6cc: 4824         	ldr	r0, [pc, #0x90]         @ 0x805a760 <xQueueSemaphoreTake+0x208>
 805a6ce: 4780         	blx	r0
 805a6d0: e7ff         	b	0x805a6d2 <xQueueSemaphoreTake+0x17a> @ imm = #-0x2
;         }
 805a6d2: e01f         	b	0x805a714 <xQueueSemaphoreTake+0x1bc> @ imm = #0x3e
;             prvUnlockQueue( pxQueue );
 805a6d4: 9805         	ldr	r0, [sp, #0x14]
 805a6d6: 4919         	ldr	r1, [pc, #0x64]         @ 0x805a73c <xQueueSemaphoreTake+0x1e4>
 805a6d8: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805a6da: 4819         	ldr	r0, [pc, #0x64]         @ 0x805a740 <xQueueSemaphoreTake+0x1e8>
 805a6dc: 4780         	blx	r0
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805a6de: 9805         	ldr	r0, [sp, #0x14]
 805a6e0: 4918         	ldr	r1, [pc, #0x60]         @ 0x805a744 <xQueueSemaphoreTake+0x1ec>
 805a6e2: 4788         	blx	r1
 805a6e4: b1a0         	cbz	r0, 0x805a710 <xQueueSemaphoreTake+0x1b8> @ imm = #0x28
 805a6e6: e7ff         	b	0x805a6e8 <xQueueSemaphoreTake+0x190> @ imm = #-0x2
;                     if( xInheritanceOccurred != pdFALSE )
 805a6e8: 9804         	ldr	r0, [sp, #0x10]
 805a6ea: b170         	cbz	r0, 0x805a70a <xQueueSemaphoreTake+0x1b2> @ imm = #0x1c
 805a6ec: e7ff         	b	0x805a6ee <xQueueSemaphoreTake+0x196> @ imm = #-0x2
;                         taskENTER_CRITICAL();
 805a6ee: 4816         	ldr	r0, [pc, #0x58]         @ 0x805a748 <xQueueSemaphoreTake+0x1f0>
 805a6f0: 4780         	blx	r0
;                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 805a6f2: 9805         	ldr	r0, [sp, #0x14]
 805a6f4: 4915         	ldr	r1, [pc, #0x54]         @ 0x805a74c <xQueueSemaphoreTake+0x1f4>
 805a6f6: 4788         	blx	r1
 805a6f8: 9002         	str	r0, [sp, #0x8]
;                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 805a6fa: 9805         	ldr	r0, [sp, #0x14]
 805a6fc: 6880         	ldr	r0, [r0, #0x8]
 805a6fe: 9902         	ldr	r1, [sp, #0x8]
 805a700: 4a13         	ldr	r2, [pc, #0x4c]         @ 0x805a750 <xQueueSemaphoreTake+0x1f8>
 805a702: 4790         	blx	r2
;                         taskEXIT_CRITICAL();
 805a704: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805a754 <xQueueSemaphoreTake+0x1fc>
 805a706: 4780         	blx	r0
;                     }
 805a708: e7ff         	b	0x805a70a <xQueueSemaphoreTake+0x1b2> @ imm = #-0x2
 805a70a: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805a70c: 900b         	str	r0, [sp, #0x2c]
 805a70e: e002         	b	0x805a716 <xQueueSemaphoreTake+0x1be> @ imm = #0x4
 805a710: e7ff         	b	0x805a712 <xQueueSemaphoreTake+0x1ba> @ imm = #-0x2
 805a712: e7ff         	b	0x805a714 <xQueueSemaphoreTake+0x1bc> @ imm = #-0x2
;     for( ; ; )
 805a714: e74f         	b	0x805a5b6 <xQueueSemaphoreTake+0x5e> @ imm = #-0x162
; }
 805a716: 980b         	ldr	r0, [sp, #0x2c]
 805a718: b00c         	add	sp, #0x30
 805a71a: bd80         	pop	{r7, pc}

0805a71c <$d.21>:
 805a71c: 8d 74 05 08  	.word	0x0805748d
 805a720: 19 c4 05 08  	.word	0x0805c419
 805a724: 5d 71 05 08  	.word	0x0805715d
 805a728: 3d c4 05 08  	.word	0x0805c43d
 805a72c: 59 58 05 08  	.word	0x08055859
 805a730: 19 c4 05 08  	.word	0x0805c419
 805a734: 3d c4 05 08  	.word	0x0805c43d
 805a738: 81 71 05 08  	.word	0x08057181
 805a73c: 11 a9 05 08  	.word	0x0805a911
 805a740: 7d 59 05 08  	.word	0x0805597d
 805a744: ad ae 05 08  	.word	0x0805aead
 805a748: 19 c4 05 08  	.word	0x0805c419
 805a74c: e1 ae 05 08  	.word	0x0805aee1
 805a750: a1 77 05 08  	.word	0x080577a1
 805a754: 3d c4 05 08  	.word	0x0805c43d
 805a758: ad ae 05 08  	.word	0x0805aead
 805a75c: 11 a9 05 08  	.word	0x0805a911
 805a760: 7d 59 05 08  	.word	0x0805597d
 805a764: 19 c4 05 08  	.word	0x0805c419
 805a768: c5 74 05 08  	.word	0x080574c5
 805a76c: 3d c4 05 08  	.word	0x0805c43d
 805a770: 2d 6c 05 08  	.word	0x08056c2d
 805a774: 11 a9 05 08  	.word	0x0805a911
 805a778: 7d 59 05 08  	.word	0x0805597d
 805a77c: ff c3 05 08  	.word	0x0805c3ff
 805a780: 3d c4 05 08  	.word	0x0805c43d
 805a784: 61 79 05 08  	.word	0x08057961
 805a788: 99 6d 05 08  	.word	0x08056d99
 805a78c: ff c3 05 08  	.word	0x0805c3ff
 805a790: 3d c4 05 08  	.word	0x0805c43d
 805a794: 55 cd 05 08  	.word	0x0805cd55
 805a798: 55 cd 05 08  	.word	0x0805cd55
 805a79c: 55 cd 05 08  	.word	0x0805cd55

0805a7a0 <xQueueCreateCountingSemaphore>:
;     {
 805a7a0: b580         	push	{r7, lr}
 805a7a2: 466f         	mov	r7, sp
 805a7a4: b084         	sub	sp, #0x10
 805a7a6: 9003         	str	r0, [sp, #0xc]
 805a7a8: 9102         	str	r1, [sp, #0x8]
 805a7aa: 2000         	movs	r0, #0x0
;         QueueHandle_t xHandle = NULL;
 805a7ac: 9001         	str	r0, [sp, #0x4]
;         if( ( uxMaxCount != 0 ) &&
 805a7ae: 9803         	ldr	r0, [sp, #0xc]
 805a7b0: b1a0         	cbz	r0, 0x805a7dc <xQueueCreateCountingSemaphore+0x3c> @ imm = #0x28
 805a7b2: e7ff         	b	0x805a7b4 <xQueueCreateCountingSemaphore+0x14> @ imm = #-0x2
;             ( uxInitialCount <= uxMaxCount ) )
 805a7b4: 9802         	ldr	r0, [sp, #0x8]
 805a7b6: 9903         	ldr	r1, [sp, #0xc]
;         if( ( uxMaxCount != 0 ) &&
 805a7b8: 4288         	cmp	r0, r1
 805a7ba: d80f         	bhi	0x805a7dc <xQueueCreateCountingSemaphore+0x3c> @ imm = #0x1e
 805a7bc: e7ff         	b	0x805a7be <xQueueCreateCountingSemaphore+0x1e> @ imm = #-0x2
;             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 805a7be: 9803         	ldr	r0, [sp, #0xc]
 805a7c0: 4b0d         	ldr	r3, [pc, #0x34]         @ 0x805a7f8 <xQueueCreateCountingSemaphore+0x58>
 805a7c2: 2100         	movs	r1, #0x0
 805a7c4: 2202         	movs	r2, #0x2
 805a7c6: 4798         	blx	r3
 805a7c8: 9001         	str	r0, [sp, #0x4]
;             if( xHandle != NULL )
 805a7ca: 9801         	ldr	r0, [sp, #0x4]
 805a7cc: b120         	cbz	r0, 0x805a7d8 <xQueueCreateCountingSemaphore+0x38> @ imm = #0x8
 805a7ce: e7ff         	b	0x805a7d0 <xQueueCreateCountingSemaphore+0x30> @ imm = #-0x2
;                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 805a7d0: 9802         	ldr	r0, [sp, #0x8]
 805a7d2: 9901         	ldr	r1, [sp, #0x4]
 805a7d4: 6388         	str	r0, [r1, #0x38]
;             }
 805a7d6: e000         	b	0x805a7da <xQueueCreateCountingSemaphore+0x3a> @ imm = #0x0
 805a7d8: e7ff         	b	0x805a7da <xQueueCreateCountingSemaphore+0x3a> @ imm = #-0x2
;         }
 805a7da: e007         	b	0x805a7ec <xQueueCreateCountingSemaphore+0x4c> @ imm = #0xe
;             configASSERT( xHandle );
 805a7dc: 9801         	ldr	r0, [sp, #0x4]
 805a7de: b920         	cbnz	r0, 0x805a7ea <xQueueCreateCountingSemaphore+0x4a> @ imm = #0x8
 805a7e0: e7ff         	b	0x805a7e2 <xQueueCreateCountingSemaphore+0x42> @ imm = #-0x2
 805a7e2: 4804         	ldr	r0, [pc, #0x10]         @ 0x805a7f4 <xQueueCreateCountingSemaphore+0x54>
 805a7e4: 4780         	blx	r0
 805a7e6: e7ff         	b	0x805a7e8 <xQueueCreateCountingSemaphore+0x48> @ imm = #-0x2
 805a7e8: e7fe         	b	0x805a7e8 <xQueueCreateCountingSemaphore+0x48> @ imm = #-0x4
 805a7ea: e7ff         	b	0x805a7ec <xQueueCreateCountingSemaphore+0x4c> @ imm = #-0x2
;         return xHandle;
 805a7ec: 9801         	ldr	r0, [sp, #0x4]
 805a7ee: b004         	add	sp, #0x10
 805a7f0: bd80         	pop	{r7, pc}
 805a7f2: bf00         	nop

0805a7f4 <$d.23>:
 805a7f4: 55 cd 05 08  	.word	0x0805cd55
 805a7f8: 79 a0 05 08  	.word	0x0805a079

0805a7fc <prvCopyDataToQueue>:
; {
 805a7fc: b580         	push	{r7, lr}
 805a7fe: 466f         	mov	r7, sp
 805a800: b086         	sub	sp, #0x18
 805a802: 9005         	str	r0, [sp, #0x14]
 805a804: 9104         	str	r1, [sp, #0x10]
 805a806: 9203         	str	r2, [sp, #0xc]
 805a808: 2000         	movs	r0, #0x0
;     BaseType_t xReturn = pdFALSE;
 805a80a: 9002         	str	r0, [sp, #0x8]
;     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805a80c: 9805         	ldr	r0, [sp, #0x14]
 805a80e: 6b80         	ldr	r0, [r0, #0x38]
 805a810: 9001         	str	r0, [sp, #0x4]
;     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 805a812: 9805         	ldr	r0, [sp, #0x14]
 805a814: 6c00         	ldr	r0, [r0, #0x40]
 805a816: b978         	cbnz	r0, 0x805a838 <prvCopyDataToQueue+0x3c> @ imm = #0x1e
 805a818: e7ff         	b	0x805a81a <prvCopyDataToQueue+0x1e> @ imm = #-0x2
;             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805a81a: 9805         	ldr	r0, [sp, #0x14]
 805a81c: 6800         	ldr	r0, [r0]
 805a81e: b948         	cbnz	r0, 0x805a834 <prvCopyDataToQueue+0x38> @ imm = #0x12
 805a820: e7ff         	b	0x805a822 <prvCopyDataToQueue+0x26> @ imm = #-0x2
;                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 805a822: 9805         	ldr	r0, [sp, #0x14]
 805a824: 6880         	ldr	r0, [r0, #0x8]
 805a826: 492b         	ldr	r1, [pc, #0xac]         @ 0x805a8d4 <prvCopyDataToQueue+0xd8>
 805a828: 4788         	blx	r1
 805a82a: 9002         	str	r0, [sp, #0x8]
;                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 805a82c: 9905         	ldr	r1, [sp, #0x14]
 805a82e: 2000         	movs	r0, #0x0
 805a830: 6088         	str	r0, [r1, #0x8]
;             }
 805a832: e000         	b	0x805a836 <prvCopyDataToQueue+0x3a> @ imm = #0x0
 805a834: e7ff         	b	0x805a836 <prvCopyDataToQueue+0x3a> @ imm = #-0x2
;     }
 805a836: e041         	b	0x805a8bc <prvCopyDataToQueue+0xc0> @ imm = #0x82
;     else if( xPosition == queueSEND_TO_BACK )
 805a838: 9803         	ldr	r0, [sp, #0xc]
 805a83a: b9b8         	cbnz	r0, 0x805a86c <prvCopyDataToQueue+0x70> @ imm = #0x2e
 805a83c: e7ff         	b	0x805a83e <prvCopyDataToQueue+0x42> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 805a83e: 9a05         	ldr	r2, [sp, #0x14]
 805a840: 9904         	ldr	r1, [sp, #0x10]
 805a842: 6850         	ldr	r0, [r2, #0x4]
 805a844: 6c12         	ldr	r2, [r2, #0x40]
 805a846: 4b22         	ldr	r3, [pc, #0x88]         @ 0x805a8d0 <prvCopyDataToQueue+0xd4>
 805a848: 4798         	blx	r3
;         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 805a84a: 9905         	ldr	r1, [sp, #0x14]
 805a84c: 6848         	ldr	r0, [r1, #0x4]
 805a84e: 6c0a         	ldr	r2, [r1, #0x40]
 805a850: 4410         	add	r0, r2
 805a852: 6048         	str	r0, [r1, #0x4]
;         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 805a854: 9905         	ldr	r1, [sp, #0x14]
 805a856: 6848         	ldr	r0, [r1, #0x4]
 805a858: 6889         	ldr	r1, [r1, #0x8]
 805a85a: 4288         	cmp	r0, r1
 805a85c: d304         	blo	0x805a868 <prvCopyDataToQueue+0x6c> @ imm = #0x8
 805a85e: e7ff         	b	0x805a860 <prvCopyDataToQueue+0x64> @ imm = #-0x2
;             pxQueue->pcWriteTo = pxQueue->pcHead;
 805a860: 9905         	ldr	r1, [sp, #0x14]
 805a862: 6808         	ldr	r0, [r1]
 805a864: 6048         	str	r0, [r1, #0x4]
;         }
 805a866: e000         	b	0x805a86a <prvCopyDataToQueue+0x6e> @ imm = #0x0
 805a868: e7ff         	b	0x805a86a <prvCopyDataToQueue+0x6e> @ imm = #-0x2
;     }
 805a86a: e026         	b	0x805a8ba <prvCopyDataToQueue+0xbe> @ imm = #0x4c
;         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 805a86c: 9a05         	ldr	r2, [sp, #0x14]
 805a86e: 9904         	ldr	r1, [sp, #0x10]
 805a870: 68d0         	ldr	r0, [r2, #0xc]
 805a872: 6c12         	ldr	r2, [r2, #0x40]
 805a874: 4b15         	ldr	r3, [pc, #0x54]         @ 0x805a8cc <prvCopyDataToQueue+0xd0>
 805a876: 4798         	blx	r3
;         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 805a878: 9905         	ldr	r1, [sp, #0x14]
 805a87a: 68c8         	ldr	r0, [r1, #0xc]
 805a87c: 6c0a         	ldr	r2, [r1, #0x40]
 805a87e: 1a80         	subs	r0, r0, r2
 805a880: 60c8         	str	r0, [r1, #0xc]
;         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 805a882: 9805         	ldr	r0, [sp, #0x14]
 805a884: 6801         	ldr	r1, [r0]
 805a886: 68c0         	ldr	r0, [r0, #0xc]
 805a888: 4288         	cmp	r0, r1
 805a88a: d206         	bhs	0x805a89a <prvCopyDataToQueue+0x9e> @ imm = #0xc
 805a88c: e7ff         	b	0x805a88e <prvCopyDataToQueue+0x92> @ imm = #-0x2
;             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 805a88e: 9905         	ldr	r1, [sp, #0x14]
 805a890: 6888         	ldr	r0, [r1, #0x8]
 805a892: 6c0a         	ldr	r2, [r1, #0x40]
 805a894: 1a80         	subs	r0, r0, r2
 805a896: 60c8         	str	r0, [r1, #0xc]
;         }
 805a898: e000         	b	0x805a89c <prvCopyDataToQueue+0xa0> @ imm = #0x0
 805a89a: e7ff         	b	0x805a89c <prvCopyDataToQueue+0xa0> @ imm = #-0x2
;         if( xPosition == queueOVERWRITE )
 805a89c: 9803         	ldr	r0, [sp, #0xc]
 805a89e: 2802         	cmp	r0, #0x2
 805a8a0: d109         	bne	0x805a8b6 <prvCopyDataToQueue+0xba> @ imm = #0x12
 805a8a2: e7ff         	b	0x805a8a4 <prvCopyDataToQueue+0xa8> @ imm = #-0x2
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805a8a4: 9801         	ldr	r0, [sp, #0x4]
 805a8a6: b120         	cbz	r0, 0x805a8b2 <prvCopyDataToQueue+0xb6> @ imm = #0x8
 805a8a8: e7ff         	b	0x805a8aa <prvCopyDataToQueue+0xae> @ imm = #-0x2
;                 --uxMessagesWaiting;
 805a8aa: 9801         	ldr	r0, [sp, #0x4]
 805a8ac: 3801         	subs	r0, #0x1
 805a8ae: 9001         	str	r0, [sp, #0x4]
;             }
 805a8b0: e000         	b	0x805a8b4 <prvCopyDataToQueue+0xb8> @ imm = #0x0
 805a8b2: e7ff         	b	0x805a8b4 <prvCopyDataToQueue+0xb8> @ imm = #-0x2
;         }
 805a8b4: e000         	b	0x805a8b8 <prvCopyDataToQueue+0xbc> @ imm = #0x0
 805a8b6: e7ff         	b	0x805a8b8 <prvCopyDataToQueue+0xbc> @ imm = #-0x2
 805a8b8: e7ff         	b	0x805a8ba <prvCopyDataToQueue+0xbe> @ imm = #-0x2
 805a8ba: e7ff         	b	0x805a8bc <prvCopyDataToQueue+0xc0> @ imm = #-0x2
;     pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 805a8bc: 9801         	ldr	r0, [sp, #0x4]
 805a8be: 3001         	adds	r0, #0x1
 805a8c0: 9905         	ldr	r1, [sp, #0x14]
 805a8c2: 6388         	str	r0, [r1, #0x38]
;     return xReturn;
 805a8c4: 9802         	ldr	r0, [sp, #0x8]
 805a8c6: b006         	add	sp, #0x18
 805a8c8: bd80         	pop	{r7, pc}
 805a8ca: bf00         	nop

0805a8cc <$d.25>:
 805a8cc: e1 ea 05 08  	.word	0x0805eae1
 805a8d0: e1 ea 05 08  	.word	0x0805eae1
 805a8d4: 51 76 05 08  	.word	0x08057651

0805a8d8 <prvIsQueueFull>:
; {
 805a8d8: b580         	push	{r7, lr}
 805a8da: 466f         	mov	r7, sp
 805a8dc: b082         	sub	sp, #0x8
 805a8de: 9001         	str	r0, [sp, #0x4]
;     taskENTER_CRITICAL();
 805a8e0: 4809         	ldr	r0, [pc, #0x24]         @ 0x805a908 <prvIsQueueFull+0x30>
 805a8e2: 4780         	blx	r0
;         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 805a8e4: 9801         	ldr	r0, [sp, #0x4]
 805a8e6: 6b80         	ldr	r0, [r0, #0x38]
 805a8e8: 9901         	ldr	r1, [sp, #0x4]
 805a8ea: 6bc9         	ldr	r1, [r1, #0x3c]
 805a8ec: 4288         	cmp	r0, r1
 805a8ee: d103         	bne	0x805a8f8 <prvIsQueueFull+0x20> @ imm = #0x6
 805a8f0: e7ff         	b	0x805a8f2 <prvIsQueueFull+0x1a> @ imm = #-0x2
 805a8f2: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805a8f4: 9000         	str	r0, [sp]
;         }
 805a8f6: e002         	b	0x805a8fe <prvIsQueueFull+0x26> @ imm = #0x4
 805a8f8: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805a8fa: 9000         	str	r0, [sp]
 805a8fc: e7ff         	b	0x805a8fe <prvIsQueueFull+0x26> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805a8fe: 4803         	ldr	r0, [pc, #0xc]          @ 0x805a90c <prvIsQueueFull+0x34>
 805a900: 4780         	blx	r0
;     return xReturn;
 805a902: 9800         	ldr	r0, [sp]
 805a904: b002         	add	sp, #0x8
 805a906: bd80         	pop	{r7, pc}

0805a908 <$d.27>:
 805a908: 19 c4 05 08  	.word	0x0805c419
 805a90c: 3d c4 05 08  	.word	0x0805c43d

0805a910 <prvUnlockQueue>:
; {
 805a910: b580         	push	{r7, lr}
 805a912: 466f         	mov	r7, sp
 805a914: b082         	sub	sp, #0x8
 805a916: 9001         	str	r0, [sp, #0x4]
;     taskENTER_CRITICAL();
 805a918: 4829         	ldr	r0, [pc, #0xa4]         @ 0x805a9c0 <prvUnlockQueue+0xb0>
 805a91a: 4780         	blx	r0
;         int8_t cTxLock = pxQueue->cTxLock;
 805a91c: 9801         	ldr	r0, [sp, #0x4]
 805a91e: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805a922: f807 0c05    	strb	r0, [r7, #-5]
;         while( cTxLock > queueLOCKED_UNMODIFIED )
 805a926: e7ff         	b	0x805a928 <prvUnlockQueue+0x18> @ imm = #-0x2
 805a928: f917 0c05    	ldrsb	r0, [r7, #-5]
 805a92c: 2801         	cmp	r0, #0x1
 805a92e: db16         	blt	0x805a95e <prvUnlockQueue+0x4e> @ imm = #0x2c
 805a930: e7ff         	b	0x805a932 <prvUnlockQueue+0x22> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805a932: 9801         	ldr	r0, [sp, #0x4]
 805a934: 6a40         	ldr	r0, [r0, #0x24]
 805a936: b158         	cbz	r0, 0x805a950 <prvUnlockQueue+0x40> @ imm = #0x16
 805a938: e7ff         	b	0x805a93a <prvUnlockQueue+0x2a> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805a93a: 9801         	ldr	r0, [sp, #0x4]
 805a93c: 3024         	adds	r0, #0x24
 805a93e: 4926         	ldr	r1, [pc, #0x98]         @ 0x805a9d8 <prvUnlockQueue+0xc8>
 805a940: 4788         	blx	r1
 805a942: b118         	cbz	r0, 0x805a94c <prvUnlockQueue+0x3c> @ imm = #0x6
 805a944: e7ff         	b	0x805a946 <prvUnlockQueue+0x36> @ imm = #-0x2
;                         vTaskMissedYield();
 805a946: 4825         	ldr	r0, [pc, #0x94]         @ 0x805a9dc <prvUnlockQueue+0xcc>
 805a948: 4780         	blx	r0
;                     }
 805a94a: e000         	b	0x805a94e <prvUnlockQueue+0x3e> @ imm = #0x0
 805a94c: e7ff         	b	0x805a94e <prvUnlockQueue+0x3e> @ imm = #-0x2
;                 }
 805a94e: e000         	b	0x805a952 <prvUnlockQueue+0x42> @ imm = #0x0
;                     break;
 805a950: e005         	b	0x805a95e <prvUnlockQueue+0x4e> @ imm = #0xa
;             --cTxLock;
 805a952: f817 0c05    	ldrb	r0, [r7, #-5]
 805a956: 3801         	subs	r0, #0x1
 805a958: f807 0c05    	strb	r0, [r7, #-5]
;         while( cTxLock > queueLOCKED_UNMODIFIED )
 805a95c: e7e4         	b	0x805a928 <prvUnlockQueue+0x18> @ imm = #-0x38
;         pxQueue->cTxLock = queueUNLOCKED;
 805a95e: 9901         	ldr	r1, [sp, #0x4]
 805a960: 20ff         	movs	r0, #0xff
 805a962: f881 0045    	strb.w	r0, [r1, #0x45]
;     taskEXIT_CRITICAL();
 805a966: 4817         	ldr	r0, [pc, #0x5c]         @ 0x805a9c4 <prvUnlockQueue+0xb4>
 805a968: 4780         	blx	r0
;     taskENTER_CRITICAL();
 805a96a: 4817         	ldr	r0, [pc, #0x5c]         @ 0x805a9c8 <prvUnlockQueue+0xb8>
 805a96c: 4780         	blx	r0
;         int8_t cRxLock = pxQueue->cRxLock;
 805a96e: 9801         	ldr	r0, [sp, #0x4]
 805a970: f890 0044    	ldrb.w	r0, [r0, #0x44]
 805a974: f807 0c06    	strb	r0, [r7, #-6]
;         while( cRxLock > queueLOCKED_UNMODIFIED )
 805a978: e7ff         	b	0x805a97a <prvUnlockQueue+0x6a> @ imm = #-0x2
 805a97a: f917 0c06    	ldrsb	r0, [r7, #-6]
 805a97e: 2801         	cmp	r0, #0x1
 805a980: db16         	blt	0x805a9b0 <prvUnlockQueue+0xa0> @ imm = #0x2c
 805a982: e7ff         	b	0x805a984 <prvUnlockQueue+0x74> @ imm = #-0x2
;             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805a984: 9801         	ldr	r0, [sp, #0x4]
 805a986: 6900         	ldr	r0, [r0, #0x10]
 805a988: b180         	cbz	r0, 0x805a9ac <prvUnlockQueue+0x9c> @ imm = #0x20
 805a98a: e7ff         	b	0x805a98c <prvUnlockQueue+0x7c> @ imm = #-0x2
;                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805a98c: 9801         	ldr	r0, [sp, #0x4]
 805a98e: 3010         	adds	r0, #0x10
 805a990: 490f         	ldr	r1, [pc, #0x3c]         @ 0x805a9d0 <prvUnlockQueue+0xc0>
 805a992: 4788         	blx	r1
 805a994: b118         	cbz	r0, 0x805a99e <prvUnlockQueue+0x8e> @ imm = #0x6
 805a996: e7ff         	b	0x805a998 <prvUnlockQueue+0x88> @ imm = #-0x2
;                     vTaskMissedYield();
 805a998: 480e         	ldr	r0, [pc, #0x38]         @ 0x805a9d4 <prvUnlockQueue+0xc4>
 805a99a: 4780         	blx	r0
;                 }
 805a99c: e000         	b	0x805a9a0 <prvUnlockQueue+0x90> @ imm = #0x0
 805a99e: e7ff         	b	0x805a9a0 <prvUnlockQueue+0x90> @ imm = #-0x2
;                 --cRxLock;
 805a9a0: f817 0c06    	ldrb	r0, [r7, #-6]
 805a9a4: 3801         	subs	r0, #0x1
 805a9a6: f807 0c06    	strb	r0, [r7, #-6]
;             }
 805a9aa: e000         	b	0x805a9ae <prvUnlockQueue+0x9e> @ imm = #0x0
;                 break;
 805a9ac: e000         	b	0x805a9b0 <prvUnlockQueue+0xa0> @ imm = #0x0
;         while( cRxLock > queueLOCKED_UNMODIFIED )
 805a9ae: e7e4         	b	0x805a97a <prvUnlockQueue+0x6a> @ imm = #-0x38
;         pxQueue->cRxLock = queueUNLOCKED;
 805a9b0: 9901         	ldr	r1, [sp, #0x4]
 805a9b2: 20ff         	movs	r0, #0xff
 805a9b4: f881 0044    	strb.w	r0, [r1, #0x44]
;     taskEXIT_CRITICAL();
 805a9b8: 4804         	ldr	r0, [pc, #0x10]         @ 0x805a9cc <prvUnlockQueue+0xbc>
 805a9ba: 4780         	blx	r0
; }
 805a9bc: b002         	add	sp, #0x8
 805a9be: bd80         	pop	{r7, pc}

0805a9c0 <$d.29>:
 805a9c0: 19 c4 05 08  	.word	0x0805c419
 805a9c4: 3d c4 05 08  	.word	0x0805c43d
 805a9c8: 19 c4 05 08  	.word	0x0805c419
 805a9cc: 3d c4 05 08  	.word	0x0805c43d
 805a9d0: 99 6d 05 08  	.word	0x08056d99
 805a9d4: 4d 72 05 08  	.word	0x0805724d
 805a9d8: 99 6d 05 08  	.word	0x08056d99
 805a9dc: 4d 72 05 08  	.word	0x0805724d

0805a9e0 <xQueueGenericSendFromISR>:
; {
 805a9e0: b580         	push	{r7, lr}
 805a9e2: 466f         	mov	r7, sp
 805a9e4: b08c         	sub	sp, #0x30
 805a9e6: 900b         	str	r0, [sp, #0x2c]
 805a9e8: 910a         	str	r1, [sp, #0x28]
 805a9ea: 9209         	str	r2, [sp, #0x24]
 805a9ec: 9308         	str	r3, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805a9ee: 980b         	ldr	r0, [sp, #0x2c]
 805a9f0: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxQueue );
 805a9f2: 9805         	ldr	r0, [sp, #0x14]
 805a9f4: b920         	cbnz	r0, 0x805aa00 <xQueueGenericSendFromISR+0x20> @ imm = #0x8
 805a9f6: e7ff         	b	0x805a9f8 <xQueueGenericSendFromISR+0x18> @ imm = #-0x2
 805a9f8: 484f         	ldr	r0, [pc, #0x13c]        @ 0x805ab38 <xQueueGenericSendFromISR+0x158>
 805a9fa: 4780         	blx	r0
 805a9fc: e7ff         	b	0x805a9fe <xQueueGenericSendFromISR+0x1e> @ imm = #-0x2
 805a9fe: e7fe         	b	0x805a9fe <xQueueGenericSendFromISR+0x1e> @ imm = #-0x4
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805aa00: 990a         	ldr	r1, [sp, #0x28]
 805aa02: 2000         	movs	r0, #0x0
 805aa04: 9001         	str	r0, [sp, #0x4]
 805aa06: b939         	cbnz	r1, 0x805aa18 <xQueueGenericSendFromISR+0x38> @ imm = #0xe
 805aa08: e7ff         	b	0x805aa0a <xQueueGenericSendFromISR+0x2a> @ imm = #-0x2
 805aa0a: 9805         	ldr	r0, [sp, #0x14]
 805aa0c: 6c00         	ldr	r0, [r0, #0x40]
 805aa0e: 2800         	cmp	r0, #0x0
 805aa10: bf18         	it	ne
 805aa12: 2001         	movne	r0, #0x1
 805aa14: 9001         	str	r0, [sp, #0x4]
 805aa16: e7ff         	b	0x805aa18 <xQueueGenericSendFromISR+0x38> @ imm = #-0x2
 805aa18: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805aa1a: 07c0         	lsls	r0, r0, #0x1f
 805aa1c: b120         	cbz	r0, 0x805aa28 <xQueueGenericSendFromISR+0x48> @ imm = #0x8
 805aa1e: e7ff         	b	0x805aa20 <xQueueGenericSendFromISR+0x40> @ imm = #-0x2
 805aa20: 4844         	ldr	r0, [pc, #0x110]        @ 0x805ab34 <xQueueGenericSendFromISR+0x154>
 805aa22: 4780         	blx	r0
 805aa24: e7ff         	b	0x805aa26 <xQueueGenericSendFromISR+0x46> @ imm = #-0x2
 805aa26: e7fe         	b	0x805aa26 <xQueueGenericSendFromISR+0x46> @ imm = #-0x4
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805aa28: 9908         	ldr	r1, [sp, #0x20]
 805aa2a: 2000         	movs	r0, #0x0
 805aa2c: 2902         	cmp	r1, #0x2
 805aa2e: 9000         	str	r0, [sp]
 805aa30: d107         	bne	0x805aa42 <xQueueGenericSendFromISR+0x62> @ imm = #0xe
 805aa32: e7ff         	b	0x805aa34 <xQueueGenericSendFromISR+0x54> @ imm = #-0x2
 805aa34: 9805         	ldr	r0, [sp, #0x14]
 805aa36: 6bc0         	ldr	r0, [r0, #0x3c]
 805aa38: 3801         	subs	r0, #0x1
 805aa3a: bf18         	it	ne
 805aa3c: 2001         	movne	r0, #0x1
 805aa3e: 9000         	str	r0, [sp]
 805aa40: e7ff         	b	0x805aa42 <xQueueGenericSendFromISR+0x62> @ imm = #-0x2
 805aa42: 9800         	ldr	r0, [sp]
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805aa44: 07c0         	lsls	r0, r0, #0x1f
 805aa46: b120         	cbz	r0, 0x805aa52 <xQueueGenericSendFromISR+0x72> @ imm = #0x8
 805aa48: e7ff         	b	0x805aa4a <xQueueGenericSendFromISR+0x6a> @ imm = #-0x2
 805aa4a: 4839         	ldr	r0, [pc, #0xe4]         @ 0x805ab30 <xQueueGenericSendFromISR+0x150>
 805aa4c: 4780         	blx	r0
 805aa4e: e7ff         	b	0x805aa50 <xQueueGenericSendFromISR+0x70> @ imm = #-0x2
 805aa50: e7fe         	b	0x805aa50 <xQueueGenericSendFromISR+0x70> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805aa52: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805ab14 <xQueueGenericSendFromISR+0x134>
 805aa54: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805aa56: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805ab18 <xQueueGenericSendFromISR+0x138>
 805aa58: 4780         	blx	r0
 805aa5a: 9006         	str	r0, [sp, #0x18]
;         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 805aa5c: 9805         	ldr	r0, [sp, #0x14]
 805aa5e: 6b80         	ldr	r0, [r0, #0x38]
 805aa60: 9905         	ldr	r1, [sp, #0x14]
 805aa62: 6bc9         	ldr	r1, [r1, #0x3c]
 805aa64: 4288         	cmp	r0, r1
 805aa66: d304         	blo	0x805aa72 <xQueueGenericSendFromISR+0x92> @ imm = #0x8
 805aa68: e7ff         	b	0x805aa6a <xQueueGenericSendFromISR+0x8a> @ imm = #-0x2
 805aa6a: 9808         	ldr	r0, [sp, #0x20]
 805aa6c: 2802         	cmp	r0, #0x2
 805aa6e: d148         	bne	0x805ab02 <xQueueGenericSendFromISR+0x122> @ imm = #0x90
 805aa70: e7ff         	b	0x805aa72 <xQueueGenericSendFromISR+0x92> @ imm = #-0x2
;             const int8_t cTxLock = pxQueue->cTxLock;
 805aa72: 9805         	ldr	r0, [sp, #0x14]
 805aa74: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805aa78: f807 0c1d    	strb	r0, [r7, #-29]
;             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 805aa7c: 9805         	ldr	r0, [sp, #0x14]
 805aa7e: 6b80         	ldr	r0, [r0, #0x38]
 805aa80: 9003         	str	r0, [sp, #0xc]
;             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 805aa82: 9805         	ldr	r0, [sp, #0x14]
 805aa84: 990a         	ldr	r1, [sp, #0x28]
 805aa86: 9a08         	ldr	r2, [sp, #0x20]
 805aa88: 4b24         	ldr	r3, [pc, #0x90]         @ 0x805ab1c <xQueueGenericSendFromISR+0x13c>
 805aa8a: 4798         	blx	r3
;             if( cTxLock == queueUNLOCKED )
 805aa8c: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805aa90: 3001         	adds	r0, #0x1
 805aa92: b9b8         	cbnz	r0, 0x805aac4 <xQueueGenericSendFromISR+0xe4> @ imm = #0x2e
 805aa94: e7ff         	b	0x805aa96 <xQueueGenericSendFromISR+0xb6> @ imm = #-0x2
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805aa96: 9805         	ldr	r0, [sp, #0x14]
 805aa98: 6a40         	ldr	r0, [r0, #0x24]
 805aa9a: b188         	cbz	r0, 0x805aac0 <xQueueGenericSendFromISR+0xe0> @ imm = #0x22
 805aa9c: e7ff         	b	0x805aa9e <xQueueGenericSendFromISR+0xbe> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805aa9e: 9805         	ldr	r0, [sp, #0x14]
 805aaa0: 3024         	adds	r0, #0x24
 805aaa2: 4921         	ldr	r1, [pc, #0x84]         @ 0x805ab28 <xQueueGenericSendFromISR+0x148>
 805aaa4: 4788         	blx	r1
 805aaa6: b148         	cbz	r0, 0x805aabc <xQueueGenericSendFromISR+0xdc> @ imm = #0x12
 805aaa8: e7ff         	b	0x805aaaa <xQueueGenericSendFromISR+0xca> @ imm = #-0x2
;                             if( pxHigherPriorityTaskWoken != NULL )
 805aaaa: 9809         	ldr	r0, [sp, #0x24]
 805aaac: b120         	cbz	r0, 0x805aab8 <xQueueGenericSendFromISR+0xd8> @ imm = #0x8
 805aaae: e7ff         	b	0x805aab0 <xQueueGenericSendFromISR+0xd0> @ imm = #-0x2
;                                 *pxHigherPriorityTaskWoken = pdTRUE;
 805aab0: 9909         	ldr	r1, [sp, #0x24]
 805aab2: 2001         	movs	r0, #0x1
 805aab4: 6008         	str	r0, [r1]
;                             }
 805aab6: e000         	b	0x805aaba <xQueueGenericSendFromISR+0xda> @ imm = #0x0
 805aab8: e7ff         	b	0x805aaba <xQueueGenericSendFromISR+0xda> @ imm = #-0x2
;                         }
 805aaba: e000         	b	0x805aabe <xQueueGenericSendFromISR+0xde> @ imm = #0x0
 805aabc: e7ff         	b	0x805aabe <xQueueGenericSendFromISR+0xde> @ imm = #-0x2
;                     }
 805aabe: e000         	b	0x805aac2 <xQueueGenericSendFromISR+0xe2> @ imm = #0x0
 805aac0: e7ff         	b	0x805aac2 <xQueueGenericSendFromISR+0xe2> @ imm = #-0x2
;             }
 805aac2: e01b         	b	0x805aafc <xQueueGenericSendFromISR+0x11c> @ imm = #0x36
;                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 805aac4: e7ff         	b	0x805aac6 <xQueueGenericSendFromISR+0xe6> @ imm = #-0x2
 805aac6: 4816         	ldr	r0, [pc, #0x58]         @ 0x805ab20 <xQueueGenericSendFromISR+0x140>
 805aac8: 4780         	blx	r0
 805aaca: 9002         	str	r0, [sp, #0x8]
 805aacc: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805aad0: 9902         	ldr	r1, [sp, #0x8]
 805aad2: 4288         	cmp	r0, r1
 805aad4: d210         	bhs	0x805aaf8 <xQueueGenericSendFromISR+0x118> @ imm = #0x20
 805aad6: e7ff         	b	0x805aad8 <xQueueGenericSendFromISR+0xf8> @ imm = #-0x2
 805aad8: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805aadc: 287f         	cmp	r0, #0x7f
 805aade: d104         	bne	0x805aaea <xQueueGenericSendFromISR+0x10a> @ imm = #0x8
 805aae0: e7ff         	b	0x805aae2 <xQueueGenericSendFromISR+0x102> @ imm = #-0x2
 805aae2: 4810         	ldr	r0, [pc, #0x40]         @ 0x805ab24 <xQueueGenericSendFromISR+0x144>
 805aae4: 4780         	blx	r0
 805aae6: e7ff         	b	0x805aae8 <xQueueGenericSendFromISR+0x108> @ imm = #-0x2
 805aae8: e7fe         	b	0x805aae8 <xQueueGenericSendFromISR+0x108> @ imm = #-0x4
 805aaea: f817 0c1d    	ldrb	r0, [r7, #-29]
 805aaee: 3001         	adds	r0, #0x1
 805aaf0: 9905         	ldr	r1, [sp, #0x14]
 805aaf2: f881 0045    	strb.w	r0, [r1, #0x45]
 805aaf6: e7ff         	b	0x805aaf8 <xQueueGenericSendFromISR+0x118> @ imm = #-0x2
 805aaf8: e7ff         	b	0x805aafa <xQueueGenericSendFromISR+0x11a> @ imm = #-0x2
 805aafa: e7ff         	b	0x805aafc <xQueueGenericSendFromISR+0x11c> @ imm = #-0x2
 805aafc: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805aafe: 9007         	str	r0, [sp, #0x1c]
;         }
 805ab00: e002         	b	0x805ab08 <xQueueGenericSendFromISR+0x128> @ imm = #0x4
 805ab02: 2000         	movs	r0, #0x0
;             xReturn = errQUEUE_FULL;
 805ab04: 9007         	str	r0, [sp, #0x1c]
 805ab06: e7ff         	b	0x805ab08 <xQueueGenericSendFromISR+0x128> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805ab08: 9806         	ldr	r0, [sp, #0x18]
 805ab0a: 4908         	ldr	r1, [pc, #0x20]         @ 0x805ab2c <xQueueGenericSendFromISR+0x14c>
 805ab0c: 4788         	blx	r1
;     return xReturn;
 805ab0e: 9807         	ldr	r0, [sp, #0x1c]
 805ab10: b00c         	add	sp, #0x30
 805ab12: bd80         	pop	{r7, pc}

0805ab14 <$d.31>:
 805ab14: 45 ea 05 08  	.word	0x0805ea45
 805ab18: 55 cd 05 08  	.word	0x0805cd55
 805ab1c: fd a7 05 08  	.word	0x0805a7fd
 805ab20: 9d 69 05 08  	.word	0x0805699d
 805ab24: 55 cd 05 08  	.word	0x0805cd55
 805ab28: 99 6d 05 08  	.word	0x08056d99
 805ab2c: 6b cd 05 08  	.word	0x0805cd6b
 805ab30: 55 cd 05 08  	.word	0x0805cd55
 805ab34: 55 cd 05 08  	.word	0x0805cd55
 805ab38: 55 cd 05 08  	.word	0x0805cd55

0805ab3c <xQueueGiveFromISR>:
; {
 805ab3c: b580         	push	{r7, lr}
 805ab3e: 466f         	mov	r7, sp
 805ab40: b08a         	sub	sp, #0x28
 805ab42: 9009         	str	r0, [sp, #0x24]
 805ab44: 9108         	str	r1, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805ab46: 9809         	ldr	r0, [sp, #0x24]
 805ab48: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxQueue );
 805ab4a: 9805         	ldr	r0, [sp, #0x14]
 805ab4c: b920         	cbnz	r0, 0x805ab58 <xQueueGiveFromISR+0x1c> @ imm = #0x8
 805ab4e: e7ff         	b	0x805ab50 <xQueueGiveFromISR+0x14> @ imm = #-0x2
 805ab50: 4845         	ldr	r0, [pc, #0x114]        @ 0x805ac68 <xQueueGiveFromISR+0x12c>
 805ab52: 4780         	blx	r0
 805ab54: e7ff         	b	0x805ab56 <xQueueGiveFromISR+0x1a> @ imm = #-0x2
 805ab56: e7fe         	b	0x805ab56 <xQueueGiveFromISR+0x1a> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize == 0 );
 805ab58: 9805         	ldr	r0, [sp, #0x14]
 805ab5a: 6c00         	ldr	r0, [r0, #0x40]
 805ab5c: b120         	cbz	r0, 0x805ab68 <xQueueGiveFromISR+0x2c> @ imm = #0x8
 805ab5e: e7ff         	b	0x805ab60 <xQueueGiveFromISR+0x24> @ imm = #-0x2
 805ab60: 4840         	ldr	r0, [pc, #0x100]        @ 0x805ac64 <xQueueGiveFromISR+0x128>
 805ab62: 4780         	blx	r0
 805ab64: e7ff         	b	0x805ab66 <xQueueGiveFromISR+0x2a> @ imm = #-0x2
 805ab66: e7fe         	b	0x805ab66 <xQueueGiveFromISR+0x2a> @ imm = #-0x4
;     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 805ab68: 9805         	ldr	r0, [sp, #0x14]
 805ab6a: 6801         	ldr	r1, [r0]
 805ab6c: 2000         	movs	r0, #0x0
 805ab6e: 9001         	str	r0, [sp, #0x4]
 805ab70: b939         	cbnz	r1, 0x805ab82 <xQueueGiveFromISR+0x46> @ imm = #0xe
 805ab72: e7ff         	b	0x805ab74 <xQueueGiveFromISR+0x38> @ imm = #-0x2
 805ab74: 9805         	ldr	r0, [sp, #0x14]
 805ab76: 6880         	ldr	r0, [r0, #0x8]
 805ab78: 2800         	cmp	r0, #0x0
 805ab7a: bf18         	it	ne
 805ab7c: 2001         	movne	r0, #0x1
 805ab7e: 9001         	str	r0, [sp, #0x4]
 805ab80: e7ff         	b	0x805ab82 <xQueueGiveFromISR+0x46> @ imm = #-0x2
 805ab82: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 805ab84: 07c0         	lsls	r0, r0, #0x1f
 805ab86: b120         	cbz	r0, 0x805ab92 <xQueueGiveFromISR+0x56> @ imm = #0x8
 805ab88: e7ff         	b	0x805ab8a <xQueueGiveFromISR+0x4e> @ imm = #-0x2
 805ab8a: 4835         	ldr	r0, [pc, #0xd4]         @ 0x805ac60 <xQueueGiveFromISR+0x124>
 805ab8c: 4780         	blx	r0
 805ab8e: e7ff         	b	0x805ab90 <xQueueGiveFromISR+0x54> @ imm = #-0x2
 805ab90: e7fe         	b	0x805ab90 <xQueueGiveFromISR+0x54> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805ab92: 482d         	ldr	r0, [pc, #0xb4]         @ 0x805ac48 <xQueueGiveFromISR+0x10c>
 805ab94: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805ab96: 482d         	ldr	r0, [pc, #0xb4]         @ 0x805ac4c <xQueueGiveFromISR+0x110>
 805ab98: 4780         	blx	r0
 805ab9a: 9006         	str	r0, [sp, #0x18]
;         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805ab9c: 9805         	ldr	r0, [sp, #0x14]
 805ab9e: 6b80         	ldr	r0, [r0, #0x38]
 805aba0: 9004         	str	r0, [sp, #0x10]
;         if( uxMessagesWaiting < pxQueue->uxLength )
 805aba2: 9804         	ldr	r0, [sp, #0x10]
 805aba4: 9905         	ldr	r1, [sp, #0x14]
 805aba6: 6bc9         	ldr	r1, [r1, #0x3c]
 805aba8: 4288         	cmp	r0, r1
 805abaa: d244         	bhs	0x805ac36 <xQueueGiveFromISR+0xfa> @ imm = #0x88
 805abac: e7ff         	b	0x805abae <xQueueGiveFromISR+0x72> @ imm = #-0x2
;             const int8_t cTxLock = pxQueue->cTxLock;
 805abae: 9805         	ldr	r0, [sp, #0x14]
 805abb0: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805abb4: f807 0c19    	strb	r0, [r7, #-25]
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 805abb8: 9804         	ldr	r0, [sp, #0x10]
 805abba: 3001         	adds	r0, #0x1
 805abbc: 9905         	ldr	r1, [sp, #0x14]
 805abbe: 6388         	str	r0, [r1, #0x38]
;             if( cTxLock == queueUNLOCKED )
 805abc0: f917 0c19    	ldrsb	r0, [r7, #-25]
 805abc4: 3001         	adds	r0, #0x1
 805abc6: b9b8         	cbnz	r0, 0x805abf8 <xQueueGiveFromISR+0xbc> @ imm = #0x2e
 805abc8: e7ff         	b	0x805abca <xQueueGiveFromISR+0x8e> @ imm = #-0x2
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805abca: 9805         	ldr	r0, [sp, #0x14]
 805abcc: 6a40         	ldr	r0, [r0, #0x24]
 805abce: b188         	cbz	r0, 0x805abf4 <xQueueGiveFromISR+0xb8> @ imm = #0x22
 805abd0: e7ff         	b	0x805abd2 <xQueueGiveFromISR+0x96> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805abd2: 9805         	ldr	r0, [sp, #0x14]
 805abd4: 3024         	adds	r0, #0x24
 805abd6: 4920         	ldr	r1, [pc, #0x80]         @ 0x805ac58 <xQueueGiveFromISR+0x11c>
 805abd8: 4788         	blx	r1
 805abda: b148         	cbz	r0, 0x805abf0 <xQueueGiveFromISR+0xb4> @ imm = #0x12
 805abdc: e7ff         	b	0x805abde <xQueueGiveFromISR+0xa2> @ imm = #-0x2
;                             if( pxHigherPriorityTaskWoken != NULL )
 805abde: 9808         	ldr	r0, [sp, #0x20]
 805abe0: b120         	cbz	r0, 0x805abec <xQueueGiveFromISR+0xb0> @ imm = #0x8
 805abe2: e7ff         	b	0x805abe4 <xQueueGiveFromISR+0xa8> @ imm = #-0x2
;                                 *pxHigherPriorityTaskWoken = pdTRUE;
 805abe4: 9908         	ldr	r1, [sp, #0x20]
 805abe6: 2001         	movs	r0, #0x1
 805abe8: 6008         	str	r0, [r1]
;                             }
 805abea: e000         	b	0x805abee <xQueueGiveFromISR+0xb2> @ imm = #0x0
 805abec: e7ff         	b	0x805abee <xQueueGiveFromISR+0xb2> @ imm = #-0x2
;                         }
 805abee: e000         	b	0x805abf2 <xQueueGiveFromISR+0xb6> @ imm = #0x0
 805abf0: e7ff         	b	0x805abf2 <xQueueGiveFromISR+0xb6> @ imm = #-0x2
;                     }
 805abf2: e000         	b	0x805abf6 <xQueueGiveFromISR+0xba> @ imm = #0x0
 805abf4: e7ff         	b	0x805abf6 <xQueueGiveFromISR+0xba> @ imm = #-0x2
;             }
 805abf6: e01b         	b	0x805ac30 <xQueueGiveFromISR+0xf4> @ imm = #0x36
;                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 805abf8: e7ff         	b	0x805abfa <xQueueGiveFromISR+0xbe> @ imm = #-0x2
 805abfa: 4815         	ldr	r0, [pc, #0x54]         @ 0x805ac50 <xQueueGiveFromISR+0x114>
 805abfc: 4780         	blx	r0
 805abfe: 9002         	str	r0, [sp, #0x8]
 805ac00: f917 0c19    	ldrsb	r0, [r7, #-25]
 805ac04: 9902         	ldr	r1, [sp, #0x8]
 805ac06: 4288         	cmp	r0, r1
 805ac08: d210         	bhs	0x805ac2c <xQueueGiveFromISR+0xf0> @ imm = #0x20
 805ac0a: e7ff         	b	0x805ac0c <xQueueGiveFromISR+0xd0> @ imm = #-0x2
 805ac0c: f917 0c19    	ldrsb	r0, [r7, #-25]
 805ac10: 287f         	cmp	r0, #0x7f
 805ac12: d104         	bne	0x805ac1e <xQueueGiveFromISR+0xe2> @ imm = #0x8
 805ac14: e7ff         	b	0x805ac16 <xQueueGiveFromISR+0xda> @ imm = #-0x2
 805ac16: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805ac54 <xQueueGiveFromISR+0x118>
 805ac18: 4780         	blx	r0
 805ac1a: e7ff         	b	0x805ac1c <xQueueGiveFromISR+0xe0> @ imm = #-0x2
 805ac1c: e7fe         	b	0x805ac1c <xQueueGiveFromISR+0xe0> @ imm = #-0x4
 805ac1e: f817 0c19    	ldrb	r0, [r7, #-25]
 805ac22: 3001         	adds	r0, #0x1
 805ac24: 9905         	ldr	r1, [sp, #0x14]
 805ac26: f881 0045    	strb.w	r0, [r1, #0x45]
 805ac2a: e7ff         	b	0x805ac2c <xQueueGiveFromISR+0xf0> @ imm = #-0x2
 805ac2c: e7ff         	b	0x805ac2e <xQueueGiveFromISR+0xf2> @ imm = #-0x2
 805ac2e: e7ff         	b	0x805ac30 <xQueueGiveFromISR+0xf4> @ imm = #-0x2
 805ac30: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805ac32: 9007         	str	r0, [sp, #0x1c]
;         }
 805ac34: e002         	b	0x805ac3c <xQueueGiveFromISR+0x100> @ imm = #0x4
 805ac36: 2000         	movs	r0, #0x0
;             xReturn = errQUEUE_FULL;
 805ac38: 9007         	str	r0, [sp, #0x1c]
 805ac3a: e7ff         	b	0x805ac3c <xQueueGiveFromISR+0x100> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805ac3c: 9806         	ldr	r0, [sp, #0x18]
 805ac3e: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805ac5c <xQueueGiveFromISR+0x120>
 805ac40: 4788         	blx	r1
;     return xReturn;
 805ac42: 9807         	ldr	r0, [sp, #0x1c]
 805ac44: b00a         	add	sp, #0x28
 805ac46: bd80         	pop	{r7, pc}

0805ac48 <$d.33>:
 805ac48: 45 ea 05 08  	.word	0x0805ea45
 805ac4c: 55 cd 05 08  	.word	0x0805cd55
 805ac50: 9d 69 05 08  	.word	0x0805699d
 805ac54: 55 cd 05 08  	.word	0x0805cd55
 805ac58: 99 6d 05 08  	.word	0x08056d99
 805ac5c: 6b cd 05 08  	.word	0x0805cd6b
 805ac60: 55 cd 05 08  	.word	0x0805cd55
 805ac64: 55 cd 05 08  	.word	0x0805cd55
 805ac68: 55 cd 05 08  	.word	0x0805cd55

0805ac6c <xQueueReceive>:
; {
 805ac6c: b580         	push	{r7, lr}
 805ac6e: 466f         	mov	r7, sp
 805ac70: b08c         	sub	sp, #0x30
 805ac72: 900a         	str	r0, [sp, #0x28]
 805ac74: 9109         	str	r1, [sp, #0x24]
 805ac76: 9208         	str	r2, [sp, #0x20]
 805ac78: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805ac7a: 9007         	str	r0, [sp, #0x1c]
;     Queue_t * const pxQueue = xQueue;
 805ac7c: 980a         	ldr	r0, [sp, #0x28]
 805ac7e: 9004         	str	r0, [sp, #0x10]
;     configASSERT( ( pxQueue ) );
 805ac80: 9804         	ldr	r0, [sp, #0x10]
 805ac82: b920         	cbnz	r0, 0x805ac8e <xQueueReceive+0x22> @ imm = #0x8
 805ac84: e7ff         	b	0x805ac86 <xQueueReceive+0x1a> @ imm = #-0x2
 805ac86: 4876         	ldr	r0, [pc, #0x1d8]        @ 0x805ae60 <xQueueReceive+0x1f4>
 805ac88: 4780         	blx	r0
 805ac8a: e7ff         	b	0x805ac8c <xQueueReceive+0x20> @ imm = #-0x2
 805ac8c: e7fe         	b	0x805ac8c <xQueueReceive+0x20> @ imm = #-0x4
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805ac8e: 9909         	ldr	r1, [sp, #0x24]
 805ac90: 2000         	movs	r0, #0x0
 805ac92: 9002         	str	r0, [sp, #0x8]
 805ac94: b939         	cbnz	r1, 0x805aca6 <xQueueReceive+0x3a> @ imm = #0xe
 805ac96: e7ff         	b	0x805ac98 <xQueueReceive+0x2c> @ imm = #-0x2
 805ac98: 9804         	ldr	r0, [sp, #0x10]
 805ac9a: 6c00         	ldr	r0, [r0, #0x40]
 805ac9c: 2800         	cmp	r0, #0x0
 805ac9e: bf18         	it	ne
 805aca0: 2001         	movne	r0, #0x1
 805aca2: 9002         	str	r0, [sp, #0x8]
 805aca4: e7ff         	b	0x805aca6 <xQueueReceive+0x3a> @ imm = #-0x2
 805aca6: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805aca8: 07c0         	lsls	r0, r0, #0x1f
 805acaa: b120         	cbz	r0, 0x805acb6 <xQueueReceive+0x4a> @ imm = #0x8
 805acac: e7ff         	b	0x805acae <xQueueReceive+0x42> @ imm = #-0x2
 805acae: 486b         	ldr	r0, [pc, #0x1ac]        @ 0x805ae5c <xQueueReceive+0x1f0>
 805acb0: 4780         	blx	r0
 805acb2: e7ff         	b	0x805acb4 <xQueueReceive+0x48> @ imm = #-0x2
 805acb4: e7fe         	b	0x805acb4 <xQueueReceive+0x48> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805acb6: 4851         	ldr	r0, [pc, #0x144]        @ 0x805adfc <xQueueReceive+0x190>
 805acb8: 4780         	blx	r0
 805acba: 4601         	mov	r1, r0
 805acbc: 2000         	movs	r0, #0x0
 805acbe: 9001         	str	r0, [sp, #0x4]
 805acc0: b931         	cbnz	r1, 0x805acd0 <xQueueReceive+0x64> @ imm = #0xc
 805acc2: e7ff         	b	0x805acc4 <xQueueReceive+0x58> @ imm = #-0x2
 805acc4: 9808         	ldr	r0, [sp, #0x20]
 805acc6: 2800         	cmp	r0, #0x0
 805acc8: bf18         	it	ne
 805acca: 2001         	movne	r0, #0x1
 805accc: 9001         	str	r0, [sp, #0x4]
 805acce: e7ff         	b	0x805acd0 <xQueueReceive+0x64> @ imm = #-0x2
 805acd0: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805acd2: 07c0         	lsls	r0, r0, #0x1f
 805acd4: b120         	cbz	r0, 0x805ace0 <xQueueReceive+0x74> @ imm = #0x8
 805acd6: e7ff         	b	0x805acd8 <xQueueReceive+0x6c> @ imm = #-0x2
 805acd8: 485f         	ldr	r0, [pc, #0x17c]        @ 0x805ae58 <xQueueReceive+0x1ec>
 805acda: 4780         	blx	r0
 805acdc: e7ff         	b	0x805acde <xQueueReceive+0x72> @ imm = #-0x2
 805acde: e7fe         	b	0x805acde <xQueueReceive+0x72> @ imm = #-0x4
;     for( ; ; )
 805ace0: e7ff         	b	0x805ace2 <xQueueReceive+0x76> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805ace2: 4847         	ldr	r0, [pc, #0x11c]        @ 0x805ae00 <xQueueReceive+0x194>
 805ace4: 4780         	blx	r0
;             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805ace6: 9804         	ldr	r0, [sp, #0x10]
 805ace8: 6b80         	ldr	r0, [r0, #0x38]
 805acea: 9003         	str	r0, [sp, #0xc]
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805acec: 9803         	ldr	r0, [sp, #0xc]
 805acee: b1e8         	cbz	r0, 0x805ad2c <xQueueReceive+0xc0> @ imm = #0x3a
 805acf0: e7ff         	b	0x805acf2 <xQueueReceive+0x86> @ imm = #-0x2
;                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 805acf2: 9804         	ldr	r0, [sp, #0x10]
 805acf4: 9909         	ldr	r1, [sp, #0x24]
 805acf6: 4a54         	ldr	r2, [pc, #0x150]        @ 0x805ae48 <xQueueReceive+0x1dc>
 805acf8: 4790         	blx	r2
;                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 805acfa: 9803         	ldr	r0, [sp, #0xc]
 805acfc: 3801         	subs	r0, #0x1
 805acfe: 9904         	ldr	r1, [sp, #0x10]
 805ad00: 6388         	str	r0, [r1, #0x38]
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805ad02: 9804         	ldr	r0, [sp, #0x10]
 805ad04: 6900         	ldr	r0, [r0, #0x10]
 805ad06: b158         	cbz	r0, 0x805ad20 <xQueueReceive+0xb4> @ imm = #0x16
 805ad08: e7ff         	b	0x805ad0a <xQueueReceive+0x9e> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805ad0a: 9804         	ldr	r0, [sp, #0x10]
 805ad0c: 3010         	adds	r0, #0x10
 805ad0e: 494f         	ldr	r1, [pc, #0x13c]        @ 0x805ae4c <xQueueReceive+0x1e0>
 805ad10: 4788         	blx	r1
 805ad12: b118         	cbz	r0, 0x805ad1c <xQueueReceive+0xb0> @ imm = #0x6
 805ad14: e7ff         	b	0x805ad16 <xQueueReceive+0xaa> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805ad16: 484e         	ldr	r0, [pc, #0x138]        @ 0x805ae50 <xQueueReceive+0x1e4>
 805ad18: 4780         	blx	r0
;                     }
 805ad1a: e000         	b	0x805ad1e <xQueueReceive+0xb2> @ imm = #0x0
 805ad1c: e7ff         	b	0x805ad1e <xQueueReceive+0xb2> @ imm = #-0x2
;                 }
 805ad1e: e000         	b	0x805ad22 <xQueueReceive+0xb6> @ imm = #0x0
 805ad20: e7ff         	b	0x805ad22 <xQueueReceive+0xb6> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805ad22: 484c         	ldr	r0, [pc, #0x130]        @ 0x805ae54 <xQueueReceive+0x1e8>
 805ad24: 4780         	blx	r0
 805ad26: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805ad28: 900b         	str	r0, [sp, #0x2c]
 805ad2a: e064         	b	0x805adf6 <xQueueReceive+0x18a> @ imm = #0xc8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805ad2c: 9808         	ldr	r0, [sp, #0x20]
 805ad2e: b928         	cbnz	r0, 0x805ad3c <xQueueReceive+0xd0> @ imm = #0xa
 805ad30: e7ff         	b	0x805ad32 <xQueueReceive+0xc6> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805ad32: 4844         	ldr	r0, [pc, #0x110]        @ 0x805ae44 <xQueueReceive+0x1d8>
 805ad34: 4780         	blx	r0
 805ad36: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805ad38: 900b         	str	r0, [sp, #0x2c]
 805ad3a: e05c         	b	0x805adf6 <xQueueReceive+0x18a> @ imm = #0xb8
;                 else if( xEntryTimeSet == pdFALSE )
 805ad3c: 9807         	ldr	r0, [sp, #0x1c]
 805ad3e: b930         	cbnz	r0, 0x805ad4e <xQueueReceive+0xe2> @ imm = #0xc
 805ad40: e7ff         	b	0x805ad42 <xQueueReceive+0xd6> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805ad42: 4930         	ldr	r1, [pc, #0xc0]         @ 0x805ae04 <xQueueReceive+0x198>
 805ad44: a805         	add	r0, sp, #0x14
 805ad46: 4788         	blx	r1
 805ad48: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805ad4a: 9007         	str	r0, [sp, #0x1c]
;                 }
 805ad4c: e000         	b	0x805ad50 <xQueueReceive+0xe4> @ imm = #0x0
 805ad4e: e7ff         	b	0x805ad50 <xQueueReceive+0xe4> @ imm = #-0x2
 805ad50: e7ff         	b	0x805ad52 <xQueueReceive+0xe6> @ imm = #-0x2
 805ad52: e7ff         	b	0x805ad54 <xQueueReceive+0xe8> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805ad54: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805ae08 <xQueueReceive+0x19c>
 805ad56: 4780         	blx	r0
;         vTaskSuspendAll();
 805ad58: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805ae0c <xQueueReceive+0x1a0>
 805ad5a: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805ad5c: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805ae10 <xQueueReceive+0x1a4>
 805ad5e: 4780         	blx	r0
 805ad60: 9804         	ldr	r0, [sp, #0x10]
 805ad62: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805ad66: 3001         	adds	r0, #0x1
 805ad68: b928         	cbnz	r0, 0x805ad76 <xQueueReceive+0x10a> @ imm = #0xa
 805ad6a: e7ff         	b	0x805ad6c <xQueueReceive+0x100> @ imm = #-0x2
 805ad6c: 9904         	ldr	r1, [sp, #0x10]
 805ad6e: 2000         	movs	r0, #0x0
 805ad70: f881 0044    	strb.w	r0, [r1, #0x44]
 805ad74: e7ff         	b	0x805ad76 <xQueueReceive+0x10a> @ imm = #-0x2
 805ad76: 9804         	ldr	r0, [sp, #0x10]
 805ad78: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805ad7c: 3001         	adds	r0, #0x1
 805ad7e: b928         	cbnz	r0, 0x805ad8c <xQueueReceive+0x120> @ imm = #0xa
 805ad80: e7ff         	b	0x805ad82 <xQueueReceive+0x116> @ imm = #-0x2
 805ad82: 9904         	ldr	r1, [sp, #0x10]
 805ad84: 2000         	movs	r0, #0x0
 805ad86: f881 0045    	strb.w	r0, [r1, #0x45]
 805ad8a: e7ff         	b	0x805ad8c <xQueueReceive+0x120> @ imm = #-0x2
 805ad8c: 4821         	ldr	r0, [pc, #0x84]         @ 0x805ae14 <xQueueReceive+0x1a8>
 805ad8e: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805ad90: 4a21         	ldr	r2, [pc, #0x84]         @ 0x805ae18 <xQueueReceive+0x1ac>
 805ad92: a805         	add	r0, sp, #0x14
 805ad94: a908         	add	r1, sp, #0x20
 805ad96: 4790         	blx	r2
 805ad98: b9e8         	cbnz	r0, 0x805add6 <xQueueReceive+0x16a> @ imm = #0x3a
 805ad9a: e7ff         	b	0x805ad9c <xQueueReceive+0x130> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805ad9c: 9804         	ldr	r0, [sp, #0x10]
 805ad9e: 4922         	ldr	r1, [pc, #0x88]         @ 0x805ae28 <xQueueReceive+0x1bc>
 805ada0: 4788         	blx	r1
 805ada2: b188         	cbz	r0, 0x805adc8 <xQueueReceive+0x15c> @ imm = #0x22
 805ada4: e7ff         	b	0x805ada6 <xQueueReceive+0x13a> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805ada6: 9804         	ldr	r0, [sp, #0x10]
 805ada8: 3024         	adds	r0, #0x24
 805adaa: 9908         	ldr	r1, [sp, #0x20]
 805adac: 4a21         	ldr	r2, [pc, #0x84]         @ 0x805ae34 <xQueueReceive+0x1c8>
 805adae: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805adb0: 9804         	ldr	r0, [sp, #0x10]
 805adb2: 4921         	ldr	r1, [pc, #0x84]         @ 0x805ae38 <xQueueReceive+0x1cc>
 805adb4: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805adb6: 4821         	ldr	r0, [pc, #0x84]         @ 0x805ae3c <xQueueReceive+0x1d0>
 805adb8: 4780         	blx	r0
 805adba: b918         	cbnz	r0, 0x805adc4 <xQueueReceive+0x158> @ imm = #0x6
 805adbc: e7ff         	b	0x805adbe <xQueueReceive+0x152> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805adbe: 4820         	ldr	r0, [pc, #0x80]         @ 0x805ae40 <xQueueReceive+0x1d4>
 805adc0: 4780         	blx	r0
;                 }
 805adc2: e000         	b	0x805adc6 <xQueueReceive+0x15a> @ imm = #0x0
 805adc4: e7ff         	b	0x805adc6 <xQueueReceive+0x15a> @ imm = #-0x2
;             }
 805adc6: e005         	b	0x805add4 <xQueueReceive+0x168> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805adc8: 9804         	ldr	r0, [sp, #0x10]
 805adca: 4918         	ldr	r1, [pc, #0x60]         @ 0x805ae2c <xQueueReceive+0x1c0>
 805adcc: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805adce: 4818         	ldr	r0, [pc, #0x60]         @ 0x805ae30 <xQueueReceive+0x1c4>
 805add0: 4780         	blx	r0
 805add2: e7ff         	b	0x805add4 <xQueueReceive+0x168> @ imm = #-0x2
;         }
 805add4: e00e         	b	0x805adf4 <xQueueReceive+0x188> @ imm = #0x1c
;             prvUnlockQueue( pxQueue );
 805add6: 9804         	ldr	r0, [sp, #0x10]
 805add8: 4910         	ldr	r1, [pc, #0x40]         @ 0x805ae1c <xQueueReceive+0x1b0>
 805adda: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805addc: 4810         	ldr	r0, [pc, #0x40]         @ 0x805ae20 <xQueueReceive+0x1b4>
 805adde: 4780         	blx	r0
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805ade0: 9804         	ldr	r0, [sp, #0x10]
 805ade2: 4910         	ldr	r1, [pc, #0x40]         @ 0x805ae24 <xQueueReceive+0x1b8>
 805ade4: 4788         	blx	r1
 805ade6: b118         	cbz	r0, 0x805adf0 <xQueueReceive+0x184> @ imm = #0x6
 805ade8: e7ff         	b	0x805adea <xQueueReceive+0x17e> @ imm = #-0x2
 805adea: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805adec: 900b         	str	r0, [sp, #0x2c]
 805adee: e002         	b	0x805adf6 <xQueueReceive+0x18a> @ imm = #0x4
 805adf0: e7ff         	b	0x805adf2 <xQueueReceive+0x186> @ imm = #-0x2
 805adf2: e7ff         	b	0x805adf4 <xQueueReceive+0x188> @ imm = #-0x2
;     for( ; ; )
 805adf4: e775         	b	0x805ace2 <xQueueReceive+0x76> @ imm = #-0x116
; }
 805adf6: 980b         	ldr	r0, [sp, #0x2c]
 805adf8: b00c         	add	sp, #0x30
 805adfa: bd80         	pop	{r7, pc}

0805adfc <$d.35>:
 805adfc: 8d 74 05 08  	.word	0x0805748d
 805ae00: 19 c4 05 08  	.word	0x0805c419
 805ae04: 5d 71 05 08  	.word	0x0805715d
 805ae08: 3d c4 05 08  	.word	0x0805c43d
 805ae0c: 59 58 05 08  	.word	0x08055859
 805ae10: 19 c4 05 08  	.word	0x0805c419
 805ae14: 3d c4 05 08  	.word	0x0805c43d
 805ae18: 81 71 05 08  	.word	0x08057181
 805ae1c: 11 a9 05 08  	.word	0x0805a911
 805ae20: 7d 59 05 08  	.word	0x0805597d
 805ae24: ad ae 05 08  	.word	0x0805aead
 805ae28: ad ae 05 08  	.word	0x0805aead
 805ae2c: 11 a9 05 08  	.word	0x0805a911
 805ae30: 7d 59 05 08  	.word	0x0805597d
 805ae34: 2d 6c 05 08  	.word	0x08056c2d
 805ae38: 11 a9 05 08  	.word	0x0805a911
 805ae3c: 7d 59 05 08  	.word	0x0805597d
 805ae40: ff c3 05 08  	.word	0x0805c3ff
 805ae44: 3d c4 05 08  	.word	0x0805c43d
 805ae48: 65 ae 05 08  	.word	0x0805ae65
 805ae4c: 99 6d 05 08  	.word	0x08056d99
 805ae50: ff c3 05 08  	.word	0x0805c3ff
 805ae54: 3d c4 05 08  	.word	0x0805c43d
 805ae58: 55 cd 05 08  	.word	0x0805cd55
 805ae5c: 55 cd 05 08  	.word	0x0805cd55
 805ae60: 55 cd 05 08  	.word	0x0805cd55

0805ae64 <prvCopyDataFromQueue>:
; {
 805ae64: b580         	push	{r7, lr}
 805ae66: 466f         	mov	r7, sp
 805ae68: b082         	sub	sp, #0x8
 805ae6a: 9001         	str	r0, [sp, #0x4]
 805ae6c: 9100         	str	r1, [sp]
;     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 805ae6e: 9801         	ldr	r0, [sp, #0x4]
 805ae70: 6c00         	ldr	r0, [r0, #0x40]
 805ae72: b1b8         	cbz	r0, 0x805aea4 <prvCopyDataFromQueue+0x40> @ imm = #0x2e
 805ae74: e7ff         	b	0x805ae76 <prvCopyDataFromQueue+0x12> @ imm = #-0x2
;         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 805ae76: 9901         	ldr	r1, [sp, #0x4]
 805ae78: 68c8         	ldr	r0, [r1, #0xc]
 805ae7a: 6c0a         	ldr	r2, [r1, #0x40]
 805ae7c: 4410         	add	r0, r2
 805ae7e: 60c8         	str	r0, [r1, #0xc]
;         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 805ae80: 9801         	ldr	r0, [sp, #0x4]
 805ae82: 6881         	ldr	r1, [r0, #0x8]
 805ae84: 68c0         	ldr	r0, [r0, #0xc]
 805ae86: 4288         	cmp	r0, r1
 805ae88: d304         	blo	0x805ae94 <prvCopyDataFromQueue+0x30> @ imm = #0x8
 805ae8a: e7ff         	b	0x805ae8c <prvCopyDataFromQueue+0x28> @ imm = #-0x2
;             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 805ae8c: 9901         	ldr	r1, [sp, #0x4]
 805ae8e: 6808         	ldr	r0, [r1]
 805ae90: 60c8         	str	r0, [r1, #0xc]
;         }
 805ae92: e000         	b	0x805ae96 <prvCopyDataFromQueue+0x32> @ imm = #0x0
 805ae94: e7ff         	b	0x805ae96 <prvCopyDataFromQueue+0x32> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 805ae96: 9800         	ldr	r0, [sp]
 805ae98: 9a01         	ldr	r2, [sp, #0x4]
 805ae9a: 68d1         	ldr	r1, [r2, #0xc]
 805ae9c: 6c12         	ldr	r2, [r2, #0x40]
 805ae9e: 4b02         	ldr	r3, [pc, #0x8]          @ 0x805aea8 <prvCopyDataFromQueue+0x44>
 805aea0: 4798         	blx	r3
;     }
 805aea2: e7ff         	b	0x805aea4 <prvCopyDataFromQueue+0x40> @ imm = #-0x2
; }
 805aea4: b002         	add	sp, #0x8
 805aea6: bd80         	pop	{r7, pc}

0805aea8 <$d.37>:
 805aea8: e1 ea 05 08  	.word	0x0805eae1

0805aeac <prvIsQueueEmpty>:
; {
 805aeac: b580         	push	{r7, lr}
 805aeae: 466f         	mov	r7, sp
 805aeb0: b082         	sub	sp, #0x8
 805aeb2: 9001         	str	r0, [sp, #0x4]
;     taskENTER_CRITICAL();
 805aeb4: 4808         	ldr	r0, [pc, #0x20]         @ 0x805aed8 <prvIsQueueEmpty+0x2c>
 805aeb6: 4780         	blx	r0
;         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 805aeb8: 9801         	ldr	r0, [sp, #0x4]
 805aeba: 6b80         	ldr	r0, [r0, #0x38]
 805aebc: b918         	cbnz	r0, 0x805aec6 <prvIsQueueEmpty+0x1a> @ imm = #0x6
 805aebe: e7ff         	b	0x805aec0 <prvIsQueueEmpty+0x14> @ imm = #-0x2
 805aec0: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805aec2: 9000         	str	r0, [sp]
;         }
 805aec4: e002         	b	0x805aecc <prvIsQueueEmpty+0x20> @ imm = #0x4
 805aec6: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805aec8: 9000         	str	r0, [sp]
 805aeca: e7ff         	b	0x805aecc <prvIsQueueEmpty+0x20> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805aecc: 4803         	ldr	r0, [pc, #0xc]          @ 0x805aedc <prvIsQueueEmpty+0x30>
 805aece: 4780         	blx	r0
;     return xReturn;
 805aed0: 9800         	ldr	r0, [sp]
 805aed2: b002         	add	sp, #0x8
 805aed4: bd80         	pop	{r7, pc}
 805aed6: bf00         	nop

0805aed8 <$d.39>:
 805aed8: 19 c4 05 08  	.word	0x0805c419
 805aedc: 3d c4 05 08  	.word	0x0805c43d

0805aee0 <prvGetDisinheritPriorityAfterTimeout>:
;     {
 805aee0: b082         	sub	sp, #0x8
 805aee2: 9001         	str	r0, [sp, #0x4]
;         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 805aee4: 9801         	ldr	r0, [sp, #0x4]
 805aee6: 6a40         	ldr	r0, [r0, #0x24]
 805aee8: b138         	cbz	r0, 0x805aefa <prvGetDisinheritPriorityAfterTimeout+0x1a> @ imm = #0xe
 805aeea: e7ff         	b	0x805aeec <prvGetDisinheritPriorityAfterTimeout+0xc> @ imm = #-0x2
;             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 805aeec: 9801         	ldr	r0, [sp, #0x4]
 805aeee: 6b00         	ldr	r0, [r0, #0x30]
 805aef0: 6800         	ldr	r0, [r0]
 805aef2: f1c0 0010    	rsb.w	r0, r0, #0x10
 805aef6: 9000         	str	r0, [sp]
;         }
 805aef8: e002         	b	0x805af00 <prvGetDisinheritPriorityAfterTimeout+0x20> @ imm = #0x4
 805aefa: 2000         	movs	r0, #0x0
;             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 805aefc: 9000         	str	r0, [sp]
 805aefe: e7ff         	b	0x805af00 <prvGetDisinheritPriorityAfterTimeout+0x20> @ imm = #-0x2
;         return uxHighestPriorityOfWaitingTasks;
 805af00: 9800         	ldr	r0, [sp]
 805af02: b002         	add	sp, #0x8
 805af04: 4770         	bx	lr
 805af06: bf00         	nop

0805af08 <xQueuePeek>:
; {
 805af08: b580         	push	{r7, lr}
 805af0a: 466f         	mov	r7, sp
 805af0c: b08c         	sub	sp, #0x30
 805af0e: 900a         	str	r0, [sp, #0x28]
 805af10: 9109         	str	r1, [sp, #0x24]
 805af12: 9208         	str	r2, [sp, #0x20]
 805af14: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805af16: 9007         	str	r0, [sp, #0x1c]
;     Queue_t * const pxQueue = xQueue;
 805af18: 980a         	ldr	r0, [sp, #0x28]
 805af1a: 9003         	str	r0, [sp, #0xc]
;     configASSERT( ( pxQueue ) );
 805af1c: 9803         	ldr	r0, [sp, #0xc]
 805af1e: b920         	cbnz	r0, 0x805af2a <xQueuePeek+0x22> @ imm = #0x8
 805af20: e7ff         	b	0x805af22 <xQueuePeek+0x1a> @ imm = #-0x2
 805af22: 4877         	ldr	r0, [pc, #0x1dc]        @ 0x805b100 <xQueuePeek+0x1f8>
 805af24: 4780         	blx	r0
 805af26: e7ff         	b	0x805af28 <xQueuePeek+0x20> @ imm = #-0x2
 805af28: e7fe         	b	0x805af28 <xQueuePeek+0x20> @ imm = #-0x4
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805af2a: 9909         	ldr	r1, [sp, #0x24]
 805af2c: 2000         	movs	r0, #0x0
 805af2e: 9001         	str	r0, [sp, #0x4]
 805af30: b939         	cbnz	r1, 0x805af42 <xQueuePeek+0x3a> @ imm = #0xe
 805af32: e7ff         	b	0x805af34 <xQueuePeek+0x2c> @ imm = #-0x2
 805af34: 9803         	ldr	r0, [sp, #0xc]
 805af36: 6c00         	ldr	r0, [r0, #0x40]
 805af38: 2800         	cmp	r0, #0x0
 805af3a: bf18         	it	ne
 805af3c: 2001         	movne	r0, #0x1
 805af3e: 9001         	str	r0, [sp, #0x4]
 805af40: e7ff         	b	0x805af42 <xQueuePeek+0x3a> @ imm = #-0x2
 805af42: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805af44: 07c0         	lsls	r0, r0, #0x1f
 805af46: b120         	cbz	r0, 0x805af52 <xQueuePeek+0x4a> @ imm = #0x8
 805af48: e7ff         	b	0x805af4a <xQueuePeek+0x42> @ imm = #-0x2
 805af4a: 486c         	ldr	r0, [pc, #0x1b0]        @ 0x805b0fc <xQueuePeek+0x1f4>
 805af4c: 4780         	blx	r0
 805af4e: e7ff         	b	0x805af50 <xQueuePeek+0x48> @ imm = #-0x2
 805af50: e7fe         	b	0x805af50 <xQueuePeek+0x48> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805af52: 4852         	ldr	r0, [pc, #0x148]        @ 0x805b09c <xQueuePeek+0x194>
 805af54: 4780         	blx	r0
 805af56: 4601         	mov	r1, r0
 805af58: 2000         	movs	r0, #0x0
 805af5a: 9000         	str	r0, [sp]
 805af5c: b931         	cbnz	r1, 0x805af6c <xQueuePeek+0x64> @ imm = #0xc
 805af5e: e7ff         	b	0x805af60 <xQueuePeek+0x58> @ imm = #-0x2
 805af60: 9808         	ldr	r0, [sp, #0x20]
 805af62: 2800         	cmp	r0, #0x0
 805af64: bf18         	it	ne
 805af66: 2001         	movne	r0, #0x1
 805af68: 9000         	str	r0, [sp]
 805af6a: e7ff         	b	0x805af6c <xQueuePeek+0x64> @ imm = #-0x2
 805af6c: 9800         	ldr	r0, [sp]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805af6e: 07c0         	lsls	r0, r0, #0x1f
 805af70: b120         	cbz	r0, 0x805af7c <xQueuePeek+0x74> @ imm = #0x8
 805af72: e7ff         	b	0x805af74 <xQueuePeek+0x6c> @ imm = #-0x2
 805af74: 4860         	ldr	r0, [pc, #0x180]        @ 0x805b0f8 <xQueuePeek+0x1f0>
 805af76: 4780         	blx	r0
 805af78: e7ff         	b	0x805af7a <xQueuePeek+0x72> @ imm = #-0x2
 805af7a: e7fe         	b	0x805af7a <xQueuePeek+0x72> @ imm = #-0x4
;     for( ; ; )
 805af7c: e7ff         	b	0x805af7e <xQueuePeek+0x76> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805af7e: 4848         	ldr	r0, [pc, #0x120]        @ 0x805b0a0 <xQueuePeek+0x198>
 805af80: 4780         	blx	r0
;             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805af82: 9803         	ldr	r0, [sp, #0xc]
 805af84: 6b80         	ldr	r0, [r0, #0x38]
 805af86: 9002         	str	r0, [sp, #0x8]
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805af88: 9802         	ldr	r0, [sp, #0x8]
 805af8a: b1f8         	cbz	r0, 0x805afcc <xQueuePeek+0xc4> @ imm = #0x3e
 805af8c: e7ff         	b	0x805af8e <xQueuePeek+0x86> @ imm = #-0x2
;                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 805af8e: 9803         	ldr	r0, [sp, #0xc]
 805af90: 68c0         	ldr	r0, [r0, #0xc]
 805af92: 9004         	str	r0, [sp, #0x10]
;                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 805af94: 9803         	ldr	r0, [sp, #0xc]
 805af96: 9909         	ldr	r1, [sp, #0x24]
 805af98: 4a53         	ldr	r2, [pc, #0x14c]        @ 0x805b0e8 <xQueuePeek+0x1e0>
 805af9a: 4790         	blx	r2
;                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 805af9c: 9804         	ldr	r0, [sp, #0x10]
 805af9e: 9903         	ldr	r1, [sp, #0xc]
 805afa0: 60c8         	str	r0, [r1, #0xc]
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805afa2: 9803         	ldr	r0, [sp, #0xc]
 805afa4: 6a40         	ldr	r0, [r0, #0x24]
 805afa6: b158         	cbz	r0, 0x805afc0 <xQueuePeek+0xb8> @ imm = #0x16
 805afa8: e7ff         	b	0x805afaa <xQueuePeek+0xa2> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805afaa: 9803         	ldr	r0, [sp, #0xc]
 805afac: 3024         	adds	r0, #0x24
 805afae: 494f         	ldr	r1, [pc, #0x13c]        @ 0x805b0ec <xQueuePeek+0x1e4>
 805afb0: 4788         	blx	r1
 805afb2: b118         	cbz	r0, 0x805afbc <xQueuePeek+0xb4> @ imm = #0x6
 805afb4: e7ff         	b	0x805afb6 <xQueuePeek+0xae> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805afb6: 484e         	ldr	r0, [pc, #0x138]        @ 0x805b0f0 <xQueuePeek+0x1e8>
 805afb8: 4780         	blx	r0
;                     }
 805afba: e000         	b	0x805afbe <xQueuePeek+0xb6> @ imm = #0x0
 805afbc: e7ff         	b	0x805afbe <xQueuePeek+0xb6> @ imm = #-0x2
;                 }
 805afbe: e000         	b	0x805afc2 <xQueuePeek+0xba> @ imm = #0x0
 805afc0: e7ff         	b	0x805afc2 <xQueuePeek+0xba> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805afc2: 484c         	ldr	r0, [pc, #0x130]        @ 0x805b0f4 <xQueuePeek+0x1ec>
 805afc4: 4780         	blx	r0
 805afc6: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805afc8: 900b         	str	r0, [sp, #0x2c]
 805afca: e064         	b	0x805b096 <xQueuePeek+0x18e> @ imm = #0xc8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805afcc: 9808         	ldr	r0, [sp, #0x20]
 805afce: b928         	cbnz	r0, 0x805afdc <xQueuePeek+0xd4> @ imm = #0xa
 805afd0: e7ff         	b	0x805afd2 <xQueuePeek+0xca> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805afd2: 4844         	ldr	r0, [pc, #0x110]        @ 0x805b0e4 <xQueuePeek+0x1dc>
 805afd4: 4780         	blx	r0
 805afd6: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805afd8: 900b         	str	r0, [sp, #0x2c]
 805afda: e05c         	b	0x805b096 <xQueuePeek+0x18e> @ imm = #0xb8
;                 else if( xEntryTimeSet == pdFALSE )
 805afdc: 9807         	ldr	r0, [sp, #0x1c]
 805afde: b930         	cbnz	r0, 0x805afee <xQueuePeek+0xe6> @ imm = #0xc
 805afe0: e7ff         	b	0x805afe2 <xQueuePeek+0xda> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805afe2: 4930         	ldr	r1, [pc, #0xc0]         @ 0x805b0a4 <xQueuePeek+0x19c>
 805afe4: a805         	add	r0, sp, #0x14
 805afe6: 4788         	blx	r1
 805afe8: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805afea: 9007         	str	r0, [sp, #0x1c]
;                 }
 805afec: e000         	b	0x805aff0 <xQueuePeek+0xe8> @ imm = #0x0
 805afee: e7ff         	b	0x805aff0 <xQueuePeek+0xe8> @ imm = #-0x2
 805aff0: e7ff         	b	0x805aff2 <xQueuePeek+0xea> @ imm = #-0x2
 805aff2: e7ff         	b	0x805aff4 <xQueuePeek+0xec> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805aff4: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805b0a8 <xQueuePeek+0x1a0>
 805aff6: 4780         	blx	r0
;         vTaskSuspendAll();
 805aff8: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805b0ac <xQueuePeek+0x1a4>
 805affa: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805affc: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805b0b0 <xQueuePeek+0x1a8>
 805affe: 4780         	blx	r0
 805b000: 9803         	ldr	r0, [sp, #0xc]
 805b002: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805b006: 3001         	adds	r0, #0x1
 805b008: b928         	cbnz	r0, 0x805b016 <xQueuePeek+0x10e> @ imm = #0xa
 805b00a: e7ff         	b	0x805b00c <xQueuePeek+0x104> @ imm = #-0x2
 805b00c: 9903         	ldr	r1, [sp, #0xc]
 805b00e: 2000         	movs	r0, #0x0
 805b010: f881 0044    	strb.w	r0, [r1, #0x44]
 805b014: e7ff         	b	0x805b016 <xQueuePeek+0x10e> @ imm = #-0x2
 805b016: 9803         	ldr	r0, [sp, #0xc]
 805b018: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805b01c: 3001         	adds	r0, #0x1
 805b01e: b928         	cbnz	r0, 0x805b02c <xQueuePeek+0x124> @ imm = #0xa
 805b020: e7ff         	b	0x805b022 <xQueuePeek+0x11a> @ imm = #-0x2
 805b022: 9903         	ldr	r1, [sp, #0xc]
 805b024: 2000         	movs	r0, #0x0
 805b026: f881 0045    	strb.w	r0, [r1, #0x45]
 805b02a: e7ff         	b	0x805b02c <xQueuePeek+0x124> @ imm = #-0x2
 805b02c: 4821         	ldr	r0, [pc, #0x84]         @ 0x805b0b4 <xQueuePeek+0x1ac>
 805b02e: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805b030: 4a21         	ldr	r2, [pc, #0x84]         @ 0x805b0b8 <xQueuePeek+0x1b0>
 805b032: a805         	add	r0, sp, #0x14
 805b034: a908         	add	r1, sp, #0x20
 805b036: 4790         	blx	r2
 805b038: b9e8         	cbnz	r0, 0x805b076 <xQueuePeek+0x16e> @ imm = #0x3a
 805b03a: e7ff         	b	0x805b03c <xQueuePeek+0x134> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805b03c: 9803         	ldr	r0, [sp, #0xc]
 805b03e: 4922         	ldr	r1, [pc, #0x88]         @ 0x805b0c8 <xQueuePeek+0x1c0>
 805b040: 4788         	blx	r1
 805b042: b188         	cbz	r0, 0x805b068 <xQueuePeek+0x160> @ imm = #0x22
 805b044: e7ff         	b	0x805b046 <xQueuePeek+0x13e> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805b046: 9803         	ldr	r0, [sp, #0xc]
 805b048: 3024         	adds	r0, #0x24
 805b04a: 9908         	ldr	r1, [sp, #0x20]
 805b04c: 4a21         	ldr	r2, [pc, #0x84]         @ 0x805b0d4 <xQueuePeek+0x1cc>
 805b04e: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805b050: 9803         	ldr	r0, [sp, #0xc]
 805b052: 4921         	ldr	r1, [pc, #0x84]         @ 0x805b0d8 <xQueuePeek+0x1d0>
 805b054: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805b056: 4821         	ldr	r0, [pc, #0x84]         @ 0x805b0dc <xQueuePeek+0x1d4>
 805b058: 4780         	blx	r0
 805b05a: b918         	cbnz	r0, 0x805b064 <xQueuePeek+0x15c> @ imm = #0x6
 805b05c: e7ff         	b	0x805b05e <xQueuePeek+0x156> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805b05e: 4820         	ldr	r0, [pc, #0x80]         @ 0x805b0e0 <xQueuePeek+0x1d8>
 805b060: 4780         	blx	r0
;                 }
 805b062: e000         	b	0x805b066 <xQueuePeek+0x15e> @ imm = #0x0
 805b064: e7ff         	b	0x805b066 <xQueuePeek+0x15e> @ imm = #-0x2
;             }
 805b066: e005         	b	0x805b074 <xQueuePeek+0x16c> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805b068: 9803         	ldr	r0, [sp, #0xc]
 805b06a: 4918         	ldr	r1, [pc, #0x60]         @ 0x805b0cc <xQueuePeek+0x1c4>
 805b06c: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805b06e: 4818         	ldr	r0, [pc, #0x60]         @ 0x805b0d0 <xQueuePeek+0x1c8>
 805b070: 4780         	blx	r0
 805b072: e7ff         	b	0x805b074 <xQueuePeek+0x16c> @ imm = #-0x2
;         }
 805b074: e00e         	b	0x805b094 <xQueuePeek+0x18c> @ imm = #0x1c
;             prvUnlockQueue( pxQueue );
 805b076: 9803         	ldr	r0, [sp, #0xc]
 805b078: 4910         	ldr	r1, [pc, #0x40]         @ 0x805b0bc <xQueuePeek+0x1b4>
 805b07a: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805b07c: 4810         	ldr	r0, [pc, #0x40]         @ 0x805b0c0 <xQueuePeek+0x1b8>
 805b07e: 4780         	blx	r0
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805b080: 9803         	ldr	r0, [sp, #0xc]
 805b082: 4910         	ldr	r1, [pc, #0x40]         @ 0x805b0c4 <xQueuePeek+0x1bc>
 805b084: 4788         	blx	r1
 805b086: b118         	cbz	r0, 0x805b090 <xQueuePeek+0x188> @ imm = #0x6
 805b088: e7ff         	b	0x805b08a <xQueuePeek+0x182> @ imm = #-0x2
 805b08a: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805b08c: 900b         	str	r0, [sp, #0x2c]
 805b08e: e002         	b	0x805b096 <xQueuePeek+0x18e> @ imm = #0x4
 805b090: e7ff         	b	0x805b092 <xQueuePeek+0x18a> @ imm = #-0x2
 805b092: e7ff         	b	0x805b094 <xQueuePeek+0x18c> @ imm = #-0x2
;     for( ; ; )
 805b094: e773         	b	0x805af7e <xQueuePeek+0x76> @ imm = #-0x11a
; }
 805b096: 980b         	ldr	r0, [sp, #0x2c]
 805b098: b00c         	add	sp, #0x30
 805b09a: bd80         	pop	{r7, pc}

0805b09c <$d.41>:
 805b09c: 8d 74 05 08  	.word	0x0805748d
 805b0a0: 19 c4 05 08  	.word	0x0805c419
 805b0a4: 5d 71 05 08  	.word	0x0805715d
 805b0a8: 3d c4 05 08  	.word	0x0805c43d
 805b0ac: 59 58 05 08  	.word	0x08055859
 805b0b0: 19 c4 05 08  	.word	0x0805c419
 805b0b4: 3d c4 05 08  	.word	0x0805c43d
 805b0b8: 81 71 05 08  	.word	0x08057181
 805b0bc: 11 a9 05 08  	.word	0x0805a911
 805b0c0: 7d 59 05 08  	.word	0x0805597d
 805b0c4: ad ae 05 08  	.word	0x0805aead
 805b0c8: ad ae 05 08  	.word	0x0805aead
 805b0cc: 11 a9 05 08  	.word	0x0805a911
 805b0d0: 7d 59 05 08  	.word	0x0805597d
 805b0d4: 2d 6c 05 08  	.word	0x08056c2d
 805b0d8: 11 a9 05 08  	.word	0x0805a911
 805b0dc: 7d 59 05 08  	.word	0x0805597d
 805b0e0: ff c3 05 08  	.word	0x0805c3ff
 805b0e4: 3d c4 05 08  	.word	0x0805c43d
 805b0e8: 65 ae 05 08  	.word	0x0805ae65
 805b0ec: 99 6d 05 08  	.word	0x08056d99
 805b0f0: ff c3 05 08  	.word	0x0805c3ff
 805b0f4: 3d c4 05 08  	.word	0x0805c43d
 805b0f8: 55 cd 05 08  	.word	0x0805cd55
 805b0fc: 55 cd 05 08  	.word	0x0805cd55
 805b100: 55 cd 05 08  	.word	0x0805cd55

0805b104 <xQueueReceiveFromISR>:
; {
 805b104: b580         	push	{r7, lr}
 805b106: 466f         	mov	r7, sp
 805b108: b08a         	sub	sp, #0x28
 805b10a: 9009         	str	r0, [sp, #0x24]
 805b10c: 9108         	str	r1, [sp, #0x20]
 805b10e: 9207         	str	r2, [sp, #0x1c]
;     Queue_t * const pxQueue = xQueue;
 805b110: 9809         	ldr	r0, [sp, #0x24]
 805b112: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxQueue );
 805b114: 9804         	ldr	r0, [sp, #0x10]
 805b116: b920         	cbnz	r0, 0x805b122 <xQueueReceiveFromISR+0x1e> @ imm = #0x8
 805b118: e7ff         	b	0x805b11a <xQueueReceiveFromISR+0x16> @ imm = #-0x2
 805b11a: 4842         	ldr	r0, [pc, #0x108]        @ 0x805b224 <xQueueReceiveFromISR+0x120>
 805b11c: 4780         	blx	r0
 805b11e: e7ff         	b	0x805b120 <xQueueReceiveFromISR+0x1c> @ imm = #-0x2
 805b120: e7fe         	b	0x805b120 <xQueueReceiveFromISR+0x1c> @ imm = #-0x4
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805b122: 9908         	ldr	r1, [sp, #0x20]
 805b124: 2000         	movs	r0, #0x0
 805b126: 9000         	str	r0, [sp]
 805b128: b939         	cbnz	r1, 0x805b13a <xQueueReceiveFromISR+0x36> @ imm = #0xe
 805b12a: e7ff         	b	0x805b12c <xQueueReceiveFromISR+0x28> @ imm = #-0x2
 805b12c: 9804         	ldr	r0, [sp, #0x10]
 805b12e: 6c00         	ldr	r0, [r0, #0x40]
 805b130: 2800         	cmp	r0, #0x0
 805b132: bf18         	it	ne
 805b134: 2001         	movne	r0, #0x1
 805b136: 9000         	str	r0, [sp]
 805b138: e7ff         	b	0x805b13a <xQueueReceiveFromISR+0x36> @ imm = #-0x2
 805b13a: 9800         	ldr	r0, [sp]
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805b13c: 07c0         	lsls	r0, r0, #0x1f
 805b13e: b120         	cbz	r0, 0x805b14a <xQueueReceiveFromISR+0x46> @ imm = #0x8
 805b140: e7ff         	b	0x805b142 <xQueueReceiveFromISR+0x3e> @ imm = #-0x2
 805b142: 4837         	ldr	r0, [pc, #0xdc]         @ 0x805b220 <xQueueReceiveFromISR+0x11c>
 805b144: 4780         	blx	r0
 805b146: e7ff         	b	0x805b148 <xQueueReceiveFromISR+0x44> @ imm = #-0x2
 805b148: e7fe         	b	0x805b148 <xQueueReceiveFromISR+0x44> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805b14a: 482e         	ldr	r0, [pc, #0xb8]         @ 0x805b204 <xQueueReceiveFromISR+0x100>
 805b14c: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805b14e: 482e         	ldr	r0, [pc, #0xb8]         @ 0x805b208 <xQueueReceiveFromISR+0x104>
 805b150: 4780         	blx	r0
 805b152: 9005         	str	r0, [sp, #0x14]
;         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805b154: 9804         	ldr	r0, [sp, #0x10]
 805b156: 6b80         	ldr	r0, [r0, #0x38]
 805b158: 9003         	str	r0, [sp, #0xc]
;         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805b15a: 9803         	ldr	r0, [sp, #0xc]
 805b15c: 2800         	cmp	r0, #0x0
 805b15e: d048         	beq	0x805b1f2 <xQueueReceiveFromISR+0xee> @ imm = #0x90
 805b160: e7ff         	b	0x805b162 <xQueueReceiveFromISR+0x5e> @ imm = #-0x2
;             const int8_t cRxLock = pxQueue->cRxLock;
 805b162: 9804         	ldr	r0, [sp, #0x10]
 805b164: f890 0044    	ldrb.w	r0, [r0, #0x44]
 805b168: f807 0c1d    	strb	r0, [r7, #-29]
;             prvCopyDataFromQueue( pxQueue, pvBuffer );
 805b16c: 9804         	ldr	r0, [sp, #0x10]
 805b16e: 9908         	ldr	r1, [sp, #0x20]
 805b170: 4a26         	ldr	r2, [pc, #0x98]         @ 0x805b20c <xQueueReceiveFromISR+0x108>
 805b172: 4790         	blx	r2
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 805b174: 9803         	ldr	r0, [sp, #0xc]
 805b176: 3801         	subs	r0, #0x1
 805b178: 9904         	ldr	r1, [sp, #0x10]
 805b17a: 6388         	str	r0, [r1, #0x38]
;             if( cRxLock == queueUNLOCKED )
 805b17c: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805b180: 3001         	adds	r0, #0x1
 805b182: b9b8         	cbnz	r0, 0x805b1b4 <xQueueReceiveFromISR+0xb0> @ imm = #0x2e
 805b184: e7ff         	b	0x805b186 <xQueueReceiveFromISR+0x82> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805b186: 9804         	ldr	r0, [sp, #0x10]
 805b188: 6900         	ldr	r0, [r0, #0x10]
 805b18a: b188         	cbz	r0, 0x805b1b0 <xQueueReceiveFromISR+0xac> @ imm = #0x22
 805b18c: e7ff         	b	0x805b18e <xQueueReceiveFromISR+0x8a> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805b18e: 9804         	ldr	r0, [sp, #0x10]
 805b190: 3010         	adds	r0, #0x10
 805b192: 4921         	ldr	r1, [pc, #0x84]         @ 0x805b218 <xQueueReceiveFromISR+0x114>
 805b194: 4788         	blx	r1
 805b196: b148         	cbz	r0, 0x805b1ac <xQueueReceiveFromISR+0xa8> @ imm = #0x12
 805b198: e7ff         	b	0x805b19a <xQueueReceiveFromISR+0x96> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 805b19a: 9807         	ldr	r0, [sp, #0x1c]
 805b19c: b120         	cbz	r0, 0x805b1a8 <xQueueReceiveFromISR+0xa4> @ imm = #0x8
 805b19e: e7ff         	b	0x805b1a0 <xQueueReceiveFromISR+0x9c> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 805b1a0: 9907         	ldr	r1, [sp, #0x1c]
 805b1a2: 2001         	movs	r0, #0x1
 805b1a4: 6008         	str	r0, [r1]
;                         }
 805b1a6: e000         	b	0x805b1aa <xQueueReceiveFromISR+0xa6> @ imm = #0x0
 805b1a8: e7ff         	b	0x805b1aa <xQueueReceiveFromISR+0xa6> @ imm = #-0x2
;                     }
 805b1aa: e000         	b	0x805b1ae <xQueueReceiveFromISR+0xaa> @ imm = #0x0
 805b1ac: e7ff         	b	0x805b1ae <xQueueReceiveFromISR+0xaa> @ imm = #-0x2
;                 }
 805b1ae: e000         	b	0x805b1b2 <xQueueReceiveFromISR+0xae> @ imm = #0x0
 805b1b0: e7ff         	b	0x805b1b2 <xQueueReceiveFromISR+0xae> @ imm = #-0x2
;             }
 805b1b2: e01b         	b	0x805b1ec <xQueueReceiveFromISR+0xe8> @ imm = #0x36
;                 prvIncrementQueueRxLock( pxQueue, cRxLock );
 805b1b4: e7ff         	b	0x805b1b6 <xQueueReceiveFromISR+0xb2> @ imm = #-0x2
 805b1b6: 4816         	ldr	r0, [pc, #0x58]         @ 0x805b210 <xQueueReceiveFromISR+0x10c>
 805b1b8: 4780         	blx	r0
 805b1ba: 9001         	str	r0, [sp, #0x4]
 805b1bc: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805b1c0: 9901         	ldr	r1, [sp, #0x4]
 805b1c2: 4288         	cmp	r0, r1
 805b1c4: d210         	bhs	0x805b1e8 <xQueueReceiveFromISR+0xe4> @ imm = #0x20
 805b1c6: e7ff         	b	0x805b1c8 <xQueueReceiveFromISR+0xc4> @ imm = #-0x2
 805b1c8: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805b1cc: 287f         	cmp	r0, #0x7f
 805b1ce: d104         	bne	0x805b1da <xQueueReceiveFromISR+0xd6> @ imm = #0x8
 805b1d0: e7ff         	b	0x805b1d2 <xQueueReceiveFromISR+0xce> @ imm = #-0x2
 805b1d2: 4810         	ldr	r0, [pc, #0x40]         @ 0x805b214 <xQueueReceiveFromISR+0x110>
 805b1d4: 4780         	blx	r0
 805b1d6: e7ff         	b	0x805b1d8 <xQueueReceiveFromISR+0xd4> @ imm = #-0x2
 805b1d8: e7fe         	b	0x805b1d8 <xQueueReceiveFromISR+0xd4> @ imm = #-0x4
 805b1da: f817 0c1d    	ldrb	r0, [r7, #-29]
 805b1de: 3001         	adds	r0, #0x1
 805b1e0: 9904         	ldr	r1, [sp, #0x10]
 805b1e2: f881 0044    	strb.w	r0, [r1, #0x44]
 805b1e6: e7ff         	b	0x805b1e8 <xQueueReceiveFromISR+0xe4> @ imm = #-0x2
 805b1e8: e7ff         	b	0x805b1ea <xQueueReceiveFromISR+0xe6> @ imm = #-0x2
 805b1ea: e7ff         	b	0x805b1ec <xQueueReceiveFromISR+0xe8> @ imm = #-0x2
 805b1ec: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805b1ee: 9006         	str	r0, [sp, #0x18]
;         }
 805b1f0: e002         	b	0x805b1f8 <xQueueReceiveFromISR+0xf4> @ imm = #0x4
 805b1f2: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805b1f4: 9006         	str	r0, [sp, #0x18]
 805b1f6: e7ff         	b	0x805b1f8 <xQueueReceiveFromISR+0xf4> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805b1f8: 9805         	ldr	r0, [sp, #0x14]
 805b1fa: 4908         	ldr	r1, [pc, #0x20]         @ 0x805b21c <xQueueReceiveFromISR+0x118>
 805b1fc: 4788         	blx	r1
;     return xReturn;
 805b1fe: 9806         	ldr	r0, [sp, #0x18]
 805b200: b00a         	add	sp, #0x28
 805b202: bd80         	pop	{r7, pc}

0805b204 <$d.43>:
 805b204: 45 ea 05 08  	.word	0x0805ea45
 805b208: 55 cd 05 08  	.word	0x0805cd55
 805b20c: 65 ae 05 08  	.word	0x0805ae65
 805b210: 9d 69 05 08  	.word	0x0805699d
 805b214: 55 cd 05 08  	.word	0x0805cd55
 805b218: 99 6d 05 08  	.word	0x08056d99
 805b21c: 6b cd 05 08  	.word	0x0805cd6b
 805b220: 55 cd 05 08  	.word	0x0805cd55
 805b224: 55 cd 05 08  	.word	0x0805cd55

0805b228 <xQueuePeekFromISR>:
; {
 805b228: b580         	push	{r7, lr}
 805b22a: 466f         	mov	r7, sp
 805b22c: b088         	sub	sp, #0x20
 805b22e: 9007         	str	r0, [sp, #0x1c]
 805b230: 9106         	str	r1, [sp, #0x18]
;     Queue_t * const pxQueue = xQueue;
 805b232: 9807         	ldr	r0, [sp, #0x1c]
 805b234: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxQueue );
 805b236: 9802         	ldr	r0, [sp, #0x8]
 805b238: b920         	cbnz	r0, 0x805b244 <xQueuePeekFromISR+0x1c> @ imm = #0x8
 805b23a: e7ff         	b	0x805b23c <xQueuePeekFromISR+0x14> @ imm = #-0x2
 805b23c: 4825         	ldr	r0, [pc, #0x94]         @ 0x805b2d4 <xQueuePeekFromISR+0xac>
 805b23e: 4780         	blx	r0
 805b240: e7ff         	b	0x805b242 <xQueuePeekFromISR+0x1a> @ imm = #-0x2
 805b242: e7fe         	b	0x805b242 <xQueuePeekFromISR+0x1a> @ imm = #-0x4
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805b244: 9906         	ldr	r1, [sp, #0x18]
 805b246: 2000         	movs	r0, #0x0
 805b248: 9001         	str	r0, [sp, #0x4]
 805b24a: b939         	cbnz	r1, 0x805b25c <xQueuePeekFromISR+0x34> @ imm = #0xe
 805b24c: e7ff         	b	0x805b24e <xQueuePeekFromISR+0x26> @ imm = #-0x2
 805b24e: 9802         	ldr	r0, [sp, #0x8]
 805b250: 6c00         	ldr	r0, [r0, #0x40]
 805b252: 2800         	cmp	r0, #0x0
 805b254: bf18         	it	ne
 805b256: 2001         	movne	r0, #0x1
 805b258: 9001         	str	r0, [sp, #0x4]
 805b25a: e7ff         	b	0x805b25c <xQueuePeekFromISR+0x34> @ imm = #-0x2
 805b25c: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805b25e: 07c0         	lsls	r0, r0, #0x1f
 805b260: b120         	cbz	r0, 0x805b26c <xQueuePeekFromISR+0x44> @ imm = #0x8
 805b262: e7ff         	b	0x805b264 <xQueuePeekFromISR+0x3c> @ imm = #-0x2
 805b264: 481a         	ldr	r0, [pc, #0x68]         @ 0x805b2d0 <xQueuePeekFromISR+0xa8>
 805b266: 4780         	blx	r0
 805b268: e7ff         	b	0x805b26a <xQueuePeekFromISR+0x42> @ imm = #-0x2
 805b26a: e7fe         	b	0x805b26a <xQueuePeekFromISR+0x42> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 805b26c: 9802         	ldr	r0, [sp, #0x8]
 805b26e: 6c00         	ldr	r0, [r0, #0x40]
 805b270: b920         	cbnz	r0, 0x805b27c <xQueuePeekFromISR+0x54> @ imm = #0x8
 805b272: e7ff         	b	0x805b274 <xQueuePeekFromISR+0x4c> @ imm = #-0x2
 805b274: 4815         	ldr	r0, [pc, #0x54]         @ 0x805b2cc <xQueuePeekFromISR+0xa4>
 805b276: 4780         	blx	r0
 805b278: e7ff         	b	0x805b27a <xQueuePeekFromISR+0x52> @ imm = #-0x2
 805b27a: e7fe         	b	0x805b27a <xQueuePeekFromISR+0x52> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805b27c: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805b2bc <xQueuePeekFromISR+0x94>
 805b27e: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805b280: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805b2c0 <xQueuePeekFromISR+0x98>
 805b282: 4780         	blx	r0
 805b284: 9004         	str	r0, [sp, #0x10]
;         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 805b286: 9802         	ldr	r0, [sp, #0x8]
 805b288: 6b80         	ldr	r0, [r0, #0x38]
 805b28a: b168         	cbz	r0, 0x805b2a8 <xQueuePeekFromISR+0x80> @ imm = #0x1a
 805b28c: e7ff         	b	0x805b28e <xQueuePeekFromISR+0x66> @ imm = #-0x2
;             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 805b28e: 9802         	ldr	r0, [sp, #0x8]
 805b290: 68c0         	ldr	r0, [r0, #0xc]
 805b292: 9003         	str	r0, [sp, #0xc]
;             prvCopyDataFromQueue( pxQueue, pvBuffer );
 805b294: 9802         	ldr	r0, [sp, #0x8]
 805b296: 9906         	ldr	r1, [sp, #0x18]
 805b298: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x805b2c4 <xQueuePeekFromISR+0x9c>
 805b29a: 4790         	blx	r2
;             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 805b29c: 9803         	ldr	r0, [sp, #0xc]
 805b29e: 9902         	ldr	r1, [sp, #0x8]
 805b2a0: 60c8         	str	r0, [r1, #0xc]
 805b2a2: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805b2a4: 9005         	str	r0, [sp, #0x14]
;         }
 805b2a6: e002         	b	0x805b2ae <xQueuePeekFromISR+0x86> @ imm = #0x4
 805b2a8: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805b2aa: 9005         	str	r0, [sp, #0x14]
 805b2ac: e7ff         	b	0x805b2ae <xQueuePeekFromISR+0x86> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805b2ae: 9804         	ldr	r0, [sp, #0x10]
 805b2b0: 4905         	ldr	r1, [pc, #0x14]         @ 0x805b2c8 <xQueuePeekFromISR+0xa0>
 805b2b2: 4788         	blx	r1
;     return xReturn;
 805b2b4: 9805         	ldr	r0, [sp, #0x14]
 805b2b6: b008         	add	sp, #0x20
 805b2b8: bd80         	pop	{r7, pc}
 805b2ba: bf00         	nop

0805b2bc <$d.45>:
 805b2bc: 45 ea 05 08  	.word	0x0805ea45
 805b2c0: 55 cd 05 08  	.word	0x0805cd55
 805b2c4: 65 ae 05 08  	.word	0x0805ae65
 805b2c8: 6b cd 05 08  	.word	0x0805cd6b
 805b2cc: 55 cd 05 08  	.word	0x0805cd55
 805b2d0: 55 cd 05 08  	.word	0x0805cd55
 805b2d4: 55 cd 05 08  	.word	0x0805cd55

0805b2d8 <uxQueueMessagesWaiting>:
; {
 805b2d8: b580         	push	{r7, lr}
 805b2da: 466f         	mov	r7, sp
 805b2dc: b082         	sub	sp, #0x8
 805b2de: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xQueue );
 805b2e0: 9801         	ldr	r0, [sp, #0x4]
 805b2e2: b920         	cbnz	r0, 0x805b2ee <uxQueueMessagesWaiting+0x16> @ imm = #0x8
 805b2e4: e7ff         	b	0x805b2e6 <uxQueueMessagesWaiting+0xe> @ imm = #-0x2
 805b2e6: 4809         	ldr	r0, [pc, #0x24]         @ 0x805b30c <uxQueueMessagesWaiting+0x34>
 805b2e8: 4780         	blx	r0
 805b2ea: e7ff         	b	0x805b2ec <uxQueueMessagesWaiting+0x14> @ imm = #-0x2
 805b2ec: e7fe         	b	0x805b2ec <uxQueueMessagesWaiting+0x14> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805b2ee: 4805         	ldr	r0, [pc, #0x14]         @ 0x805b304 <uxQueueMessagesWaiting+0x2c>
 805b2f0: 4780         	blx	r0
;         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 805b2f2: 9801         	ldr	r0, [sp, #0x4]
 805b2f4: 6b80         	ldr	r0, [r0, #0x38]
 805b2f6: 9000         	str	r0, [sp]
;     taskEXIT_CRITICAL();
 805b2f8: 4803         	ldr	r0, [pc, #0xc]          @ 0x805b308 <uxQueueMessagesWaiting+0x30>
 805b2fa: 4780         	blx	r0
;     return uxReturn;
 805b2fc: 9800         	ldr	r0, [sp]
 805b2fe: b002         	add	sp, #0x8
 805b300: bd80         	pop	{r7, pc}
 805b302: bf00         	nop

0805b304 <$d.47>:
 805b304: 19 c4 05 08  	.word	0x0805c419
 805b308: 3d c4 05 08  	.word	0x0805c43d
 805b30c: 55 cd 05 08  	.word	0x0805cd55

0805b310 <uxQueueSpacesAvailable>:
; {
 805b310: b580         	push	{r7, lr}
 805b312: 466f         	mov	r7, sp
 805b314: b084         	sub	sp, #0x10
 805b316: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805b318: 9803         	ldr	r0, [sp, #0xc]
 805b31a: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805b31c: 9801         	ldr	r0, [sp, #0x4]
 805b31e: b920         	cbnz	r0, 0x805b32a <uxQueueSpacesAvailable+0x1a> @ imm = #0x8
 805b320: e7ff         	b	0x805b322 <uxQueueSpacesAvailable+0x12> @ imm = #-0x2
 805b322: 480a         	ldr	r0, [pc, #0x28]         @ 0x805b34c <uxQueueSpacesAvailable+0x3c>
 805b324: 4780         	blx	r0
 805b326: e7ff         	b	0x805b328 <uxQueueSpacesAvailable+0x18> @ imm = #-0x2
 805b328: e7fe         	b	0x805b328 <uxQueueSpacesAvailable+0x18> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805b32a: 4806         	ldr	r0, [pc, #0x18]         @ 0x805b344 <uxQueueSpacesAvailable+0x34>
 805b32c: 4780         	blx	r0
;         uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 805b32e: 9901         	ldr	r1, [sp, #0x4]
 805b330: 6bc8         	ldr	r0, [r1, #0x3c]
 805b332: 6b89         	ldr	r1, [r1, #0x38]
 805b334: 1a40         	subs	r0, r0, r1
 805b336: 9002         	str	r0, [sp, #0x8]
;     taskEXIT_CRITICAL();
 805b338: 4803         	ldr	r0, [pc, #0xc]          @ 0x805b348 <uxQueueSpacesAvailable+0x38>
 805b33a: 4780         	blx	r0
;     return uxReturn;
 805b33c: 9802         	ldr	r0, [sp, #0x8]
 805b33e: b004         	add	sp, #0x10
 805b340: bd80         	pop	{r7, pc}
 805b342: bf00         	nop

0805b344 <$d.49>:
 805b344: 19 c4 05 08  	.word	0x0805c419
 805b348: 3d c4 05 08  	.word	0x0805c43d
 805b34c: 55 cd 05 08  	.word	0x0805cd55

0805b350 <uxQueueMessagesWaitingFromISR>:
; {
 805b350: b580         	push	{r7, lr}
 805b352: 466f         	mov	r7, sp
 805b354: b084         	sub	sp, #0x10
 805b356: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805b358: 9803         	ldr	r0, [sp, #0xc]
 805b35a: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805b35c: 9801         	ldr	r0, [sp, #0x4]
 805b35e: b920         	cbnz	r0, 0x805b36a <uxQueueMessagesWaitingFromISR+0x1a> @ imm = #0x8
 805b360: e7ff         	b	0x805b362 <uxQueueMessagesWaitingFromISR+0x12> @ imm = #-0x2
 805b362: 4805         	ldr	r0, [pc, #0x14]         @ 0x805b378 <uxQueueMessagesWaitingFromISR+0x28>
 805b364: 4780         	blx	r0
 805b366: e7ff         	b	0x805b368 <uxQueueMessagesWaitingFromISR+0x18> @ imm = #-0x2
 805b368: e7fe         	b	0x805b368 <uxQueueMessagesWaitingFromISR+0x18> @ imm = #-0x4
;     uxReturn = pxQueue->uxMessagesWaiting;
 805b36a: 9801         	ldr	r0, [sp, #0x4]
 805b36c: 6b80         	ldr	r0, [r0, #0x38]
 805b36e: 9002         	str	r0, [sp, #0x8]
;     return uxReturn;
 805b370: 9802         	ldr	r0, [sp, #0x8]
 805b372: b004         	add	sp, #0x10
 805b374: bd80         	pop	{r7, pc}
 805b376: bf00         	nop

0805b378 <$d.51>:
 805b378: 55 cd 05 08  	.word	0x0805cd55

0805b37c <vQueueDelete>:
; {
 805b37c: b580         	push	{r7, lr}
 805b37e: 466f         	mov	r7, sp
 805b380: b082         	sub	sp, #0x8
 805b382: 9001         	str	r0, [sp, #0x4]
;     Queue_t * const pxQueue = xQueue;
 805b384: 9801         	ldr	r0, [sp, #0x4]
 805b386: 9000         	str	r0, [sp]
;     configASSERT( pxQueue );
 805b388: 9800         	ldr	r0, [sp]
 805b38a: b920         	cbnz	r0, 0x805b396 <vQueueDelete+0x1a> @ imm = #0x8
 805b38c: e7ff         	b	0x805b38e <vQueueDelete+0x12> @ imm = #-0x2
 805b38e: 4808         	ldr	r0, [pc, #0x20]         @ 0x805b3b0 <vQueueDelete+0x34>
 805b390: 4780         	blx	r0
 805b392: e7ff         	b	0x805b394 <vQueueDelete+0x18> @ imm = #-0x2
 805b394: e7fe         	b	0x805b394 <vQueueDelete+0x18> @ imm = #-0x4
;         vQueueUnregisterQueue( pxQueue );
 805b396: 9800         	ldr	r0, [sp]
 805b398: 4903         	ldr	r1, [pc, #0xc]          @ 0x805b3a8 <vQueueDelete+0x2c>
 805b39a: 4788         	blx	r1
;         vPortFree( pxQueue );
 805b39c: 9800         	ldr	r0, [sp]
 805b39e: 4903         	ldr	r1, [pc, #0xc]          @ 0x805b3ac <vQueueDelete+0x30>
 805b3a0: 4788         	blx	r1
; }
 805b3a2: b002         	add	sp, #0x8
 805b3a4: bd80         	pop	{r7, pc}
 805b3a6: bf00         	nop

0805b3a8 <$d.53>:
 805b3a8: b5 b3 05 08  	.word	0x0805b3b5
 805b3ac: 61 95 05 08  	.word	0x08059561
 805b3b0: 55 cd 05 08  	.word	0x0805cd55

0805b3b4 <vQueueUnregisterQueue>:
;     {
 805b3b4: b580         	push	{r7, lr}
 805b3b6: 466f         	mov	r7, sp
 805b3b8: b082         	sub	sp, #0x8
 805b3ba: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xQueue );
 805b3bc: 9801         	ldr	r0, [sp, #0x4]
 805b3be: b920         	cbnz	r0, 0x805b3ca <vQueueUnregisterQueue+0x16> @ imm = #0x8
 805b3c0: e7ff         	b	0x805b3c2 <vQueueUnregisterQueue+0xe> @ imm = #-0x2
 805b3c2: 4816         	ldr	r0, [pc, #0x58]         @ 0x805b41c <vQueueUnregisterQueue+0x68>
 805b3c4: 4780         	blx	r0
 805b3c6: e7ff         	b	0x805b3c8 <vQueueUnregisterQueue+0x14> @ imm = #-0x2
 805b3c8: e7fe         	b	0x805b3c8 <vQueueUnregisterQueue+0x14> @ imm = #-0x4
 805b3ca: 2000         	movs	r0, #0x0
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805b3cc: 9000         	str	r0, [sp]
 805b3ce: e7ff         	b	0x805b3d0 <vQueueUnregisterQueue+0x1c> @ imm = #-0x2
 805b3d0: 9800         	ldr	r0, [sp]
 805b3d2: 2807         	cmp	r0, #0x7
 805b3d4: d81f         	bhi	0x805b416 <vQueueUnregisterQueue+0x62> @ imm = #0x3e
 805b3d6: e7ff         	b	0x805b3d8 <vQueueUnregisterQueue+0x24> @ imm = #-0x2
;             if( xQueueRegistry[ ux ].xHandle == xQueue )
 805b3d8: 9900         	ldr	r1, [sp]
 805b3da: f242 3038    	movw	r0, #0x2338
 805b3de: f2c2 0000    	movt	r0, #0x2000
 805b3e2: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805b3e6: 6840         	ldr	r0, [r0, #0x4]
 805b3e8: 9901         	ldr	r1, [sp, #0x4]
 805b3ea: 4288         	cmp	r0, r1
 805b3ec: d10d         	bne	0x805b40a <vQueueUnregisterQueue+0x56> @ imm = #0x1a
 805b3ee: e7ff         	b	0x805b3f0 <vQueueUnregisterQueue+0x3c> @ imm = #-0x2
;                 xQueueRegistry[ ux ].pcQueueName = NULL;
 805b3f0: 9a00         	ldr	r2, [sp]
 805b3f2: f242 3138    	movw	r1, #0x2338
 805b3f6: f2c2 0100    	movt	r1, #0x2000
 805b3fa: 2000         	movs	r0, #0x0
 805b3fc: f841 0032    	str.w	r0, [r1, r2, lsl #3]
;                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 805b400: 9a00         	ldr	r2, [sp]
 805b402: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805b406: 6048         	str	r0, [r1, #0x4]
;                 break;
 805b408: e005         	b	0x805b416 <vQueueUnregisterQueue+0x62> @ imm = #0xa
 805b40a: e7ff         	b	0x805b40c <vQueueUnregisterQueue+0x58> @ imm = #-0x2
;         }
 805b40c: e7ff         	b	0x805b40e <vQueueUnregisterQueue+0x5a> @ imm = #-0x2
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805b40e: 9800         	ldr	r0, [sp]
 805b410: 3001         	adds	r0, #0x1
 805b412: 9000         	str	r0, [sp]
 805b414: e7dc         	b	0x805b3d0 <vQueueUnregisterQueue+0x1c> @ imm = #-0x48
;     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 805b416: b002         	add	sp, #0x8
 805b418: bd80         	pop	{r7, pc}
 805b41a: bf00         	nop

0805b41c <$d.55>:
 805b41c: 55 cd 05 08  	.word	0x0805cd55

0805b420 <uxQueueGetQueueNumber>:
;     {
 805b420: b081         	sub	sp, #0x4
 805b422: 9000         	str	r0, [sp]
;         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 805b424: 9800         	ldr	r0, [sp]
 805b426: 6c80         	ldr	r0, [r0, #0x48]
 805b428: b001         	add	sp, #0x4
 805b42a: 4770         	bx	lr

0805b42c <vQueueSetQueueNumber>:
;     {
 805b42c: b082         	sub	sp, #0x8
 805b42e: 9001         	str	r0, [sp, #0x4]
 805b430: 9100         	str	r1, [sp]
;         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 805b432: 9800         	ldr	r0, [sp]
 805b434: 9901         	ldr	r1, [sp, #0x4]
 805b436: 6488         	str	r0, [r1, #0x48]
;     }
 805b438: b002         	add	sp, #0x8
 805b43a: 4770         	bx	lr

0805b43c <ucQueueGetQueueType>:
;     {
 805b43c: b081         	sub	sp, #0x4
 805b43e: 9000         	str	r0, [sp]
;         return ( ( Queue_t * ) xQueue )->ucQueueType;
 805b440: 9800         	ldr	r0, [sp]
 805b442: f890 004c    	ldrb.w	r0, [r0, #0x4c]
 805b446: b001         	add	sp, #0x4
 805b448: 4770         	bx	lr

0805b44a <uxQueueGetQueueItemSize>:
; {
 805b44a: b081         	sub	sp, #0x4
 805b44c: 9000         	str	r0, [sp]
;     return ( ( Queue_t * ) xQueue )->uxItemSize;
 805b44e: 9800         	ldr	r0, [sp]
 805b450: 6c00         	ldr	r0, [r0, #0x40]
 805b452: b001         	add	sp, #0x4
 805b454: 4770         	bx	lr

0805b456 <uxQueueGetQueueLength>:
; {
 805b456: b081         	sub	sp, #0x4
 805b458: 9000         	str	r0, [sp]
;     return ( ( Queue_t * ) xQueue )->uxLength;
 805b45a: 9800         	ldr	r0, [sp]
 805b45c: 6bc0         	ldr	r0, [r0, #0x3c]
 805b45e: b001         	add	sp, #0x4
 805b460: 4770         	bx	lr
 805b462: bf00         	nop

0805b464 <xQueueIsQueueEmptyFromISR>:
; {
 805b464: b580         	push	{r7, lr}
 805b466: 466f         	mov	r7, sp
 805b468: b084         	sub	sp, #0x10
 805b46a: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805b46c: 9803         	ldr	r0, [sp, #0xc]
 805b46e: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805b470: 9801         	ldr	r0, [sp, #0x4]
 805b472: b920         	cbnz	r0, 0x805b47e <xQueueIsQueueEmptyFromISR+0x1a> @ imm = #0x8
 805b474: e7ff         	b	0x805b476 <xQueueIsQueueEmptyFromISR+0x12> @ imm = #-0x2
 805b476: 4808         	ldr	r0, [pc, #0x20]         @ 0x805b498 <xQueueIsQueueEmptyFromISR+0x34>
 805b478: 4780         	blx	r0
 805b47a: e7ff         	b	0x805b47c <xQueueIsQueueEmptyFromISR+0x18> @ imm = #-0x2
 805b47c: e7fe         	b	0x805b47c <xQueueIsQueueEmptyFromISR+0x18> @ imm = #-0x4
;     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 805b47e: 9801         	ldr	r0, [sp, #0x4]
 805b480: 6b80         	ldr	r0, [r0, #0x38]
 805b482: b918         	cbnz	r0, 0x805b48c <xQueueIsQueueEmptyFromISR+0x28> @ imm = #0x6
 805b484: e7ff         	b	0x805b486 <xQueueIsQueueEmptyFromISR+0x22> @ imm = #-0x2
 805b486: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805b488: 9002         	str	r0, [sp, #0x8]
;     }
 805b48a: e002         	b	0x805b492 <xQueueIsQueueEmptyFromISR+0x2e> @ imm = #0x4
 805b48c: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805b48e: 9002         	str	r0, [sp, #0x8]
 805b490: e7ff         	b	0x805b492 <xQueueIsQueueEmptyFromISR+0x2e> @ imm = #-0x2
;     return xReturn;
 805b492: 9802         	ldr	r0, [sp, #0x8]
 805b494: b004         	add	sp, #0x10
 805b496: bd80         	pop	{r7, pc}

0805b498 <$d.57>:
 805b498: 55 cd 05 08  	.word	0x0805cd55

0805b49c <xQueueIsQueueFullFromISR>:
; {
 805b49c: b580         	push	{r7, lr}
 805b49e: 466f         	mov	r7, sp
 805b4a0: b084         	sub	sp, #0x10
 805b4a2: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805b4a4: 9803         	ldr	r0, [sp, #0xc]
 805b4a6: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805b4a8: 9801         	ldr	r0, [sp, #0x4]
 805b4aa: b920         	cbnz	r0, 0x805b4b6 <xQueueIsQueueFullFromISR+0x1a> @ imm = #0x8
 805b4ac: e7ff         	b	0x805b4ae <xQueueIsQueueFullFromISR+0x12> @ imm = #-0x2
 805b4ae: 480a         	ldr	r0, [pc, #0x28]         @ 0x805b4d8 <xQueueIsQueueFullFromISR+0x3c>
 805b4b0: 4780         	blx	r0
 805b4b2: e7ff         	b	0x805b4b4 <xQueueIsQueueFullFromISR+0x18> @ imm = #-0x2
 805b4b4: e7fe         	b	0x805b4b4 <xQueueIsQueueFullFromISR+0x18> @ imm = #-0x4
;     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 805b4b6: 9801         	ldr	r0, [sp, #0x4]
 805b4b8: 6b80         	ldr	r0, [r0, #0x38]
 805b4ba: 9901         	ldr	r1, [sp, #0x4]
 805b4bc: 6bc9         	ldr	r1, [r1, #0x3c]
 805b4be: 4288         	cmp	r0, r1
 805b4c0: d103         	bne	0x805b4ca <xQueueIsQueueFullFromISR+0x2e> @ imm = #0x6
 805b4c2: e7ff         	b	0x805b4c4 <xQueueIsQueueFullFromISR+0x28> @ imm = #-0x2
 805b4c4: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805b4c6: 9002         	str	r0, [sp, #0x8]
;     }
 805b4c8: e002         	b	0x805b4d0 <xQueueIsQueueFullFromISR+0x34> @ imm = #0x4
 805b4ca: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805b4cc: 9002         	str	r0, [sp, #0x8]
 805b4ce: e7ff         	b	0x805b4d0 <xQueueIsQueueFullFromISR+0x34> @ imm = #-0x2
;     return xReturn;
 805b4d0: 9802         	ldr	r0, [sp, #0x8]
 805b4d2: b004         	add	sp, #0x10
 805b4d4: bd80         	pop	{r7, pc}
 805b4d6: bf00         	nop

0805b4d8 <$d.59>:
 805b4d8: 55 cd 05 08  	.word	0x0805cd55

0805b4dc <vQueueAddToRegistry>:
;     {
 805b4dc: b580         	push	{r7, lr}
 805b4de: 466f         	mov	r7, sp
 805b4e0: b084         	sub	sp, #0x10
 805b4e2: 9003         	str	r0, [sp, #0xc]
 805b4e4: 9102         	str	r1, [sp, #0x8]
 805b4e6: 2000         	movs	r0, #0x0
;         QueueRegistryItem_t * pxEntryToWrite = NULL;
 805b4e8: 9000         	str	r0, [sp]
;         configASSERT( xQueue );
 805b4ea: 9803         	ldr	r0, [sp, #0xc]
 805b4ec: b920         	cbnz	r0, 0x805b4f8 <vQueueAddToRegistry+0x1c> @ imm = #0x8
 805b4ee: e7ff         	b	0x805b4f0 <vQueueAddToRegistry+0x14> @ imm = #-0x2
 805b4f0: 4825         	ldr	r0, [pc, #0x94]         @ 0x805b588 <vQueueAddToRegistry+0xac>
 805b4f2: 4780         	blx	r0
 805b4f4: e7ff         	b	0x805b4f6 <vQueueAddToRegistry+0x1a> @ imm = #-0x2
 805b4f6: e7fe         	b	0x805b4f6 <vQueueAddToRegistry+0x1a> @ imm = #-0x4
;         if( pcQueueName != NULL )
 805b4f8: 9802         	ldr	r0, [sp, #0x8]
 805b4fa: b3c8         	cbz	r0, 0x805b570 <vQueueAddToRegistry+0x94> @ imm = #0x72
 805b4fc: e7ff         	b	0x805b4fe <vQueueAddToRegistry+0x22> @ imm = #-0x2
 805b4fe: 2000         	movs	r0, #0x0
;             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805b500: 9001         	str	r0, [sp, #0x4]
 805b502: e7ff         	b	0x805b504 <vQueueAddToRegistry+0x28> @ imm = #-0x2
 805b504: 9801         	ldr	r0, [sp, #0x4]
 805b506: 2807         	cmp	r0, #0x7
 805b508: d831         	bhi	0x805b56e <vQueueAddToRegistry+0x92> @ imm = #0x62
 805b50a: e7ff         	b	0x805b50c <vQueueAddToRegistry+0x30> @ imm = #-0x2
;                 if( xQueue == xQueueRegistry[ ux ].xHandle )
 805b50c: 9803         	ldr	r0, [sp, #0xc]
 805b50e: 9a01         	ldr	r2, [sp, #0x4]
 805b510: f242 3138    	movw	r1, #0x2338
 805b514: f2c2 0100    	movt	r1, #0x2000
 805b518: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805b51c: 6849         	ldr	r1, [r1, #0x4]
 805b51e: 4288         	cmp	r0, r1
 805b520: d109         	bne	0x805b536 <vQueueAddToRegistry+0x5a> @ imm = #0x12
 805b522: e7ff         	b	0x805b524 <vQueueAddToRegistry+0x48> @ imm = #-0x2
;                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 805b524: 9901         	ldr	r1, [sp, #0x4]
 805b526: f242 3038    	movw	r0, #0x2338
 805b52a: f2c2 0000    	movt	r0, #0x2000
 805b52e: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805b532: 9000         	str	r0, [sp]
;                     break;
 805b534: e01b         	b	0x805b56e <vQueueAddToRegistry+0x92> @ imm = #0x36
;                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 805b536: 9800         	ldr	r0, [sp]
 805b538: b990         	cbnz	r0, 0x805b560 <vQueueAddToRegistry+0x84> @ imm = #0x24
 805b53a: e7ff         	b	0x805b53c <vQueueAddToRegistry+0x60> @ imm = #-0x2
 805b53c: 9901         	ldr	r1, [sp, #0x4]
 805b53e: f242 3038    	movw	r0, #0x2338
 805b542: f2c2 0000    	movt	r0, #0x2000
 805b546: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805b54a: b948         	cbnz	r0, 0x805b560 <vQueueAddToRegistry+0x84> @ imm = #0x12
 805b54c: e7ff         	b	0x805b54e <vQueueAddToRegistry+0x72> @ imm = #-0x2
;                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 805b54e: 9901         	ldr	r1, [sp, #0x4]
 805b550: f242 3038    	movw	r0, #0x2338
 805b554: f2c2 0000    	movt	r0, #0x2000
 805b558: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805b55c: 9000         	str	r0, [sp]
;                 }
 805b55e: e000         	b	0x805b562 <vQueueAddToRegistry+0x86> @ imm = #0x0
 805b560: e7ff         	b	0x805b562 <vQueueAddToRegistry+0x86> @ imm = #-0x2
 805b562: e7ff         	b	0x805b564 <vQueueAddToRegistry+0x88> @ imm = #-0x2
;             }
 805b564: e7ff         	b	0x805b566 <vQueueAddToRegistry+0x8a> @ imm = #-0x2
;             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805b566: 9801         	ldr	r0, [sp, #0x4]
 805b568: 3001         	adds	r0, #0x1
 805b56a: 9001         	str	r0, [sp, #0x4]
 805b56c: e7ca         	b	0x805b504 <vQueueAddToRegistry+0x28> @ imm = #-0x6c
;         }
 805b56e: e7ff         	b	0x805b570 <vQueueAddToRegistry+0x94> @ imm = #-0x2
;         if( pxEntryToWrite != NULL )
 805b570: 9800         	ldr	r0, [sp]
 805b572: b138         	cbz	r0, 0x805b584 <vQueueAddToRegistry+0xa8> @ imm = #0xe
 805b574: e7ff         	b	0x805b576 <vQueueAddToRegistry+0x9a> @ imm = #-0x2
;             pxEntryToWrite->pcQueueName = pcQueueName;
 805b576: 9802         	ldr	r0, [sp, #0x8]
 805b578: 9900         	ldr	r1, [sp]
 805b57a: 6008         	str	r0, [r1]
;             pxEntryToWrite->xHandle = xQueue;
 805b57c: 9803         	ldr	r0, [sp, #0xc]
 805b57e: 9900         	ldr	r1, [sp]
 805b580: 6048         	str	r0, [r1, #0x4]
;         }
 805b582: e7ff         	b	0x805b584 <vQueueAddToRegistry+0xa8> @ imm = #-0x2
;     }
 805b584: b004         	add	sp, #0x10
 805b586: bd80         	pop	{r7, pc}

0805b588 <$d.61>:
 805b588: 55 cd 05 08  	.word	0x0805cd55

0805b58c <pcQueueGetName>:
;     {
 805b58c: b580         	push	{r7, lr}
 805b58e: 466f         	mov	r7, sp
 805b590: b084         	sub	sp, #0x10
 805b592: 9003         	str	r0, [sp, #0xc]
 805b594: 2000         	movs	r0, #0x0
;         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 805b596: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xQueue );
 805b598: 9803         	ldr	r0, [sp, #0xc]
 805b59a: b920         	cbnz	r0, 0x805b5a6 <pcQueueGetName+0x1a> @ imm = #0x8
 805b59c: e7ff         	b	0x805b59e <pcQueueGetName+0x12> @ imm = #-0x2
 805b59e: 4814         	ldr	r0, [pc, #0x50]         @ 0x805b5f0 <pcQueueGetName+0x64>
 805b5a0: 4780         	blx	r0
 805b5a2: e7ff         	b	0x805b5a4 <pcQueueGetName+0x18> @ imm = #-0x2
 805b5a4: e7fe         	b	0x805b5a4 <pcQueueGetName+0x18> @ imm = #-0x4
 805b5a6: 2000         	movs	r0, #0x0
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805b5a8: 9002         	str	r0, [sp, #0x8]
 805b5aa: e7ff         	b	0x805b5ac <pcQueueGetName+0x20> @ imm = #-0x2
 805b5ac: 9802         	ldr	r0, [sp, #0x8]
 805b5ae: 2807         	cmp	r0, #0x7
 805b5b0: d81b         	bhi	0x805b5ea <pcQueueGetName+0x5e> @ imm = #0x36
 805b5b2: e7ff         	b	0x805b5b4 <pcQueueGetName+0x28> @ imm = #-0x2
;             if( xQueueRegistry[ ux ].xHandle == xQueue )
 805b5b4: 9902         	ldr	r1, [sp, #0x8]
 805b5b6: f242 3038    	movw	r0, #0x2338
 805b5ba: f2c2 0000    	movt	r0, #0x2000
 805b5be: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805b5c2: 6840         	ldr	r0, [r0, #0x4]
 805b5c4: 9903         	ldr	r1, [sp, #0xc]
 805b5c6: 4288         	cmp	r0, r1
 805b5c8: d109         	bne	0x805b5de <pcQueueGetName+0x52> @ imm = #0x12
 805b5ca: e7ff         	b	0x805b5cc <pcQueueGetName+0x40> @ imm = #-0x2
;                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 805b5cc: 9902         	ldr	r1, [sp, #0x8]
 805b5ce: f242 3038    	movw	r0, #0x2338
 805b5d2: f2c2 0000    	movt	r0, #0x2000
 805b5d6: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805b5da: 9001         	str	r0, [sp, #0x4]
;                 break;
 805b5dc: e005         	b	0x805b5ea <pcQueueGetName+0x5e> @ imm = #0xa
 805b5de: e7ff         	b	0x805b5e0 <pcQueueGetName+0x54> @ imm = #-0x2
;         }
 805b5e0: e7ff         	b	0x805b5e2 <pcQueueGetName+0x56> @ imm = #-0x2
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805b5e2: 9802         	ldr	r0, [sp, #0x8]
 805b5e4: 3001         	adds	r0, #0x1
 805b5e6: 9002         	str	r0, [sp, #0x8]
 805b5e8: e7e0         	b	0x805b5ac <pcQueueGetName+0x20> @ imm = #-0x40
;         return pcReturn;
 805b5ea: 9801         	ldr	r0, [sp, #0x4]
 805b5ec: b004         	add	sp, #0x10
 805b5ee: bd80         	pop	{r7, pc}

0805b5f0 <$d.63>:
 805b5f0: 55 cd 05 08  	.word	0x0805cd55

0805b5f4 <vQueueWaitForMessageRestricted>:
;     {
 805b5f4: b580         	push	{r7, lr}
 805b5f6: 466f         	mov	r7, sp
 805b5f8: b084         	sub	sp, #0x10
 805b5fa: 9003         	str	r0, [sp, #0xc]
 805b5fc: 9102         	str	r1, [sp, #0x8]
 805b5fe: 9201         	str	r2, [sp, #0x4]
;         Queue_t * const pxQueue = xQueue;
 805b600: 9803         	ldr	r0, [sp, #0xc]
 805b602: 9000         	str	r0, [sp]
;         prvLockQueue( pxQueue );
 805b604: 4815         	ldr	r0, [pc, #0x54]         @ 0x805b65c <vQueueWaitForMessageRestricted+0x68>
 805b606: 4780         	blx	r0
 805b608: 9800         	ldr	r0, [sp]
 805b60a: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805b60e: 3001         	adds	r0, #0x1
 805b610: b928         	cbnz	r0, 0x805b61e <vQueueWaitForMessageRestricted+0x2a> @ imm = #0xa
 805b612: e7ff         	b	0x805b614 <vQueueWaitForMessageRestricted+0x20> @ imm = #-0x2
 805b614: 9900         	ldr	r1, [sp]
 805b616: 2000         	movs	r0, #0x0
 805b618: f881 0044    	strb.w	r0, [r1, #0x44]
 805b61c: e7ff         	b	0x805b61e <vQueueWaitForMessageRestricted+0x2a> @ imm = #-0x2
 805b61e: 9800         	ldr	r0, [sp]
 805b620: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805b624: 3001         	adds	r0, #0x1
 805b626: b928         	cbnz	r0, 0x805b634 <vQueueWaitForMessageRestricted+0x40> @ imm = #0xa
 805b628: e7ff         	b	0x805b62a <vQueueWaitForMessageRestricted+0x36> @ imm = #-0x2
 805b62a: 9900         	ldr	r1, [sp]
 805b62c: 2000         	movs	r0, #0x0
 805b62e: f881 0045    	strb.w	r0, [r1, #0x45]
 805b632: e7ff         	b	0x805b634 <vQueueWaitForMessageRestricted+0x40> @ imm = #-0x2
 805b634: 480a         	ldr	r0, [pc, #0x28]         @ 0x805b660 <vQueueWaitForMessageRestricted+0x6c>
 805b636: 4780         	blx	r0
;         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 805b638: 9800         	ldr	r0, [sp]
 805b63a: 6b80         	ldr	r0, [r0, #0x38]
 805b63c: b938         	cbnz	r0, 0x805b64e <vQueueWaitForMessageRestricted+0x5a> @ imm = #0xe
 805b63e: e7ff         	b	0x805b640 <vQueueWaitForMessageRestricted+0x4c> @ imm = #-0x2
;             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 805b640: 9800         	ldr	r0, [sp]
 805b642: 3024         	adds	r0, #0x24
 805b644: 9902         	ldr	r1, [sp, #0x8]
 805b646: 9a01         	ldr	r2, [sp, #0x4]
 805b648: 4b06         	ldr	r3, [pc, #0x18]         @ 0x805b664 <vQueueWaitForMessageRestricted+0x70>
 805b64a: 4798         	blx	r3
;         }
 805b64c: e000         	b	0x805b650 <vQueueWaitForMessageRestricted+0x5c> @ imm = #0x0
 805b64e: e7ff         	b	0x805b650 <vQueueWaitForMessageRestricted+0x5c> @ imm = #-0x2
;         prvUnlockQueue( pxQueue );
 805b650: 9800         	ldr	r0, [sp]
 805b652: 4905         	ldr	r1, [pc, #0x14]         @ 0x805b668 <vQueueWaitForMessageRestricted+0x74>
 805b654: 4788         	blx	r1
;     }
 805b656: b004         	add	sp, #0x10
 805b658: bd80         	pop	{r7, pc}
 805b65a: bf00         	nop

0805b65c <$d.65>:
 805b65c: 19 c4 05 08  	.word	0x0805c419
 805b660: 3d c4 05 08  	.word	0x0805c43d
 805b664: 15 6d 05 08  	.word	0x08056d15
 805b668: 11 a9 05 08  	.word	0x0805a911

0805b66c <xStreamBufferGenericCreate>:
;     {
 805b66c: b5b0         	push	{r4, r5, r7, lr}
 805b66e: af02         	add	r7, sp, #0x8
 805b670: b08a         	sub	sp, #0x28
 805b672: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805b676: 9009         	str	r0, [sp, #0x24]
 805b678: 9108         	str	r1, [sp, #0x20]
 805b67a: 9207         	str	r2, [sp, #0x1c]
 805b67c: 9306         	str	r3, [sp, #0x18]
;         if( xIsMessageBuffer == pdTRUE )
 805b67e: 9807         	ldr	r0, [sp, #0x1c]
 805b680: 2801         	cmp	r0, #0x1
 805b682: d10c         	bne	0x805b69e <xStreamBufferGenericCreate+0x32> @ imm = #0x18
 805b684: e7ff         	b	0x805b686 <xStreamBufferGenericCreate+0x1a> @ imm = #-0x2
 805b686: 2001         	movs	r0, #0x1
;             ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 805b688: f807 0c1d    	strb	r0, [r7, #-29]
;             configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 805b68c: 9809         	ldr	r0, [sp, #0x24]
 805b68e: 2804         	cmp	r0, #0x4
 805b690: d804         	bhi	0x805b69c <xStreamBufferGenericCreate+0x30> @ imm = #0x8
 805b692: e7ff         	b	0x805b694 <xStreamBufferGenericCreate+0x28> @ imm = #-0x2
 805b694: 4829         	ldr	r0, [pc, #0xa4]         @ 0x805b73c <xStreamBufferGenericCreate+0xd0>
 805b696: 4780         	blx	r0
 805b698: e7ff         	b	0x805b69a <xStreamBufferGenericCreate+0x2e> @ imm = #-0x2
 805b69a: e7fe         	b	0x805b69a <xStreamBufferGenericCreate+0x2e> @ imm = #-0x4
;         }
 805b69c: e00a         	b	0x805b6b4 <xStreamBufferGenericCreate+0x48> @ imm = #0x14
 805b69e: 2000         	movs	r0, #0x0
;             ucFlags = 0;
 805b6a0: f807 0c1d    	strb	r0, [r7, #-29]
;             configASSERT( xBufferSizeBytes > 0 );
 805b6a4: 9809         	ldr	r0, [sp, #0x24]
 805b6a6: b920         	cbnz	r0, 0x805b6b2 <xStreamBufferGenericCreate+0x46> @ imm = #0x8
 805b6a8: e7ff         	b	0x805b6aa <xStreamBufferGenericCreate+0x3e> @ imm = #-0x2
 805b6aa: 4820         	ldr	r0, [pc, #0x80]         @ 0x805b72c <xStreamBufferGenericCreate+0xc0>
 805b6ac: 4780         	blx	r0
 805b6ae: e7ff         	b	0x805b6b0 <xStreamBufferGenericCreate+0x44> @ imm = #-0x2
 805b6b0: e7fe         	b	0x805b6b0 <xStreamBufferGenericCreate+0x44> @ imm = #-0x4
 805b6b2: e7ff         	b	0x805b6b4 <xStreamBufferGenericCreate+0x48> @ imm = #-0x2
;         configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 805b6b4: 9808         	ldr	r0, [sp, #0x20]
 805b6b6: 9909         	ldr	r1, [sp, #0x24]
 805b6b8: 4288         	cmp	r0, r1
 805b6ba: d904         	bls	0x805b6c6 <xStreamBufferGenericCreate+0x5a> @ imm = #0x8
 805b6bc: e7ff         	b	0x805b6be <xStreamBufferGenericCreate+0x52> @ imm = #-0x2
 805b6be: 481e         	ldr	r0, [pc, #0x78]         @ 0x805b738 <xStreamBufferGenericCreate+0xcc>
 805b6c0: 4780         	blx	r0
 805b6c2: e7ff         	b	0x805b6c4 <xStreamBufferGenericCreate+0x58> @ imm = #-0x2
 805b6c4: e7fe         	b	0x805b6c4 <xStreamBufferGenericCreate+0x58> @ imm = #-0x4
;         if( xTriggerLevelBytes == ( size_t ) 0 )
 805b6c6: 9808         	ldr	r0, [sp, #0x20]
 805b6c8: b918         	cbnz	r0, 0x805b6d2 <xStreamBufferGenericCreate+0x66> @ imm = #0x6
 805b6ca: e7ff         	b	0x805b6cc <xStreamBufferGenericCreate+0x60> @ imm = #-0x2
 805b6cc: 2001         	movs	r0, #0x1
;             xTriggerLevelBytes = ( size_t ) 1;
 805b6ce: 9008         	str	r0, [sp, #0x20]
;         }
 805b6d0: e7ff         	b	0x805b6d2 <xStreamBufferGenericCreate+0x66> @ imm = #-0x2
;         if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 805b6d2: 9809         	ldr	r0, [sp, #0x24]
 805b6d4: f100 0125    	add.w	r1, r0, #0x25
 805b6d8: 4288         	cmp	r0, r1
 805b6da: d209         	bhs	0x805b6f0 <xStreamBufferGenericCreate+0x84> @ imm = #0x12
 805b6dc: e7ff         	b	0x805b6de <xStreamBufferGenericCreate+0x72> @ imm = #-0x2
;             xBufferSizeBytes++;
 805b6de: 9809         	ldr	r0, [sp, #0x24]
 805b6e0: 3001         	adds	r0, #0x1
 805b6e2: 9009         	str	r0, [sp, #0x24]
;             pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
 805b6e4: 9809         	ldr	r0, [sp, #0x24]
 805b6e6: 3024         	adds	r0, #0x24
 805b6e8: 4911         	ldr	r1, [pc, #0x44]         @ 0x805b730 <xStreamBufferGenericCreate+0xc4>
 805b6ea: 4788         	blx	r1
 805b6ec: 9005         	str	r0, [sp, #0x14]
;         }
 805b6ee: e002         	b	0x805b6f6 <xStreamBufferGenericCreate+0x8a> @ imm = #0x4
 805b6f0: 2000         	movs	r0, #0x0
;             pvAllocatedMemory = NULL;
 805b6f2: 9005         	str	r0, [sp, #0x14]
 805b6f4: e7ff         	b	0x805b6f6 <xStreamBufferGenericCreate+0x8a> @ imm = #-0x2
;         if( pvAllocatedMemory != NULL )
 805b6f6: 9805         	ldr	r0, [sp, #0x14]
 805b6f8: b1a0         	cbz	r0, 0x805b724 <xStreamBufferGenericCreate+0xb8> @ imm = #0x28
 805b6fa: e7ff         	b	0x805b6fc <xStreamBufferGenericCreate+0x90> @ imm = #-0x2
;             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 805b6fc: 9805         	ldr	r0, [sp, #0x14]
;                                           ( ( uint8_t * ) pvAllocatedMemory ) + sizeof( StreamBuffer_t ), /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
 805b6fe: f100 0124    	add.w	r1, r0, #0x24
;                                           xBufferSizeBytes,
 805b702: 9a09         	ldr	r2, [sp, #0x24]
;                                           xTriggerLevelBytes,
 805b704: 9b08         	ldr	r3, [sp, #0x20]
;                                           ucFlags,
 805b706: f817 cc1d    	ldrb	r12, [r7, #-29]
;                                           pxSendCompletedCallback,
 805b70a: 9c06         	ldr	r4, [sp, #0x18]
;                                           pxReceiveCompletedCallback );
 805b70c: 68bd         	ldr	r5, [r7, #0x8]
;             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 805b70e: 46ee         	mov	lr, sp
 805b710: f8ce 5008    	str.w	r5, [lr, #0x8]
 805b714: f8ce 4004    	str.w	r4, [lr, #0x4]
 805b718: f8ce c000    	str.w	r12, [lr]
 805b71c: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805b734 <xStreamBufferGenericCreate+0xc8>
 805b720: 47e0         	blx	r12
;         }
 805b722: e000         	b	0x805b726 <xStreamBufferGenericCreate+0xba> @ imm = #0x0
 805b724: e7ff         	b	0x805b726 <xStreamBufferGenericCreate+0xba> @ imm = #-0x2
;         return ( StreamBufferHandle_t ) pvAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 805b726: 9805         	ldr	r0, [sp, #0x14]
 805b728: b00a         	add	sp, #0x28
 805b72a: bdb0         	pop	{r4, r5, r7, pc}

0805b72c <$d.1>:
 805b72c: 55 cd 05 08  	.word	0x0805cd55
 805b730: dd 91 05 08  	.word	0x080591dd
 805b734: 41 b7 05 08  	.word	0x0805b741
 805b738: 55 cd 05 08  	.word	0x0805cd55
 805b73c: 55 cd 05 08  	.word	0x0805cd55

0805b740 <prvInitialiseNewStreamBuffer>:
; {
 805b740: b580         	push	{r7, lr}
 805b742: 466f         	mov	r7, sp
 805b744: b086         	sub	sp, #0x18
 805b746: 4684         	mov	r12, r0
 805b748: 6938         	ldr	r0, [r7, #0x10]
 805b74a: 68f8         	ldr	r0, [r7, #0xc]
 805b74c: 68b8         	ldr	r0, [r7, #0x8]
 805b74e: f8cd c014    	str.w	r12, [sp, #0x14]
 805b752: 9104         	str	r1, [sp, #0x10]
 805b754: 9203         	str	r2, [sp, #0xc]
 805b756: 9302         	str	r3, [sp, #0x8]
 805b758: f807 0c11    	strb	r0, [r7, #-17]
;         configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
 805b75c: 9804         	ldr	r0, [sp, #0x10]
 805b75e: 9a03         	ldr	r2, [sp, #0xc]
 805b760: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x805b7a0 <prvInitialiseNewStreamBuffer+0x60>
 805b762: 2155         	movs	r1, #0x55
 805b764: 4798         	blx	r3
 805b766: 9904         	ldr	r1, [sp, #0x10]
 805b768: 4288         	cmp	r0, r1
 805b76a: d004         	beq	0x805b776 <prvInitialiseNewStreamBuffer+0x36> @ imm = #0x8
 805b76c: e7ff         	b	0x805b76e <prvInitialiseNewStreamBuffer+0x2e> @ imm = #-0x2
 805b76e: 480e         	ldr	r0, [pc, #0x38]         @ 0x805b7a8 <prvInitialiseNewStreamBuffer+0x68>
 805b770: 4780         	blx	r0
 805b772: e7ff         	b	0x805b774 <prvInitialiseNewStreamBuffer+0x34> @ imm = #-0x2
 805b774: e7fe         	b	0x805b774 <prvInitialiseNewStreamBuffer+0x34> @ imm = #-0x4
;     ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 805b776: 9805         	ldr	r0, [sp, #0x14]
 805b778: 4b0a         	ldr	r3, [pc, #0x28]         @ 0x805b7a4 <prvInitialiseNewStreamBuffer+0x64>
 805b77a: 2100         	movs	r1, #0x0
 805b77c: 2224         	movs	r2, #0x24
 805b77e: 4798         	blx	r3
;     pxStreamBuffer->pucBuffer = pucBuffer;
 805b780: 9804         	ldr	r0, [sp, #0x10]
 805b782: 9905         	ldr	r1, [sp, #0x14]
 805b784: 6188         	str	r0, [r1, #0x18]
;     pxStreamBuffer->xLength = xBufferSizeBytes;
 805b786: 9803         	ldr	r0, [sp, #0xc]
 805b788: 9905         	ldr	r1, [sp, #0x14]
 805b78a: 6088         	str	r0, [r1, #0x8]
;     pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 805b78c: 9802         	ldr	r0, [sp, #0x8]
 805b78e: 9905         	ldr	r1, [sp, #0x14]
 805b790: 60c8         	str	r0, [r1, #0xc]
;     pxStreamBuffer->ucFlags = ucFlags;
 805b792: f817 0c11    	ldrb	r0, [r7, #-17]
 805b796: 9905         	ldr	r1, [sp, #0x14]
 805b798: 7708         	strb	r0, [r1, #0x1c]
; }
 805b79a: b006         	add	sp, #0x18
 805b79c: bd80         	pop	{r7, pc}
 805b79e: bf00         	nop

0805b7a0 <$d.3>:
 805b7a0: cd eb 05 08  	.word	0x0805ebcd
 805b7a4: cd eb 05 08  	.word	0x0805ebcd
 805b7a8: 55 cd 05 08  	.word	0x0805cd55

0805b7ac <vStreamBufferDelete>:
; {
 805b7ac: b580         	push	{r7, lr}
 805b7ae: 466f         	mov	r7, sp
 805b7b0: b082         	sub	sp, #0x8
 805b7b2: 9001         	str	r0, [sp, #0x4]
;     StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 805b7b4: 9801         	ldr	r0, [sp, #0x4]
 805b7b6: 9000         	str	r0, [sp]
;     configASSERT( pxStreamBuffer );
 805b7b8: 9800         	ldr	r0, [sp]
 805b7ba: b920         	cbnz	r0, 0x805b7c6 <vStreamBufferDelete+0x1a> @ imm = #0x8
 805b7bc: e7ff         	b	0x805b7be <vStreamBufferDelete+0x12> @ imm = #-0x2
 805b7be: 480d         	ldr	r0, [pc, #0x34]         @ 0x805b7f4 <vStreamBufferDelete+0x48>
 805b7c0: 4780         	blx	r0
 805b7c2: e7ff         	b	0x805b7c4 <vStreamBufferDelete+0x18> @ imm = #-0x2
 805b7c4: e7fe         	b	0x805b7c4 <vStreamBufferDelete+0x18> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 805b7c6: 9800         	ldr	r0, [sp]
 805b7c8: 7f00         	ldrb	r0, [r0, #0x1c]
 805b7ca: 0780         	lsls	r0, r0, #0x1e
 805b7cc: 2800         	cmp	r0, #0x0
 805b7ce: d404         	bmi	0x805b7da <vStreamBufferDelete+0x2e> @ imm = #0x8
 805b7d0: e7ff         	b	0x805b7d2 <vStreamBufferDelete+0x26> @ imm = #-0x2
;             vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 805b7d2: 9800         	ldr	r0, [sp]
 805b7d4: 4906         	ldr	r1, [pc, #0x18]         @ 0x805b7f0 <vStreamBufferDelete+0x44>
 805b7d6: 4788         	blx	r1
;     }
 805b7d8: e005         	b	0x805b7e6 <vStreamBufferDelete+0x3a> @ imm = #0xa
;         ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 805b7da: 9800         	ldr	r0, [sp]
 805b7dc: 4b03         	ldr	r3, [pc, #0xc]          @ 0x805b7ec <vStreamBufferDelete+0x40>
 805b7de: 2100         	movs	r1, #0x0
 805b7e0: 2224         	movs	r2, #0x24
 805b7e2: 4798         	blx	r3
 805b7e4: e7ff         	b	0x805b7e6 <vStreamBufferDelete+0x3a> @ imm = #-0x2
; }
 805b7e6: b002         	add	sp, #0x8
 805b7e8: bd80         	pop	{r7, pc}
 805b7ea: bf00         	nop

0805b7ec <$d.5>:
 805b7ec: cd eb 05 08  	.word	0x0805ebcd
 805b7f0: 61 95 05 08  	.word	0x08059561
 805b7f4: 55 cd 05 08  	.word	0x0805cd55

0805b7f8 <xStreamBufferReset>:
; {
 805b7f8: b5b0         	push	{r4, r5, r7, lr}
 805b7fa: af02         	add	r7, sp, #0x8
 805b7fc: b08a         	sub	sp, #0x28
 805b7fe: 9009         	str	r0, [sp, #0x24]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b800: 9809         	ldr	r0, [sp, #0x24]
 805b802: 9008         	str	r0, [sp, #0x20]
 805b804: 2000         	movs	r0, #0x0
;     BaseType_t xReturn = pdFAIL;
 805b806: 9007         	str	r0, [sp, #0x1c]
;     StreamBufferCallbackFunction_t pxSendCallback = NULL, pxReceiveCallback = NULL;
 805b808: 9006         	str	r0, [sp, #0x18]
 805b80a: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxStreamBuffer );
 805b80c: 9808         	ldr	r0, [sp, #0x20]
 805b80e: b920         	cbnz	r0, 0x805b81a <xStreamBufferReset+0x22> @ imm = #0x8
 805b810: e7ff         	b	0x805b812 <xStreamBufferReset+0x1a> @ imm = #-0x2
 805b812: 481a         	ldr	r0, [pc, #0x68]         @ 0x805b87c <xStreamBufferReset+0x84>
 805b814: 4780         	blx	r0
 805b816: e7ff         	b	0x805b818 <xStreamBufferReset+0x20> @ imm = #-0x2
 805b818: e7fe         	b	0x805b818 <xStreamBufferReset+0x20> @ imm = #-0x4
;         uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 805b81a: 9808         	ldr	r0, [sp, #0x20]
 805b81c: 6a00         	ldr	r0, [r0, #0x20]
 805b81e: 9004         	str	r0, [sp, #0x10]
;     taskENTER_CRITICAL();
 805b820: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805b870 <xStreamBufferReset+0x78>
 805b822: 4780         	blx	r0
;         if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
 805b824: 9808         	ldr	r0, [sp, #0x20]
 805b826: 6900         	ldr	r0, [r0, #0x10]
 805b828: b9e0         	cbnz	r0, 0x805b864 <xStreamBufferReset+0x6c> @ imm = #0x38
 805b82a: e7ff         	b	0x805b82c <xStreamBufferReset+0x34> @ imm = #-0x2
 805b82c: 9808         	ldr	r0, [sp, #0x20]
 805b82e: 6940         	ldr	r0, [r0, #0x14]
 805b830: b9c0         	cbnz	r0, 0x805b864 <xStreamBufferReset+0x6c> @ imm = #0x30
 805b832: e7ff         	b	0x805b834 <xStreamBufferReset+0x3c> @ imm = #-0x2
;             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 805b834: 9808         	ldr	r0, [sp, #0x20]
;                                           pxStreamBuffer->xLength,
 805b836: 6882         	ldr	r2, [r0, #0x8]
;                                           pxStreamBuffer->xTriggerLevelBytes,
 805b838: 68c3         	ldr	r3, [r0, #0xc]
;                                           pxStreamBuffer->pucBuffer,
 805b83a: 6981         	ldr	r1, [r0, #0x18]
;                                           pxStreamBuffer->ucFlags,
 805b83c: f890 c01c    	ldrb.w	r12, [r0, #0x1c]
;                                           pxSendCallback,
 805b840: 9c06         	ldr	r4, [sp, #0x18]
;                                           pxReceiveCallback );
 805b842: 9d05         	ldr	r5, [sp, #0x14]
;             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 805b844: 46ee         	mov	lr, sp
 805b846: f8ce 5008    	str.w	r5, [lr, #0x8]
 805b84a: f8ce 4004    	str.w	r4, [lr, #0x4]
 805b84e: f8ce c000    	str.w	r12, [lr]
 805b852: f8df c020    	ldr.w	r12, [pc, #0x20]        @ 0x805b874 <xStreamBufferReset+0x7c>
 805b856: 47e0         	blx	r12
;                 pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 805b858: 9804         	ldr	r0, [sp, #0x10]
 805b85a: 9908         	ldr	r1, [sp, #0x20]
 805b85c: 6208         	str	r0, [r1, #0x20]
 805b85e: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805b860: 9007         	str	r0, [sp, #0x1c]
;         }
 805b862: e7ff         	b	0x805b864 <xStreamBufferReset+0x6c> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805b864: 4804         	ldr	r0, [pc, #0x10]         @ 0x805b878 <xStreamBufferReset+0x80>
 805b866: 4780         	blx	r0
;     return xReturn;
 805b868: 9807         	ldr	r0, [sp, #0x1c]
 805b86a: b00a         	add	sp, #0x28
 805b86c: bdb0         	pop	{r4, r5, r7, pc}
 805b86e: bf00         	nop

0805b870 <$d.7>:
 805b870: 19 c4 05 08  	.word	0x0805c419
 805b874: 41 b7 05 08  	.word	0x0805b741
 805b878: 3d c4 05 08  	.word	0x0805c43d
 805b87c: 55 cd 05 08  	.word	0x0805cd55

0805b880 <xStreamBufferSetTriggerLevel>:
; {
 805b880: b580         	push	{r7, lr}
 805b882: 466f         	mov	r7, sp
 805b884: b084         	sub	sp, #0x10
 805b886: 9003         	str	r0, [sp, #0xc]
 805b888: 9102         	str	r1, [sp, #0x8]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b88a: 9803         	ldr	r0, [sp, #0xc]
 805b88c: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxStreamBuffer );
 805b88e: 9801         	ldr	r0, [sp, #0x4]
 805b890: b920         	cbnz	r0, 0x805b89c <xStreamBufferSetTriggerLevel+0x1c> @ imm = #0x8
 805b892: e7ff         	b	0x805b894 <xStreamBufferSetTriggerLevel+0x14> @ imm = #-0x2
 805b894: 480d         	ldr	r0, [pc, #0x34]         @ 0x805b8cc <xStreamBufferSetTriggerLevel+0x4c>
 805b896: 4780         	blx	r0
 805b898: e7ff         	b	0x805b89a <xStreamBufferSetTriggerLevel+0x1a> @ imm = #-0x2
 805b89a: e7fe         	b	0x805b89a <xStreamBufferSetTriggerLevel+0x1a> @ imm = #-0x4
;     if( xTriggerLevel == ( size_t ) 0 )
 805b89c: 9802         	ldr	r0, [sp, #0x8]
 805b89e: b918         	cbnz	r0, 0x805b8a8 <xStreamBufferSetTriggerLevel+0x28> @ imm = #0x6
 805b8a0: e7ff         	b	0x805b8a2 <xStreamBufferSetTriggerLevel+0x22> @ imm = #-0x2
 805b8a2: 2001         	movs	r0, #0x1
;         xTriggerLevel = ( size_t ) 1;
 805b8a4: 9002         	str	r0, [sp, #0x8]
;     }
 805b8a6: e7ff         	b	0x805b8a8 <xStreamBufferSetTriggerLevel+0x28> @ imm = #-0x2
;     if( xTriggerLevel < pxStreamBuffer->xLength )
 805b8a8: 9802         	ldr	r0, [sp, #0x8]
 805b8aa: 9901         	ldr	r1, [sp, #0x4]
 805b8ac: 6889         	ldr	r1, [r1, #0x8]
 805b8ae: 4288         	cmp	r0, r1
 805b8b0: d206         	bhs	0x805b8c0 <xStreamBufferSetTriggerLevel+0x40> @ imm = #0xc
 805b8b2: e7ff         	b	0x805b8b4 <xStreamBufferSetTriggerLevel+0x34> @ imm = #-0x2
;         pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 805b8b4: 9802         	ldr	r0, [sp, #0x8]
 805b8b6: 9901         	ldr	r1, [sp, #0x4]
 805b8b8: 60c8         	str	r0, [r1, #0xc]
 805b8ba: 2001         	movs	r0, #0x1
;         xReturn = pdPASS;
 805b8bc: 9000         	str	r0, [sp]
;     }
 805b8be: e002         	b	0x805b8c6 <xStreamBufferSetTriggerLevel+0x46> @ imm = #0x4
 805b8c0: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805b8c2: 9000         	str	r0, [sp]
 805b8c4: e7ff         	b	0x805b8c6 <xStreamBufferSetTriggerLevel+0x46> @ imm = #-0x2
;     return xReturn;
 805b8c6: 9800         	ldr	r0, [sp]
 805b8c8: b004         	add	sp, #0x10
 805b8ca: bd80         	pop	{r7, pc}

0805b8cc <$d.9>:
 805b8cc: 55 cd 05 08  	.word	0x0805cd55

0805b8d0 <xStreamBufferSpacesAvailable>:
; {
 805b8d0: b580         	push	{r7, lr}
 805b8d2: 466f         	mov	r7, sp
 805b8d4: b084         	sub	sp, #0x10
 805b8d6: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b8d8: 9803         	ldr	r0, [sp, #0xc]
 805b8da: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805b8dc: 9802         	ldr	r0, [sp, #0x8]
 805b8de: b920         	cbnz	r0, 0x805b8ea <xStreamBufferSpacesAvailable+0x1a> @ imm = #0x8
 805b8e0: e7ff         	b	0x805b8e2 <xStreamBufferSpacesAvailable+0x12> @ imm = #-0x2
 805b8e2: 4816         	ldr	r0, [pc, #0x58]         @ 0x805b93c <xStreamBufferSpacesAvailable+0x6c>
 805b8e4: 4780         	blx	r0
 805b8e6: e7ff         	b	0x805b8e8 <xStreamBufferSpacesAvailable+0x18> @ imm = #-0x2
 805b8e8: e7fe         	b	0x805b8e8 <xStreamBufferSpacesAvailable+0x18> @ imm = #-0x4
;     do
 805b8ea: e7ff         	b	0x805b8ec <xStreamBufferSpacesAvailable+0x1c> @ imm = #-0x2
;         xOriginalTail = pxStreamBuffer->xTail;
 805b8ec: 9802         	ldr	r0, [sp, #0x8]
 805b8ee: 6800         	ldr	r0, [r0]
 805b8f0: 9000         	str	r0, [sp]
;         xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 805b8f2: 9902         	ldr	r1, [sp, #0x8]
 805b8f4: 6888         	ldr	r0, [r1, #0x8]
 805b8f6: 6809         	ldr	r1, [r1]
 805b8f8: 4408         	add	r0, r1
 805b8fa: 9001         	str	r0, [sp, #0x4]
;         xSpace -= pxStreamBuffer->xHead;
 805b8fc: 9802         	ldr	r0, [sp, #0x8]
 805b8fe: 6841         	ldr	r1, [r0, #0x4]
 805b900: 9801         	ldr	r0, [sp, #0x4]
 805b902: 1a40         	subs	r0, r0, r1
 805b904: 9001         	str	r0, [sp, #0x4]
;     } while( xOriginalTail != pxStreamBuffer->xTail );
 805b906: e7ff         	b	0x805b908 <xStreamBufferSpacesAvailable+0x38> @ imm = #-0x2
 805b908: 9800         	ldr	r0, [sp]
 805b90a: 9902         	ldr	r1, [sp, #0x8]
 805b90c: 6809         	ldr	r1, [r1]
 805b90e: 4288         	cmp	r0, r1
 805b910: d1ec         	bne	0x805b8ec <xStreamBufferSpacesAvailable+0x1c> @ imm = #-0x28
 805b912: e7ff         	b	0x805b914 <xStreamBufferSpacesAvailable+0x44> @ imm = #-0x2
;     xSpace -= ( size_t ) 1;
 805b914: 9801         	ldr	r0, [sp, #0x4]
 805b916: 3801         	subs	r0, #0x1
 805b918: 9001         	str	r0, [sp, #0x4]
;     if( xSpace >= pxStreamBuffer->xLength )
 805b91a: 9801         	ldr	r0, [sp, #0x4]
 805b91c: 9902         	ldr	r1, [sp, #0x8]
 805b91e: 6889         	ldr	r1, [r1, #0x8]
 805b920: 4288         	cmp	r0, r1
 805b922: d306         	blo	0x805b932 <xStreamBufferSpacesAvailable+0x62> @ imm = #0xc
 805b924: e7ff         	b	0x805b926 <xStreamBufferSpacesAvailable+0x56> @ imm = #-0x2
;         xSpace -= pxStreamBuffer->xLength;
 805b926: 9802         	ldr	r0, [sp, #0x8]
 805b928: 6881         	ldr	r1, [r0, #0x8]
 805b92a: 9801         	ldr	r0, [sp, #0x4]
 805b92c: 1a40         	subs	r0, r0, r1
 805b92e: 9001         	str	r0, [sp, #0x4]
;     }
 805b930: e000         	b	0x805b934 <xStreamBufferSpacesAvailable+0x64> @ imm = #0x0
 805b932: e7ff         	b	0x805b934 <xStreamBufferSpacesAvailable+0x64> @ imm = #-0x2
;     return xSpace;
 805b934: 9801         	ldr	r0, [sp, #0x4]
 805b936: b004         	add	sp, #0x10
 805b938: bd80         	pop	{r7, pc}
 805b93a: bf00         	nop

0805b93c <$d.11>:
 805b93c: 55 cd 05 08  	.word	0x0805cd55

0805b940 <xStreamBufferBytesAvailable>:
; {
 805b940: b580         	push	{r7, lr}
 805b942: 466f         	mov	r7, sp
 805b944: b084         	sub	sp, #0x10
 805b946: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b948: 9803         	ldr	r0, [sp, #0xc]
 805b94a: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805b94c: 9802         	ldr	r0, [sp, #0x8]
 805b94e: b920         	cbnz	r0, 0x805b95a <xStreamBufferBytesAvailable+0x1a> @ imm = #0x8
 805b950: e7ff         	b	0x805b952 <xStreamBufferBytesAvailable+0x12> @ imm = #-0x2
 805b952: 4806         	ldr	r0, [pc, #0x18]         @ 0x805b96c <xStreamBufferBytesAvailable+0x2c>
 805b954: 4780         	blx	r0
 805b956: e7ff         	b	0x805b958 <xStreamBufferBytesAvailable+0x18> @ imm = #-0x2
 805b958: e7fe         	b	0x805b958 <xStreamBufferBytesAvailable+0x18> @ imm = #-0x4
;     xReturn = prvBytesInBuffer( pxStreamBuffer );
 805b95a: 9802         	ldr	r0, [sp, #0x8]
 805b95c: 4902         	ldr	r1, [pc, #0x8]          @ 0x805b968 <xStreamBufferBytesAvailable+0x28>
 805b95e: 4788         	blx	r1
 805b960: 9001         	str	r0, [sp, #0x4]
;     return xReturn;
 805b962: 9801         	ldr	r0, [sp, #0x4]
 805b964: b004         	add	sp, #0x10
 805b966: bd80         	pop	{r7, pc}

0805b968 <$d.13>:
 805b968: 71 b9 05 08  	.word	0x0805b971
 805b96c: 55 cd 05 08  	.word	0x0805cd55

0805b970 <prvBytesInBuffer>:
; {
 805b970: b082         	sub	sp, #0x8
 805b972: 9001         	str	r0, [sp, #0x4]
;     xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 805b974: 9901         	ldr	r1, [sp, #0x4]
 805b976: 6888         	ldr	r0, [r1, #0x8]
 805b978: 6849         	ldr	r1, [r1, #0x4]
 805b97a: 4408         	add	r0, r1
 805b97c: 9000         	str	r0, [sp]
;     xCount -= pxStreamBuffer->xTail;
 805b97e: 9801         	ldr	r0, [sp, #0x4]
 805b980: 6801         	ldr	r1, [r0]
 805b982: 9800         	ldr	r0, [sp]
 805b984: 1a40         	subs	r0, r0, r1
 805b986: 9000         	str	r0, [sp]
;     if( xCount >= pxStreamBuffer->xLength )
 805b988: 9800         	ldr	r0, [sp]
 805b98a: 9901         	ldr	r1, [sp, #0x4]
 805b98c: 6889         	ldr	r1, [r1, #0x8]
 805b98e: 4288         	cmp	r0, r1
 805b990: d306         	blo	0x805b9a0 <prvBytesInBuffer+0x30> @ imm = #0xc
 805b992: e7ff         	b	0x805b994 <prvBytesInBuffer+0x24> @ imm = #-0x2
;         xCount -= pxStreamBuffer->xLength;
 805b994: 9801         	ldr	r0, [sp, #0x4]
 805b996: 6881         	ldr	r1, [r0, #0x8]
 805b998: 9800         	ldr	r0, [sp]
 805b99a: 1a40         	subs	r0, r0, r1
 805b99c: 9000         	str	r0, [sp]
;     }
 805b99e: e000         	b	0x805b9a2 <prvBytesInBuffer+0x32> @ imm = #0x0
 805b9a0: e7ff         	b	0x805b9a2 <prvBytesInBuffer+0x32> @ imm = #-0x2
;     return xCount;
 805b9a2: 9800         	ldr	r0, [sp]
 805b9a4: b002         	add	sp, #0x8
 805b9a6: 4770         	bx	lr

0805b9a8 <xStreamBufferSend>:
; {
 805b9a8: b580         	push	{r7, lr}
 805b9aa: 466f         	mov	r7, sp
 805b9ac: b08e         	sub	sp, #0x38
 805b9ae: 900d         	str	r0, [sp, #0x34]
 805b9b0: 910c         	str	r1, [sp, #0x30]
 805b9b2: 920b         	str	r2, [sp, #0x2c]
 805b9b4: 930a         	str	r3, [sp, #0x28]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b9b6: 980d         	ldr	r0, [sp, #0x34]
 805b9b8: 9009         	str	r0, [sp, #0x24]
 805b9ba: 2000         	movs	r0, #0x0
;     size_t xReturn, xSpace = 0;
 805b9bc: 9007         	str	r0, [sp, #0x1c]
;     size_t xRequiredSpace = xDataLengthBytes;
 805b9be: 990b         	ldr	r1, [sp, #0x2c]
 805b9c0: 9106         	str	r1, [sp, #0x18]
;     size_t xMaxReportedSpace = 0;
 805b9c2: 9003         	str	r0, [sp, #0xc]
;     configASSERT( pvTxData );
 805b9c4: 980c         	ldr	r0, [sp, #0x30]
 805b9c6: b920         	cbnz	r0, 0x805b9d2 <xStreamBufferSend+0x2a> @ imm = #0x8
 805b9c8: e7ff         	b	0x805b9ca <xStreamBufferSend+0x22> @ imm = #-0x2
 805b9ca: 486b         	ldr	r0, [pc, #0x1ac]        @ 0x805bb78 <xStreamBufferSend+0x1d0>
 805b9cc: 4780         	blx	r0
 805b9ce: e7ff         	b	0x805b9d0 <xStreamBufferSend+0x28> @ imm = #-0x2
 805b9d0: e7fe         	b	0x805b9d0 <xStreamBufferSend+0x28> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805b9d2: 9809         	ldr	r0, [sp, #0x24]
 805b9d4: b920         	cbnz	r0, 0x805b9e0 <xStreamBufferSend+0x38> @ imm = #0x8
 805b9d6: e7ff         	b	0x805b9d8 <xStreamBufferSend+0x30> @ imm = #-0x2
 805b9d8: 4866         	ldr	r0, [pc, #0x198]        @ 0x805bb74 <xStreamBufferSend+0x1cc>
 805b9da: 4780         	blx	r0
 805b9dc: e7ff         	b	0x805b9de <xStreamBufferSend+0x36> @ imm = #-0x2
 805b9de: e7fe         	b	0x805b9de <xStreamBufferSend+0x36> @ imm = #-0x4
;     xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 805b9e0: 9809         	ldr	r0, [sp, #0x24]
 805b9e2: 6880         	ldr	r0, [r0, #0x8]
 805b9e4: 3801         	subs	r0, #0x1
 805b9e6: 9003         	str	r0, [sp, #0xc]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b9e8: 9809         	ldr	r0, [sp, #0x24]
 805b9ea: 7f00         	ldrb	r0, [r0, #0x1c]
 805b9ec: 07c0         	lsls	r0, r0, #0x1f
 805b9ee: b1b0         	cbz	r0, 0x805ba1e <xStreamBufferSend+0x76> @ imm = #0x2c
 805b9f0: e7ff         	b	0x805b9f2 <xStreamBufferSend+0x4a> @ imm = #-0x2
;         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805b9f2: 9806         	ldr	r0, [sp, #0x18]
 805b9f4: 3004         	adds	r0, #0x4
 805b9f6: 9006         	str	r0, [sp, #0x18]
;         configASSERT( xRequiredSpace > xDataLengthBytes );
 805b9f8: 9806         	ldr	r0, [sp, #0x18]
 805b9fa: 990b         	ldr	r1, [sp, #0x2c]
 805b9fc: 4288         	cmp	r0, r1
 805b9fe: d804         	bhi	0x805ba0a <xStreamBufferSend+0x62> @ imm = #0x8
 805ba00: e7ff         	b	0x805ba02 <xStreamBufferSend+0x5a> @ imm = #-0x2
 805ba02: 485b         	ldr	r0, [pc, #0x16c]        @ 0x805bb70 <xStreamBufferSend+0x1c8>
 805ba04: 4780         	blx	r0
 805ba06: e7ff         	b	0x805ba08 <xStreamBufferSend+0x60> @ imm = #-0x2
 805ba08: e7fe         	b	0x805ba08 <xStreamBufferSend+0x60> @ imm = #-0x4
;         if( xRequiredSpace > xMaxReportedSpace )
 805ba0a: 9806         	ldr	r0, [sp, #0x18]
 805ba0c: 9903         	ldr	r1, [sp, #0xc]
 805ba0e: 4288         	cmp	r0, r1
 805ba10: d903         	bls	0x805ba1a <xStreamBufferSend+0x72> @ imm = #0x6
 805ba12: e7ff         	b	0x805ba14 <xStreamBufferSend+0x6c> @ imm = #-0x2
 805ba14: 2000         	movs	r0, #0x0
;             xTicksToWait = ( TickType_t ) 0;
 805ba16: 900a         	str	r0, [sp, #0x28]
;         }
 805ba18: e000         	b	0x805ba1c <xStreamBufferSend+0x74> @ imm = #0x0
 805ba1a: e7ff         	b	0x805ba1c <xStreamBufferSend+0x74> @ imm = #-0x2
;     }
 805ba1c: e009         	b	0x805ba32 <xStreamBufferSend+0x8a> @ imm = #0x12
;         if( xRequiredSpace > xMaxReportedSpace )
 805ba1e: 9806         	ldr	r0, [sp, #0x18]
 805ba20: 9903         	ldr	r1, [sp, #0xc]
 805ba22: 4288         	cmp	r0, r1
 805ba24: d903         	bls	0x805ba2e <xStreamBufferSend+0x86> @ imm = #0x6
 805ba26: e7ff         	b	0x805ba28 <xStreamBufferSend+0x80> @ imm = #-0x2
;             xRequiredSpace = xMaxReportedSpace;
 805ba28: 9803         	ldr	r0, [sp, #0xc]
 805ba2a: 9006         	str	r0, [sp, #0x18]
;         }
 805ba2c: e000         	b	0x805ba30 <xStreamBufferSend+0x88> @ imm = #0x0
 805ba2e: e7ff         	b	0x805ba30 <xStreamBufferSend+0x88> @ imm = #-0x2
 805ba30: e7ff         	b	0x805ba32 <xStreamBufferSend+0x8a> @ imm = #-0x2
;     if( xTicksToWait != ( TickType_t ) 0 )
 805ba32: 980a         	ldr	r0, [sp, #0x28]
 805ba34: b3e0         	cbz	r0, 0x805bab0 <xStreamBufferSend+0x108> @ imm = #0x78
 805ba36: e7ff         	b	0x805ba38 <xStreamBufferSend+0x90> @ imm = #-0x2
;         vTaskSetTimeOutState( &xTimeOut );
 805ba38: 493d         	ldr	r1, [pc, #0xf4]         @ 0x805bb30 <xStreamBufferSend+0x188>
 805ba3a: a804         	add	r0, sp, #0x10
 805ba3c: 4788         	blx	r1
;         do
 805ba3e: e7ff         	b	0x805ba40 <xStreamBufferSend+0x98> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805ba40: 483c         	ldr	r0, [pc, #0xf0]         @ 0x805bb34 <xStreamBufferSend+0x18c>
 805ba42: 4780         	blx	r0
;                 xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805ba44: 9809         	ldr	r0, [sp, #0x24]
 805ba46: 493c         	ldr	r1, [pc, #0xf0]         @ 0x805bb38 <xStreamBufferSend+0x190>
 805ba48: 4788         	blx	r1
 805ba4a: 9007         	str	r0, [sp, #0x1c]
;                 if( xSpace < xRequiredSpace )
 805ba4c: 9807         	ldr	r0, [sp, #0x1c]
 805ba4e: 9906         	ldr	r1, [sp, #0x18]
 805ba50: 4288         	cmp	r0, r1
 805ba52: d211         	bhs	0x805ba78 <xStreamBufferSend+0xd0> @ imm = #0x22
 805ba54: e7ff         	b	0x805ba56 <xStreamBufferSend+0xae> @ imm = #-0x2
;                     ( void ) xTaskNotifyStateClear( NULL );
 805ba56: 4a3a         	ldr	r2, [pc, #0xe8]         @ 0x805bb40 <xStreamBufferSend+0x198>
 805ba58: 2100         	movs	r1, #0x0
 805ba5a: 4608         	mov	r0, r1
 805ba5c: 4790         	blx	r2
;                     configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 805ba5e: 9809         	ldr	r0, [sp, #0x24]
 805ba60: 6940         	ldr	r0, [r0, #0x14]
 805ba62: b120         	cbz	r0, 0x805ba6e <xStreamBufferSend+0xc6> @ imm = #0x8
 805ba64: e7ff         	b	0x805ba66 <xStreamBufferSend+0xbe> @ imm = #-0x2
 805ba66: 4841         	ldr	r0, [pc, #0x104]        @ 0x805bb6c <xStreamBufferSend+0x1c4>
 805ba68: 4780         	blx	r0
 805ba6a: e7ff         	b	0x805ba6c <xStreamBufferSend+0xc4> @ imm = #-0x2
 805ba6c: e7fe         	b	0x805ba6c <xStreamBufferSend+0xc4> @ imm = #-0x4
;                     pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 805ba6e: 4835         	ldr	r0, [pc, #0xd4]         @ 0x805bb44 <xStreamBufferSend+0x19c>
 805ba70: 4780         	blx	r0
 805ba72: 9909         	ldr	r1, [sp, #0x24]
 805ba74: 6148         	str	r0, [r1, #0x14]
;                 }
 805ba76: e002         	b	0x805ba7e <xStreamBufferSend+0xd6> @ imm = #0x4
;                     taskEXIT_CRITICAL();
 805ba78: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805bb3c <xStreamBufferSend+0x194>
 805ba7a: 4780         	blx	r0
;                     break;
 805ba7c: e017         	b	0x805baae <xStreamBufferSend+0x106> @ imm = #0x2e
;             taskEXIT_CRITICAL();
 805ba7e: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805bb48 <xStreamBufferSend+0x1a0>
 805ba80: 4780         	blx	r0
;             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 805ba82: 980a         	ldr	r0, [sp, #0x28]
 805ba84: 4669         	mov	r1, sp
 805ba86: 6008         	str	r0, [r1]
 805ba88: f8df c0c0    	ldr.w	r12, [pc, #0xc0]        @ 0x805bb4c <xStreamBufferSend+0x1a4>
 805ba8c: 2300         	movs	r3, #0x0
 805ba8e: 9302         	str	r3, [sp, #0x8]
 805ba90: 4618         	mov	r0, r3
 805ba92: 4619         	mov	r1, r3
 805ba94: 461a         	mov	r2, r3
 805ba96: 47e0         	blx	r12
;             pxStreamBuffer->xTaskWaitingToSend = NULL;
 805ba98: 9802         	ldr	r0, [sp, #0x8]
 805ba9a: 9909         	ldr	r1, [sp, #0x24]
 805ba9c: 6148         	str	r0, [r1, #0x14]
;         } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 805ba9e: e7ff         	b	0x805baa0 <xStreamBufferSend+0xf8> @ imm = #-0x2
 805baa0: 4a2b         	ldr	r2, [pc, #0xac]         @ 0x805bb50 <xStreamBufferSend+0x1a8>
 805baa2: a804         	add	r0, sp, #0x10
 805baa4: a90a         	add	r1, sp, #0x28
 805baa6: 4790         	blx	r2
 805baa8: 2800         	cmp	r0, #0x0
 805baaa: d0c9         	beq	0x805ba40 <xStreamBufferSend+0x98> @ imm = #-0x6e
 805baac: e7ff         	b	0x805baae <xStreamBufferSend+0x106> @ imm = #-0x2
;     }
 805baae: e000         	b	0x805bab2 <xStreamBufferSend+0x10a> @ imm = #0x0
 805bab0: e7ff         	b	0x805bab2 <xStreamBufferSend+0x10a> @ imm = #-0x2
;     if( xSpace == ( size_t ) 0 )
 805bab2: 9807         	ldr	r0, [sp, #0x1c]
 805bab4: b928         	cbnz	r0, 0x805bac2 <xStreamBufferSend+0x11a> @ imm = #0xa
 805bab6: e7ff         	b	0x805bab8 <xStreamBufferSend+0x110> @ imm = #-0x2
;         xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805bab8: 9809         	ldr	r0, [sp, #0x24]
 805baba: 4926         	ldr	r1, [pc, #0x98]         @ 0x805bb54 <xStreamBufferSend+0x1ac>
 805babc: 4788         	blx	r1
 805babe: 9007         	str	r0, [sp, #0x1c]
;     }
 805bac0: e000         	b	0x805bac4 <xStreamBufferSend+0x11c> @ imm = #0x0
 805bac2: e7ff         	b	0x805bac4 <xStreamBufferSend+0x11c> @ imm = #-0x2
;     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 805bac4: 9809         	ldr	r0, [sp, #0x24]
 805bac6: 990c         	ldr	r1, [sp, #0x30]
 805bac8: 9a0b         	ldr	r2, [sp, #0x2c]
 805baca: 9b07         	ldr	r3, [sp, #0x1c]
 805bacc: f8dd c018    	ldr.w	r12, [sp, #0x18]
 805bad0: 46ee         	mov	lr, sp
 805bad2: f8ce c000    	str.w	r12, [lr]
 805bad6: f8df c080    	ldr.w	r12, [pc, #0x80]        @ 0x805bb58 <xStreamBufferSend+0x1b0>
 805bada: 47e0         	blx	r12
 805badc: 9008         	str	r0, [sp, #0x20]
;     if( xReturn > ( size_t ) 0 )
 805bade: 9808         	ldr	r0, [sp, #0x20]
 805bae0: b310         	cbz	r0, 0x805bb28 <xStreamBufferSend+0x180> @ imm = #0x44
 805bae2: e7ff         	b	0x805bae4 <xStreamBufferSend+0x13c> @ imm = #-0x2
;         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 805bae4: 9809         	ldr	r0, [sp, #0x24]
 805bae6: 491d         	ldr	r1, [pc, #0x74]         @ 0x805bb5c <xStreamBufferSend+0x1b4>
 805bae8: 4788         	blx	r1
 805baea: 9909         	ldr	r1, [sp, #0x24]
 805baec: 68c9         	ldr	r1, [r1, #0xc]
 805baee: 4288         	cmp	r0, r1
 805baf0: d318         	blo	0x805bb24 <xStreamBufferSend+0x17c> @ imm = #0x30
 805baf2: e7ff         	b	0x805baf4 <xStreamBufferSend+0x14c> @ imm = #-0x2
;             prvSEND_COMPLETED( pxStreamBuffer );
 805baf4: 481a         	ldr	r0, [pc, #0x68]         @ 0x805bb60 <xStreamBufferSend+0x1b8>
 805baf6: 4780         	blx	r0
 805baf8: 9809         	ldr	r0, [sp, #0x24]
 805bafa: 6900         	ldr	r0, [r0, #0x10]
 805bafc: b178         	cbz	r0, 0x805bb1e <xStreamBufferSend+0x176> @ imm = #0x1e
 805bafe: e7ff         	b	0x805bb00 <xStreamBufferSend+0x158> @ imm = #-0x2
 805bb00: 9809         	ldr	r0, [sp, #0x24]
 805bb02: 6900         	ldr	r0, [r0, #0x10]
 805bb04: 4669         	mov	r1, sp
 805bb06: 2300         	movs	r3, #0x0
 805bb08: 9301         	str	r3, [sp, #0x4]
 805bb0a: 600b         	str	r3, [r1]
 805bb0c: f8df c054    	ldr.w	r12, [pc, #0x54]        @ 0x805bb64 <xStreamBufferSend+0x1bc>
 805bb10: 4619         	mov	r1, r3
 805bb12: 461a         	mov	r2, r3
 805bb14: 47e0         	blx	r12
 805bb16: 9801         	ldr	r0, [sp, #0x4]
 805bb18: 9909         	ldr	r1, [sp, #0x24]
 805bb1a: 6108         	str	r0, [r1, #0x10]
 805bb1c: e7ff         	b	0x805bb1e <xStreamBufferSend+0x176> @ imm = #-0x2
 805bb1e: 4812         	ldr	r0, [pc, #0x48]         @ 0x805bb68 <xStreamBufferSend+0x1c0>
 805bb20: 4780         	blx	r0
;         }
 805bb22: e000         	b	0x805bb26 <xStreamBufferSend+0x17e> @ imm = #0x0
 805bb24: e7ff         	b	0x805bb26 <xStreamBufferSend+0x17e> @ imm = #-0x2
;     }
 805bb26: e000         	b	0x805bb2a <xStreamBufferSend+0x182> @ imm = #0x0
 805bb28: e7ff         	b	0x805bb2a <xStreamBufferSend+0x182> @ imm = #-0x2
;     return xReturn;
 805bb2a: 9808         	ldr	r0, [sp, #0x20]
 805bb2c: b00e         	add	sp, #0x38
 805bb2e: bd80         	pop	{r7, pc}

0805bb30 <$d.15>:
 805bb30: 11 71 05 08  	.word	0x08057111
 805bb34: 19 c4 05 08  	.word	0x0805c419
 805bb38: d1 b8 05 08  	.word	0x0805b8d1
 805bb3c: 3d c4 05 08  	.word	0x0805c43d
 805bb40: 59 83 05 08  	.word	0x08058359
 805bb44: 79 74 05 08  	.word	0x08057479
 805bb48: 3d c4 05 08  	.word	0x0805c43d
 805bb4c: b5 7a 05 08  	.word	0x08057ab5
 805bb50: 81 71 05 08  	.word	0x08057181
 805bb54: d1 b8 05 08  	.word	0x0805b8d1
 805bb58: 7d bb 05 08  	.word	0x0805bb7d
 805bb5c: 71 b9 05 08  	.word	0x0805b971
 805bb60: 59 58 05 08  	.word	0x08055859
 805bb64: 01 7c 05 08  	.word	0x08057c01
 805bb68: 7d 59 05 08  	.word	0x0805597d
 805bb6c: 55 cd 05 08  	.word	0x0805cd55
 805bb70: 55 cd 05 08  	.word	0x0805cd55
 805bb74: 55 cd 05 08  	.word	0x0805cd55
 805bb78: 55 cd 05 08  	.word	0x0805cd55

0805bb7c <prvWriteMessageToBuffer>:
; {
 805bb7c: b580         	push	{r7, lr}
 805bb7e: 466f         	mov	r7, sp
 805bb80: b088         	sub	sp, #0x20
 805bb82: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805bb86: 9007         	str	r0, [sp, #0x1c]
 805bb88: 9106         	str	r1, [sp, #0x18]
 805bb8a: 9205         	str	r2, [sp, #0x14]
 805bb8c: 9304         	str	r3, [sp, #0x10]
;     size_t xNextHead = pxStreamBuffer->xHead;
 805bb8e: 9807         	ldr	r0, [sp, #0x1c]
 805bb90: 6840         	ldr	r0, [r0, #0x4]
 805bb92: 9003         	str	r0, [sp, #0xc]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805bb94: 9807         	ldr	r0, [sp, #0x1c]
 805bb96: 7f00         	ldrb	r0, [r0, #0x1c]
 805bb98: 07c0         	lsls	r0, r0, #0x1f
 805bb9a: b1e8         	cbz	r0, 0x805bbd8 <prvWriteMessageToBuffer+0x5c> @ imm = #0x3a
 805bb9c: e7ff         	b	0x805bb9e <prvWriteMessageToBuffer+0x22> @ imm = #-0x2
;         xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
 805bb9e: 9805         	ldr	r0, [sp, #0x14]
 805bba0: 9002         	str	r0, [sp, #0x8]
;         configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );
 805bba2: 9802         	ldr	r0, [sp, #0x8]
 805bba4: 9905         	ldr	r1, [sp, #0x14]
 805bba6: 4288         	cmp	r0, r1
 805bba8: d004         	beq	0x805bbb4 <prvWriteMessageToBuffer+0x38> @ imm = #0x8
 805bbaa: e7ff         	b	0x805bbac <prvWriteMessageToBuffer+0x30> @ imm = #-0x2
 805bbac: 481b         	ldr	r0, [pc, #0x6c]         @ 0x805bc1c <prvWriteMessageToBuffer+0xa0>
 805bbae: 4780         	blx	r0
 805bbb0: e7ff         	b	0x805bbb2 <prvWriteMessageToBuffer+0x36> @ imm = #-0x2
 805bbb2: e7fe         	b	0x805bbb2 <prvWriteMessageToBuffer+0x36> @ imm = #-0x4
;         if( xSpace >= xRequiredSpace )
 805bbb4: 9804         	ldr	r0, [sp, #0x10]
 805bbb6: 68b9         	ldr	r1, [r7, #0x8]
 805bbb8: 4288         	cmp	r0, r1
 805bbba: d309         	blo	0x805bbd0 <prvWriteMessageToBuffer+0x54> @ imm = #0x12
 805bbbc: e7ff         	b	0x805bbbe <prvWriteMessageToBuffer+0x42> @ imm = #-0x2
;             xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 805bbbe: 9807         	ldr	r0, [sp, #0x1c]
 805bbc0: 9b03         	ldr	r3, [sp, #0xc]
 805bbc2: f8df c050    	ldr.w	r12, [pc, #0x50]        @ 0x805bc14 <prvWriteMessageToBuffer+0x98>
 805bbc6: a902         	add	r1, sp, #0x8
 805bbc8: 2204         	movs	r2, #0x4
 805bbca: 47e0         	blx	r12
 805bbcc: 9003         	str	r0, [sp, #0xc]
;         }
 805bbce: e002         	b	0x805bbd6 <prvWriteMessageToBuffer+0x5a> @ imm = #0x4
 805bbd0: 2000         	movs	r0, #0x0
;             xDataLengthBytes = 0;
 805bbd2: 9005         	str	r0, [sp, #0x14]
 805bbd4: e7ff         	b	0x805bbd6 <prvWriteMessageToBuffer+0x5a> @ imm = #-0x2
;     }
 805bbd6: e00d         	b	0x805bbf4 <prvWriteMessageToBuffer+0x78> @ imm = #0x1a
;         xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 805bbd8: 9805         	ldr	r0, [sp, #0x14]
 805bbda: 9904         	ldr	r1, [sp, #0x10]
 805bbdc: 4288         	cmp	r0, r1
 805bbde: d203         	bhs	0x805bbe8 <prvWriteMessageToBuffer+0x6c> @ imm = #0x6
 805bbe0: e7ff         	b	0x805bbe2 <prvWriteMessageToBuffer+0x66> @ imm = #-0x2
 805bbe2: 9805         	ldr	r0, [sp, #0x14]
 805bbe4: 9001         	str	r0, [sp, #0x4]
 805bbe6: e002         	b	0x805bbee <prvWriteMessageToBuffer+0x72> @ imm = #0x4
 805bbe8: 9804         	ldr	r0, [sp, #0x10]
 805bbea: 9001         	str	r0, [sp, #0x4]
 805bbec: e7ff         	b	0x805bbee <prvWriteMessageToBuffer+0x72> @ imm = #-0x2
 805bbee: 9801         	ldr	r0, [sp, #0x4]
 805bbf0: 9005         	str	r0, [sp, #0x14]
 805bbf2: e7ff         	b	0x805bbf4 <prvWriteMessageToBuffer+0x78> @ imm = #-0x2
;     if( xDataLengthBytes != ( size_t ) 0 )
 805bbf4: 9805         	ldr	r0, [sp, #0x14]
 805bbf6: b150         	cbz	r0, 0x805bc0e <prvWriteMessageToBuffer+0x92> @ imm = #0x14
 805bbf8: e7ff         	b	0x805bbfa <prvWriteMessageToBuffer+0x7e> @ imm = #-0x2
;         pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 805bbfa: 9807         	ldr	r0, [sp, #0x1c]
 805bbfc: 9906         	ldr	r1, [sp, #0x18]
 805bbfe: 9a05         	ldr	r2, [sp, #0x14]
 805bc00: 9b03         	ldr	r3, [sp, #0xc]
 805bc02: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805bc18 <prvWriteMessageToBuffer+0x9c>
 805bc06: 47e0         	blx	r12
 805bc08: 9907         	ldr	r1, [sp, #0x1c]
 805bc0a: 6048         	str	r0, [r1, #0x4]
;     }
 805bc0c: e7ff         	b	0x805bc0e <prvWriteMessageToBuffer+0x92> @ imm = #-0x2
;     return xDataLengthBytes;
 805bc0e: 9805         	ldr	r0, [sp, #0x14]
 805bc10: b008         	add	sp, #0x20
 805bc12: bd80         	pop	{r7, pc}

0805bc14 <$d.17>:
 805bc14: d9 c2 05 08  	.word	0x0805c2d9
 805bc18: d9 c2 05 08  	.word	0x0805c2d9
 805bc1c: 55 cd 05 08  	.word	0x0805cd55

0805bc20 <xStreamBufferSendFromISR>:
; {
 805bc20: b580         	push	{r7, lr}
 805bc22: 466f         	mov	r7, sp
 805bc24: b08c         	sub	sp, #0x30
 805bc26: 900b         	str	r0, [sp, #0x2c]
 805bc28: 910a         	str	r1, [sp, #0x28]
 805bc2a: 9209         	str	r2, [sp, #0x24]
 805bc2c: 9308         	str	r3, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805bc2e: 980b         	ldr	r0, [sp, #0x2c]
 805bc30: 9007         	str	r0, [sp, #0x1c]
;     size_t xRequiredSpace = xDataLengthBytes;
 805bc32: 9809         	ldr	r0, [sp, #0x24]
 805bc34: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pvTxData );
 805bc36: 980a         	ldr	r0, [sp, #0x28]
 805bc38: b920         	cbnz	r0, 0x805bc44 <xStreamBufferSendFromISR+0x24> @ imm = #0x8
 805bc3a: e7ff         	b	0x805bc3c <xStreamBufferSendFromISR+0x1c> @ imm = #-0x2
 805bc3c: 4831         	ldr	r0, [pc, #0xc4]         @ 0x805bd04 <xStreamBufferSendFromISR+0xe4>
 805bc3e: 4780         	blx	r0
 805bc40: e7ff         	b	0x805bc42 <xStreamBufferSendFromISR+0x22> @ imm = #-0x2
 805bc42: e7fe         	b	0x805bc42 <xStreamBufferSendFromISR+0x22> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805bc44: 9807         	ldr	r0, [sp, #0x1c]
 805bc46: b920         	cbnz	r0, 0x805bc52 <xStreamBufferSendFromISR+0x32> @ imm = #0x8
 805bc48: e7ff         	b	0x805bc4a <xStreamBufferSendFromISR+0x2a> @ imm = #-0x2
 805bc4a: 482d         	ldr	r0, [pc, #0xb4]         @ 0x805bd00 <xStreamBufferSendFromISR+0xe0>
 805bc4c: 4780         	blx	r0
 805bc4e: e7ff         	b	0x805bc50 <xStreamBufferSendFromISR+0x30> @ imm = #-0x2
 805bc50: e7fe         	b	0x805bc50 <xStreamBufferSendFromISR+0x30> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805bc52: 9807         	ldr	r0, [sp, #0x1c]
 805bc54: 7f00         	ldrb	r0, [r0, #0x1c]
 805bc56: 07c0         	lsls	r0, r0, #0x1f
 805bc58: b120         	cbz	r0, 0x805bc64 <xStreamBufferSendFromISR+0x44> @ imm = #0x8
 805bc5a: e7ff         	b	0x805bc5c <xStreamBufferSendFromISR+0x3c> @ imm = #-0x2
;         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805bc5c: 9804         	ldr	r0, [sp, #0x10]
 805bc5e: 3004         	adds	r0, #0x4
 805bc60: 9004         	str	r0, [sp, #0x10]
;     }
 805bc62: e000         	b	0x805bc66 <xStreamBufferSendFromISR+0x46> @ imm = #0x0
 805bc64: e7ff         	b	0x805bc66 <xStreamBufferSendFromISR+0x46> @ imm = #-0x2
;     xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805bc66: 9807         	ldr	r0, [sp, #0x1c]
 805bc68: 491f         	ldr	r1, [pc, #0x7c]         @ 0x805bce8 <xStreamBufferSendFromISR+0xc8>
 805bc6a: 4788         	blx	r1
 805bc6c: 9005         	str	r0, [sp, #0x14]
;     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 805bc6e: 9807         	ldr	r0, [sp, #0x1c]
 805bc70: 990a         	ldr	r1, [sp, #0x28]
 805bc72: 9a09         	ldr	r2, [sp, #0x24]
 805bc74: 9b05         	ldr	r3, [sp, #0x14]
 805bc76: f8dd c010    	ldr.w	r12, [sp, #0x10]
 805bc7a: 46ee         	mov	lr, sp
 805bc7c: f8ce c000    	str.w	r12, [lr]
 805bc80: f8df c068    	ldr.w	r12, [pc, #0x68]        @ 0x805bcec <xStreamBufferSendFromISR+0xcc>
 805bc84: 47e0         	blx	r12
 805bc86: 9006         	str	r0, [sp, #0x18]
;     if( xReturn > ( size_t ) 0 )
 805bc88: 9806         	ldr	r0, [sp, #0x18]
 805bc8a: b340         	cbz	r0, 0x805bcde <xStreamBufferSendFromISR+0xbe> @ imm = #0x50
 805bc8c: e7ff         	b	0x805bc8e <xStreamBufferSendFromISR+0x6e> @ imm = #-0x2
;         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 805bc8e: 9807         	ldr	r0, [sp, #0x1c]
 805bc90: 4917         	ldr	r1, [pc, #0x5c]         @ 0x805bcf0 <xStreamBufferSendFromISR+0xd0>
 805bc92: 4788         	blx	r1
 805bc94: 9907         	ldr	r1, [sp, #0x1c]
 805bc96: 68c9         	ldr	r1, [r1, #0xc]
 805bc98: 4288         	cmp	r0, r1
 805bc9a: d31e         	blo	0x805bcda <xStreamBufferSendFromISR+0xba> @ imm = #0x3c
 805bc9c: e7ff         	b	0x805bc9e <xStreamBufferSendFromISR+0x7e> @ imm = #-0x2
;             prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 805bc9e: e7ff         	b	0x805bca0 <xStreamBufferSendFromISR+0x80> @ imm = #-0x2
 805bca0: 4814         	ldr	r0, [pc, #0x50]         @ 0x805bcf4 <xStreamBufferSendFromISR+0xd4>
 805bca2: 4780         	blx	r0
 805bca4: 9003         	str	r0, [sp, #0xc]
 805bca6: 9807         	ldr	r0, [sp, #0x1c]
 805bca8: 6900         	ldr	r0, [r0, #0x10]
 805bcaa: b188         	cbz	r0, 0x805bcd0 <xStreamBufferSendFromISR+0xb0> @ imm = #0x22
 805bcac: e7ff         	b	0x805bcae <xStreamBufferSendFromISR+0x8e> @ imm = #-0x2
 805bcae: 9807         	ldr	r0, [sp, #0x1c]
 805bcb0: 6900         	ldr	r0, [r0, #0x10]
 805bcb2: 9a08         	ldr	r2, [sp, #0x20]
 805bcb4: 4669         	mov	r1, sp
 805bcb6: 604a         	str	r2, [r1, #0x4]
 805bcb8: 2300         	movs	r3, #0x0
 805bcba: 9302         	str	r3, [sp, #0x8]
 805bcbc: 600b         	str	r3, [r1]
 805bcbe: f8df c038    	ldr.w	r12, [pc, #0x38]        @ 0x805bcf8 <xStreamBufferSendFromISR+0xd8>
 805bcc2: 4619         	mov	r1, r3
 805bcc4: 461a         	mov	r2, r3
 805bcc6: 47e0         	blx	r12
 805bcc8: 9802         	ldr	r0, [sp, #0x8]
 805bcca: 9907         	ldr	r1, [sp, #0x1c]
 805bccc: 6108         	str	r0, [r1, #0x10]
 805bcce: e7ff         	b	0x805bcd0 <xStreamBufferSendFromISR+0xb0> @ imm = #-0x2
 805bcd0: 9803         	ldr	r0, [sp, #0xc]
 805bcd2: 490a         	ldr	r1, [pc, #0x28]         @ 0x805bcfc <xStreamBufferSendFromISR+0xdc>
 805bcd4: 4788         	blx	r1
 805bcd6: e7ff         	b	0x805bcd8 <xStreamBufferSendFromISR+0xb8> @ imm = #-0x2
;         }
 805bcd8: e000         	b	0x805bcdc <xStreamBufferSendFromISR+0xbc> @ imm = #0x0
 805bcda: e7ff         	b	0x805bcdc <xStreamBufferSendFromISR+0xbc> @ imm = #-0x2
;     }
 805bcdc: e000         	b	0x805bce0 <xStreamBufferSendFromISR+0xc0> @ imm = #0x0
 805bcde: e7ff         	b	0x805bce0 <xStreamBufferSendFromISR+0xc0> @ imm = #-0x2
;     return xReturn;
 805bce0: 9806         	ldr	r0, [sp, #0x18]
 805bce2: b00c         	add	sp, #0x30
 805bce4: bd80         	pop	{r7, pc}
 805bce6: bf00         	nop

0805bce8 <$d.19>:
 805bce8: d1 b8 05 08  	.word	0x0805b8d1
 805bcec: 7d bb 05 08  	.word	0x0805bb7d
 805bcf0: 71 b9 05 08  	.word	0x0805b971
 805bcf4: 55 cd 05 08  	.word	0x0805cd55
 805bcf8: 69 7e 05 08  	.word	0x08057e69
 805bcfc: 6b cd 05 08  	.word	0x0805cd6b
 805bd00: 55 cd 05 08  	.word	0x0805cd55
 805bd04: 55 cd 05 08  	.word	0x0805cd55

0805bd08 <xStreamBufferReceive>:
; {
 805bd08: b580         	push	{r7, lr}
 805bd0a: 466f         	mov	r7, sp
 805bd0c: b08c         	sub	sp, #0x30
 805bd0e: 900b         	str	r0, [sp, #0x2c]
 805bd10: 910a         	str	r1, [sp, #0x28]
 805bd12: 9209         	str	r2, [sp, #0x24]
 805bd14: 9308         	str	r3, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805bd16: 980b         	ldr	r0, [sp, #0x2c]
 805bd18: 9007         	str	r0, [sp, #0x1c]
 805bd1a: 2000         	movs	r0, #0x0
;     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 805bd1c: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pvRxData );
 805bd1e: 980a         	ldr	r0, [sp, #0x28]
 805bd20: b920         	cbnz	r0, 0x805bd2c <xStreamBufferReceive+0x24> @ imm = #0x8
 805bd22: e7ff         	b	0x805bd24 <xStreamBufferReceive+0x1c> @ imm = #-0x2
 805bd24: 4850         	ldr	r0, [pc, #0x140]        @ 0x805be68 <xStreamBufferReceive+0x160>
 805bd26: 4780         	blx	r0
 805bd28: e7ff         	b	0x805bd2a <xStreamBufferReceive+0x22> @ imm = #-0x2
 805bd2a: e7fe         	b	0x805bd2a <xStreamBufferReceive+0x22> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805bd2c: 9807         	ldr	r0, [sp, #0x1c]
 805bd2e: b920         	cbnz	r0, 0x805bd3a <xStreamBufferReceive+0x32> @ imm = #0x8
 805bd30: e7ff         	b	0x805bd32 <xStreamBufferReceive+0x2a> @ imm = #-0x2
 805bd32: 484c         	ldr	r0, [pc, #0x130]        @ 0x805be64 <xStreamBufferReceive+0x15c>
 805bd34: 4780         	blx	r0
 805bd36: e7ff         	b	0x805bd38 <xStreamBufferReceive+0x30> @ imm = #-0x2
 805bd38: e7fe         	b	0x805bd38 <xStreamBufferReceive+0x30> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805bd3a: 9807         	ldr	r0, [sp, #0x1c]
 805bd3c: 7f00         	ldrb	r0, [r0, #0x1c]
 805bd3e: 07c0         	lsls	r0, r0, #0x1f
 805bd40: b118         	cbz	r0, 0x805bd4a <xStreamBufferReceive+0x42> @ imm = #0x6
 805bd42: e7ff         	b	0x805bd44 <xStreamBufferReceive+0x3c> @ imm = #-0x2
 805bd44: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805bd46: 9004         	str	r0, [sp, #0x10]
;     }
 805bd48: e002         	b	0x805bd50 <xStreamBufferReceive+0x48> @ imm = #0x4
 805bd4a: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805bd4c: 9004         	str	r0, [sp, #0x10]
 805bd4e: e7ff         	b	0x805bd50 <xStreamBufferReceive+0x48> @ imm = #-0x2
;     if( xTicksToWait != ( TickType_t ) 0 )
 805bd50: 9808         	ldr	r0, [sp, #0x20]
 805bd52: b3c8         	cbz	r0, 0x805bdc8 <xStreamBufferReceive+0xc0> @ imm = #0x72
 805bd54: e7ff         	b	0x805bd56 <xStreamBufferReceive+0x4e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805bd56: 4837         	ldr	r0, [pc, #0xdc]         @ 0x805be34 <xStreamBufferReceive+0x12c>
 805bd58: 4780         	blx	r0
;             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805bd5a: 9807         	ldr	r0, [sp, #0x1c]
 805bd5c: 4936         	ldr	r1, [pc, #0xd8]         @ 0x805be38 <xStreamBufferReceive+0x130>
 805bd5e: 4788         	blx	r1
 805bd60: 9005         	str	r0, [sp, #0x14]
;             if( xBytesAvailable <= xBytesToStoreMessageLength )
 805bd62: 9805         	ldr	r0, [sp, #0x14]
 805bd64: 9904         	ldr	r1, [sp, #0x10]
 805bd66: 4288         	cmp	r0, r1
 805bd68: d811         	bhi	0x805bd8e <xStreamBufferReceive+0x86> @ imm = #0x22
 805bd6a: e7ff         	b	0x805bd6c <xStreamBufferReceive+0x64> @ imm = #-0x2
;                 ( void ) xTaskNotifyStateClear( NULL );
 805bd6c: 4a33         	ldr	r2, [pc, #0xcc]         @ 0x805be3c <xStreamBufferReceive+0x134>
 805bd6e: 2100         	movs	r1, #0x0
 805bd70: 4608         	mov	r0, r1
 805bd72: 4790         	blx	r2
;                 configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 805bd74: 9807         	ldr	r0, [sp, #0x1c]
 805bd76: 6900         	ldr	r0, [r0, #0x10]
 805bd78: b120         	cbz	r0, 0x805bd84 <xStreamBufferReceive+0x7c> @ imm = #0x8
 805bd7a: e7ff         	b	0x805bd7c <xStreamBufferReceive+0x74> @ imm = #-0x2
 805bd7c: 4838         	ldr	r0, [pc, #0xe0]         @ 0x805be60 <xStreamBufferReceive+0x158>
 805bd7e: 4780         	blx	r0
 805bd80: e7ff         	b	0x805bd82 <xStreamBufferReceive+0x7a> @ imm = #-0x2
 805bd82: e7fe         	b	0x805bd82 <xStreamBufferReceive+0x7a> @ imm = #-0x4
;                 pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 805bd84: 482e         	ldr	r0, [pc, #0xb8]         @ 0x805be40 <xStreamBufferReceive+0x138>
 805bd86: 4780         	blx	r0
 805bd88: 9907         	ldr	r1, [sp, #0x1c]
 805bd8a: 6108         	str	r0, [r1, #0x10]
;             }
 805bd8c: e000         	b	0x805bd90 <xStreamBufferReceive+0x88> @ imm = #0x0
 805bd8e: e7ff         	b	0x805bd90 <xStreamBufferReceive+0x88> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805bd90: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805be44 <xStreamBufferReceive+0x13c>
 805bd92: 4780         	blx	r0
;         if( xBytesAvailable <= xBytesToStoreMessageLength )
 805bd94: 9805         	ldr	r0, [sp, #0x14]
 805bd96: 9904         	ldr	r1, [sp, #0x10]
 805bd98: 4288         	cmp	r0, r1
 805bd9a: d813         	bhi	0x805bdc4 <xStreamBufferReceive+0xbc> @ imm = #0x26
 805bd9c: e7ff         	b	0x805bd9e <xStreamBufferReceive+0x96> @ imm = #-0x2
;             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 805bd9e: 9808         	ldr	r0, [sp, #0x20]
 805bda0: 4669         	mov	r1, sp
 805bda2: 6008         	str	r0, [r1]
 805bda4: f8df c0a0    	ldr.w	r12, [pc, #0xa0]        @ 0x805be48 <xStreamBufferReceive+0x140>
 805bda8: 2300         	movs	r3, #0x0
 805bdaa: 9303         	str	r3, [sp, #0xc]
 805bdac: 4618         	mov	r0, r3
 805bdae: 4619         	mov	r1, r3
 805bdb0: 461a         	mov	r2, r3
 805bdb2: 47e0         	blx	r12
;             pxStreamBuffer->xTaskWaitingToReceive = NULL;
 805bdb4: 9803         	ldr	r0, [sp, #0xc]
 805bdb6: 9907         	ldr	r1, [sp, #0x1c]
 805bdb8: 6108         	str	r0, [r1, #0x10]
;             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805bdba: 9807         	ldr	r0, [sp, #0x1c]
 805bdbc: 4923         	ldr	r1, [pc, #0x8c]         @ 0x805be4c <xStreamBufferReceive+0x144>
 805bdbe: 4788         	blx	r1
 805bdc0: 9005         	str	r0, [sp, #0x14]
;         }
 805bdc2: e000         	b	0x805bdc6 <xStreamBufferReceive+0xbe> @ imm = #0x0
 805bdc4: e7ff         	b	0x805bdc6 <xStreamBufferReceive+0xbe> @ imm = #-0x2
;     }
 805bdc6: e004         	b	0x805bdd2 <xStreamBufferReceive+0xca> @ imm = #0x8
;         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805bdc8: 9807         	ldr	r0, [sp, #0x1c]
 805bdca: 4919         	ldr	r1, [pc, #0x64]         @ 0x805be30 <xStreamBufferReceive+0x128>
 805bdcc: 4788         	blx	r1
 805bdce: 9005         	str	r0, [sp, #0x14]
 805bdd0: e7ff         	b	0x805bdd2 <xStreamBufferReceive+0xca> @ imm = #-0x2
;     if( xBytesAvailable > xBytesToStoreMessageLength )
 805bdd2: 9805         	ldr	r0, [sp, #0x14]
 805bdd4: 9904         	ldr	r1, [sp, #0x10]
 805bdd6: 4288         	cmp	r0, r1
 805bdd8: d925         	bls	0x805be26 <xStreamBufferReceive+0x11e> @ imm = #0x4a
 805bdda: e7ff         	b	0x805bddc <xStreamBufferReceive+0xd4> @ imm = #-0x2
;         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 805bddc: 9807         	ldr	r0, [sp, #0x1c]
 805bdde: 990a         	ldr	r1, [sp, #0x28]
 805bde0: 9a09         	ldr	r2, [sp, #0x24]
 805bde2: 9b05         	ldr	r3, [sp, #0x14]
 805bde4: f8df c068    	ldr.w	r12, [pc, #0x68]        @ 0x805be50 <xStreamBufferReceive+0x148>
 805bde8: 47e0         	blx	r12
 805bdea: 9006         	str	r0, [sp, #0x18]
;         if( xReceivedLength != ( size_t ) 0 )
 805bdec: 9806         	ldr	r0, [sp, #0x18]
 805bdee: b1c0         	cbz	r0, 0x805be22 <xStreamBufferReceive+0x11a> @ imm = #0x30
 805bdf0: e7ff         	b	0x805bdf2 <xStreamBufferReceive+0xea> @ imm = #-0x2
;             prvRECEIVE_COMPLETED( xStreamBuffer );
 805bdf2: 4818         	ldr	r0, [pc, #0x60]         @ 0x805be54 <xStreamBufferReceive+0x14c>
 805bdf4: 4780         	blx	r0
 805bdf6: 980b         	ldr	r0, [sp, #0x2c]
 805bdf8: 6940         	ldr	r0, [r0, #0x14]
 805bdfa: b178         	cbz	r0, 0x805be1c <xStreamBufferReceive+0x114> @ imm = #0x1e
 805bdfc: e7ff         	b	0x805bdfe <xStreamBufferReceive+0xf6> @ imm = #-0x2
 805bdfe: 980b         	ldr	r0, [sp, #0x2c]
 805be00: 6940         	ldr	r0, [r0, #0x14]
 805be02: 4669         	mov	r1, sp
 805be04: 2300         	movs	r3, #0x0
 805be06: 9302         	str	r3, [sp, #0x8]
 805be08: 600b         	str	r3, [r1]
 805be0a: f8df c04c    	ldr.w	r12, [pc, #0x4c]        @ 0x805be58 <xStreamBufferReceive+0x150>
 805be0e: 4619         	mov	r1, r3
 805be10: 461a         	mov	r2, r3
 805be12: 47e0         	blx	r12
 805be14: 9802         	ldr	r0, [sp, #0x8]
 805be16: 990b         	ldr	r1, [sp, #0x2c]
 805be18: 6148         	str	r0, [r1, #0x14]
 805be1a: e7ff         	b	0x805be1c <xStreamBufferReceive+0x114> @ imm = #-0x2
 805be1c: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805be5c <xStreamBufferReceive+0x154>
 805be1e: 4780         	blx	r0
;         }
 805be20: e000         	b	0x805be24 <xStreamBufferReceive+0x11c> @ imm = #0x0
 805be22: e7ff         	b	0x805be24 <xStreamBufferReceive+0x11c> @ imm = #-0x2
;     }
 805be24: e000         	b	0x805be28 <xStreamBufferReceive+0x120> @ imm = #0x0
 805be26: e7ff         	b	0x805be28 <xStreamBufferReceive+0x120> @ imm = #-0x2
;     return xReceivedLength;
 805be28: 9806         	ldr	r0, [sp, #0x18]
 805be2a: b00c         	add	sp, #0x30
 805be2c: bd80         	pop	{r7, pc}
 805be2e: bf00         	nop

0805be30 <$d.21>:
 805be30: 71 b9 05 08  	.word	0x0805b971
 805be34: 19 c4 05 08  	.word	0x0805c419
 805be38: 71 b9 05 08  	.word	0x0805b971
 805be3c: 59 83 05 08  	.word	0x08058359
 805be40: 79 74 05 08  	.word	0x08057479
 805be44: 3d c4 05 08  	.word	0x0805c43d
 805be48: b5 7a 05 08  	.word	0x08057ab5
 805be4c: 71 b9 05 08  	.word	0x0805b971
 805be50: 6d be 05 08  	.word	0x0805be6d
 805be54: 59 58 05 08  	.word	0x08055859
 805be58: 01 7c 05 08  	.word	0x08057c01
 805be5c: 7d 59 05 08  	.word	0x0805597d
 805be60: 55 cd 05 08  	.word	0x0805cd55
 805be64: 55 cd 05 08  	.word	0x0805cd55
 805be68: 55 cd 05 08  	.word	0x0805cd55

0805be6c <prvReadMessageFromBuffer>:
; {
 805be6c: b580         	push	{r7, lr}
 805be6e: 466f         	mov	r7, sp
 805be70: b08a         	sub	sp, #0x28
 805be72: 9009         	str	r0, [sp, #0x24]
 805be74: 9108         	str	r1, [sp, #0x20]
 805be76: 9207         	str	r2, [sp, #0x1c]
 805be78: 9306         	str	r3, [sp, #0x18]
;     size_t xNextTail = pxStreamBuffer->xTail;
 805be7a: 9809         	ldr	r0, [sp, #0x24]
 805be7c: 6800         	ldr	r0, [r0]
 805be7e: 9002         	str	r0, [sp, #0x8]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805be80: 9809         	ldr	r0, [sp, #0x24]
 805be82: 7f00         	ldrb	r0, [r0, #0x1c]
 805be84: 07c0         	lsls	r0, r0, #0x1f
 805be86: b1b8         	cbz	r0, 0x805beb8 <prvReadMessageFromBuffer+0x4c> @ imm = #0x2e
 805be88: e7ff         	b	0x805be8a <prvReadMessageFromBuffer+0x1e> @ imm = #-0x2
;         xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 805be8a: 9809         	ldr	r0, [sp, #0x24]
 805be8c: 9b02         	ldr	r3, [sp, #0x8]
 805be8e: f8df c068    	ldr.w	r12, [pc, #0x68]        @ 0x805bef8 <prvReadMessageFromBuffer+0x8c>
 805be92: a903         	add	r1, sp, #0xc
 805be94: 2204         	movs	r2, #0x4
 805be96: 47e0         	blx	r12
 805be98: 9002         	str	r0, [sp, #0x8]
;         xNextMessageLength = ( size_t ) xTempNextMessageLength;
 805be9a: 9803         	ldr	r0, [sp, #0xc]
 805be9c: 9004         	str	r0, [sp, #0x10]
;         xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805be9e: 9806         	ldr	r0, [sp, #0x18]
 805bea0: 3804         	subs	r0, #0x4
 805bea2: 9006         	str	r0, [sp, #0x18]
;         if( xNextMessageLength > xBufferLengthBytes )
 805bea4: 9804         	ldr	r0, [sp, #0x10]
 805bea6: 9907         	ldr	r1, [sp, #0x1c]
 805bea8: 4288         	cmp	r0, r1
 805beaa: d903         	bls	0x805beb4 <prvReadMessageFromBuffer+0x48> @ imm = #0x6
 805beac: e7ff         	b	0x805beae <prvReadMessageFromBuffer+0x42> @ imm = #-0x2
 805beae: 2000         	movs	r0, #0x0
;             xNextMessageLength = 0;
 805beb0: 9004         	str	r0, [sp, #0x10]
;         }
 805beb2: e000         	b	0x805beb6 <prvReadMessageFromBuffer+0x4a> @ imm = #0x0
 805beb4: e7ff         	b	0x805beb6 <prvReadMessageFromBuffer+0x4a> @ imm = #-0x2
;     }
 805beb6: e002         	b	0x805bebe <prvReadMessageFromBuffer+0x52> @ imm = #0x4
;         xNextMessageLength = xBufferLengthBytes;
 805beb8: 9807         	ldr	r0, [sp, #0x1c]
 805beba: 9004         	str	r0, [sp, #0x10]
 805bebc: e7ff         	b	0x805bebe <prvReadMessageFromBuffer+0x52> @ imm = #-0x2
;     xCount = configMIN( xNextMessageLength, xBytesAvailable );
 805bebe: 9804         	ldr	r0, [sp, #0x10]
 805bec0: 9906         	ldr	r1, [sp, #0x18]
 805bec2: 4288         	cmp	r0, r1
 805bec4: d203         	bhs	0x805bece <prvReadMessageFromBuffer+0x62> @ imm = #0x6
 805bec6: e7ff         	b	0x805bec8 <prvReadMessageFromBuffer+0x5c> @ imm = #-0x2
 805bec8: 9804         	ldr	r0, [sp, #0x10]
 805beca: 9001         	str	r0, [sp, #0x4]
 805becc: e002         	b	0x805bed4 <prvReadMessageFromBuffer+0x68> @ imm = #0x4
 805bece: 9806         	ldr	r0, [sp, #0x18]
 805bed0: 9001         	str	r0, [sp, #0x4]
 805bed2: e7ff         	b	0x805bed4 <prvReadMessageFromBuffer+0x68> @ imm = #-0x2
 805bed4: 9801         	ldr	r0, [sp, #0x4]
 805bed6: 9005         	str	r0, [sp, #0x14]
;     if( xCount != ( size_t ) 0 )
 805bed8: 9805         	ldr	r0, [sp, #0x14]
 805beda: b150         	cbz	r0, 0x805bef2 <prvReadMessageFromBuffer+0x86> @ imm = #0x14
 805bedc: e7ff         	b	0x805bede <prvReadMessageFromBuffer+0x72> @ imm = #-0x2
;         pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 805bede: 9809         	ldr	r0, [sp, #0x24]
 805bee0: 9908         	ldr	r1, [sp, #0x20]
 805bee2: 9a05         	ldr	r2, [sp, #0x14]
 805bee4: 9b02         	ldr	r3, [sp, #0x8]
 805bee6: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805befc <prvReadMessageFromBuffer+0x90>
 805beea: 47e0         	blx	r12
 805beec: 9909         	ldr	r1, [sp, #0x24]
 805beee: 6008         	str	r0, [r1]
;     }
 805bef0: e7ff         	b	0x805bef2 <prvReadMessageFromBuffer+0x86> @ imm = #-0x2
;     return xCount;
 805bef2: 9805         	ldr	r0, [sp, #0x14]
 805bef4: b00a         	add	sp, #0x28
 805bef6: bd80         	pop	{r7, pc}

0805bef8 <$d.23>:
 805bef8: 7d bf 05 08  	.word	0x0805bf7d
 805befc: 7d bf 05 08  	.word	0x0805bf7d

0805bf00 <xStreamBufferNextMessageLengthBytes>:
; {
 805bf00: b580         	push	{r7, lr}
 805bf02: 466f         	mov	r7, sp
 805bf04: b086         	sub	sp, #0x18
 805bf06: 9005         	str	r0, [sp, #0x14]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805bf08: 9805         	ldr	r0, [sp, #0x14]
 805bf0a: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxStreamBuffer );
 805bf0c: 9804         	ldr	r0, [sp, #0x10]
 805bf0e: b920         	cbnz	r0, 0x805bf1a <xStreamBufferNextMessageLengthBytes+0x1a> @ imm = #0x8
 805bf10: e7ff         	b	0x805bf12 <xStreamBufferNextMessageLengthBytes+0x12> @ imm = #-0x2
 805bf12: 4819         	ldr	r0, [pc, #0x64]         @ 0x805bf78 <xStreamBufferNextMessageLengthBytes+0x78>
 805bf14: 4780         	blx	r0
 805bf16: e7ff         	b	0x805bf18 <xStreamBufferNextMessageLengthBytes+0x18> @ imm = #-0x2
 805bf18: e7fe         	b	0x805bf18 <xStreamBufferNextMessageLengthBytes+0x18> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805bf1a: 9804         	ldr	r0, [sp, #0x10]
 805bf1c: 7f00         	ldrb	r0, [r0, #0x1c]
 805bf1e: 07c0         	lsls	r0, r0, #0x1f
 805bf20: b1e8         	cbz	r0, 0x805bf5e <xStreamBufferNextMessageLengthBytes+0x5e> @ imm = #0x3a
 805bf22: e7ff         	b	0x805bf24 <xStreamBufferNextMessageLengthBytes+0x24> @ imm = #-0x2
;         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805bf24: 9804         	ldr	r0, [sp, #0x10]
 805bf26: 4911         	ldr	r1, [pc, #0x44]         @ 0x805bf6c <xStreamBufferNextMessageLengthBytes+0x6c>
 805bf28: 4788         	blx	r1
 805bf2a: 9002         	str	r0, [sp, #0x8]
;         if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 805bf2c: 9802         	ldr	r0, [sp, #0x8]
 805bf2e: 2805         	cmp	r0, #0x5
 805bf30: d30a         	blo	0x805bf48 <xStreamBufferNextMessageLengthBytes+0x48> @ imm = #0x14
 805bf32: e7ff         	b	0x805bf34 <xStreamBufferNextMessageLengthBytes+0x34> @ imm = #-0x2
;             ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 805bf34: 9804         	ldr	r0, [sp, #0x10]
 805bf36: 6803         	ldr	r3, [r0]
 805bf38: f8df c038    	ldr.w	r12, [pc, #0x38]        @ 0x805bf74 <xStreamBufferNextMessageLengthBytes+0x74>
 805bf3c: a901         	add	r1, sp, #0x4
 805bf3e: 2204         	movs	r2, #0x4
 805bf40: 47e0         	blx	r12
;             xReturn = ( size_t ) xTempReturn;
 805bf42: 9801         	ldr	r0, [sp, #0x4]
 805bf44: 9003         	str	r0, [sp, #0xc]
;         }
 805bf46: e009         	b	0x805bf5c <xStreamBufferNextMessageLengthBytes+0x5c> @ imm = #0x12
;             configASSERT( xBytesAvailable == 0 );
 805bf48: 9802         	ldr	r0, [sp, #0x8]
 805bf4a: b120         	cbz	r0, 0x805bf56 <xStreamBufferNextMessageLengthBytes+0x56> @ imm = #0x8
 805bf4c: e7ff         	b	0x805bf4e <xStreamBufferNextMessageLengthBytes+0x4e> @ imm = #-0x2
 805bf4e: 4808         	ldr	r0, [pc, #0x20]         @ 0x805bf70 <xStreamBufferNextMessageLengthBytes+0x70>
 805bf50: 4780         	blx	r0
 805bf52: e7ff         	b	0x805bf54 <xStreamBufferNextMessageLengthBytes+0x54> @ imm = #-0x2
 805bf54: e7fe         	b	0x805bf54 <xStreamBufferNextMessageLengthBytes+0x54> @ imm = #-0x4
 805bf56: 2000         	movs	r0, #0x0
;             xReturn = 0;
 805bf58: 9003         	str	r0, [sp, #0xc]
 805bf5a: e7ff         	b	0x805bf5c <xStreamBufferNextMessageLengthBytes+0x5c> @ imm = #-0x2
;     }
 805bf5c: e002         	b	0x805bf64 <xStreamBufferNextMessageLengthBytes+0x64> @ imm = #0x4
 805bf5e: 2000         	movs	r0, #0x0
;         xReturn = 0;
 805bf60: 9003         	str	r0, [sp, #0xc]
 805bf62: e7ff         	b	0x805bf64 <xStreamBufferNextMessageLengthBytes+0x64> @ imm = #-0x2
;     return xReturn;
 805bf64: 9803         	ldr	r0, [sp, #0xc]
 805bf66: b006         	add	sp, #0x18
 805bf68: bd80         	pop	{r7, pc}
 805bf6a: bf00         	nop

0805bf6c <$d.25>:
 805bf6c: 71 b9 05 08  	.word	0x0805b971
 805bf70: 55 cd 05 08  	.word	0x0805cd55
 805bf74: 7d bf 05 08  	.word	0x0805bf7d
 805bf78: 55 cd 05 08  	.word	0x0805cd55

0805bf7c <prvReadBytesFromBuffer>:
; {
 805bf7c: b580         	push	{r7, lr}
 805bf7e: 466f         	mov	r7, sp
 805bf80: b086         	sub	sp, #0x18
 805bf82: 9005         	str	r0, [sp, #0x14]
 805bf84: 9104         	str	r1, [sp, #0x10]
 805bf86: 9203         	str	r2, [sp, #0xc]
 805bf88: 9302         	str	r3, [sp, #0x8]
;     configASSERT( xCount != ( size_t ) 0 );
 805bf8a: 9803         	ldr	r0, [sp, #0xc]
 805bf8c: b920         	cbnz	r0, 0x805bf98 <prvReadBytesFromBuffer+0x1c> @ imm = #0x8
 805bf8e: e7ff         	b	0x805bf90 <prvReadBytesFromBuffer+0x14> @ imm = #-0x2
 805bf90: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c050 <prvReadBytesFromBuffer+0xd4>
 805bf92: 4780         	blx	r0
 805bf94: e7ff         	b	0x805bf96 <prvReadBytesFromBuffer+0x1a> @ imm = #-0x2
 805bf96: e7fe         	b	0x805bf96 <prvReadBytesFromBuffer+0x1a> @ imm = #-0x4
;     xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 805bf98: 9805         	ldr	r0, [sp, #0x14]
 805bf9a: 6880         	ldr	r0, [r0, #0x8]
 805bf9c: 9902         	ldr	r1, [sp, #0x8]
 805bf9e: 1a40         	subs	r0, r0, r1
 805bfa0: 9903         	ldr	r1, [sp, #0xc]
 805bfa2: 4288         	cmp	r0, r1
 805bfa4: d206         	bhs	0x805bfb4 <prvReadBytesFromBuffer+0x38> @ imm = #0xc
 805bfa6: e7ff         	b	0x805bfa8 <prvReadBytesFromBuffer+0x2c> @ imm = #-0x2
 805bfa8: 9805         	ldr	r0, [sp, #0x14]
 805bfaa: 6880         	ldr	r0, [r0, #0x8]
 805bfac: 9902         	ldr	r1, [sp, #0x8]
 805bfae: 1a40         	subs	r0, r0, r1
 805bfb0: 9000         	str	r0, [sp]
 805bfb2: e002         	b	0x805bfba <prvReadBytesFromBuffer+0x3e> @ imm = #0x4
 805bfb4: 9803         	ldr	r0, [sp, #0xc]
 805bfb6: 9000         	str	r0, [sp]
 805bfb8: e7ff         	b	0x805bfba <prvReadBytesFromBuffer+0x3e> @ imm = #-0x2
 805bfba: 9800         	ldr	r0, [sp]
 805bfbc: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xFirstLength <= xCount );
 805bfbe: 9801         	ldr	r0, [sp, #0x4]
 805bfc0: 9903         	ldr	r1, [sp, #0xc]
 805bfc2: 4288         	cmp	r0, r1
 805bfc4: d904         	bls	0x805bfd0 <prvReadBytesFromBuffer+0x54> @ imm = #0x8
 805bfc6: e7ff         	b	0x805bfc8 <prvReadBytesFromBuffer+0x4c> @ imm = #-0x2
 805bfc8: 4820         	ldr	r0, [pc, #0x80]         @ 0x805c04c <prvReadBytesFromBuffer+0xd0>
 805bfca: 4780         	blx	r0
 805bfcc: e7ff         	b	0x805bfce <prvReadBytesFromBuffer+0x52> @ imm = #-0x2
 805bfce: e7fe         	b	0x805bfce <prvReadBytesFromBuffer+0x52> @ imm = #-0x4
;     configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 805bfd0: 9802         	ldr	r0, [sp, #0x8]
 805bfd2: 9901         	ldr	r1, [sp, #0x4]
 805bfd4: 4408         	add	r0, r1
 805bfd6: 9905         	ldr	r1, [sp, #0x14]
 805bfd8: 6889         	ldr	r1, [r1, #0x8]
 805bfda: 4288         	cmp	r0, r1
 805bfdc: d904         	bls	0x805bfe8 <prvReadBytesFromBuffer+0x6c> @ imm = #0x8
 805bfde: e7ff         	b	0x805bfe0 <prvReadBytesFromBuffer+0x64> @ imm = #-0x2
 805bfe0: 4819         	ldr	r0, [pc, #0x64]         @ 0x805c048 <prvReadBytesFromBuffer+0xcc>
 805bfe2: 4780         	blx	r0
 805bfe4: e7ff         	b	0x805bfe6 <prvReadBytesFromBuffer+0x6a> @ imm = #-0x2
 805bfe6: e7fe         	b	0x805bfe6 <prvReadBytesFromBuffer+0x6a> @ imm = #-0x4
;     ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805bfe8: 9804         	ldr	r0, [sp, #0x10]
 805bfea: 9905         	ldr	r1, [sp, #0x14]
 805bfec: 6989         	ldr	r1, [r1, #0x18]
 805bfee: 9a02         	ldr	r2, [sp, #0x8]
 805bff0: 4411         	add	r1, r2
 805bff2: 9a01         	ldr	r2, [sp, #0x4]
 805bff4: 4b12         	ldr	r3, [pc, #0x48]         @ 0x805c040 <prvReadBytesFromBuffer+0xc4>
 805bff6: 4798         	blx	r3
;     if( xCount > xFirstLength )
 805bff8: 9803         	ldr	r0, [sp, #0xc]
 805bffa: 9901         	ldr	r1, [sp, #0x4]
 805bffc: 4288         	cmp	r0, r1
 805bffe: d90a         	bls	0x805c016 <prvReadBytesFromBuffer+0x9a> @ imm = #0x14
 805c000: e7ff         	b	0x805c002 <prvReadBytesFromBuffer+0x86> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805c002: 9804         	ldr	r0, [sp, #0x10]
 805c004: 9b01         	ldr	r3, [sp, #0x4]
 805c006: 4418         	add	r0, r3
 805c008: 9905         	ldr	r1, [sp, #0x14]
 805c00a: 6989         	ldr	r1, [r1, #0x18]
 805c00c: 9a03         	ldr	r2, [sp, #0xc]
 805c00e: 1ad2         	subs	r2, r2, r3
 805c010: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x805c044 <prvReadBytesFromBuffer+0xc8>
 805c012: 4798         	blx	r3
;     }
 805c014: e000         	b	0x805c018 <prvReadBytesFromBuffer+0x9c> @ imm = #0x0
 805c016: e7ff         	b	0x805c018 <prvReadBytesFromBuffer+0x9c> @ imm = #-0x2
;     xTail += xCount;
 805c018: 9903         	ldr	r1, [sp, #0xc]
 805c01a: 9802         	ldr	r0, [sp, #0x8]
 805c01c: 4408         	add	r0, r1
 805c01e: 9002         	str	r0, [sp, #0x8]
;     if( xTail >= pxStreamBuffer->xLength )
 805c020: 9802         	ldr	r0, [sp, #0x8]
 805c022: 9905         	ldr	r1, [sp, #0x14]
 805c024: 6889         	ldr	r1, [r1, #0x8]
 805c026: 4288         	cmp	r0, r1
 805c028: d306         	blo	0x805c038 <prvReadBytesFromBuffer+0xbc> @ imm = #0xc
 805c02a: e7ff         	b	0x805c02c <prvReadBytesFromBuffer+0xb0> @ imm = #-0x2
;         xTail -= pxStreamBuffer->xLength;
 805c02c: 9805         	ldr	r0, [sp, #0x14]
 805c02e: 6881         	ldr	r1, [r0, #0x8]
 805c030: 9802         	ldr	r0, [sp, #0x8]
 805c032: 1a40         	subs	r0, r0, r1
 805c034: 9002         	str	r0, [sp, #0x8]
;     }
 805c036: e7ff         	b	0x805c038 <prvReadBytesFromBuffer+0xbc> @ imm = #-0x2
;     return xTail;
 805c038: 9802         	ldr	r0, [sp, #0x8]
 805c03a: b006         	add	sp, #0x18
 805c03c: bd80         	pop	{r7, pc}
 805c03e: bf00         	nop

0805c040 <$d.27>:
 805c040: e1 ea 05 08  	.word	0x0805eae1
 805c044: e1 ea 05 08  	.word	0x0805eae1
 805c048: 55 cd 05 08  	.word	0x0805cd55
 805c04c: 55 cd 05 08  	.word	0x0805cd55
 805c050: 55 cd 05 08  	.word	0x0805cd55

0805c054 <xStreamBufferReceiveFromISR>:
; {
 805c054: b580         	push	{r7, lr}
 805c056: 466f         	mov	r7, sp
 805c058: b08c         	sub	sp, #0x30
 805c05a: 900b         	str	r0, [sp, #0x2c]
 805c05c: 910a         	str	r1, [sp, #0x28]
 805c05e: 9209         	str	r2, [sp, #0x24]
 805c060: 9308         	str	r3, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805c062: 980b         	ldr	r0, [sp, #0x2c]
 805c064: 9007         	str	r0, [sp, #0x1c]
 805c066: 2000         	movs	r0, #0x0
;     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 805c068: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pvRxData );
 805c06a: 980a         	ldr	r0, [sp, #0x28]
 805c06c: b920         	cbnz	r0, 0x805c078 <xStreamBufferReceiveFromISR+0x24> @ imm = #0x8
 805c06e: e7ff         	b	0x805c070 <xStreamBufferReceiveFromISR+0x1c> @ imm = #-0x2
 805c070: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805c124 <xStreamBufferReceiveFromISR+0xd0>
 805c072: 4780         	blx	r0
 805c074: e7ff         	b	0x805c076 <xStreamBufferReceiveFromISR+0x22> @ imm = #-0x2
 805c076: e7fe         	b	0x805c076 <xStreamBufferReceiveFromISR+0x22> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805c078: 9807         	ldr	r0, [sp, #0x1c]
 805c07a: b920         	cbnz	r0, 0x805c086 <xStreamBufferReceiveFromISR+0x32> @ imm = #0x8
 805c07c: e7ff         	b	0x805c07e <xStreamBufferReceiveFromISR+0x2a> @ imm = #-0x2
 805c07e: 4828         	ldr	r0, [pc, #0xa0]         @ 0x805c120 <xStreamBufferReceiveFromISR+0xcc>
 805c080: 4780         	blx	r0
 805c082: e7ff         	b	0x805c084 <xStreamBufferReceiveFromISR+0x30> @ imm = #-0x2
 805c084: e7fe         	b	0x805c084 <xStreamBufferReceiveFromISR+0x30> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805c086: 9807         	ldr	r0, [sp, #0x1c]
 805c088: 7f00         	ldrb	r0, [r0, #0x1c]
 805c08a: 07c0         	lsls	r0, r0, #0x1f
 805c08c: b118         	cbz	r0, 0x805c096 <xStreamBufferReceiveFromISR+0x42> @ imm = #0x6
 805c08e: e7ff         	b	0x805c090 <xStreamBufferReceiveFromISR+0x3c> @ imm = #-0x2
 805c090: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805c092: 9004         	str	r0, [sp, #0x10]
;     }
 805c094: e002         	b	0x805c09c <xStreamBufferReceiveFromISR+0x48> @ imm = #0x4
 805c096: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805c098: 9004         	str	r0, [sp, #0x10]
 805c09a: e7ff         	b	0x805c09c <xStreamBufferReceiveFromISR+0x48> @ imm = #-0x2
;     xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805c09c: 9807         	ldr	r0, [sp, #0x1c]
 805c09e: 491b         	ldr	r1, [pc, #0x6c]         @ 0x805c10c <xStreamBufferReceiveFromISR+0xb8>
 805c0a0: 4788         	blx	r1
 805c0a2: 9005         	str	r0, [sp, #0x14]
;     if( xBytesAvailable > xBytesToStoreMessageLength )
 805c0a4: 9805         	ldr	r0, [sp, #0x14]
 805c0a6: 9904         	ldr	r1, [sp, #0x10]
 805c0a8: 4288         	cmp	r0, r1
 805c0aa: d92b         	bls	0x805c104 <xStreamBufferReceiveFromISR+0xb0> @ imm = #0x56
 805c0ac: e7ff         	b	0x805c0ae <xStreamBufferReceiveFromISR+0x5a> @ imm = #-0x2
;         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 805c0ae: 9807         	ldr	r0, [sp, #0x1c]
 805c0b0: 990a         	ldr	r1, [sp, #0x28]
 805c0b2: 9a09         	ldr	r2, [sp, #0x24]
 805c0b4: 9b05         	ldr	r3, [sp, #0x14]
 805c0b6: f8df c058    	ldr.w	r12, [pc, #0x58]        @ 0x805c110 <xStreamBufferReceiveFromISR+0xbc>
 805c0ba: 47e0         	blx	r12
 805c0bc: 9006         	str	r0, [sp, #0x18]
;         if( xReceivedLength != ( size_t ) 0 )
 805c0be: 9806         	ldr	r0, [sp, #0x18]
 805c0c0: b1f0         	cbz	r0, 0x805c100 <xStreamBufferReceiveFromISR+0xac> @ imm = #0x3c
 805c0c2: e7ff         	b	0x805c0c4 <xStreamBufferReceiveFromISR+0x70> @ imm = #-0x2
;             prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 805c0c4: e7ff         	b	0x805c0c6 <xStreamBufferReceiveFromISR+0x72> @ imm = #-0x2
 805c0c6: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805c114 <xStreamBufferReceiveFromISR+0xc0>
 805c0c8: 4780         	blx	r0
 805c0ca: 9003         	str	r0, [sp, #0xc]
 805c0cc: 9807         	ldr	r0, [sp, #0x1c]
 805c0ce: 6940         	ldr	r0, [r0, #0x14]
 805c0d0: b188         	cbz	r0, 0x805c0f6 <xStreamBufferReceiveFromISR+0xa2> @ imm = #0x22
 805c0d2: e7ff         	b	0x805c0d4 <xStreamBufferReceiveFromISR+0x80> @ imm = #-0x2
 805c0d4: 9807         	ldr	r0, [sp, #0x1c]
 805c0d6: 6940         	ldr	r0, [r0, #0x14]
 805c0d8: 9a08         	ldr	r2, [sp, #0x20]
 805c0da: 4669         	mov	r1, sp
 805c0dc: 604a         	str	r2, [r1, #0x4]
 805c0de: 2300         	movs	r3, #0x0
 805c0e0: 9302         	str	r3, [sp, #0x8]
 805c0e2: 600b         	str	r3, [r1]
 805c0e4: f8df c030    	ldr.w	r12, [pc, #0x30]        @ 0x805c118 <xStreamBufferReceiveFromISR+0xc4>
 805c0e8: 4619         	mov	r1, r3
 805c0ea: 461a         	mov	r2, r3
 805c0ec: 47e0         	blx	r12
 805c0ee: 9802         	ldr	r0, [sp, #0x8]
 805c0f0: 9907         	ldr	r1, [sp, #0x1c]
 805c0f2: 6148         	str	r0, [r1, #0x14]
 805c0f4: e7ff         	b	0x805c0f6 <xStreamBufferReceiveFromISR+0xa2> @ imm = #-0x2
 805c0f6: 9803         	ldr	r0, [sp, #0xc]
 805c0f8: 4908         	ldr	r1, [pc, #0x20]         @ 0x805c11c <xStreamBufferReceiveFromISR+0xc8>
 805c0fa: 4788         	blx	r1
 805c0fc: e7ff         	b	0x805c0fe <xStreamBufferReceiveFromISR+0xaa> @ imm = #-0x2
;         }
 805c0fe: e000         	b	0x805c102 <xStreamBufferReceiveFromISR+0xae> @ imm = #0x0
 805c100: e7ff         	b	0x805c102 <xStreamBufferReceiveFromISR+0xae> @ imm = #-0x2
;     }
 805c102: e000         	b	0x805c106 <xStreamBufferReceiveFromISR+0xb2> @ imm = #0x0
 805c104: e7ff         	b	0x805c106 <xStreamBufferReceiveFromISR+0xb2> @ imm = #-0x2
;     return xReceivedLength;
 805c106: 9806         	ldr	r0, [sp, #0x18]
 805c108: b00c         	add	sp, #0x30
 805c10a: bd80         	pop	{r7, pc}

0805c10c <$d.29>:
 805c10c: 71 b9 05 08  	.word	0x0805b971
 805c110: 6d be 05 08  	.word	0x0805be6d
 805c114: 55 cd 05 08  	.word	0x0805cd55
 805c118: 69 7e 05 08  	.word	0x08057e69
 805c11c: 6b cd 05 08  	.word	0x0805cd6b
 805c120: 55 cd 05 08  	.word	0x0805cd55
 805c124: 55 cd 05 08  	.word	0x0805cd55

0805c128 <xStreamBufferIsEmpty>:
; {
 805c128: b580         	push	{r7, lr}
 805c12a: 466f         	mov	r7, sp
 805c12c: b084         	sub	sp, #0x10
 805c12e: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805c130: 9803         	ldr	r0, [sp, #0xc]
 805c132: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805c134: 9802         	ldr	r0, [sp, #0x8]
 805c136: b920         	cbnz	r0, 0x805c142 <xStreamBufferIsEmpty+0x1a> @ imm = #0x8
 805c138: e7ff         	b	0x805c13a <xStreamBufferIsEmpty+0x12> @ imm = #-0x2
 805c13a: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805c168 <xStreamBufferIsEmpty+0x40>
 805c13c: 4780         	blx	r0
 805c13e: e7ff         	b	0x805c140 <xStreamBufferIsEmpty+0x18> @ imm = #-0x2
 805c140: e7fe         	b	0x805c140 <xStreamBufferIsEmpty+0x18> @ imm = #-0x4
;     xTail = pxStreamBuffer->xTail;
 805c142: 9802         	ldr	r0, [sp, #0x8]
 805c144: 6800         	ldr	r0, [r0]
 805c146: 9000         	str	r0, [sp]
;     if( pxStreamBuffer->xHead == xTail )
 805c148: 9802         	ldr	r0, [sp, #0x8]
 805c14a: 6840         	ldr	r0, [r0, #0x4]
 805c14c: 9900         	ldr	r1, [sp]
 805c14e: 4288         	cmp	r0, r1
 805c150: d103         	bne	0x805c15a <xStreamBufferIsEmpty+0x32> @ imm = #0x6
 805c152: e7ff         	b	0x805c154 <xStreamBufferIsEmpty+0x2c> @ imm = #-0x2
 805c154: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805c156: 9001         	str	r0, [sp, #0x4]
;     }
 805c158: e002         	b	0x805c160 <xStreamBufferIsEmpty+0x38> @ imm = #0x4
 805c15a: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805c15c: 9001         	str	r0, [sp, #0x4]
 805c15e: e7ff         	b	0x805c160 <xStreamBufferIsEmpty+0x38> @ imm = #-0x2
;     return xReturn;
 805c160: 9801         	ldr	r0, [sp, #0x4]
 805c162: b004         	add	sp, #0x10
 805c164: bd80         	pop	{r7, pc}
 805c166: bf00         	nop

0805c168 <$d.31>:
 805c168: 55 cd 05 08  	.word	0x0805cd55

0805c16c <xStreamBufferIsFull>:
; {
 805c16c: b580         	push	{r7, lr}
 805c16e: 466f         	mov	r7, sp
 805c170: b084         	sub	sp, #0x10
 805c172: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805c174: 9803         	ldr	r0, [sp, #0xc]
 805c176: 9000         	str	r0, [sp]
;     configASSERT( pxStreamBuffer );
 805c178: 9800         	ldr	r0, [sp]
 805c17a: b920         	cbnz	r0, 0x805c186 <xStreamBufferIsFull+0x1a> @ imm = #0x8
 805c17c: e7ff         	b	0x805c17e <xStreamBufferIsFull+0x12> @ imm = #-0x2
 805c17e: 4810         	ldr	r0, [pc, #0x40]         @ 0x805c1c0 <xStreamBufferIsFull+0x54>
 805c180: 4780         	blx	r0
 805c182: e7ff         	b	0x805c184 <xStreamBufferIsFull+0x18> @ imm = #-0x2
 805c184: e7fe         	b	0x805c184 <xStreamBufferIsFull+0x18> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805c186: 9800         	ldr	r0, [sp]
 805c188: 7f00         	ldrb	r0, [r0, #0x1c]
 805c18a: 07c0         	lsls	r0, r0, #0x1f
 805c18c: b118         	cbz	r0, 0x805c196 <xStreamBufferIsFull+0x2a> @ imm = #0x6
 805c18e: e7ff         	b	0x805c190 <xStreamBufferIsFull+0x24> @ imm = #-0x2
 805c190: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805c192: 9001         	str	r0, [sp, #0x4]
;     }
 805c194: e002         	b	0x805c19c <xStreamBufferIsFull+0x30> @ imm = #0x4
 805c196: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805c198: 9001         	str	r0, [sp, #0x4]
 805c19a: e7ff         	b	0x805c19c <xStreamBufferIsFull+0x30> @ imm = #-0x2
;     if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 805c19c: 9803         	ldr	r0, [sp, #0xc]
 805c19e: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805c1bc <xStreamBufferIsFull+0x50>
 805c1a0: 4788         	blx	r1
 805c1a2: 9901         	ldr	r1, [sp, #0x4]
 805c1a4: 4288         	cmp	r0, r1
 805c1a6: d803         	bhi	0x805c1b0 <xStreamBufferIsFull+0x44> @ imm = #0x6
 805c1a8: e7ff         	b	0x805c1aa <xStreamBufferIsFull+0x3e> @ imm = #-0x2
 805c1aa: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805c1ac: 9002         	str	r0, [sp, #0x8]
;     }
 805c1ae: e002         	b	0x805c1b6 <xStreamBufferIsFull+0x4a> @ imm = #0x4
 805c1b0: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805c1b2: 9002         	str	r0, [sp, #0x8]
 805c1b4: e7ff         	b	0x805c1b6 <xStreamBufferIsFull+0x4a> @ imm = #-0x2
;     return xReturn;
 805c1b6: 9802         	ldr	r0, [sp, #0x8]
 805c1b8: b004         	add	sp, #0x10
 805c1ba: bd80         	pop	{r7, pc}

0805c1bc <$d.33>:
 805c1bc: d1 b8 05 08  	.word	0x0805b8d1
 805c1c0: 55 cd 05 08  	.word	0x0805cd55

0805c1c4 <xStreamBufferSendCompletedFromISR>:
; {
 805c1c4: b580         	push	{r7, lr}
 805c1c6: 466f         	mov	r7, sp
 805c1c8: b088         	sub	sp, #0x20
 805c1ca: 9007         	str	r0, [sp, #0x1c]
 805c1cc: 9106         	str	r1, [sp, #0x18]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805c1ce: 9807         	ldr	r0, [sp, #0x1c]
 805c1d0: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxStreamBuffer );
 805c1d2: 9805         	ldr	r0, [sp, #0x14]
 805c1d4: b920         	cbnz	r0, 0x805c1e0 <xStreamBufferSendCompletedFromISR+0x1c> @ imm = #0x8
 805c1d6: e7ff         	b	0x805c1d8 <xStreamBufferSendCompletedFromISR+0x14> @ imm = #-0x2
 805c1d8: 4816         	ldr	r0, [pc, #0x58]         @ 0x805c234 <xStreamBufferSendCompletedFromISR+0x70>
 805c1da: 4780         	blx	r0
 805c1dc: e7ff         	b	0x805c1de <xStreamBufferSendCompletedFromISR+0x1a> @ imm = #-0x2
 805c1de: e7fe         	b	0x805c1de <xStreamBufferSendCompletedFromISR+0x1a> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805c1e0: 4811         	ldr	r0, [pc, #0x44]         @ 0x805c228 <xStreamBufferSendCompletedFromISR+0x64>
 805c1e2: 4780         	blx	r0
 805c1e4: 9003         	str	r0, [sp, #0xc]
;         if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 805c1e6: 9805         	ldr	r0, [sp, #0x14]
 805c1e8: 6900         	ldr	r0, [r0, #0x10]
 805c1ea: b198         	cbz	r0, 0x805c214 <xStreamBufferSendCompletedFromISR+0x50> @ imm = #0x26
 805c1ec: e7ff         	b	0x805c1ee <xStreamBufferSendCompletedFromISR+0x2a> @ imm = #-0x2
;             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 805c1ee: 9805         	ldr	r0, [sp, #0x14]
 805c1f0: 6900         	ldr	r0, [r0, #0x10]
 805c1f2: 9a06         	ldr	r2, [sp, #0x18]
 805c1f4: 4669         	mov	r1, sp
 805c1f6: 604a         	str	r2, [r1, #0x4]
 805c1f8: 2300         	movs	r3, #0x0
 805c1fa: 9302         	str	r3, [sp, #0x8]
 805c1fc: 600b         	str	r3, [r1]
 805c1fe: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805c22c <xStreamBufferSendCompletedFromISR+0x68>
 805c202: 4619         	mov	r1, r3
 805c204: 461a         	mov	r2, r3
 805c206: 47e0         	blx	r12
;             ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 805c208: 9802         	ldr	r0, [sp, #0x8]
 805c20a: 9905         	ldr	r1, [sp, #0x14]
 805c20c: 6108         	str	r0, [r1, #0x10]
 805c20e: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805c210: 9004         	str	r0, [sp, #0x10]
;         }
 805c212: e002         	b	0x805c21a <xStreamBufferSendCompletedFromISR+0x56> @ imm = #0x4
 805c214: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805c216: 9004         	str	r0, [sp, #0x10]
 805c218: e7ff         	b	0x805c21a <xStreamBufferSendCompletedFromISR+0x56> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805c21a: 9803         	ldr	r0, [sp, #0xc]
 805c21c: 4904         	ldr	r1, [pc, #0x10]         @ 0x805c230 <xStreamBufferSendCompletedFromISR+0x6c>
 805c21e: 4788         	blx	r1
;     return xReturn;
 805c220: 9804         	ldr	r0, [sp, #0x10]
 805c222: b008         	add	sp, #0x20
 805c224: bd80         	pop	{r7, pc}
 805c226: bf00         	nop

0805c228 <$d.35>:
 805c228: 55 cd 05 08  	.word	0x0805cd55
 805c22c: 69 7e 05 08  	.word	0x08057e69
 805c230: 6b cd 05 08  	.word	0x0805cd6b
 805c234: 55 cd 05 08  	.word	0x0805cd55

0805c238 <xStreamBufferReceiveCompletedFromISR>:
; {
 805c238: b580         	push	{r7, lr}
 805c23a: 466f         	mov	r7, sp
 805c23c: b088         	sub	sp, #0x20
 805c23e: 9007         	str	r0, [sp, #0x1c]
 805c240: 9106         	str	r1, [sp, #0x18]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805c242: 9807         	ldr	r0, [sp, #0x1c]
 805c244: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxStreamBuffer );
 805c246: 9805         	ldr	r0, [sp, #0x14]
 805c248: b920         	cbnz	r0, 0x805c254 <xStreamBufferReceiveCompletedFromISR+0x1c> @ imm = #0x8
 805c24a: e7ff         	b	0x805c24c <xStreamBufferReceiveCompletedFromISR+0x14> @ imm = #-0x2
 805c24c: 4816         	ldr	r0, [pc, #0x58]         @ 0x805c2a8 <xStreamBufferReceiveCompletedFromISR+0x70>
 805c24e: 4780         	blx	r0
 805c250: e7ff         	b	0x805c252 <xStreamBufferReceiveCompletedFromISR+0x1a> @ imm = #-0x2
 805c252: e7fe         	b	0x805c252 <xStreamBufferReceiveCompletedFromISR+0x1a> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805c254: 4811         	ldr	r0, [pc, #0x44]         @ 0x805c29c <xStreamBufferReceiveCompletedFromISR+0x64>
 805c256: 4780         	blx	r0
 805c258: 9003         	str	r0, [sp, #0xc]
;         if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 805c25a: 9805         	ldr	r0, [sp, #0x14]
 805c25c: 6940         	ldr	r0, [r0, #0x14]
 805c25e: b198         	cbz	r0, 0x805c288 <xStreamBufferReceiveCompletedFromISR+0x50> @ imm = #0x26
 805c260: e7ff         	b	0x805c262 <xStreamBufferReceiveCompletedFromISR+0x2a> @ imm = #-0x2
;             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 805c262: 9805         	ldr	r0, [sp, #0x14]
 805c264: 6940         	ldr	r0, [r0, #0x14]
 805c266: 9a06         	ldr	r2, [sp, #0x18]
 805c268: 4669         	mov	r1, sp
 805c26a: 604a         	str	r2, [r1, #0x4]
 805c26c: 2300         	movs	r3, #0x0
 805c26e: 9302         	str	r3, [sp, #0x8]
 805c270: 600b         	str	r3, [r1]
 805c272: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805c2a0 <xStreamBufferReceiveCompletedFromISR+0x68>
 805c276: 4619         	mov	r1, r3
 805c278: 461a         	mov	r2, r3
 805c27a: 47e0         	blx	r12
;             ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 805c27c: 9802         	ldr	r0, [sp, #0x8]
 805c27e: 9905         	ldr	r1, [sp, #0x14]
 805c280: 6148         	str	r0, [r1, #0x14]
 805c282: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805c284: 9004         	str	r0, [sp, #0x10]
;         }
 805c286: e002         	b	0x805c28e <xStreamBufferReceiveCompletedFromISR+0x56> @ imm = #0x4
 805c288: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805c28a: 9004         	str	r0, [sp, #0x10]
 805c28c: e7ff         	b	0x805c28e <xStreamBufferReceiveCompletedFromISR+0x56> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805c28e: 9803         	ldr	r0, [sp, #0xc]
 805c290: 4904         	ldr	r1, [pc, #0x10]         @ 0x805c2a4 <xStreamBufferReceiveCompletedFromISR+0x6c>
 805c292: 4788         	blx	r1
;     return xReturn;
 805c294: 9804         	ldr	r0, [sp, #0x10]
 805c296: b008         	add	sp, #0x20
 805c298: bd80         	pop	{r7, pc}
 805c29a: bf00         	nop

0805c29c <$d.37>:
 805c29c: 55 cd 05 08  	.word	0x0805cd55
 805c2a0: 69 7e 05 08  	.word	0x08057e69
 805c2a4: 6b cd 05 08  	.word	0x0805cd6b
 805c2a8: 55 cd 05 08  	.word	0x0805cd55

0805c2ac <uxStreamBufferGetStreamBufferNumber>:
;     {
 805c2ac: b081         	sub	sp, #0x4
 805c2ae: 9000         	str	r0, [sp]
;         return xStreamBuffer->uxStreamBufferNumber;
 805c2b0: 9800         	ldr	r0, [sp]
 805c2b2: 6a00         	ldr	r0, [r0, #0x20]
 805c2b4: b001         	add	sp, #0x4
 805c2b6: 4770         	bx	lr

0805c2b8 <vStreamBufferSetStreamBufferNumber>:
;     {
 805c2b8: b082         	sub	sp, #0x8
 805c2ba: 9001         	str	r0, [sp, #0x4]
 805c2bc: 9100         	str	r1, [sp]
;         xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 805c2be: 9800         	ldr	r0, [sp]
 805c2c0: 9901         	ldr	r1, [sp, #0x4]
 805c2c2: 6208         	str	r0, [r1, #0x20]
;     }
 805c2c4: b002         	add	sp, #0x8
 805c2c6: 4770         	bx	lr

0805c2c8 <ucStreamBufferGetStreamBufferType>:
;     {
 805c2c8: b081         	sub	sp, #0x4
 805c2ca: 9000         	str	r0, [sp]
;         return( ( uint8_t ) ( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) );
 805c2cc: 9800         	ldr	r0, [sp]
 805c2ce: 7f00         	ldrb	r0, [r0, #0x1c]
 805c2d0: f000 0001    	and	r0, r0, #0x1
 805c2d4: b001         	add	sp, #0x4
 805c2d6: 4770         	bx	lr

0805c2d8 <prvWriteBytesToBuffer>:
; {
 805c2d8: b580         	push	{r7, lr}
 805c2da: 466f         	mov	r7, sp
 805c2dc: b086         	sub	sp, #0x18
 805c2de: 9005         	str	r0, [sp, #0x14]
 805c2e0: 9104         	str	r1, [sp, #0x10]
 805c2e2: 9203         	str	r2, [sp, #0xc]
 805c2e4: 9302         	str	r3, [sp, #0x8]
;     configASSERT( xCount > ( size_t ) 0 );
 805c2e6: 9803         	ldr	r0, [sp, #0xc]
 805c2e8: b920         	cbnz	r0, 0x805c2f4 <prvWriteBytesToBuffer+0x1c> @ imm = #0x8
 805c2ea: e7ff         	b	0x805c2ec <prvWriteBytesToBuffer+0x14> @ imm = #-0x2
 805c2ec: 4831         	ldr	r0, [pc, #0xc4]         @ 0x805c3b4 <prvWriteBytesToBuffer+0xdc>
 805c2ee: 4780         	blx	r0
 805c2f0: e7ff         	b	0x805c2f2 <prvWriteBytesToBuffer+0x1a> @ imm = #-0x2
 805c2f2: e7fe         	b	0x805c2f2 <prvWriteBytesToBuffer+0x1a> @ imm = #-0x4
;     xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 805c2f4: 9805         	ldr	r0, [sp, #0x14]
 805c2f6: 6880         	ldr	r0, [r0, #0x8]
 805c2f8: 9902         	ldr	r1, [sp, #0x8]
 805c2fa: 1a40         	subs	r0, r0, r1
 805c2fc: 9903         	ldr	r1, [sp, #0xc]
 805c2fe: 4288         	cmp	r0, r1
 805c300: d206         	bhs	0x805c310 <prvWriteBytesToBuffer+0x38> @ imm = #0xc
 805c302: e7ff         	b	0x805c304 <prvWriteBytesToBuffer+0x2c> @ imm = #-0x2
 805c304: 9805         	ldr	r0, [sp, #0x14]
 805c306: 6880         	ldr	r0, [r0, #0x8]
 805c308: 9902         	ldr	r1, [sp, #0x8]
 805c30a: 1a40         	subs	r0, r0, r1
 805c30c: 9000         	str	r0, [sp]
 805c30e: e002         	b	0x805c316 <prvWriteBytesToBuffer+0x3e> @ imm = #0x4
 805c310: 9803         	ldr	r0, [sp, #0xc]
 805c312: 9000         	str	r0, [sp]
 805c314: e7ff         	b	0x805c316 <prvWriteBytesToBuffer+0x3e> @ imm = #-0x2
 805c316: 9800         	ldr	r0, [sp]
 805c318: 9001         	str	r0, [sp, #0x4]
;     configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 805c31a: 9802         	ldr	r0, [sp, #0x8]
 805c31c: 9901         	ldr	r1, [sp, #0x4]
 805c31e: 4408         	add	r0, r1
 805c320: 9905         	ldr	r1, [sp, #0x14]
 805c322: 6889         	ldr	r1, [r1, #0x8]
 805c324: 4288         	cmp	r0, r1
 805c326: d904         	bls	0x805c332 <prvWriteBytesToBuffer+0x5a> @ imm = #0x8
 805c328: e7ff         	b	0x805c32a <prvWriteBytesToBuffer+0x52> @ imm = #-0x2
 805c32a: 4821         	ldr	r0, [pc, #0x84]         @ 0x805c3b0 <prvWriteBytesToBuffer+0xd8>
 805c32c: 4780         	blx	r0
 805c32e: e7ff         	b	0x805c330 <prvWriteBytesToBuffer+0x58> @ imm = #-0x2
 805c330: e7fe         	b	0x805c330 <prvWriteBytesToBuffer+0x58> @ imm = #-0x4
;     ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805c332: 9805         	ldr	r0, [sp, #0x14]
 805c334: 6980         	ldr	r0, [r0, #0x18]
 805c336: 9902         	ldr	r1, [sp, #0x8]
 805c338: 4408         	add	r0, r1
 805c33a: 9904         	ldr	r1, [sp, #0x10]
 805c33c: 9a01         	ldr	r2, [sp, #0x4]
 805c33e: 4b19         	ldr	r3, [pc, #0x64]         @ 0x805c3a4 <prvWriteBytesToBuffer+0xcc>
 805c340: 4798         	blx	r3
;     if( xCount > xFirstLength )
 805c342: 9803         	ldr	r0, [sp, #0xc]
 805c344: 9901         	ldr	r1, [sp, #0x4]
 805c346: 4288         	cmp	r0, r1
 805c348: d916         	bls	0x805c378 <prvWriteBytesToBuffer+0xa0> @ imm = #0x2c
 805c34a: e7ff         	b	0x805c34c <prvWriteBytesToBuffer+0x74> @ imm = #-0x2
;         configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 805c34c: 9803         	ldr	r0, [sp, #0xc]
 805c34e: 9901         	ldr	r1, [sp, #0x4]
 805c350: 1a40         	subs	r0, r0, r1
 805c352: 9905         	ldr	r1, [sp, #0x14]
 805c354: 6889         	ldr	r1, [r1, #0x8]
 805c356: 4288         	cmp	r0, r1
 805c358: d904         	bls	0x805c364 <prvWriteBytesToBuffer+0x8c> @ imm = #0x8
 805c35a: e7ff         	b	0x805c35c <prvWriteBytesToBuffer+0x84> @ imm = #-0x2
 805c35c: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805c3ac <prvWriteBytesToBuffer+0xd4>
 805c35e: 4780         	blx	r0
 805c360: e7ff         	b	0x805c362 <prvWriteBytesToBuffer+0x8a> @ imm = #-0x2
 805c362: e7fe         	b	0x805c362 <prvWriteBytesToBuffer+0x8a> @ imm = #-0x4
;         ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805c364: 9805         	ldr	r0, [sp, #0x14]
 805c366: 6980         	ldr	r0, [r0, #0x18]
 805c368: 9904         	ldr	r1, [sp, #0x10]
 805c36a: 9b01         	ldr	r3, [sp, #0x4]
 805c36c: 4419         	add	r1, r3
 805c36e: 9a03         	ldr	r2, [sp, #0xc]
 805c370: 1ad2         	subs	r2, r2, r3
 805c372: 4b0d         	ldr	r3, [pc, #0x34]         @ 0x805c3a8 <prvWriteBytesToBuffer+0xd0>
 805c374: 4798         	blx	r3
;     }
 805c376: e000         	b	0x805c37a <prvWriteBytesToBuffer+0xa2> @ imm = #0x0
 805c378: e7ff         	b	0x805c37a <prvWriteBytesToBuffer+0xa2> @ imm = #-0x2
;     xHead += xCount;
 805c37a: 9903         	ldr	r1, [sp, #0xc]
 805c37c: 9802         	ldr	r0, [sp, #0x8]
 805c37e: 4408         	add	r0, r1
 805c380: 9002         	str	r0, [sp, #0x8]
;     if( xHead >= pxStreamBuffer->xLength )
 805c382: 9802         	ldr	r0, [sp, #0x8]
 805c384: 9905         	ldr	r1, [sp, #0x14]
 805c386: 6889         	ldr	r1, [r1, #0x8]
 805c388: 4288         	cmp	r0, r1
 805c38a: d306         	blo	0x805c39a <prvWriteBytesToBuffer+0xc2> @ imm = #0xc
 805c38c: e7ff         	b	0x805c38e <prvWriteBytesToBuffer+0xb6> @ imm = #-0x2
;         xHead -= pxStreamBuffer->xLength;
 805c38e: 9805         	ldr	r0, [sp, #0x14]
 805c390: 6881         	ldr	r1, [r0, #0x8]
 805c392: 9802         	ldr	r0, [sp, #0x8]
 805c394: 1a40         	subs	r0, r0, r1
 805c396: 9002         	str	r0, [sp, #0x8]
;     }
 805c398: e000         	b	0x805c39c <prvWriteBytesToBuffer+0xc4> @ imm = #0x0
 805c39a: e7ff         	b	0x805c39c <prvWriteBytesToBuffer+0xc4> @ imm = #-0x2
;     return xHead;
 805c39c: 9802         	ldr	r0, [sp, #0x8]
 805c39e: b006         	add	sp, #0x18
 805c3a0: bd80         	pop	{r7, pc}
 805c3a2: bf00         	nop

0805c3a4 <$d.39>:
 805c3a4: e1 ea 05 08  	.word	0x0805eae1
 805c3a8: e1 ea 05 08  	.word	0x0805eae1
 805c3ac: 55 cd 05 08  	.word	0x0805cd55
 805c3b0: 55 cd 05 08  	.word	0x0805cd55
 805c3b4: 55 cd 05 08  	.word	0x0805cd55

0805c3b8 <vPortSetupTimerInterrupt>:
; {
 805c3b8: f24e 0110    	movw	r1, #0xe010
 805c3bc: f2ce 0100    	movt	r1, #0xe000
 805c3c0: 2004         	movs	r0, #0x4
;     portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 805c3c2: 6008         	str	r0, [r1]
 805c3c4: f24e 0218    	movw	r2, #0xe018
 805c3c8: f2ce 0200    	movt	r2, #0xe000
 805c3cc: 2000         	movs	r0, #0x0
;     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 805c3ce: 6010         	str	r0, [r2]
;     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 805c3d0: f242 3088    	movw	r0, #0x2388
 805c3d4: f2c2 0000    	movt	r0, #0x2000
 805c3d8: 6800         	ldr	r0, [r0]
 805c3da: f644 52d3    	movw	r2, #0x4dd3
 805c3de: f2c1 0262    	movt	r2, #0x1062
 805c3e2: fba0 0202    	umull	r0, r2, r0, r2
 805c3e6: f04f 30ff    	mov.w	r0, #0xffffffff
 805c3ea: eb00 1092    	add.w	r0, r0, r2, lsr #6
 805c3ee: f24e 0214    	movw	r2, #0xe014
 805c3f2: f2ce 0200    	movt	r2, #0xe000
 805c3f6: 6010         	str	r0, [r2]
 805c3f8: 2007         	movs	r0, #0x7
;     portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 805c3fa: 6008         	str	r0, [r1]
; }
 805c3fc: 4770         	bx	lr

0805c3fe <vPortYield>:
; {
 805c3fe: f64e 5104    	movw	r1, #0xed04
 805c402: f2ce 0100    	movt	r1, #0xe000
 805c406: f04f 5080    	mov.w	r0, #0x10000000
;     portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 805c40a: 6008         	str	r0, [r1]
;     __asm volatile ( "dsb" ::: "memory" );
 805c40c: f3bf 8f4f    	dsb	sy
;     __asm volatile ( "isb" );
 805c410: f3bf 8f6f    	isb	sy
; }
 805c414: 4770         	bx	lr
 805c416: bf00         	nop

0805c418 <vPortEnterCritical>:
; {
 805c418: b580         	push	{r7, lr}
 805c41a: 466f         	mov	r7, sp
;     portDISABLE_INTERRUPTS();
 805c41c: 4806         	ldr	r0, [pc, #0x18]         @ 0x805c438 <vPortEnterCritical+0x20>
 805c41e: 4780         	blx	r0
;     ulCriticalNesting++;
 805c420: f242 3178    	movw	r1, #0x2378
 805c424: f2c2 0100    	movt	r1, #0x2000
 805c428: 6808         	ldr	r0, [r1]
 805c42a: 3001         	adds	r0, #0x1
 805c42c: 6008         	str	r0, [r1]
;     __asm volatile ( "dsb" ::: "memory" );
 805c42e: f3bf 8f4f    	dsb	sy
;     __asm volatile ( "isb" );
 805c432: f3bf 8f6f    	isb	sy
; }
 805c436: bd80         	pop	{r7, pc}

0805c438 <$d.1>:
 805c438: 55 cd 05 08  	.word	0x0805cd55

0805c43c <vPortExitCritical>:
; {
 805c43c: b580         	push	{r7, lr}
 805c43e: 466f         	mov	r7, sp
;     configASSERT( ulCriticalNesting );
 805c440: f242 3078    	movw	r0, #0x2378
 805c444: f2c2 0000    	movt	r0, #0x2000
 805c448: 6800         	ldr	r0, [r0]
 805c44a: b920         	cbnz	r0, 0x805c456 <vPortExitCritical+0x1a> @ imm = #0x8
 805c44c: e7ff         	b	0x805c44e <vPortExitCritical+0x12> @ imm = #-0x2
 805c44e: 480a         	ldr	r0, [pc, #0x28]         @ 0x805c478 <vPortExitCritical+0x3c>
 805c450: 4780         	blx	r0
 805c452: e7ff         	b	0x805c454 <vPortExitCritical+0x18> @ imm = #-0x2
 805c454: e7fe         	b	0x805c454 <vPortExitCritical+0x18> @ imm = #-0x4
;     ulCriticalNesting--;
 805c456: f242 3078    	movw	r0, #0x2378
 805c45a: f2c2 0000    	movt	r0, #0x2000
 805c45e: 6801         	ldr	r1, [r0]
 805c460: 3901         	subs	r1, #0x1
 805c462: 6001         	str	r1, [r0]
;     if( ulCriticalNesting == 0 )
 805c464: 6800         	ldr	r0, [r0]
 805c466: b920         	cbnz	r0, 0x805c472 <vPortExitCritical+0x36> @ imm = #0x8
 805c468: e7ff         	b	0x805c46a <vPortExitCritical+0x2e> @ imm = #-0x2
;         portENABLE_INTERRUPTS();
 805c46a: 4902         	ldr	r1, [pc, #0x8]          @ 0x805c474 <vPortExitCritical+0x38>
 805c46c: 2000         	movs	r0, #0x0
 805c46e: 4788         	blx	r1
;     }
 805c470: e7ff         	b	0x805c472 <vPortExitCritical+0x36> @ imm = #-0x2
; }
 805c472: bd80         	pop	{r7, pc}

0805c474 <$d.3>:
 805c474: 6b cd 05 08  	.word	0x0805cd6b
 805c478: 55 cd 05 08  	.word	0x0805cd55

0805c47c <SysTick_Handler>:
; {
 805c47c: b580         	push	{r7, lr}
 805c47e: 466f         	mov	r7, sp
 805c480: b082         	sub	sp, #0x8
;     ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 805c482: 480a         	ldr	r0, [pc, #0x28]         @ 0x805c4ac <SysTick_Handler+0x30>
 805c484: 4780         	blx	r0
 805c486: 9001         	str	r0, [sp, #0x4]
;         if( xTaskIncrementTick() != pdFALSE )
 805c488: 4809         	ldr	r0, [pc, #0x24]         @ 0x805c4b0 <SysTick_Handler+0x34>
 805c48a: 4780         	blx	r0
 805c48c: b140         	cbz	r0, 0x805c4a0 <SysTick_Handler+0x24> @ imm = #0x10
 805c48e: e7ff         	b	0x805c490 <SysTick_Handler+0x14> @ imm = #-0x2
 805c490: f64e 5104    	movw	r1, #0xed04
 805c494: f2ce 0100    	movt	r1, #0xe000
 805c498: f04f 5080    	mov.w	r0, #0x10000000
;             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 805c49c: 6008         	str	r0, [r1]
;         }
 805c49e: e000         	b	0x805c4a2 <SysTick_Handler+0x26> @ imm = #0x0
 805c4a0: e7ff         	b	0x805c4a2 <SysTick_Handler+0x26> @ imm = #-0x2
;     portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 805c4a2: 9801         	ldr	r0, [sp, #0x4]
 805c4a4: 4903         	ldr	r1, [pc, #0xc]          @ 0x805c4b4 <SysTick_Handler+0x38>
 805c4a6: 4788         	blx	r1
; }
 805c4a8: b002         	add	sp, #0x8
 805c4aa: bd80         	pop	{r7, pc}

0805c4ac <$d.5>:
 805c4ac: 55 cd 05 08  	.word	0x0805cd55
 805c4b0: ad 66 05 08  	.word	0x080566ad
 805c4b4: 6b cd 05 08  	.word	0x0805cd6b

0805c4b8 <vPortSVCHandler_C>:
; {
 805c4b8: b580         	push	{r7, lr}
 805c4ba: 466f         	mov	r7, sp
 805c4bc: b084         	sub	sp, #0x10
 805c4be: 9003         	str	r0, [sp, #0xc]
;     ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 805c4c0: 9803         	ldr	r0, [sp, #0xc]
 805c4c2: 6980         	ldr	r0, [r0, #0x18]
 805c4c4: 9002         	str	r0, [sp, #0x8]
;     ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 805c4c6: 9802         	ldr	r0, [sp, #0x8]
 805c4c8: f810 0c02    	ldrb	r0, [r0, #-2]
 805c4cc: f807 0c09    	strb	r0, [r7, #-9]
;     switch( ucSVCNumber )
 805c4d0: f817 0c09    	ldrb	r0, [r7, #-9]
 805c4d4: 4601         	mov	r1, r0
 805c4d6: 9100         	str	r1, [sp]
 805c4d8: 2802         	cmp	r0, #0x2
 805c4da: d008         	beq	0x805c4ee <vPortSVCHandler_C+0x36> @ imm = #0x10
 805c4dc: e7ff         	b	0x805c4de <vPortSVCHandler_C+0x26> @ imm = #-0x2
 805c4de: 9800         	ldr	r0, [sp]
 805c4e0: 2803         	cmp	r0, #0x3
 805c4e2: d007         	beq	0x805c4f4 <vPortSVCHandler_C+0x3c> @ imm = #0xe
 805c4e4: e7ff         	b	0x805c4e6 <vPortSVCHandler_C+0x2e> @ imm = #-0x2
 805c4e6: 9800         	ldr	r0, [sp]
 805c4e8: 2807         	cmp	r0, #0x7
 805c4ea: d017         	beq	0x805c51c <vPortSVCHandler_C+0x64> @ imm = #0x2e
 805c4ec: e019         	b	0x805c522 <vPortSVCHandler_C+0x6a> @ imm = #0x32
;             vRestoreContextOfFirstTask();
 805c4ee: 4812         	ldr	r0, [pc, #0x48]         @ 0x805c538 <vPortSVCHandler_C+0x80>
 805c4f0: 4780         	blx	r0
;             break;
 805c4f2: e01a         	b	0x805c52a <vPortSVCHandler_C+0x72> @ imm = #0x34
;                     if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 805c4f4: 9802         	ldr	r0, [sp, #0x8]
 805c4f6: f64c 6160    	movw	r1, #0xce60
 805c4fa: f6c0 0105    	movt	r1, #0x805
 805c4fe: 4288         	cmp	r0, r1
 805c500: d30b         	blo	0x805c51a <vPortSVCHandler_C+0x62> @ imm = #0x16
 805c502: e7ff         	b	0x805c504 <vPortSVCHandler_C+0x4c> @ imm = #-0x2
;                         ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 805c504: 9802         	ldr	r0, [sp, #0x8]
 805c506: f64d 517f    	movw	r1, #0xdd7f
 805c50a: f6c0 0105    	movt	r1, #0x805
;                     if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 805c50e: 4288         	cmp	r0, r1
 805c510: d803         	bhi	0x805c51a <vPortSVCHandler_C+0x62> @ imm = #0x6
 805c512: e7ff         	b	0x805c514 <vPortSVCHandler_C+0x5c> @ imm = #-0x2
;                         vRaisePrivilege();
 805c514: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805c534 <vPortSVCHandler_C+0x7c>
 805c516: 4780         	blx	r0
;                     }
 805c518: e7ff         	b	0x805c51a <vPortSVCHandler_C+0x62> @ imm = #-0x2
;                     break;
 805c51a: e006         	b	0x805c52a <vPortSVCHandler_C+0x72> @ imm = #0xc
;                     vPortYield();
 805c51c: 4804         	ldr	r0, [pc, #0x10]         @ 0x805c530 <vPortSVCHandler_C+0x78>
 805c51e: 4780         	blx	r0
;                     break;
 805c520: e003         	b	0x805c52a <vPortSVCHandler_C+0x72> @ imm = #0x6
;             configASSERT( pdFALSE );
 805c522: 4806         	ldr	r0, [pc, #0x18]         @ 0x805c53c <vPortSVCHandler_C+0x84>
 805c524: 4780         	blx	r0
 805c526: e7ff         	b	0x805c528 <vPortSVCHandler_C+0x70> @ imm = #-0x2
 805c528: e7fe         	b	0x805c528 <vPortSVCHandler_C+0x70> @ imm = #-0x4
; }
 805c52a: b004         	add	sp, #0x10
 805c52c: bd80         	pop	{r7, pc}
 805c52e: bf00         	nop

0805c530 <$d.7>:
 805c530: ff c3 05 08  	.word	0x0805c3ff
 805c534: 25 cd 05 08  	.word	0x0805cd25
 805c538: a1 cc 05 08  	.word	0x0805cca1
 805c53c: 55 cd 05 08  	.word	0x0805cd55

0805c540 <xPortIsTaskPrivileged>:
;     {
 805c540: b580         	push	{r7, lr}
 805c542: 466f         	mov	r7, sp
 805c544: b082         	sub	sp, #0x8
 805c546: 2000         	movs	r0, #0x0
;         BaseType_t xTaskIsPrivileged = pdFALSE;
 805c548: 9001         	str	r0, [sp, #0x4]
;         const xMPU_SETTINGS * xTaskMpuSettings = xTaskGetMPUSettings( NULL ); /* Calling task's MPU settings. */
 805c54a: 4908         	ldr	r1, [pc, #0x20]         @ 0x805c56c <xPortIsTaskPrivileged+0x2c>
 805c54c: 4788         	blx	r1
 805c54e: 9000         	str	r0, [sp]
;         if( ( xTaskMpuSettings->ulTaskFlags & portTASK_IS_PRIVILEGED_FLAG ) == portTASK_IS_PRIVILEGED_FLAG )
 805c550: 9800         	ldr	r0, [sp]
 805c552: f890 0078    	ldrb.w	r0, [r0, #0x78]
 805c556: 0780         	lsls	r0, r0, #0x1e
 805c558: 2800         	cmp	r0, #0x0
 805c55a: d503         	bpl	0x805c564 <xPortIsTaskPrivileged+0x24> @ imm = #0x6
 805c55c: e7ff         	b	0x805c55e <xPortIsTaskPrivileged+0x1e> @ imm = #-0x2
 805c55e: 2001         	movs	r0, #0x1
;             xTaskIsPrivileged = pdTRUE;
 805c560: 9001         	str	r0, [sp, #0x4]
;         }
 805c562: e7ff         	b	0x805c564 <xPortIsTaskPrivileged+0x24> @ imm = #-0x2
;         return xTaskIsPrivileged;
 805c564: 9801         	ldr	r0, [sp, #0x4]
 805c566: b002         	add	sp, #0x8
 805c568: bd80         	pop	{r7, pc}
 805c56a: bf00         	nop

0805c56c <$d.9>:
 805c56c: 45 84 05 08  	.word	0x08058445

0805c570 <pxPortInitialiseStack>:
;     {
 805c570: b085         	sub	sp, #0x14
 805c572: f8dd c018    	ldr.w	r12, [sp, #0x18]
 805c576: f8dd c014    	ldr.w	r12, [sp, #0x14]
 805c57a: 9004         	str	r0, [sp, #0x10]
 805c57c: 9103         	str	r1, [sp, #0xc]
 805c57e: 9202         	str	r2, [sp, #0x8]
 805c580: 9301         	str	r3, [sp, #0x4]
 805c582: 2000         	movs	r0, #0x0
;         uint32_t ulIndex = 0;
 805c584: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x04040404; /* r4. */
 805c586: 9806         	ldr	r0, [sp, #0x18]
 805c588: 9900         	ldr	r1, [sp]
 805c58a: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c58e: f04f 3004    	mov.w	r0, #0x4040404
 805c592: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c594: 9800         	ldr	r0, [sp]
 805c596: 3001         	adds	r0, #0x1
 805c598: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x05050505; /* r5. */
 805c59a: 9806         	ldr	r0, [sp, #0x18]
 805c59c: 9900         	ldr	r1, [sp]
 805c59e: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c5a2: f04f 3005    	mov.w	r0, #0x5050505
 805c5a6: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c5a8: 9800         	ldr	r0, [sp]
 805c5aa: 3001         	adds	r0, #0x1
 805c5ac: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x06060606; /* r6. */
 805c5ae: 9806         	ldr	r0, [sp, #0x18]
 805c5b0: 9900         	ldr	r1, [sp]
 805c5b2: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c5b6: f04f 3006    	mov.w	r0, #0x6060606
 805c5ba: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c5bc: 9800         	ldr	r0, [sp]
 805c5be: 3001         	adds	r0, #0x1
 805c5c0: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x07070707; /* r7. */
 805c5c2: 9806         	ldr	r0, [sp, #0x18]
 805c5c4: 9900         	ldr	r1, [sp]
 805c5c6: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c5ca: f04f 3007    	mov.w	r0, #0x7070707
 805c5ce: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c5d0: 9800         	ldr	r0, [sp]
 805c5d2: 3001         	adds	r0, #0x1
 805c5d4: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x08080808; /* r8. */
 805c5d6: 9806         	ldr	r0, [sp, #0x18]
 805c5d8: 9900         	ldr	r1, [sp]
 805c5da: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c5de: f04f 3008    	mov.w	r0, #0x8080808
 805c5e2: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c5e4: 9800         	ldr	r0, [sp]
 805c5e6: 3001         	adds	r0, #0x1
 805c5e8: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x09090909; /* r9. */
 805c5ea: 9806         	ldr	r0, [sp, #0x18]
 805c5ec: 9900         	ldr	r1, [sp]
 805c5ee: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c5f2: f04f 3009    	mov.w	r0, #0x9090909
 805c5f6: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c5f8: 9800         	ldr	r0, [sp]
 805c5fa: 3001         	adds	r0, #0x1
 805c5fc: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x10101010; /* r10. */
 805c5fe: 9806         	ldr	r0, [sp, #0x18]
 805c600: 9900         	ldr	r1, [sp]
 805c602: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c606: f04f 3010    	mov.w	r0, #0x10101010
 805c60a: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c60c: 9800         	ldr	r0, [sp]
 805c60e: 3001         	adds	r0, #0x1
 805c610: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x11111111; /* r11. */
 805c612: 9806         	ldr	r0, [sp, #0x18]
 805c614: 9900         	ldr	r1, [sp]
 805c616: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c61a: f04f 3011    	mov.w	r0, #0x11111111
 805c61e: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c620: 9800         	ldr	r0, [sp]
 805c622: 3001         	adds	r0, #0x1
 805c624: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pvParameters;            /* r0. */
 805c626: 9801         	ldr	r0, [sp, #0x4]
 805c628: 9906         	ldr	r1, [sp, #0x18]
 805c62a: 9a00         	ldr	r2, [sp]
 805c62c: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805c630: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c632: 9800         	ldr	r0, [sp]
 805c634: 3001         	adds	r0, #0x1
 805c636: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x01010101;                           /* r1. */
 805c638: 9806         	ldr	r0, [sp, #0x18]
 805c63a: 9900         	ldr	r1, [sp]
 805c63c: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c640: f04f 3001    	mov.w	r0, #0x1010101
 805c644: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c646: 9800         	ldr	r0, [sp]
 805c648: 3001         	adds	r0, #0x1
 805c64a: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x02020202;                           /* r2. */
 805c64c: 9806         	ldr	r0, [sp, #0x18]
 805c64e: 9900         	ldr	r1, [sp]
 805c650: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c654: f04f 3002    	mov.w	r0, #0x2020202
 805c658: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c65a: 9800         	ldr	r0, [sp]
 805c65c: 3001         	adds	r0, #0x1
 805c65e: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x03030303;                           /* r3. */
 805c660: 9806         	ldr	r0, [sp, #0x18]
 805c662: 9900         	ldr	r1, [sp]
 805c664: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c668: f04f 3003    	mov.w	r0, #0x3030303
 805c66c: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c66e: 9800         	ldr	r0, [sp]
 805c670: 3001         	adds	r0, #0x1
 805c672: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x12121212;                           /* r12. */
 805c674: 9806         	ldr	r0, [sp, #0x18]
 805c676: 9900         	ldr	r1, [sp]
 805c678: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c67c: f04f 3012    	mov.w	r0, #0x12121212
 805c680: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c682: 9800         	ldr	r0, [sp]
 805c684: 3001         	adds	r0, #0x1
 805c686: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portTASK_RETURN_ADDRESS; /* LR. */
 805c688: 9806         	ldr	r0, [sp, #0x18]
 805c68a: 9900         	ldr	r1, [sp]
 805c68c: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c690: f64e 2009    	movw	r0, #0xea09
 805c694: f6c0 0005    	movt	r0, #0x805
 805c698: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c69a: 9800         	ldr	r0, [sp]
 805c69c: 3001         	adds	r0, #0x1
 805c69e: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pxCode;                  /* PC. */
 805c6a0: 9802         	ldr	r0, [sp, #0x8]
 805c6a2: 9906         	ldr	r1, [sp, #0x18]
 805c6a4: 9a00         	ldr	r2, [sp]
 805c6a6: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805c6aa: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c6ac: 9800         	ldr	r0, [sp]
 805c6ae: 3001         	adds	r0, #0x1
 805c6b0: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = portINITIAL_XPSR;                     /* xPSR. */
 805c6b2: 9806         	ldr	r0, [sp, #0x18]
 805c6b4: 9900         	ldr	r1, [sp]
 805c6b6: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c6ba: f04f 7080    	mov.w	r0, #0x1000000
 805c6be: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c6c0: 9800         	ldr	r0, [sp]
 805c6c2: 3001         	adds	r0, #0x1
 805c6c4: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) ( pxTopOfStack - 8 ); /* PSP with the hardware saved stack. */
 805c6c6: 9804         	ldr	r0, [sp, #0x10]
 805c6c8: 3820         	subs	r0, #0x20
 805c6ca: 9906         	ldr	r1, [sp, #0x18]
 805c6cc: 9a00         	ldr	r2, [sp]
 805c6ce: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805c6d2: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c6d4: 9800         	ldr	r0, [sp]
 805c6d6: 3001         	adds	r0, #0x1
 805c6d8: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pxEndOfStack;         /* PSPLIM. */
 805c6da: 9803         	ldr	r0, [sp, #0xc]
 805c6dc: 9906         	ldr	r1, [sp, #0x18]
 805c6de: 9a00         	ldr	r2, [sp]
 805c6e0: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805c6e4: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c6e6: 9800         	ldr	r0, [sp]
 805c6e8: 3001         	adds	r0, #0x1
 805c6ea: 9000         	str	r0, [sp]
;         if( xRunPrivileged == pdTRUE )
 805c6ec: 9805         	ldr	r0, [sp, #0x14]
 805c6ee: 2801         	cmp	r0, #0x1
 805c6f0: d10f         	bne	0x805c712 <pxPortInitialiseStack+0x1a2> @ imm = #0x1e
 805c6f2: e7ff         	b	0x805c6f4 <pxPortInitialiseStack+0x184> @ imm = #-0x2
;             xMPUSettings->ulTaskFlags |= portTASK_IS_PRIVILEGED_FLAG;
 805c6f4: 9906         	ldr	r1, [sp, #0x18]
 805c6f6: 6f88         	ldr	r0, [r1, #0x78]
 805c6f8: f040 0002    	orr	r0, r0, #0x2
 805c6fc: 6788         	str	r0, [r1, #0x78]
;             xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portINITIAL_CONTROL_PRIVILEGED; /* CONTROL. */
 805c6fe: 9806         	ldr	r0, [sp, #0x18]
 805c700: 9900         	ldr	r1, [sp]
 805c702: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c706: 2002         	movs	r0, #0x2
 805c708: 6248         	str	r0, [r1, #0x24]
;             ulIndex++;
 805c70a: 9800         	ldr	r0, [sp]
 805c70c: 3001         	adds	r0, #0x1
 805c70e: 9000         	str	r0, [sp]
;         }
 805c710: e00e         	b	0x805c730 <pxPortInitialiseStack+0x1c0> @ imm = #0x1c
;             xMPUSettings->ulTaskFlags &= ( ~portTASK_IS_PRIVILEGED_FLAG );
 805c712: 9906         	ldr	r1, [sp, #0x18]
 805c714: 6f88         	ldr	r0, [r1, #0x78]
 805c716: f020 0002    	bic	r0, r0, #0x2
 805c71a: 6788         	str	r0, [r1, #0x78]
;             xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portINITIAL_CONTROL_UNPRIVILEGED; /* CONTROL. */
 805c71c: 9806         	ldr	r0, [sp, #0x18]
 805c71e: 9900         	ldr	r1, [sp]
 805c720: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c724: 2003         	movs	r0, #0x3
 805c726: 6248         	str	r0, [r1, #0x24]
;             ulIndex++;
 805c728: 9800         	ldr	r0, [sp]
 805c72a: 3001         	adds	r0, #0x1
 805c72c: 9000         	str	r0, [sp]
 805c72e: e7ff         	b	0x805c730 <pxPortInitialiseStack+0x1c0> @ imm = #-0x2
;         xMPUSettings->ulContext[ ulIndex ] = portINITIAL_EXC_RETURN; /* LR (EXC_RETURN). */
 805c730: 9806         	ldr	r0, [sp, #0x18]
 805c732: 9900         	ldr	r1, [sp]
 805c734: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805c738: f06f 0043    	mvn	r0, #0x43
 805c73c: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805c73e: 9800         	ldr	r0, [sp]
 805c740: 3001         	adds	r0, #0x1
 805c742: 9000         	str	r0, [sp]
;         return &( xMPUSettings->ulContext[ ulIndex ] );
 805c744: 9806         	ldr	r0, [sp, #0x18]
 805c746: 9900         	ldr	r1, [sp]
 805c748: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805c74c: 3024         	adds	r0, #0x24
 805c74e: b005         	add	sp, #0x14
 805c750: 4770         	bx	lr
 805c752: bf00         	nop

0805c754 <xPortStartScheduler>:
; {
 805c754: b580         	push	{r7, lr}
 805c756: 466f         	mov	r7, sp
 805c758: b084         	sub	sp, #0x10
 805c75a: 2000         	movs	r0, #0x0
;         volatile uint32_t ulImplementedPrioBits = 0;
 805c75c: 9002         	str	r0, [sp, #0x8]
 805c75e: f64e 501c    	movw	r0, #0xed1c
 805c762: f2ce 0000    	movt	r0, #0xe000
;         ulOriginalPriority = portNVIC_SHPR2_REG;
 805c766: 6801         	ldr	r1, [r0]
 805c768: 9103         	str	r1, [sp, #0xc]
 805c76a: f04f 417f    	mov.w	r1, #0xff000000
;         portNVIC_SHPR2_REG = 0xFF000000;
 805c76e: 6001         	str	r1, [r0]
;         ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 805c770: 6800         	ldr	r0, [r0]
 805c772: 0e00         	lsrs	r0, r0, #0x18
 805c774: f807 0c09    	strb	r0, [r7, #-9]
;         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 805c778: f817 0c09    	ldrb	r0, [r7, #-9]
 805c77c: f000 01a0    	and	r1, r0, #0xa0
 805c780: f642 7060    	movw	r0, #0x2f60
 805c784: f2c2 0000    	movt	r0, #0x2000
 805c788: 7001         	strb	r1, [r0]
;         configASSERT( ucMaxSysCallPriority );
 805c78a: 7800         	ldrb	r0, [r0]
 805c78c: b920         	cbnz	r0, 0x805c798 <xPortStartScheduler+0x44> @ imm = #0x8
 805c78e: e7ff         	b	0x805c790 <xPortStartScheduler+0x3c> @ imm = #-0x2
 805c790: 4837         	ldr	r0, [pc, #0xdc]         @ 0x805c870 <xPortStartScheduler+0x11c>
 805c792: 4780         	blx	r0
 805c794: e7ff         	b	0x805c796 <xPortStartScheduler+0x42> @ imm = #-0x2
 805c796: e7fe         	b	0x805c796 <xPortStartScheduler+0x42> @ imm = #-0x4
;         configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 805c798: f817 0c09    	ldrb	r0, [r7, #-9]
 805c79c: 43c0         	mvns	r0, r0
 805c79e: f010 0fa0    	tst.w	r0, #0xa0
 805c7a2: d004         	beq	0x805c7ae <xPortStartScheduler+0x5a> @ imm = #0x8
 805c7a4: e7ff         	b	0x805c7a6 <xPortStartScheduler+0x52> @ imm = #-0x2
 805c7a6: 4831         	ldr	r0, [pc, #0xc4]         @ 0x805c86c <xPortStartScheduler+0x118>
 805c7a8: 4780         	blx	r0
 805c7aa: e7ff         	b	0x805c7ac <xPortStartScheduler+0x58> @ imm = #-0x2
 805c7ac: e7fe         	b	0x805c7ac <xPortStartScheduler+0x58> @ imm = #-0x4
;         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 805c7ae: e7ff         	b	0x805c7b0 <xPortStartScheduler+0x5c> @ imm = #-0x2
 805c7b0: f817 0c09    	ldrb	r0, [r7, #-9]
 805c7b4: 0600         	lsls	r0, r0, #0x18
 805c7b6: 2800         	cmp	r0, #0x0
 805c7b8: d509         	bpl	0x805c7ce <xPortStartScheduler+0x7a> @ imm = #0x12
 805c7ba: e7ff         	b	0x805c7bc <xPortStartScheduler+0x68> @ imm = #-0x2
;             ulImplementedPrioBits++;
 805c7bc: 9802         	ldr	r0, [sp, #0x8]
 805c7be: 3001         	adds	r0, #0x1
 805c7c0: 9002         	str	r0, [sp, #0x8]
;             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 805c7c2: f817 0c09    	ldrb	r0, [r7, #-9]
 805c7c6: 0040         	lsls	r0, r0, #0x1
 805c7c8: f807 0c09    	strb	r0, [r7, #-9]
;         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 805c7cc: e7f0         	b	0x805c7b0 <xPortStartScheduler+0x5c> @ imm = #-0x20
;         if( ulImplementedPrioBits == 8 )
 805c7ce: 9802         	ldr	r0, [sp, #0x8]
 805c7d0: 2808         	cmp	r0, #0x8
 805c7d2: d107         	bne	0x805c7e4 <xPortStartScheduler+0x90> @ imm = #0xe
 805c7d4: e7ff         	b	0x805c7d6 <xPortStartScheduler+0x82> @ imm = #-0x2
;             ulMaxPRIGROUPValue = 0;
 805c7d6: f642 7164    	movw	r1, #0x2f64
 805c7da: f2c2 0100    	movt	r1, #0x2000
 805c7de: 2000         	movs	r0, #0x0
 805c7e0: 6008         	str	r0, [r1]
;         }
 805c7e2: e008         	b	0x805c7f6 <xPortStartScheduler+0xa2> @ imm = #0x10
;             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 805c7e4: 9802         	ldr	r0, [sp, #0x8]
 805c7e6: f1c0 0007    	rsb.w	r0, r0, #0x7
 805c7ea: f642 7164    	movw	r1, #0x2f64
 805c7ee: f2c2 0100    	movt	r1, #0x2000
 805c7f2: 6008         	str	r0, [r1]
 805c7f4: e7ff         	b	0x805c7f6 <xPortStartScheduler+0xa2> @ imm = #-0x2
;         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 805c7f6: f642 7164    	movw	r1, #0x2f64
 805c7fa: f2c2 0100    	movt	r1, #0x2000
 805c7fe: 6808         	ldr	r0, [r1]
 805c800: 0200         	lsls	r0, r0, #0x8
 805c802: 6008         	str	r0, [r1]
;         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 805c804: 6808         	ldr	r0, [r1]
 805c806: f400 60e0    	and	r0, r0, #0x700
 805c80a: 6008         	str	r0, [r1]
;         portNVIC_SHPR2_REG = ulOriginalPriority;
 805c80c: 9803         	ldr	r0, [sp, #0xc]
 805c80e: f64e 511c    	movw	r1, #0xed1c
 805c812: f2ce 0100    	movt	r1, #0xe000
 805c816: 6008         	str	r0, [r1]
 805c818: f64e 5120    	movw	r1, #0xed20
 805c81c: f2ce 0100    	movt	r1, #0xe000
;     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 805c820: 6808         	ldr	r0, [r1]
 805c822: f440 007f    	orr	r0, r0, #0xff0000
 805c826: 6008         	str	r0, [r1]
;     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 805c828: 6808         	ldr	r0, [r1]
 805c82a: f040 407f    	orr	r0, r0, #0xff000000
 805c82e: 6008         	str	r0, [r1]
;         prvSetupMPU();
 805c830: 4809         	ldr	r0, [pc, #0x24]         @ 0x805c858 <xPortStartScheduler+0x104>
 805c832: 4780         	blx	r0
;     vPortSetupTimerInterrupt();
 805c834: 4809         	ldr	r0, [pc, #0x24]         @ 0x805c85c <xPortStartScheduler+0x108>
 805c836: 4780         	blx	r0
;     ulCriticalNesting = 0;
 805c838: f242 3178    	movw	r1, #0x2378
 805c83c: f2c2 0100    	movt	r1, #0x2000
 805c840: 2000         	movs	r0, #0x0
 805c842: 9000         	str	r0, [sp]
 805c844: 6008         	str	r0, [r1]
;     vStartFirstTask();
 805c846: 4806         	ldr	r0, [pc, #0x18]         @ 0x805c860 <xPortStartScheduler+0x10c>
 805c848: 4780         	blx	r0
;     vTaskSwitchContext();
 805c84a: 4806         	ldr	r0, [pc, #0x18]         @ 0x805c864 <xPortStartScheduler+0x110>
 805c84c: 4780         	blx	r0
;     prvTaskExitError();
 805c84e: 4806         	ldr	r0, [pc, #0x18]         @ 0x805c868 <xPortStartScheduler+0x114>
 805c850: 4780         	blx	r0
 805c852: 9800         	ldr	r0, [sp]
;     return 0;
 805c854: b004         	add	sp, #0x10
 805c856: bd80         	pop	{r7, pc}

0805c858 <$d.13>:
 805c858: 75 c8 05 08  	.word	0x0805c875
 805c85c: b9 c3 05 08  	.word	0x0805c3b9
 805c860: 33 cd 05 08  	.word	0x0805cd33
 805c864: 41 62 05 08  	.word	0x08056241
 805c868: 09 ea 05 08  	.word	0x0805ea09
 805c86c: 55 cd 05 08  	.word	0x0805cd55
 805c870: 55 cd 05 08  	.word	0x0805cd55

0805c874 <prvSetupMPU>:
;     {
 805c874: b580         	push	{r7, lr}
 805c876: 466f         	mov	r7, sp
 805c878: f64e 5090    	movw	r0, #0xed90
 805c87c: f2ce 0000    	movt	r0, #0xe000
;         configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 805c880: 6800         	ldr	r0, [r0]
 805c882: f5b0 6f00    	cmp.w	r0, #0x800
 805c886: d004         	beq	0x805c892 <prvSetupMPU+0x1e> @ imm = #0x8
 805c888: e7ff         	b	0x805c88a <prvSetupMPU+0x16> @ imm = #-0x2
 805c88a: 483f         	ldr	r0, [pc, #0xfc]         @ 0x805c988 <prvSetupMPU+0x114>
 805c88c: 4780         	blx	r0
 805c88e: e7ff         	b	0x805c890 <prvSetupMPU+0x1c> @ imm = #-0x2
 805c890: e7fe         	b	0x805c890 <prvSetupMPU+0x1c> @ imm = #-0x4
 805c892: f64e 5090    	movw	r0, #0xed90
 805c896: f2ce 0000    	movt	r0, #0xe000
;         if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 805c89a: 6800         	ldr	r0, [r0]
 805c89c: f5b0 6f00    	cmp.w	r0, #0x800
 805c8a0: d170         	bne	0x805c984 <prvSetupMPU+0x110> @ imm = #0xe0
 805c8a2: e7ff         	b	0x805c8a4 <prvSetupMPU+0x30> @ imm = #-0x2
 805c8a4: f64e 51c0    	movw	r1, #0xedc0
 805c8a8: f2ce 0100    	movt	r1, #0xe000
;             portMPU_MAIR0_REG |= ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 805c8ac: 6808         	ldr	r0, [r1]
 805c8ae: f040 00ff    	orr	r0, r0, #0xff
 805c8b2: 6008         	str	r0, [r1]
;             portMPU_MAIR0_REG |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 805c8b4: 6808         	ldr	r0, [r1]
 805c8b6: f440 6080    	orr	r0, r0, #0x400
 805c8ba: 6008         	str	r0, [r1]
 805c8bc: f64e 5c98    	movw	r12, #0xed98
 805c8c0: f2ce 0c00    	movt	r12, #0xe000
 805c8c4: 2000         	movs	r0, #0x0
;             portMPU_RNR_REG = portPRIVILEGED_FLASH_REGION;
 805c8c6: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_functions_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805c8ca: f245 2000    	movw	r0, #0x5200
 805c8ce: f6c0 0005    	movt	r0, #0x805
 805c8d2: 2104         	movs	r1, #0x4
 805c8d4: f361 0004    	bfi	r0, r1, #0, #5
 805c8d8: f64e 539c    	movw	r3, #0xed9c
 805c8dc: f2ce 0300    	movt	r3, #0xe000
 805c8e0: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_functions_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805c8e2: f64c 605f    	movw	r0, #0xce5f
 805c8e6: f6c0 0005    	movt	r0, #0x805
 805c8ea: 2201         	movs	r2, #0x1
 805c8ec: f362 0004    	bfi	r0, r2, #0, #5
 805c8f0: f64e 51a0    	movw	r1, #0xeda0
 805c8f4: f2ce 0100    	movt	r1, #0xe000
 805c8f8: 6008         	str	r0, [r1]
;             portMPU_RNR_REG = portUNPRIVILEGED_FLASH_REGION;
 805c8fa: f8cc 2000    	str.w	r2, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __unprivileged_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805c8fe: f64d 5080    	movw	r0, #0xdd80
 805c902: f6c0 0005    	movt	r0, #0x805
 805c906: f04f 0e06    	mov.w	lr, #0x6
 805c90a: f36e 0004    	bfi	r0, lr, #0, #5
 805c90e: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __unprivileged_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805c910: f645 505f    	movw	r0, #0x5d5f
 805c914: f6c0 0006    	movt	r0, #0x806
 805c918: f362 0004    	bfi	r0, r2, #0, #5
 805c91c: 6008         	str	r0, [r1]
 805c91e: 2002         	movs	r0, #0x2
;             portMPU_RNR_REG = portUNPRIVILEGED_SYSCALLS_REGION;
 805c920: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __syscalls_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805c924: f64c 6060    	movw	r0, #0xce60
 805c928: f6c0 0005    	movt	r0, #0x805
 805c92c: f36e 0004    	bfi	r0, lr, #0, #5
 805c930: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __syscalls_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805c932: f64d 507f    	movw	r0, #0xdd7f
 805c936: f6c0 0005    	movt	r0, #0x805
 805c93a: f362 0004    	bfi	r0, r2, #0, #5
 805c93e: 6008         	str	r0, [r1]
 805c940: 2003         	movs	r0, #0x3
;             portMPU_RNR_REG = portPRIVILEGED_RAM_REGION;
 805c942: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_sram_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805c946: f240 1000    	movw	r0, #0x100
 805c94a: f2c2 0000    	movt	r0, #0x2000
 805c94e: f362 0004    	bfi	r0, r2, #0, #5
 805c952: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_sram_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805c954: f242 307f    	movw	r0, #0x237f
 805c958: f2c2 0000    	movt	r0, #0x2000
 805c95c: f362 0004    	bfi	r0, r2, #0, #5
 805c960: 6008         	str	r0, [r1]
 805c962: f64e 5124    	movw	r1, #0xed24
 805c966: f2ce 0100    	movt	r1, #0xe000
;             portSCB_SYS_HANDLER_CTRL_STATE_REG |= portSCB_MEM_FAULT_ENABLE_BIT;
 805c96a: 6808         	ldr	r0, [r1]
 805c96c: f440 3080    	orr	r0, r0, #0x10000
 805c970: 6008         	str	r0, [r1]
 805c972: f64e 5194    	movw	r1, #0xed94
 805c976: f2ce 0100    	movt	r1, #0xe000
;             portMPU_CTRL_REG |= ( portMPU_PRIV_BACKGROUND_ENABLE_BIT | portMPU_ENABLE_BIT );
 805c97a: 6808         	ldr	r0, [r1]
 805c97c: f040 0005    	orr	r0, r0, #0x5
 805c980: 6008         	str	r0, [r1]
;         }
 805c982: e7ff         	b	0x805c984 <prvSetupMPU+0x110> @ imm = #-0x2
;     }
 805c984: bd80         	pop	{r7, pc}
 805c986: bf00         	nop

0805c988 <$d.15>:
 805c988: 55 cd 05 08  	.word	0x0805cd55

0805c98c <vPortEndScheduler>:
; {
 805c98c: b580         	push	{r7, lr}
 805c98e: 466f         	mov	r7, sp
;     configASSERT( ulCriticalNesting == 1000UL );
 805c990: f242 3078    	movw	r0, #0x2378
 805c994: f2c2 0000    	movt	r0, #0x2000
 805c998: 6800         	ldr	r0, [r0]
 805c99a: f5b0 7f7a    	cmp.w	r0, #0x3e8
 805c99e: d004         	beq	0x805c9aa <vPortEndScheduler+0x1e> @ imm = #0x8
 805c9a0: e7ff         	b	0x805c9a2 <vPortEndScheduler+0x16> @ imm = #-0x2
 805c9a2: 4802         	ldr	r0, [pc, #0x8]          @ 0x805c9ac <vPortEndScheduler+0x20>
 805c9a4: 4780         	blx	r0
 805c9a6: e7ff         	b	0x805c9a8 <vPortEndScheduler+0x1c> @ imm = #-0x2
 805c9a8: e7fe         	b	0x805c9a8 <vPortEndScheduler+0x1c> @ imm = #-0x4
; }
 805c9aa: bd80         	pop	{r7, pc}

0805c9ac <$d.17>:
 805c9ac: 55 cd 05 08  	.word	0x0805cd55

0805c9b0 <vPortStoreTaskMPUSettings>:
;     {
 805c9b0: b088         	sub	sp, #0x20
 805c9b2: 9007         	str	r0, [sp, #0x1c]
 805c9b4: 9106         	str	r1, [sp, #0x18]
 805c9b6: 9205         	str	r2, [sp, #0x14]
 805c9b8: 9304         	str	r3, [sp, #0x10]
 805c9ba: 2000         	movs	r0, #0x0
;         int32_t lIndex = 0;
 805c9bc: 9000         	str	r0, [sp]
;         xMPUSettings->ulMAIR0 = ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 805c9be: 9907         	ldr	r1, [sp, #0x1c]
 805c9c0: 20ff         	movs	r0, #0xff
 805c9c2: 6008         	str	r0, [r1]
;         xMPUSettings->ulMAIR0 |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 805c9c4: 9907         	ldr	r1, [sp, #0x1c]
 805c9c6: 6808         	ldr	r0, [r1]
 805c9c8: f440 6080    	orr	r0, r0, #0x400
 805c9cc: 6008         	str	r0, [r1]
;         if( ulStackDepth > 0 )
 805c9ce: 9804         	ldr	r0, [sp, #0x10]
 805c9d0: b390         	cbz	r0, 0x805ca38 <vPortStoreTaskMPUSettings+0x88> @ imm = #0x64
 805c9d2: e7ff         	b	0x805c9d4 <vPortStoreTaskMPUSettings+0x24> @ imm = #-0x2
;             ulRegionStartAddress = ( uint32_t ) pxBottomOfStack;
 805c9d4: 9805         	ldr	r0, [sp, #0x14]
 805c9d6: 9003         	str	r0, [sp, #0xc]
;             ulRegionEndAddress = ( uint32_t ) pxBottomOfStack + ( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) - 1;
 805c9d8: 9805         	ldr	r0, [sp, #0x14]
 805c9da: 9904         	ldr	r1, [sp, #0x10]
 805c9dc: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805c9e0: 3801         	subs	r0, #0x1
 805c9e2: 9002         	str	r0, [sp, #0x8]
;             if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 805c9e4: 9803         	ldr	r0, [sp, #0xc]
 805c9e6: f240 1100    	movw	r1, #0x100
 805c9ea: f2c2 0100    	movt	r1, #0x2000
 805c9ee: 4288         	cmp	r0, r1
 805c9f0: d30e         	blo	0x805ca10 <vPortStoreTaskMPUSettings+0x60> @ imm = #0x1c
 805c9f2: e7ff         	b	0x805c9f4 <vPortStoreTaskMPUSettings+0x44> @ imm = #-0x2
;                 ( ulRegionEndAddress <= ( uint32_t ) __privileged_sram_end__ ) )
 805c9f4: 9802         	ldr	r0, [sp, #0x8]
 805c9f6: f242 317f    	movw	r1, #0x237f
 805c9fa: f2c2 0100    	movt	r1, #0x2000
;             if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 805c9fe: 4288         	cmp	r0, r1
 805ca00: d806         	bhi	0x805ca10 <vPortStoreTaskMPUSettings+0x60> @ imm = #0xc
 805ca02: e7ff         	b	0x805ca04 <vPortStoreTaskMPUSettings+0x54> @ imm = #-0x2
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = 0;
 805ca04: 9907         	ldr	r1, [sp, #0x1c]
 805ca06: 2000         	movs	r0, #0x0
 805ca08: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = 0;
 805ca0a: 9907         	ldr	r1, [sp, #0x1c]
 805ca0c: 6088         	str	r0, [r1, #0x8]
;             }
 805ca0e: e012         	b	0x805ca36 <vPortStoreTaskMPUSettings+0x86> @ imm = #0x24
;                 ulRegionStartAddress &= portMPU_RBAR_ADDRESS_MASK;
 805ca10: 9803         	ldr	r0, [sp, #0xc]
 805ca12: f020 001f    	bic	r0, r0, #0x1f
 805ca16: 9003         	str	r0, [sp, #0xc]
;                 ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 805ca18: 9802         	ldr	r0, [sp, #0x8]
 805ca1a: f020 001f    	bic	r0, r0, #0x1f
 805ca1e: 9002         	str	r0, [sp, #0x8]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
 805ca20: 9803         	ldr	r0, [sp, #0xc]
;                                                              ( portMPU_REGION_READ_WRITE ) |
 805ca22: f040 0003    	orr	r0, r0, #0x3
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
 805ca26: 9907         	ldr	r1, [sp, #0x1c]
 805ca28: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
 805ca2a: 9802         	ldr	r0, [sp, #0x8]
;                                                              ( portMPU_RLAR_ATTR_INDEX0 ) |
 805ca2c: f040 0001    	orr	r0, r0, #0x1
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
 805ca30: 9907         	ldr	r1, [sp, #0x1c]
 805ca32: 6088         	str	r0, [r1, #0x8]
 805ca34: e7ff         	b	0x805ca36 <vPortStoreTaskMPUSettings+0x86> @ imm = #-0x2
;         }
 805ca36: e7ff         	b	0x805ca38 <vPortStoreTaskMPUSettings+0x88> @ imm = #-0x2
 805ca38: 2001         	movs	r0, #0x1
;         for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 805ca3a: 9001         	str	r0, [sp, #0x4]
 805ca3c: e7ff         	b	0x805ca3e <vPortStoreTaskMPUSettings+0x8e> @ imm = #-0x2
 805ca3e: 9801         	ldr	r0, [sp, #0x4]
 805ca40: 2803         	cmp	r0, #0x3
 805ca42: f200 8090    	bhi.w	0x805cb66 <vPortStoreTaskMPUSettings+0x1b6> @ imm = #0x120
 805ca46: e7ff         	b	0x805ca48 <vPortStoreTaskMPUSettings+0x98> @ imm = #-0x2
;             if( ( xRegions != NULL ) && ( xRegions[ lIndex ].ulLengthInBytes > 0UL ) )
 805ca48: 9806         	ldr	r0, [sp, #0x18]
 805ca4a: 2800         	cmp	r0, #0x0
 805ca4c: d077         	beq	0x805cb3e <vPortStoreTaskMPUSettings+0x18e> @ imm = #0xee
 805ca4e: e7ff         	b	0x805ca50 <vPortStoreTaskMPUSettings+0xa0> @ imm = #-0x2
 805ca50: 9806         	ldr	r0, [sp, #0x18]
 805ca52: 9900         	ldr	r1, [sp]
 805ca54: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805ca58: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805ca5c: 6840         	ldr	r0, [r0, #0x4]
 805ca5e: 2800         	cmp	r0, #0x0
 805ca60: d06d         	beq	0x805cb3e <vPortStoreTaskMPUSettings+0x18e> @ imm = #0xda
 805ca62: e7ff         	b	0x805ca64 <vPortStoreTaskMPUSettings+0xb4> @ imm = #-0x2
;                 ulRegionStartAddress = ( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) & portMPU_RBAR_ADDRESS_MASK;
 805ca64: 9806         	ldr	r0, [sp, #0x18]
 805ca66: 9900         	ldr	r1, [sp]
 805ca68: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805ca6c: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 805ca70: f020 001f    	bic	r0, r0, #0x1f
 805ca74: 9003         	str	r0, [sp, #0xc]
;                 ulRegionEndAddress = ( uint32_t ) xRegions[ lIndex ].pvBaseAddress + xRegions[ lIndex ].ulLengthInBytes - 1;
 805ca76: 9806         	ldr	r0, [sp, #0x18]
 805ca78: 9900         	ldr	r1, [sp]
 805ca7a: eb01 0241    	add.w	r2, r1, r1, lsl #1
 805ca7e: eb00 0182    	add.w	r1, r0, r2, lsl #2
 805ca82: f850 0022    	ldr.w	r0, [r0, r2, lsl #2]
 805ca86: 6849         	ldr	r1, [r1, #0x4]
 805ca88: 4408         	add	r0, r1
 805ca8a: 3801         	subs	r0, #0x1
 805ca8c: 9002         	str	r0, [sp, #0x8]
;                 ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 805ca8e: 9802         	ldr	r0, [sp, #0x8]
 805ca90: f020 001f    	bic	r0, r0, #0x1f
 805ca94: 9002         	str	r0, [sp, #0x8]
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = ( ulRegionStartAddress ) |
 805ca96: 9803         	ldr	r0, [sp, #0xc]
 805ca98: 9907         	ldr	r1, [sp, #0x1c]
 805ca9a: 9a01         	ldr	r2, [sp, #0x4]
 805ca9c: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805caa0: 6048         	str	r0, [r1, #0x4]
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_READ_ONLY ) != 0 )
 805caa2: 9806         	ldr	r0, [sp, #0x18]
 805caa4: 9900         	ldr	r1, [sp]
 805caa6: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805caaa: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805caae: 7a00         	ldrb	r0, [r0, #0x8]
 805cab0: 07c0         	lsls	r0, r0, #0x1f
 805cab2: b148         	cbz	r0, 0x805cac8 <vPortStoreTaskMPUSettings+0x118> @ imm = #0x12
 805cab4: e7ff         	b	0x805cab6 <vPortStoreTaskMPUSettings+0x106> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_ONLY );
 805cab6: 9807         	ldr	r0, [sp, #0x1c]
 805cab8: 9901         	ldr	r1, [sp, #0x4]
 805caba: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805cabe: 6848         	ldr	r0, [r1, #0x4]
 805cac0: f040 0006    	orr	r0, r0, #0x6
 805cac4: 6048         	str	r0, [r1, #0x4]
;                 }
 805cac6: e008         	b	0x805cada <vPortStoreTaskMPUSettings+0x12a> @ imm = #0x10
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_WRITE );
 805cac8: 9807         	ldr	r0, [sp, #0x1c]
 805caca: 9901         	ldr	r1, [sp, #0x4]
 805cacc: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805cad0: 6848         	ldr	r0, [r1, #0x4]
 805cad2: f040 0002    	orr	r0, r0, #0x2
 805cad6: 6048         	str	r0, [r1, #0x4]
 805cad8: e7ff         	b	0x805cada <vPortStoreTaskMPUSettings+0x12a> @ imm = #-0x2
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_EXECUTE_NEVER ) != 0 )
 805cada: 9806         	ldr	r0, [sp, #0x18]
 805cadc: 9900         	ldr	r1, [sp]
 805cade: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805cae2: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805cae6: 7a00         	ldrb	r0, [r0, #0x8]
 805cae8: 0740         	lsls	r0, r0, #0x1d
 805caea: 2800         	cmp	r0, #0x0
 805caec: d509         	bpl	0x805cb02 <vPortStoreTaskMPUSettings+0x152> @ imm = #0x12
 805caee: e7ff         	b	0x805caf0 <vPortStoreTaskMPUSettings+0x140> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_EXECUTE_NEVER );
 805caf0: 9807         	ldr	r0, [sp, #0x1c]
 805caf2: 9901         	ldr	r1, [sp, #0x4]
 805caf4: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805caf8: 6848         	ldr	r0, [r1, #0x4]
 805cafa: f040 0001    	orr	r0, r0, #0x1
 805cafe: 6048         	str	r0, [r1, #0x4]
;                 }
 805cb00: e7ff         	b	0x805cb02 <vPortStoreTaskMPUSettings+0x152> @ imm = #-0x2
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = ( ulRegionEndAddress ) |
 805cb02: 9802         	ldr	r0, [sp, #0x8]
 805cb04: f040 0001    	orr	r0, r0, #0x1
 805cb08: 9907         	ldr	r1, [sp, #0x1c]
 805cb0a: 9a01         	ldr	r2, [sp, #0x4]
 805cb0c: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cb10: 6088         	str	r0, [r1, #0x8]
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_DEVICE_MEMORY ) != 0 )
 805cb12: 9806         	ldr	r0, [sp, #0x18]
 805cb14: 9900         	ldr	r1, [sp]
 805cb16: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805cb1a: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805cb1e: 7a00         	ldrb	r0, [r0, #0x8]
 805cb20: 06c0         	lsls	r0, r0, #0x1b
 805cb22: 2800         	cmp	r0, #0x0
 805cb24: d509         	bpl	0x805cb3a <vPortStoreTaskMPUSettings+0x18a> @ imm = #0x12
 805cb26: e7ff         	b	0x805cb28 <vPortStoreTaskMPUSettings+0x178> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR |= portMPU_RLAR_ATTR_INDEX1;
 805cb28: 9807         	ldr	r0, [sp, #0x1c]
 805cb2a: 9901         	ldr	r1, [sp, #0x4]
 805cb2c: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805cb30: 6888         	ldr	r0, [r1, #0x8]
 805cb32: f040 0002    	orr	r0, r0, #0x2
 805cb36: 6088         	str	r0, [r1, #0x8]
;                 }
 805cb38: e000         	b	0x805cb3c <vPortStoreTaskMPUSettings+0x18c> @ imm = #0x0
 805cb3a: e7ff         	b	0x805cb3c <vPortStoreTaskMPUSettings+0x18c> @ imm = #-0x2
;             }
 805cb3c: e00b         	b	0x805cb56 <vPortStoreTaskMPUSettings+0x1a6> @ imm = #0x16
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = 0UL;
 805cb3e: 9807         	ldr	r0, [sp, #0x1c]
 805cb40: 9901         	ldr	r1, [sp, #0x4]
 805cb42: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805cb46: 2000         	movs	r0, #0x0
 805cb48: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = 0UL;
 805cb4a: 9907         	ldr	r1, [sp, #0x1c]
 805cb4c: 9a01         	ldr	r2, [sp, #0x4]
 805cb4e: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cb52: 6088         	str	r0, [r1, #0x8]
 805cb54: e7ff         	b	0x805cb56 <vPortStoreTaskMPUSettings+0x1a6> @ imm = #-0x2
;             lIndex++;
 805cb56: 9800         	ldr	r0, [sp]
 805cb58: 3001         	adds	r0, #0x1
 805cb5a: 9000         	str	r0, [sp]
;         }
 805cb5c: e7ff         	b	0x805cb5e <vPortStoreTaskMPUSettings+0x1ae> @ imm = #-0x2
;         for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 805cb5e: 9801         	ldr	r0, [sp, #0x4]
 805cb60: 3001         	adds	r0, #0x1
 805cb62: 9001         	str	r0, [sp, #0x4]
 805cb64: e76b         	b	0x805ca3e <vPortStoreTaskMPUSettings+0x8e> @ imm = #-0x12a
;     }
 805cb66: b008         	add	sp, #0x20
 805cb68: 4770         	bx	lr
 805cb6a: bf00         	nop

0805cb6c <xPortIsAuthorizedToAccessBuffer>:
;     {
 805cb6c: b580         	push	{r7, lr}
 805cb6e: 466f         	mov	r7, sp
 805cb70: b088         	sub	sp, #0x20
 805cb72: 9007         	str	r0, [sp, #0x1c]
 805cb74: 9106         	str	r1, [sp, #0x18]
 805cb76: 9205         	str	r2, [sp, #0x14]
 805cb78: 2000         	movs	r0, #0x0
;         BaseType_t xAccessGranted = pdFALSE;
 805cb7a: 9001         	str	r0, [sp, #0x4]
;         const xMPU_SETTINGS * xTaskMpuSettings = xTaskGetMPUSettings( NULL ); /* Calling task's MPU settings. */
 805cb7c: 4937         	ldr	r1, [pc, #0xdc]         @ 0x805cc5c <xPortIsAuthorizedToAccessBuffer+0xf0>
 805cb7e: 4788         	blx	r1
 805cb80: 9000         	str	r0, [sp]
;         if( ( xTaskMpuSettings->ulTaskFlags & portTASK_IS_PRIVILEGED_FLAG ) == portTASK_IS_PRIVILEGED_FLAG )
 805cb82: 9800         	ldr	r0, [sp]
 805cb84: f890 0078    	ldrb.w	r0, [r0, #0x78]
 805cb88: 0780         	lsls	r0, r0, #0x1e
 805cb8a: 2800         	cmp	r0, #0x0
 805cb8c: d503         	bpl	0x805cb96 <xPortIsAuthorizedToAccessBuffer+0x2a> @ imm = #0x6
 805cb8e: e7ff         	b	0x805cb90 <xPortIsAuthorizedToAccessBuffer+0x24> @ imm = #-0x2
 805cb90: 2001         	movs	r0, #0x1
;             xAccessGranted = pdTRUE;
 805cb92: 9001         	str	r0, [sp, #0x4]
;         }
 805cb94: e05e         	b	0x805cc54 <xPortIsAuthorizedToAccessBuffer+0xe8> @ imm = #0xbc
;             if( portADD_UINT32_WILL_OVERFLOW( ( ( uint32_t ) pvBuffer ), ( ulBufferLength - 1UL ) ) == pdFALSE )
 805cb96: 9807         	ldr	r0, [sp, #0x1c]
 805cb98: 9906         	ldr	r1, [sp, #0x18]
 805cb9a: 4249         	rsbs	r1, r1, #0
 805cb9c: 4288         	cmp	r0, r1
 805cb9e: d858         	bhi	0x805cc52 <xPortIsAuthorizedToAccessBuffer+0xe6> @ imm = #0xb0
 805cba0: e7ff         	b	0x805cba2 <xPortIsAuthorizedToAccessBuffer+0x36> @ imm = #-0x2
;                 ulBufferStartAddress = ( uint32_t ) pvBuffer;
 805cba2: 9807         	ldr	r0, [sp, #0x1c]
 805cba4: 9003         	str	r0, [sp, #0xc]
;                 ulBufferEndAddress = ( ( ( uint32_t ) pvBuffer ) + ulBufferLength - 1UL );
 805cba6: 9807         	ldr	r0, [sp, #0x1c]
 805cba8: 9906         	ldr	r1, [sp, #0x18]
 805cbaa: 4408         	add	r0, r1
 805cbac: 3801         	subs	r0, #0x1
 805cbae: 9002         	str	r0, [sp, #0x8]
 805cbb0: 2000         	movs	r0, #0x0
;                 for( i = 0; i < portTOTAL_NUM_REGIONS; i++ )
 805cbb2: 9004         	str	r0, [sp, #0x10]
 805cbb4: e7ff         	b	0x805cbb6 <xPortIsAuthorizedToAccessBuffer+0x4a> @ imm = #-0x2
 805cbb6: 9804         	ldr	r0, [sp, #0x10]
 805cbb8: 2803         	cmp	r0, #0x3
 805cbba: d849         	bhi	0x805cc50 <xPortIsAuthorizedToAccessBuffer+0xe4> @ imm = #0x92
 805cbbc: e7ff         	b	0x805cbbe <xPortIsAuthorizedToAccessBuffer+0x52> @ imm = #-0x2
;                     if( ( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR & portMPU_RLAR_REGION_ENABLE ) == portMPU_RLAR_REGION_ENABLE )
 805cbbe: 9800         	ldr	r0, [sp]
 805cbc0: 9904         	ldr	r1, [sp, #0x10]
 805cbc2: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805cbc6: 7a00         	ldrb	r0, [r0, #0x8]
 805cbc8: 07c0         	lsls	r0, r0, #0x1f
 805cbca: b3e0         	cbz	r0, 0x805cc46 <xPortIsAuthorizedToAccessBuffer+0xda> @ imm = #0x78
 805cbcc: e7ff         	b	0x805cbce <xPortIsAuthorizedToAccessBuffer+0x62> @ imm = #-0x2
;                         if( portIS_ADDRESS_WITHIN_RANGE( ulBufferStartAddress,
 805cbce: 9803         	ldr	r0, [sp, #0xc]
 805cbd0: 9900         	ldr	r1, [sp]
 805cbd2: 9a04         	ldr	r2, [sp, #0x10]
 805cbd4: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cbd8: 6849         	ldr	r1, [r1, #0x4]
 805cbda: f021 011f    	bic	r1, r1, #0x1f
 805cbde: 4288         	cmp	r0, r1
 805cbe0: d330         	blo	0x805cc44 <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x60
 805cbe2: e7ff         	b	0x805cbe4 <xPortIsAuthorizedToAccessBuffer+0x78> @ imm = #-0x2
 805cbe4: 9803         	ldr	r0, [sp, #0xc]
 805cbe6: 9900         	ldr	r1, [sp]
 805cbe8: 9a04         	ldr	r2, [sp, #0x10]
 805cbea: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cbee: 6889         	ldr	r1, [r1, #0x8]
 805cbf0: f041 011f    	orr	r1, r1, #0x1f
;                                                          portEXTRACT_LAST_ADDRESS_FROM_RLAR( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR ) ) &&
 805cbf4: 4288         	cmp	r0, r1
 805cbf6: d825         	bhi	0x805cc44 <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x4a
 805cbf8: e7ff         	b	0x805cbfa <xPortIsAuthorizedToAccessBuffer+0x8e> @ imm = #-0x2
;                             portIS_ADDRESS_WITHIN_RANGE( ulBufferEndAddress,
 805cbfa: 9802         	ldr	r0, [sp, #0x8]
 805cbfc: 9900         	ldr	r1, [sp]
 805cbfe: 9a04         	ldr	r2, [sp, #0x10]
 805cc00: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cc04: 6849         	ldr	r1, [r1, #0x4]
 805cc06: f021 011f    	bic	r1, r1, #0x1f
 805cc0a: 4288         	cmp	r0, r1
 805cc0c: d31a         	blo	0x805cc44 <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x34
 805cc0e: e7ff         	b	0x805cc10 <xPortIsAuthorizedToAccessBuffer+0xa4> @ imm = #-0x2
 805cc10: 9802         	ldr	r0, [sp, #0x8]
 805cc12: 9900         	ldr	r1, [sp]
 805cc14: 9a04         	ldr	r2, [sp, #0x10]
 805cc16: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cc1a: 6889         	ldr	r1, [r1, #0x8]
 805cc1c: f041 011f    	orr	r1, r1, #0x1f
;                                                          portEXTRACT_LAST_ADDRESS_FROM_RLAR( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR ) ) &&
 805cc20: 4288         	cmp	r0, r1
 805cc22: d80f         	bhi	0x805cc44 <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x1e
 805cc24: e7ff         	b	0x805cc26 <xPortIsAuthorizedToAccessBuffer+0xba> @ imm = #-0x2
;                             portIS_AUTHORIZED( ulAccessRequested,
 805cc26: 9800         	ldr	r0, [sp]
 805cc28: 9904         	ldr	r1, [sp, #0x10]
 805cc2a: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805cc2e: 6840         	ldr	r0, [r0, #0x4]
 805cc30: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805cc60 <xPortIsAuthorizedToAccessBuffer+0xf4>
 805cc32: 4788         	blx	r1
 805cc34: 9905         	ldr	r1, [sp, #0x14]
 805cc36: 4008         	ands	r0, r1
;                         if( portIS_ADDRESS_WITHIN_RANGE( ulBufferStartAddress,
 805cc38: 4288         	cmp	r0, r1
 805cc3a: d103         	bne	0x805cc44 <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x6
 805cc3c: e7ff         	b	0x805cc3e <xPortIsAuthorizedToAccessBuffer+0xd2> @ imm = #-0x2
 805cc3e: 2001         	movs	r0, #0x1
;                             xAccessGranted = pdTRUE;
 805cc40: 9001         	str	r0, [sp, #0x4]
;                             break;
 805cc42: e005         	b	0x805cc50 <xPortIsAuthorizedToAccessBuffer+0xe4> @ imm = #0xa
;                     }
 805cc44: e7ff         	b	0x805cc46 <xPortIsAuthorizedToAccessBuffer+0xda> @ imm = #-0x2
;                 }
 805cc46: e7ff         	b	0x805cc48 <xPortIsAuthorizedToAccessBuffer+0xdc> @ imm = #-0x2
;                 for( i = 0; i < portTOTAL_NUM_REGIONS; i++ )
 805cc48: 9804         	ldr	r0, [sp, #0x10]
 805cc4a: 3001         	adds	r0, #0x1
 805cc4c: 9004         	str	r0, [sp, #0x10]
 805cc4e: e7b2         	b	0x805cbb6 <xPortIsAuthorizedToAccessBuffer+0x4a> @ imm = #-0x9c
;             }
 805cc50: e7ff         	b	0x805cc52 <xPortIsAuthorizedToAccessBuffer+0xe6> @ imm = #-0x2
 805cc52: e7ff         	b	0x805cc54 <xPortIsAuthorizedToAccessBuffer+0xe8> @ imm = #-0x2
;         return xAccessGranted;
 805cc54: 9801         	ldr	r0, [sp, #0x4]
 805cc56: b008         	add	sp, #0x20
 805cc58: bd80         	pop	{r7, pc}
 805cc5a: bf00         	nop

0805cc5c <$d.19>:
 805cc5c: 45 84 05 08  	.word	0x08058445
 805cc60: 65 cc 05 08  	.word	0x0805cc65

0805cc64 <prvGetRegionAccessPermissions>:
;     {
 805cc64: b082         	sub	sp, #0x8
 805cc66: 9001         	str	r0, [sp, #0x4]
 805cc68: 2000         	movs	r0, #0x0
;         uint32_t ulAccessPermissions = 0;
 805cc6a: 9000         	str	r0, [sp]
;         if( ( ulRBARValue & portMPU_RBAR_ACCESS_PERMISSIONS_MASK ) == portMPU_REGION_READ_ONLY )
 805cc6c: 9801         	ldr	r0, [sp, #0x4]
 805cc6e: f000 0006    	and	r0, r0, #0x6
 805cc72: 2806         	cmp	r0, #0x6
 805cc74: d103         	bne	0x805cc7e <prvGetRegionAccessPermissions+0x1a> @ imm = #0x6
 805cc76: e7ff         	b	0x805cc78 <prvGetRegionAccessPermissions+0x14> @ imm = #-0x2
 805cc78: 2001         	movs	r0, #0x1
;             ulAccessPermissions = tskMPU_READ_PERMISSION;
 805cc7a: 9000         	str	r0, [sp]
;         }
 805cc7c: e7ff         	b	0x805cc7e <prvGetRegionAccessPermissions+0x1a> @ imm = #-0x2
;         if( ( ulRBARValue & portMPU_RBAR_ACCESS_PERMISSIONS_MASK ) == portMPU_REGION_READ_WRITE )
 805cc7e: 9801         	ldr	r0, [sp, #0x4]
 805cc80: f000 0006    	and	r0, r0, #0x6
 805cc84: 2802         	cmp	r0, #0x2
 805cc86: d103         	bne	0x805cc90 <prvGetRegionAccessPermissions+0x2c> @ imm = #0x6
 805cc88: e7ff         	b	0x805cc8a <prvGetRegionAccessPermissions+0x26> @ imm = #-0x2
 805cc8a: 2003         	movs	r0, #0x3
;             ulAccessPermissions = ( tskMPU_READ_PERMISSION | tskMPU_WRITE_PERMISSION );
 805cc8c: 9000         	str	r0, [sp]
;         }
 805cc8e: e7ff         	b	0x805cc90 <prvGetRegionAccessPermissions+0x2c> @ imm = #-0x2
;         return ulAccessPermissions;
 805cc90: 9800         	ldr	r0, [sp]
 805cc92: b002         	add	sp, #0x8
 805cc94: 4770         	bx	lr
		...
 805cc9e: 0000         	movs	r0, r0

0805cca0 <vRestoreContextOfFirstTask>:
;         __asm volatile
 805cca0: 4a1b         	ldr	r2, [pc, #0x6c]         @ 0x805cd10 <pxCurrentTCBConst2>
 805cca2: 6810         	ldr	r0, [r2]
 805cca4: f3bf 8f5f    	dmb	sy
 805cca8: 491a         	ldr	r1, [pc, #0x68]         @ 0x805cd14 <xMPUCTRLConst2>
 805ccaa: 680a         	ldr	r2, [r1]
 805ccac: f022 0201    	bic	r2, r2, #0x1
 805ccb0: 600a         	str	r2, [r1]
 805ccb2: 3004         	adds	r0, #0x4
 805ccb4: 6801         	ldr	r1, [r0]
 805ccb6: 4a18         	ldr	r2, [pc, #0x60]         @ 0x805cd18 <xMAIR0Const2>
 805ccb8: 6011         	str	r1, [r2]
 805ccba: 3004         	adds	r0, #0x4
 805ccbc: 4917         	ldr	r1, [pc, #0x5c]         @ 0x805cd1c <xRNRConst2>
 805ccbe: 4a18         	ldr	r2, [pc, #0x60]         @ 0x805cd20 <xRBARConst2>
 805ccc0: 2304         	movs	r3, #0x4
 805ccc2: 600b         	str	r3, [r1]
 805ccc4: e8b0 0ff0    	ldm.w	r0!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ccc8: e882 0ff0    	stm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805cccc: 4911         	ldr	r1, [pc, #0x44]         @ 0x805cd14 <xMPUCTRLConst2>
 805ccce: 680a         	ldr	r2, [r1]
 805ccd0: f042 0201    	orr	r2, r2, #0x1
 805ccd4: 600a         	str	r2, [r1]
 805ccd6: f3bf 8f4f    	dsb	sy

0805ccda <restore_context_first_task>:
 805ccda: 4a0d         	ldr	r2, [pc, #0x34]         @ 0x805cd10 <pxCurrentTCBConst2>
 805ccdc: 6810         	ldr	r0, [r2]
 805ccde: 6801         	ldr	r1, [r0]

0805cce0 <restore_special_regs_first_task>:
 805cce0: e931 401c    	ldmdb	r1!, {r2, r3, r4, lr}
 805cce4: f382 8809    	msr	psp, r2
 805cce8: f383 880b    	msr	psplim, r3
 805ccec: f384 8814    	msr	control, r4

0805ccf0 <restore_general_regs_first_task>:
 805ccf0: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ccf4: e8a2 0ff0    	stm.w	r2!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ccf8: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805ccfc <restore_context_done_first_task>:
 805ccfc: 6001         	str	r1, [r0]
 805ccfe: f04f 0000    	mov.w	r0, #0x0
 805cd02: f380 8811    	msr	basepri, r0
 805cd06: 4770         	bx	lr
 805cd08: bf00         	nop
 805cd0a: bf00         	nop
 805cd0c: bf00         	nop
 805cd0e: bf00         	nop

0805cd10 <pxCurrentTCBConst2>:
 805cd10: 00 01 00 20  	.word	0x20000100

0805cd14 <xMPUCTRLConst2>:
 805cd14: 94 ed 00 e0  	.word	0xe000ed94

0805cd18 <xMAIR0Const2>:
 805cd18: c0 ed 00 e0  	.word	0xe000edc0

0805cd1c <xRNRConst2>:
 805cd1c: 98 ed 00 e0  	.word	0xe000ed98

0805cd20 <xRBARConst2>:
 805cd20: 9c ed 00 e0  	.word	0xe000ed9c

0805cd24 <vRaisePrivilege>:
;     __asm volatile
 805cd24: f3ef 8014    	mrs	r0, control
 805cd28: f020 0001    	bic	r0, r0, #0x1
 805cd2c: f380 8814    	msr	control, r0
 805cd30: 4770         	bx	lr

0805cd32 <vStartFirstTask>:
;     __asm volatile
 805cd32: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805cd50 <xVTORConst>
 805cd34: 6800         	ldr	r0, [r0]
 805cd36: 6800         	ldr	r0, [r0]
 805cd38: f380 8808    	msr	msp, r0
 805cd3c: b662         	cpsie i
 805cd3e: b661         	cpsie f
 805cd40: f3bf 8f4f    	dsb	sy
 805cd44: f3bf 8f6f    	isb	sy
 805cd48: df02         	svc	#0x2
 805cd4a: bf00         	nop
 805cd4c: bf00         	nop
 805cd4e: bf00         	nop

0805cd50 <xVTORConst>:
 805cd50: 08 ed 00 e0  	.word	0xe000ed08

0805cd54 <ulSetInterruptMask>:
;     __asm volatile
 805cd54: f3ef 8011    	mrs	r0, basepri
 805cd58: f04f 01a0    	mov.w	r1, #0xa0
 805cd5c: f381 8811    	msr	basepri, r1
 805cd60: f3bf 8f4f    	dsb	sy
 805cd64: f3bf 8f6f    	isb	sy
 805cd68: 4770         	bx	lr

0805cd6a <vClearInterruptMask>:
;     __asm volatile
 805cd6a: f380 8811    	msr	basepri, r0
 805cd6e: f3bf 8f4f    	dsb	sy
 805cd72: f3bf 8f6f    	isb	sy
 805cd76: 4770         	bx	lr

0805cd78 <PendSV_Handler>:
;         __asm volatile
 805cd78: 4a29         	ldr	r2, [pc, #0xa4]         @ 0x805ce20 <pxCurrentTCBConst>
 805cd7a: 6810         	ldr	r0, [r2]
 805cd7c: 6801         	ldr	r1, [r0]
 805cd7e: f3ef 8209    	mrs	r2, psp

0805cd82 <save_general_regs>:
 805cd82: e8a1 0ff0    	stm.w	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805cd86: e892 0ff0    	ldm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805cd8a: e8a1 0ff0    	stm.w	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805cd8e <save_special_regs>:
 805cd8e: f3ef 830b    	mrs	r3, psplim
 805cd92: f3ef 8414    	mrs	r4, control
 805cd96: e8a1 401c    	stm.w	r1!, {r2, r3, r4, lr}
 805cd9a: 6001         	str	r1, [r0]

0805cd9c <select_next_task>:
 805cd9c: f04f 00a0    	mov.w	r0, #0xa0
 805cda0: f380 8811    	msr	basepri, r0
 805cda4: f3bf 8f4f    	dsb	sy
 805cda8: f3bf 8f6f    	isb	sy
 805cdac: f7f9 fa48    	bl	0x8056240 <vTaskSwitchContext> @ imm = #-0x6b70
 805cdb0: f04f 0000    	mov.w	r0, #0x0
 805cdb4: f380 8811    	msr	basepri, r0

0805cdb8 <program_mpu>:
 805cdb8: 4a19         	ldr	r2, [pc, #0x64]         @ 0x805ce20 <pxCurrentTCBConst>
 805cdba: 6810         	ldr	r0, [r2]
 805cdbc: f3bf 8f5f    	dmb	sy
 805cdc0: 4918         	ldr	r1, [pc, #0x60]         @ 0x805ce24 <xMPUCTRLConst>
 805cdc2: 680a         	ldr	r2, [r1]
 805cdc4: f022 0201    	bic	r2, r2, #0x1
 805cdc8: 600a         	str	r2, [r1]
 805cdca: 3004         	adds	r0, #0x4
 805cdcc: 6801         	ldr	r1, [r0]
 805cdce: 4a16         	ldr	r2, [pc, #0x58]         @ 0x805ce28 <xMAIR0Const>
 805cdd0: 6011         	str	r1, [r2]
 805cdd2: 3004         	adds	r0, #0x4
 805cdd4: 4915         	ldr	r1, [pc, #0x54]         @ 0x805ce2c <xRNRConst>
 805cdd6: 4a16         	ldr	r2, [pc, #0x58]         @ 0x805ce30 <xRBARConst>
 805cdd8: 2304         	movs	r3, #0x4
 805cdda: 600b         	str	r3, [r1]
 805cddc: e8b0 0ff0    	ldm.w	r0!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805cde0: e882 0ff0    	stm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805cde4: 490f         	ldr	r1, [pc, #0x3c]         @ 0x805ce24 <xMPUCTRLConst>
 805cde6: 680a         	ldr	r2, [r1]
 805cde8: f042 0201    	orr	r2, r2, #0x1
 805cdec: 600a         	str	r2, [r1]
 805cdee: f3bf 8f4f    	dsb	sy

0805cdf2 <restore_context>:
 805cdf2: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805ce20 <pxCurrentTCBConst>
 805cdf4: 6810         	ldr	r0, [r2]
 805cdf6: 6801         	ldr	r1, [r0]

0805cdf8 <restore_special_regs>:
 805cdf8: e931 401c    	ldmdb	r1!, {r2, r3, r4, lr}
 805cdfc: f382 8809    	msr	psp, r2
 805ce00: f383 880b    	msr	psplim, r3
 805ce04: f384 8814    	msr	control, r4

0805ce08 <restore_general_regs>:
 805ce08: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ce0c: e8a2 0ff0    	stm.w	r2!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ce10: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805ce14 <restore_context_done>:
 805ce14: 6001         	str	r1, [r0]
 805ce16: 4770         	bx	lr
 805ce18: bf00         	nop
 805ce1a: bf00         	nop
 805ce1c: bf00         	nop
 805ce1e: bf00         	nop

0805ce20 <pxCurrentTCBConst>:
 805ce20: 00 01 00 20  	.word	0x20000100

0805ce24 <xMPUCTRLConst>:
 805ce24: 94 ed 00 e0  	.word	0xe000ed94

0805ce28 <xMAIR0Const>:
 805ce28: c0 ed 00 e0  	.word	0xe000edc0

0805ce2c <xRNRConst>:
 805ce2c: 98 ed 00 e0  	.word	0xe000ed98

0805ce30 <xRBARConst>:
 805ce30: 9c ed 00 e0  	.word	0xe000ed9c

0805ce34 <SVC_Handler>:
;         __asm volatile
 805ce34: f01e 0f04    	tst.w	lr, #0x4
 805ce38: bf0c         	ite	eq
 805ce3a: f3ef 8008    	mrseq	r0, msp
 805ce3e: f3ef 8009    	mrsne	r0, psp
 805ce42: 4903         	ldr	r1, [pc, #0xc]          @ 0x805ce50 <svchandler_address_const>
 805ce44: 4708         	bx	r1
 805ce46: bf00         	nop
 805ce48: bf00         	nop
 805ce4a: bf00         	nop
 805ce4c: bf00         	nop
 805ce4e: bf00         	nop

0805ce50 <svchandler_address_const>:
 805ce50: b9 c4 05 08  	.word	0x0805c4b9
 805ce54: 00 00 00 00  	.word	0x00000000
 805ce58: 00 00 00 00  	.word	0x00000000
 805ce5c: 00 00        	.short	0x0000
 805ce5e: 00           	.byte	0x00

0805ce5f <__privileged_functions_end__>:
 805ce5f: 00           	.byte	0x00

Disassembly of section .freertos_system_calls:

0805ce60 <__syscalls_flash_start__>:
;         {
 805ce60: b580         	push	{r7, lr}
 805ce62: 466f         	mov	r7, sp
 805ce64: b084         	sub	sp, #0x10
 805ce66: 9003         	str	r0, [sp, #0xc]
 805ce68: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ce6a: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805ce98 <__syscalls_flash_start__+0x38>
 805ce6c: 4780         	blx	r0
 805ce6e: b948         	cbnz	r0, 0x805ce84 <__syscalls_flash_start__+0x24> @ imm = #0x12
 805ce70: e7ff         	b	0x805ce72 <__syscalls_flash_start__+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ce72: df03         	svc	#0x3
;                 xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 805ce74: 9803         	ldr	r0, [sp, #0xc]
 805ce76: 9902         	ldr	r1, [sp, #0x8]
 805ce78: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805cea0 <__syscalls_flash_start__+0x40>
 805ce7a: 4790         	blx	r2
 805ce7c: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805ce7e: 4809         	ldr	r0, [pc, #0x24]         @ 0x805cea4 <__syscalls_flash_start__+0x44>
 805ce80: 4780         	blx	r0
;             }
 805ce82: e005         	b	0x805ce90 <__syscalls_flash_start__+0x30> @ imm = #0xa
;                 xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 805ce84: 9803         	ldr	r0, [sp, #0xc]
 805ce86: 9902         	ldr	r1, [sp, #0x8]
 805ce88: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805ce9c <__syscalls_flash_start__+0x3c>
 805ce8a: 4790         	blx	r2
 805ce8c: 9001         	str	r0, [sp, #0x4]
 805ce8e: e7ff         	b	0x805ce90 <__syscalls_flash_start__+0x30> @ imm = #-0x2
;             return xReturn;
 805ce90: 9801         	ldr	r0, [sp, #0x4]
 805ce92: b004         	add	sp, #0x10
 805ce94: bd80         	pop	{r7, pc}
 805ce96: bf00         	nop

0805ce98 <$d.5>:
 805ce98: c1 ea 05 08  	.word	0x0805eac1
 805ce9c: 5d 57 05 08  	.word	0x0805575d
 805cea0: 5d 57 05 08  	.word	0x0805575d
 805cea4: d1 ea 05 08  	.word	0x0805ead1

0805cea8 <MPU_vTaskDelay>:
;         {
 805cea8: b580         	push	{r7, lr}
 805ceaa: 466f         	mov	r7, sp
 805ceac: b082         	sub	sp, #0x8
 805ceae: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ceb0: 4808         	ldr	r0, [pc, #0x20]         @ 0x805ced4 <MPU_vTaskDelay+0x2c>
 805ceb2: 4780         	blx	r0
 805ceb4: b938         	cbnz	r0, 0x805cec6 <MPU_vTaskDelay+0x1e> @ imm = #0xe
 805ceb6: e7ff         	b	0x805ceb8 <MPU_vTaskDelay+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ceb8: df03         	svc	#0x3
;                 vTaskDelay( xTicksToDelay );
 805ceba: 9801         	ldr	r0, [sp, #0x4]
 805cebc: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805cedc <MPU_vTaskDelay+0x34>
 805cebe: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805cec0: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805cee0 <MPU_vTaskDelay+0x38>
 805cec2: 4780         	blx	r0
;             }
 805cec4: e003         	b	0x805cece <MPU_vTaskDelay+0x26> @ imm = #0x6
;                 vTaskDelay( xTicksToDelay );
 805cec6: 9801         	ldr	r0, [sp, #0x4]
 805cec8: 4903         	ldr	r1, [pc, #0xc]          @ 0x805ced8 <MPU_vTaskDelay+0x30>
 805ceca: 4788         	blx	r1
 805cecc: e7ff         	b	0x805cece <MPU_vTaskDelay+0x26> @ imm = #-0x2
;         }
 805cece: b002         	add	sp, #0x8
 805ced0: bd80         	pop	{r7, pc}
 805ced2: bf00         	nop

0805ced4 <$d.7>:
 805ced4: c1 ea 05 08  	.word	0x0805eac1
 805ced8: 09 5c 05 08  	.word	0x08055c09
 805cedc: 09 5c 05 08  	.word	0x08055c09
 805cee0: d1 ea 05 08  	.word	0x0805ead1

0805cee4 <MPU_uxTaskPriorityGet>:
;         {
 805cee4: b580         	push	{r7, lr}
 805cee6: 466f         	mov	r7, sp
 805cee8: b082         	sub	sp, #0x8
 805ceea: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ceec: 4809         	ldr	r0, [pc, #0x24]         @ 0x805cf14 <MPU_uxTaskPriorityGet+0x30>
 805ceee: 4780         	blx	r0
 805cef0: b940         	cbnz	r0, 0x805cf04 <MPU_uxTaskPriorityGet+0x20> @ imm = #0x10
 805cef2: e7ff         	b	0x805cef4 <MPU_uxTaskPriorityGet+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805cef4: df03         	svc	#0x3
;                 uxReturn = uxTaskPriorityGet( pxTask );
 805cef6: 9801         	ldr	r0, [sp, #0x4]
 805cef8: 4908         	ldr	r1, [pc, #0x20]         @ 0x805cf1c <MPU_uxTaskPriorityGet+0x38>
 805cefa: 4788         	blx	r1
 805cefc: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805cefe: 4808         	ldr	r0, [pc, #0x20]         @ 0x805cf20 <MPU_uxTaskPriorityGet+0x3c>
 805cf00: 4780         	blx	r0
;             }
 805cf02: e004         	b	0x805cf0e <MPU_uxTaskPriorityGet+0x2a> @ imm = #0x8
;                 uxReturn = uxTaskPriorityGet( pxTask );
 805cf04: 9801         	ldr	r0, [sp, #0x4]
 805cf06: 4904         	ldr	r1, [pc, #0x10]         @ 0x805cf18 <MPU_uxTaskPriorityGet+0x34>
 805cf08: 4788         	blx	r1
 805cf0a: 9000         	str	r0, [sp]
 805cf0c: e7ff         	b	0x805cf0e <MPU_uxTaskPriorityGet+0x2a> @ imm = #-0x2
;             return uxReturn;
 805cf0e: 9800         	ldr	r0, [sp]
 805cf10: b002         	add	sp, #0x8
 805cf12: bd80         	pop	{r7, pc}

0805cf14 <$d.9>:
 805cf14: c1 ea 05 08  	.word	0x0805eac1
 805cf18: a9 5d 05 08  	.word	0x08055da9
 805cf1c: a9 5d 05 08  	.word	0x08055da9
 805cf20: d1 ea 05 08  	.word	0x0805ead1

0805cf24 <MPU_eTaskGetState>:
;         {
 805cf24: b580         	push	{r7, lr}
 805cf26: 466f         	mov	r7, sp
 805cf28: b082         	sub	sp, #0x8
 805cf2a: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805cf2c: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805cf5c <MPU_eTaskGetState+0x38>
 805cf2e: 4780         	blx	r0
 805cf30: b948         	cbnz	r0, 0x805cf46 <MPU_eTaskGetState+0x22> @ imm = #0x12
 805cf32: e7ff         	b	0x805cf34 <MPU_eTaskGetState+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805cf34: df03         	svc	#0x3
;                 eReturn = eTaskGetState( pxTask );
 805cf36: 9801         	ldr	r0, [sp, #0x4]
 805cf38: 490a         	ldr	r1, [pc, #0x28]         @ 0x805cf64 <MPU_eTaskGetState+0x40>
 805cf3a: 4788         	blx	r1
 805cf3c: f807 0c05    	strb	r0, [r7, #-5]
;                 portRESET_PRIVILEGE();
 805cf40: 4809         	ldr	r0, [pc, #0x24]         @ 0x805cf68 <MPU_eTaskGetState+0x44>
 805cf42: 4780         	blx	r0
;             }
 805cf44: e005         	b	0x805cf52 <MPU_eTaskGetState+0x2e> @ imm = #0xa
;                 eReturn = eTaskGetState( pxTask );
 805cf46: 9801         	ldr	r0, [sp, #0x4]
 805cf48: 4905         	ldr	r1, [pc, #0x14]         @ 0x805cf60 <MPU_eTaskGetState+0x3c>
 805cf4a: 4788         	blx	r1
 805cf4c: f807 0c05    	strb	r0, [r7, #-5]
 805cf50: e7ff         	b	0x805cf52 <MPU_eTaskGetState+0x2e> @ imm = #-0x2
;             return eReturn;
 805cf52: f817 0c05    	ldrb	r0, [r7, #-5]
 805cf56: b002         	add	sp, #0x8
 805cf58: bd80         	pop	{r7, pc}
 805cf5a: bf00         	nop

0805cf5c <$d.13>:
 805cf5c: c1 ea 05 08  	.word	0x0805eac1
 805cf60: 71 5c 05 08  	.word	0x08055c71
 805cf64: 71 5c 05 08  	.word	0x08055c71
 805cf68: d1 ea 05 08  	.word	0x0805ead1

0805cf6c <MPU_vTaskGetInfo>:
;         {
 805cf6c: b580         	push	{r7, lr}
 805cf6e: 466f         	mov	r7, sp
 805cf70: b084         	sub	sp, #0x10
 805cf72: 9003         	str	r0, [sp, #0xc]
 805cf74: 9102         	str	r1, [sp, #0x8]
 805cf76: 9201         	str	r2, [sp, #0x4]
 805cf78: f807 3c0d    	strb	r3, [r7, #-13]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805cf7c: 480d         	ldr	r0, [pc, #0x34]         @ 0x805cfb4 <MPU_vTaskGetInfo+0x48>
 805cf7e: 4780         	blx	r0
 805cf80: b960         	cbnz	r0, 0x805cf9c <MPU_vTaskGetInfo+0x30> @ imm = #0x18
 805cf82: e7ff         	b	0x805cf84 <MPU_vTaskGetInfo+0x18> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805cf84: df03         	svc	#0x3
;                 vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 805cf86: 9803         	ldr	r0, [sp, #0xc]
 805cf88: 9902         	ldr	r1, [sp, #0x8]
 805cf8a: 9a01         	ldr	r2, [sp, #0x4]
 805cf8c: f817 3c0d    	ldrb	r3, [r7, #-13]
 805cf90: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x805cfbc <MPU_vTaskGetInfo+0x50>
 805cf94: 47e0         	blx	r12
;                 portRESET_PRIVILEGE();
 805cf96: 480a         	ldr	r0, [pc, #0x28]         @ 0x805cfc0 <MPU_vTaskGetInfo+0x54>
 805cf98: 4780         	blx	r0
;             }
 805cf9a: e008         	b	0x805cfae <MPU_vTaskGetInfo+0x42> @ imm = #0x10
;                 vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 805cf9c: 9803         	ldr	r0, [sp, #0xc]
 805cf9e: 9902         	ldr	r1, [sp, #0x8]
 805cfa0: 9a01         	ldr	r2, [sp, #0x4]
 805cfa2: f817 3c0d    	ldrb	r3, [r7, #-13]
 805cfa6: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x805cfb8 <MPU_vTaskGetInfo+0x4c>
 805cfaa: 47e0         	blx	r12
 805cfac: e7ff         	b	0x805cfae <MPU_vTaskGetInfo+0x42> @ imm = #-0x2
;         }
 805cfae: b004         	add	sp, #0x10
 805cfb0: bd80         	pop	{r7, pc}
 805cfb2: bf00         	nop

0805cfb4 <$d.15>:
 805cfb4: c1 ea 05 08  	.word	0x0805eac1
 805cfb8: dd 72 05 08  	.word	0x080572dd
 805cfbc: dd 72 05 08  	.word	0x080572dd
 805cfc0: d1 ea 05 08  	.word	0x0805ead1

0805cfc4 <MPU_vTaskSuspend>:
;         {
 805cfc4: b580         	push	{r7, lr}
 805cfc6: 466f         	mov	r7, sp
 805cfc8: b082         	sub	sp, #0x8
 805cfca: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805cfcc: 4808         	ldr	r0, [pc, #0x20]         @ 0x805cff0 <MPU_vTaskSuspend+0x2c>
 805cfce: 4780         	blx	r0
 805cfd0: b938         	cbnz	r0, 0x805cfe2 <MPU_vTaskSuspend+0x1e> @ imm = #0xe
 805cfd2: e7ff         	b	0x805cfd4 <MPU_vTaskSuspend+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805cfd4: df03         	svc	#0x3
;                 vTaskSuspend( pxTaskToSuspend );
 805cfd6: 9801         	ldr	r0, [sp, #0x4]
 805cfd8: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805cff8 <MPU_vTaskSuspend+0x34>
 805cfda: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805cfdc: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805cffc <MPU_vTaskSuspend+0x38>
 805cfde: 4780         	blx	r0
;             }
 805cfe0: e003         	b	0x805cfea <MPU_vTaskSuspend+0x26> @ imm = #0x6
;                 vTaskSuspend( pxTaskToSuspend );
 805cfe2: 9801         	ldr	r0, [sp, #0x4]
 805cfe4: 4903         	ldr	r1, [pc, #0xc]          @ 0x805cff4 <MPU_vTaskSuspend+0x30>
 805cfe6: 4788         	blx	r1
 805cfe8: e7ff         	b	0x805cfea <MPU_vTaskSuspend+0x26> @ imm = #-0x2
;         }
 805cfea: b002         	add	sp, #0x8
 805cfec: bd80         	pop	{r7, pc}
 805cfee: bf00         	nop

0805cff0 <$d.17>:
 805cff0: c1 ea 05 08  	.word	0x0805eac1
 805cff4: e5 60 05 08  	.word	0x080560e5
 805cff8: e5 60 05 08  	.word	0x080560e5
 805cffc: d1 ea 05 08  	.word	0x0805ead1

0805d000 <MPU_vTaskResume>:
;         {
 805d000: b580         	push	{r7, lr}
 805d002: 466f         	mov	r7, sp
 805d004: b082         	sub	sp, #0x8
 805d006: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d008: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d02c <MPU_vTaskResume+0x2c>
 805d00a: 4780         	blx	r0
 805d00c: b938         	cbnz	r0, 0x805d01e <MPU_vTaskResume+0x1e> @ imm = #0xe
 805d00e: e7ff         	b	0x805d010 <MPU_vTaskResume+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d010: df03         	svc	#0x3
;                 vTaskResume( pxTaskToResume );
 805d012: 9801         	ldr	r0, [sp, #0x4]
 805d014: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805d034 <MPU_vTaskResume+0x34>
 805d016: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805d018: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805d038 <MPU_vTaskResume+0x38>
 805d01a: 4780         	blx	r0
;             }
 805d01c: e003         	b	0x805d026 <MPU_vTaskResume+0x26> @ imm = #0x6
;                 vTaskResume( pxTaskToResume );
 805d01e: 9801         	ldr	r0, [sp, #0x4]
 805d020: 4903         	ldr	r1, [pc, #0xc]          @ 0x805d030 <MPU_vTaskResume+0x30>
 805d022: 4788         	blx	r1
 805d024: e7ff         	b	0x805d026 <MPU_vTaskResume+0x26> @ imm = #-0x2
;         }
 805d026: b002         	add	sp, #0x8
 805d028: bd80         	pop	{r7, pc}
 805d02a: bf00         	nop

0805d02c <$d.19>:
 805d02c: c1 ea 05 08  	.word	0x0805eac1
 805d030: 09 63 05 08  	.word	0x08056309
 805d034: 09 63 05 08  	.word	0x08056309
 805d038: d1 ea 05 08  	.word	0x0805ead1

0805d03c <MPU_xTaskGetTickCount>:
;     {
 805d03c: b580         	push	{r7, lr}
 805d03e: 466f         	mov	r7, sp
 805d040: b082         	sub	sp, #0x8
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d042: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d068 <MPU_xTaskGetTickCount+0x2c>
 805d044: 4780         	blx	r0
 805d046: b938         	cbnz	r0, 0x805d058 <MPU_xTaskGetTickCount+0x1c> @ imm = #0xe
 805d048: e7ff         	b	0x805d04a <MPU_xTaskGetTickCount+0xe> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d04a: df03         	svc	#0x3
;             xReturn = xTaskGetTickCount();
 805d04c: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d070 <MPU_xTaskGetTickCount+0x34>
 805d04e: 4780         	blx	r0
 805d050: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805d052: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d074 <MPU_xTaskGetTickCount+0x38>
 805d054: 4780         	blx	r0
;         }
 805d056: e003         	b	0x805d060 <MPU_xTaskGetTickCount+0x24> @ imm = #0x6
;             xReturn = xTaskGetTickCount();
 805d058: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d06c <MPU_xTaskGetTickCount+0x30>
 805d05a: 4780         	blx	r0
 805d05c: 9001         	str	r0, [sp, #0x4]
 805d05e: e7ff         	b	0x805d060 <MPU_xTaskGetTickCount+0x24> @ imm = #-0x2
;         return xReturn;
 805d060: 9801         	ldr	r0, [sp, #0x4]
 805d062: b002         	add	sp, #0x8
 805d064: bd80         	pop	{r7, pc}
 805d066: bf00         	nop

0805d068 <$d.25>:
 805d068: c1 ea 05 08  	.word	0x0805eac1
 805d06c: 65 69 05 08  	.word	0x08056965
 805d070: 65 69 05 08  	.word	0x08056965
 805d074: d1 ea 05 08  	.word	0x0805ead1

0805d078 <MPU_uxTaskGetNumberOfTasks>:
;     {
 805d078: b580         	push	{r7, lr}
 805d07a: 466f         	mov	r7, sp
 805d07c: b082         	sub	sp, #0x8
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d07e: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d0a4 <MPU_uxTaskGetNumberOfTasks+0x2c>
 805d080: 4780         	blx	r0
 805d082: b938         	cbnz	r0, 0x805d094 <MPU_uxTaskGetNumberOfTasks+0x1c> @ imm = #0xe
 805d084: e7ff         	b	0x805d086 <MPU_uxTaskGetNumberOfTasks+0xe> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d086: df03         	svc	#0x3
;             uxReturn = uxTaskGetNumberOfTasks();
 805d088: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d0ac <MPU_uxTaskGetNumberOfTasks+0x34>
 805d08a: 4780         	blx	r0
 805d08c: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805d08e: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d0b0 <MPU_uxTaskGetNumberOfTasks+0x38>
 805d090: 4780         	blx	r0
;         }
 805d092: e003         	b	0x805d09c <MPU_uxTaskGetNumberOfTasks+0x24> @ imm = #0x6
;             uxReturn = uxTaskGetNumberOfTasks();
 805d094: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d0a8 <MPU_uxTaskGetNumberOfTasks+0x30>
 805d096: 4780         	blx	r0
 805d098: 9001         	str	r0, [sp, #0x4]
 805d09a: e7ff         	b	0x805d09c <MPU_uxTaskGetNumberOfTasks+0x24> @ imm = #-0x2
;         return uxReturn;
 805d09c: 9801         	ldr	r0, [sp, #0x4]
 805d09e: b002         	add	sp, #0x8
 805d0a0: bd80         	pop	{r7, pc}
 805d0a2: bf00         	nop

0805d0a4 <$d.27>:
 805d0a4: c1 ea 05 08  	.word	0x0805eac1
 805d0a8: 9d 69 05 08  	.word	0x0805699d
 805d0ac: 9d 69 05 08  	.word	0x0805699d
 805d0b0: d1 ea 05 08  	.word	0x0805ead1

0805d0b4 <MPU_uxTaskGetSystemState>:
;         {
 805d0b4: b580         	push	{r7, lr}
 805d0b6: 466f         	mov	r7, sp
 805d0b8: b084         	sub	sp, #0x10
 805d0ba: 9003         	str	r0, [sp, #0xc]
 805d0bc: 9102         	str	r1, [sp, #0x8]
 805d0be: 9201         	str	r2, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d0c0: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d0f0 <MPU_uxTaskGetSystemState+0x3c>
 805d0c2: 4780         	blx	r0
 805d0c4: b950         	cbnz	r0, 0x805d0dc <MPU_uxTaskGetSystemState+0x28> @ imm = #0x14
 805d0c6: e7ff         	b	0x805d0c8 <MPU_uxTaskGetSystemState+0x14> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d0c8: df03         	svc	#0x3
;                 uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 805d0ca: 9803         	ldr	r0, [sp, #0xc]
 805d0cc: 9902         	ldr	r1, [sp, #0x8]
 805d0ce: 9a01         	ldr	r2, [sp, #0x4]
 805d0d0: 4b09         	ldr	r3, [pc, #0x24]         @ 0x805d0f8 <MPU_uxTaskGetSystemState+0x44>
 805d0d2: 4798         	blx	r3
 805d0d4: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d0d6: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d0fc <MPU_uxTaskGetSystemState+0x48>
 805d0d8: 4780         	blx	r0
;             }
 805d0da: e006         	b	0x805d0ea <MPU_uxTaskGetSystemState+0x36> @ imm = #0xc
;                 uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 805d0dc: 9803         	ldr	r0, [sp, #0xc]
 805d0de: 9902         	ldr	r1, [sp, #0x8]
 805d0e0: 9a01         	ldr	r2, [sp, #0x4]
 805d0e2: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805d0f4 <MPU_uxTaskGetSystemState+0x40>
 805d0e4: 4798         	blx	r3
 805d0e6: 9000         	str	r0, [sp]
 805d0e8: e7ff         	b	0x805d0ea <MPU_uxTaskGetSystemState+0x36> @ imm = #-0x2
;             return uxReturn;
 805d0ea: 9800         	ldr	r0, [sp]
 805d0ec: b004         	add	sp, #0x10
 805d0ee: bd80         	pop	{r7, pc}

0805d0f0 <$d.29>:
 805d0f0: c1 ea 05 08  	.word	0x0805eac1
 805d0f4: e9 69 05 08  	.word	0x080569e9
 805d0f8: e9 69 05 08  	.word	0x080569e9
 805d0fc: d1 ea 05 08  	.word	0x0805ead1

0805d100 <MPU_uxTaskGetStackHighWaterMark>:
;         {
 805d100: b580         	push	{r7, lr}
 805d102: 466f         	mov	r7, sp
 805d104: b082         	sub	sp, #0x8
 805d106: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d108: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d130 <MPU_uxTaskGetStackHighWaterMark+0x30>
 805d10a: 4780         	blx	r0
 805d10c: b940         	cbnz	r0, 0x805d120 <MPU_uxTaskGetStackHighWaterMark+0x20> @ imm = #0x10
 805d10e: e7ff         	b	0x805d110 <MPU_uxTaskGetStackHighWaterMark+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d110: df03         	svc	#0x3
;                 uxReturn = uxTaskGetStackHighWaterMark( xTask );
 805d112: 9801         	ldr	r0, [sp, #0x4]
 805d114: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d138 <MPU_uxTaskGetStackHighWaterMark+0x38>
 805d116: 4788         	blx	r1
 805d118: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d11a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d13c <MPU_uxTaskGetStackHighWaterMark+0x3c>
 805d11c: 4780         	blx	r0
;             }
 805d11e: e004         	b	0x805d12a <MPU_uxTaskGetStackHighWaterMark+0x2a> @ imm = #0x8
;                 uxReturn = uxTaskGetStackHighWaterMark( xTask );
 805d120: 9801         	ldr	r0, [sp, #0x4]
 805d122: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d134 <MPU_uxTaskGetStackHighWaterMark+0x34>
 805d124: 4788         	blx	r1
 805d126: 9000         	str	r0, [sp]
 805d128: e7ff         	b	0x805d12a <MPU_uxTaskGetStackHighWaterMark+0x2a> @ imm = #-0x2
;             return uxReturn;
 805d12a: 9800         	ldr	r0, [sp]
 805d12c: b002         	add	sp, #0x8
 805d12e: bd80         	pop	{r7, pc}

0805d130 <$d.33>:
 805d130: c1 ea 05 08  	.word	0x0805eac1
 805d134: 39 74 05 08  	.word	0x08057439
 805d138: 39 74 05 08  	.word	0x08057439
 805d13c: d1 ea 05 08  	.word	0x0805ead1

0805d140 <MPU_xTaskGetCurrentTaskHandle>:
;         {
 805d140: b580         	push	{r7, lr}
 805d142: 466f         	mov	r7, sp
 805d144: b082         	sub	sp, #0x8
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d146: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d16c <MPU_xTaskGetCurrentTaskHandle+0x2c>
 805d148: 4780         	blx	r0
 805d14a: b938         	cbnz	r0, 0x805d15c <MPU_xTaskGetCurrentTaskHandle+0x1c> @ imm = #0xe
 805d14c: e7ff         	b	0x805d14e <MPU_xTaskGetCurrentTaskHandle+0xe> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d14e: df03         	svc	#0x3
;                 xReturn = xTaskGetCurrentTaskHandle();
 805d150: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d174 <MPU_xTaskGetCurrentTaskHandle+0x34>
 805d152: 4780         	blx	r0
 805d154: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d156: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d178 <MPU_xTaskGetCurrentTaskHandle+0x38>
 805d158: 4780         	blx	r0
;             }
 805d15a: e003         	b	0x805d164 <MPU_xTaskGetCurrentTaskHandle+0x24> @ imm = #0x6
;                 xReturn = xTaskGetCurrentTaskHandle();
 805d15c: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d170 <MPU_xTaskGetCurrentTaskHandle+0x30>
 805d15e: 4780         	blx	r0
 805d160: 9001         	str	r0, [sp, #0x4]
 805d162: e7ff         	b	0x805d164 <MPU_xTaskGetCurrentTaskHandle+0x24> @ imm = #-0x2
;             return xReturn;
 805d164: 9801         	ldr	r0, [sp, #0x4]
 805d166: b002         	add	sp, #0x8
 805d168: bd80         	pop	{r7, pc}
 805d16a: bf00         	nop

0805d16c <$d.35>:
 805d16c: c1 ea 05 08  	.word	0x0805eac1
 805d170: 79 74 05 08  	.word	0x08057479
 805d174: 79 74 05 08  	.word	0x08057479
 805d178: d1 ea 05 08  	.word	0x0805ead1

0805d17c <MPU_xTaskGetSchedulerState>:
;         {
 805d17c: b580         	push	{r7, lr}
 805d17e: 466f         	mov	r7, sp
 805d180: b082         	sub	sp, #0x8
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d182: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d1a8 <MPU_xTaskGetSchedulerState+0x2c>
 805d184: 4780         	blx	r0
 805d186: b938         	cbnz	r0, 0x805d198 <MPU_xTaskGetSchedulerState+0x1c> @ imm = #0xe
 805d188: e7ff         	b	0x805d18a <MPU_xTaskGetSchedulerState+0xe> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d18a: df03         	svc	#0x3
;                 xReturn = xTaskGetSchedulerState();
 805d18c: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d1b0 <MPU_xTaskGetSchedulerState+0x34>
 805d18e: 4780         	blx	r0
 805d190: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d192: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d1b4 <MPU_xTaskGetSchedulerState+0x38>
 805d194: 4780         	blx	r0
;             }
 805d196: e003         	b	0x805d1a0 <MPU_xTaskGetSchedulerState+0x24> @ imm = #0x6
;                 xReturn = xTaskGetSchedulerState();
 805d198: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d1ac <MPU_xTaskGetSchedulerState+0x30>
 805d19a: 4780         	blx	r0
 805d19c: 9001         	str	r0, [sp, #0x4]
 805d19e: e7ff         	b	0x805d1a0 <MPU_xTaskGetSchedulerState+0x24> @ imm = #-0x2
;             return xReturn;
 805d1a0: 9801         	ldr	r0, [sp, #0x4]
 805d1a2: b002         	add	sp, #0x8
 805d1a4: bd80         	pop	{r7, pc}
 805d1a6: bf00         	nop

0805d1a8 <$d.37>:
 805d1a8: c1 ea 05 08  	.word	0x0805eac1
 805d1ac: 8d 74 05 08  	.word	0x0805748d
 805d1b0: 8d 74 05 08  	.word	0x0805748d
 805d1b4: d1 ea 05 08  	.word	0x0805ead1

0805d1b8 <MPU_vTaskSetTimeOutState>:
;     {
 805d1b8: b580         	push	{r7, lr}
 805d1ba: 466f         	mov	r7, sp
 805d1bc: b082         	sub	sp, #0x8
 805d1be: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d1c0: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d1e4 <MPU_vTaskSetTimeOutState+0x2c>
 805d1c2: 4780         	blx	r0
 805d1c4: b938         	cbnz	r0, 0x805d1d6 <MPU_vTaskSetTimeOutState+0x1e> @ imm = #0xe
 805d1c6: e7ff         	b	0x805d1c8 <MPU_vTaskSetTimeOutState+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d1c8: df03         	svc	#0x3
;             vTaskSetTimeOutState( pxTimeOut );
 805d1ca: 9801         	ldr	r0, [sp, #0x4]
 805d1cc: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805d1ec <MPU_vTaskSetTimeOutState+0x34>
 805d1ce: 4788         	blx	r1
;             portRESET_PRIVILEGE();
 805d1d0: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805d1f0 <MPU_vTaskSetTimeOutState+0x38>
 805d1d2: 4780         	blx	r0
;         }
 805d1d4: e003         	b	0x805d1de <MPU_vTaskSetTimeOutState+0x26> @ imm = #0x6
;             vTaskSetTimeOutState( pxTimeOut );
 805d1d6: 9801         	ldr	r0, [sp, #0x4]
 805d1d8: 4903         	ldr	r1, [pc, #0xc]          @ 0x805d1e8 <MPU_vTaskSetTimeOutState+0x30>
 805d1da: 4788         	blx	r1
 805d1dc: e7ff         	b	0x805d1de <MPU_vTaskSetTimeOutState+0x26> @ imm = #-0x2
;     }
 805d1de: b002         	add	sp, #0x8
 805d1e0: bd80         	pop	{r7, pc}
 805d1e2: bf00         	nop

0805d1e4 <$d.39>:
 805d1e4: c1 ea 05 08  	.word	0x0805eac1
 805d1e8: 11 71 05 08  	.word	0x08057111
 805d1ec: 11 71 05 08  	.word	0x08057111
 805d1f0: d1 ea 05 08  	.word	0x0805ead1

0805d1f4 <MPU_xTaskCheckForTimeOut>:
;     {
 805d1f4: b580         	push	{r7, lr}
 805d1f6: 466f         	mov	r7, sp
 805d1f8: b084         	sub	sp, #0x10
 805d1fa: 9003         	str	r0, [sp, #0xc]
 805d1fc: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d1fe: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d22c <MPU_xTaskCheckForTimeOut+0x38>
 805d200: 4780         	blx	r0
 805d202: b948         	cbnz	r0, 0x805d218 <MPU_xTaskCheckForTimeOut+0x24> @ imm = #0x12
 805d204: e7ff         	b	0x805d206 <MPU_xTaskCheckForTimeOut+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d206: df03         	svc	#0x3
;             xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 805d208: 9803         	ldr	r0, [sp, #0xc]
 805d20a: 9902         	ldr	r1, [sp, #0x8]
 805d20c: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805d234 <MPU_xTaskCheckForTimeOut+0x40>
 805d20e: 4790         	blx	r2
 805d210: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805d212: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d238 <MPU_xTaskCheckForTimeOut+0x44>
 805d214: 4780         	blx	r0
;         }
 805d216: e005         	b	0x805d224 <MPU_xTaskCheckForTimeOut+0x30> @ imm = #0xa
;             xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 805d218: 9803         	ldr	r0, [sp, #0xc]
 805d21a: 9902         	ldr	r1, [sp, #0x8]
 805d21c: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805d230 <MPU_xTaskCheckForTimeOut+0x3c>
 805d21e: 4790         	blx	r2
 805d220: 9001         	str	r0, [sp, #0x4]
 805d222: e7ff         	b	0x805d224 <MPU_xTaskCheckForTimeOut+0x30> @ imm = #-0x2
;         return xReturn;
 805d224: 9801         	ldr	r0, [sp, #0x4]
 805d226: b004         	add	sp, #0x10
 805d228: bd80         	pop	{r7, pc}
 805d22a: bf00         	nop

0805d22c <$d.41>:
 805d22c: c1 ea 05 08  	.word	0x0805eac1
 805d230: 81 71 05 08  	.word	0x08057181
 805d234: 81 71 05 08  	.word	0x08057181
 805d238: d1 ea 05 08  	.word	0x0805ead1

0805d23c <MPU_xTaskGenericNotify>:
;         {
 805d23c: b580         	push	{r7, lr}
 805d23e: 466f         	mov	r7, sp
 805d240: b086         	sub	sp, #0x18
 805d242: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d246: 9005         	str	r0, [sp, #0x14]
 805d248: 9104         	str	r1, [sp, #0x10]
 805d24a: 9203         	str	r2, [sp, #0xc]
 805d24c: f807 3c0d    	strb	r3, [r7, #-13]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d250: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805d2a0 <MPU_xTaskGenericNotify+0x64>
 805d252: 4780         	blx	r0
 805d254: b990         	cbnz	r0, 0x805d27c <MPU_xTaskGenericNotify+0x40> @ imm = #0x24
 805d256: e7ff         	b	0x805d258 <MPU_xTaskGenericNotify+0x1c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d258: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 805d25a: 9805         	ldr	r0, [sp, #0x14]
 805d25c: 9904         	ldr	r1, [sp, #0x10]
 805d25e: 9a03         	ldr	r2, [sp, #0xc]
 805d260: f817 3c0d    	ldrb	r3, [r7, #-13]
 805d264: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d268: 46ee         	mov	lr, sp
 805d26a: f8ce c000    	str.w	r12, [lr]
 805d26e: f8df c038    	ldr.w	r12, [pc, #0x38]        @ 0x805d2a8 <MPU_xTaskGenericNotify+0x6c>
 805d272: 47e0         	blx	r12
 805d274: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d276: 480d         	ldr	r0, [pc, #0x34]         @ 0x805d2ac <MPU_xTaskGenericNotify+0x70>
 805d278: 4780         	blx	r0
;             }
 805d27a: e00e         	b	0x805d29a <MPU_xTaskGenericNotify+0x5e> @ imm = #0x1c
;                 xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 805d27c: 9805         	ldr	r0, [sp, #0x14]
 805d27e: 9904         	ldr	r1, [sp, #0x10]
 805d280: 9a03         	ldr	r2, [sp, #0xc]
 805d282: f817 3c0d    	ldrb	r3, [r7, #-13]
 805d286: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d28a: 46ee         	mov	lr, sp
 805d28c: f8ce c000    	str.w	r12, [lr]
 805d290: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x805d2a4 <MPU_xTaskGenericNotify+0x68>
 805d294: 47e0         	blx	r12
 805d296: 9001         	str	r0, [sp, #0x4]
 805d298: e7ff         	b	0x805d29a <MPU_xTaskGenericNotify+0x5e> @ imm = #-0x2
;             return xReturn;
 805d29a: 9801         	ldr	r0, [sp, #0x4]
 805d29c: b006         	add	sp, #0x18
 805d29e: bd80         	pop	{r7, pc}

0805d2a0 <$d.43>:
 805d2a0: c1 ea 05 08  	.word	0x0805eac1
 805d2a4: 01 7c 05 08  	.word	0x08057c01
 805d2a8: 01 7c 05 08  	.word	0x08057c01
 805d2ac: d1 ea 05 08  	.word	0x0805ead1

0805d2b0 <MPU_xTaskGenericNotifyWait>:
;         {
 805d2b0: b580         	push	{r7, lr}
 805d2b2: 466f         	mov	r7, sp
 805d2b4: b086         	sub	sp, #0x18
 805d2b6: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d2ba: 9005         	str	r0, [sp, #0x14]
 805d2bc: 9104         	str	r1, [sp, #0x10]
 805d2be: 9203         	str	r2, [sp, #0xc]
 805d2c0: 9302         	str	r3, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d2c2: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805d310 <MPU_xTaskGenericNotifyWait+0x60>
 805d2c4: 4780         	blx	r0
 805d2c6: b988         	cbnz	r0, 0x805d2ec <MPU_xTaskGenericNotifyWait+0x3c> @ imm = #0x22
 805d2c8: e7ff         	b	0x805d2ca <MPU_xTaskGenericNotifyWait+0x1a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d2ca: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 805d2cc: 9805         	ldr	r0, [sp, #0x14]
 805d2ce: 9904         	ldr	r1, [sp, #0x10]
 805d2d0: 9a03         	ldr	r2, [sp, #0xc]
 805d2d2: 9b02         	ldr	r3, [sp, #0x8]
 805d2d4: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d2d8: 46ee         	mov	lr, sp
 805d2da: f8ce c000    	str.w	r12, [lr]
 805d2de: f8df c038    	ldr.w	r12, [pc, #0x38]        @ 0x805d318 <MPU_xTaskGenericNotifyWait+0x68>
 805d2e2: 47e0         	blx	r12
 805d2e4: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d2e6: 480d         	ldr	r0, [pc, #0x34]         @ 0x805d31c <MPU_xTaskGenericNotifyWait+0x6c>
 805d2e8: 4780         	blx	r0
;             }
 805d2ea: e00d         	b	0x805d308 <MPU_xTaskGenericNotifyWait+0x58> @ imm = #0x1a
;                 xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 805d2ec: 9805         	ldr	r0, [sp, #0x14]
 805d2ee: 9904         	ldr	r1, [sp, #0x10]
 805d2f0: 9a03         	ldr	r2, [sp, #0xc]
 805d2f2: 9b02         	ldr	r3, [sp, #0x8]
 805d2f4: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d2f8: 46ee         	mov	lr, sp
 805d2fa: f8ce c000    	str.w	r12, [lr]
 805d2fe: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805d314 <MPU_xTaskGenericNotifyWait+0x64>
 805d302: 47e0         	blx	r12
 805d304: 9001         	str	r0, [sp, #0x4]
 805d306: e7ff         	b	0x805d308 <MPU_xTaskGenericNotifyWait+0x58> @ imm = #-0x2
;             return xReturn;
 805d308: 9801         	ldr	r0, [sp, #0x4]
 805d30a: b006         	add	sp, #0x18
 805d30c: bd80         	pop	{r7, pc}
 805d30e: bf00         	nop

0805d310 <$d.45>:
 805d310: c1 ea 05 08  	.word	0x0805eac1
 805d314: b5 7a 05 08  	.word	0x08057ab5
 805d318: b5 7a 05 08  	.word	0x08057ab5
 805d31c: d1 ea 05 08  	.word	0x0805ead1

0805d320 <MPU_ulTaskGenericNotifyTake>:
;         {
 805d320: b580         	push	{r7, lr}
 805d322: 466f         	mov	r7, sp
 805d324: b084         	sub	sp, #0x10
 805d326: 9003         	str	r0, [sp, #0xc]
 805d328: 9102         	str	r1, [sp, #0x8]
 805d32a: 9201         	str	r2, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d32c: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d35c <MPU_ulTaskGenericNotifyTake+0x3c>
 805d32e: 4780         	blx	r0
 805d330: b950         	cbnz	r0, 0x805d348 <MPU_ulTaskGenericNotifyTake+0x28> @ imm = #0x14
 805d332: e7ff         	b	0x805d334 <MPU_ulTaskGenericNotifyTake+0x14> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d334: df03         	svc	#0x3
;                 ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 805d336: 9803         	ldr	r0, [sp, #0xc]
 805d338: 9902         	ldr	r1, [sp, #0x8]
 805d33a: 9a01         	ldr	r2, [sp, #0x4]
 805d33c: 4b09         	ldr	r3, [pc, #0x24]         @ 0x805d364 <MPU_ulTaskGenericNotifyTake+0x44>
 805d33e: 4798         	blx	r3
 805d340: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d342: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d368 <MPU_ulTaskGenericNotifyTake+0x48>
 805d344: 4780         	blx	r0
;             }
 805d346: e006         	b	0x805d356 <MPU_ulTaskGenericNotifyTake+0x36> @ imm = #0xc
;                 ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 805d348: 9803         	ldr	r0, [sp, #0xc]
 805d34a: 9902         	ldr	r1, [sp, #0x8]
 805d34c: 9a01         	ldr	r2, [sp, #0x4]
 805d34e: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805d360 <MPU_ulTaskGenericNotifyTake+0x40>
 805d350: 4798         	blx	r3
 805d352: 9000         	str	r0, [sp]
 805d354: e7ff         	b	0x805d356 <MPU_ulTaskGenericNotifyTake+0x36> @ imm = #-0x2
;             return ulReturn;
 805d356: 9800         	ldr	r0, [sp]
 805d358: b004         	add	sp, #0x10
 805d35a: bd80         	pop	{r7, pc}

0805d35c <$d.47>:
 805d35c: c1 ea 05 08  	.word	0x0805eac1
 805d360: 89 79 05 08  	.word	0x08057989
 805d364: 89 79 05 08  	.word	0x08057989
 805d368: d1 ea 05 08  	.word	0x0805ead1

0805d36c <MPU_xTaskGenericNotifyStateClear>:
;         {
 805d36c: b580         	push	{r7, lr}
 805d36e: 466f         	mov	r7, sp
 805d370: b084         	sub	sp, #0x10
 805d372: 9003         	str	r0, [sp, #0xc]
 805d374: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d376: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d3a4 <MPU_xTaskGenericNotifyStateClear+0x38>
 805d378: 4780         	blx	r0
 805d37a: b948         	cbnz	r0, 0x805d390 <MPU_xTaskGenericNotifyStateClear+0x24> @ imm = #0x12
 805d37c: e7ff         	b	0x805d37e <MPU_xTaskGenericNotifyStateClear+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d37e: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 805d380: 9803         	ldr	r0, [sp, #0xc]
 805d382: 9902         	ldr	r1, [sp, #0x8]
 805d384: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805d3ac <MPU_xTaskGenericNotifyStateClear+0x40>
 805d386: 4790         	blx	r2
 805d388: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d38a: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d3b0 <MPU_xTaskGenericNotifyStateClear+0x44>
 805d38c: 4780         	blx	r0
;             }
 805d38e: e005         	b	0x805d39c <MPU_xTaskGenericNotifyStateClear+0x30> @ imm = #0xa
;                 xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 805d390: 9803         	ldr	r0, [sp, #0xc]
 805d392: 9902         	ldr	r1, [sp, #0x8]
 805d394: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805d3a8 <MPU_xTaskGenericNotifyStateClear+0x3c>
 805d396: 4790         	blx	r2
 805d398: 9001         	str	r0, [sp, #0x4]
 805d39a: e7ff         	b	0x805d39c <MPU_xTaskGenericNotifyStateClear+0x30> @ imm = #-0x2
;             return xReturn;
 805d39c: 9801         	ldr	r0, [sp, #0x4]
 805d39e: b004         	add	sp, #0x10
 805d3a0: bd80         	pop	{r7, pc}
 805d3a2: bf00         	nop

0805d3a4 <$d.49>:
 805d3a4: c1 ea 05 08  	.word	0x0805eac1
 805d3a8: 59 83 05 08  	.word	0x08058359
 805d3ac: 59 83 05 08  	.word	0x08058359
 805d3b0: d1 ea 05 08  	.word	0x0805ead1

0805d3b4 <MPU_ulTaskGenericNotifyValueClear>:
;         {
 805d3b4: b580         	push	{r7, lr}
 805d3b6: 466f         	mov	r7, sp
 805d3b8: b084         	sub	sp, #0x10
 805d3ba: 9003         	str	r0, [sp, #0xc]
 805d3bc: 9102         	str	r1, [sp, #0x8]
 805d3be: 9201         	str	r2, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d3c0: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d3f0 <MPU_ulTaskGenericNotifyValueClear+0x3c>
 805d3c2: 4780         	blx	r0
 805d3c4: b950         	cbnz	r0, 0x805d3dc <MPU_ulTaskGenericNotifyValueClear+0x28> @ imm = #0x14
 805d3c6: e7ff         	b	0x805d3c8 <MPU_ulTaskGenericNotifyValueClear+0x14> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d3c8: df03         	svc	#0x3
;                 ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 805d3ca: 9803         	ldr	r0, [sp, #0xc]
 805d3cc: 9902         	ldr	r1, [sp, #0x8]
 805d3ce: 9a01         	ldr	r2, [sp, #0x4]
 805d3d0: 4b09         	ldr	r3, [pc, #0x24]         @ 0x805d3f8 <MPU_ulTaskGenericNotifyValueClear+0x44>
 805d3d2: 4798         	blx	r3
 805d3d4: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d3d6: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d3fc <MPU_ulTaskGenericNotifyValueClear+0x48>
 805d3d8: 4780         	blx	r0
;             }
 805d3da: e006         	b	0x805d3ea <MPU_ulTaskGenericNotifyValueClear+0x36> @ imm = #0xc
;                 ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 805d3dc: 9803         	ldr	r0, [sp, #0xc]
 805d3de: 9902         	ldr	r1, [sp, #0x8]
 805d3e0: 9a01         	ldr	r2, [sp, #0x4]
 805d3e2: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805d3f4 <MPU_ulTaskGenericNotifyValueClear+0x40>
 805d3e4: 4798         	blx	r3
 805d3e6: 9000         	str	r0, [sp]
 805d3e8: e7ff         	b	0x805d3ea <MPU_ulTaskGenericNotifyValueClear+0x36> @ imm = #-0x2
;             return ulReturn;
 805d3ea: 9800         	ldr	r0, [sp]
 805d3ec: b004         	add	sp, #0x10
 805d3ee: bd80         	pop	{r7, pc}

0805d3f0 <$d.51>:
 805d3f0: c1 ea 05 08  	.word	0x0805eac1
 805d3f4: d1 83 05 08  	.word	0x080583d1
 805d3f8: d1 83 05 08  	.word	0x080583d1
 805d3fc: d1 ea 05 08  	.word	0x0805ead1

0805d400 <MPU_xQueueGenericSend>:
;     {
 805d400: b580         	push	{r7, lr}
 805d402: 466f         	mov	r7, sp
 805d404: b086         	sub	sp, #0x18
 805d406: 9005         	str	r0, [sp, #0x14]
 805d408: 9104         	str	r1, [sp, #0x10]
 805d40a: 9203         	str	r2, [sp, #0xc]
 805d40c: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d40e: 480e         	ldr	r0, [pc, #0x38]         @ 0x805d448 <MPU_xQueueGenericSend+0x48>
 805d410: 4780         	blx	r0
 805d412: b960         	cbnz	r0, 0x805d42e <MPU_xQueueGenericSend+0x2e> @ imm = #0x18
 805d414: e7ff         	b	0x805d416 <MPU_xQueueGenericSend+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d416: df03         	svc	#0x3
;             xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 805d418: 9805         	ldr	r0, [sp, #0x14]
 805d41a: 9904         	ldr	r1, [sp, #0x10]
 805d41c: 9a03         	ldr	r2, [sp, #0xc]
 805d41e: 9b02         	ldr	r3, [sp, #0x8]
 805d420: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805d450 <MPU_xQueueGenericSend+0x50>
 805d424: 47e0         	blx	r12
 805d426: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805d428: 480a         	ldr	r0, [pc, #0x28]         @ 0x805d454 <MPU_xQueueGenericSend+0x54>
 805d42a: 4780         	blx	r0
;         }
 805d42c: e008         	b	0x805d440 <MPU_xQueueGenericSend+0x40> @ imm = #0x10
;             xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 805d42e: 9805         	ldr	r0, [sp, #0x14]
 805d430: 9904         	ldr	r1, [sp, #0x10]
 805d432: 9a03         	ldr	r2, [sp, #0xc]
 805d434: 9b02         	ldr	r3, [sp, #0x8]
 805d436: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805d44c <MPU_xQueueGenericSend+0x4c>
 805d43a: 47e0         	blx	r12
 805d43c: 9001         	str	r0, [sp, #0x4]
 805d43e: e7ff         	b	0x805d440 <MPU_xQueueGenericSend+0x40> @ imm = #-0x2
;         return xReturn;
 805d440: 9801         	ldr	r0, [sp, #0x4]
 805d442: b006         	add	sp, #0x18
 805d444: bd80         	pop	{r7, pc}
 805d446: bf00         	nop

0805d448 <$d.57>:
 805d448: c1 ea 05 08  	.word	0x0805eac1
 805d44c: bd a2 05 08  	.word	0x0805a2bd
 805d450: bd a2 05 08  	.word	0x0805a2bd
 805d454: d1 ea 05 08  	.word	0x0805ead1

0805d458 <MPU_uxQueueMessagesWaiting>:
;     {
 805d458: b580         	push	{r7, lr}
 805d45a: 466f         	mov	r7, sp
 805d45c: b082         	sub	sp, #0x8
 805d45e: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d460: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d488 <MPU_uxQueueMessagesWaiting+0x30>
 805d462: 4780         	blx	r0
 805d464: b940         	cbnz	r0, 0x805d478 <MPU_uxQueueMessagesWaiting+0x20> @ imm = #0x10
 805d466: e7ff         	b	0x805d468 <MPU_uxQueueMessagesWaiting+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d468: df03         	svc	#0x3
;             uxReturn = uxQueueMessagesWaiting( pxQueue );
 805d46a: 9801         	ldr	r0, [sp, #0x4]
 805d46c: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d490 <MPU_uxQueueMessagesWaiting+0x38>
 805d46e: 4788         	blx	r1
 805d470: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805d472: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d494 <MPU_uxQueueMessagesWaiting+0x3c>
 805d474: 4780         	blx	r0
;         }
 805d476: e004         	b	0x805d482 <MPU_uxQueueMessagesWaiting+0x2a> @ imm = #0x8
;             uxReturn = uxQueueMessagesWaiting( pxQueue );
 805d478: 9801         	ldr	r0, [sp, #0x4]
 805d47a: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d48c <MPU_uxQueueMessagesWaiting+0x34>
 805d47c: 4788         	blx	r1
 805d47e: 9000         	str	r0, [sp]
 805d480: e7ff         	b	0x805d482 <MPU_uxQueueMessagesWaiting+0x2a> @ imm = #-0x2
;         return uxReturn;
 805d482: 9800         	ldr	r0, [sp]
 805d484: b002         	add	sp, #0x8
 805d486: bd80         	pop	{r7, pc}

0805d488 <$d.59>:
 805d488: c1 ea 05 08  	.word	0x0805eac1
 805d48c: d9 b2 05 08  	.word	0x0805b2d9
 805d490: d9 b2 05 08  	.word	0x0805b2d9
 805d494: d1 ea 05 08  	.word	0x0805ead1

0805d498 <MPU_uxQueueSpacesAvailable>:
;     {
 805d498: b580         	push	{r7, lr}
 805d49a: 466f         	mov	r7, sp
 805d49c: b082         	sub	sp, #0x8
 805d49e: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d4a0: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d4c8 <MPU_uxQueueSpacesAvailable+0x30>
 805d4a2: 4780         	blx	r0
 805d4a4: b940         	cbnz	r0, 0x805d4b8 <MPU_uxQueueSpacesAvailable+0x20> @ imm = #0x10
 805d4a6: e7ff         	b	0x805d4a8 <MPU_uxQueueSpacesAvailable+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d4a8: df03         	svc	#0x3
;             uxReturn = uxQueueSpacesAvailable( xQueue );
 805d4aa: 9801         	ldr	r0, [sp, #0x4]
 805d4ac: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d4d0 <MPU_uxQueueSpacesAvailable+0x38>
 805d4ae: 4788         	blx	r1
 805d4b0: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805d4b2: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d4d4 <MPU_uxQueueSpacesAvailable+0x3c>
 805d4b4: 4780         	blx	r0
;         }
 805d4b6: e004         	b	0x805d4c2 <MPU_uxQueueSpacesAvailable+0x2a> @ imm = #0x8
;             uxReturn = uxQueueSpacesAvailable( xQueue );
 805d4b8: 9801         	ldr	r0, [sp, #0x4]
 805d4ba: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d4cc <MPU_uxQueueSpacesAvailable+0x34>
 805d4bc: 4788         	blx	r1
 805d4be: 9000         	str	r0, [sp]
 805d4c0: e7ff         	b	0x805d4c2 <MPU_uxQueueSpacesAvailable+0x2a> @ imm = #-0x2
;         return uxReturn;
 805d4c2: 9800         	ldr	r0, [sp]
 805d4c4: b002         	add	sp, #0x8
 805d4c6: bd80         	pop	{r7, pc}

0805d4c8 <$d.61>:
 805d4c8: c1 ea 05 08  	.word	0x0805eac1
 805d4cc: 11 b3 05 08  	.word	0x0805b311
 805d4d0: 11 b3 05 08  	.word	0x0805b311
 805d4d4: d1 ea 05 08  	.word	0x0805ead1

0805d4d8 <MPU_xQueueReceive>:
;     {
 805d4d8: b580         	push	{r7, lr}
 805d4da: 466f         	mov	r7, sp
 805d4dc: b084         	sub	sp, #0x10
 805d4de: 9003         	str	r0, [sp, #0xc]
 805d4e0: 9102         	str	r1, [sp, #0x8]
 805d4e2: 9201         	str	r2, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d4e4: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d514 <MPU_xQueueReceive+0x3c>
 805d4e6: 4780         	blx	r0
 805d4e8: b950         	cbnz	r0, 0x805d500 <MPU_xQueueReceive+0x28> @ imm = #0x14
 805d4ea: e7ff         	b	0x805d4ec <MPU_xQueueReceive+0x14> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d4ec: df03         	svc	#0x3
;             xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 805d4ee: 9803         	ldr	r0, [sp, #0xc]
 805d4f0: 9902         	ldr	r1, [sp, #0x8]
 805d4f2: 9a01         	ldr	r2, [sp, #0x4]
 805d4f4: 4b09         	ldr	r3, [pc, #0x24]         @ 0x805d51c <MPU_xQueueReceive+0x44>
 805d4f6: 4798         	blx	r3
 805d4f8: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805d4fa: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d520 <MPU_xQueueReceive+0x48>
 805d4fc: 4780         	blx	r0
;         }
 805d4fe: e006         	b	0x805d50e <MPU_xQueueReceive+0x36> @ imm = #0xc
;             xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 805d500: 9803         	ldr	r0, [sp, #0xc]
 805d502: 9902         	ldr	r1, [sp, #0x8]
 805d504: 9a01         	ldr	r2, [sp, #0x4]
 805d506: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805d518 <MPU_xQueueReceive+0x40>
 805d508: 4798         	blx	r3
 805d50a: 9000         	str	r0, [sp]
 805d50c: e7ff         	b	0x805d50e <MPU_xQueueReceive+0x36> @ imm = #-0x2
;         return xReturn;
 805d50e: 9800         	ldr	r0, [sp]
 805d510: b004         	add	sp, #0x10
 805d512: bd80         	pop	{r7, pc}

0805d514 <$d.63>:
 805d514: c1 ea 05 08  	.word	0x0805eac1
 805d518: 6d ac 05 08  	.word	0x0805ac6d
 805d51c: 6d ac 05 08  	.word	0x0805ac6d
 805d520: d1 ea 05 08  	.word	0x0805ead1

0805d524 <MPU_xQueuePeek>:
;     {
 805d524: b580         	push	{r7, lr}
 805d526: 466f         	mov	r7, sp
 805d528: b084         	sub	sp, #0x10
 805d52a: 9003         	str	r0, [sp, #0xc]
 805d52c: 9102         	str	r1, [sp, #0x8]
 805d52e: 9201         	str	r2, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d530: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d560 <MPU_xQueuePeek+0x3c>
 805d532: 4780         	blx	r0
 805d534: b950         	cbnz	r0, 0x805d54c <MPU_xQueuePeek+0x28> @ imm = #0x14
 805d536: e7ff         	b	0x805d538 <MPU_xQueuePeek+0x14> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d538: df03         	svc	#0x3
;             xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 805d53a: 9803         	ldr	r0, [sp, #0xc]
 805d53c: 9902         	ldr	r1, [sp, #0x8]
 805d53e: 9a01         	ldr	r2, [sp, #0x4]
 805d540: 4b09         	ldr	r3, [pc, #0x24]         @ 0x805d568 <MPU_xQueuePeek+0x44>
 805d542: 4798         	blx	r3
 805d544: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805d546: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d56c <MPU_xQueuePeek+0x48>
 805d548: 4780         	blx	r0
;         }
 805d54a: e006         	b	0x805d55a <MPU_xQueuePeek+0x36> @ imm = #0xc
;             xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 805d54c: 9803         	ldr	r0, [sp, #0xc]
 805d54e: 9902         	ldr	r1, [sp, #0x8]
 805d550: 9a01         	ldr	r2, [sp, #0x4]
 805d552: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805d564 <MPU_xQueuePeek+0x40>
 805d554: 4798         	blx	r3
 805d556: 9000         	str	r0, [sp]
 805d558: e7ff         	b	0x805d55a <MPU_xQueuePeek+0x36> @ imm = #-0x2
;         return xReturn;
 805d55a: 9800         	ldr	r0, [sp]
 805d55c: b004         	add	sp, #0x10
 805d55e: bd80         	pop	{r7, pc}

0805d560 <$d.65>:
 805d560: c1 ea 05 08  	.word	0x0805eac1
 805d564: 09 af 05 08  	.word	0x0805af09
 805d568: 09 af 05 08  	.word	0x0805af09
 805d56c: d1 ea 05 08  	.word	0x0805ead1

0805d570 <MPU_xQueueSemaphoreTake>:
;     {
 805d570: b580         	push	{r7, lr}
 805d572: 466f         	mov	r7, sp
 805d574: b084         	sub	sp, #0x10
 805d576: 9003         	str	r0, [sp, #0xc]
 805d578: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d57a: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d5a8 <MPU_xQueueSemaphoreTake+0x38>
 805d57c: 4780         	blx	r0
 805d57e: b948         	cbnz	r0, 0x805d594 <MPU_xQueueSemaphoreTake+0x24> @ imm = #0x12
 805d580: e7ff         	b	0x805d582 <MPU_xQueueSemaphoreTake+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805d582: df03         	svc	#0x3
;             xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 805d584: 9803         	ldr	r0, [sp, #0xc]
 805d586: 9902         	ldr	r1, [sp, #0x8]
 805d588: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805d5b0 <MPU_xQueueSemaphoreTake+0x40>
 805d58a: 4790         	blx	r2
 805d58c: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805d58e: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d5b4 <MPU_xQueueSemaphoreTake+0x44>
 805d590: 4780         	blx	r0
;         }
 805d592: e005         	b	0x805d5a0 <MPU_xQueueSemaphoreTake+0x30> @ imm = #0xa
;             xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 805d594: 9803         	ldr	r0, [sp, #0xc]
 805d596: 9902         	ldr	r1, [sp, #0x8]
 805d598: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805d5ac <MPU_xQueueSemaphoreTake+0x3c>
 805d59a: 4790         	blx	r2
 805d59c: 9001         	str	r0, [sp, #0x4]
 805d59e: e7ff         	b	0x805d5a0 <MPU_xQueueSemaphoreTake+0x30> @ imm = #-0x2
;         return xReturn;
 805d5a0: 9801         	ldr	r0, [sp, #0x4]
 805d5a2: b004         	add	sp, #0x10
 805d5a4: bd80         	pop	{r7, pc}
 805d5a6: bf00         	nop

0805d5a8 <$d.67>:
 805d5a8: c1 ea 05 08  	.word	0x0805eac1
 805d5ac: 59 a5 05 08  	.word	0x0805a559
 805d5b0: 59 a5 05 08  	.word	0x0805a559
 805d5b4: d1 ea 05 08  	.word	0x0805ead1

0805d5b8 <MPU_xQueueGetMutexHolder>:
;         {
 805d5b8: b580         	push	{r7, lr}
 805d5ba: 466f         	mov	r7, sp
 805d5bc: b082         	sub	sp, #0x8
 805d5be: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d5c0: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d5e8 <MPU_xQueueGetMutexHolder+0x30>
 805d5c2: 4780         	blx	r0
 805d5c4: b940         	cbnz	r0, 0x805d5d8 <MPU_xQueueGetMutexHolder+0x20> @ imm = #0x10
 805d5c6: e7ff         	b	0x805d5c8 <MPU_xQueueGetMutexHolder+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d5c8: df03         	svc	#0x3
;                 xReturn = xQueueGetMutexHolder( xSemaphore );
 805d5ca: 9801         	ldr	r0, [sp, #0x4]
 805d5cc: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d5f0 <MPU_xQueueGetMutexHolder+0x38>
 805d5ce: 4788         	blx	r1
 805d5d0: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d5d2: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d5f4 <MPU_xQueueGetMutexHolder+0x3c>
 805d5d4: 4780         	blx	r0
;             }
 805d5d6: e004         	b	0x805d5e2 <MPU_xQueueGetMutexHolder+0x2a> @ imm = #0x8
;                 xReturn = xQueueGetMutexHolder( xSemaphore );
 805d5d8: 9801         	ldr	r0, [sp, #0x4]
 805d5da: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d5ec <MPU_xQueueGetMutexHolder+0x34>
 805d5dc: 4788         	blx	r1
 805d5de: 9000         	str	r0, [sp]
 805d5e0: e7ff         	b	0x805d5e2 <MPU_xQueueGetMutexHolder+0x2a> @ imm = #-0x2
;             return xReturn;
 805d5e2: 9800         	ldr	r0, [sp]
 805d5e4: b002         	add	sp, #0x8
 805d5e6: bd80         	pop	{r7, pc}

0805d5e8 <$d.69>:
 805d5e8: c1 ea 05 08  	.word	0x0805eac1
 805d5ec: c9 a1 05 08  	.word	0x0805a1c9
 805d5f0: c9 a1 05 08  	.word	0x0805a1c9
 805d5f4: d1 ea 05 08  	.word	0x0805ead1

0805d5f8 <MPU_xQueueTakeMutexRecursive>:
;         {
 805d5f8: b580         	push	{r7, lr}
 805d5fa: 466f         	mov	r7, sp
 805d5fc: b084         	sub	sp, #0x10
 805d5fe: 9003         	str	r0, [sp, #0xc]
 805d600: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d602: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805d630 <MPU_xQueueTakeMutexRecursive+0x38>
 805d604: 4780         	blx	r0
 805d606: b948         	cbnz	r0, 0x805d61c <MPU_xQueueTakeMutexRecursive+0x24> @ imm = #0x12
 805d608: e7ff         	b	0x805d60a <MPU_xQueueTakeMutexRecursive+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d60a: df03         	svc	#0x3
;                 xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 805d60c: 9803         	ldr	r0, [sp, #0xc]
 805d60e: 9902         	ldr	r1, [sp, #0x8]
 805d610: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805d638 <MPU_xQueueTakeMutexRecursive+0x40>
 805d612: 4790         	blx	r2
 805d614: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d616: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d63c <MPU_xQueueTakeMutexRecursive+0x44>
 805d618: 4780         	blx	r0
;             }
 805d61a: e005         	b	0x805d628 <MPU_xQueueTakeMutexRecursive+0x30> @ imm = #0xa
;                 xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 805d61c: 9803         	ldr	r0, [sp, #0xc]
 805d61e: 9902         	ldr	r1, [sp, #0x8]
 805d620: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805d634 <MPU_xQueueTakeMutexRecursive+0x3c>
 805d622: 4790         	blx	r2
 805d624: 9001         	str	r0, [sp, #0x4]
 805d626: e7ff         	b	0x805d628 <MPU_xQueueTakeMutexRecursive+0x30> @ imm = #-0x2
;             return xReturn;
 805d628: 9801         	ldr	r0, [sp, #0x4]
 805d62a: b004         	add	sp, #0x10
 805d62c: bd80         	pop	{r7, pc}
 805d62e: bf00         	nop

0805d630 <$d.75>:
 805d630: c1 ea 05 08  	.word	0x0805eac1
 805d634: e9 a4 05 08  	.word	0x0805a4e9
 805d638: e9 a4 05 08  	.word	0x0805a4e9
 805d63c: d1 ea 05 08  	.word	0x0805ead1

0805d640 <MPU_xQueueGiveMutexRecursive>:
;         {
 805d640: b580         	push	{r7, lr}
 805d642: 466f         	mov	r7, sp
 805d644: b082         	sub	sp, #0x8
 805d646: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d648: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d670 <MPU_xQueueGiveMutexRecursive+0x30>
 805d64a: 4780         	blx	r0
 805d64c: b940         	cbnz	r0, 0x805d660 <MPU_xQueueGiveMutexRecursive+0x20> @ imm = #0x10
 805d64e: e7ff         	b	0x805d650 <MPU_xQueueGiveMutexRecursive+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d650: df03         	svc	#0x3
;                 xReturn = xQueueGiveMutexRecursive( xMutex );
 805d652: 9801         	ldr	r0, [sp, #0x4]
 805d654: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d678 <MPU_xQueueGiveMutexRecursive+0x38>
 805d656: 4788         	blx	r1
 805d658: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d65a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d67c <MPU_xQueueGiveMutexRecursive+0x3c>
 805d65c: 4780         	blx	r0
;             }
 805d65e: e004         	b	0x805d66a <MPU_xQueueGiveMutexRecursive+0x2a> @ imm = #0x8
;                 xReturn = xQueueGiveMutexRecursive( xMutex );
 805d660: 9801         	ldr	r0, [sp, #0x4]
 805d662: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d674 <MPU_xQueueGiveMutexRecursive+0x34>
 805d664: 4788         	blx	r1
 805d666: 9000         	str	r0, [sp]
 805d668: e7ff         	b	0x805d66a <MPU_xQueueGiveMutexRecursive+0x2a> @ imm = #-0x2
;             return xReturn;
 805d66a: 9800         	ldr	r0, [sp]
 805d66c: b002         	add	sp, #0x8
 805d66e: bd80         	pop	{r7, pc}

0805d670 <$d.77>:
 805d670: c1 ea 05 08  	.word	0x0805eac1
 805d674: 4d a2 05 08  	.word	0x0805a24d
 805d678: 4d a2 05 08  	.word	0x0805a24d
 805d67c: d1 ea 05 08  	.word	0x0805ead1

0805d680 <MPU_vQueueAddToRegistry>:
;         {
 805d680: b580         	push	{r7, lr}
 805d682: 466f         	mov	r7, sp
 805d684: b082         	sub	sp, #0x8
 805d686: 9001         	str	r0, [sp, #0x4]
 805d688: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d68a: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d6b0 <MPU_vQueueAddToRegistry+0x30>
 805d68c: 4780         	blx	r0
 805d68e: b940         	cbnz	r0, 0x805d6a2 <MPU_vQueueAddToRegistry+0x22> @ imm = #0x10
 805d690: e7ff         	b	0x805d692 <MPU_vQueueAddToRegistry+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d692: df03         	svc	#0x3
;                 vQueueAddToRegistry( xQueue, pcName );
 805d694: 9801         	ldr	r0, [sp, #0x4]
 805d696: 9900         	ldr	r1, [sp]
 805d698: 4a07         	ldr	r2, [pc, #0x1c]         @ 0x805d6b8 <MPU_vQueueAddToRegistry+0x38>
 805d69a: 4790         	blx	r2
;                 portRESET_PRIVILEGE();
 805d69c: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805d6bc <MPU_vQueueAddToRegistry+0x3c>
 805d69e: 4780         	blx	r0
;             }
 805d6a0: e004         	b	0x805d6ac <MPU_vQueueAddToRegistry+0x2c> @ imm = #0x8
;                 vQueueAddToRegistry( xQueue, pcName );
 805d6a2: 9801         	ldr	r0, [sp, #0x4]
 805d6a4: 9900         	ldr	r1, [sp]
 805d6a6: 4a03         	ldr	r2, [pc, #0xc]          @ 0x805d6b4 <MPU_vQueueAddToRegistry+0x34>
 805d6a8: 4790         	blx	r2
 805d6aa: e7ff         	b	0x805d6ac <MPU_vQueueAddToRegistry+0x2c> @ imm = #-0x2
;         }
 805d6ac: b002         	add	sp, #0x8
 805d6ae: bd80         	pop	{r7, pc}

0805d6b0 <$d.79>:
 805d6b0: c1 ea 05 08  	.word	0x0805eac1
 805d6b4: dd b4 05 08  	.word	0x0805b4dd
 805d6b8: dd b4 05 08  	.word	0x0805b4dd
 805d6bc: d1 ea 05 08  	.word	0x0805ead1

0805d6c0 <MPU_vQueueUnregisterQueue>:
;         {
 805d6c0: b580         	push	{r7, lr}
 805d6c2: 466f         	mov	r7, sp
 805d6c4: b082         	sub	sp, #0x8
 805d6c6: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d6c8: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d6ec <MPU_vQueueUnregisterQueue+0x2c>
 805d6ca: 4780         	blx	r0
 805d6cc: b938         	cbnz	r0, 0x805d6de <MPU_vQueueUnregisterQueue+0x1e> @ imm = #0xe
 805d6ce: e7ff         	b	0x805d6d0 <MPU_vQueueUnregisterQueue+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d6d0: df03         	svc	#0x3
;                 vQueueUnregisterQueue( xQueue );
 805d6d2: 9801         	ldr	r0, [sp, #0x4]
 805d6d4: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805d6f4 <MPU_vQueueUnregisterQueue+0x34>
 805d6d6: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805d6d8: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805d6f8 <MPU_vQueueUnregisterQueue+0x38>
 805d6da: 4780         	blx	r0
;             }
 805d6dc: e003         	b	0x805d6e6 <MPU_vQueueUnregisterQueue+0x26> @ imm = #0x6
;                 vQueueUnregisterQueue( xQueue );
 805d6de: 9801         	ldr	r0, [sp, #0x4]
 805d6e0: 4903         	ldr	r1, [pc, #0xc]          @ 0x805d6f0 <MPU_vQueueUnregisterQueue+0x30>
 805d6e2: 4788         	blx	r1
 805d6e4: e7ff         	b	0x805d6e6 <MPU_vQueueUnregisterQueue+0x26> @ imm = #-0x2
;         }
 805d6e6: b002         	add	sp, #0x8
 805d6e8: bd80         	pop	{r7, pc}
 805d6ea: bf00         	nop

0805d6ec <$d.81>:
 805d6ec: c1 ea 05 08  	.word	0x0805eac1
 805d6f0: b5 b3 05 08  	.word	0x0805b3b5
 805d6f4: b5 b3 05 08  	.word	0x0805b3b5
 805d6f8: d1 ea 05 08  	.word	0x0805ead1

0805d6fc <MPU_pcQueueGetName>:
;         {
 805d6fc: b580         	push	{r7, lr}
 805d6fe: 466f         	mov	r7, sp
 805d700: b082         	sub	sp, #0x8
 805d702: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d704: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d72c <MPU_pcQueueGetName+0x30>
 805d706: 4780         	blx	r0
 805d708: b940         	cbnz	r0, 0x805d71c <MPU_pcQueueGetName+0x20> @ imm = #0x10
 805d70a: e7ff         	b	0x805d70c <MPU_pcQueueGetName+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d70c: df03         	svc	#0x3
;                 pcReturn = pcQueueGetName( xQueue );
 805d70e: 9801         	ldr	r0, [sp, #0x4]
 805d710: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d734 <MPU_pcQueueGetName+0x38>
 805d712: 4788         	blx	r1
 805d714: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d716: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d738 <MPU_pcQueueGetName+0x3c>
 805d718: 4780         	blx	r0
;             }
 805d71a: e004         	b	0x805d726 <MPU_pcQueueGetName+0x2a> @ imm = #0x8
;                 pcReturn = pcQueueGetName( xQueue );
 805d71c: 9801         	ldr	r0, [sp, #0x4]
 805d71e: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d730 <MPU_pcQueueGetName+0x34>
 805d720: 4788         	blx	r1
 805d722: 9000         	str	r0, [sp]
 805d724: e7ff         	b	0x805d726 <MPU_pcQueueGetName+0x2a> @ imm = #-0x2
;             return pcReturn;
 805d726: 9800         	ldr	r0, [sp]
 805d728: b002         	add	sp, #0x8
 805d72a: bd80         	pop	{r7, pc}

0805d72c <$d.83>:
 805d72c: c1 ea 05 08  	.word	0x0805eac1
 805d730: 8d b5 05 08  	.word	0x0805b58d
 805d734: 8d b5 05 08  	.word	0x0805b58d
 805d738: d1 ea 05 08  	.word	0x0805ead1

0805d73c <MPU_pvTimerGetTimerID>:
;         {
 805d73c: b580         	push	{r7, lr}
 805d73e: 466f         	mov	r7, sp
 805d740: b082         	sub	sp, #0x8
 805d742: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d744: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d76c <MPU_pvTimerGetTimerID+0x30>
 805d746: 4780         	blx	r0
 805d748: b940         	cbnz	r0, 0x805d75c <MPU_pvTimerGetTimerID+0x20> @ imm = #0x10
 805d74a: e7ff         	b	0x805d74c <MPU_pvTimerGetTimerID+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d74c: df03         	svc	#0x3
;                 pvReturn = pvTimerGetTimerID( xTimer );
 805d74e: 9801         	ldr	r0, [sp, #0x4]
 805d750: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d774 <MPU_pvTimerGetTimerID+0x38>
 805d752: 4788         	blx	r1
 805d754: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d756: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d778 <MPU_pvTimerGetTimerID+0x3c>
 805d758: 4780         	blx	r0
;             }
 805d75a: e004         	b	0x805d766 <MPU_pvTimerGetTimerID+0x2a> @ imm = #0x8
;                 pvReturn = pvTimerGetTimerID( xTimer );
 805d75c: 9801         	ldr	r0, [sp, #0x4]
 805d75e: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d770 <MPU_pvTimerGetTimerID+0x34>
 805d760: 4788         	blx	r1
 805d762: 9000         	str	r0, [sp]
 805d764: e7ff         	b	0x805d766 <MPU_pvTimerGetTimerID+0x2a> @ imm = #-0x2
;             return pvReturn;
 805d766: 9800         	ldr	r0, [sp]
 805d768: b002         	add	sp, #0x8
 805d76a: bd80         	pop	{r7, pc}

0805d76c <$d.87>:
 805d76c: c1 ea 05 08  	.word	0x0805eac1
 805d770: 39 8c 05 08  	.word	0x08058c39
 805d774: 39 8c 05 08  	.word	0x08058c39
 805d778: d1 ea 05 08  	.word	0x0805ead1

0805d77c <MPU_vTimerSetTimerID>:
;         {
 805d77c: b580         	push	{r7, lr}
 805d77e: 466f         	mov	r7, sp
 805d780: b082         	sub	sp, #0x8
 805d782: 9001         	str	r0, [sp, #0x4]
 805d784: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d786: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d7ac <MPU_vTimerSetTimerID+0x30>
 805d788: 4780         	blx	r0
 805d78a: b940         	cbnz	r0, 0x805d79e <MPU_vTimerSetTimerID+0x22> @ imm = #0x10
 805d78c: e7ff         	b	0x805d78e <MPU_vTimerSetTimerID+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d78e: df03         	svc	#0x3
;                 vTimerSetTimerID( xTimer, pvNewID );
 805d790: 9801         	ldr	r0, [sp, #0x4]
 805d792: 9900         	ldr	r1, [sp]
 805d794: 4a07         	ldr	r2, [pc, #0x1c]         @ 0x805d7b4 <MPU_vTimerSetTimerID+0x38>
 805d796: 4790         	blx	r2
;                 portRESET_PRIVILEGE();
 805d798: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805d7b8 <MPU_vTimerSetTimerID+0x3c>
 805d79a: 4780         	blx	r0
;             }
 805d79c: e004         	b	0x805d7a8 <MPU_vTimerSetTimerID+0x2c> @ imm = #0x8
;                 vTimerSetTimerID( xTimer, pvNewID );
 805d79e: 9801         	ldr	r0, [sp, #0x4]
 805d7a0: 9900         	ldr	r1, [sp]
 805d7a2: 4a03         	ldr	r2, [pc, #0xc]          @ 0x805d7b0 <MPU_vTimerSetTimerID+0x34>
 805d7a4: 4790         	blx	r2
 805d7a6: e7ff         	b	0x805d7a8 <MPU_vTimerSetTimerID+0x2c> @ imm = #-0x2
;         }
 805d7a8: b002         	add	sp, #0x8
 805d7aa: bd80         	pop	{r7, pc}

0805d7ac <$d.89>:
 805d7ac: c1 ea 05 08  	.word	0x0805eac1
 805d7b0: 75 8c 05 08  	.word	0x08058c75
 805d7b4: 75 8c 05 08  	.word	0x08058c75
 805d7b8: d1 ea 05 08  	.word	0x0805ead1

0805d7bc <MPU_xTimerIsTimerActive>:
;         {
 805d7bc: b580         	push	{r7, lr}
 805d7be: 466f         	mov	r7, sp
 805d7c0: b082         	sub	sp, #0x8
 805d7c2: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d7c4: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d7ec <MPU_xTimerIsTimerActive+0x30>
 805d7c6: 4780         	blx	r0
 805d7c8: b940         	cbnz	r0, 0x805d7dc <MPU_xTimerIsTimerActive+0x20> @ imm = #0x10
 805d7ca: e7ff         	b	0x805d7cc <MPU_xTimerIsTimerActive+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d7cc: df03         	svc	#0x3
;                 xReturn = xTimerIsTimerActive( xTimer );
 805d7ce: 9801         	ldr	r0, [sp, #0x4]
 805d7d0: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d7f4 <MPU_xTimerIsTimerActive+0x38>
 805d7d2: 4788         	blx	r1
 805d7d4: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d7d6: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d7f8 <MPU_xTimerIsTimerActive+0x3c>
 805d7d8: 4780         	blx	r0
;             }
 805d7da: e004         	b	0x805d7e6 <MPU_xTimerIsTimerActive+0x2a> @ imm = #0x8
;                 xReturn = xTimerIsTimerActive( xTimer );
 805d7dc: 9801         	ldr	r0, [sp, #0x4]
 805d7de: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d7f0 <MPU_xTimerIsTimerActive+0x34>
 805d7e0: 4788         	blx	r1
 805d7e2: 9000         	str	r0, [sp]
 805d7e4: e7ff         	b	0x805d7e6 <MPU_xTimerIsTimerActive+0x2a> @ imm = #-0x2
;             return xReturn;
 805d7e6: 9800         	ldr	r0, [sp]
 805d7e8: b002         	add	sp, #0x8
 805d7ea: bd80         	pop	{r7, pc}

0805d7ec <$d.91>:
 805d7ec: c1 ea 05 08  	.word	0x0805eac1
 805d7f0: ed 8b 05 08  	.word	0x08058bed
 805d7f4: ed 8b 05 08  	.word	0x08058bed
 805d7f8: d1 ea 05 08  	.word	0x0805ead1

0805d7fc <MPU_xTimerGetTimerDaemonTaskHandle>:
;         {
 805d7fc: b580         	push	{r7, lr}
 805d7fe: 466f         	mov	r7, sp
 805d800: b082         	sub	sp, #0x8
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d802: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d828 <MPU_xTimerGetTimerDaemonTaskHandle+0x2c>
 805d804: 4780         	blx	r0
 805d806: b938         	cbnz	r0, 0x805d818 <MPU_xTimerGetTimerDaemonTaskHandle+0x1c> @ imm = #0xe
 805d808: e7ff         	b	0x805d80a <MPU_xTimerGetTimerDaemonTaskHandle+0xe> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d80a: df03         	svc	#0x3
;                 xReturn = xTimerGetTimerDaemonTaskHandle();
 805d80c: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d830 <MPU_xTimerGetTimerDaemonTaskHandle+0x34>
 805d80e: 4780         	blx	r0
 805d810: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d812: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d834 <MPU_xTimerGetTimerDaemonTaskHandle+0x38>
 805d814: 4780         	blx	r0
;             }
 805d816: e003         	b	0x805d820 <MPU_xTimerGetTimerDaemonTaskHandle+0x24> @ imm = #0x6
;                 xReturn = xTimerGetTimerDaemonTaskHandle();
 805d818: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d82c <MPU_xTimerGetTimerDaemonTaskHandle+0x30>
 805d81a: 4780         	blx	r0
 805d81c: 9001         	str	r0, [sp, #0x4]
 805d81e: e7ff         	b	0x805d820 <MPU_xTimerGetTimerDaemonTaskHandle+0x24> @ imm = #-0x2
;             return xReturn;
 805d820: 9801         	ldr	r0, [sp, #0x4]
 805d822: b002         	add	sp, #0x8
 805d824: bd80         	pop	{r7, pc}
 805d826: bf00         	nop

0805d828 <$d.93>:
 805d828: c1 ea 05 08  	.word	0x0805eac1
 805d82c: 7d 8a 05 08  	.word	0x08058a7d
 805d830: 7d 8a 05 08  	.word	0x08058a7d
 805d834: d1 ea 05 08  	.word	0x0805ead1

0805d838 <MPU_vTimerSetReloadMode>:
;         {
 805d838: b580         	push	{r7, lr}
 805d83a: 466f         	mov	r7, sp
 805d83c: b082         	sub	sp, #0x8
 805d83e: 9001         	str	r0, [sp, #0x4]
 805d840: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d842: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d868 <MPU_vTimerSetReloadMode+0x30>
 805d844: 4780         	blx	r0
 805d846: b940         	cbnz	r0, 0x805d85a <MPU_vTimerSetReloadMode+0x22> @ imm = #0x10
 805d848: e7ff         	b	0x805d84a <MPU_vTimerSetReloadMode+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d84a: df03         	svc	#0x3
;                 vTimerSetReloadMode( xTimer, uxAutoReload );
 805d84c: 9801         	ldr	r0, [sp, #0x4]
 805d84e: 9900         	ldr	r1, [sp]
 805d850: 4a07         	ldr	r2, [pc, #0x1c]         @ 0x805d870 <MPU_vTimerSetReloadMode+0x38>
 805d852: 4790         	blx	r2
;                 portRESET_PRIVILEGE();
 805d854: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805d874 <MPU_vTimerSetReloadMode+0x3c>
 805d856: 4780         	blx	r0
;             }
 805d858: e004         	b	0x805d864 <MPU_vTimerSetReloadMode+0x2c> @ imm = #0x8
;                 vTimerSetReloadMode( xTimer, uxAutoReload );
 805d85a: 9801         	ldr	r0, [sp, #0x4]
 805d85c: 9900         	ldr	r1, [sp]
 805d85e: 4a03         	ldr	r2, [pc, #0xc]          @ 0x805d86c <MPU_vTimerSetReloadMode+0x34>
 805d860: 4790         	blx	r2
 805d862: e7ff         	b	0x805d864 <MPU_vTimerSetReloadMode+0x2c> @ imm = #-0x2
;         }
 805d864: b002         	add	sp, #0x8
 805d866: bd80         	pop	{r7, pc}

0805d868 <$d.95>:
 805d868: c1 ea 05 08  	.word	0x0805eac1
 805d86c: d1 8a 05 08  	.word	0x08058ad1
 805d870: d1 8a 05 08  	.word	0x08058ad1
 805d874: d1 ea 05 08  	.word	0x0805ead1

0805d878 <MPU_uxTimerGetReloadMode>:
;         {
 805d878: b580         	push	{r7, lr}
 805d87a: 466f         	mov	r7, sp
 805d87c: b082         	sub	sp, #0x8
 805d87e: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d880: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d8a8 <MPU_uxTimerGetReloadMode+0x30>
 805d882: 4780         	blx	r0
 805d884: b940         	cbnz	r0, 0x805d898 <MPU_uxTimerGetReloadMode+0x20> @ imm = #0x10
 805d886: e7ff         	b	0x805d888 <MPU_uxTimerGetReloadMode+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d888: df03         	svc	#0x3
;                 uxReturn = uxTimerGetReloadMode( xTimer );
 805d88a: 9801         	ldr	r0, [sp, #0x4]
 805d88c: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d8b0 <MPU_uxTimerGetReloadMode+0x38>
 805d88e: 4788         	blx	r1
 805d890: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d892: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d8b4 <MPU_uxTimerGetReloadMode+0x3c>
 805d894: 4780         	blx	r0
;             }
 805d896: e004         	b	0x805d8a2 <MPU_uxTimerGetReloadMode+0x2a> @ imm = #0x8
;                 uxReturn = uxTimerGetReloadMode( xTimer );
 805d898: 9801         	ldr	r0, [sp, #0x4]
 805d89a: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d8ac <MPU_uxTimerGetReloadMode+0x34>
 805d89c: 4788         	blx	r1
 805d89e: 9000         	str	r0, [sp]
 805d8a0: e7ff         	b	0x805d8a2 <MPU_uxTimerGetReloadMode+0x2a> @ imm = #-0x2
;             return uxReturn;
 805d8a2: 9800         	ldr	r0, [sp]
 805d8a4: b002         	add	sp, #0x8
 805d8a6: bd80         	pop	{r7, pc}

0805d8a8 <$d.97>:
 805d8a8: c1 ea 05 08  	.word	0x0805eac1
 805d8ac: 7d 8b 05 08  	.word	0x08058b7d
 805d8b0: 7d 8b 05 08  	.word	0x08058b7d
 805d8b4: d1 ea 05 08  	.word	0x0805ead1

0805d8b8 <MPU_pcTimerGetName>:
;         {
 805d8b8: b580         	push	{r7, lr}
 805d8ba: 466f         	mov	r7, sp
 805d8bc: b082         	sub	sp, #0x8
 805d8be: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d8c0: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d8e8 <MPU_pcTimerGetName+0x30>
 805d8c2: 4780         	blx	r0
 805d8c4: b940         	cbnz	r0, 0x805d8d8 <MPU_pcTimerGetName+0x20> @ imm = #0x10
 805d8c6: e7ff         	b	0x805d8c8 <MPU_pcTimerGetName+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d8c8: df03         	svc	#0x3
;                 pcReturn = pcTimerGetName( xTimer );
 805d8ca: 9801         	ldr	r0, [sp, #0x4]
 805d8cc: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d8f0 <MPU_pcTimerGetName+0x38>
 805d8ce: 4788         	blx	r1
 805d8d0: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d8d2: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d8f4 <MPU_pcTimerGetName+0x3c>
 805d8d4: 4780         	blx	r0
;             }
 805d8d6: e004         	b	0x805d8e2 <MPU_pcTimerGetName+0x2a> @ imm = #0x8
;                 pcReturn = pcTimerGetName( xTimer );
 805d8d8: 9801         	ldr	r0, [sp, #0x4]
 805d8da: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d8ec <MPU_pcTimerGetName+0x34>
 805d8dc: 4788         	blx	r1
 805d8de: 9000         	str	r0, [sp]
 805d8e0: e7ff         	b	0x805d8e2 <MPU_pcTimerGetName+0x2a> @ imm = #-0x2
;             return pcReturn;
 805d8e2: 9800         	ldr	r0, [sp]
 805d8e4: b002         	add	sp, #0x8
 805d8e6: bd80         	pop	{r7, pc}

0805d8e8 <$d.99>:
 805d8e8: c1 ea 05 08  	.word	0x0805eac1
 805d8ec: c5 8b 05 08  	.word	0x08058bc5
 805d8f0: c5 8b 05 08  	.word	0x08058bc5
 805d8f4: d1 ea 05 08  	.word	0x0805ead1

0805d8f8 <MPU_xTimerGetPeriod>:
;         {
 805d8f8: b580         	push	{r7, lr}
 805d8fa: 466f         	mov	r7, sp
 805d8fc: b082         	sub	sp, #0x8
 805d8fe: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d900: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d928 <MPU_xTimerGetPeriod+0x30>
 805d902: 4780         	blx	r0
 805d904: b940         	cbnz	r0, 0x805d918 <MPU_xTimerGetPeriod+0x20> @ imm = #0x10
 805d906: e7ff         	b	0x805d908 <MPU_xTimerGetPeriod+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d908: df03         	svc	#0x3
;                 xReturn = xTimerGetPeriod( xTimer );
 805d90a: 9801         	ldr	r0, [sp, #0x4]
 805d90c: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d930 <MPU_xTimerGetPeriod+0x38>
 805d90e: 4788         	blx	r1
 805d910: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d912: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d934 <MPU_xTimerGetPeriod+0x3c>
 805d914: 4780         	blx	r0
;             }
 805d916: e004         	b	0x805d922 <MPU_xTimerGetPeriod+0x2a> @ imm = #0x8
;                 xReturn = xTimerGetPeriod( xTimer );
 805d918: 9801         	ldr	r0, [sp, #0x4]
 805d91a: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d92c <MPU_xTimerGetPeriod+0x34>
 805d91c: 4788         	blx	r1
 805d91e: 9000         	str	r0, [sp]
 805d920: e7ff         	b	0x805d922 <MPU_xTimerGetPeriod+0x2a> @ imm = #-0x2
;             return xReturn;
 805d922: 9800         	ldr	r0, [sp]
 805d924: b002         	add	sp, #0x8
 805d926: bd80         	pop	{r7, pc}

0805d928 <$d.101>:
 805d928: c1 ea 05 08  	.word	0x0805eac1
 805d92c: a9 8a 05 08  	.word	0x08058aa9
 805d930: a9 8a 05 08  	.word	0x08058aa9
 805d934: d1 ea 05 08  	.word	0x0805ead1

0805d938 <MPU_xTimerGetExpiryTime>:
;         {
 805d938: b580         	push	{r7, lr}
 805d93a: 466f         	mov	r7, sp
 805d93c: b082         	sub	sp, #0x8
 805d93e: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d940: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d968 <MPU_xTimerGetExpiryTime+0x30>
 805d942: 4780         	blx	r0
 805d944: b940         	cbnz	r0, 0x805d958 <MPU_xTimerGetExpiryTime+0x20> @ imm = #0x10
 805d946: e7ff         	b	0x805d948 <MPU_xTimerGetExpiryTime+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d948: df03         	svc	#0x3
;                 xReturn = xTimerGetExpiryTime( xTimer );
 805d94a: 9801         	ldr	r0, [sp, #0x4]
 805d94c: 4908         	ldr	r1, [pc, #0x20]         @ 0x805d970 <MPU_xTimerGetExpiryTime+0x38>
 805d94e: 4788         	blx	r1
 805d950: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805d952: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d974 <MPU_xTimerGetExpiryTime+0x3c>
 805d954: 4780         	blx	r0
;             }
 805d956: e004         	b	0x805d962 <MPU_xTimerGetExpiryTime+0x2a> @ imm = #0x8
;                 xReturn = xTimerGetExpiryTime( xTimer );
 805d958: 9801         	ldr	r0, [sp, #0x4]
 805d95a: 4904         	ldr	r1, [pc, #0x10]         @ 0x805d96c <MPU_xTimerGetExpiryTime+0x34>
 805d95c: 4788         	blx	r1
 805d95e: 9000         	str	r0, [sp]
 805d960: e7ff         	b	0x805d962 <MPU_xTimerGetExpiryTime+0x2a> @ imm = #-0x2
;             return xReturn;
 805d962: 9800         	ldr	r0, [sp]
 805d964: b002         	add	sp, #0x8
 805d966: bd80         	pop	{r7, pc}

0805d968 <$d.103>:
 805d968: c1 ea 05 08  	.word	0x0805eac1
 805d96c: 99 8b 05 08  	.word	0x08058b99
 805d970: 99 8b 05 08  	.word	0x08058b99
 805d974: d1 ea 05 08  	.word	0x0805ead1

0805d978 <MPU_xTimerGenericCommandFromTask>:
;         {
 805d978: b580         	push	{r7, lr}
 805d97a: 466f         	mov	r7, sp
 805d97c: b086         	sub	sp, #0x18
 805d97e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d982: 9005         	str	r0, [sp, #0x14]
 805d984: 9104         	str	r1, [sp, #0x10]
 805d986: 9203         	str	r2, [sp, #0xc]
 805d988: 9302         	str	r3, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805d98a: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805d9d8 <MPU_xTimerGenericCommandFromTask+0x60>
 805d98c: 4780         	blx	r0
 805d98e: b988         	cbnz	r0, 0x805d9b4 <MPU_xTimerGenericCommandFromTask+0x3c> @ imm = #0x22
 805d990: e7ff         	b	0x805d992 <MPU_xTimerGenericCommandFromTask+0x1a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805d992: df03         	svc	#0x3
;                 xReturn = xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 805d994: 9805         	ldr	r0, [sp, #0x14]
 805d996: 9904         	ldr	r1, [sp, #0x10]
 805d998: 9a03         	ldr	r2, [sp, #0xc]
 805d99a: 9b02         	ldr	r3, [sp, #0x8]
 805d99c: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d9a0: 46ee         	mov	lr, sp
 805d9a2: f8ce c000    	str.w	r12, [lr]
 805d9a6: f8df c038    	ldr.w	r12, [pc, #0x38]        @ 0x805d9e0 <MPU_xTimerGenericCommandFromTask+0x68>
 805d9aa: 47e0         	blx	r12
 805d9ac: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805d9ae: 480d         	ldr	r0, [pc, #0x34]         @ 0x805d9e4 <MPU_xTimerGenericCommandFromTask+0x6c>
 805d9b0: 4780         	blx	r0
;             }
 805d9b2: e00d         	b	0x805d9d0 <MPU_xTimerGenericCommandFromTask+0x58> @ imm = #0x1a
;                 xReturn = xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 805d9b4: 9805         	ldr	r0, [sp, #0x14]
 805d9b6: 9904         	ldr	r1, [sp, #0x10]
 805d9b8: 9a03         	ldr	r2, [sp, #0xc]
 805d9ba: 9b02         	ldr	r3, [sp, #0x8]
 805d9bc: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d9c0: 46ee         	mov	lr, sp
 805d9c2: f8ce c000    	str.w	r12, [lr]
 805d9c6: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805d9dc <MPU_xTimerGenericCommandFromTask+0x64>
 805d9ca: 47e0         	blx	r12
 805d9cc: 9001         	str	r0, [sp, #0x4]
 805d9ce: e7ff         	b	0x805d9d0 <MPU_xTimerGenericCommandFromTask+0x58> @ imm = #-0x2
;             return xReturn;
 805d9d0: 9801         	ldr	r0, [sp, #0x4]
 805d9d2: b006         	add	sp, #0x18
 805d9d4: bd80         	pop	{r7, pc}
 805d9d6: bf00         	nop

0805d9d8 <$d.105>:
 805d9d8: c1 ea 05 08  	.word	0x0805eac1
 805d9dc: 41 89 05 08  	.word	0x08058941
 805d9e0: 41 89 05 08  	.word	0x08058941
 805d9e4: d1 ea 05 08  	.word	0x0805ead1

0805d9e8 <MPU_xEventGroupWaitBits>:
;     {
 805d9e8: b580         	push	{r7, lr}
 805d9ea: 466f         	mov	r7, sp
 805d9ec: b086         	sub	sp, #0x18
 805d9ee: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d9f2: 9005         	str	r0, [sp, #0x14]
 805d9f4: 9104         	str	r1, [sp, #0x10]
 805d9f6: 9203         	str	r2, [sp, #0xc]
 805d9f8: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805d9fa: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805da48 <MPU_xEventGroupWaitBits+0x60>
 805d9fc: 4780         	blx	r0
 805d9fe: b988         	cbnz	r0, 0x805da24 <MPU_xEventGroupWaitBits+0x3c> @ imm = #0x22
 805da00: e7ff         	b	0x805da02 <MPU_xEventGroupWaitBits+0x1a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805da02: df03         	svc	#0x3
;             xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 805da04: 9805         	ldr	r0, [sp, #0x14]
 805da06: 9904         	ldr	r1, [sp, #0x10]
 805da08: 9a03         	ldr	r2, [sp, #0xc]
 805da0a: 9b02         	ldr	r3, [sp, #0x8]
 805da0c: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805da10: 46ee         	mov	lr, sp
 805da12: f8ce c000    	str.w	r12, [lr]
 805da16: f8df c038    	ldr.w	r12, [pc, #0x38]        @ 0x805da50 <MPU_xEventGroupWaitBits+0x68>
 805da1a: 47e0         	blx	r12
 805da1c: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805da1e: 480d         	ldr	r0, [pc, #0x34]         @ 0x805da54 <MPU_xEventGroupWaitBits+0x6c>
 805da20: 4780         	blx	r0
;         }
 805da22: e00d         	b	0x805da40 <MPU_xEventGroupWaitBits+0x58> @ imm = #0x1a
;             xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 805da24: 9805         	ldr	r0, [sp, #0x14]
 805da26: 9904         	ldr	r1, [sp, #0x10]
 805da28: 9a03         	ldr	r2, [sp, #0xc]
 805da2a: 9b02         	ldr	r3, [sp, #0x8]
 805da2c: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805da30: 46ee         	mov	lr, sp
 805da32: f8ce c000    	str.w	r12, [lr]
 805da36: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805da4c <MPU_xEventGroupWaitBits+0x64>
 805da3a: 47e0         	blx	r12
 805da3c: 9001         	str	r0, [sp, #0x4]
 805da3e: e7ff         	b	0x805da40 <MPU_xEventGroupWaitBits+0x58> @ imm = #-0x2
;         return xReturn;
 805da40: 9801         	ldr	r0, [sp, #0x4]
 805da42: b006         	add	sp, #0x18
 805da44: bd80         	pop	{r7, pc}
 805da46: bf00         	nop

0805da48 <$d.109>:
 805da48: c1 ea 05 08  	.word	0x0805eac1
 805da4c: a5 9a 05 08  	.word	0x08059aa5
 805da50: a5 9a 05 08  	.word	0x08059aa5
 805da54: d1 ea 05 08  	.word	0x0805ead1

0805da58 <MPU_xEventGroupClearBits>:
;     {
 805da58: b580         	push	{r7, lr}
 805da5a: 466f         	mov	r7, sp
 805da5c: b084         	sub	sp, #0x10
 805da5e: 9003         	str	r0, [sp, #0xc]
 805da60: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805da62: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805da90 <MPU_xEventGroupClearBits+0x38>
 805da64: 4780         	blx	r0
 805da66: b948         	cbnz	r0, 0x805da7c <MPU_xEventGroupClearBits+0x24> @ imm = #0x12
 805da68: e7ff         	b	0x805da6a <MPU_xEventGroupClearBits+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805da6a: df03         	svc	#0x3
;             xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 805da6c: 9803         	ldr	r0, [sp, #0xc]
 805da6e: 9902         	ldr	r1, [sp, #0x8]
 805da70: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805da98 <MPU_xEventGroupClearBits+0x40>
 805da72: 4790         	blx	r2
 805da74: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805da76: 4809         	ldr	r0, [pc, #0x24]         @ 0x805da9c <MPU_xEventGroupClearBits+0x44>
 805da78: 4780         	blx	r0
;         }
 805da7a: e005         	b	0x805da88 <MPU_xEventGroupClearBits+0x30> @ imm = #0xa
;             xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 805da7c: 9803         	ldr	r0, [sp, #0xc]
 805da7e: 9902         	ldr	r1, [sp, #0x8]
 805da80: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805da94 <MPU_xEventGroupClearBits+0x3c>
 805da82: 4790         	blx	r2
 805da84: 9001         	str	r0, [sp, #0x4]
 805da86: e7ff         	b	0x805da88 <MPU_xEventGroupClearBits+0x30> @ imm = #-0x2
;         return xReturn;
 805da88: 9801         	ldr	r0, [sp, #0x4]
 805da8a: b004         	add	sp, #0x10
 805da8c: bd80         	pop	{r7, pc}
 805da8e: bf00         	nop

0805da90 <$d.111>:
 805da90: c1 ea 05 08  	.word	0x0805eac1
 805da94: 91 9c 05 08  	.word	0x08059c91
 805da98: 91 9c 05 08  	.word	0x08059c91
 805da9c: d1 ea 05 08  	.word	0x0805ead1

0805daa0 <MPU_xEventGroupSetBits>:
;     {
 805daa0: b580         	push	{r7, lr}
 805daa2: 466f         	mov	r7, sp
 805daa4: b084         	sub	sp, #0x10
 805daa6: 9003         	str	r0, [sp, #0xc]
 805daa8: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805daaa: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805dad8 <MPU_xEventGroupSetBits+0x38>
 805daac: 4780         	blx	r0
 805daae: b948         	cbnz	r0, 0x805dac4 <MPU_xEventGroupSetBits+0x24> @ imm = #0x12
 805dab0: e7ff         	b	0x805dab2 <MPU_xEventGroupSetBits+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dab2: df03         	svc	#0x3
;             xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 805dab4: 9803         	ldr	r0, [sp, #0xc]
 805dab6: 9902         	ldr	r1, [sp, #0x8]
 805dab8: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805dae0 <MPU_xEventGroupSetBits+0x40>
 805daba: 4790         	blx	r2
 805dabc: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805dabe: 4809         	ldr	r0, [pc, #0x24]         @ 0x805dae4 <MPU_xEventGroupSetBits+0x44>
 805dac0: 4780         	blx	r0
;         }
 805dac2: e005         	b	0x805dad0 <MPU_xEventGroupSetBits+0x30> @ imm = #0xa
;             xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 805dac4: 9803         	ldr	r0, [sp, #0xc]
 805dac6: 9902         	ldr	r1, [sp, #0x8]
 805dac8: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805dadc <MPU_xEventGroupSetBits+0x3c>
 805daca: 4790         	blx	r2
 805dacc: 9001         	str	r0, [sp, #0x4]
 805dace: e7ff         	b	0x805dad0 <MPU_xEventGroupSetBits+0x30> @ imm = #-0x2
;         return xReturn;
 805dad0: 9801         	ldr	r0, [sp, #0x4]
 805dad2: b004         	add	sp, #0x10
 805dad4: bd80         	pop	{r7, pc}
 805dad6: bf00         	nop

0805dad8 <$d.113>:
 805dad8: c1 ea 05 08  	.word	0x0805eac1
 805dadc: 91 99 05 08  	.word	0x08059991
 805dae0: 91 99 05 08  	.word	0x08059991
 805dae4: d1 ea 05 08  	.word	0x0805ead1

0805dae8 <MPU_xEventGroupSync>:
;     {
 805dae8: b580         	push	{r7, lr}
 805daea: 466f         	mov	r7, sp
 805daec: b086         	sub	sp, #0x18
 805daee: 9005         	str	r0, [sp, #0x14]
 805daf0: 9104         	str	r1, [sp, #0x10]
 805daf2: 9203         	str	r2, [sp, #0xc]
 805daf4: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805daf6: 480e         	ldr	r0, [pc, #0x38]         @ 0x805db30 <MPU_xEventGroupSync+0x48>
 805daf8: 4780         	blx	r0
 805dafa: b960         	cbnz	r0, 0x805db16 <MPU_xEventGroupSync+0x2e> @ imm = #0x18
 805dafc: e7ff         	b	0x805dafe <MPU_xEventGroupSync+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dafe: df03         	svc	#0x3
;             xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 805db00: 9805         	ldr	r0, [sp, #0x14]
 805db02: 9904         	ldr	r1, [sp, #0x10]
 805db04: 9a03         	ldr	r2, [sp, #0xc]
 805db06: 9b02         	ldr	r3, [sp, #0x8]
 805db08: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805db38 <MPU_xEventGroupSync+0x50>
 805db0c: 47e0         	blx	r12
 805db0e: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805db10: 480a         	ldr	r0, [pc, #0x28]         @ 0x805db3c <MPU_xEventGroupSync+0x54>
 805db12: 4780         	blx	r0
;         }
 805db14: e008         	b	0x805db28 <MPU_xEventGroupSync+0x40> @ imm = #0x10
;             xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 805db16: 9805         	ldr	r0, [sp, #0x14]
 805db18: 9904         	ldr	r1, [sp, #0x10]
 805db1a: 9a03         	ldr	r2, [sp, #0xc]
 805db1c: 9b02         	ldr	r3, [sp, #0x8]
 805db1e: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805db34 <MPU_xEventGroupSync+0x4c>
 805db22: 47e0         	blx	r12
 805db24: 9001         	str	r0, [sp, #0x4]
 805db26: e7ff         	b	0x805db28 <MPU_xEventGroupSync+0x40> @ imm = #-0x2
;         return xReturn;
 805db28: 9801         	ldr	r0, [sp, #0x4]
 805db2a: b006         	add	sp, #0x18
 805db2c: bd80         	pop	{r7, pc}
 805db2e: bf00         	nop

0805db30 <$d.115>:
 805db30: c1 ea 05 08  	.word	0x0805eac1
 805db34: 31 98 05 08  	.word	0x08059831
 805db38: 31 98 05 08  	.word	0x08059831
 805db3c: d1 ea 05 08  	.word	0x0805ead1

0805db40 <MPU_xStreamBufferSend>:
;     {
 805db40: b580         	push	{r7, lr}
 805db42: 466f         	mov	r7, sp
 805db44: b086         	sub	sp, #0x18
 805db46: 9005         	str	r0, [sp, #0x14]
 805db48: 9104         	str	r1, [sp, #0x10]
 805db4a: 9203         	str	r2, [sp, #0xc]
 805db4c: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805db4e: 480e         	ldr	r0, [pc, #0x38]         @ 0x805db88 <MPU_xStreamBufferSend+0x48>
 805db50: 4780         	blx	r0
 805db52: b960         	cbnz	r0, 0x805db6e <MPU_xStreamBufferSend+0x2e> @ imm = #0x18
 805db54: e7ff         	b	0x805db56 <MPU_xStreamBufferSend+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805db56: df03         	svc	#0x3
;             xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 805db58: 9805         	ldr	r0, [sp, #0x14]
 805db5a: 9904         	ldr	r1, [sp, #0x10]
 805db5c: 9a03         	ldr	r2, [sp, #0xc]
 805db5e: 9b02         	ldr	r3, [sp, #0x8]
 805db60: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805db90 <MPU_xStreamBufferSend+0x50>
 805db64: 47e0         	blx	r12
 805db66: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805db68: 480a         	ldr	r0, [pc, #0x28]         @ 0x805db94 <MPU_xStreamBufferSend+0x54>
 805db6a: 4780         	blx	r0
;         }
 805db6c: e008         	b	0x805db80 <MPU_xStreamBufferSend+0x40> @ imm = #0x10
;             xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 805db6e: 9805         	ldr	r0, [sp, #0x14]
 805db70: 9904         	ldr	r1, [sp, #0x10]
 805db72: 9a03         	ldr	r2, [sp, #0xc]
 805db74: 9b02         	ldr	r3, [sp, #0x8]
 805db76: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805db8c <MPU_xStreamBufferSend+0x4c>
 805db7a: 47e0         	blx	r12
 805db7c: 9001         	str	r0, [sp, #0x4]
 805db7e: e7ff         	b	0x805db80 <MPU_xStreamBufferSend+0x40> @ imm = #-0x2
;         return xReturn;
 805db80: 9801         	ldr	r0, [sp, #0x4]
 805db82: b006         	add	sp, #0x18
 805db84: bd80         	pop	{r7, pc}
 805db86: bf00         	nop

0805db88 <$d.119>:
 805db88: c1 ea 05 08  	.word	0x0805eac1
 805db8c: a9 b9 05 08  	.word	0x0805b9a9
 805db90: a9 b9 05 08  	.word	0x0805b9a9
 805db94: d1 ea 05 08  	.word	0x0805ead1

0805db98 <MPU_xStreamBufferNextMessageLengthBytes>:
;     {
 805db98: b580         	push	{r7, lr}
 805db9a: 466f         	mov	r7, sp
 805db9c: b082         	sub	sp, #0x8
 805db9e: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805dba0: 4809         	ldr	r0, [pc, #0x24]         @ 0x805dbc8 <MPU_xStreamBufferNextMessageLengthBytes+0x30>
 805dba2: 4780         	blx	r0
 805dba4: b940         	cbnz	r0, 0x805dbb8 <MPU_xStreamBufferNextMessageLengthBytes+0x20> @ imm = #0x10
 805dba6: e7ff         	b	0x805dba8 <MPU_xStreamBufferNextMessageLengthBytes+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dba8: df03         	svc	#0x3
;             xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 805dbaa: 9801         	ldr	r0, [sp, #0x4]
 805dbac: 4908         	ldr	r1, [pc, #0x20]         @ 0x805dbd0 <MPU_xStreamBufferNextMessageLengthBytes+0x38>
 805dbae: 4788         	blx	r1
 805dbb0: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805dbb2: 4808         	ldr	r0, [pc, #0x20]         @ 0x805dbd4 <MPU_xStreamBufferNextMessageLengthBytes+0x3c>
 805dbb4: 4780         	blx	r0
;         }
 805dbb6: e004         	b	0x805dbc2 <MPU_xStreamBufferNextMessageLengthBytes+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 805dbb8: 9801         	ldr	r0, [sp, #0x4]
 805dbba: 4904         	ldr	r1, [pc, #0x10]         @ 0x805dbcc <MPU_xStreamBufferNextMessageLengthBytes+0x34>
 805dbbc: 4788         	blx	r1
 805dbbe: 9000         	str	r0, [sp]
 805dbc0: e7ff         	b	0x805dbc2 <MPU_xStreamBufferNextMessageLengthBytes+0x2a> @ imm = #-0x2
;         return xReturn;
 805dbc2: 9800         	ldr	r0, [sp]
 805dbc4: b002         	add	sp, #0x8
 805dbc6: bd80         	pop	{r7, pc}

0805dbc8 <$d.121>:
 805dbc8: c1 ea 05 08  	.word	0x0805eac1
 805dbcc: 01 bf 05 08  	.word	0x0805bf01
 805dbd0: 01 bf 05 08  	.word	0x0805bf01
 805dbd4: d1 ea 05 08  	.word	0x0805ead1

0805dbd8 <MPU_xStreamBufferReceive>:
;     {
 805dbd8: b580         	push	{r7, lr}
 805dbda: 466f         	mov	r7, sp
 805dbdc: b086         	sub	sp, #0x18
 805dbde: 9005         	str	r0, [sp, #0x14]
 805dbe0: 9104         	str	r1, [sp, #0x10]
 805dbe2: 9203         	str	r2, [sp, #0xc]
 805dbe4: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805dbe6: 480e         	ldr	r0, [pc, #0x38]         @ 0x805dc20 <MPU_xStreamBufferReceive+0x48>
 805dbe8: 4780         	blx	r0
 805dbea: b960         	cbnz	r0, 0x805dc06 <MPU_xStreamBufferReceive+0x2e> @ imm = #0x18
 805dbec: e7ff         	b	0x805dbee <MPU_xStreamBufferReceive+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dbee: df03         	svc	#0x3
;             xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 805dbf0: 9805         	ldr	r0, [sp, #0x14]
 805dbf2: 9904         	ldr	r1, [sp, #0x10]
 805dbf4: 9a03         	ldr	r2, [sp, #0xc]
 805dbf6: 9b02         	ldr	r3, [sp, #0x8]
 805dbf8: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805dc28 <MPU_xStreamBufferReceive+0x50>
 805dbfc: 47e0         	blx	r12
 805dbfe: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805dc00: 480a         	ldr	r0, [pc, #0x28]         @ 0x805dc2c <MPU_xStreamBufferReceive+0x54>
 805dc02: 4780         	blx	r0
;         }
 805dc04: e008         	b	0x805dc18 <MPU_xStreamBufferReceive+0x40> @ imm = #0x10
;             xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 805dc06: 9805         	ldr	r0, [sp, #0x14]
 805dc08: 9904         	ldr	r1, [sp, #0x10]
 805dc0a: 9a03         	ldr	r2, [sp, #0xc]
 805dc0c: 9b02         	ldr	r3, [sp, #0x8]
 805dc0e: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805dc24 <MPU_xStreamBufferReceive+0x4c>
 805dc12: 47e0         	blx	r12
 805dc14: 9001         	str	r0, [sp, #0x4]
 805dc16: e7ff         	b	0x805dc18 <MPU_xStreamBufferReceive+0x40> @ imm = #-0x2
;         return xReturn;
 805dc18: 9801         	ldr	r0, [sp, #0x4]
 805dc1a: b006         	add	sp, #0x18
 805dc1c: bd80         	pop	{r7, pc}
 805dc1e: bf00         	nop

0805dc20 <$d.123>:
 805dc20: c1 ea 05 08  	.word	0x0805eac1
 805dc24: 09 bd 05 08  	.word	0x0805bd09
 805dc28: 09 bd 05 08  	.word	0x0805bd09
 805dc2c: d1 ea 05 08  	.word	0x0805ead1

0805dc30 <MPU_xStreamBufferIsFull>:
;     {
 805dc30: b580         	push	{r7, lr}
 805dc32: 466f         	mov	r7, sp
 805dc34: b082         	sub	sp, #0x8
 805dc36: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805dc38: 4809         	ldr	r0, [pc, #0x24]         @ 0x805dc60 <MPU_xStreamBufferIsFull+0x30>
 805dc3a: 4780         	blx	r0
 805dc3c: b940         	cbnz	r0, 0x805dc50 <MPU_xStreamBufferIsFull+0x20> @ imm = #0x10
 805dc3e: e7ff         	b	0x805dc40 <MPU_xStreamBufferIsFull+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dc40: df03         	svc	#0x3
;             xReturn = xStreamBufferIsFull( xStreamBuffer );
 805dc42: 9801         	ldr	r0, [sp, #0x4]
 805dc44: 4908         	ldr	r1, [pc, #0x20]         @ 0x805dc68 <MPU_xStreamBufferIsFull+0x38>
 805dc46: 4788         	blx	r1
 805dc48: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805dc4a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805dc6c <MPU_xStreamBufferIsFull+0x3c>
 805dc4c: 4780         	blx	r0
;         }
 805dc4e: e004         	b	0x805dc5a <MPU_xStreamBufferIsFull+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferIsFull( xStreamBuffer );
 805dc50: 9801         	ldr	r0, [sp, #0x4]
 805dc52: 4904         	ldr	r1, [pc, #0x10]         @ 0x805dc64 <MPU_xStreamBufferIsFull+0x34>
 805dc54: 4788         	blx	r1
 805dc56: 9000         	str	r0, [sp]
 805dc58: e7ff         	b	0x805dc5a <MPU_xStreamBufferIsFull+0x2a> @ imm = #-0x2
;         return xReturn;
 805dc5a: 9800         	ldr	r0, [sp]
 805dc5c: b002         	add	sp, #0x8
 805dc5e: bd80         	pop	{r7, pc}

0805dc60 <$d.127>:
 805dc60: c1 ea 05 08  	.word	0x0805eac1
 805dc64: 6d c1 05 08  	.word	0x0805c16d
 805dc68: 6d c1 05 08  	.word	0x0805c16d
 805dc6c: d1 ea 05 08  	.word	0x0805ead1

0805dc70 <MPU_xStreamBufferIsEmpty>:
;     {
 805dc70: b580         	push	{r7, lr}
 805dc72: 466f         	mov	r7, sp
 805dc74: b082         	sub	sp, #0x8
 805dc76: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805dc78: 4809         	ldr	r0, [pc, #0x24]         @ 0x805dca0 <MPU_xStreamBufferIsEmpty+0x30>
 805dc7a: 4780         	blx	r0
 805dc7c: b940         	cbnz	r0, 0x805dc90 <MPU_xStreamBufferIsEmpty+0x20> @ imm = #0x10
 805dc7e: e7ff         	b	0x805dc80 <MPU_xStreamBufferIsEmpty+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dc80: df03         	svc	#0x3
;             xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 805dc82: 9801         	ldr	r0, [sp, #0x4]
 805dc84: 4908         	ldr	r1, [pc, #0x20]         @ 0x805dca8 <MPU_xStreamBufferIsEmpty+0x38>
 805dc86: 4788         	blx	r1
 805dc88: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805dc8a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805dcac <MPU_xStreamBufferIsEmpty+0x3c>
 805dc8c: 4780         	blx	r0
;         }
 805dc8e: e004         	b	0x805dc9a <MPU_xStreamBufferIsEmpty+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 805dc90: 9801         	ldr	r0, [sp, #0x4]
 805dc92: 4904         	ldr	r1, [pc, #0x10]         @ 0x805dca4 <MPU_xStreamBufferIsEmpty+0x34>
 805dc94: 4788         	blx	r1
 805dc96: 9000         	str	r0, [sp]
 805dc98: e7ff         	b	0x805dc9a <MPU_xStreamBufferIsEmpty+0x2a> @ imm = #-0x2
;         return xReturn;
 805dc9a: 9800         	ldr	r0, [sp]
 805dc9c: b002         	add	sp, #0x8
 805dc9e: bd80         	pop	{r7, pc}

0805dca0 <$d.129>:
 805dca0: c1 ea 05 08  	.word	0x0805eac1
 805dca4: 29 c1 05 08  	.word	0x0805c129
 805dca8: 29 c1 05 08  	.word	0x0805c129
 805dcac: d1 ea 05 08  	.word	0x0805ead1

0805dcb0 <MPU_xStreamBufferSpacesAvailable>:
;     {
 805dcb0: b580         	push	{r7, lr}
 805dcb2: 466f         	mov	r7, sp
 805dcb4: b082         	sub	sp, #0x8
 805dcb6: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805dcb8: 4809         	ldr	r0, [pc, #0x24]         @ 0x805dce0 <MPU_xStreamBufferSpacesAvailable+0x30>
 805dcba: 4780         	blx	r0
 805dcbc: b940         	cbnz	r0, 0x805dcd0 <MPU_xStreamBufferSpacesAvailable+0x20> @ imm = #0x10
 805dcbe: e7ff         	b	0x805dcc0 <MPU_xStreamBufferSpacesAvailable+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dcc0: df03         	svc	#0x3
;             xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 805dcc2: 9801         	ldr	r0, [sp, #0x4]
 805dcc4: 4908         	ldr	r1, [pc, #0x20]         @ 0x805dce8 <MPU_xStreamBufferSpacesAvailable+0x38>
 805dcc6: 4788         	blx	r1
 805dcc8: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805dcca: 4808         	ldr	r0, [pc, #0x20]         @ 0x805dcec <MPU_xStreamBufferSpacesAvailable+0x3c>
 805dccc: 4780         	blx	r0
;         }
 805dcce: e004         	b	0x805dcda <MPU_xStreamBufferSpacesAvailable+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 805dcd0: 9801         	ldr	r0, [sp, #0x4]
 805dcd2: 4904         	ldr	r1, [pc, #0x10]         @ 0x805dce4 <MPU_xStreamBufferSpacesAvailable+0x34>
 805dcd4: 4788         	blx	r1
 805dcd6: 9000         	str	r0, [sp]
 805dcd8: e7ff         	b	0x805dcda <MPU_xStreamBufferSpacesAvailable+0x2a> @ imm = #-0x2
;         return xReturn;
 805dcda: 9800         	ldr	r0, [sp]
 805dcdc: b002         	add	sp, #0x8
 805dcde: bd80         	pop	{r7, pc}

0805dce0 <$d.133>:
 805dce0: c1 ea 05 08  	.word	0x0805eac1
 805dce4: d1 b8 05 08  	.word	0x0805b8d1
 805dce8: d1 b8 05 08  	.word	0x0805b8d1
 805dcec: d1 ea 05 08  	.word	0x0805ead1

0805dcf0 <MPU_xStreamBufferBytesAvailable>:
;     {
 805dcf0: b580         	push	{r7, lr}
 805dcf2: 466f         	mov	r7, sp
 805dcf4: b082         	sub	sp, #0x8
 805dcf6: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805dcf8: 4809         	ldr	r0, [pc, #0x24]         @ 0x805dd20 <MPU_xStreamBufferBytesAvailable+0x30>
 805dcfa: 4780         	blx	r0
 805dcfc: b940         	cbnz	r0, 0x805dd10 <MPU_xStreamBufferBytesAvailable+0x20> @ imm = #0x10
 805dcfe: e7ff         	b	0x805dd00 <MPU_xStreamBufferBytesAvailable+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dd00: df03         	svc	#0x3
;             xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 805dd02: 9801         	ldr	r0, [sp, #0x4]
 805dd04: 4908         	ldr	r1, [pc, #0x20]         @ 0x805dd28 <MPU_xStreamBufferBytesAvailable+0x38>
 805dd06: 4788         	blx	r1
 805dd08: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805dd0a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805dd2c <MPU_xStreamBufferBytesAvailable+0x3c>
 805dd0c: 4780         	blx	r0
;         }
 805dd0e: e004         	b	0x805dd1a <MPU_xStreamBufferBytesAvailable+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 805dd10: 9801         	ldr	r0, [sp, #0x4]
 805dd12: 4904         	ldr	r1, [pc, #0x10]         @ 0x805dd24 <MPU_xStreamBufferBytesAvailable+0x34>
 805dd14: 4788         	blx	r1
 805dd16: 9000         	str	r0, [sp]
 805dd18: e7ff         	b	0x805dd1a <MPU_xStreamBufferBytesAvailable+0x2a> @ imm = #-0x2
;         return xReturn;
 805dd1a: 9800         	ldr	r0, [sp]
 805dd1c: b002         	add	sp, #0x8
 805dd1e: bd80         	pop	{r7, pc}

0805dd20 <$d.135>:
 805dd20: c1 ea 05 08  	.word	0x0805eac1
 805dd24: 41 b9 05 08  	.word	0x0805b941
 805dd28: 41 b9 05 08  	.word	0x0805b941
 805dd2c: d1 ea 05 08  	.word	0x0805ead1

0805dd30 <MPU_xStreamBufferSetTriggerLevel>:
;     {
 805dd30: b580         	push	{r7, lr}
 805dd32: 466f         	mov	r7, sp
 805dd34: b084         	sub	sp, #0x10
 805dd36: 9003         	str	r0, [sp, #0xc]
 805dd38: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805dd3a: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805dd68 <MPU_xStreamBufferSetTriggerLevel+0x38>
 805dd3c: 4780         	blx	r0
 805dd3e: b948         	cbnz	r0, 0x805dd54 <MPU_xStreamBufferSetTriggerLevel+0x24> @ imm = #0x12
 805dd40: e7ff         	b	0x805dd42 <MPU_xStreamBufferSetTriggerLevel+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805dd42: df03         	svc	#0x3
;             xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 805dd44: 9803         	ldr	r0, [sp, #0xc]
 805dd46: 9902         	ldr	r1, [sp, #0x8]
 805dd48: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805dd70 <MPU_xStreamBufferSetTriggerLevel+0x40>
 805dd4a: 4790         	blx	r2
 805dd4c: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805dd4e: 4809         	ldr	r0, [pc, #0x24]         @ 0x805dd74 <MPU_xStreamBufferSetTriggerLevel+0x44>
 805dd50: 4780         	blx	r0
;         }
 805dd52: e005         	b	0x805dd60 <MPU_xStreamBufferSetTriggerLevel+0x30> @ imm = #0xa
;             xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 805dd54: 9803         	ldr	r0, [sp, #0xc]
 805dd56: 9902         	ldr	r1, [sp, #0x8]
 805dd58: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805dd6c <MPU_xStreamBufferSetTriggerLevel+0x3c>
 805dd5a: 4790         	blx	r2
 805dd5c: 9001         	str	r0, [sp, #0x4]
 805dd5e: e7ff         	b	0x805dd60 <MPU_xStreamBufferSetTriggerLevel+0x30> @ imm = #-0x2
;         return xReturn;
 805dd60: 9801         	ldr	r0, [sp, #0x4]
 805dd62: b004         	add	sp, #0x10
 805dd64: bd80         	pop	{r7, pc}
 805dd66: bf00         	nop

0805dd68 <$d.137>:
 805dd68: c1 ea 05 08  	.word	0x0805eac1
 805dd6c: 81 b8 05 08  	.word	0x0805b881
 805dd70: 81 b8 05 08  	.word	0x0805b881
 805dd74: d1 ea 05 08  	.word	0x0805ead1
 805dd78: 00 00 00 00  	.word	0x00000000
 805dd7c: 00 00        	.short	0x0000
 805dd7e: 00           	.byte	0x00

0805dd7f <__syscalls_flash_end__>:
 805dd7f: 00           	.byte	0x00

Disassembly of section .text:

0805dd80 <__unprivileged_flash_start__>:
; {
 805dd80: b580         	push	{r7, lr}
 805dd82: 466f         	mov	r7, sp
 805dd84: b082         	sub	sp, #0x8
 805dd86: 2000         	movs	r0, #0x0
;   HAL_StatusTypeDef  status = HAL_OK;
 805dd88: f807 0c01    	strb	r0, [r7, #-1]
;   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 805dd8c: 490a         	ldr	r1, [pc, #0x28]         @ 0x805ddb8 <__unprivileged_flash_start__+0x38>
 805dd8e: 2004         	movs	r0, #0x4
 805dd90: 4788         	blx	r1
;   SystemCoreClockUpdate();
 805dd92: 480a         	ldr	r0, [pc, #0x28]         @ 0x805ddbc <__unprivileged_flash_start__+0x3c>
 805dd94: 4780         	blx	r0
;   if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 805dd96: 490a         	ldr	r1, [pc, #0x28]         @ 0x805ddc0 <__unprivileged_flash_start__+0x40>
 805dd98: 2007         	movs	r0, #0x7
 805dd9a: 4788         	blx	r1
 805dd9c: b120         	cbz	r0, 0x805dda8 <__unprivileged_flash_start__+0x28> @ imm = #0x8
 805dd9e: e7ff         	b	0x805dda0 <__unprivileged_flash_start__+0x20> @ imm = #-0x2
 805dda0: 2001         	movs	r0, #0x1
;     status = HAL_ERROR;
 805dda2: f807 0c01    	strb	r0, [r7, #-1]
;   }
 805dda6: e002         	b	0x805ddae <__unprivileged_flash_start__+0x2e> @ imm = #0x4
;     HAL_MspInit();
 805dda8: 4806         	ldr	r0, [pc, #0x18]         @ 0x805ddc4 <__unprivileged_flash_start__+0x44>
 805ddaa: 4780         	blx	r0
 805ddac: e7ff         	b	0x805ddae <__unprivileged_flash_start__+0x2e> @ imm = #-0x2
;   return status;
 805ddae: f817 0c01    	ldrb	r0, [r7, #-1]
 805ddb2: b002         	add	sp, #0x8
 805ddb4: bd80         	pop	{r7, pc}
 805ddb6: bf00         	nop

0805ddb8 <$d.1>:
 805ddb8: a1 e3 05 08  	.word	0x0805e3a1
 805ddbc: 61 de 05 08  	.word	0x0805de61
 805ddc0: c9 dd 05 08  	.word	0x0805ddc9
 805ddc4: 5d de 05 08  	.word	0x0805de5d

0805ddc8 <HAL_InitTick>:
; {
 805ddc8: b580         	push	{r7, lr}
 805ddca: 466f         	mov	r7, sp
 805ddcc: b082         	sub	sp, #0x8
 805ddce: 9001         	str	r0, [sp, #0x4]
 805ddd0: 2000         	movs	r0, #0x0
;   HAL_StatusTypeDef  status = HAL_OK;
 805ddd2: f807 0c05    	strb	r0, [r7, #-5]
;   if ((uint32_t)uwTickFreq != 0U)
 805ddd6: f242 3084    	movw	r0, #0x2384
 805ddda: f2c2 0000    	movt	r0, #0x2000
 805ddde: 7800         	ldrb	r0, [r0]
 805dde0: b378         	cbz	r0, 0x805de42 <HAL_InitTick+0x7a> @ imm = #0x5e
 805dde2: e7ff         	b	0x805dde4 <HAL_InitTick+0x1c> @ imm = #-0x2
;     if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 805dde4: f242 3088    	movw	r0, #0x2388
 805dde8: f2c2 0000    	movt	r0, #0x2000
 805ddec: 6800         	ldr	r0, [r0]
 805ddee: f242 3184    	movw	r1, #0x2384
 805ddf2: f2c2 0100    	movt	r1, #0x2000
 805ddf6: 780a         	ldrb	r2, [r1]
 805ddf8: f44f 717a    	mov.w	r1, #0x3e8
 805ddfc: fbb1 f1f2    	udiv	r1, r1, r2
 805de00: fbb0 f0f1    	udiv	r0, r0, r1
 805de04: 4913         	ldr	r1, [pc, #0x4c]         @ 0x805de54 <HAL_InitTick+0x8c>
 805de06: 4788         	blx	r1
 805de08: b9b0         	cbnz	r0, 0x805de38 <HAL_InitTick+0x70> @ imm = #0x2c
 805de0a: e7ff         	b	0x805de0c <HAL_InitTick+0x44> @ imm = #-0x2
;       if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 805de0c: 9801         	ldr	r0, [sp, #0x4]
 805de0e: 2807         	cmp	r0, #0x7
 805de10: d80d         	bhi	0x805de2e <HAL_InitTick+0x66> @ imm = #0x1a
 805de12: e7ff         	b	0x805de14 <HAL_InitTick+0x4c> @ imm = #-0x2
;         HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 805de14: 9901         	ldr	r1, [sp, #0x4]
 805de16: 4b10         	ldr	r3, [pc, #0x40]         @ 0x805de58 <HAL_InitTick+0x90>
 805de18: f04f 30ff    	mov.w	r0, #0xffffffff
 805de1c: 2200         	movs	r2, #0x0
 805de1e: 4798         	blx	r3
;         uwTickPrio = TickPriority;
 805de20: 9801         	ldr	r0, [sp, #0x4]
 805de22: f242 3180    	movw	r1, #0x2380
 805de26: f2c2 0100    	movt	r1, #0x2000
 805de2a: 6008         	str	r0, [r1]
;       }
 805de2c: e003         	b	0x805de36 <HAL_InitTick+0x6e> @ imm = #0x6
 805de2e: 2001         	movs	r0, #0x1
;         status = HAL_ERROR;
 805de30: f807 0c05    	strb	r0, [r7, #-5]
 805de34: e7ff         	b	0x805de36 <HAL_InitTick+0x6e> @ imm = #-0x2
;     }
 805de36: e003         	b	0x805de40 <HAL_InitTick+0x78> @ imm = #0x6
 805de38: 2001         	movs	r0, #0x1
;       status = HAL_ERROR;
 805de3a: f807 0c05    	strb	r0, [r7, #-5]
 805de3e: e7ff         	b	0x805de40 <HAL_InitTick+0x78> @ imm = #-0x2
;   }
 805de40: e003         	b	0x805de4a <HAL_InitTick+0x82> @ imm = #0x6
 805de42: 2001         	movs	r0, #0x1
;     status = HAL_ERROR;
 805de44: f807 0c05    	strb	r0, [r7, #-5]
 805de48: e7ff         	b	0x805de4a <HAL_InitTick+0x82> @ imm = #-0x2
;   return status;
 805de4a: f817 0c05    	ldrb	r0, [r7, #-5]
 805de4e: b002         	add	sp, #0x8
 805de50: bd80         	pop	{r7, pc}
 805de52: bf00         	nop

0805de54 <$d.3>:
 805de54: f1 e4 05 08  	.word	0x0805e4f1
 805de58: f5 e3 05 08  	.word	0x0805e3f5

0805de5c <HAL_MspInit>:
; }
 805de5c: 4770         	bx	lr

0805de5e <SystemInit>:
; }
 805de5e: 4770         	bx	lr

0805de60 <SystemCoreClockUpdate>:
; {
 805de60: b088         	sub	sp, #0x20
 805de62: f241 0000    	movw	r0, #0x1000
 805de66: f2c4 0002    	movt	r0, #0x4002
;   if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 805de6a: 6800         	ldr	r0, [r0]
 805de6c: 0700         	lsls	r0, r0, #0x1c
 805de6e: 2800         	cmp	r0, #0x0
 805de70: d409         	bmi	0x805de86 <SystemCoreClockUpdate+0x26> @ imm = #0x12
 805de72: e7ff         	b	0x805de74 <SystemCoreClockUpdate+0x14> @ imm = #-0x2
 805de74: f241 0094    	movw	r0, #0x1094
 805de78: f2c4 0002    	movt	r0, #0x4002
;     msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 805de7c: 6800         	ldr	r0, [r0]
 805de7e: f3c0 2003    	ubfx	r0, r0, #0x8, #0x4
 805de82: 9006         	str	r0, [sp, #0x18]
;   }
 805de84: e008         	b	0x805de98 <SystemCoreClockUpdate+0x38> @ imm = #0x10
 805de86: f241 0000    	movw	r0, #0x1000
 805de8a: f2c4 0002    	movt	r0, #0x4002
;     msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 805de8e: 6800         	ldr	r0, [r0]
 805de90: b2c0         	uxtb	r0, r0
 805de92: 0900         	lsrs	r0, r0, #0x4
 805de94: 9006         	str	r0, [sp, #0x18]
 805de96: e7ff         	b	0x805de98 <SystemCoreClockUpdate+0x38> @ imm = #-0x2
;   msirange = MSIRangeTable[msirange];
 805de98: 9906         	ldr	r1, [sp, #0x18]
 805de9a: f645 1018    	movw	r0, #0x5918
 805de9e: f6c0 0006    	movt	r0, #0x806
 805dea2: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 805dea6: 9006         	str	r0, [sp, #0x18]
 805dea8: f241 0008    	movw	r0, #0x1008
 805deac: f2c4 0002    	movt	r0, #0x4002
;   switch (RCC->CFGR & RCC_CFGR_SWS)
 805deb0: 6800         	ldr	r0, [r0]
 805deb2: f000 000c    	and	r0, r0, #0xc
 805deb6: 4601         	mov	r1, r0
 805deb8: 9101         	str	r1, [sp, #0x4]
 805deba: b160         	cbz	r0, 0x805ded6 <SystemCoreClockUpdate+0x76> @ imm = #0x18
 805debc: e7ff         	b	0x805debe <SystemCoreClockUpdate+0x5e> @ imm = #-0x2
 805debe: 9801         	ldr	r0, [sp, #0x4]
 805dec0: 2804         	cmp	r0, #0x4
 805dec2: d00f         	beq	0x805dee4 <SystemCoreClockUpdate+0x84> @ imm = #0x1e
 805dec4: e7ff         	b	0x805dec6 <SystemCoreClockUpdate+0x66> @ imm = #-0x2
 805dec6: 9801         	ldr	r0, [sp, #0x4]
 805dec8: 2808         	cmp	r0, #0x8
 805deca: d015         	beq	0x805def8 <SystemCoreClockUpdate+0x98> @ imm = #0x2a
 805decc: e7ff         	b	0x805dece <SystemCoreClockUpdate+0x6e> @ imm = #-0x2
 805dece: 9801         	ldr	r0, [sp, #0x4]
 805ded0: 280c         	cmp	r0, #0xc
 805ded2: d01b         	beq	0x805df0c <SystemCoreClockUpdate+0xac> @ imm = #0x36
 805ded4: e064         	b	0x805dfa0 <SystemCoreClockUpdate+0x140> @ imm = #0xc8
;       SystemCoreClock = msirange;
 805ded6: 9806         	ldr	r0, [sp, #0x18]
 805ded8: f242 3188    	movw	r1, #0x2388
 805dedc: f2c2 0100    	movt	r1, #0x2000
 805dee0: 6008         	str	r0, [r1]
;       break;
 805dee2: e064         	b	0x805dfae <SystemCoreClockUpdate+0x14e> @ imm = #0xc8
;       SystemCoreClock = HSI_VALUE;
 805dee4: f242 3188    	movw	r1, #0x2388
 805dee8: f2c2 0100    	movt	r1, #0x2000
 805deec: f242 4000    	movw	r0, #0x2400
 805def0: f2c0 00f4    	movt	r0, #0xf4
 805def4: 6008         	str	r0, [r1]
;       break;
 805def6: e05a         	b	0x805dfae <SystemCoreClockUpdate+0x14e> @ imm = #0xb4
;       SystemCoreClock = HSE_VALUE;
 805def8: f242 3188    	movw	r1, #0x2388
 805defc: f2c2 0100    	movt	r1, #0x2000
 805df00: f242 4000    	movw	r0, #0x2400
 805df04: f2c0 00f4    	movt	r0, #0xf4
 805df08: 6008         	str	r0, [r1]
;       break;
 805df0a: e050         	b	0x805dfae <SystemCoreClockUpdate+0x14e> @ imm = #0xa0
 805df0c: f241 000c    	movw	r0, #0x100c
 805df10: f2c4 0002    	movt	r0, #0x4002
;       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 805df14: 6801         	ldr	r1, [r0]
 805df16: f001 0103    	and	r1, r1, #0x3
 805df1a: 9104         	str	r1, [sp, #0x10]
;       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 805df1c: 6800         	ldr	r0, [r0]
 805df1e: b2c1         	uxtb	r1, r0
 805df20: 2001         	movs	r0, #0x1
 805df22: eb00 1011    	add.w	r0, r0, r1, lsr #4
 805df26: 9003         	str	r0, [sp, #0xc]
;       switch (pllsource)
 805df28: 9804         	ldr	r0, [sp, #0x10]
 805df2a: 9000         	str	r0, [sp]
 805df2c: 2802         	cmp	r0, #0x2
 805df2e: d004         	beq	0x805df3a <SystemCoreClockUpdate+0xda> @ imm = #0x8
 805df30: e7ff         	b	0x805df32 <SystemCoreClockUpdate+0xd2> @ imm = #-0x2
 805df32: 9800         	ldr	r0, [sp]
 805df34: 2803         	cmp	r0, #0x3
 805df36: d009         	beq	0x805df4c <SystemCoreClockUpdate+0xec> @ imm = #0x12
 805df38: e011         	b	0x805df5e <SystemCoreClockUpdate+0xfe> @ imm = #0x22
;           pllvco = (HSI_VALUE / pllm);
 805df3a: 9903         	ldr	r1, [sp, #0xc]
 805df3c: f242 4000    	movw	r0, #0x2400
 805df40: f2c0 00f4    	movt	r0, #0xf4
 805df44: fbb0 f0f1    	udiv	r0, r0, r1
 805df48: 9005         	str	r0, [sp, #0x14]
;           break;
 805df4a: e00e         	b	0x805df6a <SystemCoreClockUpdate+0x10a> @ imm = #0x1c
;           pllvco = (HSE_VALUE / pllm);
 805df4c: 9903         	ldr	r1, [sp, #0xc]
 805df4e: f242 4000    	movw	r0, #0x2400
 805df52: f2c0 00f4    	movt	r0, #0xf4
 805df56: fbb0 f0f1    	udiv	r0, r0, r1
 805df5a: 9005         	str	r0, [sp, #0x14]
;           break;
 805df5c: e005         	b	0x805df6a <SystemCoreClockUpdate+0x10a> @ imm = #0xa
;           pllvco = (msirange / pllm);
 805df5e: 9806         	ldr	r0, [sp, #0x18]
 805df60: 9903         	ldr	r1, [sp, #0xc]
 805df62: fbb0 f0f1    	udiv	r0, r0, r1
 805df66: 9005         	str	r0, [sp, #0x14]
;           break;
 805df68: e7ff         	b	0x805df6a <SystemCoreClockUpdate+0x10a> @ imm = #-0x2
;       pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 805df6a: 9905         	ldr	r1, [sp, #0x14]
 805df6c: f241 000c    	movw	r0, #0x100c
 805df70: f2c4 0002    	movt	r0, #0x4002
 805df74: 6802         	ldr	r2, [r0]
 805df76: f3c2 2206    	ubfx	r2, r2, #0x8, #0x7
 805df7a: 4351         	muls	r1, r2, r1
 805df7c: 9105         	str	r1, [sp, #0x14]
;       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 805df7e: 6800         	ldr	r0, [r0]
 805df80: f000 61c0    	and	r1, r0, #0x6000000
 805df84: 2002         	movs	r0, #0x2
 805df86: eb00 6011    	add.w	r0, r0, r1, lsr #24
 805df8a: 9002         	str	r0, [sp, #0x8]
;       SystemCoreClock = pllvco/pllr;
 805df8c: 9805         	ldr	r0, [sp, #0x14]
 805df8e: 9902         	ldr	r1, [sp, #0x8]
 805df90: fbb0 f0f1    	udiv	r0, r0, r1
 805df94: f242 3188    	movw	r1, #0x2388
 805df98: f2c2 0100    	movt	r1, #0x2000
 805df9c: 6008         	str	r0, [r1]
;       break;
 805df9e: e006         	b	0x805dfae <SystemCoreClockUpdate+0x14e> @ imm = #0xc
;       SystemCoreClock = msirange;
 805dfa0: 9806         	ldr	r0, [sp, #0x18]
 805dfa2: f242 3188    	movw	r1, #0x2388
 805dfa6: f2c2 0100    	movt	r1, #0x2000
 805dfaa: 6008         	str	r0, [r1]
;       break;
 805dfac: e7ff         	b	0x805dfae <SystemCoreClockUpdate+0x14e> @ imm = #-0x2
 805dfae: f241 0008    	movw	r0, #0x1008
 805dfb2: f2c4 0002    	movt	r0, #0x4002
;   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 805dfb6: 6800         	ldr	r0, [r0]
 805dfb8: b2c0         	uxtb	r0, r0
 805dfba: 0901         	lsrs	r1, r0, #0x4
 805dfbc: f645 1008    	movw	r0, #0x5908
 805dfc0: f6c0 0006    	movt	r0, #0x806
 805dfc4: 5c40         	ldrb	r0, [r0, r1]
 805dfc6: 9007         	str	r0, [sp, #0x1c]
;   SystemCoreClock >>= tmp;
 805dfc8: 9a07         	ldr	r2, [sp, #0x1c]
 805dfca: f242 3188    	movw	r1, #0x2388
 805dfce: f2c2 0100    	movt	r1, #0x2000
 805dfd2: 6808         	ldr	r0, [r1]
 805dfd4: 40d0         	lsrs	r0, r2
 805dfd6: 6008         	str	r0, [r1]
; }
 805dfd8: b008         	add	sp, #0x20
 805dfda: 4770         	bx	lr

0805dfdc <HAL_GPIO_Init>:
; void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 805dfdc: b08b         	sub	sp, #0x2c
 805dfde: 900a         	str	r0, [sp, #0x28]
 805dfe0: 9109         	str	r1, [sp, #0x24]
 805dfe2: 2000         	movs	r0, #0x0
;   uint32_t position = 0U;
 805dfe4: 9008         	str	r0, [sp, #0x20]
;   while (((GPIO_Init->Pin) >> position) != 0U) {
 805dfe6: e7ff         	b	0x805dfe8 <HAL_GPIO_Init+0xc> @ imm = #-0x2
 805dfe8: 9809         	ldr	r0, [sp, #0x24]
 805dfea: 6800         	ldr	r0, [r0]
 805dfec: 9908         	ldr	r1, [sp, #0x20]
 805dfee: 40c8         	lsrs	r0, r1
 805dff0: 2800         	cmp	r0, #0x0
 805dff2: f000 81a9    	beq.w	0x805e348 <HAL_GPIO_Init+0x36c> @ imm = #0x352
 805dff6: e7ff         	b	0x805dff8 <HAL_GPIO_Init+0x1c> @ imm = #-0x2
;     iocurrent = (GPIO_Init->Pin) & (1UL << position);
 805dff8: 9809         	ldr	r0, [sp, #0x24]
 805dffa: 6800         	ldr	r0, [r0]
 805dffc: 9a08         	ldr	r2, [sp, #0x20]
 805dffe: 2101         	movs	r1, #0x1
 805e000: 4091         	lsls	r1, r2
 805e002: 4008         	ands	r0, r1
 805e004: 9007         	str	r0, [sp, #0x1c]
;     if (iocurrent != 0U) {
 805e006: 9807         	ldr	r0, [sp, #0x1c]
 805e008: 2800         	cmp	r0, #0x0
 805e00a: f000 8199    	beq.w	0x805e340 <HAL_GPIO_Init+0x364> @ imm = #0x332
 805e00e: e7ff         	b	0x805e010 <HAL_GPIO_Init+0x34> @ imm = #-0x2
;       if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) ||
 805e010: 9809         	ldr	r0, [sp, #0x24]
 805e012: 6840         	ldr	r0, [r0, #0x4]
 805e014: 2801         	cmp	r0, #0x1
 805e016: d00f         	beq	0x805e038 <HAL_GPIO_Init+0x5c> @ imm = #0x1e
 805e018: e7ff         	b	0x805e01a <HAL_GPIO_Init+0x3e> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 805e01a: 9809         	ldr	r0, [sp, #0x24]
 805e01c: 6840         	ldr	r0, [r0, #0x4]
 805e01e: 2802         	cmp	r0, #0x2
 805e020: d00a         	beq	0x805e038 <HAL_GPIO_Init+0x5c> @ imm = #0x14
 805e022: e7ff         	b	0x805e024 <HAL_GPIO_Init+0x48> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) ||
 805e024: 9809         	ldr	r0, [sp, #0x24]
 805e026: 6840         	ldr	r0, [r0, #0x4]
 805e028: 2811         	cmp	r0, #0x11
 805e02a: d005         	beq	0x805e038 <HAL_GPIO_Init+0x5c> @ imm = #0xa
 805e02c: e7ff         	b	0x805e02e <HAL_GPIO_Init+0x52> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 805e02e: 9809         	ldr	r0, [sp, #0x24]
 805e030: 6840         	ldr	r0, [r0, #0x4]
;       if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) ||
 805e032: 2812         	cmp	r0, #0x12
 805e034: d12f         	bne	0x805e096 <HAL_GPIO_Init+0xba> @ imm = #0x5e
 805e036: e7ff         	b	0x805e038 <HAL_GPIO_Init+0x5c> @ imm = #-0x2
;         temp = GPIOx->OSPEEDR;
 805e038: 980a         	ldr	r0, [sp, #0x28]
 805e03a: 6880         	ldr	r0, [r0, #0x8]
 805e03c: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 805e03e: 9808         	ldr	r0, [sp, #0x20]
 805e040: 0041         	lsls	r1, r0, #0x1
 805e042: 2003         	movs	r0, #0x3
 805e044: fa00 f101    	lsl.w	r1, r0, r1
 805e048: 9806         	ldr	r0, [sp, #0x18]
 805e04a: 4388         	bics	r0, r1
 805e04c: 9006         	str	r0, [sp, #0x18]
;         temp |= (GPIO_Init->Speed << (position * 2U));
 805e04e: 9809         	ldr	r0, [sp, #0x24]
 805e050: 68c0         	ldr	r0, [r0, #0xc]
 805e052: 9908         	ldr	r1, [sp, #0x20]
 805e054: 0049         	lsls	r1, r1, #0x1
 805e056: fa00 f101    	lsl.w	r1, r0, r1
 805e05a: 9806         	ldr	r0, [sp, #0x18]
 805e05c: 4308         	orrs	r0, r1
 805e05e: 9006         	str	r0, [sp, #0x18]
;         GPIOx->OSPEEDR = temp;
 805e060: 9806         	ldr	r0, [sp, #0x18]
 805e062: 990a         	ldr	r1, [sp, #0x28]
 805e064: 6088         	str	r0, [r1, #0x8]
;         temp = GPIOx->OTYPER;
 805e066: 980a         	ldr	r0, [sp, #0x28]
 805e068: 6840         	ldr	r0, [r0, #0x4]
 805e06a: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(GPIO_OTYPER_OT0 << position);
 805e06c: 9908         	ldr	r1, [sp, #0x20]
 805e06e: 2001         	movs	r0, #0x1
 805e070: fa00 f101    	lsl.w	r1, r0, r1
 805e074: 9806         	ldr	r0, [sp, #0x18]
 805e076: 4388         	bics	r0, r1
 805e078: 9006         	str	r0, [sp, #0x18]
;         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 805e07a: 9809         	ldr	r0, [sp, #0x24]
 805e07c: 6840         	ldr	r0, [r0, #0x4]
 805e07e: f3c0 1000    	ubfx	r0, r0, #0x4, #0x1
 805e082: 9908         	ldr	r1, [sp, #0x20]
 805e084: fa00 f101    	lsl.w	r1, r0, r1
 805e088: 9806         	ldr	r0, [sp, #0x18]
 805e08a: 4308         	orrs	r0, r1
 805e08c: 9006         	str	r0, [sp, #0x18]
;         GPIOx->OTYPER = temp;
 805e08e: 9806         	ldr	r0, [sp, #0x18]
 805e090: 990a         	ldr	r1, [sp, #0x28]
 805e092: 6048         	str	r0, [r1, #0x4]
;       }
 805e094: e7ff         	b	0x805e096 <HAL_GPIO_Init+0xba> @ imm = #-0x2
;       temp = GPIOx->PUPDR;
 805e096: 980a         	ldr	r0, [sp, #0x28]
 805e098: 68c0         	ldr	r0, [r0, #0xc]
 805e09a: 9006         	str	r0, [sp, #0x18]
;       temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 805e09c: 9808         	ldr	r0, [sp, #0x20]
 805e09e: 0041         	lsls	r1, r0, #0x1
 805e0a0: 2003         	movs	r0, #0x3
 805e0a2: fa00 f101    	lsl.w	r1, r0, r1
 805e0a6: 9806         	ldr	r0, [sp, #0x18]
 805e0a8: 4388         	bics	r0, r1
 805e0aa: 9006         	str	r0, [sp, #0x18]
;       temp |= ((GPIO_Init->Pull) << (position * 2U));
 805e0ac: 9809         	ldr	r0, [sp, #0x24]
 805e0ae: 6880         	ldr	r0, [r0, #0x8]
 805e0b0: 9908         	ldr	r1, [sp, #0x20]
 805e0b2: 0049         	lsls	r1, r1, #0x1
 805e0b4: fa00 f101    	lsl.w	r1, r0, r1
 805e0b8: 9806         	ldr	r0, [sp, #0x18]
 805e0ba: 4308         	orrs	r0, r1
 805e0bc: 9006         	str	r0, [sp, #0x18]
;       GPIOx->PUPDR = temp;
 805e0be: 9806         	ldr	r0, [sp, #0x18]
 805e0c0: 990a         	ldr	r1, [sp, #0x28]
 805e0c2: 60c8         	str	r0, [r1, #0xc]
;       if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 805e0c4: 9809         	ldr	r0, [sp, #0x24]
 805e0c6: 6840         	ldr	r0, [r0, #0x4]
 805e0c8: 2802         	cmp	r0, #0x2
 805e0ca: d005         	beq	0x805e0d8 <HAL_GPIO_Init+0xfc> @ imm = #0xa
 805e0cc: e7ff         	b	0x805e0ce <HAL_GPIO_Init+0xf2> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 805e0ce: 9809         	ldr	r0, [sp, #0x24]
 805e0d0: 6840         	ldr	r0, [r0, #0x4]
;       if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 805e0d2: 2812         	cmp	r0, #0x12
 805e0d4: d126         	bne	0x805e124 <HAL_GPIO_Init+0x148> @ imm = #0x4c
 805e0d6: e7ff         	b	0x805e0d8 <HAL_GPIO_Init+0xfc> @ imm = #-0x2
;         temp = GPIOx->AFR[position >> 3U];
 805e0d8: 980a         	ldr	r0, [sp, #0x28]
 805e0da: 9908         	ldr	r1, [sp, #0x20]
 805e0dc: f06f 0203    	mvn	r2, #0x3
 805e0e0: ea02 0151    	and.w	r1, r2, r1, lsr #1
 805e0e4: 4408         	add	r0, r1
 805e0e6: 6a00         	ldr	r0, [r0, #0x20]
 805e0e8: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 805e0ea: 9808         	ldr	r0, [sp, #0x20]
 805e0ec: f000 0007    	and	r0, r0, #0x7
 805e0f0: 0081         	lsls	r1, r0, #0x2
 805e0f2: 200f         	movs	r0, #0xf
 805e0f4: fa00 f101    	lsl.w	r1, r0, r1
 805e0f8: 9806         	ldr	r0, [sp, #0x18]
 805e0fa: 4388         	bics	r0, r1
 805e0fc: 9006         	str	r0, [sp, #0x18]
;         temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 805e0fe: 9809         	ldr	r0, [sp, #0x24]
 805e100: 6900         	ldr	r0, [r0, #0x10]
 805e102: 9908         	ldr	r1, [sp, #0x20]
 805e104: f001 0107    	and	r1, r1, #0x7
 805e108: 0089         	lsls	r1, r1, #0x2
 805e10a: fa00 f101    	lsl.w	r1, r0, r1
 805e10e: 9806         	ldr	r0, [sp, #0x18]
 805e110: 4308         	orrs	r0, r1
 805e112: 9006         	str	r0, [sp, #0x18]
;         GPIOx->AFR[position >> 3U] = temp;
 805e114: 9806         	ldr	r0, [sp, #0x18]
 805e116: 990a         	ldr	r1, [sp, #0x28]
 805e118: 9b08         	ldr	r3, [sp, #0x20]
 805e11a: ea02 0253    	and.w	r2, r2, r3, lsr #1
 805e11e: 4411         	add	r1, r2
 805e120: 6208         	str	r0, [r1, #0x20]
;       }
 805e122: e7ff         	b	0x805e124 <HAL_GPIO_Init+0x148> @ imm = #-0x2
;       temp = GPIOx->MODER;
 805e124: 980a         	ldr	r0, [sp, #0x28]
 805e126: 6800         	ldr	r0, [r0]
 805e128: 9006         	str	r0, [sp, #0x18]
;       temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 805e12a: 9808         	ldr	r0, [sp, #0x20]
 805e12c: 0041         	lsls	r1, r0, #0x1
 805e12e: 2003         	movs	r0, #0x3
 805e130: fa00 f101    	lsl.w	r1, r0, r1
 805e134: 9806         	ldr	r0, [sp, #0x18]
 805e136: 4388         	bics	r0, r1
 805e138: 9006         	str	r0, [sp, #0x18]
;       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 805e13a: 9809         	ldr	r0, [sp, #0x24]
 805e13c: 6840         	ldr	r0, [r0, #0x4]
 805e13e: f000 0003    	and	r0, r0, #0x3
 805e142: 9908         	ldr	r1, [sp, #0x20]
 805e144: 0049         	lsls	r1, r1, #0x1
 805e146: fa00 f101    	lsl.w	r1, r0, r1
 805e14a: 9806         	ldr	r0, [sp, #0x18]
 805e14c: 4308         	orrs	r0, r1
 805e14e: 9006         	str	r0, [sp, #0x18]
;       GPIOx->MODER = temp;
 805e150: 9806         	ldr	r0, [sp, #0x18]
 805e152: 990a         	ldr	r1, [sp, #0x28]
 805e154: 6008         	str	r0, [r1]
;       if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 805e156: 9809         	ldr	r0, [sp, #0x24]
 805e158: 79c0         	ldrb	r0, [r0, #0x7]
 805e15a: 06c0         	lsls	r0, r0, #0x1b
 805e15c: 2800         	cmp	r0, #0x0
 805e15e: f140 80ee    	bpl.w	0x805e33e <HAL_GPIO_Init+0x362> @ imm = #0x1dc
 805e162: e7ff         	b	0x805e164 <HAL_GPIO_Init+0x188> @ imm = #-0x2
;         temp = EXTI->EXTICR[position >> 2U];
 805e164: 9808         	ldr	r0, [sp, #0x20]
 805e166: f020 0003    	bic	r0, r0, #0x3
 805e16a: f24f 4160    	movw	r1, #0xf460
 805e16e: f2c4 0102    	movt	r1, #0x4002
 805e172: 5840         	ldr	r0, [r0, r1]
 805e174: 9006         	str	r0, [sp, #0x18]
;         temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 805e176: 9808         	ldr	r0, [sp, #0x20]
 805e178: f000 0003    	and	r0, r0, #0x3
 805e17c: 00c1         	lsls	r1, r0, #0x3
 805e17e: 200f         	movs	r0, #0xf
 805e180: fa00 f101    	lsl.w	r1, r0, r1
 805e184: 9806         	ldr	r0, [sp, #0x18]
 805e186: 4388         	bics	r0, r1
 805e188: 9006         	str	r0, [sp, #0x18]
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805e18a: 980a         	ldr	r0, [sp, #0x28]
 805e18c: 2100         	movs	r1, #0x0
 805e18e: f2c4 2102    	movt	r1, #0x4202
 805e192: 4288         	cmp	r0, r1
 805e194: d103         	bne	0x805e19e <HAL_GPIO_Init+0x1c2> @ imm = #0x6
 805e196: e7ff         	b	0x805e198 <HAL_GPIO_Init+0x1bc> @ imm = #-0x2
 805e198: 2000         	movs	r0, #0x0
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805e19a: 9005         	str	r0, [sp, #0x14]
 805e19c: e050         	b	0x805e240 <HAL_GPIO_Init+0x264> @ imm = #0xa0
 805e19e: 980a         	ldr	r0, [sp, #0x28]
 805e1a0: f240 4100    	movw	r1, #0x400
 805e1a4: f2c4 2102    	movt	r1, #0x4202
 805e1a8: 4288         	cmp	r0, r1
 805e1aa: d103         	bne	0x805e1b4 <HAL_GPIO_Init+0x1d8> @ imm = #0x6
 805e1ac: e7ff         	b	0x805e1ae <HAL_GPIO_Init+0x1d2> @ imm = #-0x2
 805e1ae: 2001         	movs	r0, #0x1
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805e1b0: 9004         	str	r0, [sp, #0x10]
 805e1b2: e042         	b	0x805e23a <HAL_GPIO_Init+0x25e> @ imm = #0x84
 805e1b4: 980a         	ldr	r0, [sp, #0x28]
 805e1b6: f640 0100    	movw	r1, #0x800
 805e1ba: f2c4 2102    	movt	r1, #0x4202
 805e1be: 4288         	cmp	r0, r1
 805e1c0: d103         	bne	0x805e1ca <HAL_GPIO_Init+0x1ee> @ imm = #0x6
 805e1c2: e7ff         	b	0x805e1c4 <HAL_GPIO_Init+0x1e8> @ imm = #-0x2
 805e1c4: 2002         	movs	r0, #0x2
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805e1c6: 9003         	str	r0, [sp, #0xc]
 805e1c8: e034         	b	0x805e234 <HAL_GPIO_Init+0x258> @ imm = #0x68
 805e1ca: 980a         	ldr	r0, [sp, #0x28]
 805e1cc: f640 4100    	movw	r1, #0xc00
 805e1d0: f2c4 2102    	movt	r1, #0x4202
 805e1d4: 4288         	cmp	r0, r1
 805e1d6: d103         	bne	0x805e1e0 <HAL_GPIO_Init+0x204> @ imm = #0x6
 805e1d8: e7ff         	b	0x805e1da <HAL_GPIO_Init+0x1fe> @ imm = #-0x2
 805e1da: 2003         	movs	r0, #0x3
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805e1dc: 9002         	str	r0, [sp, #0x8]
 805e1de: e026         	b	0x805e22e <HAL_GPIO_Init+0x252> @ imm = #0x4c
 805e1e0: 980a         	ldr	r0, [sp, #0x28]
 805e1e2: f241 0100    	movw	r1, #0x1000
 805e1e6: f2c4 2102    	movt	r1, #0x4202
 805e1ea: 4288         	cmp	r0, r1
 805e1ec: d103         	bne	0x805e1f6 <HAL_GPIO_Init+0x21a> @ imm = #0x6
 805e1ee: e7ff         	b	0x805e1f0 <HAL_GPIO_Init+0x214> @ imm = #-0x2
 805e1f0: 2004         	movs	r0, #0x4
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805e1f2: 9001         	str	r0, [sp, #0x4]
 805e1f4: e018         	b	0x805e228 <HAL_GPIO_Init+0x24c> @ imm = #0x30
 805e1f6: 980a         	ldr	r0, [sp, #0x28]
 805e1f8: f241 4100    	movw	r1, #0x1400
 805e1fc: f2c4 2102    	movt	r1, #0x4202
 805e200: 4288         	cmp	r0, r1
 805e202: d103         	bne	0x805e20c <HAL_GPIO_Init+0x230> @ imm = #0x6
 805e204: e7ff         	b	0x805e206 <HAL_GPIO_Init+0x22a> @ imm = #-0x2
 805e206: 2005         	movs	r0, #0x5
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805e208: 9000         	str	r0, [sp]
 805e20a: e00a         	b	0x805e222 <HAL_GPIO_Init+0x246> @ imm = #0x14
 805e20c: 990a         	ldr	r1, [sp, #0x28]
 805e20e: f641 0200    	movw	r2, #0x1800
 805e212: f2c4 2202    	movt	r2, #0x4202
 805e216: 2007         	movs	r0, #0x7
 805e218: 4291         	cmp	r1, r2
 805e21a: bf08         	it	eq
 805e21c: 2006         	moveq	r0, #0x6
 805e21e: 9000         	str	r0, [sp]
 805e220: e7ff         	b	0x805e222 <HAL_GPIO_Init+0x246> @ imm = #-0x2
 805e222: 9800         	ldr	r0, [sp]
 805e224: 9001         	str	r0, [sp, #0x4]
 805e226: e7ff         	b	0x805e228 <HAL_GPIO_Init+0x24c> @ imm = #-0x2
 805e228: 9801         	ldr	r0, [sp, #0x4]
 805e22a: 9002         	str	r0, [sp, #0x8]
 805e22c: e7ff         	b	0x805e22e <HAL_GPIO_Init+0x252> @ imm = #-0x2
 805e22e: 9802         	ldr	r0, [sp, #0x8]
 805e230: 9003         	str	r0, [sp, #0xc]
 805e232: e7ff         	b	0x805e234 <HAL_GPIO_Init+0x258> @ imm = #-0x2
 805e234: 9803         	ldr	r0, [sp, #0xc]
 805e236: 9004         	str	r0, [sp, #0x10]
 805e238: e7ff         	b	0x805e23a <HAL_GPIO_Init+0x25e> @ imm = #-0x2
 805e23a: 9804         	ldr	r0, [sp, #0x10]
 805e23c: 9005         	str	r0, [sp, #0x14]
 805e23e: e7ff         	b	0x805e240 <HAL_GPIO_Init+0x264> @ imm = #-0x2
 805e240: 9805         	ldr	r0, [sp, #0x14]
 805e242: 9908         	ldr	r1, [sp, #0x20]
 805e244: f001 0103    	and	r1, r1, #0x3
 805e248: 00c9         	lsls	r1, r1, #0x3
 805e24a: fa00 f101    	lsl.w	r1, r0, r1
 805e24e: 9806         	ldr	r0, [sp, #0x18]
 805e250: 4308         	orrs	r0, r1
 805e252: 9006         	str	r0, [sp, #0x18]
;         EXTI->EXTICR[position >> 2U] = temp;
 805e254: 9806         	ldr	r0, [sp, #0x18]
 805e256: 9908         	ldr	r1, [sp, #0x20]
 805e258: f021 0103    	bic	r1, r1, #0x3
 805e25c: f24f 4260    	movw	r2, #0xf460
 805e260: f2c4 0202    	movt	r2, #0x4002
 805e264: 5088         	str	r0, [r1, r2]
 805e266: f24f 4080    	movw	r0, #0xf480
 805e26a: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->IMR1;
 805e26e: 6800         	ldr	r0, [r0]
 805e270: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805e272: 9907         	ldr	r1, [sp, #0x1c]
 805e274: 9806         	ldr	r0, [sp, #0x18]
 805e276: 4388         	bics	r0, r1
 805e278: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 805e27a: 9809         	ldr	r0, [sp, #0x24]
 805e27c: 7980         	ldrb	r0, [r0, #0x6]
 805e27e: 07c0         	lsls	r0, r0, #0x1f
 805e280: b128         	cbz	r0, 0x805e28e <HAL_GPIO_Init+0x2b2> @ imm = #0xa
 805e282: e7ff         	b	0x805e284 <HAL_GPIO_Init+0x2a8> @ imm = #-0x2
;           temp |= iocurrent;
 805e284: 9907         	ldr	r1, [sp, #0x1c]
 805e286: 9806         	ldr	r0, [sp, #0x18]
 805e288: 4308         	orrs	r0, r1
 805e28a: 9006         	str	r0, [sp, #0x18]
;         }
 805e28c: e7ff         	b	0x805e28e <HAL_GPIO_Init+0x2b2> @ imm = #-0x2
;         EXTI->IMR1 = temp;
 805e28e: 9806         	ldr	r0, [sp, #0x18]
 805e290: f24f 4180    	movw	r1, #0xf480
 805e294: f2c4 0102    	movt	r1, #0x4002
 805e298: 6008         	str	r0, [r1]
 805e29a: f24f 4084    	movw	r0, #0xf484
 805e29e: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->EMR1;
 805e2a2: 6800         	ldr	r0, [r0]
 805e2a4: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805e2a6: 9907         	ldr	r1, [sp, #0x1c]
 805e2a8: 9806         	ldr	r0, [sp, #0x18]
 805e2aa: 4388         	bics	r0, r1
 805e2ac: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 805e2ae: 9809         	ldr	r0, [sp, #0x24]
 805e2b0: 7980         	ldrb	r0, [r0, #0x6]
 805e2b2: 0780         	lsls	r0, r0, #0x1e
 805e2b4: 2800         	cmp	r0, #0x0
 805e2b6: d505         	bpl	0x805e2c4 <HAL_GPIO_Init+0x2e8> @ imm = #0xa
 805e2b8: e7ff         	b	0x805e2ba <HAL_GPIO_Init+0x2de> @ imm = #-0x2
;           temp |= iocurrent;
 805e2ba: 9907         	ldr	r1, [sp, #0x1c]
 805e2bc: 9806         	ldr	r0, [sp, #0x18]
 805e2be: 4308         	orrs	r0, r1
 805e2c0: 9006         	str	r0, [sp, #0x18]
;         }
 805e2c2: e7ff         	b	0x805e2c4 <HAL_GPIO_Init+0x2e8> @ imm = #-0x2
;         EXTI->EMR1 = temp;
 805e2c4: 9806         	ldr	r0, [sp, #0x18]
 805e2c6: f24f 4184    	movw	r1, #0xf484
 805e2ca: f2c4 0102    	movt	r1, #0x4002
 805e2ce: 6008         	str	r0, [r1]
 805e2d0: f24f 4000    	movw	r0, #0xf400
 805e2d4: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->RTSR1;
 805e2d8: 6800         	ldr	r0, [r0]
 805e2da: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805e2dc: 9907         	ldr	r1, [sp, #0x1c]
 805e2de: 9806         	ldr	r0, [sp, #0x18]
 805e2e0: 4388         	bics	r0, r1
 805e2e2: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 805e2e4: 9809         	ldr	r0, [sp, #0x24]
 805e2e6: 7980         	ldrb	r0, [r0, #0x6]
 805e2e8: 06c0         	lsls	r0, r0, #0x1b
 805e2ea: 2800         	cmp	r0, #0x0
 805e2ec: d505         	bpl	0x805e2fa <HAL_GPIO_Init+0x31e> @ imm = #0xa
 805e2ee: e7ff         	b	0x805e2f0 <HAL_GPIO_Init+0x314> @ imm = #-0x2
;           temp |= iocurrent;
 805e2f0: 9907         	ldr	r1, [sp, #0x1c]
 805e2f2: 9806         	ldr	r0, [sp, #0x18]
 805e2f4: 4308         	orrs	r0, r1
 805e2f6: 9006         	str	r0, [sp, #0x18]
;         }
 805e2f8: e7ff         	b	0x805e2fa <HAL_GPIO_Init+0x31e> @ imm = #-0x2
;         EXTI->RTSR1 = temp;
 805e2fa: 9806         	ldr	r0, [sp, #0x18]
 805e2fc: f24f 4100    	movw	r1, #0xf400
 805e300: f2c4 0102    	movt	r1, #0x4002
 805e304: 6008         	str	r0, [r1]
 805e306: f24f 4004    	movw	r0, #0xf404
 805e30a: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->FTSR1;
 805e30e: 6800         	ldr	r0, [r0]
 805e310: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805e312: 9907         	ldr	r1, [sp, #0x1c]
 805e314: 9806         	ldr	r0, [sp, #0x18]
 805e316: 4388         	bics	r0, r1
 805e318: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 805e31a: 9809         	ldr	r0, [sp, #0x24]
 805e31c: 7980         	ldrb	r0, [r0, #0x6]
 805e31e: 0680         	lsls	r0, r0, #0x1a
 805e320: 2800         	cmp	r0, #0x0
 805e322: d505         	bpl	0x805e330 <HAL_GPIO_Init+0x354> @ imm = #0xa
 805e324: e7ff         	b	0x805e326 <HAL_GPIO_Init+0x34a> @ imm = #-0x2
;           temp |= iocurrent;
 805e326: 9907         	ldr	r1, [sp, #0x1c]
 805e328: 9806         	ldr	r0, [sp, #0x18]
 805e32a: 4308         	orrs	r0, r1
 805e32c: 9006         	str	r0, [sp, #0x18]
;         }
 805e32e: e7ff         	b	0x805e330 <HAL_GPIO_Init+0x354> @ imm = #-0x2
;         EXTI->FTSR1 = temp;
 805e330: 9806         	ldr	r0, [sp, #0x18]
 805e332: f24f 4104    	movw	r1, #0xf404
 805e336: f2c4 0102    	movt	r1, #0x4002
 805e33a: 6008         	str	r0, [r1]
;       }
 805e33c: e7ff         	b	0x805e33e <HAL_GPIO_Init+0x362> @ imm = #-0x2
;     }
 805e33e: e7ff         	b	0x805e340 <HAL_GPIO_Init+0x364> @ imm = #-0x2
;     position++;
 805e340: 9808         	ldr	r0, [sp, #0x20]
 805e342: 3001         	adds	r0, #0x1
 805e344: 9008         	str	r0, [sp, #0x20]
;   while (((GPIO_Init->Pin) >> position) != 0U) {
 805e346: e64f         	b	0x805dfe8 <HAL_GPIO_Init+0xc> @ imm = #-0x362
; }
 805e348: b00b         	add	sp, #0x2c
 805e34a: 4770         	bx	lr

0805e34c <HAL_GPIO_WritePin>:
;                        GPIO_PinState PinState) {
 805e34c: b082         	sub	sp, #0x8
 805e34e: 9001         	str	r0, [sp, #0x4]
 805e350: f8ad 1002    	strh.w	r1, [sp, #0x2]
 805e354: f88d 2001    	strb.w	r2, [sp, #0x1]
;   if (PinState != GPIO_PIN_RESET) {
 805e358: f89d 0001    	ldrb.w	r0, [sp, #0x1]
 805e35c: b128         	cbz	r0, 0x805e36a <HAL_GPIO_WritePin+0x1e> @ imm = #0xa
 805e35e: e7ff         	b	0x805e360 <HAL_GPIO_WritePin+0x14> @ imm = #-0x2
;     GPIOx->BSRR = (uint32_t)GPIO_Pin;
 805e360: f8bd 0002    	ldrh.w	r0, [sp, #0x2]
 805e364: 9901         	ldr	r1, [sp, #0x4]
 805e366: 6188         	str	r0, [r1, #0x18]
;   } else {
 805e368: e004         	b	0x805e374 <HAL_GPIO_WritePin+0x28> @ imm = #0x8
;     GPIOx->BRR = (uint32_t)GPIO_Pin;
 805e36a: f8bd 0002    	ldrh.w	r0, [sp, #0x2]
 805e36e: 9901         	ldr	r1, [sp, #0x4]
 805e370: 6288         	str	r0, [r1, #0x28]
 805e372: e7ff         	b	0x805e374 <HAL_GPIO_WritePin+0x28> @ imm = #-0x2
; }
 805e374: b002         	add	sp, #0x8
 805e376: 4770         	bx	lr

0805e378 <HAL_GPIO_TogglePin>:
; void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 805e378: b083         	sub	sp, #0xc
 805e37a: 9002         	str	r0, [sp, #0x8]
 805e37c: f8ad 1006    	strh.w	r1, [sp, #0x6]
;   odr = GPIOx->ODR;
 805e380: 9802         	ldr	r0, [sp, #0x8]
 805e382: 6940         	ldr	r0, [r0, #0x14]
 805e384: 9000         	str	r0, [sp]
;   GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 805e386: 9a00         	ldr	r2, [sp]
 805e388: f8bd 0006    	ldrh.w	r0, [sp, #0x6]
 805e38c: ea02 0100    	and.w	r1, r2, r0
 805e390: 4390         	bics	r0, r2
 805e392: ea40 4001    	orr.w	r0, r0, r1, lsl #16
 805e396: 9902         	ldr	r1, [sp, #0x8]
 805e398: 6188         	str	r0, [r1, #0x18]
; }
 805e39a: b003         	add	sp, #0xc
 805e39c: 4770         	bx	lr
 805e39e: 0000         	movs	r0, r0

0805e3a0 <HAL_NVIC_SetPriorityGrouping>:
; {
 805e3a0: b580         	push	{r7, lr}
 805e3a2: 466f         	mov	r7, sp
 805e3a4: b082         	sub	sp, #0x8
 805e3a6: 9001         	str	r0, [sp, #0x4]
;   NVIC_SetPriorityGrouping(PriorityGroup);
 805e3a8: 9801         	ldr	r0, [sp, #0x4]
 805e3aa: 4902         	ldr	r1, [pc, #0x8]          @ 0x805e3b4 <HAL_NVIC_SetPriorityGrouping+0x14>
 805e3ac: 4788         	blx	r1
; }
 805e3ae: b002         	add	sp, #0x8
 805e3b0: bd80         	pop	{r7, pc}
 805e3b2: bf00         	nop

0805e3b4 <$d.1>:
 805e3b4: b9 e3 05 08  	.word	0x0805e3b9

0805e3b8 <__NVIC_SetPriorityGrouping>:
; {
 805e3b8: b083         	sub	sp, #0xc
 805e3ba: 9002         	str	r0, [sp, #0x8]
;   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 805e3bc: 9802         	ldr	r0, [sp, #0x8]
 805e3be: f000 0007    	and	r0, r0, #0x7
 805e3c2: 9000         	str	r0, [sp]
 805e3c4: f64e 510c    	movw	r1, #0xed0c
 805e3c8: f2ce 0100    	movt	r1, #0xe000
;   reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 805e3cc: 6808         	ldr	r0, [r1]
 805e3ce: 9001         	str	r0, [sp, #0x4]
;   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 805e3d0: 9801         	ldr	r0, [sp, #0x4]
 805e3d2: f64f 02ff    	movw	r2, #0xf8ff
 805e3d6: 4010         	ands	r0, r2
 805e3d8: 9001         	str	r0, [sp, #0x4]
;   reg_value  =  (reg_value                                   |
 805e3da: 9801         	ldr	r0, [sp, #0x4]
;                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 805e3dc: 9a00         	ldr	r2, [sp]
;   reg_value  =  (reg_value                                   |
 805e3de: ea40 2002    	orr.w	r0, r0, r2, lsl #8
 805e3e2: 2200         	movs	r2, #0x0
 805e3e4: f2c0 52fa    	movt	r2, #0x5fa
;                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 805e3e8: 4310         	orrs	r0, r2
;   reg_value  =  (reg_value                                   |
 805e3ea: 9001         	str	r0, [sp, #0x4]
;   SCB->AIRCR =  reg_value;
 805e3ec: 9801         	ldr	r0, [sp, #0x4]
 805e3ee: 6008         	str	r0, [r1]
; }
 805e3f0: b003         	add	sp, #0xc
 805e3f2: 4770         	bx	lr

0805e3f4 <HAL_NVIC_SetPriority>:
; {
 805e3f4: b580         	push	{r7, lr}
 805e3f6: 466f         	mov	r7, sp
 805e3f8: b086         	sub	sp, #0x18
 805e3fa: f807 0c01    	strb	r0, [r7, #-1]
 805e3fe: 9104         	str	r1, [sp, #0x10]
 805e400: 9203         	str	r2, [sp, #0xc]
;   prioritygroup = NVIC_GetPriorityGrouping();
 805e402: 4808         	ldr	r0, [pc, #0x20]         @ 0x805e424 <HAL_NVIC_SetPriority+0x30>
 805e404: 4780         	blx	r0
 805e406: 9002         	str	r0, [sp, #0x8]
;   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 805e408: f917 0c01    	ldrsb	r0, [r7, #-1]
 805e40c: 9001         	str	r0, [sp, #0x4]
 805e40e: 9802         	ldr	r0, [sp, #0x8]
 805e410: 9904         	ldr	r1, [sp, #0x10]
 805e412: 9a03         	ldr	r2, [sp, #0xc]
 805e414: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805e428 <HAL_NVIC_SetPriority+0x34>
 805e416: 4798         	blx	r3
 805e418: 4601         	mov	r1, r0
 805e41a: 9801         	ldr	r0, [sp, #0x4]
 805e41c: 4a03         	ldr	r2, [pc, #0xc]          @ 0x805e42c <HAL_NVIC_SetPriority+0x38>
 805e41e: 4790         	blx	r2
; }
 805e420: b006         	add	sp, #0x18
 805e422: bd80         	pop	{r7, pc}

0805e424 <$d.4>:
 805e424: 31 e4 05 08  	.word	0x0805e431
 805e428: 83 e4 05 08  	.word	0x0805e483
 805e42c: 41 e4 05 08  	.word	0x0805e441

0805e430 <__NVIC_GetPriorityGrouping>:
; {
 805e430: f64e 500c    	movw	r0, #0xed0c
 805e434: f2ce 0000    	movt	r0, #0xe000
;   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 805e438: 6800         	ldr	r0, [r0]
 805e43a: f3c0 2002    	ubfx	r0, r0, #0x8, #0x3
 805e43e: 4770         	bx	lr

0805e440 <__NVIC_SetPriority>:
; {
 805e440: b082         	sub	sp, #0x8
 805e442: f88d 0007    	strb.w	r0, [sp, #0x7]
 805e446: 9100         	str	r1, [sp]
;   if ((int32_t)(IRQn) >= 0)
 805e448: f99d 0007    	ldrsb.w	r0, [sp, #0x7]
 805e44c: 2800         	cmp	r0, #0x0
 805e44e: d40a         	bmi	0x805e466 <__NVIC_SetPriority+0x26> @ imm = #0x14
 805e450: e7ff         	b	0x805e452 <__NVIC_SetPriority+0x12> @ imm = #-0x2
;     NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 805e452: 9800         	ldr	r0, [sp]
 805e454: 0140         	lsls	r0, r0, #0x5
 805e456: f99d 1007    	ldrsb.w	r1, [sp, #0x7]
 805e45a: f24e 4200    	movw	r2, #0xe400
 805e45e: f2ce 0200    	movt	r2, #0xe000
 805e462: 5488         	strb	r0, [r1, r2]
;   }
 805e464: e00b         	b	0x805e47e <__NVIC_SetPriority+0x3e> @ imm = #0x16
;     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 805e466: 9800         	ldr	r0, [sp]
 805e468: 0140         	lsls	r0, r0, #0x5
 805e46a: f89d 1007    	ldrb.w	r1, [sp, #0x7]
 805e46e: f001 010f    	and	r1, r1, #0xf
 805e472: f64e 5214    	movw	r2, #0xed14
 805e476: f2ce 0200    	movt	r2, #0xe000
 805e47a: 5488         	strb	r0, [r1, r2]
 805e47c: e7ff         	b	0x805e47e <__NVIC_SetPriority+0x3e> @ imm = #-0x2
; }
 805e47e: b002         	add	sp, #0x8
 805e480: 4770         	bx	lr

0805e482 <NVIC_EncodePriority>:
; {
 805e482: b088         	sub	sp, #0x20
 805e484: 9007         	str	r0, [sp, #0x1c]
 805e486: 9106         	str	r1, [sp, #0x18]
 805e488: 9205         	str	r2, [sp, #0x14]
;   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 805e48a: 9807         	ldr	r0, [sp, #0x1c]
 805e48c: f000 0007    	and	r0, r0, #0x7
 805e490: 9004         	str	r0, [sp, #0x10]
;   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 805e492: 9804         	ldr	r0, [sp, #0x10]
 805e494: f1c0 0007    	rsb.w	r0, r0, #0x7
 805e498: 2804         	cmp	r0, #0x4
 805e49a: d303         	blo	0x805e4a4 <NVIC_EncodePriority+0x22> @ imm = #0x6
 805e49c: e7ff         	b	0x805e49e <NVIC_EncodePriority+0x1c> @ imm = #-0x2
 805e49e: 2003         	movs	r0, #0x3
;   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 805e4a0: 9001         	str	r0, [sp, #0x4]
 805e4a2: e004         	b	0x805e4ae <NVIC_EncodePriority+0x2c> @ imm = #0x8
 805e4a4: 9804         	ldr	r0, [sp, #0x10]
 805e4a6: f1c0 0007    	rsb.w	r0, r0, #0x7
 805e4aa: 9001         	str	r0, [sp, #0x4]
 805e4ac: e7ff         	b	0x805e4ae <NVIC_EncodePriority+0x2c> @ imm = #-0x2
 805e4ae: 9801         	ldr	r0, [sp, #0x4]
 805e4b0: 9003         	str	r0, [sp, #0xc]
;   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 805e4b2: 9804         	ldr	r0, [sp, #0x10]
 805e4b4: 3003         	adds	r0, #0x3
 805e4b6: 2806         	cmp	r0, #0x6
 805e4b8: d803         	bhi	0x805e4c2 <NVIC_EncodePriority+0x40> @ imm = #0x6
 805e4ba: e7ff         	b	0x805e4bc <NVIC_EncodePriority+0x3a> @ imm = #-0x2
 805e4bc: 2000         	movs	r0, #0x0
;   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 805e4be: 9000         	str	r0, [sp]
 805e4c0: e003         	b	0x805e4ca <NVIC_EncodePriority+0x48> @ imm = #0x6
 805e4c2: 9804         	ldr	r0, [sp, #0x10]
 805e4c4: 3804         	subs	r0, #0x4
 805e4c6: 9000         	str	r0, [sp]
 805e4c8: e7ff         	b	0x805e4ca <NVIC_EncodePriority+0x48> @ imm = #-0x2
 805e4ca: 9800         	ldr	r0, [sp]
 805e4cc: 9002         	str	r0, [sp, #0x8]
;            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 805e4ce: 9806         	ldr	r0, [sp, #0x18]
 805e4d0: 9903         	ldr	r1, [sp, #0xc]
 805e4d2: 2201         	movs	r2, #0x1
 805e4d4: fa02 f101    	lsl.w	r1, r2, r1
 805e4d8: 3901         	subs	r1, #0x1
 805e4da: 4008         	ands	r0, r1
 805e4dc: 9b02         	ldr	r3, [sp, #0x8]
 805e4de: 4098         	lsls	r0, r3
;            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 805e4e0: 9905         	ldr	r1, [sp, #0x14]
 805e4e2: 409a         	lsls	r2, r3
 805e4e4: 3a01         	subs	r2, #0x1
 805e4e6: 4011         	ands	r1, r2
;            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 805e4e8: 4308         	orrs	r0, r1
;   return (
 805e4ea: b008         	add	sp, #0x20
 805e4ec: 4770         	bx	lr
 805e4ee: 0000         	movs	r0, r0

0805e4f0 <HAL_SYSTICK_Config>:
; {
 805e4f0: b580         	push	{r7, lr}
 805e4f2: 466f         	mov	r7, sp
 805e4f4: b082         	sub	sp, #0x8
 805e4f6: 9001         	str	r0, [sp, #0x4]
;   return SysTick_Config(TicksNumb);
 805e4f8: 9801         	ldr	r0, [sp, #0x4]
 805e4fa: 4902         	ldr	r1, [pc, #0x8]          @ 0x805e504 <HAL_SYSTICK_Config+0x14>
 805e4fc: 4788         	blx	r1
 805e4fe: b002         	add	sp, #0x8
 805e500: bd80         	pop	{r7, pc}
 805e502: bf00         	nop

0805e504 <$d.18>:
 805e504: 09 e5 05 08  	.word	0x0805e509

0805e508 <SysTick_Config>:
; {
 805e508: b580         	push	{r7, lr}
 805e50a: 466f         	mov	r7, sp
 805e50c: b084         	sub	sp, #0x10
 805e50e: 9002         	str	r0, [sp, #0x8]
;   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 805e510: 9802         	ldr	r0, [sp, #0x8]
 805e512: 3801         	subs	r0, #0x1
 805e514: f1b0 7f80    	cmp.w	r0, #0x1000000
 805e518: d303         	blo	0x805e522 <SysTick_Config+0x1a> @ imm = #0x6
 805e51a: e7ff         	b	0x805e51c <SysTick_Config+0x14> @ imm = #-0x2
 805e51c: 2001         	movs	r0, #0x1
;     return (1UL);                                                   /* Reload value impossible */
 805e51e: 9003         	str	r0, [sp, #0xc]
 805e520: e01a         	b	0x805e558 <SysTick_Config+0x50> @ imm = #0x34
;   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 805e522: 9802         	ldr	r0, [sp, #0x8]
 805e524: 3801         	subs	r0, #0x1
 805e526: f24e 0114    	movw	r1, #0xe014
 805e52a: f2ce 0100    	movt	r1, #0xe000
 805e52e: 6008         	str	r0, [r1]
;   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 805e530: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805e560 <SysTick_Config+0x58>
 805e532: f04f 30ff    	mov.w	r0, #0xffffffff
 805e536: 2107         	movs	r1, #0x7
 805e538: 9101         	str	r1, [sp, #0x4]
 805e53a: 4790         	blx	r2
 805e53c: 9901         	ldr	r1, [sp, #0x4]
 805e53e: f24e 0218    	movw	r2, #0xe018
 805e542: f2ce 0200    	movt	r2, #0xe000
 805e546: 2000         	movs	r0, #0x0
;   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 805e548: 6010         	str	r0, [r2]
 805e54a: f24e 0210    	movw	r2, #0xe010
 805e54e: f2ce 0200    	movt	r2, #0xe000
;   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 805e552: 6011         	str	r1, [r2]
;   return (0UL);                                                     /* Function successful */
 805e554: 9003         	str	r0, [sp, #0xc]
 805e556: e7ff         	b	0x805e558 <SysTick_Config+0x50> @ imm = #-0x2
; }
 805e558: 9803         	ldr	r0, [sp, #0xc]
 805e55a: b004         	add	sp, #0x10
 805e55c: bd80         	pop	{r7, pc}
 805e55e: bf00         	nop

0805e560 <$d.20>:
 805e560: 41 e4 05 08  	.word	0x0805e441

0805e564 <NMI_Handler>:
; DEFAULT_IRQ_HANDLER(NMI_Handler)
 805e564: e7ff         	b	0x805e566 <NMI_Handler+0x2> @ imm = #-0x2
 805e566: e7fe         	b	0x805e566 <NMI_Handler+0x2> @ imm = #-0x4

0805e568 <HardFault_Handler>:
; DEFAULT_IRQ_HANDLER(HardFault_Handler)
 805e568: e7ff         	b	0x805e56a <HardFault_Handler+0x2> @ imm = #-0x2
 805e56a: e7fe         	b	0x805e56a <HardFault_Handler+0x2> @ imm = #-0x4

0805e56c <MemManage_Handler>:
; DEFAULT_IRQ_HANDLER(MemManage_Handler)
 805e56c: e7ff         	b	0x805e56e <MemManage_Handler+0x2> @ imm = #-0x2
 805e56e: e7fe         	b	0x805e56e <MemManage_Handler+0x2> @ imm = #-0x4

0805e570 <BusFault_Handler>:
; DEFAULT_IRQ_HANDLER(BusFault_Handler)
 805e570: e7ff         	b	0x805e572 <BusFault_Handler+0x2> @ imm = #-0x2
 805e572: e7fe         	b	0x805e572 <BusFault_Handler+0x2> @ imm = #-0x4

0805e574 <UsageFault_Handler>:
; DEFAULT_IRQ_HANDLER(UsageFault_Handler)
 805e574: e7ff         	b	0x805e576 <UsageFault_Handler+0x2> @ imm = #-0x2
 805e576: e7fe         	b	0x805e576 <UsageFault_Handler+0x2> @ imm = #-0x4

0805e578 <SecureFault_Handler>:
; DEFAULT_IRQ_HANDLER(SecureFault_Handler)
 805e578: e7ff         	b	0x805e57a <SecureFault_Handler+0x2> @ imm = #-0x2
 805e57a: e7fe         	b	0x805e57a <SecureFault_Handler+0x2> @ imm = #-0x4

0805e57c <DebugMon_Handler>:
; DEFAULT_IRQ_HANDLER(DebugMon_Handler)
 805e57c: e7ff         	b	0x805e57e <DebugMon_Handler+0x2> @ imm = #-0x2
 805e57e: e7fe         	b	0x805e57e <DebugMon_Handler+0x2> @ imm = #-0x4

0805e580 <WWDG_IRQHandler>:
; DEFAULT_IRQ_HANDLER(WWDG_IRQHandler)
 805e580: e7ff         	b	0x805e582 <WWDG_IRQHandler+0x2> @ imm = #-0x2
 805e582: e7fe         	b	0x805e582 <WWDG_IRQHandler+0x2> @ imm = #-0x4

0805e584 <PVD_PVM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(PVD_PVM_IRQHandler)
 805e584: e7ff         	b	0x805e586 <PVD_PVM_IRQHandler+0x2> @ imm = #-0x2
 805e586: e7fe         	b	0x805e586 <PVD_PVM_IRQHandler+0x2> @ imm = #-0x4

0805e588 <RTC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RTC_IRQHandler)
 805e588: e7ff         	b	0x805e58a <RTC_IRQHandler+0x2> @ imm = #-0x2
 805e58a: e7fe         	b	0x805e58a <RTC_IRQHandler+0x2> @ imm = #-0x4

0805e58c <RTC_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(RTC_IRQHandler_S)
 805e58c: e7ff         	b	0x805e58e <RTC_IRQHandler_S+0x2> @ imm = #-0x2
 805e58e: e7fe         	b	0x805e58e <RTC_IRQHandler_S+0x2> @ imm = #-0x4

0805e590 <TAMP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TAMP_IRQHandler)
 805e590: e7ff         	b	0x805e592 <TAMP_IRQHandler+0x2> @ imm = #-0x2
 805e592: e7fe         	b	0x805e592 <TAMP_IRQHandler+0x2> @ imm = #-0x4

0805e594 <TAMP_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(TAMP_IRQHandler_S)
 805e594: e7ff         	b	0x805e596 <TAMP_IRQHandler_S+0x2> @ imm = #-0x2
 805e596: e7fe         	b	0x805e596 <TAMP_IRQHandler_S+0x2> @ imm = #-0x4

0805e598 <FLASH_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FLASH_IRQHandler)
 805e598: e7ff         	b	0x805e59a <FLASH_IRQHandler+0x2> @ imm = #-0x2
 805e59a: e7fe         	b	0x805e59a <FLASH_IRQHandler+0x2> @ imm = #-0x4

0805e59c <FLASH_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(FLASH_IRQHandler_S)
 805e59c: e7ff         	b	0x805e59e <FLASH_IRQHandler_S+0x2> @ imm = #-0x2
 805e59e: e7fe         	b	0x805e59e <FLASH_IRQHandler_S+0x2> @ imm = #-0x4

0805e5a0 <SERR_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SERR_IRQHandler)
 805e5a0: e7ff         	b	0x805e5a2 <SERR_IRQHandler+0x2> @ imm = #-0x2
 805e5a2: e7fe         	b	0x805e5a2 <SERR_IRQHandler+0x2> @ imm = #-0x4

0805e5a4 <RCC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RCC_IRQHandler)
 805e5a4: e7ff         	b	0x805e5a6 <RCC_IRQHandler+0x2> @ imm = #-0x2
 805e5a6: e7fe         	b	0x805e5a6 <RCC_IRQHandler+0x2> @ imm = #-0x4

0805e5a8 <RCC_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(RCC_IRQHandler_S)
 805e5a8: e7ff         	b	0x805e5aa <RCC_IRQHandler_S+0x2> @ imm = #-0x2
 805e5aa: e7fe         	b	0x805e5aa <RCC_IRQHandler_S+0x2> @ imm = #-0x4

0805e5ac <EXTI0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI0_IRQHandler)
 805e5ac: e7ff         	b	0x805e5ae <EXTI0_IRQHandler+0x2> @ imm = #-0x2
 805e5ae: e7fe         	b	0x805e5ae <EXTI0_IRQHandler+0x2> @ imm = #-0x4

0805e5b0 <EXTI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI1_IRQHandler)
 805e5b0: e7ff         	b	0x805e5b2 <EXTI1_IRQHandler+0x2> @ imm = #-0x2
 805e5b2: e7fe         	b	0x805e5b2 <EXTI1_IRQHandler+0x2> @ imm = #-0x4

0805e5b4 <EXTI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI2_IRQHandler)
 805e5b4: e7ff         	b	0x805e5b6 <EXTI2_IRQHandler+0x2> @ imm = #-0x2
 805e5b6: e7fe         	b	0x805e5b6 <EXTI2_IRQHandler+0x2> @ imm = #-0x4

0805e5b8 <EXTI3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI3_IRQHandler)
 805e5b8: e7ff         	b	0x805e5ba <EXTI3_IRQHandler+0x2> @ imm = #-0x2
 805e5ba: e7fe         	b	0x805e5ba <EXTI3_IRQHandler+0x2> @ imm = #-0x4

0805e5bc <EXTI4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI4_IRQHandler)
 805e5bc: e7ff         	b	0x805e5be <EXTI4_IRQHandler+0x2> @ imm = #-0x2
 805e5be: e7fe         	b	0x805e5be <EXTI4_IRQHandler+0x2> @ imm = #-0x4

0805e5c0 <EXTI5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI5_IRQHandler)
 805e5c0: e7ff         	b	0x805e5c2 <EXTI5_IRQHandler+0x2> @ imm = #-0x2
 805e5c2: e7fe         	b	0x805e5c2 <EXTI5_IRQHandler+0x2> @ imm = #-0x4

0805e5c4 <EXTI6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI6_IRQHandler)
 805e5c4: e7ff         	b	0x805e5c6 <EXTI6_IRQHandler+0x2> @ imm = #-0x2
 805e5c6: e7fe         	b	0x805e5c6 <EXTI6_IRQHandler+0x2> @ imm = #-0x4

0805e5c8 <EXTI7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI7_IRQHandler)
 805e5c8: e7ff         	b	0x805e5ca <EXTI7_IRQHandler+0x2> @ imm = #-0x2
 805e5ca: e7fe         	b	0x805e5ca <EXTI7_IRQHandler+0x2> @ imm = #-0x4

0805e5cc <EXTI8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI8_IRQHandler)
 805e5cc: e7ff         	b	0x805e5ce <EXTI8_IRQHandler+0x2> @ imm = #-0x2
 805e5ce: e7fe         	b	0x805e5ce <EXTI8_IRQHandler+0x2> @ imm = #-0x4

0805e5d0 <EXTI9_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI9_IRQHandler)
 805e5d0: e7ff         	b	0x805e5d2 <EXTI9_IRQHandler+0x2> @ imm = #-0x2
 805e5d2: e7fe         	b	0x805e5d2 <EXTI9_IRQHandler+0x2> @ imm = #-0x4

0805e5d4 <EXTI10_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI10_IRQHandler)
 805e5d4: e7ff         	b	0x805e5d6 <EXTI10_IRQHandler+0x2> @ imm = #-0x2
 805e5d6: e7fe         	b	0x805e5d6 <EXTI10_IRQHandler+0x2> @ imm = #-0x4

0805e5d8 <EXTI11_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI11_IRQHandler)
 805e5d8: e7ff         	b	0x805e5da <EXTI11_IRQHandler+0x2> @ imm = #-0x2
 805e5da: e7fe         	b	0x805e5da <EXTI11_IRQHandler+0x2> @ imm = #-0x4

0805e5dc <EXTI12_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI12_IRQHandler)
 805e5dc: e7ff         	b	0x805e5de <EXTI12_IRQHandler+0x2> @ imm = #-0x2
 805e5de: e7fe         	b	0x805e5de <EXTI12_IRQHandler+0x2> @ imm = #-0x4

0805e5e0 <EXTI13_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI13_IRQHandler)
 805e5e0: e7ff         	b	0x805e5e2 <EXTI13_IRQHandler+0x2> @ imm = #-0x2
 805e5e2: e7fe         	b	0x805e5e2 <EXTI13_IRQHandler+0x2> @ imm = #-0x4

0805e5e4 <EXTI14_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI14_IRQHandler)
 805e5e4: e7ff         	b	0x805e5e6 <EXTI14_IRQHandler+0x2> @ imm = #-0x2
 805e5e6: e7fe         	b	0x805e5e6 <EXTI14_IRQHandler+0x2> @ imm = #-0x4

0805e5e8 <EXTI15_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI15_IRQHandler)
 805e5e8: e7ff         	b	0x805e5ea <EXTI15_IRQHandler+0x2> @ imm = #-0x2
 805e5ea: e7fe         	b	0x805e5ea <EXTI15_IRQHandler+0x2> @ imm = #-0x4

0805e5ec <DMAMUX1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMAMUX1_IRQHandler)
 805e5ec: e7ff         	b	0x805e5ee <DMAMUX1_IRQHandler+0x2> @ imm = #-0x2
 805e5ee: e7fe         	b	0x805e5ee <DMAMUX1_IRQHandler+0x2> @ imm = #-0x4

0805e5f0 <DMAMUX1_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(DMAMUX1_IRQHandler_S)
 805e5f0: e7ff         	b	0x805e5f2 <DMAMUX1_IRQHandler_S+0x2> @ imm = #-0x2
 805e5f2: e7fe         	b	0x805e5f2 <DMAMUX1_IRQHandler_S+0x2> @ imm = #-0x4

0805e5f4 <DMA1_Channel1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel1_IRQHandler)
 805e5f4: e7ff         	b	0x805e5f6 <DMA1_Channel1_IRQHandler+0x2> @ imm = #-0x2
 805e5f6: e7fe         	b	0x805e5f6 <DMA1_Channel1_IRQHandler+0x2> @ imm = #-0x4

0805e5f8 <DMA1_Channel2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel2_IRQHandler)
 805e5f8: e7ff         	b	0x805e5fa <DMA1_Channel2_IRQHandler+0x2> @ imm = #-0x2
 805e5fa: e7fe         	b	0x805e5fa <DMA1_Channel2_IRQHandler+0x2> @ imm = #-0x4

0805e5fc <DMA1_Channel3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel3_IRQHandler)
 805e5fc: e7ff         	b	0x805e5fe <DMA1_Channel3_IRQHandler+0x2> @ imm = #-0x2
 805e5fe: e7fe         	b	0x805e5fe <DMA1_Channel3_IRQHandler+0x2> @ imm = #-0x4

0805e600 <DMA1_Channel4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel4_IRQHandler)
 805e600: e7ff         	b	0x805e602 <DMA1_Channel4_IRQHandler+0x2> @ imm = #-0x2
 805e602: e7fe         	b	0x805e602 <DMA1_Channel4_IRQHandler+0x2> @ imm = #-0x4

0805e604 <DMA1_Channel5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel5_IRQHandler)
 805e604: e7ff         	b	0x805e606 <DMA1_Channel5_IRQHandler+0x2> @ imm = #-0x2
 805e606: e7fe         	b	0x805e606 <DMA1_Channel5_IRQHandler+0x2> @ imm = #-0x4

0805e608 <DMA1_Channel6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel6_IRQHandler)
 805e608: e7ff         	b	0x805e60a <DMA1_Channel6_IRQHandler+0x2> @ imm = #-0x2
 805e60a: e7fe         	b	0x805e60a <DMA1_Channel6_IRQHandler+0x2> @ imm = #-0x4

0805e60c <DMA1_Channel7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel7_IRQHandler)
 805e60c: e7ff         	b	0x805e60e <DMA1_Channel7_IRQHandler+0x2> @ imm = #-0x2
 805e60e: e7fe         	b	0x805e60e <DMA1_Channel7_IRQHandler+0x2> @ imm = #-0x4

0805e610 <DMA1_Channel8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel8_IRQHandler)
 805e610: e7ff         	b	0x805e612 <DMA1_Channel8_IRQHandler+0x2> @ imm = #-0x2
 805e612: e7fe         	b	0x805e612 <DMA1_Channel8_IRQHandler+0x2> @ imm = #-0x4

0805e614 <ADC1_2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(ADC1_2_IRQHandler)
 805e614: e7ff         	b	0x805e616 <ADC1_2_IRQHandler+0x2> @ imm = #-0x2
 805e616: e7fe         	b	0x805e616 <ADC1_2_IRQHandler+0x2> @ imm = #-0x4

0805e618 <DAC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DAC_IRQHandler)
 805e618: e7ff         	b	0x805e61a <DAC_IRQHandler+0x2> @ imm = #-0x2
 805e61a: e7fe         	b	0x805e61a <DAC_IRQHandler+0x2> @ imm = #-0x4

0805e61c <FDCAN1_IT0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FDCAN1_IT0_IRQHandler)
 805e61c: e7ff         	b	0x805e61e <FDCAN1_IT0_IRQHandler+0x2> @ imm = #-0x2
 805e61e: e7fe         	b	0x805e61e <FDCAN1_IT0_IRQHandler+0x2> @ imm = #-0x4

0805e620 <FDCAN1_IT1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FDCAN1_IT1_IRQHandler)
 805e620: e7ff         	b	0x805e622 <FDCAN1_IT1_IRQHandler+0x2> @ imm = #-0x2
 805e622: e7fe         	b	0x805e622 <FDCAN1_IT1_IRQHandler+0x2> @ imm = #-0x4

0805e624 <TIM1_BRK_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_BRK_IRQHandler)
 805e624: e7ff         	b	0x805e626 <TIM1_BRK_IRQHandler+0x2> @ imm = #-0x2
 805e626: e7fe         	b	0x805e626 <TIM1_BRK_IRQHandler+0x2> @ imm = #-0x4

0805e628 <TIM1_UP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_UP_IRQHandler)
 805e628: e7ff         	b	0x805e62a <TIM1_UP_IRQHandler+0x2> @ imm = #-0x2
 805e62a: e7fe         	b	0x805e62a <TIM1_UP_IRQHandler+0x2> @ imm = #-0x4

0805e62c <TIM1_TRG_COM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_TRG_COM_IRQHandler)
 805e62c: e7ff         	b	0x805e62e <TIM1_TRG_COM_IRQHandler+0x2> @ imm = #-0x2
 805e62e: e7fe         	b	0x805e62e <TIM1_TRG_COM_IRQHandler+0x2> @ imm = #-0x4

0805e630 <TIM1_CC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_CC_IRQHandler)
 805e630: e7ff         	b	0x805e632 <TIM1_CC_IRQHandler+0x2> @ imm = #-0x2
 805e632: e7fe         	b	0x805e632 <TIM1_CC_IRQHandler+0x2> @ imm = #-0x4

0805e634 <TIM2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM2_IRQHandler)
 805e634: e7ff         	b	0x805e636 <TIM2_IRQHandler+0x2> @ imm = #-0x2
 805e636: e7fe         	b	0x805e636 <TIM2_IRQHandler+0x2> @ imm = #-0x4

0805e638 <TIM3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM3_IRQHandler)
 805e638: e7ff         	b	0x805e63a <TIM3_IRQHandler+0x2> @ imm = #-0x2
 805e63a: e7fe         	b	0x805e63a <TIM3_IRQHandler+0x2> @ imm = #-0x4

0805e63c <TIM4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM4_IRQHandler)
 805e63c: e7ff         	b	0x805e63e <TIM4_IRQHandler+0x2> @ imm = #-0x2
 805e63e: e7fe         	b	0x805e63e <TIM4_IRQHandler+0x2> @ imm = #-0x4

0805e640 <TIM5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM5_IRQHandler)
 805e640: e7ff         	b	0x805e642 <TIM5_IRQHandler+0x2> @ imm = #-0x2
 805e642: e7fe         	b	0x805e642 <TIM5_IRQHandler+0x2> @ imm = #-0x4

0805e644 <TIM6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM6_IRQHandler)
 805e644: e7ff         	b	0x805e646 <TIM6_IRQHandler+0x2> @ imm = #-0x2
 805e646: e7fe         	b	0x805e646 <TIM6_IRQHandler+0x2> @ imm = #-0x4

0805e648 <TIM7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM7_IRQHandler)
 805e648: e7ff         	b	0x805e64a <TIM7_IRQHandler+0x2> @ imm = #-0x2
 805e64a: e7fe         	b	0x805e64a <TIM7_IRQHandler+0x2> @ imm = #-0x4

0805e64c <TIM8_BRK_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_BRK_IRQHandler)
 805e64c: e7ff         	b	0x805e64e <TIM8_BRK_IRQHandler+0x2> @ imm = #-0x2
 805e64e: e7fe         	b	0x805e64e <TIM8_BRK_IRQHandler+0x2> @ imm = #-0x4

0805e650 <TIM8_UP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_UP_IRQHandler)
 805e650: e7ff         	b	0x805e652 <TIM8_UP_IRQHandler+0x2> @ imm = #-0x2
 805e652: e7fe         	b	0x805e652 <TIM8_UP_IRQHandler+0x2> @ imm = #-0x4

0805e654 <TIM8_TRG_COM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_TRG_COM_IRQHandler)
 805e654: e7ff         	b	0x805e656 <TIM8_TRG_COM_IRQHandler+0x2> @ imm = #-0x2
 805e656: e7fe         	b	0x805e656 <TIM8_TRG_COM_IRQHandler+0x2> @ imm = #-0x4

0805e658 <TIM8_CC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_CC_IRQHandler)
 805e658: e7ff         	b	0x805e65a <TIM8_CC_IRQHandler+0x2> @ imm = #-0x2
 805e65a: e7fe         	b	0x805e65a <TIM8_CC_IRQHandler+0x2> @ imm = #-0x4

0805e65c <I2C1_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C1_EV_IRQHandler)
 805e65c: e7ff         	b	0x805e65e <I2C1_EV_IRQHandler+0x2> @ imm = #-0x2
 805e65e: e7fe         	b	0x805e65e <I2C1_EV_IRQHandler+0x2> @ imm = #-0x4

0805e660 <I2C1_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C1_ER_IRQHandler)
 805e660: e7ff         	b	0x805e662 <I2C1_ER_IRQHandler+0x2> @ imm = #-0x2
 805e662: e7fe         	b	0x805e662 <I2C1_ER_IRQHandler+0x2> @ imm = #-0x4

0805e664 <I2C2_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C2_EV_IRQHandler)
 805e664: e7ff         	b	0x805e666 <I2C2_EV_IRQHandler+0x2> @ imm = #-0x2
 805e666: e7fe         	b	0x805e666 <I2C2_EV_IRQHandler+0x2> @ imm = #-0x4

0805e668 <I2C2_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C2_ER_IRQHandler)
 805e668: e7ff         	b	0x805e66a <I2C2_ER_IRQHandler+0x2> @ imm = #-0x2
 805e66a: e7fe         	b	0x805e66a <I2C2_ER_IRQHandler+0x2> @ imm = #-0x4

0805e66c <SPI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI1_IRQHandler)
 805e66c: e7ff         	b	0x805e66e <SPI1_IRQHandler+0x2> @ imm = #-0x2
 805e66e: e7fe         	b	0x805e66e <SPI1_IRQHandler+0x2> @ imm = #-0x4

0805e670 <SPI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI2_IRQHandler)
 805e670: e7ff         	b	0x805e672 <SPI2_IRQHandler+0x2> @ imm = #-0x2
 805e672: e7fe         	b	0x805e672 <SPI2_IRQHandler+0x2> @ imm = #-0x4

0805e674 <USART1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART1_IRQHandler)
 805e674: e7ff         	b	0x805e676 <USART1_IRQHandler+0x2> @ imm = #-0x2
 805e676: e7fe         	b	0x805e676 <USART1_IRQHandler+0x2> @ imm = #-0x4

0805e678 <USART2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART2_IRQHandler)
 805e678: e7ff         	b	0x805e67a <USART2_IRQHandler+0x2> @ imm = #-0x2
 805e67a: e7fe         	b	0x805e67a <USART2_IRQHandler+0x2> @ imm = #-0x4

0805e67c <USART3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART3_IRQHandler)
 805e67c: e7ff         	b	0x805e67e <USART3_IRQHandler+0x2> @ imm = #-0x2
 805e67e: e7fe         	b	0x805e67e <USART3_IRQHandler+0x2> @ imm = #-0x4

0805e680 <UART4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UART4_IRQHandler)
 805e680: e7ff         	b	0x805e682 <UART4_IRQHandler+0x2> @ imm = #-0x2
 805e682: e7fe         	b	0x805e682 <UART4_IRQHandler+0x2> @ imm = #-0x4

0805e684 <UART5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UART5_IRQHandler)
 805e684: e7ff         	b	0x805e686 <UART5_IRQHandler+0x2> @ imm = #-0x2
 805e686: e7fe         	b	0x805e686 <UART5_IRQHandler+0x2> @ imm = #-0x4

0805e688 <LPUART1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPUART1_IRQHandler)
 805e688: e7ff         	b	0x805e68a <LPUART1_IRQHandler+0x2> @ imm = #-0x2
 805e68a: e7fe         	b	0x805e68a <LPUART1_IRQHandler+0x2> @ imm = #-0x4

0805e68c <LPTIM1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM1_IRQHandler)
 805e68c: e7ff         	b	0x805e68e <LPTIM1_IRQHandler+0x2> @ imm = #-0x2
 805e68e: e7fe         	b	0x805e68e <LPTIM1_IRQHandler+0x2> @ imm = #-0x4

0805e690 <LPTIM2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM2_IRQHandler)
 805e690: e7ff         	b	0x805e692 <LPTIM2_IRQHandler+0x2> @ imm = #-0x2
 805e692: e7fe         	b	0x805e692 <LPTIM2_IRQHandler+0x2> @ imm = #-0x4

0805e694 <TIM15_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM15_IRQHandler)
 805e694: e7ff         	b	0x805e696 <TIM15_IRQHandler+0x2> @ imm = #-0x2
 805e696: e7fe         	b	0x805e696 <TIM15_IRQHandler+0x2> @ imm = #-0x4

0805e698 <TIM16_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM16_IRQHandler)
 805e698: e7ff         	b	0x805e69a <TIM16_IRQHandler+0x2> @ imm = #-0x2
 805e69a: e7fe         	b	0x805e69a <TIM16_IRQHandler+0x2> @ imm = #-0x4

0805e69c <TIM17_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM17_IRQHandler)
 805e69c: e7ff         	b	0x805e69e <TIM17_IRQHandler+0x2> @ imm = #-0x2
 805e69e: e7fe         	b	0x805e69e <TIM17_IRQHandler+0x2> @ imm = #-0x4

0805e6a0 <COMP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(COMP_IRQHandler)
 805e6a0: e7ff         	b	0x805e6a2 <COMP_IRQHandler+0x2> @ imm = #-0x2
 805e6a2: e7fe         	b	0x805e6a2 <COMP_IRQHandler+0x2> @ imm = #-0x4

0805e6a4 <USB_FS_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USB_FS_IRQHandler)
 805e6a4: e7ff         	b	0x805e6a6 <USB_FS_IRQHandler+0x2> @ imm = #-0x2
 805e6a6: e7fe         	b	0x805e6a6 <USB_FS_IRQHandler+0x2> @ imm = #-0x4

0805e6a8 <CRS_IRQHandler>:
; DEFAULT_IRQ_HANDLER(CRS_IRQHandler)
 805e6a8: e7ff         	b	0x805e6aa <CRS_IRQHandler+0x2> @ imm = #-0x2
 805e6aa: e7fe         	b	0x805e6aa <CRS_IRQHandler+0x2> @ imm = #-0x4

0805e6ac <FMC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FMC_IRQHandler)
 805e6ac: e7ff         	b	0x805e6ae <FMC_IRQHandler+0x2> @ imm = #-0x2
 805e6ae: e7fe         	b	0x805e6ae <FMC_IRQHandler+0x2> @ imm = #-0x4

0805e6b0 <OCTOSPI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(OCTOSPI1_IRQHandler)
 805e6b0: e7ff         	b	0x805e6b2 <OCTOSPI1_IRQHandler+0x2> @ imm = #-0x2
 805e6b2: e7fe         	b	0x805e6b2 <OCTOSPI1_IRQHandler+0x2> @ imm = #-0x4

0805e6b4 <SDMMC1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SDMMC1_IRQHandler)
 805e6b4: e7ff         	b	0x805e6b6 <SDMMC1_IRQHandler+0x2> @ imm = #-0x2
 805e6b6: e7fe         	b	0x805e6b6 <SDMMC1_IRQHandler+0x2> @ imm = #-0x4

0805e6b8 <DMA2_Channel1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel1_IRQHandler)
 805e6b8: e7ff         	b	0x805e6ba <DMA2_Channel1_IRQHandler+0x2> @ imm = #-0x2
 805e6ba: e7fe         	b	0x805e6ba <DMA2_Channel1_IRQHandler+0x2> @ imm = #-0x4

0805e6bc <DMA2_Channel2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel2_IRQHandler)
 805e6bc: e7ff         	b	0x805e6be <DMA2_Channel2_IRQHandler+0x2> @ imm = #-0x2
 805e6be: e7fe         	b	0x805e6be <DMA2_Channel2_IRQHandler+0x2> @ imm = #-0x4

0805e6c0 <DMA2_Channel3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel3_IRQHandler)
 805e6c0: e7ff         	b	0x805e6c2 <DMA2_Channel3_IRQHandler+0x2> @ imm = #-0x2
 805e6c2: e7fe         	b	0x805e6c2 <DMA2_Channel3_IRQHandler+0x2> @ imm = #-0x4

0805e6c4 <DMA2_Channel4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel4_IRQHandler)
 805e6c4: e7ff         	b	0x805e6c6 <DMA2_Channel4_IRQHandler+0x2> @ imm = #-0x2
 805e6c6: e7fe         	b	0x805e6c6 <DMA2_Channel4_IRQHandler+0x2> @ imm = #-0x4

0805e6c8 <DMA2_Channel5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel5_IRQHandler)
 805e6c8: e7ff         	b	0x805e6ca <DMA2_Channel5_IRQHandler+0x2> @ imm = #-0x2
 805e6ca: e7fe         	b	0x805e6ca <DMA2_Channel5_IRQHandler+0x2> @ imm = #-0x4

0805e6cc <DMA2_Channel6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel6_IRQHandler)
 805e6cc: e7ff         	b	0x805e6ce <DMA2_Channel6_IRQHandler+0x2> @ imm = #-0x2
 805e6ce: e7fe         	b	0x805e6ce <DMA2_Channel6_IRQHandler+0x2> @ imm = #-0x4

0805e6d0 <DMA2_Channel7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel7_IRQHandler)
 805e6d0: e7ff         	b	0x805e6d2 <DMA2_Channel7_IRQHandler+0x2> @ imm = #-0x2
 805e6d2: e7fe         	b	0x805e6d2 <DMA2_Channel7_IRQHandler+0x2> @ imm = #-0x4

0805e6d4 <DMA2_Channel8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel8_IRQHandler)
 805e6d4: e7ff         	b	0x805e6d6 <DMA2_Channel8_IRQHandler+0x2> @ imm = #-0x2
 805e6d6: e7fe         	b	0x805e6d6 <DMA2_Channel8_IRQHandler+0x2> @ imm = #-0x4

0805e6d8 <I2C3_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C3_EV_IRQHandler)
 805e6d8: e7ff         	b	0x805e6da <I2C3_EV_IRQHandler+0x2> @ imm = #-0x2
 805e6da: e7fe         	b	0x805e6da <I2C3_EV_IRQHandler+0x2> @ imm = #-0x4

0805e6dc <I2C3_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C3_ER_IRQHandler)
 805e6dc: e7ff         	b	0x805e6de <I2C3_ER_IRQHandler+0x2> @ imm = #-0x2
 805e6de: e7fe         	b	0x805e6de <I2C3_ER_IRQHandler+0x2> @ imm = #-0x4

0805e6e0 <SAI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SAI1_IRQHandler)
 805e6e0: e7ff         	b	0x805e6e2 <SAI1_IRQHandler+0x2> @ imm = #-0x2
 805e6e2: e7fe         	b	0x805e6e2 <SAI1_IRQHandler+0x2> @ imm = #-0x4

0805e6e4 <SAI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SAI2_IRQHandler)
 805e6e4: e7ff         	b	0x805e6e6 <SAI2_IRQHandler+0x2> @ imm = #-0x2
 805e6e6: e7fe         	b	0x805e6e6 <SAI2_IRQHandler+0x2> @ imm = #-0x4

0805e6e8 <TSC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TSC_IRQHandler)
 805e6e8: e7ff         	b	0x805e6ea <TSC_IRQHandler+0x2> @ imm = #-0x2
 805e6ea: e7fe         	b	0x805e6ea <TSC_IRQHandler+0x2> @ imm = #-0x4

0805e6ec <AES_IRQHandler>:
; DEFAULT_IRQ_HANDLER(AES_IRQHandler)
 805e6ec: e7ff         	b	0x805e6ee <AES_IRQHandler+0x2> @ imm = #-0x2
 805e6ee: e7fe         	b	0x805e6ee <AES_IRQHandler+0x2> @ imm = #-0x4

0805e6f0 <RNG_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RNG_IRQHandler)
 805e6f0: e7ff         	b	0x805e6f2 <RNG_IRQHandler+0x2> @ imm = #-0x2
 805e6f2: e7fe         	b	0x805e6f2 <RNG_IRQHandler+0x2> @ imm = #-0x4

0805e6f4 <FPU_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FPU_IRQHandler)
 805e6f4: e7ff         	b	0x805e6f6 <FPU_IRQHandler+0x2> @ imm = #-0x2
 805e6f6: e7fe         	b	0x805e6f6 <FPU_IRQHandler+0x2> @ imm = #-0x4

0805e6f8 <HASH_IRQHandler>:
; DEFAULT_IRQ_HANDLER(HASH_IRQHandler)
 805e6f8: e7ff         	b	0x805e6fa <HASH_IRQHandler+0x2> @ imm = #-0x2
 805e6fa: e7fe         	b	0x805e6fa <HASH_IRQHandler+0x2> @ imm = #-0x4

0805e6fc <PKA_IRQHandler>:
; DEFAULT_IRQ_HANDLER(PKA_IRQHandler)
 805e6fc: e7ff         	b	0x805e6fe <PKA_IRQHandler+0x2> @ imm = #-0x2
 805e6fe: e7fe         	b	0x805e6fe <PKA_IRQHandler+0x2> @ imm = #-0x4

0805e700 <LPTIM3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM3_IRQHandler)
 805e700: e7ff         	b	0x805e702 <LPTIM3_IRQHandler+0x2> @ imm = #-0x2
 805e702: e7fe         	b	0x805e702 <LPTIM3_IRQHandler+0x2> @ imm = #-0x4

0805e704 <SPI3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI3_IRQHandler)
 805e704: e7ff         	b	0x805e706 <SPI3_IRQHandler+0x2> @ imm = #-0x2
 805e706: e7fe         	b	0x805e706 <SPI3_IRQHandler+0x2> @ imm = #-0x4

0805e708 <I2C4_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C4_ER_IRQHandler)
 805e708: e7ff         	b	0x805e70a <I2C4_ER_IRQHandler+0x2> @ imm = #-0x2
 805e70a: e7fe         	b	0x805e70a <I2C4_ER_IRQHandler+0x2> @ imm = #-0x4

0805e70c <I2C4_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C4_EV_IRQHandler)
 805e70c: e7ff         	b	0x805e70e <I2C4_EV_IRQHandler+0x2> @ imm = #-0x2
 805e70e: e7fe         	b	0x805e70e <I2C4_EV_IRQHandler+0x2> @ imm = #-0x4

0805e710 <DFSDM1_FLT0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT0_IRQHandler)
 805e710: e7ff         	b	0x805e712 <DFSDM1_FLT0_IRQHandler+0x2> @ imm = #-0x2
 805e712: e7fe         	b	0x805e712 <DFSDM1_FLT0_IRQHandler+0x2> @ imm = #-0x4

0805e714 <DFSDM1_FLT1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT1_IRQHandler)
 805e714: e7ff         	b	0x805e716 <DFSDM1_FLT1_IRQHandler+0x2> @ imm = #-0x2
 805e716: e7fe         	b	0x805e716 <DFSDM1_FLT1_IRQHandler+0x2> @ imm = #-0x4

0805e718 <DFSDM1_FLT2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT2_IRQHandler)
 805e718: e7ff         	b	0x805e71a <DFSDM1_FLT2_IRQHandler+0x2> @ imm = #-0x2
 805e71a: e7fe         	b	0x805e71a <DFSDM1_FLT2_IRQHandler+0x2> @ imm = #-0x4

0805e71c <DFSDM1_FLT3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT3_IRQHandler)
 805e71c: e7ff         	b	0x805e71e <DFSDM1_FLT3_IRQHandler+0x2> @ imm = #-0x2
 805e71e: e7fe         	b	0x805e71e <DFSDM1_FLT3_IRQHandler+0x2> @ imm = #-0x4

0805e720 <UCPD1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UCPD1_IRQHandler)
 805e720: e7ff         	b	0x805e722 <UCPD1_IRQHandler+0x2> @ imm = #-0x2
 805e722: e7fe         	b	0x805e722 <UCPD1_IRQHandler+0x2> @ imm = #-0x4

0805e724 <ICACHE_IRQHandler>:
; DEFAULT_IRQ_HANDLER(ICACHE_IRQHandler)
 805e724: e7ff         	b	0x805e726 <ICACHE_IRQHandler+0x2> @ imm = #-0x2
 805e726: e7fe         	b	0x805e726 <ICACHE_IRQHandler+0x2> @ imm = #-0x4

0805e728 <OTFDEC1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(OTFDEC1_IRQHandler)
 805e728: e7ff         	b	0x805e72a <OTFDEC1_IRQHandler+0x2> @ imm = #-0x2
 805e72a: e7fe         	b	0x805e72a <OTFDEC1_IRQHandler+0x2> @ imm = #-0x4

0805e72c <Reset_Handler>:
; void Reset_Handler(void) {
 805e72c: b580         	push	{r7, lr}
 805e72e: 466f         	mov	r7, sp
 805e730: b088         	sub	sp, #0x20
 805e732: f642 70c0    	movw	r0, #0x2fc0
 805e736: f2c2 0000    	movt	r0, #0x2000
 805e73a: 9005         	str	r0, [sp, #0x14]
;   __ASM volatile("MSR msplim, %0" : : "r"(MainStackPtrLimit));
 805e73c: 9905         	ldr	r1, [sp, #0x14]
 805e73e: f381 880a    	msr	msplim, r1
 805e742: f643 71c0    	movw	r1, #0x3fc0
 805e746: f2c2 0100    	movt	r1, #0x2000
 805e74a: 9106         	str	r1, [sp, #0x18]
;   __ASM volatile("MSR psp, %0" : : "r"(topOfProcStack) :);
 805e74c: 9906         	ldr	r1, [sp, #0x18]
 805e74e: f381 8809    	msr	psp, r1
 805e752: 9007         	str	r0, [sp, #0x1c]
;   __ASM volatile("MSR psplim, %0" : : "r"(ProcStackPtrLimit));
 805e754: 9807         	ldr	r0, [sp, #0x1c]
 805e756: f380 880b    	msr	psplim, r0
;   SystemInit();      /* CMSIS System Initialization */
 805e75a: 4828         	ldr	r0, [pc, #0xa0]         @ 0x805e7fc <Reset_Handler+0xd0>
 805e75c: 4780         	blx	r0
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 805e75e: f645 5068    	movw	r0, #0x5d68
 805e762: f6c0 0006    	movt	r0, #0x806
 805e766: 9004         	str	r0, [sp, #0x10]
 805e768: e7ff         	b	0x805e76a <Reset_Handler+0x3e> @ imm = #-0x2
;        pTable < &__copy_table_end__; ++pTable) {
 805e76a: 9804         	ldr	r0, [sp, #0x10]
 805e76c: f645 5180    	movw	r1, #0x5d80
 805e770: f6c0 0106    	movt	r1, #0x806
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 805e774: 4288         	cmp	r0, r1
 805e776: d219         	bhs	0x805e7ac <Reset_Handler+0x80> @ imm = #0x32
 805e778: e7ff         	b	0x805e77a <Reset_Handler+0x4e> @ imm = #-0x2
 805e77a: 2000         	movs	r0, #0x0
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805e77c: 9003         	str	r0, [sp, #0xc]
 805e77e: e7ff         	b	0x805e780 <Reset_Handler+0x54> @ imm = #-0x2
 805e780: 9803         	ldr	r0, [sp, #0xc]
 805e782: 9904         	ldr	r1, [sp, #0x10]
 805e784: 6889         	ldr	r1, [r1, #0x8]
 805e786: 4288         	cmp	r0, r1
 805e788: d20c         	bhs	0x805e7a4 <Reset_Handler+0x78> @ imm = #0x18
 805e78a: e7ff         	b	0x805e78c <Reset_Handler+0x60> @ imm = #-0x2
;       pTable->dest[i] = pTable->src[i];
 805e78c: 9904         	ldr	r1, [sp, #0x10]
 805e78e: 9a03         	ldr	r2, [sp, #0xc]
 805e790: 6808         	ldr	r0, [r1]
 805e792: 6849         	ldr	r1, [r1, #0x4]
 805e794: f850 0022    	ldr.w	r0, [r0, r2, lsl #2]
 805e798: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805e79c: 9803         	ldr	r0, [sp, #0xc]
 805e79e: 3001         	adds	r0, #0x1
 805e7a0: 9003         	str	r0, [sp, #0xc]
 805e7a2: e7ed         	b	0x805e780 <Reset_Handler+0x54> @ imm = #-0x26
;        pTable < &__copy_table_end__; ++pTable) {
 805e7a4: 9804         	ldr	r0, [sp, #0x10]
 805e7a6: 300c         	adds	r0, #0xc
 805e7a8: 9004         	str	r0, [sp, #0x10]
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 805e7aa: e7de         	b	0x805e76a <Reset_Handler+0x3e> @ imm = #-0x44
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 805e7ac: f645 5080    	movw	r0, #0x5d80
 805e7b0: f6c0 0006    	movt	r0, #0x806
 805e7b4: 9002         	str	r0, [sp, #0x8]
 805e7b6: e7ff         	b	0x805e7b8 <Reset_Handler+0x8c> @ imm = #-0x2
;        pTable < &__zero_table_end__; ++pTable) {
 805e7b8: 9802         	ldr	r0, [sp, #0x8]
 805e7ba: f645 5190    	movw	r1, #0x5d90
 805e7be: f6c0 0106    	movt	r1, #0x806
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 805e7c2: 4288         	cmp	r0, r1
 805e7c4: d217         	bhs	0x805e7f6 <Reset_Handler+0xca> @ imm = #0x2e
 805e7c6: e7ff         	b	0x805e7c8 <Reset_Handler+0x9c> @ imm = #-0x2
 805e7c8: 2000         	movs	r0, #0x0
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805e7ca: 9001         	str	r0, [sp, #0x4]
 805e7cc: e7ff         	b	0x805e7ce <Reset_Handler+0xa2> @ imm = #-0x2
 805e7ce: 9801         	ldr	r0, [sp, #0x4]
 805e7d0: 9902         	ldr	r1, [sp, #0x8]
 805e7d2: 6849         	ldr	r1, [r1, #0x4]
 805e7d4: 4288         	cmp	r0, r1
 805e7d6: d20a         	bhs	0x805e7ee <Reset_Handler+0xc2> @ imm = #0x14
 805e7d8: e7ff         	b	0x805e7da <Reset_Handler+0xae> @ imm = #-0x2
;       pTable->dest[i] = 0u;
 805e7da: 9802         	ldr	r0, [sp, #0x8]
 805e7dc: 6801         	ldr	r1, [r0]
 805e7de: 9a01         	ldr	r2, [sp, #0x4]
 805e7e0: 2000         	movs	r0, #0x0
 805e7e2: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805e7e6: 9801         	ldr	r0, [sp, #0x4]
 805e7e8: 3001         	adds	r0, #0x1
 805e7ea: 9001         	str	r0, [sp, #0x4]
 805e7ec: e7ef         	b	0x805e7ce <Reset_Handler+0xa2> @ imm = #-0x22
;        pTable < &__zero_table_end__; ++pTable) {
 805e7ee: 9802         	ldr	r0, [sp, #0x8]
 805e7f0: 3008         	adds	r0, #0x8
 805e7f2: 9002         	str	r0, [sp, #0x8]
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 805e7f4: e7e0         	b	0x805e7b8 <Reset_Handler+0x8c> @ imm = #-0x40
;   main();
 805e7f6: 4802         	ldr	r0, [pc, #0x8]          @ 0x805e800 <Reset_Handler+0xd4>
 805e7f8: 4780         	blx	r0
 805e7fa: bf00         	nop

0805e7fc <$d.118>:
 805e7fc: 5f de 05 08  	.word	0x0805de5f
 805e800: 9d e8 05 08  	.word	0x0805e89d

0805e804 <getAddr>:
; void getAddr() {
 805e804: b580         	push	{r7, lr}
 805e806: 466f         	mov	r7, sp
;   ret_addr2 = __builtin_return_address(1);
 805e808: 4638         	mov	r0, r7
 805e80a: 6800         	ldr	r0, [r0]
 805e80c: 6841         	ldr	r1, [r0, #0x4]
 805e80e: f642 5040    	movw	r0, #0x2d40
 805e812: f2c2 0000    	movt	r0, #0x2000
 805e816: 6001         	str	r1, [r0]
;   printf("0x%x\n", ret_addr2);
 805e818: 6801         	ldr	r1, [r0]
 805e81a: f645 1058    	movw	r0, #0x5958
 805e81e: f6c0 0006    	movt	r0, #0x806
 805e822: 4a01         	ldr	r2, [pc, #0x4]          @ 0x805e828 <getAddr+0x24>
 805e824: 4790         	blx	r2
; }
 805e826: bd80         	pop	{r7, pc}

0805e828 <$d.1>:
 805e828: 91 ec 05 08  	.word	0x0805ec91

0805e82c <foo>:
; int foo(int a, int b) {
 805e82c: b580         	push	{r7, lr}
 805e82e: 466f         	mov	r7, sp
 805e830: b084         	sub	sp, #0x10
 805e832: 9003         	str	r0, [sp, #0xc]
 805e834: 9102         	str	r1, [sp, #0x8]
;   int c = a + b;
 805e836: 9803         	ldr	r0, [sp, #0xc]
 805e838: 9902         	ldr	r1, [sp, #0x8]
 805e83a: 4408         	add	r0, r1
 805e83c: 9001         	str	r0, [sp, #0x4]
;   getAddr();
 805e83e: 4802         	ldr	r0, [pc, #0x8]          @ 0x805e848 <foo+0x1c>
 805e840: 4780         	blx	r0
;   return c;
 805e842: 9801         	ldr	r0, [sp, #0x4]
 805e844: b004         	add	sp, #0x10
 805e846: bd80         	pop	{r7, pc}

0805e848 <$d.3>:
 805e848: 05 e8 05 08  	.word	0x0805e805

0805e84c <sum>:
; int sum(int a, int b) { return a + b; }
 805e84c: b082         	sub	sp, #0x8
 805e84e: 9001         	str	r0, [sp, #0x4]
 805e850: 9100         	str	r1, [sp]
 805e852: 9801         	ldr	r0, [sp, #0x4]
 805e854: 9900         	ldr	r1, [sp]
 805e856: 4408         	add	r0, r1
 805e858: b002         	add	sp, #0x8
 805e85a: 4770         	bx	lr

0805e85c <testThread>:
; void testThread(void *pvParameters) {
 805e85c: b580         	push	{r7, lr}
 805e85e: 466f         	mov	r7, sp
 805e860: b084         	sub	sp, #0x10
 805e862: 9003         	str	r0, [sp, #0xc]
;   while (1) {
 805e864: e7ff         	b	0x805e866 <testThread+0xa> @ imm = #-0x2
;     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 805e866: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x805e890 <testThread+0x34>
 805e868: f640 4000    	movw	r0, #0xc00
 805e86c: f2c4 2002    	movt	r0, #0x4202
 805e870: 2108         	movs	r1, #0x8
 805e872: 4790         	blx	r2
 805e874: 2002         	movs	r0, #0x2
;     int a = 2;
 805e876: 9002         	str	r0, [sp, #0x8]
 805e878: 2003         	movs	r0, #0x3
;     int b = 3;
 805e87a: 9001         	str	r0, [sp, #0x4]
;     int c = sum(a, b);
 805e87c: 9802         	ldr	r0, [sp, #0x8]
 805e87e: 9901         	ldr	r1, [sp, #0x4]
 805e880: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805e894 <testThread+0x38>
 805e882: 4790         	blx	r2
 805e884: 9000         	str	r0, [sp]
;     vTaskDelay(500);
 805e886: 4904         	ldr	r1, [pc, #0x10]         @ 0x805e898 <testThread+0x3c>
 805e888: f44f 70fa    	mov.w	r0, #0x1f4
 805e88c: 4788         	blx	r1
;   while (1) {
 805e88e: e7ea         	b	0x805e866 <testThread+0xa> @ imm = #-0x2c

0805e890 <$d.6>:
 805e890: 79 e3 05 08  	.word	0x0805e379
 805e894: 4d e8 05 08  	.word	0x0805e84d
 805e898: a9 ce 05 08  	.word	0x0805cea9

0805e89c <main>:
; int main() {
 805e89c: b580         	push	{r7, lr}
 805e89e: 466f         	mov	r7, sp
 805e8a0: b092         	sub	sp, #0x48
 805e8a2: 2000         	movs	r0, #0x0
 805e8a4: 9001         	str	r0, [sp, #0x4]
 805e8a6: 9011         	str	r0, [sp, #0x44]
;   HAL_Init();
 805e8a8: 4810         	ldr	r0, [pc, #0x40]         @ 0x805e8ec <main+0x50>
 805e8aa: 4780         	blx	r0
;   MX_GPIO_Init();
 805e8ac: 4810         	ldr	r0, [pc, #0x40]         @ 0x805e8f0 <main+0x54>
 805e8ae: 4780         	blx	r0
;   foo(1, 2);
 805e8b0: 4a10         	ldr	r2, [pc, #0x40]         @ 0x805e8f4 <main+0x58>
 805e8b2: 2001         	movs	r0, #0x1
 805e8b4: 2102         	movs	r1, #0x2
 805e8b6: 4790         	blx	r2
 805e8b8: 9901         	ldr	r1, [sp, #0x4]
;   TaskParameters_t taskParams = {
 805e8ba: f645 136c    	movw	r3, #0x596c
 805e8be: f6c0 0306    	movt	r3, #0x806
 805e8c2: a802         	add	r0, sp, #0x8
 805e8c4: 4602         	mov	r2, r0
 805e8c6: e8b3 5070    	ldm.w	r3!, {r4, r5, r6, r12, lr}
 805e8ca: e8a2 5070    	stm.w	r2!, {r4, r5, r6, r12, lr}
 805e8ce: e8b3 5070    	ldm.w	r3!, {r4, r5, r6, r12, lr}
 805e8d2: e8a2 5070    	stm.w	r2!, {r4, r5, r6, r12, lr}
 805e8d6: e893 5070    	ldm.w	r3, {r4, r5, r6, r12, lr}
 805e8da: e882 5070    	stm.w	r2, {r4, r5, r6, r12, lr}
;   xTaskCreateRestricted(&taskParams, NULL);
 805e8de: 4a06         	ldr	r2, [pc, #0x18]         @ 0x805e8f8 <main+0x5c>
 805e8e0: 4790         	blx	r2
;   vTaskStartScheduler();
 805e8e2: 4806         	ldr	r0, [pc, #0x18]         @ 0x805e8fc <main+0x60>
 805e8e4: 4780         	blx	r0
;   for (;;)
 805e8e6: e7ff         	b	0x805e8e8 <main+0x4c>   @ imm = #-0x2
 805e8e8: e7fe         	b	0x805e8e8 <main+0x4c>   @ imm = #-0x4
 805e8ea: bf00         	nop

0805e8ec <$d.8>:
 805e8ec: 81 dd 05 08  	.word	0x0805dd81
 805e8f0: 01 e9 05 08  	.word	0x0805e901
 805e8f4: 2d e8 05 08  	.word	0x0805e82d
 805e8f8: 01 52 05 08  	.word	0x08055201
 805e8fc: fd 65 05 08  	.word	0x080565fd

0805e900 <MX_GPIO_Init>:
; static void MX_GPIO_Init(void) {
 805e900: b580         	push	{r7, lr}
 805e902: 466f         	mov	r7, sp
 805e904: b08a         	sub	sp, #0x28
 805e906: 2000         	movs	r0, #0x0
;   GPIO_InitTypeDef GPIO_InitStruct = {0};
 805e908: 9009         	str	r0, [sp, #0x24]
 805e90a: 9008         	str	r0, [sp, #0x20]
 805e90c: 9007         	str	r0, [sp, #0x1c]
 805e90e: 9006         	str	r0, [sp, #0x18]
 805e910: 9005         	str	r0, [sp, #0x14]
;   __HAL_RCC_GPIOD_CLK_ENABLE();
 805e912: e7ff         	b	0x805e914 <MX_GPIO_Init+0x14> @ imm = #-0x2
 805e914: f241 004c    	movw	r0, #0x104c
 805e918: f2c4 0002    	movt	r0, #0x4002
;   __HAL_RCC_GPIOD_CLK_ENABLE();
 805e91c: 6801         	ldr	r1, [r0]
 805e91e: f041 0108    	orr	r1, r1, #0x8
 805e922: 6001         	str	r1, [r0]
 805e924: 6800         	ldr	r0, [r0]
 805e926: f000 0008    	and	r0, r0, #0x8
 805e92a: 9004         	str	r0, [sp, #0x10]
 805e92c: 9804         	ldr	r0, [sp, #0x10]
 805e92e: e7ff         	b	0x805e930 <MX_GPIO_Init+0x30> @ imm = #-0x2
;   HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_SET);
 805e930: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x805e960 <MX_GPIO_Init+0x60>
 805e932: f640 4000    	movw	r0, #0xc00
 805e936: f2c4 2002    	movt	r0, #0x4202
 805e93a: 9003         	str	r0, [sp, #0xc]
 805e93c: 2108         	movs	r1, #0x8
 805e93e: 9101         	str	r1, [sp, #0x4]
 805e940: 2201         	movs	r2, #0x1
 805e942: 9202         	str	r2, [sp, #0x8]
 805e944: 4798         	blx	r3
 805e946: 9a01         	ldr	r2, [sp, #0x4]
 805e948: 9902         	ldr	r1, [sp, #0x8]
 805e94a: 9803         	ldr	r0, [sp, #0xc]
;   GPIO_InitStruct.Pin = LED9_Pin;
 805e94c: 9205         	str	r2, [sp, #0x14]
;   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 805e94e: 9106         	str	r1, [sp, #0x18]
;   GPIO_InitStruct.Pull = GPIO_PULLUP;
 805e950: 9107         	str	r1, [sp, #0x1c]
 805e952: 2103         	movs	r1, #0x3
;   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 805e954: 9108         	str	r1, [sp, #0x20]
;   HAL_GPIO_Init(LED9_GPIO_Port, &GPIO_InitStruct);
 805e956: 4a03         	ldr	r2, [pc, #0xc]          @ 0x805e964 <MX_GPIO_Init+0x64>
 805e958: a905         	add	r1, sp, #0x14
 805e95a: 4790         	blx	r2
; }
 805e95c: b00a         	add	sp, #0x28
 805e95e: bd80         	pop	{r7, pc}

0805e960 <$d.10>:
 805e960: 4d e3 05 08  	.word	0x0805e34d
 805e964: dd df 05 08  	.word	0x0805dfdd

0805e968 <prvCreateIdleTasks>:
; {
 805e968: b580         	push	{r7, lr}
 805e96a: 466f         	mov	r7, sp
 805e96c: b08a         	sub	sp, #0x28
 805e96e: 2001         	movs	r0, #0x1
;     BaseType_t xReturn = pdPASS;
 805e970: 9009         	str	r0, [sp, #0x24]
 805e972: 2000         	movs	r0, #0x0
;     TaskFunction_t pxIdleTaskFunction = NULL;
 805e974: 9003         	str	r0, [sp, #0xc]
;     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 805e976: 9002         	str	r0, [sp, #0x8]
 805e978: e7ff         	b	0x805e97a <prvCreateIdleTasks+0x12> @ imm = #-0x2
 805e97a: 9802         	ldr	r0, [sp, #0x8]
 805e97c: 280f         	cmp	r0, #0xf
 805e97e: dc13         	bgt	0x805e9a8 <prvCreateIdleTasks+0x40> @ imm = #0x26
 805e980: e7ff         	b	0x805e982 <prvCreateIdleTasks+0x1a> @ imm = #-0x2
;         cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 805e982: 9a02         	ldr	r2, [sp, #0x8]
 805e984: f645 10ac    	movw	r0, #0x59ac
 805e988: f6c0 0006    	movt	r0, #0x806
 805e98c: 5c81         	ldrb	r1, [r0, r2]
 805e98e: a804         	add	r0, sp, #0x10
 805e990: 5481         	strb	r1, [r0, r2]
;         if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 805e992: 9902         	ldr	r1, [sp, #0x8]
 805e994: 5c40         	ldrb	r0, [r0, r1]
 805e996: b908         	cbnz	r0, 0x805e99c <prvCreateIdleTasks+0x34> @ imm = #0x2
 805e998: e7ff         	b	0x805e99a <prvCreateIdleTasks+0x32> @ imm = #-0x2
;             break;
 805e99a: e005         	b	0x805e9a8 <prvCreateIdleTasks+0x40> @ imm = #0xa
 805e99c: e7ff         	b	0x805e99e <prvCreateIdleTasks+0x36> @ imm = #-0x2
;     }
 805e99e: e7ff         	b	0x805e9a0 <prvCreateIdleTasks+0x38> @ imm = #-0x2
;     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 805e9a0: 9802         	ldr	r0, [sp, #0x8]
 805e9a2: 3001         	adds	r0, #0x1
 805e9a4: 9002         	str	r0, [sp, #0x8]
 805e9a6: e7e8         	b	0x805e97a <prvCreateIdleTasks+0x12> @ imm = #-0x30
 805e9a8: 2000         	movs	r0, #0x0
;     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 805e9aa: 9008         	str	r0, [sp, #0x20]
 805e9ac: e7ff         	b	0x805e9ae <prvCreateIdleTasks+0x46> @ imm = #-0x2
 805e9ae: 9808         	ldr	r0, [sp, #0x20]
 805e9b0: 2800         	cmp	r0, #0x0
 805e9b2: dc23         	bgt	0x805e9fc <prvCreateIdleTasks+0x94> @ imm = #0x46
 805e9b4: e7ff         	b	0x805e9b6 <prvCreateIdleTasks+0x4e> @ imm = #-0x2
;             pxIdleTaskFunction = prvIdleTask;
 805e9b6: f248 6099    	movw	r0, #0x8699
 805e9ba: f6c0 0005    	movt	r0, #0x805
 805e9be: 9003         	str	r0, [sp, #0xc]
;             xReturn = xTaskCreate( pxIdleTaskFunction,
 805e9c0: 9803         	ldr	r0, [sp, #0xc]
;                                    &xIdleTaskHandles[ xCoreID ] ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 805e9c2: 9a08         	ldr	r2, [sp, #0x20]
 805e9c4: f240 21ac    	movw	r1, #0x2ac
 805e9c8: f2c2 0100    	movt	r1, #0x2000
 805e9cc: eb01 0182    	add.w	r1, r1, r2, lsl #2
;             xReturn = xTaskCreate( pxIdleTaskFunction,
 805e9d0: 466a         	mov	r2, sp
 805e9d2: 6051         	str	r1, [r2, #0x4]
 805e9d4: f04f 4100    	mov.w	r1, #0x80000000
 805e9d8: 6011         	str	r1, [r2]
 805e9da: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x805ea04 <prvCreateIdleTasks+0x9c>
 805e9de: a904         	add	r1, sp, #0x10
 805e9e0: 2280         	movs	r2, #0x80
 805e9e2: 2300         	movs	r3, #0x0
 805e9e4: 47e0         	blx	r12
 805e9e6: 9009         	str	r0, [sp, #0x24]
;         if( xReturn == pdFAIL )
 805e9e8: 9809         	ldr	r0, [sp, #0x24]
 805e9ea: b908         	cbnz	r0, 0x805e9f0 <prvCreateIdleTasks+0x88> @ imm = #0x2
 805e9ec: e7ff         	b	0x805e9ee <prvCreateIdleTasks+0x86> @ imm = #-0x2
;             break;
 805e9ee: e005         	b	0x805e9fc <prvCreateIdleTasks+0x94> @ imm = #0xa
 805e9f0: e7ff         	b	0x805e9f2 <prvCreateIdleTasks+0x8a> @ imm = #-0x2
;     }
 805e9f2: e7ff         	b	0x805e9f4 <prvCreateIdleTasks+0x8c> @ imm = #-0x2
;     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 805e9f4: 9808         	ldr	r0, [sp, #0x20]
 805e9f6: 3001         	adds	r0, #0x1
 805e9f8: 9008         	str	r0, [sp, #0x20]
 805e9fa: e7d8         	b	0x805e9ae <prvCreateIdleTasks+0x46> @ imm = #-0x50
;     return xReturn;
 805e9fc: 9809         	ldr	r0, [sp, #0x24]
 805e9fe: b00a         	add	sp, #0x28
 805ea00: bd80         	pop	{r7, pc}
 805ea02: bf00         	nop

0805ea04 <$d.47>:
 805ea04: 75 54 05 08  	.word	0x08055475

0805ea08 <prvTaskExitError>:
; {
 805ea08: b580         	push	{r7, lr}
 805ea0a: 466f         	mov	r7, sp
 805ea0c: b082         	sub	sp, #0x8
 805ea0e: 2000         	movs	r0, #0x0
;     volatile uint32_t ulDummy = 0UL;
 805ea10: 9001         	str	r0, [sp, #0x4]
;     configASSERT( ulCriticalNesting == ~0UL );
 805ea12: f242 3078    	movw	r0, #0x2378
 805ea16: f2c2 0000    	movt	r0, #0x2000
 805ea1a: 6800         	ldr	r0, [r0]
 805ea1c: 3001         	adds	r0, #0x1
 805ea1e: b120         	cbz	r0, 0x805ea2a <prvTaskExitError+0x22> @ imm = #0x8
 805ea20: e7ff         	b	0x805ea22 <prvTaskExitError+0x1a> @ imm = #-0x2
 805ea22: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805ea40 <prvTaskExitError+0x38>
 805ea24: 4780         	blx	r0
 805ea26: e7ff         	b	0x805ea28 <prvTaskExitError+0x20> @ imm = #-0x2
 805ea28: e7fe         	b	0x805ea28 <prvTaskExitError+0x20> @ imm = #-0x4
;     portDISABLE_INTERRUPTS();
 805ea2a: 4804         	ldr	r0, [pc, #0x10]         @ 0x805ea3c <prvTaskExitError+0x34>
 805ea2c: 4780         	blx	r0
;     while( ulDummy == 0 )
 805ea2e: e7ff         	b	0x805ea30 <prvTaskExitError+0x28> @ imm = #-0x2
 805ea30: 9801         	ldr	r0, [sp, #0x4]
 805ea32: b908         	cbnz	r0, 0x805ea38 <prvTaskExitError+0x30> @ imm = #0x2
 805ea34: e7ff         	b	0x805ea36 <prvTaskExitError+0x2e> @ imm = #-0x2
 805ea36: e7fb         	b	0x805ea30 <prvTaskExitError+0x28> @ imm = #-0xa
; }
 805ea38: b002         	add	sp, #0x8
 805ea3a: bd80         	pop	{r7, pc}

0805ea3c <$d.12>:
 805ea3c: 55 cd 05 08  	.word	0x0805cd55
 805ea40: 55 cd 05 08  	.word	0x0805cd55

0805ea44 <vPortValidateInterruptPriority>:
;     {
 805ea44: b580         	push	{r7, lr}
 805ea46: 466f         	mov	r7, sp
 805ea48: b082         	sub	sp, #0x8
;         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 805ea4a: f3ef 8005    	mrs	r0, ipsr
 805ea4e: 9001         	str	r0, [sp, #0x4]
;         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 805ea50: 9801         	ldr	r0, [sp, #0x4]
 805ea52: 2810         	cmp	r0, #0x10
 805ea54: d317         	blo	0x805ea86 <vPortValidateInterruptPriority+0x42> @ imm = #0x2e
 805ea56: e7ff         	b	0x805ea58 <vPortValidateInterruptPriority+0x14> @ imm = #-0x2
;             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 805ea58: 9801         	ldr	r0, [sp, #0x4]
 805ea5a: f24e 31f0    	movw	r1, #0xe3f0
 805ea5e: f2ce 0100    	movt	r1, #0xe000
 805ea62: 5c40         	ldrb	r0, [r0, r1]
 805ea64: f807 0c05    	strb	r0, [r7, #-5]
;             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 805ea68: f817 0c05    	ldrb	r0, [r7, #-5]
 805ea6c: f642 7160    	movw	r1, #0x2f60
 805ea70: f2c2 0100    	movt	r1, #0x2000
 805ea74: 7809         	ldrb	r1, [r1]
 805ea76: 4288         	cmp	r0, r1
 805ea78: da04         	bge	0x805ea84 <vPortValidateInterruptPriority+0x40> @ imm = #0x8
 805ea7a: e7ff         	b	0x805ea7c <vPortValidateInterruptPriority+0x38> @ imm = #-0x2
 805ea7c: 480d         	ldr	r0, [pc, #0x34]         @ 0x805eab4 <vPortValidateInterruptPriority+0x70>
 805ea7e: 4780         	blx	r0
 805ea80: e7ff         	b	0x805ea82 <vPortValidateInterruptPriority+0x3e> @ imm = #-0x2
 805ea82: e7fe         	b	0x805ea82 <vPortValidateInterruptPriority+0x3e> @ imm = #-0x4
;         }
 805ea84: e7ff         	b	0x805ea86 <vPortValidateInterruptPriority+0x42> @ imm = #-0x2
 805ea86: f64e 500c    	movw	r0, #0xed0c
 805ea8a: f2ce 0000    	movt	r0, #0xe000
;         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 805ea8e: 6800         	ldr	r0, [r0]
 805ea90: f400 60e0    	and	r0, r0, #0x700
 805ea94: f642 7164    	movw	r1, #0x2f64
 805ea98: f2c2 0100    	movt	r1, #0x2000
 805ea9c: 6809         	ldr	r1, [r1]
 805ea9e: 4288         	cmp	r0, r1
 805eaa0: d904         	bls	0x805eaac <vPortValidateInterruptPriority+0x68> @ imm = #0x8
 805eaa2: e7ff         	b	0x805eaa4 <vPortValidateInterruptPriority+0x60> @ imm = #-0x2
 805eaa4: 4802         	ldr	r0, [pc, #0x8]          @ 0x805eab0 <vPortValidateInterruptPriority+0x6c>
 805eaa6: 4780         	blx	r0
 805eaa8: e7ff         	b	0x805eaaa <vPortValidateInterruptPriority+0x66> @ imm = #-0x2
 805eaaa: e7fe         	b	0x805eaaa <vPortValidateInterruptPriority+0x66> @ imm = #-0x4
;     }
 805eaac: b002         	add	sp, #0x8
 805eaae: bd80         	pop	{r7, pc}

0805eab0 <$d.23>:
 805eab0: 55 cd 05 08  	.word	0x0805cd55
 805eab4: 55 cd 05 08  	.word	0x0805cd55
 805eab8: 00 00 00 00  	.word	0x00000000
 805eabc: 00 00 00 00  	.word	0x00000000

0805eac0 <xIsPrivileged>:
;     __asm volatile
 805eac0: f3ef 8014    	mrs	r0, control
 805eac4: f010 0f01    	tst.w	r0, #0x1
 805eac8: bf14         	ite	ne
 805eaca: 2000         	movne	r0, #0x0
 805eacc: 2001         	moveq	r0, #0x1
 805eace: 4770         	bx	lr

0805ead0 <vResetPrivilege>:
;     __asm volatile
 805ead0: f3ef 8014    	mrs	r0, control
 805ead4: f040 0001    	orr	r0, r0, #0x1
 805ead8: f380 8814    	msr	control, r0
 805eadc: 4770         	bx	lr
 805eade: 0000         	movs	r0, r0

0805eae0 <memcpy>:
 805eae0: 4684         	mov	r12, r0
 805eae2: ea41 0300    	orr.w	r3, r1, r0
 805eae6: f013 0303    	ands	r3, r3, #0x3
 805eaea: d149         	bne	0x805eb80 <memcpy+0xa0> @ imm = #0x92
 805eaec: 3a40         	subs	r2, #0x40
 805eaee: d323         	blo	0x805eb38 <memcpy+0x58> @ imm = #0x46
 805eaf0: 680b         	ldr	r3, [r1]
 805eaf2: 6003         	str	r3, [r0]
 805eaf4: 684b         	ldr	r3, [r1, #0x4]
 805eaf6: 6043         	str	r3, [r0, #0x4]
 805eaf8: 688b         	ldr	r3, [r1, #0x8]
 805eafa: 6083         	str	r3, [r0, #0x8]
 805eafc: 68cb         	ldr	r3, [r1, #0xc]
 805eafe: 60c3         	str	r3, [r0, #0xc]
 805eb00: 690b         	ldr	r3, [r1, #0x10]
 805eb02: 6103         	str	r3, [r0, #0x10]
 805eb04: 694b         	ldr	r3, [r1, #0x14]
 805eb06: 6143         	str	r3, [r0, #0x14]
 805eb08: 698b         	ldr	r3, [r1, #0x18]
 805eb0a: 6183         	str	r3, [r0, #0x18]
 805eb0c: 69cb         	ldr	r3, [r1, #0x1c]
 805eb0e: 61c3         	str	r3, [r0, #0x1c]
 805eb10: 6a0b         	ldr	r3, [r1, #0x20]
 805eb12: 6203         	str	r3, [r0, #0x20]
 805eb14: 6a4b         	ldr	r3, [r1, #0x24]
 805eb16: 6243         	str	r3, [r0, #0x24]
 805eb18: 6a8b         	ldr	r3, [r1, #0x28]
 805eb1a: 6283         	str	r3, [r0, #0x28]
 805eb1c: 6acb         	ldr	r3, [r1, #0x2c]
 805eb1e: 62c3         	str	r3, [r0, #0x2c]
 805eb20: 6b0b         	ldr	r3, [r1, #0x30]
 805eb22: 6303         	str	r3, [r0, #0x30]
 805eb24: 6b4b         	ldr	r3, [r1, #0x34]
 805eb26: 6343         	str	r3, [r0, #0x34]
 805eb28: 6b8b         	ldr	r3, [r1, #0x38]
 805eb2a: 6383         	str	r3, [r0, #0x38]
 805eb2c: 6bcb         	ldr	r3, [r1, #0x3c]
 805eb2e: 63c3         	str	r3, [r0, #0x3c]
 805eb30: 3040         	adds	r0, #0x40
 805eb32: 3140         	adds	r1, #0x40
 805eb34: 3a40         	subs	r2, #0x40
 805eb36: d2db         	bhs	0x805eaf0 <memcpy+0x10> @ imm = #-0x4a
 805eb38: 3230         	adds	r2, #0x30
 805eb3a: d30b         	blo	0x805eb54 <memcpy+0x74> @ imm = #0x16
 805eb3c: 680b         	ldr	r3, [r1]
 805eb3e: 6003         	str	r3, [r0]
 805eb40: 684b         	ldr	r3, [r1, #0x4]
 805eb42: 6043         	str	r3, [r0, #0x4]
 805eb44: 688b         	ldr	r3, [r1, #0x8]
 805eb46: 6083         	str	r3, [r0, #0x8]
 805eb48: 68cb         	ldr	r3, [r1, #0xc]
 805eb4a: 60c3         	str	r3, [r0, #0xc]
 805eb4c: 3010         	adds	r0, #0x10
 805eb4e: 3110         	adds	r1, #0x10
 805eb50: 3a10         	subs	r2, #0x10
 805eb52: d2f3         	bhs	0x805eb3c <memcpy+0x5c> @ imm = #-0x1a
 805eb54: 320c         	adds	r2, #0xc
 805eb56: d305         	blo	0x805eb64 <memcpy+0x84> @ imm = #0xa
 805eb58: f851 3b04    	ldr	r3, [r1], #4
 805eb5c: f840 3b04    	str	r3, [r0], #4
 805eb60: 3a04         	subs	r2, #0x4
 805eb62: d2f9         	bhs	0x805eb58 <memcpy+0x78> @ imm = #-0xe
 805eb64: 3204         	adds	r2, #0x4
 805eb66: d008         	beq	0x805eb7a <memcpy+0x9a> @ imm = #0x10
 805eb68: 07d2         	lsls	r2, r2, #0x1f
 805eb6a: bf1c         	itt	ne
 805eb6c: f811 3b01    	ldrbne	r3, [r1], #1
 805eb70: f800 3b01    	strbne	r3, [r0], #1
 805eb74: d301         	blo	0x805eb7a <memcpy+0x9a> @ imm = #0x2
 805eb76: 880b         	ldrh	r3, [r1]
 805eb78: 8003         	strh	r3, [r0]
 805eb7a: 4660         	mov	r0, r12
 805eb7c: 4770         	bx	lr
 805eb7e: bf00         	nop
 805eb80: 2a08         	cmp	r2, #0x8
 805eb82: d313         	blo	0x805ebac <memcpy+0xcc> @ imm = #0x26
 805eb84: 078b         	lsls	r3, r1, #0x1e
 805eb86: d0b1         	beq	0x805eaec <memcpy+0xc>  @ imm = #-0x9e
 805eb88: f010 0303    	ands	r3, r0, #0x3
 805eb8c: d0ae         	beq	0x805eaec <memcpy+0xc>  @ imm = #-0xa4
 805eb8e: f1c3 0304    	rsb.w	r3, r3, #0x4
 805eb92: 1ad2         	subs	r2, r2, r3
 805eb94: 07db         	lsls	r3, r3, #0x1f
 805eb96: bf1c         	itt	ne
 805eb98: f811 3b01    	ldrbne	r3, [r1], #1
 805eb9c: f800 3b01    	strbne	r3, [r0], #1
 805eba0: d3a4         	blo	0x805eaec <memcpy+0xc>  @ imm = #-0xb8
 805eba2: f831 3b02    	ldrh	r3, [r1], #2
 805eba6: f820 3b02    	strh	r3, [r0], #2
 805ebaa: e79f         	b	0x805eaec <memcpy+0xc>  @ imm = #-0xc2
 805ebac: 3a04         	subs	r2, #0x4
 805ebae: d3d9         	blo	0x805eb64 <memcpy+0x84> @ imm = #-0x4e
 805ebb0: 3a01         	subs	r2, #0x1
 805ebb2: f811 3b01    	ldrb	r3, [r1], #1
 805ebb6: f800 3b01    	strb	r3, [r0], #1
 805ebba: d2f9         	bhs	0x805ebb0 <memcpy+0xd0> @ imm = #-0xe
 805ebbc: 780b         	ldrb	r3, [r1]
 805ebbe: 7003         	strb	r3, [r0]
 805ebc0: 784b         	ldrb	r3, [r1, #0x1]
 805ebc2: 7043         	strb	r3, [r0, #0x1]
 805ebc4: 788b         	ldrb	r3, [r1, #0x2]
 805ebc6: 7083         	strb	r3, [r0, #0x2]
 805ebc8: 4660         	mov	r0, r12
 805ebca: 4770         	bx	lr

0805ebcc <memset>:
 805ebcc: b570         	push	{r4, r5, r6, lr}
 805ebce: 0786         	lsls	r6, r0, #0x1e
 805ebd0: d048         	beq	0x805ec64 <memset+0x98> @ imm = #0x90
 805ebd2: 1e54         	subs	r4, r2, #0x1
 805ebd4: 2a00         	cmp	r2, #0x0
 805ebd6: d03f         	beq	0x805ec58 <memset+0x8c> @ imm = #0x7e
 805ebd8: b2ca         	uxtb	r2, r1
 805ebda: 4603         	mov	r3, r0
 805ebdc: e001         	b	0x805ebe2 <memset+0x16> @ imm = #0x2
 805ebde: 3c01         	subs	r4, #0x1
 805ebe0: d33a         	blo	0x805ec58 <memset+0x8c> @ imm = #0x74
 805ebe2: f803 2b01    	strb	r2, [r3], #1
 805ebe6: 079d         	lsls	r5, r3, #0x1e
 805ebe8: d1f9         	bne	0x805ebde <memset+0x12> @ imm = #-0xe
 805ebea: 2c03         	cmp	r4, #0x3
 805ebec: d92d         	bls	0x805ec4a <memset+0x7e> @ imm = #0x5a
 805ebee: b2cd         	uxtb	r5, r1
 805ebf0: 2c0f         	cmp	r4, #0xf
 805ebf2: ea45 2505    	orr.w	r5, r5, r5, lsl #8
 805ebf6: ea45 4505    	orr.w	r5, r5, r5, lsl #16
 805ebfa: d936         	bls	0x805ec6a <memset+0x9e> @ imm = #0x6c
 805ebfc: f1a4 0c10    	sub.w	r12, r4, #0x10
 805ec00: f103 0e20    	add.w	lr, r3, #0x20
 805ec04: f103 0210    	add.w	r2, r3, #0x10
 805ec08: f02c 060f    	bic	r6, r12, #0xf
 805ec0c: ea4f 1c1c    	lsr.w	r12, r12, #0x4
 805ec10: 44b6         	add	lr, r6
 805ec12: e942 5504    	strd	r5, r5, [r2, #-16]
 805ec16: e942 5502    	strd	r5, r5, [r2, #-8]
 805ec1a: 3210         	adds	r2, #0x10
 805ec1c: 4572         	cmp	r2, lr
 805ec1e: d1f8         	bne	0x805ec12 <memset+0x46> @ imm = #-0x10
 805ec20: f10c 0201    	add.w	r2, r12, #0x1
 805ec24: f014 0f0c    	tst.w	r4, #0xc
 805ec28: f004 0c0f    	and	r12, r4, #0xf
 805ec2c: eb03 1202    	add.w	r2, r3, r2, lsl #4
 805ec30: d013         	beq	0x805ec5a <memset+0x8e> @ imm = #0x26
 805ec32: f1ac 0304    	sub.w	r3, r12, #0x4
 805ec36: f023 0303    	bic	r3, r3, #0x3
 805ec3a: 3304         	adds	r3, #0x4
 805ec3c: 4413         	add	r3, r2
 805ec3e: f842 5b04    	str	r5, [r2], #4
 805ec42: 4293         	cmp	r3, r2
 805ec44: d1fb         	bne	0x805ec3e <memset+0x72> @ imm = #-0xa
 805ec46: f00c 0403    	and	r4, r12, #0x3
 805ec4a: b12c         	cbz	r4, 0x805ec58 <memset+0x8c> @ imm = #0xa
 805ec4c: b2ca         	uxtb	r2, r1
 805ec4e: 441c         	add	r4, r3
 805ec50: f803 2b01    	strb	r2, [r3], #1
 805ec54: 429c         	cmp	r4, r3
 805ec56: d1fb         	bne	0x805ec50 <memset+0x84> @ imm = #-0xa
 805ec58: bd70         	pop	{r4, r5, r6, pc}
 805ec5a: 4664         	mov	r4, r12
 805ec5c: 4613         	mov	r3, r2
 805ec5e: 2c00         	cmp	r4, #0x0
 805ec60: d1f4         	bne	0x805ec4c <memset+0x80> @ imm = #-0x18
 805ec62: e7f9         	b	0x805ec58 <memset+0x8c> @ imm = #-0xe
 805ec64: 4603         	mov	r3, r0
 805ec66: 4614         	mov	r4, r2
 805ec68: e7bf         	b	0x805ebea <memset+0x1e> @ imm = #-0x82
 805ec6a: 461a         	mov	r2, r3
 805ec6c: 46a4         	mov	r12, r4
 805ec6e: e7e0         	b	0x805ec32 <memset+0x66> @ imm = #-0x40

0805ec70 <_printf_r>:
 805ec70: b40e         	push	{r1, r2, r3}
 805ec72: b500         	push	{lr}
 805ec74: b082         	sub	sp, #0x8
 805ec76: 6881         	ldr	r1, [r0, #0x8]
 805ec78: ab03         	add	r3, sp, #0xc
 805ec7a: f853 2b04    	ldr	r2, [r3], #4
 805ec7e: 9301         	str	r3, [sp, #0x4]
 805ec80: f000 f81a    	bl	0x805ecb8 <_vfprintf_r> @ imm = #0x34
 805ec84: b002         	add	sp, #0x8
 805ec86: f85d eb04    	ldr	lr, [sp], #4
 805ec8a: b003         	add	sp, #0xc
 805ec8c: 4770         	bx	lr
 805ec8e: bf00         	nop

0805ec90 <printf>:
 805ec90: b40f         	push	{r0, r1, r2, r3}
 805ec92: 4908         	ldr	r1, [pc, #0x20]         @ 0x805ecb4 <printf+0x24>
 805ec94: b500         	push	{lr}
 805ec96: b083         	sub	sp, #0xc
 805ec98: 6808         	ldr	r0, [r1]
 805ec9a: ab04         	add	r3, sp, #0x10
 805ec9c: 6881         	ldr	r1, [r0, #0x8]
 805ec9e: f853 2b04    	ldr	r2, [r3], #4
 805eca2: 9301         	str	r3, [sp, #0x4]
 805eca4: f000 f808    	bl	0x805ecb8 <_vfprintf_r> @ imm = #0x10
 805eca8: b003         	add	sp, #0xc
 805ecaa: f85d eb04    	ldr	lr, [sp], #4
 805ecae: b004         	add	sp, #0x10
 805ecb0: 4770         	bx	lr
 805ecb2: bf00         	nop

0805ecb4 <$d>:
 805ecb4: 90 23 00 20  	.word	0x20002390

0805ecb8 <_vfprintf_r>:
 805ecb8: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805ecbc: b0bf         	sub	sp, #0xfc
 805ecbe: 461c         	mov	r4, r3
 805ecc0: 4689         	mov	r9, r1
 805ecc2: 4617         	mov	r7, r2
 805ecc4: 4682         	mov	r10, r0
 805ecc6: f002 febd    	bl	0x8061a44 <_localeconv_r> @ imm = #0x2d7a
 805ecca: 6803         	ldr	r3, [r0]
 805eccc: 940c         	str	r4, [sp, #0x30]
 805ecce: 4618         	mov	r0, r3
 805ecd0: 9314         	str	r3, [sp, #0x50]
 805ecd2: f003 ffeb    	bl	0x8062cac <strlen>      @ imm = #0x3fd6
 805ecd6: 9012         	str	r0, [sp, #0x48]
 805ecd8: f1ba 0f00    	cmp.w	r10, #0x0
 805ecdc: d004         	beq	0x805ece8 <_vfprintf_r+0x30> @ imm = #0x8
 805ecde: f8da 3038    	ldr.w	r3, [r10, #0x38]
 805ece2: 2b00         	cmp	r3, #0x0
 805ece4: f000 81b9    	beq.w	0x805f05a <_vfprintf_r+0x3a2> @ imm = #0x372
 805ece8: f9b9 300c    	ldrsh.w	r3, [r9, #0xc]
 805ecec: 049d         	lsls	r5, r3, #0x12
 805ecee: b29a         	uxth	r2, r3
 805ecf0: d40a         	bmi	0x805ed08 <_vfprintf_r+0x50> @ imm = #0x14
 805ecf2: f443 5300    	orr	r3, r3, #0x2000
 805ecf6: b29a         	uxth	r2, r3
 805ecf8: f8a9 300c    	strh.w	r3, [r9, #0xc]
 805ecfc: f8d9 3064    	ldr.w	r3, [r9, #0x64]
 805ed00: f423 5300    	bic	r3, r3, #0x2000
 805ed04: f8c9 3064    	str.w	r3, [r9, #0x64]
 805ed08: 0710         	lsls	r0, r2, #0x1c
 805ed0a: f140 80b6    	bpl.w	0x805ee7a <_vfprintf_r+0x1c2> @ imm = #0x16c
 805ed0e: f8d9 3010    	ldr.w	r3, [r9, #0x10]
 805ed12: 2b00         	cmp	r3, #0x0
 805ed14: f000 80b1    	beq.w	0x805ee7a <_vfprintf_r+0x1c2> @ imm = #0x162
 805ed18: f002 021a    	and	r2, r2, #0x1a
 805ed1c: 2a0a         	cmp	r2, #0xa
 805ed1e: f000 80ba    	beq.w	0x805ee96 <_vfprintf_r+0x1de> @ imm = #0x174
 805ed22: 2300         	movs	r3, #0x0
 805ed24: aa2e         	add	r2, sp, #0xb8
 805ed26: 2400         	movs	r4, #0x0
 805ed28: f8cd a02c    	str.w	r10, [sp, #0x2c]
 805ed2c: 930f         	str	r3, [sp, #0x3c]
 805ed2e: 4690         	mov	r8, r2
 805ed30: 9313         	str	r3, [sp, #0x4c]
 805ed32: 46ca         	mov	r10, r9
 805ed34: 9316         	str	r3, [sp, #0x58]
 805ed36: 9309         	str	r3, [sp, #0x24]
 805ed38: 9221         	str	r2, [sp, #0x84]
 805ed3a: e9cd 3322    	strd	r3, r3, [sp, #136]
 805ed3e: 2300         	movs	r3, #0x0
 805ed40: e9cd 3410    	strd	r3, r4, [sp, #64]
 805ed44: 783b         	ldrb	r3, [r7]
 805ed46: 463c         	mov	r4, r7
 805ed48: b1d3         	cbz	r3, 0x805ed80 <_vfprintf_r+0xc8> @ imm = #0x34
 805ed4a: 2b25         	cmp	r3, #0x25
 805ed4c: d018         	beq	0x805ed80 <_vfprintf_r+0xc8> @ imm = #0x30
 805ed4e: 4625         	mov	r5, r4
 805ed50: f814 3f01    	ldrb	r3, [r4, #1]!
 805ed54: b10b         	cbz	r3, 0x805ed5a <_vfprintf_r+0xa2> @ imm = #0x2
 805ed56: 2b25         	cmp	r3, #0x25
 805ed58: d1f9         	bne	0x805ed4e <_vfprintf_r+0x96> @ imm = #-0xe
 805ed5a: 1be6         	subs	r6, r4, r7
 805ed5c: d010         	beq	0x805ed80 <_vfprintf_r+0xc8> @ imm = #0x20
 805ed5e: 9b23         	ldr	r3, [sp, #0x8c]
 805ed60: 4433         	add	r3, r6
 805ed62: 9323         	str	r3, [sp, #0x8c]
 805ed64: 9b22         	ldr	r3, [sp, #0x88]
 805ed66: 3301         	adds	r3, #0x1
 805ed68: 2b07         	cmp	r3, #0x7
 805ed6a: 9322         	str	r3, [sp, #0x88]
 805ed6c: e9c8 7600    	strd	r7, r6, [r8]
 805ed70: f300 809f    	bgt.w	0x805eeb2 <_vfprintf_r+0x1fa> @ imm = #0x13e
 805ed74: f108 0808    	add.w	r8, r8, #0x8
 805ed78: 9b09         	ldr	r3, [sp, #0x24]
 805ed7a: 4433         	add	r3, r6
 805ed7c: 9309         	str	r3, [sp, #0x24]
 805ed7e: 786b         	ldrb	r3, [r5, #0x1]
 805ed80: 2b00         	cmp	r3, #0x0
 805ed82: f000 8788    	beq.w	0x805fc96 <_vfprintf_r+0xfde> @ imm = #0xf10
 805ed86: 2300         	movs	r3, #0x0
 805ed88: 1c67         	adds	r7, r4, #0x1
 805ed8a: 7862         	ldrb	r2, [r4, #0x1]
 805ed8c: f04f 35ff    	mov.w	r5, #0xffffffff
 805ed90: 4618         	mov	r0, r3
 805ed92: 469b         	mov	r11, r3
 805ed94: f88d 3067    	strb.w	r3, [sp, #0x67]
 805ed98: 9308         	str	r3, [sp, #0x20]
 805ed9a: 3701         	adds	r7, #0x1
 805ed9c: f1a2 0120    	sub.w	r1, r2, #0x20
 805eda0: 2958         	cmp	r1, #0x58
 805eda2: f200 8091    	bhi.w	0x805eec8 <_vfprintf_r+0x210> @ imm = #0x122
 805eda6: e8df f011    	tbh	[pc, r1, lsl #1]

0805edaa <$d>:
 805edaa: ab 02 8f 00  	.word	0x008f02ab
 805edae: 8f 00 a7 02  	.word	0x02a7008f
 805edb2: 8f 00 8f 00  	.word	0x008f008f
 805edb6: 8f 00 8f 00  	.word	0x008f008f
 805edba: 8f 00 8f 00  	.word	0x008f008f
 805edbe: 87 01 a3 02  	.word	0x02a30187
 805edc2: 8f 00 92 01  	.word	0x0192008f
 805edc6: eb 01 8f 00  	.word	0x008f01eb
 805edca: cd 02 59 00  	.word	0x005902cd
 805edce: 59 00 59 00  	.word	0x00590059
 805edd2: 59 00 59 00  	.word	0x00590059
 805edd6: 59 00 59 00  	.word	0x00590059
 805edda: 59 00 59 00  	.word	0x00590059
 805edde: 8f 00 8f 00  	.word	0x008f008f
 805ede2: 8f 00 8f 00  	.word	0x008f008f
 805ede6: 8f 00 8f 00  	.word	0x008f008f
 805edea: 8f 00 8f 00  	.word	0x008f008f
 805edee: 8f 00 8f 00  	.word	0x008f008f
 805edf2: b2 02 12 01  	.word	0x011202b2
 805edf6: 8f 00 12 01  	.word	0x0112008f
 805edfa: 8f 00 8f 00  	.word	0x008f008f
 805edfe: 8f 00 8f 00  	.word	0x008f008f
 805ee02: 9f 02 8f 00  	.word	0x008f029f
 805ee06: 8f 00 83 02  	.word	0x0283008f
 805ee0a: 8f 00 8f 00  	.word	0x008f008f
 805ee0e: 8f 00 8f 00  	.word	0x008f008f
 805ee12: 8f 00 72 02  	.word	0x0272008f
 805ee16: 8f 00 8f 00  	.word	0x008f008f
 805ee1a: a5 01 8f 00  	.word	0x008f01a5
 805ee1e: 8f 00 8f 00  	.word	0x008f008f
 805ee22: 8f 00 8f 00  	.word	0x008f008f
 805ee26: 8f 00 8f 00  	.word	0x008f008f
 805ee2a: 8f 00 8f 00  	.word	0x008f008f
 805ee2e: 8f 00 96 01  	.word	0x0196008f
 805ee32: 5c 01 12 01  	.word	0x0112015c
 805ee36: 12 01 12 01  	.word	0x01120112
 805ee3a: e7 01 5c 01  	.word	0x015c01e7
 805ee3e: 8f 00 8f 00  	.word	0x008f008f
 805ee42: 6b 02 8f 00  	.word	0x008f026b
 805ee46: 55 02 73 06  	.word	0x06730255
 805ee4a: 43 02 3f 02  	.word	0x023f0243
 805ee4e: 8f 00 1b 02  	.word	0x021b008f
 805ee52: 8f 00 75 06  	.word	0x0675008f
 805ee56: 8f 00 8f 00  	.word	0x008f008f
 805ee5a: 03 02        	.short	0x0203

0805ee5c <$t>:
 805ee5c: f1a2 0130    	sub.w	r1, r2, #0x30
 805ee60: 2400         	movs	r4, #0x0
 805ee62: eb04 0484    	add.w	r4, r4, r4, lsl #2
 805ee66: f817 2b01    	ldrb	r2, [r7], #1
 805ee6a: eb01 0444    	add.w	r4, r1, r4, lsl #1
 805ee6e: f1a2 0130    	sub.w	r1, r2, #0x30
 805ee72: 2909         	cmp	r1, #0x9
 805ee74: d9f5         	bls	0x805ee62 <_vfprintf_r+0x1aa> @ imm = #-0x16
 805ee76: 9408         	str	r4, [sp, #0x20]
 805ee78: e790         	b	0x805ed9c <_vfprintf_r+0xe4> @ imm = #-0xe0
 805ee7a: 4649         	mov	r1, r9
 805ee7c: 4650         	mov	r0, r10
 805ee7e: f001 f9e1    	bl	0x8060244 <__swsetup_r> @ imm = #0x13c2
 805ee82: 2800         	cmp	r0, #0x0
 805ee84: f041 8104    	bne.w	0x8060090 <_vfprintf_r+0x13d8> @ imm = #0x1208
 805ee88: f8b9 200c    	ldrh.w	r2, [r9, #0xc]
 805ee8c: f002 021a    	and	r2, r2, #0x1a
 805ee90: 2a0a         	cmp	r2, #0xa
 805ee92: f47f af46    	bne.w	0x805ed22 <_vfprintf_r+0x6a> @ imm = #-0x174
 805ee96: f9b9 300e    	ldrsh.w	r3, [r9, #0xe]
 805ee9a: 2b00         	cmp	r3, #0x0
 805ee9c: f6ff af41    	blt.w	0x805ed22 <_vfprintf_r+0x6a> @ imm = #-0x17e
 805eea0: 4623         	mov	r3, r4
 805eea2: 463a         	mov	r2, r7
 805eea4: 4649         	mov	r1, r9
 805eea6: 4650         	mov	r0, r10
 805eea8: b03f         	add	sp, #0xfc
 805eeaa: e8bd 4ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805eeae: f001 b993    	b.w	0x80601d8 <__sbprintf>  @ imm = #0x1326
 805eeb2: aa21         	add	r2, sp, #0x84
 805eeb4: 4651         	mov	r1, r10
 805eeb6: 980b         	ldr	r0, [sp, #0x2c]
 805eeb8: f003 ff60    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3ec0
 805eebc: 2800         	cmp	r0, #0x0
 805eebe: f040 8367    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #0x6ce
 805eec2: f10d 08b8    	add.w	r8, sp, #0xb8
 805eec6: e757         	b	0x805ed78 <_vfprintf_r+0xc0> @ imm = #-0x152
 805eec8: 920d         	str	r2, [sp, #0x34]
 805eeca: 2b00         	cmp	r3, #0x0
 805eecc: f041 80c4    	bne.w	0x8060058 <_vfprintf_r+0x13a0> @ imm = #0x1188
 805eed0: 9b0d         	ldr	r3, [sp, #0x34]
 805eed2: 2b00         	cmp	r3, #0x0
 805eed4: f000 86df    	beq.w	0x805fc96 <_vfprintf_r+0xfde> @ imm = #0xdbe
 805eed8: f88d 3090    	strb.w	r3, [sp, #0x90]
 805eedc: 2300         	movs	r3, #0x0
 805eede: ae24         	add	r6, sp, #0x90
 805eee0: f88d 3067    	strb.w	r3, [sp, #0x67]
 805eee4: 2301         	movs	r3, #0x1
 805eee6: 9306         	str	r3, [sp, #0x18]
 805eee8: 930a         	str	r3, [sp, #0x28]
 805eeea: 2500         	movs	r5, #0x0
 805eeec: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805eef0: 950e         	str	r5, [sp, #0x38]
 805eef2: 9b07         	ldr	r3, [sp, #0x1c]
 805eef4: f013 0302    	ands	r3, r3, #0x2
 805eef8: d002         	beq	0x805ef00 <_vfprintf_r+0x248> @ imm = #0x4
 805eefa: 9a06         	ldr	r2, [sp, #0x18]
 805eefc: 3202         	adds	r2, #0x2
 805eefe: 9206         	str	r2, [sp, #0x18]
 805ef00: 9a07         	ldr	r2, [sp, #0x1c]
 805ef02: f012 0b84    	ands	r11, r2, #0x84
 805ef06: d107         	bne	0x805ef18 <_vfprintf_r+0x260> @ imm = #0xe
 805ef08: 9a08         	ldr	r2, [sp, #0x20]
 805ef0a: 9906         	ldr	r1, [sp, #0x18]
 805ef0c: eba2 0901    	sub.w	r9, r2, r1
 805ef10: f1b9 0f00    	cmp.w	r9, #0x0
 805ef14: f300 8397    	bgt.w	0x805f646 <_vfprintf_r+0x98e> @ imm = #0x72e
 805ef18: 9c23         	ldr	r4, [sp, #0x8c]
 805ef1a: f89d 2067    	ldrb.w	r2, [sp, #0x67]
 805ef1e: b182         	cbz	r2, 0x805ef42 <_vfprintf_r+0x28a> @ imm = #0x20
 805ef20: 9a22         	ldr	r2, [sp, #0x88]
 805ef22: f10d 0167    	add.w	r1, sp, #0x67
 805ef26: 3401         	adds	r4, #0x1
 805ef28: 3201         	adds	r2, #0x1
 805ef2a: f8c8 1000    	str.w	r1, [r8]
 805ef2e: 2101         	movs	r1, #0x1
 805ef30: 9423         	str	r4, [sp, #0x8c]
 805ef32: 2a07         	cmp	r2, #0x7
 805ef34: 9222         	str	r2, [sp, #0x88]
 805ef36: f8c8 1004    	str.w	r1, [r8, #0x4]
 805ef3a: f300 83cd    	bgt.w	0x805f6d8 <_vfprintf_r+0xa20> @ imm = #0x79a
 805ef3e: f108 0808    	add.w	r8, r8, #0x8
 805ef42: b17b         	cbz	r3, 0x805ef64 <_vfprintf_r+0x2ac> @ imm = #0x1e
 805ef44: 9b22         	ldr	r3, [sp, #0x88]
 805ef46: aa1a         	add	r2, sp, #0x68
 805ef48: 3402         	adds	r4, #0x2
 805ef4a: 3301         	adds	r3, #0x1
 805ef4c: f8c8 2000    	str.w	r2, [r8]
 805ef50: 2202         	movs	r2, #0x2
 805ef52: 9423         	str	r4, [sp, #0x8c]
 805ef54: 2b07         	cmp	r3, #0x7
 805ef56: 9322         	str	r3, [sp, #0x88]
 805ef58: f8c8 2004    	str.w	r2, [r8, #0x4]
 805ef5c: f300 83ca    	bgt.w	0x805f6f4 <_vfprintf_r+0xa3c> @ imm = #0x794
 805ef60: f108 0808    	add.w	r8, r8, #0x8
 805ef64: f1bb 0f80    	cmp.w	r11, #0x80
 805ef68: f000 824c    	beq.w	0x805f404 <_vfprintf_r+0x74c> @ imm = #0x498
 805ef6c: 9b0a         	ldr	r3, [sp, #0x28]
 805ef6e: 1aed         	subs	r5, r5, r3
 805ef70: 2d00         	cmp	r5, #0x0
 805ef72: f300 8290    	bgt.w	0x805f496 <_vfprintf_r+0x7de> @ imm = #0x520
 805ef76: 9b07         	ldr	r3, [sp, #0x1c]
 805ef78: 05d8         	lsls	r0, r3, #0x17
 805ef7a: f100 81e7    	bmi.w	0x805f34c <_vfprintf_r+0x694> @ imm = #0x3ce
 805ef7e: 9b0a         	ldr	r3, [sp, #0x28]
 805ef80: f8c8 6000    	str.w	r6, [r8]
 805ef84: 441c         	add	r4, r3
 805ef86: f8c8 3004    	str.w	r3, [r8, #0x4]
 805ef8a: 9b22         	ldr	r3, [sp, #0x88]
 805ef8c: 9423         	str	r4, [sp, #0x8c]
 805ef8e: 3301         	adds	r3, #0x1
 805ef90: 2b07         	cmp	r3, #0x7
 805ef92: 9322         	str	r3, [sp, #0x88]
 805ef94: f300 834c    	bgt.w	0x805f630 <_vfprintf_r+0x978> @ imm = #0x698
 805ef98: f108 0808    	add.w	r8, r8, #0x8
 805ef9c: 9b07         	ldr	r3, [sp, #0x1c]
 805ef9e: 0759         	lsls	r1, r3, #0x1d
 805efa0: d505         	bpl	0x805efae <_vfprintf_r+0x2f6> @ imm = #0xa
 805efa2: 9b08         	ldr	r3, [sp, #0x20]
 805efa4: 9a06         	ldr	r2, [sp, #0x18]
 805efa6: 1a9d         	subs	r5, r3, r2
 805efa8: 2d00         	cmp	r5, #0x0
 805efaa: f300 83af    	bgt.w	0x805f70c <_vfprintf_r+0xa54> @ imm = #0x75e
 805efae: 9906         	ldr	r1, [sp, #0x18]
 805efb0: e9dd 2308    	ldrd	r2, r3, [sp, #32]
 805efb4: 428a         	cmp	r2, r1
 805efb6: bfac         	ite	ge
 805efb8: 189b         	addge	r3, r3, r2
 805efba: 185b         	addlt	r3, r3, r1
 805efbc: 9309         	str	r3, [sp, #0x24]
 805efbe: 2c00         	cmp	r4, #0x0
 805efc0: f040 82de    	bne.w	0x805f580 <_vfprintf_r+0x8c8> @ imm = #0x5bc
 805efc4: 2300         	movs	r3, #0x0
 805efc6: f10d 08b8    	add.w	r8, sp, #0xb8
 805efca: 9322         	str	r3, [sp, #0x88]
 805efcc: e6ba         	b	0x805ed44 <_vfprintf_r+0x8c> @ imm = #-0x28c
 805efce: 920d         	str	r2, [sp, #0x34]
 805efd0: 2b00         	cmp	r3, #0x0
 805efd2: f041 8055    	bne.w	0x8060080 <_vfprintf_r+0x13c8> @ imm = #0x10aa
 805efd6: 9b0c         	ldr	r3, [sp, #0x30]
 805efd8: 3307         	adds	r3, #0x7
 805efda: f023 0207    	bic	r2, r3, #0x7
 805efde: e8f2 3402    	ldrd	r3, r4, [r2], #8
 805efe2: e9cd 3410    	strd	r3, r4, [sp, #64]
 805efe6: e9dd 3410    	ldrd	r3, r4, [sp, #64]
 805efea: 920c         	str	r2, [sp, #0x30]
 805efec: f04f 32ff    	mov.w	r2, #0xffffffff
 805eff0: f024 4400    	bic	r4, r4, #0x80000000
 805eff4: 461e         	mov	r6, r3
 805eff6: 4618         	mov	r0, r3
 805eff8: 4bb6         	ldr	r3, [pc, #0x2d8]        @ 0x805f2d4 <_vfprintf_r+0x61c>
 805effa: 4621         	mov	r1, r4
 805effc: f006 fab8    	bl	0x8065570 <__unorddf2>  @ imm = #0x6570
 805f000: 2800         	cmp	r0, #0x0
 805f002: f040 84f7    	bne.w	0x805f9f4 <_vfprintf_r+0xd3c> @ imm = #0x9ee
 805f006: 4630         	mov	r0, r6
 805f008: 4621         	mov	r1, r4
 805f00a: f04f 32ff    	mov.w	r2, #0xffffffff
 805f00e: 4bb1         	ldr	r3, [pc, #0x2c4]        @ 0x805f2d4 <_vfprintf_r+0x61c>
 805f010: f006 fa90    	bl	0x8065534 <__aeabi_dcmple> @ imm = #0x6520
 805f014: 2800         	cmp	r0, #0x0
 805f016: f040 84ed    	bne.w	0x805f9f4 <_vfprintf_r+0xd3c> @ imm = #0x9da
 805f01a: 2200         	movs	r2, #0x0
 805f01c: 2300         	movs	r3, #0x0
 805f01e: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 805f022: f006 fa7d    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x64fa
 805f026: 2800         	cmp	r0, #0x0
 805f028: f040 86de    	bne.w	0x805fde8 <_vfprintf_r+0x1130> @ imm = #0xdbc
 805f02c: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 805f030: f02b 0380    	bic	r3, r11, #0x80
 805f034: 4ea8         	ldr	r6, [pc, #0x2a0]        @ 0x805f2d8 <_vfprintf_r+0x620>
 805f036: 9307         	str	r3, [sp, #0x1c]
 805f038: 4ba8         	ldr	r3, [pc, #0x2a0]        @ 0x805f2dc <_vfprintf_r+0x624>
 805f03a: 9a0d         	ldr	r2, [sp, #0x34]
 805f03c: 2500         	movs	r5, #0x0
 805f03e: 2a47         	cmp	r2, #0x47
 805f040: bfc8         	it	gt
 805f042: 461e         	movgt	r6, r3
 805f044: 2303         	movs	r3, #0x3
 805f046: 950e         	str	r5, [sp, #0x38]
 805f048: 9306         	str	r3, [sp, #0x18]
 805f04a: 930a         	str	r3, [sp, #0x28]
 805f04c: 2c00         	cmp	r4, #0x0
 805f04e: f43f af50    	beq.w	0x805eef2 <_vfprintf_r+0x23a> @ imm = #-0x160
 805f052: 9b06         	ldr	r3, [sp, #0x18]
 805f054: 3301         	adds	r3, #0x1
 805f056: 9306         	str	r3, [sp, #0x18]
 805f058: e74b         	b	0x805eef2 <_vfprintf_r+0x23a> @ imm = #-0x16a
 805f05a: 4650         	mov	r0, r10
 805f05c: f002 fb38    	bl	0x80616d0 <__sinit>     @ imm = #0x2670
 805f060: e642         	b	0x805ece8 <_vfprintf_r+0x30> @ imm = #-0x37c
 805f062: 920d         	str	r2, [sp, #0x34]
 805f064: 2b00         	cmp	r3, #0x0
 805f066: f040 87ff    	bne.w	0x8060068 <_vfprintf_r+0x13b0> @ imm = #0xffe
 805f06a: f01b 0f20    	tst.w	r11, #0x20
 805f06e: 9b0c         	ldr	r3, [sp, #0x30]
 805f070: f000 8158    	beq.w	0x805f324 <_vfprintf_r+0x66c> @ imm = #0x2b0
 805f074: 3307         	adds	r3, #0x7
 805f076: f023 0307    	bic	r3, r3, #0x7
 805f07a: 461a         	mov	r2, r3
 805f07c: 685b         	ldr	r3, [r3, #0x4]
 805f07e: f852 0b08    	ldr	r0, [r2], #8
 805f082: 4619         	mov	r1, r3
 805f084: 920c         	str	r2, [sp, #0x30]
 805f086: 2b00         	cmp	r3, #0x0
 805f088: f2c0 8485    	blt.w	0x805f996 <_vfprintf_r+0xcde> @ imm = #0x90a
 805f08c: 1c6b         	adds	r3, r5, #0x1
 805f08e: f000 837d    	beq.w	0x805f78c <_vfprintf_r+0xad4> @ imm = #0x6fa
 805f092: f02b 0380    	bic	r3, r11, #0x80
 805f096: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 805f09a: 9307         	str	r3, [sp, #0x1c]
 805f09c: ea50 0301    	orrs.w	r3, r0, r1
 805f0a0: f040 87c9    	bne.w	0x8060036 <_vfprintf_r+0x137e> @ imm = #0xf92
 805f0a4: 1e2b         	subs	r3, r5, #0x0
 805f0a6: bf18         	it	ne
 805f0a8: 2301         	movne	r3, #0x1
 805f0aa: 2d00         	cmp	r5, #0x0
 805f0ac: f040 87c3    	bne.w	0x8060036 <_vfprintf_r+0x137e> @ imm = #0xf86
 805f0b0: 461d         	mov	r5, r3
 805f0b2: ae2e         	add	r6, sp, #0xb8
 805f0b4: 930a         	str	r3, [sp, #0x28]
 805f0b6: e057         	b	0x805f168 <_vfprintf_r+0x4b0> @ imm = #0xae
 805f0b8: 9a0c         	ldr	r2, [sp, #0x30]
 805f0ba: f852 1b04    	ldr	r1, [r2], #4
 805f0be: 2900         	cmp	r1, #0x0
 805f0c0: 9108         	str	r1, [sp, #0x20]
 805f0c2: f280 8493    	bge.w	0x805f9ec <_vfprintf_r+0xd34> @ imm = #0x926
 805f0c6: 9908         	ldr	r1, [sp, #0x20]
 805f0c8: 920c         	str	r2, [sp, #0x30]
 805f0ca: 4249         	rsbs	r1, r1, #0
 805f0cc: 9108         	str	r1, [sp, #0x20]
 805f0ce: f04b 0b04    	orr	r11, r11, #0x4
 805f0d2: 783a         	ldrb	r2, [r7]
 805f0d4: e661         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x33e
 805f0d6: 9b0c         	ldr	r3, [sp, #0x30]
 805f0d8: ae24         	add	r6, sp, #0x90
 805f0da: 920d         	str	r2, [sp, #0x34]
 805f0dc: 2200         	movs	r2, #0x0
 805f0de: f88d 2067    	strb.w	r2, [sp, #0x67]
 805f0e2: f853 2b04    	ldr	r2, [r3], #4
 805f0e6: 930c         	str	r3, [sp, #0x30]
 805f0e8: 2301         	movs	r3, #0x1
 805f0ea: f88d 2090    	strb.w	r2, [sp, #0x90]
 805f0ee: 9306         	str	r3, [sp, #0x18]
 805f0f0: 930a         	str	r3, [sp, #0x28]
 805f0f2: e6fa         	b	0x805eeea <_vfprintf_r+0x232> @ imm = #-0x20c
 805f0f4: 920d         	str	r2, [sp, #0x34]
 805f0f6: 2b00         	cmp	r3, #0x0
 805f0f8: f040 87be    	bne.w	0x8060078 <_vfprintf_r+0x13c0> @ imm = #0xf7c
 805f0fc: 4b78         	ldr	r3, [pc, #0x1e0]        @ 0x805f2e0 <_vfprintf_r+0x628>
 805f0fe: f01b 0120    	ands	r1, r11, #0x20
 805f102: 9313         	str	r3, [sp, #0x4c]
 805f104: d05d         	beq	0x805f1c2 <_vfprintf_r+0x50a> @ imm = #0xba
 805f106: 9b0c         	ldr	r3, [sp, #0x30]
 805f108: 3307         	adds	r3, #0x7
 805f10a: f023 0307    	bic	r3, r3, #0x7
 805f10e: 6859         	ldr	r1, [r3, #0x4]
 805f110: f853 0b08    	ldr	r0, [r3], #8
 805f114: 930c         	str	r3, [sp, #0x30]
 805f116: f01b 0f01    	tst.w	r11, #0x1
 805f11a: d003         	beq	0x805f124 <_vfprintf_r+0x46c> @ imm = #0x6
 805f11c: ea50 0301    	orrs.w	r3, r0, r1
 805f120: f040 84ab    	bne.w	0x805fa7a <_vfprintf_r+0xdc2> @ imm = #0x956
 805f124: 2302         	movs	r3, #0x2
 805f126: 2400         	movs	r4, #0x0
 805f128: f88d 4067    	strb.w	r4, [sp, #0x67]
 805f12c: 1c6e         	adds	r6, r5, #0x1
 805f12e: f000 81f1    	beq.w	0x805f514 <_vfprintf_r+0x85c> @ imm = #0x3e2
 805f132: f02b 0280    	bic	r2, r11, #0x80
 805f136: 9207         	str	r2, [sp, #0x1c]
 805f138: ea50 0201    	orrs.w	r2, r0, r1
 805f13c: f040 81e8    	bne.w	0x805f510 <_vfprintf_r+0x858> @ imm = #0x3d0
 805f140: 1e2a         	subs	r2, r5, #0x0
 805f142: bf18         	it	ne
 805f144: 2201         	movne	r2, #0x1
 805f146: 2d00         	cmp	r5, #0x0
 805f148: f040 81e2    	bne.w	0x805f510 <_vfprintf_r+0x858> @ imm = #0x3c4
 805f14c: 2b00         	cmp	r3, #0x0
 805f14e: f040 8317    	bne.w	0x805f780 <_vfprintf_r+0xac8> @ imm = #0x62e
 805f152: f01b 0201    	ands	r2, r11, #0x1
 805f156: 461d         	mov	r5, r3
 805f158: 920a         	str	r2, [sp, #0x28]
 805f15a: f000 83a5    	beq.w	0x805f8a8 <_vfprintf_r+0xbf0> @ imm = #0x74a
 805f15e: 2330         	movs	r3, #0x30
 805f160: f10d 06b7    	add.w	r6, sp, #0xb7
 805f164: f88d 30b7    	strb.w	r3, [sp, #0xb7]
 805f168: 9b0a         	ldr	r3, [sp, #0x28]
 805f16a: 42ab         	cmp	r3, r5
 805f16c: bfb8         	it	lt
 805f16e: 462b         	movlt	r3, r5
 805f170: 9306         	str	r3, [sp, #0x18]
 805f172: 2300         	movs	r3, #0x0
 805f174: 930e         	str	r3, [sp, #0x38]
 805f176: e769         	b	0x805f04c <_vfprintf_r+0x394> @ imm = #-0x12e
 805f178: f04b 0b40    	orr	r11, r11, #0x40
 805f17c: 783a         	ldrb	r2, [r7]
 805f17e: e60c         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x3e8
 805f180: 463c         	mov	r4, r7
 805f182: f814 2b01    	ldrb	r2, [r4], #1
 805f186: 2a2a         	cmp	r2, #0x2a
 805f188: f000 87db    	beq.w	0x8060142 <_vfprintf_r+0x148a> @ imm = #0xfb6
 805f18c: f1a2 0130    	sub.w	r1, r2, #0x30
 805f190: 4627         	mov	r7, r4
 805f192: 2500         	movs	r5, #0x0
 805f194: 2909         	cmp	r1, #0x9
 805f196: f63f ae01    	bhi.w	0x805ed9c <_vfprintf_r+0xe4> @ imm = #-0x3fe
 805f19a: eb05 0585    	add.w	r5, r5, r5, lsl #2
 805f19e: f817 2b01    	ldrb	r2, [r7], #1
 805f1a2: eb01 0545    	add.w	r5, r1, r5, lsl #1
 805f1a6: f1a2 0130    	sub.w	r1, r2, #0x30
 805f1aa: 2909         	cmp	r1, #0x9
 805f1ac: d9f5         	bls	0x805f19a <_vfprintf_r+0x4e2> @ imm = #-0x16
 805f1ae: e5f5         	b	0x805ed9c <_vfprintf_r+0xe4> @ imm = #-0x416
 805f1b0: 920d         	str	r2, [sp, #0x34]
 805f1b2: 2b00         	cmp	r3, #0x0
 805f1b4: f040 8768    	bne.w	0x8060088 <_vfprintf_r+0x13d0> @ imm = #0xed0
 805f1b8: 4b4a         	ldr	r3, [pc, #0x128]        @ 0x805f2e4 <_vfprintf_r+0x62c>
 805f1ba: f01b 0120    	ands	r1, r11, #0x20
 805f1be: 9313         	str	r3, [sp, #0x4c]
 805f1c0: d1a1         	bne	0x805f106 <_vfprintf_r+0x44e> @ imm = #-0xbe
 805f1c2: f01b 0310    	ands	r3, r11, #0x10
 805f1c6: f040 83f1    	bne.w	0x805f9ac <_vfprintf_r+0xcf4> @ imm = #0x7e2
 805f1ca: f01b 0140    	ands	r1, r11, #0x40
 805f1ce: f000 83ed    	beq.w	0x805f9ac <_vfprintf_r+0xcf4> @ imm = #0x7da
 805f1d2: 9a0c         	ldr	r2, [sp, #0x30]
 805f1d4: 4619         	mov	r1, r3
 805f1d6: f852 0b04    	ldr	r0, [r2], #4
 805f1da: b280         	uxth	r0, r0
 805f1dc: 920c         	str	r2, [sp, #0x30]
 805f1de: e79a         	b	0x805f116 <_vfprintf_r+0x45e> @ imm = #-0xcc
 805f1e0: 9c0c         	ldr	r4, [sp, #0x30]
 805f1e2: f04f 0900    	mov.w	r9, #0x0
 805f1e6: 920d         	str	r2, [sp, #0x34]
 805f1e8: f854 6b04    	ldr	r6, [r4], #4
 805f1ec: f88d 9067    	strb.w	r9, [sp, #0x67]
 805f1f0: 2e00         	cmp	r6, #0x0
 805f1f2: f000 8471    	beq.w	0x805fad8 <_vfprintf_r+0xe20> @ imm = #0x8e2
 805f1f6: 1c6b         	adds	r3, r5, #0x1
 805f1f8: f000 855a    	beq.w	0x805fcb0 <_vfprintf_r+0xff8> @ imm = #0xab4
 805f1fc: 462a         	mov	r2, r5
 805f1fe: 4649         	mov	r1, r9
 805f200: 4630         	mov	r0, r6
 805f202: f002 ff7d    	bl	0x8062100 <memchr>      @ imm = #0x2efa
 805f206: 2800         	cmp	r0, #0x0
 805f208: f000 86d2    	beq.w	0x805ffb0 <_vfprintf_r+0x12f8> @ imm = #0xda4
 805f20c: 1b83         	subs	r3, r0, r6
 805f20e: 940c         	str	r4, [sp, #0x30]
 805f210: 464d         	mov	r5, r9
 805f212: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 805f216: 930a         	str	r3, [sp, #0x28]
 805f218: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 805f21c: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805f220: 9306         	str	r3, [sp, #0x18]
 805f222: f8cd 9038    	str.w	r9, [sp, #0x38]
 805f226: e711         	b	0x805f04c <_vfprintf_r+0x394> @ imm = #-0x1de
 805f228: f04b 0b20    	orr	r11, r11, #0x20
 805f22c: 783a         	ldrb	r2, [r7]
 805f22e: e5b4         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x498
 805f230: 9b0c         	ldr	r3, [sp, #0x30]
 805f232: 2278         	movs	r2, #0x78
 805f234: f04b 0b02    	orr	r11, r11, #0x2
 805f238: 2100         	movs	r1, #0x0
 805f23a: f853 0b04    	ldr	r0, [r3], #4
 805f23e: f88d 2069    	strb.w	r2, [sp, #0x69]
 805f242: 930c         	str	r3, [sp, #0x30]
 805f244: 2330         	movs	r3, #0x30
 805f246: 920d         	str	r2, [sp, #0x34]
 805f248: f88d 3068    	strb.w	r3, [sp, #0x68]
 805f24c: 4b25         	ldr	r3, [pc, #0x94]         @ 0x805f2e4 <_vfprintf_r+0x62c>
 805f24e: 9313         	str	r3, [sp, #0x4c]
 805f250: 2302         	movs	r3, #0x2
 805f252: e768         	b	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x130
 805f254: 2b00         	cmp	r3, #0x0
 805f256: f040 870b    	bne.w	0x8060070 <_vfprintf_r+0x13b8> @ imm = #0xe16
 805f25a: f01b 0f20    	tst.w	r11, #0x20
 805f25e: f040 8402    	bne.w	0x805fa66 <_vfprintf_r+0xdae> @ imm = #0x804
 805f262: f01b 0f10    	tst.w	r11, #0x10
 805f266: f040 846b    	bne.w	0x805fb40 <_vfprintf_r+0xe88> @ imm = #0x8d6
 805f26a: f01b 0f40    	tst.w	r11, #0x40
 805f26e: f000 8467    	beq.w	0x805fb40 <_vfprintf_r+0xe88> @ imm = #0x8ce
 805f272: 9b0c         	ldr	r3, [sp, #0x30]
 805f274: 9909         	ldr	r1, [sp, #0x24]
 805f276: f853 2b04    	ldr	r2, [r3], #4
 805f27a: 8011         	strh	r1, [r2]
 805f27c: 930c         	str	r3, [sp, #0x30]
 805f27e: e561         	b	0x805ed44 <_vfprintf_r+0x8c> @ imm = #-0x53e
 805f280: 783a         	ldrb	r2, [r7]
 805f282: 2a6c         	cmp	r2, #0x6c
 805f284: f000 8422    	beq.w	0x805facc <_vfprintf_r+0xe14> @ imm = #0x844
 805f288: f04b 0b10    	orr	r11, r11, #0x10
 805f28c: e585         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x4f6
 805f28e: f04b 0b10    	orr	r11, r11, #0x10
 805f292: 920d         	str	r2, [sp, #0x34]
 805f294: f01b 0120    	ands	r1, r11, #0x20
 805f298: 9a0c         	ldr	r2, [sp, #0x30]
 805f29a: f000 835e    	beq.w	0x805f95a <_vfprintf_r+0xca2> @ imm = #0x6bc
 805f29e: 3207         	adds	r2, #0x7
 805f2a0: 2301         	movs	r3, #0x1
 805f2a2: f022 0207    	bic	r2, r2, #0x7
 805f2a6: 6851         	ldr	r1, [r2, #0x4]
 805f2a8: f852 0b08    	ldr	r0, [r2], #8
 805f2ac: 920c         	str	r2, [sp, #0x30]
 805f2ae: e73a         	b	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x18c
 805f2b0: f04b 0b10    	orr	r11, r11, #0x10
 805f2b4: 920d         	str	r2, [sp, #0x34]
 805f2b6: f01b 0120    	ands	r1, r11, #0x20
 805f2ba: f000 837d    	beq.w	0x805f9b8 <_vfprintf_r+0xd00> @ imm = #0x6fa
 805f2be: 9a0c         	ldr	r2, [sp, #0x30]
 805f2c0: 2300         	movs	r3, #0x0
 805f2c2: 3207         	adds	r2, #0x7
 805f2c4: f022 0207    	bic	r2, r2, #0x7
 805f2c8: 6851         	ldr	r1, [r2, #0x4]
 805f2ca: f852 0b08    	ldr	r0, [r2], #8
 805f2ce: 920c         	str	r2, [sp, #0x30]
 805f2d0: e729         	b	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x1ae
 805f2d2: bf00         	nop

0805f2d4 <$d>:
 805f2d4: ff ff ef 7f  	.word	0x7fefffff
 805f2d8: c0 59 06 08  	.word	0x080659c0
 805f2dc: c4 59 06 08  	.word	0x080659c4
 805f2e0: e4 59 06 08  	.word	0x080659e4
 805f2e4: d0 59 06 08  	.word	0x080659d0

0805f2e8 <$t>:
 805f2e8: f04b 0b08    	orr	r11, r11, #0x8
 805f2ec: 783a         	ldrb	r2, [r7]
 805f2ee: e554         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x558
 805f2f0: 783a         	ldrb	r2, [r7]
 805f2f2: 2301         	movs	r3, #0x1
 805f2f4: 202b         	movs	r0, #0x2b
 805f2f6: e550         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x560
 805f2f8: f04b 0b01    	orr	r11, r11, #0x1
 805f2fc: 783a         	ldrb	r2, [r7]
 805f2fe: e54c         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x568
 805f300: 783a         	ldrb	r2, [r7]
 805f302: 2800         	cmp	r0, #0x0
 805f304: f47f ad49    	bne.w	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x56e
 805f308: 2301         	movs	r3, #0x1
 805f30a: 2020         	movs	r0, #0x20
 805f30c: e545         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x576
 805f30e: 920d         	str	r2, [sp, #0x34]
 805f310: 2b00         	cmp	r3, #0x0
 805f312: f040 86a5    	bne.w	0x8060060 <_vfprintf_r+0x13a8> @ imm = #0xd4a
 805f316: f04b 0b10    	orr	r11, r11, #0x10
 805f31a: 9b0c         	ldr	r3, [sp, #0x30]
 805f31c: f01b 0f20    	tst.w	r11, #0x20
 805f320: f47f aea8    	bne.w	0x805f074 <_vfprintf_r+0x3bc> @ imm = #-0x2b0
 805f324: f853 0b04    	ldr	r0, [r3], #4
 805f328: f01b 0f10    	tst.w	r11, #0x10
 805f32c: 930c         	str	r3, [sp, #0x30]
 805f32e: f040 832d    	bne.w	0x805f98c <_vfprintf_r+0xcd4> @ imm = #0x65a
 805f332: f01b 0f40    	tst.w	r11, #0x40
 805f336: f000 8329    	beq.w	0x805f98c <_vfprintf_r+0xcd4> @ imm = #0x652
 805f33a: f340 31c0    	sbfx	r1, r0, #0xf, #0x1
 805f33e: b200         	sxth	r0, r0
 805f340: 460b         	mov	r3, r1
 805f342: e6a0         	b	0x805f086 <_vfprintf_r+0x3ce> @ imm = #-0x2c0
 805f344: f04b 0b80    	orr	r11, r11, #0x80
 805f348: 783a         	ldrb	r2, [r7]
 805f34a: e526         	b	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x5b4
 805f34c: 9b0d         	ldr	r3, [sp, #0x34]
 805f34e: 2b65         	cmp	r3, #0x65
 805f350: f340 8128    	ble.w	0x805f5a4 <_vfprintf_r+0x8ec> @ imm = #0x250
 805f354: 2200         	movs	r2, #0x0
 805f356: 2300         	movs	r3, #0x0
 805f358: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 805f35c: f006 f8d6    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x61ac
 805f360: 2800         	cmp	r0, #0x0
 805f362: f000 8224    	beq.w	0x805f7ae <_vfprintf_r+0xaf6> @ imm = #0x448
 805f366: 9b22         	ldr	r3, [sp, #0x88]
 805f368: 3401         	adds	r4, #0x1
 805f36a: 4abf         	ldr	r2, [pc, #0x2fc]        @ 0x805f668 <_vfprintf_r+0x9b0>
 805f36c: 3301         	adds	r3, #0x1
 805f36e: 9423         	str	r4, [sp, #0x8c]
 805f370: f8c8 2000    	str.w	r2, [r8]
 805f374: 2201         	movs	r2, #0x1
 805f376: 2b07         	cmp	r3, #0x7
 805f378: 9322         	str	r3, [sp, #0x88]
 805f37a: f8c8 2004    	str.w	r2, [r8, #0x4]
 805f37e: f300 8450    	bgt.w	0x805fc22 <_vfprintf_r+0xf6a> @ imm = #0x8a0
 805f382: f108 0808    	add.w	r8, r8, #0x8
 805f386: 9b1b         	ldr	r3, [sp, #0x6c]
 805f388: 9a0f         	ldr	r2, [sp, #0x3c]
 805f38a: 4293         	cmp	r3, r2
 805f38c: f280 8329    	bge.w	0x805f9e2 <_vfprintf_r+0xd2a> @ imm = #0x652
 805f390: 9b12         	ldr	r3, [sp, #0x48]
 805f392: 9a14         	ldr	r2, [sp, #0x50]
 805f394: 441c         	add	r4, r3
 805f396: e9c8 2300    	strd	r2, r3, [r8]
 805f39a: 9b22         	ldr	r3, [sp, #0x88]
 805f39c: 9423         	str	r4, [sp, #0x8c]
 805f39e: 3301         	adds	r3, #0x1
 805f3a0: 2b07         	cmp	r3, #0x7
 805f3a2: 9322         	str	r3, [sp, #0x88]
 805f3a4: f300 8386    	bgt.w	0x805fab4 <_vfprintf_r+0xdfc> @ imm = #0x70c
 805f3a8: f108 0808    	add.w	r8, r8, #0x8
 805f3ac: 9b0f         	ldr	r3, [sp, #0x3c]
 805f3ae: 1e5d         	subs	r5, r3, #0x1
 805f3b0: 2d00         	cmp	r5, #0x0
 805f3b2: f77f adf3    	ble.w	0x805ef9c <_vfprintf_r+0x2e4> @ imm = #-0x41a
 805f3b6: 2d10         	cmp	r5, #0x10
 805f3b8: 9b22         	ldr	r3, [sp, #0x88]
 805f3ba: f8df 92b0    	ldr.w	r9, [pc, #0x2b0]        @ 0x805f66c <_vfprintf_r+0x9b4>
 805f3be: f340 8424    	ble.w	0x805fc0a <_vfprintf_r+0xf52> @ imm = #0x848
 805f3c2: 46bb         	mov	r11, r7
 805f3c4: 2610         	movs	r6, #0x10
 805f3c6: 464f         	mov	r7, r9
 805f3c8: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 805f3cc: e003         	b	0x805f3d6 <_vfprintf_r+0x71e> @ imm = #0x6
 805f3ce: 3d10         	subs	r5, #0x10
 805f3d0: 2d10         	cmp	r5, #0x10
 805f3d2: f340 8418    	ble.w	0x805fc06 <_vfprintf_r+0xf4e> @ imm = #0x830
 805f3d6: 3301         	adds	r3, #0x1
 805f3d8: 3410         	adds	r4, #0x10
 805f3da: 2b07         	cmp	r3, #0x7
 805f3dc: e9c8 7600    	strd	r7, r6, [r8]
 805f3e0: e9cd 3422    	strd	r3, r4, [sp, #136]
 805f3e4: f108 0808    	add.w	r8, r8, #0x8
 805f3e8: ddf1         	ble	0x805f3ce <_vfprintf_r+0x716> @ imm = #-0x1e
 805f3ea: aa21         	add	r2, sp, #0x84
 805f3ec: 4651         	mov	r1, r10
 805f3ee: 4648         	mov	r0, r9
 805f3f0: f003 fcc4    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3988
 805f3f4: 2800         	cmp	r0, #0x0
 805f3f6: f040 80cb    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #0x196
 805f3fa: f10d 08b8    	add.w	r8, sp, #0xb8
 805f3fe: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 805f402: e7e4         	b	0x805f3ce <_vfprintf_r+0x716> @ imm = #-0x38
 805f404: 9b08         	ldr	r3, [sp, #0x20]
 805f406: 9a06         	ldr	r2, [sp, #0x18]
 805f408: eba3 0b02    	sub.w	r11, r3, r2
 805f40c: f1bb 0f00    	cmp.w	r11, #0x0
 805f410: f77f adac    	ble.w	0x805ef6c <_vfprintf_r+0x2b4> @ imm = #-0x4a8
 805f414: f1bb 0f10    	cmp.w	r11, #0x10
 805f418: 9a22         	ldr	r2, [sp, #0x88]
 805f41a: f8df 9250    	ldr.w	r9, [pc, #0x250]        @ 0x805f66c <_vfprintf_r+0x9b4>
 805f41e: dd28         	ble	0x805f472 <_vfprintf_r+0x7ba> @ imm = #0x50
 805f420: 4621         	mov	r1, r4
 805f422: 2310         	movs	r3, #0x10
 805f424: 464c         	mov	r4, r9
 805f426: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 805f42a: e004         	b	0x805f436 <_vfprintf_r+0x77e> @ imm = #0x8
 805f42c: f1ab 0b10    	sub.w	r11, r11, #0x10
 805f430: f1bb 0f10    	cmp.w	r11, #0x10
 805f434: dd1b         	ble	0x805f46e <_vfprintf_r+0x7b6> @ imm = #0x36
 805f436: 3201         	adds	r2, #0x1
 805f438: 3110         	adds	r1, #0x10
 805f43a: 2a07         	cmp	r2, #0x7
 805f43c: e9c8 4300    	strd	r4, r3, [r8]
 805f440: e9cd 2122    	strd	r2, r1, [sp, #136]
 805f444: f108 0808    	add.w	r8, r8, #0x8
 805f448: ddf0         	ble	0x805f42c <_vfprintf_r+0x774> @ imm = #-0x20
 805f44a: aa21         	add	r2, sp, #0x84
 805f44c: 4651         	mov	r1, r10
 805f44e: 4648         	mov	r0, r9
 805f450: f10d 08b8    	add.w	r8, sp, #0xb8
 805f454: f003 fc92    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3924
 805f458: 2800         	cmp	r0, #0x0
 805f45a: f040 8099    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #0x132
 805f45e: f1ab 0b10    	sub.w	r11, r11, #0x10
 805f462: 2310         	movs	r3, #0x10
 805f464: f1bb 0f10    	cmp.w	r11, #0x10
 805f468: e9dd 2122    	ldrd	r2, r1, [sp, #136]
 805f46c: dce3         	bgt	0x805f436 <_vfprintf_r+0x77e> @ imm = #-0x3a
 805f46e: 46a1         	mov	r9, r4
 805f470: 460c         	mov	r4, r1
 805f472: 3201         	adds	r2, #0x1
 805f474: 445c         	add	r4, r11
 805f476: f8c8 9000    	str.w	r9, [r8]
 805f47a: 2a07         	cmp	r2, #0x7
 805f47c: f8c8 b004    	str.w	r11, [r8, #0x4]
 805f480: e9cd 2422    	strd	r2, r4, [sp, #136]
 805f484: f300 83fa    	bgt.w	0x805fc7c <_vfprintf_r+0xfc4> @ imm = #0x7f4
 805f488: 9b0a         	ldr	r3, [sp, #0x28]
 805f48a: f108 0808    	add.w	r8, r8, #0x8
 805f48e: 1aed         	subs	r5, r5, r3
 805f490: 2d00         	cmp	r5, #0x0
 805f492: f77f ad70    	ble.w	0x805ef76 <_vfprintf_r+0x2be> @ imm = #-0x520
 805f496: 2d10         	cmp	r5, #0x10
 805f498: 9b22         	ldr	r3, [sp, #0x88]
 805f49a: f8df 91d0    	ldr.w	r9, [pc, #0x1d0]        @ 0x805f66c <_vfprintf_r+0x9b4>
 805f49e: dd29         	ble	0x805f4f4 <_vfprintf_r+0x83c> @ imm = #0x52
 805f4a0: 464a         	mov	r2, r9
 805f4a2: 9615         	str	r6, [sp, #0x54]
 805f4a4: 46b9         	mov	r9, r7
 805f4a6: f04f 0b10    	mov.w	r11, #0x10
 805f4aa: 4657         	mov	r7, r10
 805f4ac: 9e0b         	ldr	r6, [sp, #0x2c]
 805f4ae: 4692         	mov	r10, r2
 805f4b0: e002         	b	0x805f4b8 <_vfprintf_r+0x800> @ imm = #0x4
 805f4b2: 3d10         	subs	r5, #0x10
 805f4b4: 2d10         	cmp	r5, #0x10
 805f4b6: dd18         	ble	0x805f4ea <_vfprintf_r+0x832> @ imm = #0x30
 805f4b8: 3301         	adds	r3, #0x1
 805f4ba: 3410         	adds	r4, #0x10
 805f4bc: 2b07         	cmp	r3, #0x7
 805f4be: e9c8 ab00    	strd	r10, r11, [r8]
 805f4c2: e9cd 3422    	strd	r3, r4, [sp, #136]
 805f4c6: f108 0808    	add.w	r8, r8, #0x8
 805f4ca: ddf2         	ble	0x805f4b2 <_vfprintf_r+0x7fa> @ imm = #-0x1c
 805f4cc: aa21         	add	r2, sp, #0x84
 805f4ce: 4639         	mov	r1, r7
 805f4d0: 4630         	mov	r0, r6
 805f4d2: f10d 08b8    	add.w	r8, sp, #0xb8
 805f4d6: f003 fc51    	bl	0x8062d7c <__sprint_r>  @ imm = #0x38a2
 805f4da: 2800         	cmp	r0, #0x0
 805f4dc: f040 8154    	bne.w	0x805f788 <_vfprintf_r+0xad0> @ imm = #0x2a8
 805f4e0: 3d10         	subs	r5, #0x10
 805f4e2: 2d10         	cmp	r5, #0x10
 805f4e4: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 805f4e8: dce6         	bgt	0x805f4b8 <_vfprintf_r+0x800> @ imm = #-0x34
 805f4ea: 4652         	mov	r2, r10
 805f4ec: 9e15         	ldr	r6, [sp, #0x54]
 805f4ee: 46ba         	mov	r10, r7
 805f4f0: 464f         	mov	r7, r9
 805f4f2: 4691         	mov	r9, r2
 805f4f4: 3301         	adds	r3, #0x1
 805f4f6: 442c         	add	r4, r5
 805f4f8: f8c8 9000    	str.w	r9, [r8]
 805f4fc: 2b07         	cmp	r3, #0x7
 805f4fe: f8c8 5004    	str.w	r5, [r8, #0x4]
 805f502: e9cd 3422    	strd	r3, r4, [sp, #136]
 805f506: f300 821b    	bgt.w	0x805f940 <_vfprintf_r+0xc88> @ imm = #0x436
 805f50a: f108 0808    	add.w	r8, r8, #0x8
 805f50e: e532         	b	0x805ef76 <_vfprintf_r+0x2be> @ imm = #-0x59c
 805f510: f8dd b01c    	ldr.w	r11, [sp, #0x1c]
 805f514: 2b01         	cmp	r3, #0x1
 805f516: f000 813b    	beq.w	0x805f790 <_vfprintf_r+0xad8> @ imm = #0x276
 805f51a: 2b02         	cmp	r3, #0x2
 805f51c: ae2e         	add	r6, sp, #0xb8
 805f51e: d112         	bne	0x805f546 <_vfprintf_r+0x88e> @ imm = #0x24
 805f520: 9a13         	ldr	r2, [sp, #0x4c]
 805f522: f000 030f    	and	r3, r0, #0xf
 805f526: 0900         	lsrs	r0, r0, #0x4
 805f528: 5cd3         	ldrb	r3, [r2, r3]
 805f52a: ea40 7001    	orr.w	r0, r0, r1, lsl #28
 805f52e: 0909         	lsrs	r1, r1, #0x4
 805f530: f806 3d01    	strb	r3, [r6, #-1]!
 805f534: ea50 0301    	orrs.w	r3, r0, r1
 805f538: d1f3         	bne	0x805f522 <_vfprintf_r+0x86a> @ imm = #-0x1a
 805f53a: ab2e         	add	r3, sp, #0xb8
 805f53c: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805f540: 1b9b         	subs	r3, r3, r6
 805f542: 930a         	str	r3, [sp, #0x28]
 805f544: e610         	b	0x805f168 <_vfprintf_r+0x4b0> @ imm = #-0x3e0
 805f546: f000 0307    	and	r3, r0, #0x7
 805f54a: 08c0         	lsrs	r0, r0, #0x3
 805f54c: 4632         	mov	r2, r6
 805f54e: ea40 7041    	orr.w	r0, r0, r1, lsl #29
 805f552: 3330         	adds	r3, #0x30
 805f554: 08c9         	lsrs	r1, r1, #0x3
 805f556: f806 3d01    	strb	r3, [r6, #-1]!
 805f55a: ea50 0c01    	orrs.w	r12, r0, r1
 805f55e: d1f2         	bne	0x805f546 <_vfprintf_r+0x88e> @ imm = #-0x1c
 805f560: 2b30         	cmp	r3, #0x30
 805f562: d0ea         	beq	0x805f53a <_vfprintf_r+0x882> @ imm = #-0x2c
 805f564: f01b 0f01    	tst.w	r11, #0x1
 805f568: d0e7         	beq	0x805f53a <_vfprintf_r+0x882> @ imm = #-0x32
 805f56a: 2330         	movs	r3, #0x30
 805f56c: 3a02         	subs	r2, #0x2
 805f56e: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805f572: f806 3c01    	strb	r3, [r6, #-1]
 805f576: ab2e         	add	r3, sp, #0xb8
 805f578: 4616         	mov	r6, r2
 805f57a: 1a9b         	subs	r3, r3, r2
 805f57c: 930a         	str	r3, [sp, #0x28]
 805f57e: e5f3         	b	0x805f168 <_vfprintf_r+0x4b0> @ imm = #-0x41a
 805f580: aa21         	add	r2, sp, #0x84
 805f582: 4651         	mov	r1, r10
 805f584: 980b         	ldr	r0, [sp, #0x2c]
 805f586: f003 fbf9    	bl	0x8062d7c <__sprint_r>  @ imm = #0x37f2
 805f58a: 2800         	cmp	r0, #0x0
 805f58c: f43f ad1a    	beq.w	0x805efc4 <_vfprintf_r+0x30c> @ imm = #-0x5cc
 805f590: 46d1         	mov	r9, r10
 805f592: f8b9 300c    	ldrh.w	r3, [r9, #0xc]
 805f596: 065a         	lsls	r2, r3, #0x19
 805f598: f100 857a    	bmi.w	0x8060090 <_vfprintf_r+0x13d8> @ imm = #0xaf4
 805f59c: 9809         	ldr	r0, [sp, #0x24]
 805f59e: b03f         	add	sp, #0xfc
 805f5a0: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805f5a4: 9b0f         	ldr	r3, [sp, #0x3c]
 805f5a6: 2b01         	cmp	r3, #0x1
 805f5a8: f340 8180    	ble.w	0x805f8ac <_vfprintf_r+0xbf4> @ imm = #0x300
 805f5ac: 9d22         	ldr	r5, [sp, #0x88]
 805f5ae: 3401         	adds	r4, #0x1
 805f5b0: 2301         	movs	r3, #0x1
 805f5b2: f8c8 6000    	str.w	r6, [r8]
 805f5b6: 3501         	adds	r5, #0x1
 805f5b8: 9423         	str	r4, [sp, #0x8c]
 805f5ba: f8c8 3004    	str.w	r3, [r8, #0x4]
 805f5be: 2d07         	cmp	r5, #0x7
 805f5c0: 9522         	str	r5, [sp, #0x88]
 805f5c2: f300 82d2    	bgt.w	0x805fb6a <_vfprintf_r+0xeb2> @ imm = #0x5a4
 805f5c6: f108 0808    	add.w	r8, r8, #0x8
 805f5ca: 9b12         	ldr	r3, [sp, #0x48]
 805f5cc: 3501         	adds	r5, #0x1
 805f5ce: 9a14         	ldr	r2, [sp, #0x50]
 805f5d0: 441c         	add	r4, r3
 805f5d2: 2d07         	cmp	r5, #0x7
 805f5d4: e9c8 2300    	strd	r2, r3, [r8]
 805f5d8: e9cd 5422    	strd	r5, r4, [sp, #136]
 805f5dc: f300 82b8    	bgt.w	0x805fb50 <_vfprintf_r+0xe98> @ imm = #0x570
 805f5e0: f108 0808    	add.w	r8, r8, #0x8
 805f5e4: 2200         	movs	r2, #0x0
 805f5e6: 2300         	movs	r3, #0x0
 805f5e8: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 805f5ec: f005 ff8e    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x5f1c
 805f5f0: 2800         	cmp	r0, #0x0
 805f5f2: f040 8179    	bne.w	0x805f8e8 <_vfprintf_r+0xc30> @ imm = #0x2f2
 805f5f6: 9b0f         	ldr	r3, [sp, #0x3c]
 805f5f8: 3501         	adds	r5, #0x1
 805f5fa: 3601         	adds	r6, #0x1
 805f5fc: 3b01         	subs	r3, #0x1
 805f5fe: 2d07         	cmp	r5, #0x7
 805f600: f8c8 6000    	str.w	r6, [r8]
 805f604: 441c         	add	r4, r3
 805f606: 9522         	str	r5, [sp, #0x88]
 805f608: f8c8 3004    	str.w	r3, [r8, #0x4]
 805f60c: 9423         	str	r4, [sp, #0x8c]
 805f60e: f300 815e    	bgt.w	0x805f8ce <_vfprintf_r+0xc16> @ imm = #0x2bc
 805f612: f108 0808    	add.w	r8, r8, #0x8
 805f616: 9b16         	ldr	r3, [sp, #0x58]
 805f618: 3501         	adds	r5, #0x1
 805f61a: 441c         	add	r4, r3
 805f61c: f8c8 3004    	str.w	r3, [r8, #0x4]
 805f620: 2d07         	cmp	r5, #0x7
 805f622: ab1d         	add	r3, sp, #0x74
 805f624: e9cd 5422    	strd	r5, r4, [sp, #136]
 805f628: f8c8 3000    	str.w	r3, [r8]
 805f62c: f77f acb4    	ble.w	0x805ef98 <_vfprintf_r+0x2e0> @ imm = #-0x698
 805f630: aa21         	add	r2, sp, #0x84
 805f632: 4651         	mov	r1, r10
 805f634: 980b         	ldr	r0, [sp, #0x2c]
 805f636: f003 fba1    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3742
 805f63a: 2800         	cmp	r0, #0x0
 805f63c: d1a8         	bne	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0xb0
 805f63e: 9c23         	ldr	r4, [sp, #0x8c]
 805f640: f10d 08b8    	add.w	r8, sp, #0xb8
 805f644: e4aa         	b	0x805ef9c <_vfprintf_r+0x2e4> @ imm = #-0x6ac
 805f646: f1b9 0f10    	cmp.w	r9, #0x10
 805f64a: e9dd 2122    	ldrd	r2, r1, [sp, #136]
 805f64e: dd33         	ble	0x805f6b8 <_vfprintf_r+0xa00> @ imm = #0x66
 805f650: 9315         	str	r3, [sp, #0x54]
 805f652: 463b         	mov	r3, r7
 805f654: 9617         	str	r6, [sp, #0x5c]
 805f656: 4657         	mov	r7, r10
 805f658: 464e         	mov	r6, r9
 805f65a: 2410         	movs	r4, #0x10
 805f65c: 46a9         	mov	r9, r5
 805f65e: 4608         	mov	r0, r1
 805f660: 9d0b         	ldr	r5, [sp, #0x2c]
 805f662: 469a         	mov	r10, r3
 805f664: e007         	b	0x805f676 <_vfprintf_r+0x9be> @ imm = #0xe
 805f666: bf00         	nop

0805f668 <$d>:
 805f668: 00 5a 06 08  	.word	0x08065a00
 805f66c: 14 5a 06 08  	.word	0x08065a14

0805f670 <$t>:
 805f670: 3e10         	subs	r6, #0x10
 805f672: 2e10         	cmp	r6, #0x10
 805f674: dd18         	ble	0x805f6a8 <_vfprintf_r+0x9f0> @ imm = #0x30
 805f676: 3201         	adds	r2, #0x1
 805f678: 3010         	adds	r0, #0x10
 805f67a: 4bbf         	ldr	r3, [pc, #0x2fc]        @ 0x805f978 <_vfprintf_r+0xcc0>
 805f67c: 2a07         	cmp	r2, #0x7
 805f67e: e9c8 3400    	strd	r3, r4, [r8]
 805f682: e9cd 2022    	strd	r2, r0, [sp, #136]
 805f686: f108 0808    	add.w	r8, r8, #0x8
 805f68a: ddf1         	ble	0x805f670 <_vfprintf_r+0x9b8> @ imm = #-0x1e
 805f68c: aa21         	add	r2, sp, #0x84
 805f68e: 4639         	mov	r1, r7
 805f690: 4628         	mov	r0, r5
 805f692: f10d 08b8    	add.w	r8, sp, #0xb8
 805f696: f003 fb71    	bl	0x8062d7c <__sprint_r>  @ imm = #0x36e2
 805f69a: 2800         	cmp	r0, #0x0
 805f69c: d174         	bne	0x805f788 <_vfprintf_r+0xad0> @ imm = #0xe8
 805f69e: 3e10         	subs	r6, #0x10
 805f6a0: 2e10         	cmp	r6, #0x10
 805f6a2: e9dd 2022    	ldrd	r2, r0, [sp, #136]
 805f6a6: dce6         	bgt	0x805f676 <_vfprintf_r+0x9be> @ imm = #-0x34
 805f6a8: 4601         	mov	r1, r0
 805f6aa: 4650         	mov	r0, r10
 805f6ac: 464d         	mov	r5, r9
 805f6ae: 46ba         	mov	r10, r7
 805f6b0: 46b1         	mov	r9, r6
 805f6b2: 9b15         	ldr	r3, [sp, #0x54]
 805f6b4: 9e17         	ldr	r6, [sp, #0x5c]
 805f6b6: 4607         	mov	r7, r0
 805f6b8: 3201         	adds	r2, #0x1
 805f6ba: eb09 0401    	add.w	r4, r9, r1
 805f6be: 49ae         	ldr	r1, [pc, #0x2b8]        @ 0x805f978 <_vfprintf_r+0xcc0>
 805f6c0: 2a07         	cmp	r2, #0x7
 805f6c2: f8c8 9004    	str.w	r9, [r8, #0x4]
 805f6c6: f8c8 1000    	str.w	r1, [r8]
 805f6ca: e9cd 2422    	strd	r2, r4, [sp, #136]
 805f6ce: f300 8259    	bgt.w	0x805fb84 <_vfprintf_r+0xecc> @ imm = #0x4b2
 805f6d2: f108 0808    	add.w	r8, r8, #0x8
 805f6d6: e420         	b	0x805ef1a <_vfprintf_r+0x262> @ imm = #-0x7c0
 805f6d8: aa21         	add	r2, sp, #0x84
 805f6da: 4651         	mov	r1, r10
 805f6dc: 980b         	ldr	r0, [sp, #0x2c]
 805f6de: 9315         	str	r3, [sp, #0x54]
 805f6e0: f003 fb4c    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3698
 805f6e4: 2800         	cmp	r0, #0x0
 805f6e6: f47f af53    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x15a
 805f6ea: 9c23         	ldr	r4, [sp, #0x8c]
 805f6ec: f10d 08b8    	add.w	r8, sp, #0xb8
 805f6f0: 9b15         	ldr	r3, [sp, #0x54]
 805f6f2: e426         	b	0x805ef42 <_vfprintf_r+0x28a> @ imm = #-0x7b4
 805f6f4: aa21         	add	r2, sp, #0x84
 805f6f6: 4651         	mov	r1, r10
 805f6f8: 980b         	ldr	r0, [sp, #0x2c]
 805f6fa: f003 fb3f    	bl	0x8062d7c <__sprint_r>  @ imm = #0x367e
 805f6fe: 2800         	cmp	r0, #0x0
 805f700: f47f af46    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x174
 805f704: 9c23         	ldr	r4, [sp, #0x8c]
 805f706: f10d 08b8    	add.w	r8, sp, #0xb8
 805f70a: e42b         	b	0x805ef64 <_vfprintf_r+0x2ac> @ imm = #-0x7aa
 805f70c: 2d10         	cmp	r5, #0x10
 805f70e: 9b22         	ldr	r3, [sp, #0x88]
 805f710: dd20         	ble	0x805f754 <_vfprintf_r+0xa9c> @ imm = #0x40
 805f712: 2610         	movs	r6, #0x10
 805f714: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 805f718: e002         	b	0x805f720 <_vfprintf_r+0xa68> @ imm = #0x4
 805f71a: 3d10         	subs	r5, #0x10
 805f71c: 2d10         	cmp	r5, #0x10
 805f71e: dd19         	ble	0x805f754 <_vfprintf_r+0xa9c> @ imm = #0x32
 805f720: 3301         	adds	r3, #0x1
 805f722: 3410         	adds	r4, #0x10
 805f724: 4a94         	ldr	r2, [pc, #0x250]        @ 0x805f978 <_vfprintf_r+0xcc0>
 805f726: 2b07         	cmp	r3, #0x7
 805f728: e9c8 2600    	strd	r2, r6, [r8]
 805f72c: e9cd 3422    	strd	r3, r4, [sp, #136]
 805f730: f108 0808    	add.w	r8, r8, #0x8
 805f734: ddf1         	ble	0x805f71a <_vfprintf_r+0xa62> @ imm = #-0x1e
 805f736: aa21         	add	r2, sp, #0x84
 805f738: 4651         	mov	r1, r10
 805f73a: 4648         	mov	r0, r9
 805f73c: f10d 08b8    	add.w	r8, sp, #0xb8
 805f740: f003 fb1c    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3638
 805f744: 2800         	cmp	r0, #0x0
 805f746: f47f af23    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x1ba
 805f74a: 3d10         	subs	r5, #0x10
 805f74c: 2d10         	cmp	r5, #0x10
 805f74e: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 805f752: dce5         	bgt	0x805f720 <_vfprintf_r+0xa68> @ imm = #-0x36
 805f754: 3301         	adds	r3, #0x1
 805f756: 442c         	add	r4, r5
 805f758: 4a87         	ldr	r2, [pc, #0x21c]        @ 0x805f978 <_vfprintf_r+0xcc0>
 805f75a: 2b07         	cmp	r3, #0x7
 805f75c: f8c8 5004    	str.w	r5, [r8, #0x4]
 805f760: f8c8 2000    	str.w	r2, [r8]
 805f764: e9cd 3422    	strd	r3, r4, [sp, #136]
 805f768: f77f ac21    	ble.w	0x805efae <_vfprintf_r+0x2f6> @ imm = #-0x7be
 805f76c: aa21         	add	r2, sp, #0x84
 805f76e: 4651         	mov	r1, r10
 805f770: 980b         	ldr	r0, [sp, #0x2c]
 805f772: f003 fb03    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3606
 805f776: 2800         	cmp	r0, #0x0
 805f778: f47f af0a    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x1ec
 805f77c: 9c23         	ldr	r4, [sp, #0x8c]
 805f77e: e416         	b	0x805efae <_vfprintf_r+0x2f6> @ imm = #-0x7d4
 805f780: 4615         	mov	r5, r2
 805f782: ae2e         	add	r6, sp, #0xb8
 805f784: 920a         	str	r2, [sp, #0x28]
 805f786: e4ef         	b	0x805f168 <_vfprintf_r+0x4b0> @ imm = #-0x622
 805f788: 46b9         	mov	r9, r7
 805f78a: e702         	b	0x805f592 <_vfprintf_r+0x8da> @ imm = #-0x1fc
 805f78c: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 805f790: 280a         	cmp	r0, #0xa
 805f792: f171 0300    	sbcs	r3, r1, #0x0
 805f796: f080 8251    	bhs.w	0x805fc3c <_vfprintf_r+0xf84> @ imm = #0x4a2
 805f79a: 3030         	adds	r0, #0x30
 805f79c: 2301         	movs	r3, #0x1
 805f79e: f10d 06b7    	add.w	r6, sp, #0xb7
 805f7a2: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805f7a6: f88d 00b7    	strb.w	r0, [sp, #0xb7]
 805f7aa: 930a         	str	r3, [sp, #0x28]
 805f7ac: e4dc         	b	0x805f168 <_vfprintf_r+0x4b0> @ imm = #-0x648
 805f7ae: 991b         	ldr	r1, [sp, #0x6c]
 805f7b0: 2900         	cmp	r1, #0x0
 805f7b2: f340 81f6    	ble.w	0x805fba2 <_vfprintf_r+0xeea> @ imm = #0x3ec
 805f7b6: e9dd 390e    	ldrd	r3, r9, [sp, #56]
 805f7ba: 4599         	cmp	r9, r3
 805f7bc: bfa8         	it	ge
 805f7be: 4699         	movge	r9, r3
 805f7c0: f1b9 0f00    	cmp.w	r9, #0x0
 805f7c4: dd0b         	ble	0x805f7de <_vfprintf_r+0xb26> @ imm = #0x16
 805f7c6: 9b22         	ldr	r3, [sp, #0x88]
 805f7c8: 444c         	add	r4, r9
 805f7ca: 3301         	adds	r3, #0x1
 805f7cc: 9423         	str	r4, [sp, #0x8c]
 805f7ce: 2b07         	cmp	r3, #0x7
 805f7d0: 9322         	str	r3, [sp, #0x88]
 805f7d2: e9c8 6900    	strd	r6, r9, [r8]
 805f7d6: f300 83b0    	bgt.w	0x805ff3a <_vfprintf_r+0x1282> @ imm = #0x760
 805f7da: f108 0808    	add.w	r8, r8, #0x8
 805f7de: 9d0e         	ldr	r5, [sp, #0x38]
 805f7e0: f1b9 0f00    	cmp.w	r9, #0x0
 805f7e4: bfa8         	it	ge
 805f7e6: eba5 0509    	subge.w	r5, r5, r9
 805f7ea: 2d00         	cmp	r5, #0x0
 805f7ec: f300 817e    	bgt.w	0x805faec <_vfprintf_r+0xe34> @ imm = #0x2fc
 805f7f0: 9d1b         	ldr	r5, [sp, #0x6c]
 805f7f2: 9b0f         	ldr	r3, [sp, #0x3c]
 805f7f4: 429d         	cmp	r5, r3
 805f7f6: f280 8150    	bge.w	0x805fa9a <_vfprintf_r+0xde2> @ imm = #0x2a0
 805f7fa: 9b12         	ldr	r3, [sp, #0x48]
 805f7fc: 9a14         	ldr	r2, [sp, #0x50]
 805f7fe: 441c         	add	r4, r3
 805f800: e9c8 2300    	strd	r2, r3, [r8]
 805f804: 9b22         	ldr	r3, [sp, #0x88]
 805f806: 9423         	str	r4, [sp, #0x8c]
 805f808: 3301         	adds	r3, #0x1
 805f80a: 2b07         	cmp	r3, #0x7
 805f80c: 9322         	str	r3, [sp, #0x88]
 805f80e: f300 8387    	bgt.w	0x805ff20 <_vfprintf_r+0x1268> @ imm = #0x70e
 805f812: f108 0808    	add.w	r8, r8, #0x8
 805f816: 9b0f         	ldr	r3, [sp, #0x3c]
 805f818: 9a0e         	ldr	r2, [sp, #0x38]
 805f81a: 1b5d         	subs	r5, r3, r5
 805f81c: eba3 0902    	sub.w	r9, r3, r2
 805f820: 45a9         	cmp	r9, r5
 805f822: bfa8         	it	ge
 805f824: 46a9         	movge	r9, r5
 805f826: f1b9 0f00    	cmp.w	r9, #0x0
 805f82a: dd0e         	ble	0x805f84a <_vfprintf_r+0xb92> @ imm = #0x1c
 805f82c: 9b22         	ldr	r3, [sp, #0x88]
 805f82e: 4416         	add	r6, r2
 805f830: 444c         	add	r4, r9
 805f832: f8c8 9004    	str.w	r9, [r8, #0x4]
 805f836: 3301         	adds	r3, #0x1
 805f838: f8c8 6000    	str.w	r6, [r8]
 805f83c: 9423         	str	r4, [sp, #0x8c]
 805f83e: 2b07         	cmp	r3, #0x7
 805f840: 9322         	str	r3, [sp, #0x88]
 805f842: f300 83a6    	bgt.w	0x805ff92 <_vfprintf_r+0x12da> @ imm = #0x74c
 805f846: f108 0808    	add.w	r8, r8, #0x8
 805f84a: f1b9 0f00    	cmp.w	r9, #0x0
 805f84e: bfa8         	it	ge
 805f850: eba5 0509    	subge.w	r5, r5, r9
 805f854: 2d00         	cmp	r5, #0x0
 805f856: f77f aba1    	ble.w	0x805ef9c <_vfprintf_r+0x2e4> @ imm = #-0x8be
 805f85a: 2d10         	cmp	r5, #0x10
 805f85c: 9b22         	ldr	r3, [sp, #0x88]
 805f85e: f8df 911c    	ldr.w	r9, [pc, #0x11c]        @ 0x805f97c <_vfprintf_r+0xcc4>
 805f862: f340 81d2    	ble.w	0x805fc0a <_vfprintf_r+0xf52> @ imm = #0x3a4
 805f866: 46bb         	mov	r11, r7
 805f868: 2610         	movs	r6, #0x10
 805f86a: 464f         	mov	r7, r9
 805f86c: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 805f870: e003         	b	0x805f87a <_vfprintf_r+0xbc2> @ imm = #0x6
 805f872: 3d10         	subs	r5, #0x10
 805f874: 2d10         	cmp	r5, #0x10
 805f876: f340 81c6    	ble.w	0x805fc06 <_vfprintf_r+0xf4e> @ imm = #0x38c
 805f87a: 3301         	adds	r3, #0x1
 805f87c: 3410         	adds	r4, #0x10
 805f87e: 2b07         	cmp	r3, #0x7
 805f880: e9c8 7600    	strd	r7, r6, [r8]
 805f884: e9cd 3422    	strd	r3, r4, [sp, #136]
 805f888: f108 0808    	add.w	r8, r8, #0x8
 805f88c: ddf1         	ble	0x805f872 <_vfprintf_r+0xbba> @ imm = #-0x1e
 805f88e: aa21         	add	r2, sp, #0x84
 805f890: 4651         	mov	r1, r10
 805f892: 4648         	mov	r0, r9
 805f894: f003 fa72    	bl	0x8062d7c <__sprint_r>  @ imm = #0x34e4
 805f898: 2800         	cmp	r0, #0x0
 805f89a: f47f ae79    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x30e
 805f89e: f10d 08b8    	add.w	r8, sp, #0xb8
 805f8a2: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 805f8a6: e7e4         	b	0x805f872 <_vfprintf_r+0xbba> @ imm = #-0x38
 805f8a8: ae2e         	add	r6, sp, #0xb8
 805f8aa: e45d         	b	0x805f168 <_vfprintf_r+0x4b0> @ imm = #-0x746
 805f8ac: 9b07         	ldr	r3, [sp, #0x1c]
 805f8ae: 07d8         	lsls	r0, r3, #0x1f
 805f8b0: f53f ae7c    	bmi.w	0x805f5ac <_vfprintf_r+0x8f4> @ imm = #-0x308
 805f8b4: 9d22         	ldr	r5, [sp, #0x88]
 805f8b6: 3401         	adds	r4, #0x1
 805f8b8: 2301         	movs	r3, #0x1
 805f8ba: f8c8 6000    	str.w	r6, [r8]
 805f8be: 3501         	adds	r5, #0x1
 805f8c0: 9423         	str	r4, [sp, #0x8c]
 805f8c2: f8c8 3004    	str.w	r3, [r8, #0x4]
 805f8c6: 2d07         	cmp	r5, #0x7
 805f8c8: 9522         	str	r5, [sp, #0x88]
 805f8ca: f77f aea2    	ble.w	0x805f612 <_vfprintf_r+0x95a> @ imm = #-0x2bc
 805f8ce: aa21         	add	r2, sp, #0x84
 805f8d0: 4651         	mov	r1, r10
 805f8d2: 980b         	ldr	r0, [sp, #0x2c]
 805f8d4: f003 fa52    	bl	0x8062d7c <__sprint_r>  @ imm = #0x34a4
 805f8d8: 2800         	cmp	r0, #0x0
 805f8da: f47f ae59    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x34e
 805f8de: f10d 08b8    	add.w	r8, sp, #0xb8
 805f8e2: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 805f8e6: e696         	b	0x805f616 <_vfprintf_r+0x95e> @ imm = #-0x2d4
 805f8e8: 9b0f         	ldr	r3, [sp, #0x3c]
 805f8ea: 1e5e         	subs	r6, r3, #0x1
 805f8ec: 2e00         	cmp	r6, #0x0
 805f8ee: f77f ae92    	ble.w	0x805f616 <_vfprintf_r+0x95e> @ imm = #-0x2dc
 805f8f2: 2e10         	cmp	r6, #0x10
 805f8f4: f8df 9084    	ldr.w	r9, [pc, #0x84]         @ 0x805f97c <_vfprintf_r+0xcc4>
 805f8f8: f340 81ed    	ble.w	0x805fcd6 <_vfprintf_r+0x101e> @ imm = #0x3da
 805f8fc: 970a         	str	r7, [sp, #0x28]
 805f8fe: f04f 0b10    	mov.w	r11, #0x10
 805f902: 464f         	mov	r7, r9
 805f904: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 805f908: e003         	b	0x805f912 <_vfprintf_r+0xc5a> @ imm = #0x6
 805f90a: 3e10         	subs	r6, #0x10
 805f90c: 2e10         	cmp	r6, #0x10
 805f90e: f340 81e0    	ble.w	0x805fcd2 <_vfprintf_r+0x101a> @ imm = #0x3c0
 805f912: 3501         	adds	r5, #0x1
 805f914: 3410         	adds	r4, #0x10
 805f916: 2d07         	cmp	r5, #0x7
 805f918: e9c8 7b00    	strd	r7, r11, [r8]
 805f91c: e9cd 5422    	strd	r5, r4, [sp, #136]
 805f920: f108 0808    	add.w	r8, r8, #0x8
 805f924: ddf1         	ble	0x805f90a <_vfprintf_r+0xc52> @ imm = #-0x1e
 805f926: aa21         	add	r2, sp, #0x84
 805f928: 4651         	mov	r1, r10
 805f92a: 4648         	mov	r0, r9
 805f92c: f003 fa26    	bl	0x8062d7c <__sprint_r>  @ imm = #0x344c
 805f930: 2800         	cmp	r0, #0x0
 805f932: f47f ae2d    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x3a6
 805f936: f10d 08b8    	add.w	r8, sp, #0xb8
 805f93a: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 805f93e: e7e4         	b	0x805f90a <_vfprintf_r+0xc52> @ imm = #-0x38
 805f940: aa21         	add	r2, sp, #0x84
 805f942: 4651         	mov	r1, r10
 805f944: 980b         	ldr	r0, [sp, #0x2c]
 805f946: f003 fa19    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3432
 805f94a: 2800         	cmp	r0, #0x0
 805f94c: f47f ae20    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x3c0
 805f950: 9c23         	ldr	r4, [sp, #0x8c]
 805f952: f10d 08b8    	add.w	r8, sp, #0xb8
 805f956: f7ff bb0e    	b.w	0x805ef76 <_vfprintf_r+0x2be> @ imm = #-0x9e4
 805f95a: f01b 0310    	ands	r3, r11, #0x10
 805f95e: d10f         	bne	0x805f980 <_vfprintf_r+0xcc8> @ imm = #0x1e
 805f960: f01b 0140    	ands	r1, r11, #0x40
 805f964: d00c         	beq	0x805f980 <_vfprintf_r+0xcc8> @ imm = #0x18
 805f966: f852 0b04    	ldr	r0, [r2], #4
 805f96a: 4619         	mov	r1, r3
 805f96c: 2301         	movs	r3, #0x1
 805f96e: b280         	uxth	r0, r0
 805f970: 920c         	str	r2, [sp, #0x30]
 805f972: f7ff bbd8    	b.w	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x850
 805f976: bf00         	nop

0805f978 <$d>:
 805f978: 04 5a 06 08  	.word	0x08065a04
 805f97c: 14 5a 06 08  	.word	0x08065a14

0805f980 <$t>:
 805f980: f852 0b04    	ldr	r0, [r2], #4
 805f984: 2301         	movs	r3, #0x1
 805f986: 920c         	str	r2, [sp, #0x30]
 805f988: f7ff bbcd    	b.w	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x866
 805f98c: 17c1         	asrs	r1, r0, #0x1f
 805f98e: 460b         	mov	r3, r1
 805f990: 2b00         	cmp	r3, #0x0
 805f992: f6bf ab7b    	bge.w	0x805f08c <_vfprintf_r+0x3d4> @ imm = #-0x90a
 805f996: 4240         	rsbs	r0, r0, #0
 805f998: f04f 042d    	mov.w	r4, #0x2d
 805f99c: f04f 0301    	mov.w	r3, #0x1
 805f9a0: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 805f9a4: f88d 4067    	strb.w	r4, [sp, #0x67]
 805f9a8: f7ff bbc0    	b.w	0x805f12c <_vfprintf_r+0x474> @ imm = #-0x880
 805f9ac: 9b0c         	ldr	r3, [sp, #0x30]
 805f9ae: f853 0b04    	ldr	r0, [r3], #4
 805f9b2: 930c         	str	r3, [sp, #0x30]
 805f9b4: f7ff bbaf    	b.w	0x805f116 <_vfprintf_r+0x45e> @ imm = #-0x8a2
 805f9b8: f01b 0310    	ands	r3, r11, #0x10
 805f9bc: d10a         	bne	0x805f9d4 <_vfprintf_r+0xd1c> @ imm = #0x14
 805f9be: f01b 0140    	ands	r1, r11, #0x40
 805f9c2: d007         	beq	0x805f9d4 <_vfprintf_r+0xd1c> @ imm = #0xe
 805f9c4: 9a0c         	ldr	r2, [sp, #0x30]
 805f9c6: 4619         	mov	r1, r3
 805f9c8: f852 0b04    	ldr	r0, [r2], #4
 805f9cc: b280         	uxth	r0, r0
 805f9ce: 920c         	str	r2, [sp, #0x30]
 805f9d0: f7ff bba9    	b.w	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x8ae
 805f9d4: 9b0c         	ldr	r3, [sp, #0x30]
 805f9d6: f853 0b04    	ldr	r0, [r3], #4
 805f9da: 930c         	str	r3, [sp, #0x30]
 805f9dc: 460b         	mov	r3, r1
 805f9de: f7ff bba2    	b.w	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x8bc
 805f9e2: 9b07         	ldr	r3, [sp, #0x1c]
 805f9e4: 07d9         	lsls	r1, r3, #0x1f
 805f9e6: f57f aad9    	bpl.w	0x805ef9c <_vfprintf_r+0x2e4> @ imm = #-0xa4e
 805f9ea: e4d1         	b	0x805f390 <_vfprintf_r+0x6d8> @ imm = #-0x65e
 805f9ec: 920c         	str	r2, [sp, #0x30]
 805f9ee: 783a         	ldrb	r2, [r7]
 805f9f0: f7ff b9d3    	b.w	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0xc5a
 805f9f4: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 805f9f8: 4602         	mov	r2, r0
 805f9fa: 460b         	mov	r3, r1
 805f9fc: f005 fdb8    	bl	0x8065570 <__unorddf2>  @ imm = #0x5b70
 805fa00: 2800         	cmp	r0, #0x0
 805fa02: f040 8380    	bne.w	0x8060106 <_vfprintf_r+0x144e> @ imm = #0x700
 805fa06: 9b0d         	ldr	r3, [sp, #0x34]
 805fa08: 1c69         	adds	r1, r5, #0x1
 805fa0a: f023 0920    	bic	r9, r3, #0x20
 805fa0e: f000 816e    	beq.w	0x805fcee <_vfprintf_r+0x1036> @ imm = #0x2dc
 805fa12: f1b9 0f47    	cmp.w	r9, #0x47
 805fa16: f040 816b    	bne.w	0x805fcf0 <_vfprintf_r+0x1038> @ imm = #0x2d6
 805fa1a: 2d00         	cmp	r5, #0x0
 805fa1c: f040 8168    	bne.w	0x805fcf0 <_vfprintf_r+0x1038> @ imm = #0x2d0
 805fa20: f44b 7380    	orr	r3, r11, #0x100
 805fa24: 9307         	str	r3, [sp, #0x1c]
 805fa26: 9b11         	ldr	r3, [sp, #0x44]
 805fa28: 2b00         	cmp	r3, #0x0
 805fa2a: f2c0 816d    	blt.w	0x805fd08 <_vfprintf_r+0x1050> @ imm = #0x2da
 805fa2e: 930a         	str	r3, [sp, #0x28]
 805fa30: ab1f         	add	r3, sp, #0x7c
 805fa32: 2501         	movs	r5, #0x1
 805fa34: 9015         	str	r0, [sp, #0x54]
 805fa36: 9304         	str	r3, [sp, #0x10]
 805fa38: ab1c         	add	r3, sp, #0x70
 805fa3a: 980b         	ldr	r0, [sp, #0x2c]
 805fa3c: 462c         	mov	r4, r5
 805fa3e: 9303         	str	r3, [sp, #0xc]
 805fa40: ab1b         	add	r3, sp, #0x6c
 805fa42: 9501         	str	r5, [sp, #0x4]
 805fa44: 9302         	str	r3, [sp, #0x8]
 805fa46: 2302         	movs	r3, #0x2
 805fa48: 9300         	str	r3, [sp]
 805fa4a: e9dd 2310    	ldrd	r2, r3, [sp, #64]
 805fa4e: 9206         	str	r2, [sp, #0x18]
 805fa50: f000 fcfc    	bl	0x806044c <_dtoa_r>     @ imm = #0x9f8
 805fa54: 4606         	mov	r6, r0
 805fa56: f01b 0f01    	tst.w	r11, #0x1
 805fa5a: f000 81ee    	beq.w	0x805fe3a <_vfprintf_r+0x1182> @ imm = #0x3dc
 805fa5e: 4434         	add	r4, r6
 805fa60: f04f 0947    	mov.w	r9, #0x47
 805fa64: e17e         	b	0x805fd64 <_vfprintf_r+0x10ac> @ imm = #0x2fc
 805fa66: 9b0c         	ldr	r3, [sp, #0x30]
 805fa68: 9809         	ldr	r0, [sp, #0x24]
 805fa6a: f853 1b04    	ldr	r1, [r3], #4
 805fa6e: 17c2         	asrs	r2, r0, #0x1f
 805fa70: 930c         	str	r3, [sp, #0x30]
 805fa72: e9c1 0200    	strd	r0, r2, [r1]
 805fa76: f7ff b965    	b.w	0x805ed44 <_vfprintf_r+0x8c> @ imm = #-0xd36
 805fa7a: 9b0d         	ldr	r3, [sp, #0x34]
 805fa7c: f04b 0b02    	orr	r11, r11, #0x2
 805fa80: f88d 3069    	strb.w	r3, [sp, #0x69]
 805fa84: 2330         	movs	r3, #0x30
 805fa86: f88d 3068    	strb.w	r3, [sp, #0x68]
 805fa8a: 2302         	movs	r3, #0x2
 805fa8c: f7ff bb4b    	b.w	0x805f126 <_vfprintf_r+0x46e> @ imm = #-0x96a
 805fa90: 920d         	str	r2, [sp, #0x34]
 805fa92: e410         	b	0x805f2b6 <_vfprintf_r+0x5fe> @ imm = #-0x7e0
 805fa94: 920d         	str	r2, [sp, #0x34]
 805fa96: f7ff bbfd    	b.w	0x805f294 <_vfprintf_r+0x5dc> @ imm = #-0x806
 805fa9a: 9b07         	ldr	r3, [sp, #0x1c]
 805fa9c: 07db         	lsls	r3, r3, #0x1f
 805fa9e: f53f aeac    	bmi.w	0x805f7fa <_vfprintf_r+0xb42> @ imm = #-0x2a8
 805faa2: e9dd 230e    	ldrd	r2, r3, [sp, #56]
 805faa6: eba3 0902    	sub.w	r9, r3, r2
 805faaa: 1b5d         	subs	r5, r3, r5
 805faac: 45a9         	cmp	r9, r5
 805faae: bfa8         	it	ge
 805fab0: 46a9         	movge	r9, r5
 805fab2: e6ca         	b	0x805f84a <_vfprintf_r+0xb92> @ imm = #-0x26c
 805fab4: aa21         	add	r2, sp, #0x84
 805fab6: 4651         	mov	r1, r10
 805fab8: 980b         	ldr	r0, [sp, #0x2c]
 805faba: f003 f95f    	bl	0x8062d7c <__sprint_r>  @ imm = #0x32be
 805fabe: 2800         	cmp	r0, #0x0
 805fac0: f47f ad66    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x534
 805fac4: 9c23         	ldr	r4, [sp, #0x8c]
 805fac6: f10d 08b8    	add.w	r8, sp, #0xb8
 805faca: e46f         	b	0x805f3ac <_vfprintf_r+0x6f4> @ imm = #-0x722
 805facc: 787a         	ldrb	r2, [r7, #0x1]
 805face: f04b 0b20    	orr	r11, r11, #0x20
 805fad2: 3701         	adds	r7, #0x1
 805fad4: f7ff b961    	b.w	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0xd3e
 805fad8: 2d06         	cmp	r5, #0x6
 805fada: 462b         	mov	r3, r5
 805fadc: 4eb6         	ldr	r6, [pc, #0x2d8]        @ 0x805fdb8 <_vfprintf_r+0x1100>
 805fade: bf28         	it	hs
 805fae0: 2306         	movhs	r3, #0x6
 805fae2: 940c         	str	r4, [sp, #0x30]
 805fae4: 930a         	str	r3, [sp, #0x28]
 805fae6: 9306         	str	r3, [sp, #0x18]
 805fae8: f7ff b9ff    	b.w	0x805eeea <_vfprintf_r+0x232> @ imm = #-0xc02
 805faec: 2d10         	cmp	r5, #0x10
 805faee: 9b22         	ldr	r3, [sp, #0x88]
 805faf0: f8df 92c8    	ldr.w	r9, [pc, #0x2c8]        @ 0x805fdbc <_vfprintf_r+0x1104>
 805faf4: f340 816b    	ble.w	0x805fdce <_vfprintf_r+0x1116> @ imm = #0x2d6
 805faf8: 464a         	mov	r2, r9
 805fafa: 960a         	str	r6, [sp, #0x28]
 805fafc: 46b9         	mov	r9, r7
 805fafe: f04f 0b10    	mov.w	r11, #0x10
 805fb02: 4657         	mov	r7, r10
 805fb04: 9e0b         	ldr	r6, [sp, #0x2c]
 805fb06: 4692         	mov	r10, r2
 805fb08: e003         	b	0x805fb12 <_vfprintf_r+0xe5a> @ imm = #0x6
 805fb0a: 3d10         	subs	r5, #0x10
 805fb0c: 2d10         	cmp	r5, #0x10
 805fb0e: f340 8159    	ble.w	0x805fdc4 <_vfprintf_r+0x110c> @ imm = #0x2b2
 805fb12: 3301         	adds	r3, #0x1
 805fb14: 3410         	adds	r4, #0x10
 805fb16: 2b07         	cmp	r3, #0x7
 805fb18: e9c8 ab00    	strd	r10, r11, [r8]
 805fb1c: e9cd 3422    	strd	r3, r4, [sp, #136]
 805fb20: f108 0808    	add.w	r8, r8, #0x8
 805fb24: ddf1         	ble	0x805fb0a <_vfprintf_r+0xe52> @ imm = #-0x1e
 805fb26: aa21         	add	r2, sp, #0x84
 805fb28: 4639         	mov	r1, r7
 805fb2a: 4630         	mov	r0, r6
 805fb2c: f003 f926    	bl	0x8062d7c <__sprint_r>  @ imm = #0x324c
 805fb30: 2800         	cmp	r0, #0x0
 805fb32: f47f ae29    	bne.w	0x805f788 <_vfprintf_r+0xad0> @ imm = #-0x3ae
 805fb36: f10d 08b8    	add.w	r8, sp, #0xb8
 805fb3a: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 805fb3e: e7e4         	b	0x805fb0a <_vfprintf_r+0xe52> @ imm = #-0x38
 805fb40: 9b0c         	ldr	r3, [sp, #0x30]
 805fb42: 9909         	ldr	r1, [sp, #0x24]
 805fb44: f853 2b04    	ldr	r2, [r3], #4
 805fb48: 6011         	str	r1, [r2]
 805fb4a: 930c         	str	r3, [sp, #0x30]
 805fb4c: f7ff b8fa    	b.w	0x805ed44 <_vfprintf_r+0x8c> @ imm = #-0xe0c
 805fb50: aa21         	add	r2, sp, #0x84
 805fb52: 4651         	mov	r1, r10
 805fb54: 980b         	ldr	r0, [sp, #0x2c]
 805fb56: f003 f911    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3222
 805fb5a: 2800         	cmp	r0, #0x0
 805fb5c: f47f ad18    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x5d0
 805fb60: f10d 08b8    	add.w	r8, sp, #0xb8
 805fb64: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 805fb68: e53c         	b	0x805f5e4 <_vfprintf_r+0x92c> @ imm = #-0x588
 805fb6a: aa21         	add	r2, sp, #0x84
 805fb6c: 4651         	mov	r1, r10
 805fb6e: 980b         	ldr	r0, [sp, #0x2c]
 805fb70: f003 f904    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3208
 805fb74: 2800         	cmp	r0, #0x0
 805fb76: f47f ad0b    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x5ea
 805fb7a: f10d 08b8    	add.w	r8, sp, #0xb8
 805fb7e: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 805fb82: e522         	b	0x805f5ca <_vfprintf_r+0x912> @ imm = #-0x5bc
 805fb84: aa21         	add	r2, sp, #0x84
 805fb86: 4651         	mov	r1, r10
 805fb88: 980b         	ldr	r0, [sp, #0x2c]
 805fb8a: 9315         	str	r3, [sp, #0x54]
 805fb8c: f003 f8f6    	bl	0x8062d7c <__sprint_r>  @ imm = #0x31ec
 805fb90: 2800         	cmp	r0, #0x0
 805fb92: f47f acfd    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x606
 805fb96: 9c23         	ldr	r4, [sp, #0x8c]
 805fb98: f10d 08b8    	add.w	r8, sp, #0xb8
 805fb9c: 9b15         	ldr	r3, [sp, #0x54]
 805fb9e: f7ff b9bc    	b.w	0x805ef1a <_vfprintf_r+0x262> @ imm = #-0xc88
 805fba2: 9b22         	ldr	r3, [sp, #0x88]
 805fba4: 3401         	adds	r4, #0x1
 805fba6: 4a86         	ldr	r2, [pc, #0x218]        @ 0x805fdc0 <_vfprintf_r+0x1108>
 805fba8: 3301         	adds	r3, #0x1
 805fbaa: 9423         	str	r4, [sp, #0x8c]
 805fbac: f8c8 2000    	str.w	r2, [r8]
 805fbb0: 2201         	movs	r2, #0x1
 805fbb2: 2b07         	cmp	r3, #0x7
 805fbb4: 9322         	str	r3, [sp, #0x88]
 805fbb6: f8c8 2004    	str.w	r2, [r8, #0x4]
 805fbba: f300 811a    	bgt.w	0x805fdf2 <_vfprintf_r+0x113a> @ imm = #0x234
 805fbbe: f108 0808    	add.w	r8, r8, #0x8
 805fbc2: 9b0f         	ldr	r3, [sp, #0x3c]
 805fbc4: 430b         	orrs	r3, r1
 805fbc6: f000 81d2    	beq.w	0x805ff6e <_vfprintf_r+0x12b6> @ imm = #0x3a4
 805fbca: 9b12         	ldr	r3, [sp, #0x48]
 805fbcc: 9814         	ldr	r0, [sp, #0x50]
 805fbce: 191a         	adds	r2, r3, r4
 805fbd0: e9c8 0300    	strd	r0, r3, [r8]
 805fbd4: 9b22         	ldr	r3, [sp, #0x88]
 805fbd6: 9223         	str	r2, [sp, #0x8c]
 805fbd8: 3301         	adds	r3, #0x1
 805fbda: 2b07         	cmp	r3, #0x7
 805fbdc: 9322         	str	r3, [sp, #0x88]
 805fbde: f300 81b8    	bgt.w	0x805ff52 <_vfprintf_r+0x129a> @ imm = #0x370
 805fbe2: f108 0808    	add.w	r8, r8, #0x8
 805fbe6: 2900         	cmp	r1, #0x0
 805fbe8: f2c0 8202    	blt.w	0x805fff0 <_vfprintf_r+0x1338> @ imm = #0x404
 805fbec: 990f         	ldr	r1, [sp, #0x3c]
 805fbee: 3301         	adds	r3, #0x1
 805fbf0: f8c8 6000    	str.w	r6, [r8]
 805fbf4: 188c         	adds	r4, r1, r2
 805fbf6: 2b07         	cmp	r3, #0x7
 805fbf8: f8c8 1004    	str.w	r1, [r8, #0x4]
 805fbfc: e9cd 3422    	strd	r3, r4, [sp, #136]
 805fc00: f77f a9ca    	ble.w	0x805ef98 <_vfprintf_r+0x2e0> @ imm = #-0xc6c
 805fc04: e514         	b	0x805f630 <_vfprintf_r+0x978> @ imm = #-0x5d8
 805fc06: 46b9         	mov	r9, r7
 805fc08: 465f         	mov	r7, r11
 805fc0a: 3301         	adds	r3, #0x1
 805fc0c: 442c         	add	r4, r5
 805fc0e: f8c8 9000    	str.w	r9, [r8]
 805fc12: 2b07         	cmp	r3, #0x7
 805fc14: f8c8 5004    	str.w	r5, [r8, #0x4]
 805fc18: e9cd 3422    	strd	r3, r4, [sp, #136]
 805fc1c: f77f a9bc    	ble.w	0x805ef98 <_vfprintf_r+0x2e0> @ imm = #-0xc88
 805fc20: e506         	b	0x805f630 <_vfprintf_r+0x978> @ imm = #-0x5f4
 805fc22: aa21         	add	r2, sp, #0x84
 805fc24: 4651         	mov	r1, r10
 805fc26: 980b         	ldr	r0, [sp, #0x2c]
 805fc28: f003 f8a8    	bl	0x8062d7c <__sprint_r>  @ imm = #0x3150
 805fc2c: 2800         	cmp	r0, #0x0
 805fc2e: f47f acaf    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x6a2
 805fc32: 9c23         	ldr	r4, [sp, #0x8c]
 805fc34: f10d 08b8    	add.w	r8, sp, #0xb8
 805fc38: f7ff bba5    	b.w	0x805f386 <_vfprintf_r+0x6ce> @ imm = #-0x8b6
 805fc3c: ae2e         	add	r6, sp, #0xb8
 805fc3e: f8cd b018    	str.w	r11, [sp, #0x18]
 805fc42: 220a         	movs	r2, #0xa
 805fc44: 2300         	movs	r3, #0x0
 805fc46: 4683         	mov	r11, r0
 805fc48: 4689         	mov	r9, r1
 805fc4a: f005 fccf    	bl	0x80655ec <__aeabi_uldivmod> @ imm = #0x599e
 805fc4e: 3230         	adds	r2, #0x30
 805fc50: 2300         	movs	r3, #0x0
 805fc52: 4658         	mov	r0, r11
 805fc54: f806 2d01    	strb	r2, [r6, #-1]!
 805fc58: 4649         	mov	r1, r9
 805fc5a: 220a         	movs	r2, #0xa
 805fc5c: f005 fcc6    	bl	0x80655ec <__aeabi_uldivmod> @ imm = #0x598c
 805fc60: f1bb 0f0a    	cmp.w	r11, #0xa
 805fc64: f179 0300    	sbcs	r3, r9, #0x0
 805fc68: d2eb         	bhs	0x805fc42 <_vfprintf_r+0xf8a> @ imm = #-0x2a
 805fc6a: ab2e         	add	r3, sp, #0xb8
 805fc6c: f8dd b018    	ldr.w	r11, [sp, #0x18]
 805fc70: 1b9b         	subs	r3, r3, r6
 805fc72: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805fc76: 930a         	str	r3, [sp, #0x28]
 805fc78: f7ff ba76    	b.w	0x805f168 <_vfprintf_r+0x4b0> @ imm = #-0xb14
 805fc7c: aa21         	add	r2, sp, #0x84
 805fc7e: 4651         	mov	r1, r10
 805fc80: 980b         	ldr	r0, [sp, #0x2c]
 805fc82: f003 f87b    	bl	0x8062d7c <__sprint_r>  @ imm = #0x30f6
 805fc86: 2800         	cmp	r0, #0x0
 805fc88: f47f ac82    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x6fc
 805fc8c: 9c23         	ldr	r4, [sp, #0x8c]
 805fc8e: f10d 08b8    	add.w	r8, sp, #0xb8
 805fc92: f7ff b96b    	b.w	0x805ef6c <_vfprintf_r+0x2b4> @ imm = #-0xd2a
 805fc96: 9b23         	ldr	r3, [sp, #0x8c]
 805fc98: 46d1         	mov	r9, r10
 805fc9a: f8dd a02c    	ldr.w	r10, [sp, #0x2c]
 805fc9e: 2b00         	cmp	r3, #0x0
 805fca0: f43f ac77    	beq.w	0x805f592 <_vfprintf_r+0x8da> @ imm = #-0x712
 805fca4: aa21         	add	r2, sp, #0x84
 805fca6: 4649         	mov	r1, r9
 805fca8: 4650         	mov	r0, r10
 805fcaa: f003 f867    	bl	0x8062d7c <__sprint_r>  @ imm = #0x30ce
 805fcae: e470         	b	0x805f592 <_vfprintf_r+0x8da> @ imm = #-0x720
 805fcb0: 4630         	mov	r0, r6
 805fcb2: 940c         	str	r4, [sp, #0x30]
 805fcb4: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805fcb8: f002 fff8    	bl	0x8062cac <strlen>      @ imm = #0x2ff0
 805fcbc: ea20 73e0    	bic.w	r3, r0, r0, asr #31
 805fcc0: 464d         	mov	r5, r9
 805fcc2: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 805fcc6: 900a         	str	r0, [sp, #0x28]
 805fcc8: f8cd 9038    	str.w	r9, [sp, #0x38]
 805fccc: 9306         	str	r3, [sp, #0x18]
 805fcce: f7ff b9bd    	b.w	0x805f04c <_vfprintf_r+0x394> @ imm = #-0xc86
 805fcd2: 46b9         	mov	r9, r7
 805fcd4: 9f0a         	ldr	r7, [sp, #0x28]
 805fcd6: 3501         	adds	r5, #0x1
 805fcd8: 4434         	add	r4, r6
 805fcda: f8c8 9000    	str.w	r9, [r8]
 805fcde: 2d07         	cmp	r5, #0x7
 805fce0: f8c8 6004    	str.w	r6, [r8, #0x4]
 805fce4: e9cd 5422    	strd	r5, r4, [sp, #136]
 805fce8: f77f ac93    	ble.w	0x805f612 <_vfprintf_r+0x95a> @ imm = #-0x6da
 805fcec: e5ef         	b	0x805f8ce <_vfprintf_r+0xc16> @ imm = #-0x422
 805fcee: 2506         	movs	r5, #0x6
 805fcf0: f44b 7380    	orr	r3, r11, #0x100
 805fcf4: 9307         	str	r3, [sp, #0x1c]
 805fcf6: 9b11         	ldr	r3, [sp, #0x44]
 805fcf8: 2b00         	cmp	r3, #0x0
 805fcfa: db08         	blt	0x805fd0e <_vfprintf_r+0x1056> @ imm = #0x10
 805fcfc: 930a         	str	r3, [sp, #0x28]
 805fcfe: 9b10         	ldr	r3, [sp, #0x40]
 805fd00: 9306         	str	r3, [sp, #0x18]
 805fd02: 2300         	movs	r3, #0x0
 805fd04: 9315         	str	r3, [sp, #0x54]
 805fd06: e00a         	b	0x805fd1e <_vfprintf_r+0x1066> @ imm = #0x14
 805fd08: f04f 0947    	mov.w	r9, #0x47
 805fd0c: 2501         	movs	r5, #0x1
 805fd0e: e9dd 3410    	ldrd	r3, r4, [sp, #64]
 805fd12: 9306         	str	r3, [sp, #0x18]
 805fd14: f104 4300    	add.w	r3, r4, #0x80000000
 805fd18: 930a         	str	r3, [sp, #0x28]
 805fd1a: 232d         	movs	r3, #0x2d
 805fd1c: 9315         	str	r3, [sp, #0x54]
 805fd1e: f1b9 0f46    	cmp.w	r9, #0x46
 805fd22: 9a06         	ldr	r2, [sp, #0x18]
 805fd24: f040 814f    	bne.w	0x805ffc6 <_vfprintf_r+0x130e> @ imm = #0x29e
 805fd28: a91f         	add	r1, sp, #0x7c
 805fd2a: 9c0a         	ldr	r4, [sp, #0x28]
 805fd2c: 980b         	ldr	r0, [sp, #0x2c]
 805fd2e: 9104         	str	r1, [sp, #0x10]
 805fd30: a91c         	add	r1, sp, #0x70
 805fd32: 4623         	mov	r3, r4
 805fd34: 9501         	str	r5, [sp, #0x4]
 805fd36: 9103         	str	r1, [sp, #0xc]
 805fd38: a91b         	add	r1, sp, #0x6c
 805fd3a: 9102         	str	r1, [sp, #0x8]
 805fd3c: 2103         	movs	r1, #0x3
 805fd3e: 9100         	str	r1, [sp]
 805fd40: f000 fb84    	bl	0x806044c <_dtoa_r>     @ imm = #0x708
 805fd44: 7803         	ldrb	r3, [r0]
 805fd46: 4606         	mov	r6, r0
 805fd48: 2b30         	cmp	r3, #0x30
 805fd4a: d108         	bne	0x805fd5e <_vfprintf_r+0x10a6> @ imm = #0x10
 805fd4c: 9806         	ldr	r0, [sp, #0x18]
 805fd4e: 4621         	mov	r1, r4
 805fd50: 2200         	movs	r2, #0x0
 805fd52: 2300         	movs	r3, #0x0
 805fd54: f005 fbda    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x57b4
 805fd58: 2800         	cmp	r0, #0x0
 805fd5a: f000 8214    	beq.w	0x8060186 <_vfprintf_r+0x14ce> @ imm = #0x428
 805fd5e: 9b1b         	ldr	r3, [sp, #0x6c]
 805fd60: 442b         	add	r3, r5
 805fd62: 18f4         	adds	r4, r6, r3
 805fd64: 9806         	ldr	r0, [sp, #0x18]
 805fd66: 2200         	movs	r2, #0x0
 805fd68: 990a         	ldr	r1, [sp, #0x28]
 805fd6a: 2300         	movs	r3, #0x0
 805fd6c: f005 fbce    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x579c
 805fd70: 2800         	cmp	r0, #0x0
 805fd72: d057         	beq	0x805fe24 <_vfprintf_r+0x116c> @ imm = #0xae
 805fd74: 4623         	mov	r3, r4
 805fd76: 1b9b         	subs	r3, r3, r6
 805fd78: f1b9 0f47    	cmp.w	r9, #0x47
 805fd7c: 930f         	str	r3, [sp, #0x3c]
 805fd7e: d05f         	beq	0x805fe40 <_vfprintf_r+0x1188> @ imm = #0xbe
 805fd80: 9b0d         	ldr	r3, [sp, #0x34]
 805fd82: 2b66         	cmp	r3, #0x66
 805fd84: 9b1b         	ldr	r3, [sp, #0x6c]
 805fd86: 930e         	str	r3, [sp, #0x38]
 805fd88: d163         	bne	0x805fe52 <_vfprintf_r+0x119a> @ imm = #0xc6
 805fd8a: 2b00         	cmp	r3, #0x0
 805fd8c: f00b 0b01    	and	r11, r11, #0x1
 805fd90: f340 81ea    	ble.w	0x8060168 <_vfprintf_r+0x14b0> @ imm = #0x3d4
 805fd94: ea5b 0205    	orrs.w	r2, r11, r5
 805fd98: f040 81a4    	bne.w	0x80600e4 <_vfprintf_r+0x142c> @ imm = #0x348
 805fd9c: 9b0e         	ldr	r3, [sp, #0x38]
 805fd9e: 9306         	str	r3, [sp, #0x18]
 805fda0: 930a         	str	r3, [sp, #0x28]
 805fda2: 9b15         	ldr	r3, [sp, #0x54]
 805fda4: 2b00         	cmp	r3, #0x0
 805fda6: f000 80a6    	beq.w	0x805fef6 <_vfprintf_r+0x123e> @ imm = #0x14c
 805fdaa: 232d         	movs	r3, #0x2d
 805fdac: 2500         	movs	r5, #0x0
 805fdae: f88d 3067    	strb.w	r3, [sp, #0x67]
 805fdb2: f7ff b94e    	b.w	0x805f052 <_vfprintf_r+0x39a> @ imm = #-0xd64
 805fdb6: bf00         	nop

0805fdb8 <$d>:
 805fdb8: f8 59 06 08  	.word	0x080659f8
 805fdbc: 14 5a 06 08  	.word	0x08065a14
 805fdc0: 00 5a 06 08  	.word	0x08065a00

0805fdc4 <$t>:
 805fdc4: 4652         	mov	r2, r10
 805fdc6: 9e0a         	ldr	r6, [sp, #0x28]
 805fdc8: 46ba         	mov	r10, r7
 805fdca: 464f         	mov	r7, r9
 805fdcc: 4691         	mov	r9, r2
 805fdce: 3301         	adds	r3, #0x1
 805fdd0: 442c         	add	r4, r5
 805fdd2: f8c8 9000    	str.w	r9, [r8]
 805fdd6: 2b07         	cmp	r3, #0x7
 805fdd8: f8c8 5004    	str.w	r5, [r8, #0x4]
 805fddc: e9cd 3422    	strd	r3, r4, [sp, #136]
 805fde0: dc14         	bgt	0x805fe0c <_vfprintf_r+0x1154> @ imm = #0x28
 805fde2: f108 0808    	add.w	r8, r8, #0x8
 805fde6: e503         	b	0x805f7f0 <_vfprintf_r+0xb38> @ imm = #-0x5fa
 805fde8: 242d         	movs	r4, #0x2d
 805fdea: f88d 4067    	strb.w	r4, [sp, #0x67]
 805fdee: f7ff b91f    	b.w	0x805f030 <_vfprintf_r+0x378> @ imm = #-0xdc2
 805fdf2: aa21         	add	r2, sp, #0x84
 805fdf4: 4651         	mov	r1, r10
 805fdf6: 980b         	ldr	r0, [sp, #0x2c]
 805fdf8: f002 ffc0    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2f80
 805fdfc: 2800         	cmp	r0, #0x0
 805fdfe: f47f abc7    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x872
 805fe02: 991b         	ldr	r1, [sp, #0x6c]
 805fe04: f10d 08b8    	add.w	r8, sp, #0xb8
 805fe08: 9c23         	ldr	r4, [sp, #0x8c]
 805fe0a: e6da         	b	0x805fbc2 <_vfprintf_r+0xf0a> @ imm = #-0x24c
 805fe0c: aa21         	add	r2, sp, #0x84
 805fe0e: 4651         	mov	r1, r10
 805fe10: 980b         	ldr	r0, [sp, #0x2c]
 805fe12: f002 ffb3    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2f66
 805fe16: 2800         	cmp	r0, #0x0
 805fe18: f47f abba    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x88c
 805fe1c: 9c23         	ldr	r4, [sp, #0x8c]
 805fe1e: f10d 08b8    	add.w	r8, sp, #0xb8
 805fe22: e4e5         	b	0x805f7f0 <_vfprintf_r+0xb38> @ imm = #-0x636
 805fe24: 9b1f         	ldr	r3, [sp, #0x7c]
 805fe26: 42a3         	cmp	r3, r4
 805fe28: d2a5         	bhs	0x805fd76 <_vfprintf_r+0x10be> @ imm = #-0xb6
 805fe2a: 2130         	movs	r1, #0x30
 805fe2c: 1c5a         	adds	r2, r3, #0x1
 805fe2e: 921f         	str	r2, [sp, #0x7c]
 805fe30: 7019         	strb	r1, [r3]
 805fe32: 9b1f         	ldr	r3, [sp, #0x7c]
 805fe34: 429c         	cmp	r4, r3
 805fe36: d8f9         	bhi	0x805fe2c <_vfprintf_r+0x1174> @ imm = #-0xe
 805fe38: e79d         	b	0x805fd76 <_vfprintf_r+0x10be> @ imm = #-0xc6
 805fe3a: 9b1f         	ldr	r3, [sp, #0x7c]
 805fe3c: 1b9b         	subs	r3, r3, r6
 805fe3e: 930f         	str	r3, [sp, #0x3c]
 805fe40: 9b1b         	ldr	r3, [sp, #0x6c]
 805fe42: 1cda         	adds	r2, r3, #0x3
 805fe44: 930e         	str	r3, [sp, #0x38]
 805fe46: db01         	blt	0x805fe4c <_vfprintf_r+0x1194> @ imm = #0x2
 805fe48: 42ab         	cmp	r3, r5
 805fe4a: dd59         	ble	0x805ff00 <_vfprintf_r+0x1248> @ imm = #0xb2
 805fe4c: 9b0d         	ldr	r3, [sp, #0x34]
 805fe4e: 3b02         	subs	r3, #0x2
 805fe50: 930d         	str	r3, [sp, #0x34]
 805fe52: 9b0d         	ldr	r3, [sp, #0x34]
 805fe54: 9a0e         	ldr	r2, [sp, #0x38]
 805fe56: f88d 3074    	strb.w	r3, [sp, #0x74]
 805fe5a: 1e53         	subs	r3, r2, #0x1
 805fe5c: 2b00         	cmp	r3, #0x0
 805fe5e: 931b         	str	r3, [sp, #0x6c]
 805fe60: f2c0 813c    	blt.w	0x80600dc <_vfprintf_r+0x1424> @ imm = #0x278
 805fe64: 222b         	movs	r2, #0x2b
 805fe66: 2b09         	cmp	r3, #0x9
 805fe68: f88d 2075    	strb.w	r2, [sp, #0x75]
 805fe6c: f340 812d    	ble.w	0x80600ca <_vfprintf_r+0x1412> @ imm = #0x25a
 805fe70: f10d 0c83    	add.w	r12, sp, #0x83
 805fe74: f8df e2e0    	ldr.w	lr, [pc, #0x2e0]        @ 0x8060158 <_vfprintf_r+0x14a0>
 805fe78: 4660         	mov	r0, r12
 805fe7a: fb8e 1203    	smull	r1, r2, lr, r3
 805fe7e: 17dd         	asrs	r5, r3, #0x1f
 805fe80: 4619         	mov	r1, r3
 805fe82: 4604         	mov	r4, r0
 805fe84: ebc5 05a2    	rsb	r5, r5, r2, asr #2
 805fe88: 3801         	subs	r0, #0x1
 805fe8a: 2963         	cmp	r1, #0x63
 805fe8c: eb05 0285    	add.w	r2, r5, r5, lsl #2
 805fe90: eba3 0242    	sub.w	r2, r3, r2, lsl #1
 805fe94: 462b         	mov	r3, r5
 805fe96: f102 0230    	add.w	r2, r2, #0x30
 805fe9a: f804 2c01    	strb	r2, [r4, #-1]
 805fe9e: dcec         	bgt	0x805fe7a <_vfprintf_r+0x11c2> @ imm = #-0x28
 805fea0: 3330         	adds	r3, #0x30
 805fea2: 1ea2         	subs	r2, r4, #0x2
 805fea4: b2db         	uxtb	r3, r3
 805fea6: 4594         	cmp	r12, r2
 805fea8: f800 3c01    	strb	r3, [r0, #-1]
 805feac: f240 816f    	bls.w	0x806018e <_vfprintf_r+0x14d6> @ imm = #0x2de
 805feb0: f10d 0276    	add.w	r2, sp, #0x76
 805feb4: e001         	b	0x805feba <_vfprintf_r+0x1202> @ imm = #0x2
 805feb6: f810 3b01    	ldrb	r3, [r0], #1
 805feba: 4584         	cmp	r12, r0
 805febc: f802 3b01    	strb	r3, [r2], #1
 805fec0: d1f9         	bne	0x805feb6 <_vfprintf_r+0x11fe> @ imm = #-0xe
 805fec2: f10d 0385    	add.w	r3, sp, #0x85
 805fec6: f10d 0276    	add.w	r2, sp, #0x76
 805feca: 1b1b         	subs	r3, r3, r4
 805fecc: 4413         	add	r3, r2
 805fece: aa1d         	add	r2, sp, #0x74
 805fed0: 1a9b         	subs	r3, r3, r2
 805fed2: 9316         	str	r3, [sp, #0x58]
 805fed4: 9a0f         	ldr	r2, [sp, #0x3c]
 805fed6: 9b16         	ldr	r3, [sp, #0x58]
 805fed8: 2a01         	cmp	r2, #0x1
 805feda: 4413         	add	r3, r2
 805fedc: 930a         	str	r3, [sp, #0x28]
 805fede: f340 8109    	ble.w	0x80600f4 <_vfprintf_r+0x143c> @ imm = #0x212
 805fee2: 9b0a         	ldr	r3, [sp, #0x28]
 805fee4: 9a12         	ldr	r2, [sp, #0x48]
 805fee6: 4413         	add	r3, r2
 805fee8: 2200         	movs	r2, #0x0
 805feea: 930a         	str	r3, [sp, #0x28]
 805feec: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 805fef0: 920e         	str	r2, [sp, #0x38]
 805fef2: 9306         	str	r3, [sp, #0x18]
 805fef4: e755         	b	0x805fda2 <_vfprintf_r+0x10ea> @ imm = #-0x156
 805fef6: 9d15         	ldr	r5, [sp, #0x54]
 805fef8: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 805fefc: f7ff b8a6    	b.w	0x805f04c <_vfprintf_r+0x394> @ imm = #-0xeb4
 805ff00: e9dd 320e    	ldrd	r3, r2, [sp, #56]
 805ff04: 4293         	cmp	r3, r2
 805ff06: f2c0 809a    	blt.w	0x806003e <_vfprintf_r+0x1386> @ imm = #0x134
 805ff0a: f01b 0f01    	tst.w	r11, #0x1
 805ff0e: f040 8106    	bne.w	0x806011e <_vfprintf_r+0x1466> @ imm = #0x20c
 805ff12: ea23 72e3    	bic.w	r2, r3, r3, asr #31
 805ff16: 930a         	str	r3, [sp, #0x28]
 805ff18: 2367         	movs	r3, #0x67
 805ff1a: 9206         	str	r2, [sp, #0x18]
 805ff1c: 930d         	str	r3, [sp, #0x34]
 805ff1e: e740         	b	0x805fda2 <_vfprintf_r+0x10ea> @ imm = #-0x180
 805ff20: aa21         	add	r2, sp, #0x84
 805ff22: 4651         	mov	r1, r10
 805ff24: 980b         	ldr	r0, [sp, #0x2c]
 805ff26: f002 ff29    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2e52
 805ff2a: 2800         	cmp	r0, #0x0
 805ff2c: f47f ab30    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x9a0
 805ff30: 9d1b         	ldr	r5, [sp, #0x6c]
 805ff32: f10d 08b8    	add.w	r8, sp, #0xb8
 805ff36: 9c23         	ldr	r4, [sp, #0x8c]
 805ff38: e46d         	b	0x805f816 <_vfprintf_r+0xb5e> @ imm = #-0x726
 805ff3a: aa21         	add	r2, sp, #0x84
 805ff3c: 4651         	mov	r1, r10
 805ff3e: 980b         	ldr	r0, [sp, #0x2c]
 805ff40: f002 ff1c    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2e38
 805ff44: 2800         	cmp	r0, #0x0
 805ff46: f47f ab23    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x9ba
 805ff4a: 9c23         	ldr	r4, [sp, #0x8c]
 805ff4c: f10d 08b8    	add.w	r8, sp, #0xb8
 805ff50: e445         	b	0x805f7de <_vfprintf_r+0xb26> @ imm = #-0x776
 805ff52: aa21         	add	r2, sp, #0x84
 805ff54: 4651         	mov	r1, r10
 805ff56: 980b         	ldr	r0, [sp, #0x2c]
 805ff58: f002 ff10    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2e20
 805ff5c: 2800         	cmp	r0, #0x0
 805ff5e: f47f ab17    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0x9d2
 805ff62: 991b         	ldr	r1, [sp, #0x6c]
 805ff64: f10d 08b8    	add.w	r8, sp, #0xb8
 805ff68: e9dd 3222    	ldrd	r3, r2, [sp, #136]
 805ff6c: e63b         	b	0x805fbe6 <_vfprintf_r+0xf2e> @ imm = #-0x38a
 805ff6e: 9b07         	ldr	r3, [sp, #0x1c]
 805ff70: 07da         	lsls	r2, r3, #0x1f
 805ff72: f57f a813    	bpl.w	0x805ef9c <_vfprintf_r+0x2e4> @ imm = #-0xfda
 805ff76: 9b12         	ldr	r3, [sp, #0x48]
 805ff78: 9914         	ldr	r1, [sp, #0x50]
 805ff7a: 191a         	adds	r2, r3, r4
 805ff7c: e9c8 1300    	strd	r1, r3, [r8]
 805ff80: 9b22         	ldr	r3, [sp, #0x88]
 805ff82: 9223         	str	r2, [sp, #0x8c]
 805ff84: 3301         	adds	r3, #0x1
 805ff86: 2b07         	cmp	r3, #0x7
 805ff88: 9322         	str	r3, [sp, #0x88]
 805ff8a: dce2         	bgt	0x805ff52 <_vfprintf_r+0x129a> @ imm = #-0x3c
 805ff8c: f108 0808    	add.w	r8, r8, #0x8
 805ff90: e62c         	b	0x805fbec <_vfprintf_r+0xf34> @ imm = #-0x3a8
 805ff92: aa21         	add	r2, sp, #0x84
 805ff94: 4651         	mov	r1, r10
 805ff96: 980b         	ldr	r0, [sp, #0x2c]
 805ff98: f002 fef0    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2de0
 805ff9c: 2800         	cmp	r0, #0x0
 805ff9e: f47f aaf7    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0xa12
 805ffa2: 9d1b         	ldr	r5, [sp, #0x6c]
 805ffa4: f10d 08b8    	add.w	r8, sp, #0xb8
 805ffa8: 9b0f         	ldr	r3, [sp, #0x3c]
 805ffaa: 9c23         	ldr	r4, [sp, #0x8c]
 805ffac: 1b5d         	subs	r5, r3, r5
 805ffae: e44c         	b	0x805f84a <_vfprintf_r+0xb92> @ imm = #-0x768
 805ffb0: 940c         	str	r4, [sp, #0x30]
 805ffb2: 9506         	str	r5, [sp, #0x18]
 805ffb4: 950a         	str	r5, [sp, #0x28]
 805ffb6: 4605         	mov	r5, r0
 805ffb8: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 805ffbc: f8cd b01c    	str.w	r11, [sp, #0x1c]
 805ffc0: 900e         	str	r0, [sp, #0x38]
 805ffc2: f7ff b843    	b.w	0x805f04c <_vfprintf_r+0x394> @ imm = #-0xf7a
 805ffc6: f1b9 0f45    	cmp.w	r9, #0x45
 805ffca: f040 80e3    	bne.w	0x8060194 <_vfprintf_r+0x14dc> @ imm = #0x1c6
 805ffce: a91f         	add	r1, sp, #0x7c
 805ffd0: 1c6c         	adds	r4, r5, #0x1
 805ffd2: 9b0a         	ldr	r3, [sp, #0x28]
 805ffd4: 9104         	str	r1, [sp, #0x10]
 805ffd6: a91c         	add	r1, sp, #0x70
 805ffd8: 9401         	str	r4, [sp, #0x4]
 805ffda: 9103         	str	r1, [sp, #0xc]
 805ffdc: a91b         	add	r1, sp, #0x6c
 805ffde: 980b         	ldr	r0, [sp, #0x2c]
 805ffe0: 9102         	str	r1, [sp, #0x8]
 805ffe2: 2102         	movs	r1, #0x2
 805ffe4: 9100         	str	r1, [sp]
 805ffe6: f000 fa31    	bl	0x806044c <_dtoa_r>     @ imm = #0x462
 805ffea: 4606         	mov	r6, r0
 805ffec: 4434         	add	r4, r6
 805ffee: e6b9         	b	0x805fd64 <_vfprintf_r+0x10ac> @ imm = #-0x28e
 805fff0: 424d         	rsbs	r5, r1, #0
 805fff2: 3110         	adds	r1, #0x10
 805fff4: f8df 9164    	ldr.w	r9, [pc, #0x164]        @ 0x806015c <_vfprintf_r+0x14a4>
 805fff8: da4f         	bge	0x806009a <_vfprintf_r+0x13e2> @ imm = #0x9e
 805fffa: 2410         	movs	r4, #0x10
 805fffc: f8dd b02c    	ldr.w	r11, [sp, #0x2c]
 8060000: e002         	b	0x8060008 <_vfprintf_r+0x1350> @ imm = #0x4
 8060002: 3d10         	subs	r5, #0x10
 8060004: 2d10         	cmp	r5, #0x10
 8060006: dd48         	ble	0x806009a <_vfprintf_r+0x13e2> @ imm = #0x90
 8060008: 3301         	adds	r3, #0x1
 806000a: 3210         	adds	r2, #0x10
 806000c: 2b07         	cmp	r3, #0x7
 806000e: e9c8 9400    	strd	r9, r4, [r8]
 8060012: e9cd 3222    	strd	r3, r2, [sp, #136]
 8060016: f108 0808    	add.w	r8, r8, #0x8
 806001a: ddf2         	ble	0x8060002 <_vfprintf_r+0x134a> @ imm = #-0x1c
 806001c: aa21         	add	r2, sp, #0x84
 806001e: 4651         	mov	r1, r10
 8060020: 4658         	mov	r0, r11
 8060022: f002 feab    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2d56
 8060026: 2800         	cmp	r0, #0x0
 8060028: f47f aab2    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0xa9c
 806002c: f10d 08b8    	add.w	r8, sp, #0xb8
 8060030: e9dd 3222    	ldrd	r3, r2, [sp, #136]
 8060034: e7e5         	b	0x8060002 <_vfprintf_r+0x134a> @ imm = #-0x36
 8060036: f8dd b01c    	ldr.w	r11, [sp, #0x1c]
 806003a: f7ff bba9    	b.w	0x805f790 <_vfprintf_r+0xad8> @ imm = #-0x8ae
 806003e: 9a12         	ldr	r2, [sp, #0x48]
 8060040: 9b0f         	ldr	r3, [sp, #0x3c]
 8060042: 4413         	add	r3, r2
 8060044: 9a0e         	ldr	r2, [sp, #0x38]
 8060046: 2a00         	cmp	r2, #0x0
 8060048: 930a         	str	r3, [sp, #0x28]
 806004a: dd6f         	ble	0x806012c <_vfprintf_r+0x1474> @ imm = #0xde
 806004c: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 8060050: 9306         	str	r3, [sp, #0x18]
 8060052: 2367         	movs	r3, #0x67
 8060054: 930d         	str	r3, [sp, #0x34]
 8060056: e6a4         	b	0x805fda2 <_vfprintf_r+0x10ea> @ imm = #-0x2b8
 8060058: f88d 0067    	strb.w	r0, [sp, #0x67]
 806005c: f7fe bf38    	b.w	0x805eed0 <_vfprintf_r+0x218> @ imm = #-0x1190
 8060060: f88d 0067    	strb.w	r0, [sp, #0x67]
 8060064: f7ff b957    	b.w	0x805f316 <_vfprintf_r+0x65e> @ imm = #-0xd52
 8060068: f88d 0067    	strb.w	r0, [sp, #0x67]
 806006c: f7fe bffd    	b.w	0x805f06a <_vfprintf_r+0x3b2> @ imm = #-0x1006
 8060070: f88d 0067    	strb.w	r0, [sp, #0x67]
 8060074: f7ff b8f1    	b.w	0x805f25a <_vfprintf_r+0x5a2> @ imm = #-0xe1e
 8060078: f88d 0067    	strb.w	r0, [sp, #0x67]
 806007c: f7ff b83e    	b.w	0x805f0fc <_vfprintf_r+0x444> @ imm = #-0xf84
 8060080: f88d 0067    	strb.w	r0, [sp, #0x67]
 8060084: f7fe bfa7    	b.w	0x805efd6 <_vfprintf_r+0x31e> @ imm = #-0x10b2
 8060088: f88d 0067    	strb.w	r0, [sp, #0x67]
 806008c: f7ff b894    	b.w	0x805f1b8 <_vfprintf_r+0x500> @ imm = #-0xed8
 8060090: f04f 33ff    	mov.w	r3, #0xffffffff
 8060094: 9309         	str	r3, [sp, #0x24]
 8060096: f7ff ba81    	b.w	0x805f59c <_vfprintf_r+0x8e4> @ imm = #-0xafe
 806009a: 3301         	adds	r3, #0x1
 806009c: 442a         	add	r2, r5
 806009e: f8c8 9000    	str.w	r9, [r8]
 80600a2: 2b07         	cmp	r3, #0x7
 80600a4: f8c8 5004    	str.w	r5, [r8, #0x4]
 80600a8: e9cd 3222    	strd	r3, r2, [sp, #136]
 80600ac: f77f af6e    	ble.w	0x805ff8c <_vfprintf_r+0x12d4> @ imm = #-0x124
 80600b0: aa21         	add	r2, sp, #0x84
 80600b2: 4651         	mov	r1, r10
 80600b4: 980b         	ldr	r0, [sp, #0x2c]
 80600b6: f002 fe61    	bl	0x8062d7c <__sprint_r>  @ imm = #0x2cc2
 80600ba: 2800         	cmp	r0, #0x0
 80600bc: f47f aa68    	bne.w	0x805f590 <_vfprintf_r+0x8d8> @ imm = #-0xb30
 80600c0: f10d 08b8    	add.w	r8, sp, #0xb8
 80600c4: e9dd 3222    	ldrd	r3, r2, [sp, #136]
 80600c8: e590         	b	0x805fbec <_vfprintf_r+0xf34> @ imm = #-0x4e0
 80600ca: 3330         	adds	r3, #0x30
 80600cc: f88d 3077    	strb.w	r3, [sp, #0x77]
 80600d0: 2330         	movs	r3, #0x30
 80600d2: f88d 3076    	strb.w	r3, [sp, #0x76]
 80600d6: 2304         	movs	r3, #0x4
 80600d8: 9316         	str	r3, [sp, #0x58]
 80600da: e6fb         	b	0x805fed4 <_vfprintf_r+0x121c> @ imm = #-0x20a
 80600dc: f1c2 0301    	rsb.w	r3, r2, #0x1
 80600e0: 222d         	movs	r2, #0x2d
 80600e2: e6c0         	b	0x805fe66 <_vfprintf_r+0x11ae> @ imm = #-0x280
 80600e4: 9a12         	ldr	r2, [sp, #0x48]
 80600e6: 4413         	add	r3, r2
 80600e8: 442b         	add	r3, r5
 80600ea: 930a         	str	r3, [sp, #0x28]
 80600ec: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 80600f0: 9306         	str	r3, [sp, #0x18]
 80600f2: e656         	b	0x805fda2 <_vfprintf_r+0x10ea> @ imm = #-0x354
 80600f4: f01b 0201    	ands	r2, r11, #0x1
 80600f8: 920e         	str	r2, [sp, #0x38]
 80600fa: f47f aef2    	bne.w	0x805fee2 <_vfprintf_r+0x122a> @ imm = #-0x21c
 80600fe: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 8060102: 9306         	str	r3, [sp, #0x18]
 8060104: e64d         	b	0x805fda2 <_vfprintf_r+0x10ea> @ imm = #-0x366
 8060106: 9b11         	ldr	r3, [sp, #0x44]
 8060108: 2b00         	cmp	r3, #0x0
 806010a: db16         	blt	0x806013a <_vfprintf_r+0x1482> @ imm = #0x2c
 806010c: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 8060110: f02b 0380    	bic	r3, r11, #0x80
 8060114: 4e12         	ldr	r6, [pc, #0x48]         @ 0x8060160 <_vfprintf_r+0x14a8>
 8060116: 9307         	str	r3, [sp, #0x1c]
 8060118: 4b12         	ldr	r3, [pc, #0x48]         @ 0x8060164 <_vfprintf_r+0x14ac>
 806011a: f7fe bf8e    	b.w	0x805f03a <_vfprintf_r+0x382> @ imm = #-0x10e4
 806011e: 9b0e         	ldr	r3, [sp, #0x38]
 8060120: 9a12         	ldr	r2, [sp, #0x48]
 8060122: 4413         	add	r3, r2
 8060124: 2267         	movs	r2, #0x67
 8060126: 930a         	str	r3, [sp, #0x28]
 8060128: 920d         	str	r2, [sp, #0x34]
 806012a: e7e8         	b	0x80600fe <_vfprintf_r+0x1446> @ imm = #-0x30
 806012c: 9b0e         	ldr	r3, [sp, #0x38]
 806012e: 9a0a         	ldr	r2, [sp, #0x28]
 8060130: f1c3 0301    	rsb.w	r3, r3, #0x1
 8060134: 441a         	add	r2, r3
 8060136: 4613         	mov	r3, r2
 8060138: e7f4         	b	0x8060124 <_vfprintf_r+0x146c> @ imm = #-0x18
 806013a: 242d         	movs	r4, #0x2d
 806013c: f88d 4067    	strb.w	r4, [sp, #0x67]
 8060140: e7e6         	b	0x8060110 <_vfprintf_r+0x1458> @ imm = #-0x34
 8060142: 990c         	ldr	r1, [sp, #0x30]
 8060144: 787a         	ldrb	r2, [r7, #0x1]
 8060146: 4627         	mov	r7, r4
 8060148: f851 5b04    	ldr	r5, [r1], #4
 806014c: ea45 75e5    	orr.w	r5, r5, r5, asr #31
 8060150: 910c         	str	r1, [sp, #0x30]
 8060152: f7fe be22    	b.w	0x805ed9a <_vfprintf_r+0xe2> @ imm = #-0x13bc
 8060156: bf00         	nop

08060158 <$d>:
 8060158: 67 66 66 66  	.word	0x66666667
 806015c: 14 5a 06 08  	.word	0x08065a14
 8060160: c8 59 06 08  	.word	0x080659c8
 8060164: cc 59 06 08  	.word	0x080659cc

08060168 <$t>:
 8060168: ea5b 0305    	orrs.w	r3, r11, r5
 806016c: d103         	bne	0x8060176 <_vfprintf_r+0x14be> @ imm = #0x6
 806016e: 2301         	movs	r3, #0x1
 8060170: 9306         	str	r3, [sp, #0x18]
 8060172: 930a         	str	r3, [sp, #0x28]
 8060174: e615         	b	0x805fda2 <_vfprintf_r+0x10ea> @ imm = #-0x3d6
 8060176: 9b12         	ldr	r3, [sp, #0x48]
 8060178: 3301         	adds	r3, #0x1
 806017a: 442b         	add	r3, r5
 806017c: 930a         	str	r3, [sp, #0x28]
 806017e: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 8060182: 9306         	str	r3, [sp, #0x18]
 8060184: e60d         	b	0x805fda2 <_vfprintf_r+0x10ea> @ imm = #-0x3e6
 8060186: f1c5 0301    	rsb.w	r3, r5, #0x1
 806018a: 931b         	str	r3, [sp, #0x6c]
 806018c: e5e8         	b	0x805fd60 <_vfprintf_r+0x10a8> @ imm = #-0x430
 806018e: 2302         	movs	r3, #0x2
 8060190: 9316         	str	r3, [sp, #0x58]
 8060192: e69f         	b	0x805fed4 <_vfprintf_r+0x121c> @ imm = #-0x2c2
 8060194: a91f         	add	r1, sp, #0x7c
 8060196: 9b0a         	ldr	r3, [sp, #0x28]
 8060198: 980b         	ldr	r0, [sp, #0x2c]
 806019a: 462c         	mov	r4, r5
 806019c: 9104         	str	r1, [sp, #0x10]
 806019e: a91c         	add	r1, sp, #0x70
 80601a0: 9501         	str	r5, [sp, #0x4]
 80601a2: 9103         	str	r1, [sp, #0xc]
 80601a4: a91b         	add	r1, sp, #0x6c
 80601a6: 9102         	str	r1, [sp, #0x8]
 80601a8: 2102         	movs	r1, #0x2
 80601aa: 9100         	str	r1, [sp]
 80601ac: f000 f94e    	bl	0x806044c <_dtoa_r>     @ imm = #0x29c
 80601b0: f1b9 0f47    	cmp.w	r9, #0x47
 80601b4: 4606         	mov	r6, r0
 80601b6: f43f ac4e    	beq.w	0x805fa56 <_vfprintf_r+0xd9e> @ imm = #-0x764
 80601ba: 4434         	add	r4, r6
 80601bc: e5d2         	b	0x805fd64 <_vfprintf_r+0x10ac> @ imm = #-0x45c
 80601be: bf00         	nop

080601c0 <vfprintf>:
 80601c0: b410         	push	{r4}
 80601c2: 4c04         	ldr	r4, [pc, #0x10]         @ 0x80601d4 <vfprintf+0x14>
 80601c4: 4613         	mov	r3, r2
 80601c6: 460a         	mov	r2, r1
 80601c8: 4601         	mov	r1, r0
 80601ca: 6820         	ldr	r0, [r4]
 80601cc: bc10         	pop	{r4}
 80601ce: f7fe bd73    	b.w	0x805ecb8 <_vfprintf_r> @ imm = #-0x151a
 80601d2: bf00         	nop

080601d4 <$d>:
 80601d4: 90 23 00 20  	.word	0x20002390

080601d8 <__sbprintf>:
 80601d8: b570         	push	{r4, r5, r6, lr}
 80601da: f5ad 6d8d    	sub.w	sp, sp, #0x468
 80601de: 460c         	mov	r4, r1
 80601e0: 4606         	mov	r6, r0
 80601e2: a91a         	add	r1, sp, #0x68
 80601e4: 9100         	str	r1, [sp]
 80601e6: 9104         	str	r1, [sp, #0x10]
 80601e8: 89a1         	ldrh	r1, [r4, #0xc]
 80601ea: f021 0102    	bic	r1, r1, #0x2
 80601ee: f8ad 100c    	strh.w	r1, [sp, #0xc]
 80601f2: 6e61         	ldr	r1, [r4, #0x64]
 80601f4: 9119         	str	r1, [sp, #0x64]
 80601f6: 89e1         	ldrh	r1, [r4, #0xe]
 80601f8: f8ad 100e    	strh.w	r1, [sp, #0xe]
 80601fc: 69e1         	ldr	r1, [r4, #0x1c]
 80601fe: 9107         	str	r1, [sp, #0x1c]
 8060200: 6a61         	ldr	r1, [r4, #0x24]
 8060202: 9109         	str	r1, [sp, #0x24]
 8060204: f44f 6180    	mov.w	r1, #0x400
 8060208: 9102         	str	r1, [sp, #0x8]
 806020a: 9105         	str	r1, [sp, #0x14]
 806020c: 2100         	movs	r1, #0x0
 806020e: 9106         	str	r1, [sp, #0x18]
 8060210: 4669         	mov	r1, sp
 8060212: f7fe fd51    	bl	0x805ecb8 <_vfprintf_r> @ imm = #-0x155e
 8060216: 1e05         	subs	r5, r0, #0x0
 8060218: db07         	blt	0x806022a <__sbprintf+0x52> @ imm = #0xe
 806021a: 4669         	mov	r1, sp
 806021c: 4630         	mov	r0, r6
 806021e: f001 f92d    	bl	0x806147c <_fflush_r>   @ imm = #0x125a
 8060222: 2800         	cmp	r0, #0x0
 8060224: bf18         	it	ne
 8060226: f04f 35ff    	movne.w	r5, #0xffffffff
 806022a: f8bd 300c    	ldrh.w	r3, [sp, #0xc]
 806022e: 065b         	lsls	r3, r3, #0x19
 8060230: d503         	bpl	0x806023a <__sbprintf+0x62> @ imm = #0x6
 8060232: 89a3         	ldrh	r3, [r4, #0xc]
 8060234: f043 0340    	orr	r3, r3, #0x40
 8060238: 81a3         	strh	r3, [r4, #0xc]
 806023a: 4628         	mov	r0, r5
 806023c: f50d 6d8d    	add.w	sp, sp, #0x468
 8060240: bd70         	pop	{r4, r5, r6, pc}
 8060242: bf00         	nop

08060244 <__swsetup_r>:
 8060244: b538         	push	{r3, r4, r5, lr}
 8060246: 4b33         	ldr	r3, [pc, #0xcc]         @ 0x8060314 <__swsetup_r+0xd0>
 8060248: 4605         	mov	r5, r0
 806024a: 460c         	mov	r4, r1
 806024c: 681b         	ldr	r3, [r3]
 806024e: b10b         	cbz	r3, 0x8060254 <__swsetup_r+0x10> @ imm = #0x2
 8060250: 6b9a         	ldr	r2, [r3, #0x38]
 8060252: b1da         	cbz	r2, 0x806028c <__swsetup_r+0x48> @ imm = #0x36
 8060254: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8060258: 0718         	lsls	r0, r3, #0x1c
 806025a: b29a         	uxth	r2, r3
 806025c: d51e         	bpl	0x806029c <__swsetup_r+0x58> @ imm = #0x3c
 806025e: 6921         	ldr	r1, [r4, #0x10]
 8060260: b339         	cbz	r1, 0x80602b2 <__swsetup_r+0x6e> @ imm = #0x4e
 8060262: f012 0001    	ands	r0, r2, #0x1
 8060266: d007         	beq	0x8060278 <__swsetup_r+0x34> @ imm = #0xe
 8060268: 2000         	movs	r0, #0x0
 806026a: 60a0         	str	r0, [r4, #0x8]
 806026c: 6960         	ldr	r0, [r4, #0x14]
 806026e: 4240         	rsbs	r0, r0, #0
 8060270: 61a0         	str	r0, [r4, #0x18]
 8060272: b139         	cbz	r1, 0x8060284 <__swsetup_r+0x40> @ imm = #0xe
 8060274: 2000         	movs	r0, #0x0
 8060276: bd38         	pop	{r3, r4, r5, pc}
 8060278: 0795         	lsls	r5, r2, #0x1e
 806027a: bf58         	it	pl
 806027c: 6960         	ldrpl	r0, [r4, #0x14]
 806027e: 60a0         	str	r0, [r4, #0x8]
 8060280: 2900         	cmp	r1, #0x0
 8060282: d1f7         	bne	0x8060274 <__swsetup_r+0x30> @ imm = #-0x12
 8060284: 0612         	lsls	r2, r2, #0x18
 8060286: d43e         	bmi	0x8060306 <__swsetup_r+0xc2> @ imm = #0x7c
 8060288: 4608         	mov	r0, r1
 806028a: bd38         	pop	{r3, r4, r5, pc}
 806028c: 4618         	mov	r0, r3
 806028e: f001 fa1f    	bl	0x80616d0 <__sinit>     @ imm = #0x143e
 8060292: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8060296: 0718         	lsls	r0, r3, #0x1c
 8060298: b29a         	uxth	r2, r3
 806029a: d4e0         	bmi	0x806025e <__swsetup_r+0x1a> @ imm = #-0x40
 806029c: 06d1         	lsls	r1, r2, #0x1b
 806029e: d52a         	bpl	0x80602f6 <__swsetup_r+0xb2> @ imm = #0x54
 80602a0: 0752         	lsls	r2, r2, #0x1d
 80602a2: d414         	bmi	0x80602ce <__swsetup_r+0x8a> @ imm = #0x28
 80602a4: 6921         	ldr	r1, [r4, #0x10]
 80602a6: f043 0308    	orr	r3, r3, #0x8
 80602aa: b29a         	uxth	r2, r3
 80602ac: 81a3         	strh	r3, [r4, #0xc]
 80602ae: 2900         	cmp	r1, #0x0
 80602b0: d1d7         	bne	0x8060262 <__swsetup_r+0x1e> @ imm = #-0x52
 80602b2: f402 7020    	and	r0, r2, #0x280
 80602b6: f5b0 7f00    	cmp.w	r0, #0x200
 80602ba: d0d2         	beq	0x8060262 <__swsetup_r+0x1e> @ imm = #-0x5c
 80602bc: 4621         	mov	r1, r4
 80602be: 4628         	mov	r0, r5
 80602c0: f001 fbc8    	bl	0x8061a54 <__smakebuf_r> @ imm = #0x1790
 80602c4: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 80602c8: 6921         	ldr	r1, [r4, #0x10]
 80602ca: b29a         	uxth	r2, r3
 80602cc: e7c9         	b	0x8060262 <__swsetup_r+0x1e> @ imm = #-0x6e
 80602ce: 6b21         	ldr	r1, [r4, #0x30]
 80602d0: b151         	cbz	r1, 0x80602e8 <__swsetup_r+0xa4> @ imm = #0x14
 80602d2: f104 0240    	add.w	r2, r4, #0x40
 80602d6: 4291         	cmp	r1, r2
 80602d8: d004         	beq	0x80602e4 <__swsetup_r+0xa0> @ imm = #0x8
 80602da: 4628         	mov	r0, r5
 80602dc: f001 fa68    	bl	0x80617b0 <_free_r>     @ imm = #0x14d0
 80602e0: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 80602e4: 2200         	movs	r2, #0x0
 80602e6: 6322         	str	r2, [r4, #0x30]
 80602e8: 2200         	movs	r2, #0x0
 80602ea: 6921         	ldr	r1, [r4, #0x10]
 80602ec: f023 0324    	bic	r3, r3, #0x24
 80602f0: e9c4 1200    	strd	r1, r2, [r4]
 80602f4: e7d7         	b	0x80602a6 <__swsetup_r+0x62> @ imm = #-0x52
 80602f6: 2209         	movs	r2, #0x9
 80602f8: f043 0340    	orr	r3, r3, #0x40
 80602fc: f04f 30ff    	mov.w	r0, #0xffffffff
 8060300: 602a         	str	r2, [r5]
 8060302: 81a3         	strh	r3, [r4, #0xc]
 8060304: bd38         	pop	{r3, r4, r5, pc}
 8060306: f043 0340    	orr	r3, r3, #0x40
 806030a: f04f 30ff    	mov.w	r0, #0xffffffff
 806030e: 81a3         	strh	r3, [r4, #0xc]
 8060310: bd38         	pop	{r3, r4, r5, pc}
 8060312: bf00         	nop

08060314 <$d>:
 8060314: 90 23 00 20  	.word	0x20002390

08060318 <quorem>:
 8060318: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 806031c: 6903         	ldr	r3, [r0, #0x10]
 806031e: b085         	sub	sp, #0x14
 8060320: 690c         	ldr	r4, [r1, #0x10]
 8060322: 9101         	str	r1, [sp, #0x4]
 8060324: 42a3         	cmp	r3, r4
 8060326: f2c0 808c    	blt.w	0x8060442 <quorem+0x12a> @ imm = #0x118
 806032a: 3c01         	subs	r4, #0x1
 806032c: f101 0514    	add.w	r5, r1, #0x14
 8060330: f100 0814    	add.w	r8, r0, #0x14
 8060334: 4681         	mov	r9, r0
 8060336: 00a3         	lsls	r3, r4, #0x2
 8060338: f858 2024    	ldr.w	r2, [r8, r4, lsl #2]
 806033c: eb08 0184    	add.w	r1, r8, r4, lsl #2
 8060340: 9302         	str	r3, [sp, #0x8]
 8060342: eb05 0784    	add.w	r7, r5, r4, lsl #2
 8060346: f855 3024    	ldr.w	r3, [r5, r4, lsl #2]
 806034a: 9103         	str	r1, [sp, #0xc]
 806034c: 3301         	adds	r3, #0x1
 806034e: 429a         	cmp	r2, r3
 8060350: fbb2 f6f3    	udiv	r6, r2, r3
 8060354: d33c         	blo	0x80603d0 <quorem+0xb8> @ imm = #0x78
 8060356: 2100         	movs	r1, #0x0
 8060358: 46ae         	mov	lr, r5
 806035a: 4640         	mov	r0, r8
 806035c: 460a         	mov	r2, r1
 806035e: f85e 3b04    	ldr	r3, [lr], #4
 8060362: f8d0 a000    	ldr.w	r10, [r0]
 8060366: fa1f fc83    	uxth.w	r12, r3
 806036a: 4577         	cmp	r7, lr
 806036c: ea4f 4313    	lsr.w	r3, r3, #0x10
 8060370: fb06 110c    	mla	r1, r6, r12, r1
 8060374: fa1f fb8a    	uxth.w	r11, r10
 8060378: ea4f 4c11    	lsr.w	r12, r1, #0x10
 806037c: fb06 cc03    	mla	r12, r6, r3, r12
 8060380: b28b         	uxth	r3, r1
 8060382: eba2 0203    	sub.w	r2, r2, r3
 8060386: ea4f 411c    	lsr.w	r1, r12, #0x10
 806038a: eb02 030b    	add.w	r3, r2, r11
 806038e: fa1f f28c    	uxth.w	r2, r12
 8060392: ebc2 421a    	rsb	r2, r2, r10, lsr #16
 8060396: eb02 4223    	add.w	r2, r2, r3, asr #16
 806039a: b29b         	uxth	r3, r3
 806039c: ea43 4302    	orr.w	r3, r3, r2, lsl #16
 80603a0: ea4f 4222    	asr.w	r2, r2, #0x10
 80603a4: f840 3b04    	str	r3, [r0], #4
 80603a8: d2d9         	bhs	0x806035e <quorem+0x46> @ imm = #-0x4e
 80603aa: 9b02         	ldr	r3, [sp, #0x8]
 80603ac: f858 3003    	ldr.w	r3, [r8, r3]
 80603b0: b973         	cbnz	r3, 0x80603d0 <quorem+0xb8> @ imm = #0x1c
 80603b2: 9b03         	ldr	r3, [sp, #0xc]
 80603b4: 3b04         	subs	r3, #0x4
 80603b6: 4598         	cmp	r8, r3
 80603b8: d304         	blo	0x80603c4 <quorem+0xac> @ imm = #0x8
 80603ba: e007         	b	0x80603cc <quorem+0xb4> @ imm = #0xe
 80603bc: 4598         	cmp	r8, r3
 80603be: f104 34ff    	add.w	r4, r4, #0xffffffff
 80603c2: d203         	bhs	0x80603cc <quorem+0xb4> @ imm = #0x6
 80603c4: f853 2904    	ldr	r2, [r3], #-4
 80603c8: 2a00         	cmp	r2, #0x0
 80603ca: d0f7         	beq	0x80603bc <quorem+0xa4> @ imm = #-0x12
 80603cc: f8c9 4010    	str.w	r4, [r9, #0x10]
 80603d0: 9901         	ldr	r1, [sp, #0x4]
 80603d2: 4648         	mov	r0, r9
 80603d4: f002 f9b2    	bl	0x806273c <__mcmp>      @ imm = #0x2364
 80603d8: 2800         	cmp	r0, #0x0
 80603da: db2e         	blt	0x806043a <quorem+0x122> @ imm = #0x5c
 80603dc: 3601         	adds	r6, #0x1
 80603de: 4640         	mov	r0, r8
 80603e0: 2300         	movs	r3, #0x0
 80603e2: f855 1b04    	ldr	r1, [r5], #4
 80603e6: f8d0 c000    	ldr.w	r12, [r0]
 80603ea: b28a         	uxth	r2, r1
 80603ec: 42af         	cmp	r7, r5
 80603ee: ea4f 4111    	lsr.w	r1, r1, #0x10
 80603f2: eba3 0202    	sub.w	r2, r3, r2
 80603f6: fa1f fe8c    	uxth.w	lr, r12
 80603fa: ebc1 431c    	rsb	r3, r1, r12, lsr #16
 80603fe: 4472         	add	r2, lr
 8060400: eb03 4322    	add.w	r3, r3, r2, asr #16
 8060404: b292         	uxth	r2, r2
 8060406: ea42 4203    	orr.w	r2, r2, r3, lsl #16
 806040a: ea4f 4323    	asr.w	r3, r3, #0x10
 806040e: f840 2b04    	str	r2, [r0], #4
 8060412: d2e6         	bhs	0x80603e2 <quorem+0xca> @ imm = #-0x34
 8060414: f858 2024    	ldr.w	r2, [r8, r4, lsl #2]
 8060418: eb08 0384    	add.w	r3, r8, r4, lsl #2
 806041c: b96a         	cbnz	r2, 0x806043a <quorem+0x122> @ imm = #0x1a
 806041e: 3b04         	subs	r3, #0x4
 8060420: 4598         	cmp	r8, r3
 8060422: d304         	blo	0x806042e <quorem+0x116> @ imm = #0x8
 8060424: e007         	b	0x8060436 <quorem+0x11e> @ imm = #0xe
 8060426: 4598         	cmp	r8, r3
 8060428: f104 34ff    	add.w	r4, r4, #0xffffffff
 806042c: d203         	bhs	0x8060436 <quorem+0x11e> @ imm = #0x6
 806042e: f853 2904    	ldr	r2, [r3], #-4
 8060432: 2a00         	cmp	r2, #0x0
 8060434: d0f7         	beq	0x8060426 <quorem+0x10e> @ imm = #-0x12
 8060436: f8c9 4010    	str.w	r4, [r9, #0x10]
 806043a: 4630         	mov	r0, r6
 806043c: b005         	add	sp, #0x14
 806043e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8060442: 2000         	movs	r0, #0x0
 8060444: b005         	add	sp, #0x14
 8060446: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806044a: bf00         	nop

0806044c <_dtoa_r>:
 806044c: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8060450: 6c01         	ldr	r1, [r0, #0x40]
 8060452: b09b         	sub	sp, #0x6c
 8060454: 4616         	mov	r6, r2
 8060456: 461f         	mov	r7, r3
 8060458: 4604         	mov	r4, r0
 806045a: 9d27         	ldr	r5, [sp, #0x9c]
 806045c: e9cd 6702    	strd	r6, r7, [sp, #8]
 8060460: b141         	cbz	r1, 0x8060474 <_dtoa_r+0x28> @ imm = #0x10
 8060462: 6c42         	ldr	r2, [r0, #0x44]
 8060464: 2301         	movs	r3, #0x1
 8060466: 4093         	lsls	r3, r2
 8060468: 604a         	str	r2, [r1, #0x4]
 806046a: 608b         	str	r3, [r1, #0x8]
 806046c: f001 feb0    	bl	0x80621d0 <_Bfree>      @ imm = #0x1d60
 8060470: 2300         	movs	r3, #0x0
 8060472: 6423         	str	r3, [r4, #0x40]
 8060474: f1b7 0900    	subs.w	r9, r7, #0x0
 8060478: f2c0 80b4    	blt.w	0x80605e4 <_dtoa_r+0x198> @ imm = #0x168
 806047c: 2300         	movs	r3, #0x0
 806047e: 602b         	str	r3, [r5]
 8060480: 4b79         	ldr	r3, [pc, #0x1e4]        @ 0x8060668 <_dtoa_r+0x21c>
 8060482: ea33 0309    	bics.w	r3, r3, r9
 8060486: f000 80b8    	beq.w	0x80605fa <_dtoa_r+0x1ae> @ imm = #0x170
 806048a: e9dd 2302    	ldrd	r2, r3, [sp, #8]
 806048e: 4610         	mov	r0, r2
 8060490: 4619         	mov	r1, r3
 8060492: 2200         	movs	r2, #0x0
 8060494: 2300         	movs	r3, #0x0
 8060496: e9cd 010a    	strd	r0, r1, [sp, #40]
 806049a: f005 f837    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x506e
 806049e: 4680         	mov	r8, r0
 80604a0: b178         	cbz	r0, 0x80604c2 <_dtoa_r+0x76> @ imm = #0x1e
 80604a2: 2301         	movs	r3, #0x1
 80604a4: 9a26         	ldr	r2, [sp, #0x98]
 80604a6: 6013         	str	r3, [r2]
 80604a8: 9b28         	ldr	r3, [sp, #0xa0]
 80604aa: 2b00         	cmp	r3, #0x0
 80604ac: f000 8269    	beq.w	0x8060982 <_dtoa_r+0x536> @ imm = #0x4d2
 80604b0: 4b6e         	ldr	r3, [pc, #0x1b8]        @ 0x806066c <_dtoa_r+0x220>
 80604b2: f103 39ff    	add.w	r9, r3, #0xffffffff
 80604b6: 9a28         	ldr	r2, [sp, #0xa0]
 80604b8: 6013         	str	r3, [r2]
 80604ba: 4648         	mov	r0, r9
 80604bc: b01b         	add	sp, #0x6c
 80604be: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80604c2: ab18         	add	r3, sp, #0x60
 80604c4: 4620         	mov	r0, r4
 80604c6: e9dd ab0a    	ldrd	r10, r11, [sp, #40]
 80604ca: 9301         	str	r3, [sp, #0x4]
 80604cc: ab19         	add	r3, sp, #0x64
 80604ce: 4652         	mov	r2, r10
 80604d0: 9300         	str	r3, [sp]
 80604d2: 465b         	mov	r3, r11
 80604d4: f002 fa84    	bl	0x80629e0 <__d2b>       @ imm = #0x2508
 80604d8: 900c         	str	r0, [sp, #0x30]
 80604da: ea5f 5519    	lsrs.w	r5, r9, #0x14
 80604de: f040 809e    	bne.w	0x806061e <_dtoa_r+0x1d2> @ imm = #0x13c
 80604e2: e9dd 8518    	ldrd	r8, r5, [sp, #96]
 80604e6: 4445         	add	r5, r8
 80604e8: f205 4032    	addw	r0, r5, #0x432
 80604ec: 2820         	cmp	r0, #0x20
 80604ee: f340 824e    	ble.w	0x806098e <_dtoa_r+0x542> @ imm = #0x49c
 80604f2: f1c0 0040    	rsb.w	r0, r0, #0x40
 80604f6: fa09 f900    	lsl.w	r9, r9, r0
 80604fa: f205 4012    	addw	r0, r5, #0x412
 80604fe: fa26 f000    	lsr.w	r0, r6, r0
 8060502: ea49 0000    	orr.w	r0, r9, r0
 8060506: f004 fd1f    	bl	0x8064f48 <__floatunsidf> @ imm = #0x4a3e
 806050a: 3d01         	subs	r5, #0x1
 806050c: 2301         	movs	r3, #0x1
 806050e: f1a1 71f8    	sub.w	r1, r1, #0x1f00000
 8060512: 9312         	str	r3, [sp, #0x48]
 8060514: 2200         	movs	r2, #0x0
 8060516: 4b56         	ldr	r3, [pc, #0x158]        @ 0x8060670 <_dtoa_r+0x224>
 8060518: f004 fbd8    	bl	0x8064ccc <__subdf3>    @ imm = #0x47b0
 806051c: a34c         	adr	r3, #304 <_dtoa_r+0x120>
 806051e: e9d3 2300    	ldrd	r2, r3, [r3]
 8060522: f004 fd8b    	bl	0x806503c <__muldf3>    @ imm = #0x4b16
 8060526: a34c         	adr	r3, #304 <_dtoa_r+0x12a>
 8060528: e9d3 2300    	ldrd	r2, r3, [r3]
 806052c: f004 fbd0    	bl	0x8064cd0 <__aeabi_dadd> @ imm = #0x47a0
 8060530: 4606         	mov	r6, r0
 8060532: 460f         	mov	r7, r1
 8060534: 4628         	mov	r0, r5
 8060536: f004 fd17    	bl	0x8064f68 <__floatsidf> @ imm = #0x4a2e
 806053a: a349         	adr	r3, #292 <_dtoa_r+0x13b>
 806053c: e9d3 2300    	ldrd	r2, r3, [r3]
 8060540: f004 fd7c    	bl	0x806503c <__muldf3>    @ imm = #0x4af8
 8060544: 4602         	mov	r2, r0
 8060546: 460b         	mov	r3, r1
 8060548: 4630         	mov	r0, r6
 806054a: 4639         	mov	r1, r7
 806054c: f004 fbc0    	bl	0x8064cd0 <__aeabi_dadd> @ imm = #0x4780
 8060550: 4606         	mov	r6, r0
 8060552: 460f         	mov	r7, r1
 8060554: f005 f822    	bl	0x806559c <__fixdfsi>   @ imm = #0x5044
 8060558: 2200         	movs	r2, #0x0
 806055a: 4681         	mov	r9, r0
 806055c: 9005         	str	r0, [sp, #0x14]
 806055e: 2300         	movs	r3, #0x0
 8060560: 4630         	mov	r0, r6
 8060562: 4639         	mov	r1, r7
 8060564: f004 ffdc    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x4fb8
 8060568: 2800         	cmp	r0, #0x0
 806056a: f040 81fc    	bne.w	0x8060966 <_dtoa_r+0x51a> @ imm = #0x3f8
 806056e: 9e05         	ldr	r6, [sp, #0x14]
 8060570: 2e16         	cmp	r6, #0x16
 8060572: f200 81ea    	bhi.w	0x806094a <_dtoa_r+0x4fe> @ imm = #0x3d4
 8060576: 4b3f         	ldr	r3, [pc, #0xfc]         @ 0x8060674 <_dtoa_r+0x228>
 8060578: eb03 03c6    	add.w	r3, r3, r6, lsl #3
 806057c: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 8060580: e9d3 2300    	ldrd	r2, r3, [r3]
 8060584: f004 ffcc    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x4f98
 8060588: 2800         	cmp	r0, #0x0
 806058a: d079         	beq	0x8060680 <_dtoa_r+0x234> @ imm = #0xf2
 806058c: 1e73         	subs	r3, r6, #0x1
 806058e: eba8 0505    	sub.w	r5, r8, r5
 8060592: 9305         	str	r3, [sp, #0x14]
 8060594: 2300         	movs	r3, #0x0
 8060596: 930f         	str	r3, [sp, #0x3c]
 8060598: 1e6b         	subs	r3, r5, #0x1
 806059a: 9307         	str	r3, [sp, #0x1c]
 806059c: f100 81dd    	bmi.w	0x806095a <_dtoa_r+0x50e> @ imm = #0x3ba
 80605a0: 2300         	movs	r3, #0x0
 80605a2: 9309         	str	r3, [sp, #0x24]
 80605a4: 9b05         	ldr	r3, [sp, #0x14]
 80605a6: 2b00         	cmp	r3, #0x0
 80605a8: da72         	bge	0x8060690 <_dtoa_r+0x244> @ imm = #0xe4
 80605aa: 9b05         	ldr	r3, [sp, #0x14]
 80605ac: 9a09         	ldr	r2, [sp, #0x24]
 80605ae: 9306         	str	r3, [sp, #0x18]
 80605b0: 1ad2         	subs	r2, r2, r3
 80605b2: 9209         	str	r2, [sp, #0x24]
 80605b4: 425a         	rsbs	r2, r3, #0
 80605b6: 2300         	movs	r3, #0x0
 80605b8: 920e         	str	r2, [sp, #0x38]
 80605ba: 9305         	str	r3, [sp, #0x14]
 80605bc: 9b24         	ldr	r3, [sp, #0x90]
 80605be: 2b09         	cmp	r3, #0x9
 80605c0: d870         	bhi	0x80606a4 <_dtoa_r+0x258> @ imm = #0xe0
 80605c2: 2b05         	cmp	r3, #0x5
 80605c4: f340 81e8    	ble.w	0x8060998 <_dtoa_r+0x54c> @ imm = #0x3d0
 80605c8: 3b04         	subs	r3, #0x4
 80605ca: 2500         	movs	r5, #0x0
 80605cc: 9324         	str	r3, [sp, #0x90]
 80605ce: 9b24         	ldr	r3, [sp, #0x90]
 80605d0: 3b02         	subs	r3, #0x2
 80605d2: 2b03         	cmp	r3, #0x3
 80605d4: f200 853b    	bhi.w	0x806104e <_dtoa_r+0xc02> @ imm = #0xa76
 80605d8: e8df f013    	tbh	[pc, r3, lsl #1]

080605dc <$d>:
 80605dc: a5 03 a2 03  	.word	0x03a203a5
 80605e0: 98 03 7c 03  	.word	0x037c0398

080605e4 <$t>:
 80605e4: 2301         	movs	r3, #0x1
 80605e6: f029 4900    	bic	r9, r9, #0x80000000
 80605ea: 602b         	str	r3, [r5]
 80605ec: 4b1e         	ldr	r3, [pc, #0x78]         @ 0x8060668 <_dtoa_r+0x21c>
 80605ee: f8cd 900c    	str.w	r9, [sp, #0xc]
 80605f2: ea33 0309    	bics.w	r3, r3, r9
 80605f6: f47f af48    	bne.w	0x806048a <_dtoa_r+0x3e> @ imm = #-0x170
 80605fa: f242 730f    	movw	r3, #0x270f
 80605fe: f3c9 0913    	ubfx	r9, r9, #0x0, #0x14
 8060602: 9a26         	ldr	r2, [sp, #0x98]
 8060604: 6013         	str	r3, [r2]
 8060606: ea59 0306    	orrs.w	r3, r9, r6
 806060a: d116         	bne	0x806063a <_dtoa_r+0x1ee> @ imm = #0x2c
 806060c: 9b28         	ldr	r3, [sp, #0xa0]
 806060e: f8df 9068    	ldr.w	r9, [pc, #0x68]         @ 0x8060678 <_dtoa_r+0x22c>
 8060612: 2b00         	cmp	r3, #0x0
 8060614: f43f af51    	beq.w	0x80604ba <_dtoa_r+0x6e> @ imm = #-0x15e
 8060618: f109 0308    	add.w	r3, r9, #0x8
 806061c: e74b         	b	0x80604b6 <_dtoa_r+0x6a> @ imm = #-0x16a
 806061e: f3cb 0313    	ubfx	r3, r11, #0x0, #0x14
 8060622: f8cd 8048    	str.w	r8, [sp, #0x48]
 8060626: f2a5 35ff    	subw	r5, r5, #0x3ff
 806062a: f8dd 8060    	ldr.w	r8, [sp, #0x60]
 806062e: f043 517f    	orr	r1, r3, #0x3fc00000
 8060632: 4650         	mov	r0, r10
 8060634: f441 1140    	orr	r1, r1, #0x300000
 8060638: e76c         	b	0x8060514 <_dtoa_r+0xc8> @ imm = #-0x128
 806063a: 9b28         	ldr	r3, [sp, #0xa0]
 806063c: f8df 903c    	ldr.w	r9, [pc, #0x3c]         @ 0x806067c <_dtoa_r+0x230>
 8060640: 2b00         	cmp	r3, #0x0
 8060642: f43f af3a    	beq.w	0x80604ba <_dtoa_r+0x6e> @ imm = #-0x18c
 8060646: f109 0303    	add.w	r3, r9, #0x3
 806064a: e734         	b	0x80604b6 <_dtoa_r+0x6a> @ imm = #-0x198
 806064c: f3af 8000    	nop.w

08060650 <$d>:
 8060650: 61 43 6f 63  	.word	0x636f4361
 8060654: a7 87 d2 3f  	.word	0x3fd287a7
 8060658: b3 c8 60 8b  	.word	0x8b60c8b3
 806065c: 28 8a c6 3f  	.word	0x3fc68a28
 8060660: fb 79 9f 50  	.word	0x509f79fb
 8060664: 13 44 d3 3f  	.word	0x3fd34413
 8060668: 00 00 f0 7f  	.word	0x7ff00000
 806066c: 01 5a 06 08  	.word	0x08065a01
 8060670: 00 00 f8 3f  	.word	0x3ff80000
 8060674: c8 5a 06 08  	.word	0x08065ac8
 8060678: 28 5a 06 08  	.word	0x08065a28
 806067c: 24 5a 06 08  	.word	0x08065a24

08060680 <$t>:
 8060680: eba8 0505    	sub.w	r5, r8, r5
 8060684: 1e6b         	subs	r3, r5, #0x1
 8060686: 9307         	str	r3, [sp, #0x1c]
 8060688: f100 84c9    	bmi.w	0x806101e <_dtoa_r+0xbd2> @ imm = #0x992
 806068c: 900f         	str	r0, [sp, #0x3c]
 806068e: 9009         	str	r0, [sp, #0x24]
 8060690: 9b07         	ldr	r3, [sp, #0x1c]
 8060692: 9a05         	ldr	r2, [sp, #0x14]
 8060694: 4413         	add	r3, r2
 8060696: e9cd 2306    	strd	r2, r3, [sp, #24]
 806069a: 2300         	movs	r3, #0x0
 806069c: 930e         	str	r3, [sp, #0x38]
 806069e: 9b24         	ldr	r3, [sp, #0x90]
 80606a0: 2b09         	cmp	r3, #0x9
 80606a2: d98e         	bls	0x80605c2 <_dtoa_r+0x176> @ imm = #-0xe4
 80606a4: 2300         	movs	r3, #0x0
 80606a6: 2501         	movs	r5, #0x1
 80606a8: e9cd 3324    	strd	r3, r3, [sp, #144]
 80606ac: f04f 33ff    	mov.w	r3, #0xffffffff
 80606b0: 950d         	str	r5, [sp, #0x34]
 80606b2: 9308         	str	r3, [sp, #0x20]
 80606b4: 2100         	movs	r1, #0x0
 80606b6: 9b08         	ldr	r3, [sp, #0x20]
 80606b8: 6461         	str	r1, [r4, #0x44]
 80606ba: 9313         	str	r3, [sp, #0x4c]
 80606bc: 4620         	mov	r0, r4
 80606be: f001 fd61    	bl	0x8062184 <_Balloc>     @ imm = #0x1ac2
 80606c2: 9004         	str	r0, [sp, #0x10]
 80606c4: 2800         	cmp	r0, #0x0
 80606c6: f000 8627    	beq.w	0x8061318 <_dtoa_r+0xecc> @ imm = #0xc4e
 80606ca: 9b08         	ldr	r3, [sp, #0x20]
 80606cc: 2b0e         	cmp	r3, #0xe
 80606ce: bf8c         	ite	hi
 80606d0: 2500         	movhi	r5, #0x0
 80606d2: f005 0501    	andls	r5, r5, #0x1
 80606d6: 9b04         	ldr	r3, [sp, #0x10]
 80606d8: 6423         	str	r3, [r4, #0x40]
 80606da: 2d00         	cmp	r5, #0x0
 80606dc: f000 8109    	beq.w	0x80608f2 <_dtoa_r+0x4a6> @ imm = #0x212
 80606e0: 9906         	ldr	r1, [sp, #0x18]
 80606e2: 2900         	cmp	r1, #0x0
 80606e4: f340 826c    	ble.w	0x8060bc0 <_dtoa_r+0x774> @ imm = #0x4d8
 80606e8: 4bac         	ldr	r3, [pc, #0x2b0]        @ 0x806099c <_dtoa_r+0x550>
 80606ea: f001 020f    	and	r2, r1, #0xf
 80606ee: 05c8         	lsls	r0, r1, #0x17
 80606f0: ea4f 1521    	asr.w	r5, r1, #0x4
 80606f4: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 80606f8: e9d3 6700    	ldrd	r6, r7, [r3]
 80606fc: f140 82e5    	bpl.w	0x8060cca <_dtoa_r+0x87e> @ imm = #0x5ca
 8060700: 4ba7         	ldr	r3, [pc, #0x29c]        @ 0x80609a0 <_dtoa_r+0x554>
 8060702: f005 050f    	and	r5, r5, #0xf
 8060706: f04f 0803    	mov.w	r8, #0x3
 806070a: e9d3 2308    	ldrd	r2, r3, [r3, #32]
 806070e: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 8060712: f004 fdbd    	bl	0x8065290 <__divdf3>    @ imm = #0x4b7a
 8060716: 4682         	mov	r10, r0
 8060718: 468b         	mov	r11, r1
 806071a: b18d         	cbz	r5, 0x8060740 <_dtoa_r+0x2f4> @ imm = #0x22
 806071c: f8df 9280    	ldr.w	r9, [pc, #0x280]        @ 0x80609a0 <_dtoa_r+0x554>
 8060720: 07e9         	lsls	r1, r5, #0x1f
 8060722: d509         	bpl	0x8060738 <_dtoa_r+0x2ec> @ imm = #0x12
 8060724: 4630         	mov	r0, r6
 8060726: 4639         	mov	r1, r7
 8060728: f108 0801    	add.w	r8, r8, #0x1
 806072c: e9d9 2300    	ldrd	r2, r3, [r9]
 8060730: f004 fc84    	bl	0x806503c <__muldf3>    @ imm = #0x4908
 8060734: 4606         	mov	r6, r0
 8060736: 460f         	mov	r7, r1
 8060738: 106d         	asrs	r5, r5, #0x1
 806073a: f109 0908    	add.w	r9, r9, #0x8
 806073e: d1ef         	bne	0x8060720 <_dtoa_r+0x2d4> @ imm = #-0x22
 8060740: 4632         	mov	r2, r6
 8060742: 463b         	mov	r3, r7
 8060744: 4650         	mov	r0, r10
 8060746: 4659         	mov	r1, r11
 8060748: f004 fda2    	bl	0x8065290 <__divdf3>    @ imm = #0x4b44
 806074c: e9cd 0110    	strd	r0, r1, [sp, #64]
 8060750: 9b0f         	ldr	r3, [sp, #0x3c]
 8060752: b153         	cbz	r3, 0x806076a <_dtoa_r+0x31e> @ imm = #0x14
 8060754: 2200         	movs	r2, #0x0
 8060756: 4b93         	ldr	r3, [pc, #0x24c]        @ 0x80609a4 <_dtoa_r+0x558>
 8060758: e9dd 5610    	ldrd	r5, r6, [sp, #64]
 806075c: 4628         	mov	r0, r5
 806075e: 4631         	mov	r1, r6
 8060760: f004 fede    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x4dbc
 8060764: 2800         	cmp	r0, #0x0
 8060766: f040 8432    	bne.w	0x8060fce <_dtoa_r+0xb82> @ imm = #0x864
 806076a: 4640         	mov	r0, r8
 806076c: f004 fbfc    	bl	0x8064f68 <__floatsidf> @ imm = #0x47f8
 8060770: e9dd 2310    	ldrd	r2, r3, [sp, #64]
 8060774: f004 fc62    	bl	0x806503c <__muldf3>    @ imm = #0x48c4
 8060778: 4b8b         	ldr	r3, [pc, #0x22c]        @ 0x80609a8 <_dtoa_r+0x55c>
 806077a: 2200         	movs	r2, #0x0
 806077c: f004 faa8    	bl	0x8064cd0 <__aeabi_dadd> @ imm = #0x4550
 8060780: 9b08         	ldr	r3, [sp, #0x20]
 8060782: 4680         	mov	r8, r0
 8060784: f1a1 7950    	sub.w	r9, r1, #0x3400000
 8060788: 2b00         	cmp	r3, #0x0
 806078a: f000 8098    	beq.w	0x80608be <_dtoa_r+0x472> @ imm = #0x130
 806078e: 9b06         	ldr	r3, [sp, #0x18]
 8060790: 9315         	str	r3, [sp, #0x54]
 8060792: 9b08         	ldr	r3, [sp, #0x20]
 8060794: 9314         	str	r3, [sp, #0x50]
 8060796: 9b0d         	ldr	r3, [sp, #0x34]
 8060798: 2b00         	cmp	r3, #0x0
 806079a: f000 82c7    	beq.w	0x8060d2c <_dtoa_r+0x8e0> @ imm = #0x58e
 806079e: 9a14         	ldr	r2, [sp, #0x50]
 80607a0: 2000         	movs	r0, #0x0
 80607a2: 4b7e         	ldr	r3, [pc, #0x1f8]        @ 0x806099c <_dtoa_r+0x550>
 80607a4: 4981         	ldr	r1, [pc, #0x204]        @ 0x80609ac <_dtoa_r+0x560>
 80607a6: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 80607aa: 9d04         	ldr	r5, [sp, #0x10]
 80607ac: e953 2302    	ldrd	r2, r3, [r3, #-8]
 80607b0: f004 fd6e    	bl	0x8065290 <__divdf3>    @ imm = #0x4adc
 80607b4: 4642         	mov	r2, r8
 80607b6: 464b         	mov	r3, r9
 80607b8: f004 fa88    	bl	0x8064ccc <__subdf3>    @ imm = #0x4510
 80607bc: 4682         	mov	r10, r0
 80607be: 468b         	mov	r11, r1
 80607c0: e9dd 8910    	ldrd	r8, r9, [sp, #64]
 80607c4: 4649         	mov	r1, r9
 80607c6: 4640         	mov	r0, r8
 80607c8: f004 fee8    	bl	0x806559c <__fixdfsi>   @ imm = #0x4dd0
 80607cc: 4607         	mov	r7, r0
 80607ce: f004 fbcb    	bl	0x8064f68 <__floatsidf> @ imm = #0x4796
 80607d2: 4602         	mov	r2, r0
 80607d4: 3730         	adds	r7, #0x30
 80607d6: 460b         	mov	r3, r1
 80607d8: 4640         	mov	r0, r8
 80607da: 4649         	mov	r1, r9
 80607dc: f004 fa76    	bl	0x8064ccc <__subdf3>    @ imm = #0x44ec
 80607e0: f805 7b01    	strb	r7, [r5], #1
 80607e4: 4606         	mov	r6, r0
 80607e6: 460f         	mov	r7, r1
 80607e8: 4650         	mov	r0, r10
 80607ea: 4659         	mov	r1, r11
 80607ec: 4632         	mov	r2, r6
 80607ee: 463b         	mov	r3, r7
 80607f0: f004 feb4    	bl	0x806555c <__aeabi_dcmpgt> @ imm = #0x4d68
 80607f4: 2800         	cmp	r0, #0x0
 80607f6: f040 84e4    	bne.w	0x80611c2 <_dtoa_r+0xd76> @ imm = #0x9c8
 80607fa: f04f 0800    	mov.w	r8, #0x0
 80607fe: f8dd 9050    	ldr.w	r9, [sp, #0x50]
 8060802: 9410         	str	r4, [sp, #0x40]
 8060804: e02b         	b	0x806085e <_dtoa_r+0x412> @ imm = #0x56
 8060806: f108 0801    	add.w	r8, r8, #0x1
 806080a: 45c8         	cmp	r8, r9
 806080c: f280 84fa    	bge.w	0x8061204 <_dtoa_r+0xdb8> @ imm = #0x9f4
 8060810: 4650         	mov	r0, r10
 8060812: 4659         	mov	r1, r11
 8060814: 2200         	movs	r2, #0x0
 8060816: 4b66         	ldr	r3, [pc, #0x198]        @ 0x80609b0 <_dtoa_r+0x564>
 8060818: f004 fc10    	bl	0x806503c <__muldf3>    @ imm = #0x4820
 806081c: 2200         	movs	r2, #0x0
 806081e: 4b64         	ldr	r3, [pc, #0x190]        @ 0x80609b0 <_dtoa_r+0x564>
 8060820: 4682         	mov	r10, r0
 8060822: 468b         	mov	r11, r1
 8060824: 4630         	mov	r0, r6
 8060826: 4639         	mov	r1, r7
 8060828: f004 fc08    	bl	0x806503c <__muldf3>    @ imm = #0x4810
 806082c: 460f         	mov	r7, r1
 806082e: 4606         	mov	r6, r0
 8060830: f004 feb4    	bl	0x806559c <__fixdfsi>   @ imm = #0x4d68
 8060834: 4604         	mov	r4, r0
 8060836: f004 fb97    	bl	0x8064f68 <__floatsidf> @ imm = #0x472e
 806083a: 4602         	mov	r2, r0
 806083c: 460b         	mov	r3, r1
 806083e: 3430         	adds	r4, #0x30
 8060840: 4630         	mov	r0, r6
 8060842: 4639         	mov	r1, r7
 8060844: f004 fa42    	bl	0x8064ccc <__subdf3>    @ imm = #0x4484
 8060848: 4652         	mov	r2, r10
 806084a: 465b         	mov	r3, r11
 806084c: f805 4b01    	strb	r4, [r5], #1
 8060850: 4606         	mov	r6, r0
 8060852: 460f         	mov	r7, r1
 8060854: f004 fe64    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x4cc8
 8060858: 2800         	cmp	r0, #0x0
 806085a: f040 84b1    	bne.w	0x80611c0 <_dtoa_r+0xd74> @ imm = #0x962
 806085e: 4632         	mov	r2, r6
 8060860: 463b         	mov	r3, r7
 8060862: 2000         	movs	r0, #0x0
 8060864: 494f         	ldr	r1, [pc, #0x13c]        @ 0x80609a4 <_dtoa_r+0x558>
 8060866: f004 fa31    	bl	0x8064ccc <__subdf3>    @ imm = #0x4462
 806086a: 4652         	mov	r2, r10
 806086c: 465b         	mov	r3, r11
 806086e: f004 fe57    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x4cae
 8060872: 2800         	cmp	r0, #0x0
 8060874: d0c7         	beq	0x8060806 <_dtoa_r+0x3ba> @ imm = #-0x72
 8060876: 9904         	ldr	r1, [sp, #0x10]
 8060878: 9c10         	ldr	r4, [sp, #0x40]
 806087a: e002         	b	0x8060882 <_dtoa_r+0x436> @ imm = #0x4
 806087c: 42a9         	cmp	r1, r5
 806087e: f000 8475    	beq.w	0x806116c <_dtoa_r+0xd20> @ imm = #0x8ea
 8060882: 462a         	mov	r2, r5
 8060884: f815 3d01    	ldrb	r3, [r5, #-1]!
 8060888: 2b39         	cmp	r3, #0x39
 806088a: d0f7         	beq	0x806087c <_dtoa_r+0x430> @ imm = #-0x12
 806088c: 3301         	adds	r3, #0x1
 806088e: 9104         	str	r1, [sp, #0x10]
 8060890: b2db         	uxtb	r3, r3
 8060892: 702b         	strb	r3, [r5]
 8060894: 9b15         	ldr	r3, [sp, #0x54]
 8060896: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 806089a: 3301         	adds	r3, #0x1
 806089c: 9204         	str	r2, [sp, #0x10]
 806089e: 9306         	str	r3, [sp, #0x18]
 80608a0: e100         	b	0x8060aa4 <_dtoa_r+0x658> @ imm = #0x200
 80608a2: 4640         	mov	r0, r8
 80608a4: f004 fb60    	bl	0x8064f68 <__floatsidf> @ imm = #0x46c0
 80608a8: e9dd 2310    	ldrd	r2, r3, [sp, #64]
 80608ac: f004 fbc6    	bl	0x806503c <__muldf3>    @ imm = #0x478c
 80608b0: 2200         	movs	r2, #0x0
 80608b2: 4b3d         	ldr	r3, [pc, #0xf4]         @ 0x80609a8 <_dtoa_r+0x55c>
 80608b4: f004 fa0c    	bl	0x8064cd0 <__aeabi_dadd> @ imm = #0x4418
 80608b8: 4680         	mov	r8, r0
 80608ba: f1a1 7950    	sub.w	r9, r1, #0x3400000
 80608be: 2200         	movs	r2, #0x0
 80608c0: 4b3c         	ldr	r3, [pc, #0xf0]         @ 0x80609b4 <_dtoa_r+0x568>
 80608c2: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 80608c6: f004 fa01    	bl	0x8064ccc <__subdf3>    @ imm = #0x4402
 80608ca: 4642         	mov	r2, r8
 80608cc: 464b         	mov	r3, r9
 80608ce: 4682         	mov	r10, r0
 80608d0: 468b         	mov	r11, r1
 80608d2: f004 fe43    	bl	0x806555c <__aeabi_dcmpgt> @ imm = #0x4c86
 80608d6: 4606         	mov	r6, r0
 80608d8: 2800         	cmp	r0, #0x0
 80608da: f040 836a    	bne.w	0x8060fb2 <_dtoa_r+0xb66> @ imm = #0x6d4
 80608de: 4642         	mov	r2, r8
 80608e0: f109 4300    	add.w	r3, r9, #0x80000000
 80608e4: 4650         	mov	r0, r10
 80608e6: 4659         	mov	r1, r11
 80608e8: f004 fe1a    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x4c34
 80608ec: 2800         	cmp	r0, #0x0
 80608ee: f040 81b4    	bne.w	0x8060c5a <_dtoa_r+0x80e> @ imm = #0x368
 80608f2: 9b19         	ldr	r3, [sp, #0x64]
 80608f4: 2b00         	cmp	r3, #0x0
 80608f6: db03         	blt	0x8060900 <_dtoa_r+0x4b4> @ imm = #0x6
 80608f8: 9a06         	ldr	r2, [sp, #0x18]
 80608fa: 2a0e         	cmp	r2, #0xe
 80608fc: f340 818d    	ble.w	0x8060c1a <_dtoa_r+0x7ce> @ imm = #0x31a
 8060900: 9a0d         	ldr	r2, [sp, #0x34]
 8060902: 2a00         	cmp	r2, #0x0
 8060904: d05a         	beq	0x80609bc <_dtoa_r+0x570> @ imm = #0xb4
 8060906: 9a24         	ldr	r2, [sp, #0x90]
 8060908: 2a01         	cmp	r2, #0x1
 806090a: f340 838a    	ble.w	0x8061022 <_dtoa_r+0xbd6> @ imm = #0x714
 806090e: 9b08         	ldr	r3, [sp, #0x20]
 8060910: 1e5a         	subs	r2, r3, #0x1
 8060912: 9b0e         	ldr	r3, [sp, #0x38]
 8060914: 4293         	cmp	r3, r2
 8060916: f280 8328    	bge.w	0x8060f6a <_dtoa_r+0xb1e> @ imm = #0x650
 806091a: 9b0e         	ldr	r3, [sp, #0x38]
 806091c: 2600         	movs	r6, #0x0
 806091e: 9905         	ldr	r1, [sp, #0x14]
 8060920: 1ad3         	subs	r3, r2, r3
 8060922: 920e         	str	r2, [sp, #0x38]
 8060924: 4419         	add	r1, r3
 8060926: 9105         	str	r1, [sp, #0x14]
 8060928: 9b08         	ldr	r3, [sp, #0x20]
 806092a: 2b00         	cmp	r3, #0x0
 806092c: f2c0 8419    	blt.w	0x8061162 <_dtoa_r+0xd16> @ imm = #0x832
 8060930: 9a07         	ldr	r2, [sp, #0x1c]
 8060932: 441a         	add	r2, r3
 8060934: 9207         	str	r2, [sp, #0x1c]
 8060936: 9a09         	ldr	r2, [sp, #0x24]
 8060938: 4617         	mov	r7, r2
 806093a: 441a         	add	r2, r3
 806093c: 9209         	str	r2, [sp, #0x24]
 806093e: 2101         	movs	r1, #0x1
 8060940: 4620         	mov	r0, r4
 8060942: f001 fd49    	bl	0x80623d8 <__i2b>       @ imm = #0x1a92
 8060946: 4605         	mov	r5, r0
 8060948: e03b         	b	0x80609c2 <_dtoa_r+0x576> @ imm = #0x76
 806094a: 2301         	movs	r3, #0x1
 806094c: eba8 0505    	sub.w	r5, r8, r5
 8060950: 930f         	str	r3, [sp, #0x3c]
 8060952: 1e6b         	subs	r3, r5, #0x1
 8060954: 9307         	str	r3, [sp, #0x1c]
 8060956: f57f ae23    	bpl.w	0x80605a0 <_dtoa_r+0x154> @ imm = #-0x3ba
 806095a: f1c5 0301    	rsb.w	r3, r5, #0x1
 806095e: 9309         	str	r3, [sp, #0x24]
 8060960: 2300         	movs	r3, #0x0
 8060962: 9307         	str	r3, [sp, #0x1c]
 8060964: e61e         	b	0x80605a4 <_dtoa_r+0x158> @ imm = #-0x3c4
 8060966: 4648         	mov	r0, r9
 8060968: f004 fafe    	bl	0x8064f68 <__floatsidf> @ imm = #0x45fc
 806096c: 4632         	mov	r2, r6
 806096e: 463b         	mov	r3, r7
 8060970: f004 fdcc    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x4b98
 8060974: 2800         	cmp	r0, #0x0
 8060976: f47f adfa    	bne.w	0x806056e <_dtoa_r+0x122> @ imm = #-0x40c
 806097a: f109 33ff    	add.w	r3, r9, #0xffffffff
 806097e: 9305         	str	r3, [sp, #0x14]
 8060980: e5f5         	b	0x806056e <_dtoa_r+0x122> @ imm = #-0x416
 8060982: f8df 9034    	ldr.w	r9, [pc, #0x34]         @ 0x80609b8 <_dtoa_r+0x56c>
 8060986: 4648         	mov	r0, r9
 8060988: b01b         	add	sp, #0x6c
 806098a: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806098e: f1c0 0020    	rsb.w	r0, r0, #0x20
 8060992: fa06 f000    	lsl.w	r0, r6, r0
 8060996: e5b6         	b	0x8060506 <_dtoa_r+0xba> @ imm = #-0x494
 8060998: 2501         	movs	r5, #0x1
 806099a: e618         	b	0x80605ce <_dtoa_r+0x182> @ imm = #-0x3d0

0806099c <$d>:
 806099c: c8 5a 06 08  	.word	0x08065ac8
 80609a0: b8 5b 06 08  	.word	0x08065bb8
 80609a4: 00 00 f0 3f  	.word	0x3ff00000
 80609a8: 00 00 1c 40  	.word	0x401c0000
 80609ac: 00 00 e0 3f  	.word	0x3fe00000
 80609b0: 00 00 24 40  	.word	0x40240000
 80609b4: 00 00 14 40  	.word	0x40140000
 80609b8: 00 5a 06 08  	.word	0x08065a00

080609bc <$t>:
 80609bc: 9e0e         	ldr	r6, [sp, #0x38]
 80609be: 9f09         	ldr	r7, [sp, #0x24]
 80609c0: 9d0d         	ldr	r5, [sp, #0x34]
 80609c2: 2f00         	cmp	r7, #0x0
 80609c4: dd0c         	ble	0x80609e0 <_dtoa_r+0x594> @ imm = #0x18
 80609c6: 9907         	ldr	r1, [sp, #0x1c]
 80609c8: 2900         	cmp	r1, #0x0
 80609ca: 460b         	mov	r3, r1
 80609cc: dd08         	ble	0x80609e0 <_dtoa_r+0x594> @ imm = #0x10
 80609ce: 42b9         	cmp	r1, r7
 80609d0: 9a09         	ldr	r2, [sp, #0x24]
 80609d2: bfa8         	it	ge
 80609d4: 463b         	movge	r3, r7
 80609d6: 1ad2         	subs	r2, r2, r3
 80609d8: 1aff         	subs	r7, r7, r3
 80609da: 1acb         	subs	r3, r1, r3
 80609dc: 9209         	str	r2, [sp, #0x24]
 80609de: 9307         	str	r3, [sp, #0x1c]
 80609e0: 9b0e         	ldr	r3, [sp, #0x38]
 80609e2: b153         	cbz	r3, 0x80609fa <_dtoa_r+0x5ae> @ imm = #0x14
 80609e4: 9b0d         	ldr	r3, [sp, #0x34]
 80609e6: 2b00         	cmp	r3, #0x0
 80609e8: f000 832a    	beq.w	0x8061040 <_dtoa_r+0xbf4> @ imm = #0x654
 80609ec: 2e00         	cmp	r6, #0x0
 80609ee: f300 82a9    	bgt.w	0x8060f44 <_dtoa_r+0xaf8> @ imm = #0x552
 80609f2: 9b0e         	ldr	r3, [sp, #0x38]
 80609f4: 1b9a         	subs	r2, r3, r6
 80609f6: f040 82ba    	bne.w	0x8060f6e <_dtoa_r+0xb22> @ imm = #0x574
 80609fa: 2101         	movs	r1, #0x1
 80609fc: 4620         	mov	r0, r4
 80609fe: f001 fceb    	bl	0x80623d8 <__i2b>       @ imm = #0x19d6
 8060a02: 9a05         	ldr	r2, [sp, #0x14]
 8060a04: 4606         	mov	r6, r0
 8060a06: 2a00         	cmp	r2, #0x0
 8060a08: f300 8129    	bgt.w	0x8060c5e <_dtoa_r+0x812> @ imm = #0x252
 8060a0c: 9b24         	ldr	r3, [sp, #0x90]
 8060a0e: 2b01         	cmp	r3, #0x1
 8060a10: f340 82d2    	ble.w	0x8060fb8 <_dtoa_r+0xb6c> @ imm = #0x5a4
 8060a14: f04f 0900    	mov.w	r9, #0x0
 8060a18: 9b05         	ldr	r3, [sp, #0x14]
 8060a1a: 2b00         	cmp	r3, #0x0
 8060a1c: f040 812a    	bne.w	0x8060c74 <_dtoa_r+0x828> @ imm = #0x254
 8060a20: 2301         	movs	r3, #0x1
 8060a22: 9907         	ldr	r1, [sp, #0x1c]
 8060a24: 440b         	add	r3, r1
 8060a26: f013 031f    	ands	r3, r3, #0x1f
 8060a2a: d04e         	beq	0x8060aca <_dtoa_r+0x67e> @ imm = #0x9c
 8060a2c: f1c3 0220    	rsb.w	r2, r3, #0x20
 8060a30: 2a04         	cmp	r2, #0x4
 8060a32: f340 8464    	ble.w	0x80612fe <_dtoa_r+0xeb2> @ imm = #0x8c8
 8060a36: f1c3 031c    	rsb.w	r3, r3, #0x1c
 8060a3a: 9a09         	ldr	r2, [sp, #0x24]
 8060a3c: 4419         	add	r1, r3
 8060a3e: 441a         	add	r2, r3
 8060a40: 441f         	add	r7, r3
 8060a42: 9209         	str	r2, [sp, #0x24]
 8060a44: 9107         	str	r1, [sp, #0x1c]
 8060a46: 9b09         	ldr	r3, [sp, #0x24]
 8060a48: 2b00         	cmp	r3, #0x0
 8060a4a: dd05         	ble	0x8060a58 <_dtoa_r+0x60c> @ imm = #0xa
 8060a4c: 990c         	ldr	r1, [sp, #0x30]
 8060a4e: 461a         	mov	r2, r3
 8060a50: 4620         	mov	r0, r4
 8060a52: f001 fdff    	bl	0x8062654 <__lshift>    @ imm = #0x1bfe
 8060a56: 900c         	str	r0, [sp, #0x30]
 8060a58: 9b07         	ldr	r3, [sp, #0x1c]
 8060a5a: 2b00         	cmp	r3, #0x0
 8060a5c: dd05         	ble	0x8060a6a <_dtoa_r+0x61e> @ imm = #0xa
 8060a5e: 4631         	mov	r1, r6
 8060a60: 461a         	mov	r2, r3
 8060a62: 4620         	mov	r0, r4
 8060a64: f001 fdf6    	bl	0x8062654 <__lshift>    @ imm = #0x1bec
 8060a68: 4606         	mov	r6, r0
 8060a6a: 9b0f         	ldr	r3, [sp, #0x3c]
 8060a6c: 2b00         	cmp	r3, #0x0
 8060a6e: f040 810a    	bne.w	0x8060c86 <_dtoa_r+0x83a> @ imm = #0x214
 8060a72: 9b08         	ldr	r3, [sp, #0x20]
 8060a74: 2b00         	cmp	r3, #0x0
 8060a76: dc31         	bgt	0x8060adc <_dtoa_r+0x690> @ imm = #0x62
 8060a78: 9b24         	ldr	r3, [sp, #0x90]
 8060a7a: 2b02         	cmp	r3, #0x2
 8060a7c: dd2e         	ble	0x8060adc <_dtoa_r+0x690> @ imm = #0x5c
 8060a7e: 9b08         	ldr	r3, [sp, #0x20]
 8060a80: 2b00         	cmp	r3, #0x0
 8060a82: f000 81c3    	beq.w	0x8060e0c <_dtoa_r+0x9c0> @ imm = #0x386
 8060a86: 9b25         	ldr	r3, [sp, #0x94]
 8060a88: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 8060a8c: 43df         	mvns	r7, r3
 8060a8e: 4631         	mov	r1, r6
 8060a90: 4620         	mov	r0, r4
 8060a92: f001 fb9d    	bl	0x80621d0 <_Bfree>      @ imm = #0x173a
 8060a96: 1c7b         	adds	r3, r7, #0x1
 8060a98: 9306         	str	r3, [sp, #0x18]
 8060a9a: b11d         	cbz	r5, 0x8060aa4 <_dtoa_r+0x658> @ imm = #0x6
 8060a9c: 4629         	mov	r1, r5
 8060a9e: 4620         	mov	r0, r4
 8060aa0: f001 fb96    	bl	0x80621d0 <_Bfree>      @ imm = #0x172c
 8060aa4: 990c         	ldr	r1, [sp, #0x30]
 8060aa6: 4620         	mov	r0, r4
 8060aa8: f001 fb92    	bl	0x80621d0 <_Bfree>      @ imm = #0x1724
 8060aac: 2300         	movs	r3, #0x0
 8060aae: 9a04         	ldr	r2, [sp, #0x10]
 8060ab0: 9906         	ldr	r1, [sp, #0x18]
 8060ab2: 7013         	strb	r3, [r2]
 8060ab4: 9b26         	ldr	r3, [sp, #0x98]
 8060ab6: 6019         	str	r1, [r3]
 8060ab8: 9b28         	ldr	r3, [sp, #0xa0]
 8060aba: 2b00         	cmp	r3, #0x0
 8060abc: f43f acfd    	beq.w	0x80604ba <_dtoa_r+0x6e> @ imm = #-0x606
 8060ac0: 4648         	mov	r0, r9
 8060ac2: 601a         	str	r2, [r3]
 8060ac4: b01b         	add	sp, #0x6c
 8060ac6: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8060aca: 231c         	movs	r3, #0x1c
 8060acc: 9a09         	ldr	r2, [sp, #0x24]
 8060ace: 441f         	add	r7, r3
 8060ad0: 441a         	add	r2, r3
 8060ad2: 9209         	str	r2, [sp, #0x24]
 8060ad4: 9a07         	ldr	r2, [sp, #0x1c]
 8060ad6: 441a         	add	r2, r3
 8060ad8: 9207         	str	r2, [sp, #0x1c]
 8060ada: e7b4         	b	0x8060a46 <_dtoa_r+0x5fa> @ imm = #-0x98
 8060adc: 9b0d         	ldr	r3, [sp, #0x34]
 8060ade: 2b00         	cmp	r3, #0x0
 8060ae0: f000 81aa    	beq.w	0x8060e38 <_dtoa_r+0x9ec> @ imm = #0x354
 8060ae4: 2f00         	cmp	r7, #0x0
 8060ae6: f300 8248    	bgt.w	0x8060f7a <_dtoa_r+0xb2e> @ imm = #0x490
 8060aea: f1b9 0f00    	cmp.w	r9, #0x0
 8060aee: f040 8372    	bne.w	0x80611d6 <_dtoa_r+0xd8a> @ imm = #0x6e4
 8060af2: 46aa         	mov	r10, r5
 8060af4: 9b02         	ldr	r3, [sp, #0x8]
 8060af6: f8dd 8010    	ldr.w	r8, [sp, #0x10]
 8060afa: f003 0301    	and	r3, r3, #0x1
 8060afe: 9a08         	ldr	r2, [sp, #0x20]
 8060b00: f8dd b030    	ldr.w	r11, [sp, #0x30]
 8060b04: 9302         	str	r3, [sp, #0x8]
 8060b06: f108 33ff    	add.w	r3, r8, #0xffffffff
 8060b0a: 441a         	add	r2, r3
 8060b0c: 9208         	str	r2, [sp, #0x20]
 8060b0e: 4631         	mov	r1, r6
 8060b10: 4658         	mov	r0, r11
 8060b12: f7ff fc01    	bl	0x8060318 <quorem>      @ imm = #-0x7fe
 8060b16: 4629         	mov	r1, r5
 8060b18: 4681         	mov	r9, r0
 8060b1a: 4658         	mov	r0, r11
 8060b1c: f001 fe0e    	bl	0x806273c <__mcmp>      @ imm = #0x1c1c
 8060b20: 4652         	mov	r2, r10
 8060b22: 4631         	mov	r1, r6
 8060b24: 4607         	mov	r7, r0
 8060b26: 4620         	mov	r0, r4
 8060b28: f001 fe28    	bl	0x806277c <__mdiff>     @ imm = #0x1c50
 8060b2c: 68c2         	ldr	r2, [r0, #0xc]
 8060b2e: 4601         	mov	r1, r0
 8060b30: f109 0330    	add.w	r3, r9, #0x30
 8060b34: 2a00         	cmp	r2, #0x0
 8060b36: f040 822a    	bne.w	0x8060f8e <_dtoa_r+0xb42> @ imm = #0x454
 8060b3a: 9005         	str	r0, [sp, #0x14]
 8060b3c: 4658         	mov	r0, r11
 8060b3e: 9307         	str	r3, [sp, #0x1c]
 8060b40: f001 fdfc    	bl	0x806273c <__mcmp>      @ imm = #0x1bf8
 8060b44: 9905         	ldr	r1, [sp, #0x14]
 8060b46: 9005         	str	r0, [sp, #0x14]
 8060b48: 4620         	mov	r0, r4
 8060b4a: f001 fb41    	bl	0x80621d0 <_Bfree>      @ imm = #0x1682
 8060b4e: 9b24         	ldr	r3, [sp, #0x90]
 8060b50: 9a05         	ldr	r2, [sp, #0x14]
 8060b52: ea42 0103    	orr.w	r1, r2, r3
 8060b56: 9b02         	ldr	r3, [sp, #0x8]
 8060b58: 430b         	orrs	r3, r1
 8060b5a: 9b07         	ldr	r3, [sp, #0x1c]
 8060b5c: f000 839b    	beq.w	0x8061296 <_dtoa_r+0xe4a> @ imm = #0x736
 8060b60: 2f00         	cmp	r7, #0x0
 8060b62: f2c0 830e    	blt.w	0x8061182 <_dtoa_r+0xd36> @ imm = #0x61c
 8060b66: 9924         	ldr	r1, [sp, #0x90]
 8060b68: 430f         	orrs	r7, r1
 8060b6a: 9902         	ldr	r1, [sp, #0x8]
 8060b6c: 4339         	orrs	r1, r7
 8060b6e: f000 8308    	beq.w	0x8061182 <_dtoa_r+0xd36> @ imm = #0x610
 8060b72: 2a00         	cmp	r2, #0x0
 8060b74: f300 8370    	bgt.w	0x8061258 <_dtoa_r+0xe0c> @ imm = #0x6e0
 8060b78: 9908         	ldr	r1, [sp, #0x20]
 8060b7a: f108 0701    	add.w	r7, r8, #0x1
 8060b7e: f888 3000    	strb.w	r3, [r8]
 8060b82: 4541         	cmp	r1, r8
 8060b84: f000 8370    	beq.w	0x8061268 <_dtoa_r+0xe1c> @ imm = #0x6e0
 8060b88: 4659         	mov	r1, r11
 8060b8a: 2300         	movs	r3, #0x0
 8060b8c: 220a         	movs	r2, #0xa
 8060b8e: 4620         	mov	r0, r4
 8060b90: f001 fb28    	bl	0x80621e4 <__multadd>   @ imm = #0x1650
 8060b94: 4555         	cmp	r5, r10
 8060b96: 4683         	mov	r11, r0
 8060b98: 4629         	mov	r1, r5
 8060b9a: f04f 0300    	mov.w	r3, #0x0
 8060b9e: f04f 020a    	mov.w	r2, #0xa
 8060ba2: 4620         	mov	r0, r4
 8060ba4: f000 81fa    	beq.w	0x8060f9c <_dtoa_r+0xb50> @ imm = #0x3f4
 8060ba8: f001 fb1c    	bl	0x80621e4 <__multadd>   @ imm = #0x1638
 8060bac: 4651         	mov	r1, r10
 8060bae: 4605         	mov	r5, r0
 8060bb0: 2300         	movs	r3, #0x0
 8060bb2: 220a         	movs	r2, #0xa
 8060bb4: 4620         	mov	r0, r4
 8060bb6: f001 fb15    	bl	0x80621e4 <__multadd>   @ imm = #0x162a
 8060bba: 46b8         	mov	r8, r7
 8060bbc: 4682         	mov	r10, r0
 8060bbe: e7a6         	b	0x8060b0e <_dtoa_r+0x6c2> @ imm = #-0xb4
 8060bc0: f000 81a0    	beq.w	0x8060f04 <_dtoa_r+0xab8> @ imm = #0x340
 8060bc4: 9b06         	ldr	r3, [sp, #0x18]
 8060bc6: 425e         	rsbs	r6, r3, #0
 8060bc8: 4bb8         	ldr	r3, [pc, #0x2e0]        @ 0x8060eac <_dtoa_r+0xa60>
 8060bca: f006 020f    	and	r2, r6, #0xf
 8060bce: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 8060bd2: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 8060bd6: e9d3 2300    	ldrd	r2, r3, [r3]
 8060bda: f004 fa2f    	bl	0x806503c <__muldf3>    @ imm = #0x445e
 8060bde: 4682         	mov	r10, r0
 8060be0: 1136         	asrs	r6, r6, #0x4
 8060be2: 468b         	mov	r11, r1
 8060be4: f000 8378    	beq.w	0x80612d8 <_dtoa_r+0xe8c> @ imm = #0x6f0
 8060be8: 4fb1         	ldr	r7, [pc, #0x2c4]        @ 0x8060eb0 <_dtoa_r+0xa64>
 8060bea: 2300         	movs	r3, #0x0
 8060bec: f04f 0802    	mov.w	r8, #0x2
 8060bf0: 07f2         	lsls	r2, r6, #0x1f
 8060bf2: d506         	bpl	0x8060c02 <_dtoa_r+0x7b6> @ imm = #0xc
 8060bf4: f108 0801    	add.w	r8, r8, #0x1
 8060bf8: e9d7 2300    	ldrd	r2, r3, [r7]
 8060bfc: f004 fa1e    	bl	0x806503c <__muldf3>    @ imm = #0x443c
 8060c00: 462b         	mov	r3, r5
 8060c02: 1076         	asrs	r6, r6, #0x1
 8060c04: f107 0708    	add.w	r7, r7, #0x8
 8060c08: d1f2         	bne	0x8060bf0 <_dtoa_r+0x7a4> @ imm = #-0x1c
 8060c0a: e9cd 0110    	strd	r0, r1, [sp, #64]
 8060c0e: 2b00         	cmp	r3, #0x0
 8060c10: f47f ad9e    	bne.w	0x8060750 <_dtoa_r+0x304> @ imm = #-0x4c4
 8060c14: e9cd ab10    	strd	r10, r11, [sp, #64]
 8060c18: e59a         	b	0x8060750 <_dtoa_r+0x304> @ imm = #-0x4cc
 8060c1a: 4ba4         	ldr	r3, [pc, #0x290]        @ 0x8060eac <_dtoa_r+0xa60>
 8060c1c: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 8060c20: e9d3 ab00    	ldrd	r10, r11, [r3]
 8060c24: 9b25         	ldr	r3, [sp, #0x94]
 8060c26: 2b00         	cmp	r3, #0x0
 8060c28: f280 822d    	bge.w	0x8061086 <_dtoa_r+0xc3a> @ imm = #0x45a
 8060c2c: 9e08         	ldr	r6, [sp, #0x20]
 8060c2e: 2e00         	cmp	r6, #0x0
 8060c30: f300 8229    	bgt.w	0x8061086 <_dtoa_r+0xc3a> @ imm = #0x452
 8060c34: 2e00         	cmp	r6, #0x0
 8060c36: f040 81a7    	bne.w	0x8060f88 <_dtoa_r+0xb3c> @ imm = #0x34e
 8060c3a: 2200         	movs	r2, #0x0
 8060c3c: 4b9d         	ldr	r3, [pc, #0x274]        @ 0x8060eb4 <_dtoa_r+0xa68>
 8060c3e: 4650         	mov	r0, r10
 8060c40: 4659         	mov	r1, r11
 8060c42: f004 f9fb    	bl	0x806503c <__muldf3>    @ imm = #0x43f6
 8060c46: 4602         	mov	r2, r0
 8060c48: 460b         	mov	r3, r1
 8060c4a: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 8060c4e: f004 fc71    	bl	0x8065534 <__aeabi_dcmple> @ imm = #0x48e2
 8060c52: 2800         	cmp	r0, #0x0
 8060c54: f000 81ae    	beq.w	0x8060fb4 <_dtoa_r+0xb68> @ imm = #0x35c
 8060c58: 9e08         	ldr	r6, [sp, #0x20]
 8060c5a: 4635         	mov	r5, r6
 8060c5c: e713         	b	0x8060a86 <_dtoa_r+0x63a> @ imm = #-0x1da
 8060c5e: 4601         	mov	r1, r0
 8060c60: 4620         	mov	r0, r4
 8060c62: f001 fc97    	bl	0x8062594 <__pow5mult>  @ imm = #0x192e
 8060c66: 9b24         	ldr	r3, [sp, #0x90]
 8060c68: 4606         	mov	r6, r0
 8060c6a: 2b01         	cmp	r3, #0x1
 8060c6c: f340 8151    	ble.w	0x8060f12 <_dtoa_r+0xac6> @ imm = #0x2a2
 8060c70: f04f 0900    	mov.w	r9, #0x0
 8060c74: 6933         	ldr	r3, [r6, #0x10]
 8060c76: eb06 0383    	add.w	r3, r6, r3, lsl #2
 8060c7a: 6918         	ldr	r0, [r3, #0x10]
 8060c7c: f001 fb5c    	bl	0x8062338 <__hi0bits>   @ imm = #0x16b8
 8060c80: f1c0 0320    	rsb.w	r3, r0, #0x20
 8060c84: e6cd         	b	0x8060a22 <_dtoa_r+0x5d6> @ imm = #-0x266
 8060c86: 4631         	mov	r1, r6
 8060c88: 980c         	ldr	r0, [sp, #0x30]
 8060c8a: f001 fd57    	bl	0x806273c <__mcmp>      @ imm = #0x1aae
 8060c8e: 2800         	cmp	r0, #0x0
 8060c90: f6bf aeef    	bge.w	0x8060a72 <_dtoa_r+0x626> @ imm = #-0x222
 8060c94: 2300         	movs	r3, #0x0
 8060c96: 990c         	ldr	r1, [sp, #0x30]
 8060c98: 220a         	movs	r2, #0xa
 8060c9a: 4620         	mov	r0, r4
 8060c9c: f001 faa2    	bl	0x80621e4 <__multadd>   @ imm = #0x1544
 8060ca0: 9b06         	ldr	r3, [sp, #0x18]
 8060ca2: 900c         	str	r0, [sp, #0x30]
 8060ca4: f103 38ff    	add.w	r8, r3, #0xffffffff
 8060ca8: 9b0d         	ldr	r3, [sp, #0x34]
 8060caa: 2b00         	cmp	r3, #0x0
 8060cac: f040 8301    	bne.w	0x80612b2 <_dtoa_r+0xe66> @ imm = #0x602
 8060cb0: 9b13         	ldr	r3, [sp, #0x4c]
 8060cb2: 2b00         	cmp	r3, #0x0
 8060cb4: f300 82fa    	bgt.w	0x80612ac <_dtoa_r+0xe60> @ imm = #0x5f4
 8060cb8: 9b24         	ldr	r3, [sp, #0x90]
 8060cba: 2b02         	cmp	r3, #0x2
 8060cbc: f340 82f6    	ble.w	0x80612ac <_dtoa_r+0xe60> @ imm = #0x5ec
 8060cc0: 9b13         	ldr	r3, [sp, #0x4c]
 8060cc2: f8cd 8018    	str.w	r8, [sp, #0x18]
 8060cc6: 9308         	str	r3, [sp, #0x20]
 8060cc8: e6d9         	b	0x8060a7e <_dtoa_r+0x632> @ imm = #-0x24e
 8060cca: f04f 0802    	mov.w	r8, #0x2
 8060cce: e9dd ab0a    	ldrd	r10, r11, [sp, #40]
 8060cd2: e522         	b	0x806071a <_dtoa_r+0x2ce> @ imm = #-0x5bc
 8060cd4: 2301         	movs	r3, #0x1
 8060cd6: 930d         	str	r3, [sp, #0x34]
 8060cd8: 9b25         	ldr	r3, [sp, #0x94]
 8060cda: 9a06         	ldr	r2, [sp, #0x18]
 8060cdc: 4413         	add	r3, r2
 8060cde: 9313         	str	r3, [sp, #0x4c]
 8060ce0: 3301         	adds	r3, #0x1
 8060ce2: 2b01         	cmp	r3, #0x1
 8060ce4: 4618         	mov	r0, r3
 8060ce6: 9308         	str	r3, [sp, #0x20]
 8060ce8: bfb8         	it	lt
 8060cea: 2001         	movlt	r0, #0x1
 8060cec: 2100         	movs	r1, #0x0
 8060cee: 2817         	cmp	r0, #0x17
 8060cf0: 6461         	str	r1, [r4, #0x44]
 8060cf2: f77f ace3    	ble.w	0x80606bc <_dtoa_r+0x270> @ imm = #-0x63a
 8060cf6: 2201         	movs	r2, #0x1
 8060cf8: 2304         	movs	r3, #0x4
 8060cfa: 005b         	lsls	r3, r3, #0x1
 8060cfc: 4611         	mov	r1, r2
 8060cfe: 3201         	adds	r2, #0x1
 8060d00: f103 0614    	add.w	r6, r3, #0x14
 8060d04: 4286         	cmp	r6, r0
 8060d06: d9f8         	bls	0x8060cfa <_dtoa_r+0x8ae> @ imm = #-0x10
 8060d08: 6461         	str	r1, [r4, #0x44]
 8060d0a: e4d7         	b	0x80606bc <_dtoa_r+0x270> @ imm = #-0x652
 8060d0c: 2301         	movs	r3, #0x1
 8060d0e: 930d         	str	r3, [sp, #0x34]
 8060d10: 9b25         	ldr	r3, [sp, #0x94]
 8060d12: 2b00         	cmp	r3, #0x0
 8060d14: f340 8148    	ble.w	0x8060fa8 <_dtoa_r+0xb5c> @ imm = #0x290
 8060d18: 4618         	mov	r0, r3
 8060d1a: 9313         	str	r3, [sp, #0x4c]
 8060d1c: 9308         	str	r3, [sp, #0x20]
 8060d1e: e7e5         	b	0x8060cec <_dtoa_r+0x8a0> @ imm = #-0x36
 8060d20: 2300         	movs	r3, #0x0
 8060d22: 930d         	str	r3, [sp, #0x34]
 8060d24: e7d8         	b	0x8060cd8 <_dtoa_r+0x88c> @ imm = #-0x50
 8060d26: 2300         	movs	r3, #0x0
 8060d28: 930d         	str	r3, [sp, #0x34]
 8060d2a: e7f1         	b	0x8060d10 <_dtoa_r+0x8c4> @ imm = #-0x1e
 8060d2c: 464b         	mov	r3, r9
 8060d2e: 495f         	ldr	r1, [pc, #0x17c]        @ 0x8060eac <_dtoa_r+0xa60>
 8060d30: f8dd 9050    	ldr.w	r9, [sp, #0x50]
 8060d34: 4642         	mov	r2, r8
 8060d36: f8dd 8010    	ldr.w	r8, [sp, #0x10]
 8060d3a: eb01 01c9    	add.w	r1, r1, r9, lsl #3
 8060d3e: e951 0102    	ldrd	r0, r1, [r1, #-8]
 8060d42: f004 f97b    	bl	0x806503c <__muldf3>    @ imm = #0x42f6
 8060d46: e9dd 6710    	ldrd	r6, r7, [sp, #64]
 8060d4a: e9cd 0116    	strd	r0, r1, [sp, #88]
 8060d4e: 4639         	mov	r1, r7
 8060d50: 4630         	mov	r0, r6
 8060d52: f004 fc23    	bl	0x806559c <__fixdfsi>   @ imm = #0x4846
 8060d56: 4605         	mov	r5, r0
 8060d58: f004 f906    	bl	0x8064f68 <__floatsidf> @ imm = #0x420c
 8060d5c: 460b         	mov	r3, r1
 8060d5e: 4602         	mov	r2, r0
 8060d60: 4639         	mov	r1, r7
 8060d62: 4630         	mov	r0, r6
 8060d64: 3530         	adds	r5, #0x30
 8060d66: f003 ffb1    	bl	0x8064ccc <__subdf3>    @ imm = #0x3f62
 8060d6a: 464b         	mov	r3, r9
 8060d6c: 4606         	mov	r6, r0
 8060d6e: 460f         	mov	r7, r1
 8060d70: 2b01         	cmp	r3, #0x1
 8060d72: f808 5b01    	strb	r5, [r8], #1
 8060d76: f000 8297    	beq.w	0x80612a8 <_dtoa_r+0xe5c> @ imm = #0x52e
 8060d7a: 9d14         	ldr	r5, [sp, #0x50]
 8060d7c: f04f 0a00    	mov.w	r10, #0x0
 8060d80: 9b04         	ldr	r3, [sp, #0x10]
 8060d82: 46a1         	mov	r9, r4
 8060d84: f8df b130    	ldr.w	r11, [pc, #0x130]       @ 0x8060eb8 <_dtoa_r+0xa6c>
 8060d88: 441d         	add	r5, r3
 8060d8a: 4652         	mov	r2, r10
 8060d8c: 465b         	mov	r3, r11
 8060d8e: 4630         	mov	r0, r6
 8060d90: 4639         	mov	r1, r7
 8060d92: f004 f953    	bl	0x806503c <__muldf3>    @ imm = #0x42a6
 8060d96: 460f         	mov	r7, r1
 8060d98: 4606         	mov	r6, r0
 8060d9a: f004 fbff    	bl	0x806559c <__fixdfsi>   @ imm = #0x47fe
 8060d9e: 4604         	mov	r4, r0
 8060da0: f004 f8e2    	bl	0x8064f68 <__floatsidf> @ imm = #0x41c4
 8060da4: 4602         	mov	r2, r0
 8060da6: 460b         	mov	r3, r1
 8060da8: 3430         	adds	r4, #0x30
 8060daa: 4630         	mov	r0, r6
 8060dac: 4639         	mov	r1, r7
 8060dae: f003 ff8d    	bl	0x8064ccc <__subdf3>    @ imm = #0x3f1a
 8060db2: f808 4b01    	strb	r4, [r8], #1
 8060db6: 45a8         	cmp	r8, r5
 8060db8: 4606         	mov	r6, r0
 8060dba: 460f         	mov	r7, r1
 8060dbc: d1e5         	bne	0x8060d8a <_dtoa_r+0x93e> @ imm = #-0x36
 8060dbe: 464c         	mov	r4, r9
 8060dc0: 2200         	movs	r2, #0x0
 8060dc2: 4b3e         	ldr	r3, [pc, #0xf8]         @ 0x8060ebc <_dtoa_r+0xa70>
 8060dc4: e9dd 8916    	ldrd	r8, r9, [sp, #88]
 8060dc8: 4640         	mov	r0, r8
 8060dca: 4649         	mov	r1, r9
 8060dcc: f003 ff80    	bl	0x8064cd0 <__aeabi_dadd> @ imm = #0x3f00
 8060dd0: 4602         	mov	r2, r0
 8060dd2: 460b         	mov	r3, r1
 8060dd4: 4630         	mov	r0, r6
 8060dd6: 4639         	mov	r1, r7
 8060dd8: f004 fbc0    	bl	0x806555c <__aeabi_dcmpgt> @ imm = #0x4780
 8060ddc: 2800         	cmp	r0, #0x0
 8060dde: f040 81f7    	bne.w	0x80611d0 <_dtoa_r+0xd84> @ imm = #0x3ee
 8060de2: 4642         	mov	r2, r8
 8060de4: 464b         	mov	r3, r9
 8060de6: 2000         	movs	r0, #0x0
 8060de8: 4934         	ldr	r1, [pc, #0xd0]         @ 0x8060ebc <_dtoa_r+0xa70>
 8060dea: f003 ff6f    	bl	0x8064ccc <__subdf3>    @ imm = #0x3ede
 8060dee: 4602         	mov	r2, r0
 8060df0: 460b         	mov	r3, r1
 8060df2: 4630         	mov	r0, r6
 8060df4: 4639         	mov	r1, r7
 8060df6: f004 fb93    	bl	0x8065520 <__aeabi_dcmplt> @ imm = #0x4726
 8060dfa: 2800         	cmp	r0, #0x0
 8060dfc: f43f ad79    	beq.w	0x80608f2 <_dtoa_r+0x4a6> @ imm = #-0x50e
 8060e00: 462a         	mov	r2, r5
 8060e02: f815 3d01    	ldrb	r3, [r5, #-1]!
 8060e06: 2b30         	cmp	r3, #0x30
 8060e08: d0fa         	beq	0x8060e00 <_dtoa_r+0x9b4> @ imm = #-0xc
 8060e0a: e543         	b	0x8060894 <_dtoa_r+0x448> @ imm = #-0x57a
 8060e0c: 4631         	mov	r1, r6
 8060e0e: 2205         	movs	r2, #0x5
 8060e10: 4620         	mov	r0, r4
 8060e12: f001 f9e7    	bl	0x80621e4 <__multadd>   @ imm = #0x13ce
 8060e16: 4606         	mov	r6, r0
 8060e18: 980c         	ldr	r0, [sp, #0x30]
 8060e1a: 4631         	mov	r1, r6
 8060e1c: f001 fc8e    	bl	0x806273c <__mcmp>      @ imm = #0x191c
 8060e20: 2800         	cmp	r0, #0x0
 8060e22: f77f ae30    	ble.w	0x8060a86 <_dtoa_r+0x63a> @ imm = #-0x3a0
 8060e26: 9804         	ldr	r0, [sp, #0x10]
 8060e28: 2331         	movs	r3, #0x31
 8060e2a: 9f06         	ldr	r7, [sp, #0x18]
 8060e2c: 4681         	mov	r9, r0
 8060e2e: f800 3b01    	strb	r3, [r0], #1
 8060e32: 3701         	adds	r7, #0x1
 8060e34: 9004         	str	r0, [sp, #0x10]
 8060e36: e62a         	b	0x8060a8e <_dtoa_r+0x642> @ imm = #-0x3ac
 8060e38: 9b06         	ldr	r3, [sp, #0x18]
 8060e3a: 3301         	adds	r3, #0x1
 8060e3c: 9306         	str	r3, [sp, #0x18]
 8060e3e: f8dd 8010    	ldr.w	r8, [sp, #0x10]
 8060e42: 2701         	movs	r7, #0x1
 8060e44: f8dd a030    	ldr.w	r10, [sp, #0x30]
 8060e48: f8dd b020    	ldr.w	r11, [sp, #0x20]
 8060e4c: e007         	b	0x8060e5e <_dtoa_r+0xa12> @ imm = #0xe
 8060e4e: 4651         	mov	r1, r10
 8060e50: 2300         	movs	r3, #0x0
 8060e52: 220a         	movs	r2, #0xa
 8060e54: 4620         	mov	r0, r4
 8060e56: f001 f9c5    	bl	0x80621e4 <__multadd>   @ imm = #0x138a
 8060e5a: 3701         	adds	r7, #0x1
 8060e5c: 4682         	mov	r10, r0
 8060e5e: 4631         	mov	r1, r6
 8060e60: 4650         	mov	r0, r10
 8060e62: f7ff fa59    	bl	0x8060318 <quorem>      @ imm = #-0xb4e
 8060e66: 455f         	cmp	r7, r11
 8060e68: f100 0930    	add.w	r9, r0, #0x30
 8060e6c: f808 9b01    	strb	r9, [r8], #1
 8060e70: dbed         	blt	0x8060e4e <_dtoa_r+0xa02> @ imm = #-0x26
 8060e72: 9b08         	ldr	r3, [sp, #0x20]
 8060e74: 2700         	movs	r7, #0x0
 8060e76: f8cd a030    	str.w	r10, [sp, #0x30]
 8060e7a: 2b00         	cmp	r3, #0x0
 8060e7c: bfcc         	ite	gt
 8060e7e: 469b         	movgt	r11, r3
 8060e80: f04f 0b01    	movle.w	r11, #0x1
 8060e84: 9b04         	ldr	r3, [sp, #0x10]
 8060e86: 449b         	add	r11, r3
 8060e88: 990c         	ldr	r1, [sp, #0x30]
 8060e8a: 2201         	movs	r2, #0x1
 8060e8c: 4620         	mov	r0, r4
 8060e8e: f001 fbe1    	bl	0x8062654 <__lshift>    @ imm = #0x17c2
 8060e92: 4631         	mov	r1, r6
 8060e94: 900c         	str	r0, [sp, #0x30]
 8060e96: f001 fc51    	bl	0x806273c <__mcmp>      @ imm = #0x18a2
 8060e9a: 2800         	cmp	r0, #0x0
 8060e9c: f340 814a    	ble.w	0x8061134 <_dtoa_r+0xce8> @ imm = #0x294
 8060ea0: f81b 3c01    	ldrb	r3, [r11, #-1]
 8060ea4: f10b 3bff    	add.w	r11, r11, #0xffffffff
 8060ea8: 9a04         	ldr	r2, [sp, #0x10]
 8060eaa: e00e         	b	0x8060eca <_dtoa_r+0xa7e> @ imm = #0x1c

08060eac <$d>:
 8060eac: c8 5a 06 08  	.word	0x08065ac8
 8060eb0: b8 5b 06 08  	.word	0x08065bb8
 8060eb4: 00 00 14 40  	.word	0x40140000
 8060eb8: 00 00 24 40  	.word	0x40240000
 8060ebc: 00 00 e0 3f  	.word	0x3fe00000

08060ec0 <$t>:
 8060ec0: 455a         	cmp	r2, r11
 8060ec2: f000 8147    	beq.w	0x8061154 <_dtoa_r+0xd08> @ imm = #0x28e
 8060ec6: f81b 3d01    	ldrb	r3, [r11, #-1]!
 8060eca: 2b39         	cmp	r3, #0x39
 8060ecc: f10b 0801    	add.w	r8, r11, #0x1
 8060ed0: d0f6         	beq	0x8060ec0 <_dtoa_r+0xa74> @ imm = #-0x14
 8060ed2: 3301         	adds	r3, #0x1
 8060ed4: f88b 3000    	strb.w	r3, [r11]
 8060ed8: 4631         	mov	r1, r6
 8060eda: 4620         	mov	r0, r4
 8060edc: f001 f978    	bl	0x80621d0 <_Bfree>      @ imm = #0x12f0
 8060ee0: 2d00         	cmp	r5, #0x0
 8060ee2: f000 8132    	beq.w	0x806114a <_dtoa_r+0xcfe> @ imm = #0x264
 8060ee6: 2f00         	cmp	r7, #0x0
 8060ee8: f000 8203    	beq.w	0x80612f2 <_dtoa_r+0xea6> @ imm = #0x406
 8060eec: 42af         	cmp	r7, r5
 8060eee: f000 8200    	beq.w	0x80612f2 <_dtoa_r+0xea6> @ imm = #0x400
 8060ef2: 4639         	mov	r1, r7
 8060ef4: 4620         	mov	r0, r4
 8060ef6: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 8060efa: f8cd 8010    	str.w	r8, [sp, #0x10]
 8060efe: f001 f967    	bl	0x80621d0 <_Bfree>      @ imm = #0x12ce
 8060f02: e5cb         	b	0x8060a9c <_dtoa_r+0x650> @ imm = #-0x46a
 8060f04: e9dd 230a    	ldrd	r2, r3, [sp, #40]
 8060f08: f04f 0802    	mov.w	r8, #0x2
 8060f0c: e9cd 2310    	strd	r2, r3, [sp, #64]
 8060f10: e41e         	b	0x8060750 <_dtoa_r+0x304> @ imm = #-0x7c4
 8060f12: 9b02         	ldr	r3, [sp, #0x8]
 8060f14: 2b00         	cmp	r3, #0x0
 8060f16: f47f aeab    	bne.w	0x8060c70 <_dtoa_r+0x824> @ imm = #-0x2aa
 8060f1a: e9dd 1202    	ldrd	r1, r2, [sp, #8]
 8060f1e: f3c2 0313    	ubfx	r3, r2, #0x0, #0x14
 8060f22: 2b00         	cmp	r3, #0x0
 8060f24: f47f aea4    	bne.w	0x8060c70 <_dtoa_r+0x824> @ imm = #-0x2b8
 8060f28: 4bb8         	ldr	r3, [pc, #0x2e0]        @ 0x806120c <_dtoa_r+0xdc0>
 8060f2a: 4013         	ands	r3, r2
 8060f2c: 2b00         	cmp	r3, #0x0
 8060f2e: f000 81a5    	beq.w	0x806127c <_dtoa_r+0xe30> @ imm = #0x34a
 8060f32: 9b09         	ldr	r3, [sp, #0x24]
 8060f34: f04f 0901    	mov.w	r9, #0x1
 8060f38: 3301         	adds	r3, #0x1
 8060f3a: 9309         	str	r3, [sp, #0x24]
 8060f3c: 9b07         	ldr	r3, [sp, #0x1c]
 8060f3e: 3301         	adds	r3, #0x1
 8060f40: 9307         	str	r3, [sp, #0x1c]
 8060f42: e569         	b	0x8060a18 <_dtoa_r+0x5cc> @ imm = #-0x52e
 8060f44: 4629         	mov	r1, r5
 8060f46: 4632         	mov	r2, r6
 8060f48: 4620         	mov	r0, r4
 8060f4a: f001 fb23    	bl	0x8062594 <__pow5mult>  @ imm = #0x1646
 8060f4e: f8dd 8030    	ldr.w	r8, [sp, #0x30]
 8060f52: 4605         	mov	r5, r0
 8060f54: 4620         	mov	r0, r4
 8060f56: 4642         	mov	r2, r8
 8060f58: 4629         	mov	r1, r5
 8060f5a: f001 fa6b    	bl	0x8062434 <__multiply>  @ imm = #0x14d6
 8060f5e: 4641         	mov	r1, r8
 8060f60: 900c         	str	r0, [sp, #0x30]
 8060f62: 4620         	mov	r0, r4
 8060f64: f001 f934    	bl	0x80621d0 <_Bfree>      @ imm = #0x1268
 8060f68: e543         	b	0x80609f2 <_dtoa_r+0x5a6> @ imm = #-0x57a
 8060f6a: 1a9e         	subs	r6, r3, r2
 8060f6c: e4dc         	b	0x8060928 <_dtoa_r+0x4dc> @ imm = #-0x648
 8060f6e: 990c         	ldr	r1, [sp, #0x30]
 8060f70: 4620         	mov	r0, r4
 8060f72: f001 fb0f    	bl	0x8062594 <__pow5mult>  @ imm = #0x161e
 8060f76: 900c         	str	r0, [sp, #0x30]
 8060f78: e53f         	b	0x80609fa <_dtoa_r+0x5ae> @ imm = #-0x582
 8060f7a: 4629         	mov	r1, r5
 8060f7c: 463a         	mov	r2, r7
 8060f7e: 4620         	mov	r0, r4
 8060f80: f001 fb68    	bl	0x8062654 <__lshift>    @ imm = #0x16d0
 8060f84: 4605         	mov	r5, r0
 8060f86: e5b0         	b	0x8060aea <_dtoa_r+0x69e> @ imm = #-0x4a0
 8060f88: 2600         	movs	r6, #0x0
 8060f8a: 4635         	mov	r5, r6
 8060f8c: e57b         	b	0x8060a86 <_dtoa_r+0x63a> @ imm = #-0x50a
 8060f8e: 4620         	mov	r0, r4
 8060f90: 9305         	str	r3, [sp, #0x14]
 8060f92: f001 f91d    	bl	0x80621d0 <_Bfree>      @ imm = #0x123a
 8060f96: 2201         	movs	r2, #0x1
 8060f98: 9b05         	ldr	r3, [sp, #0x14]
 8060f9a: e5e1         	b	0x8060b60 <_dtoa_r+0x714> @ imm = #-0x43e
 8060f9c: f001 f922    	bl	0x80621e4 <__multadd>   @ imm = #0x1244
 8060fa0: 46b8         	mov	r8, r7
 8060fa2: 4605         	mov	r5, r0
 8060fa4: 4682         	mov	r10, r0
 8060fa6: e5b2         	b	0x8060b0e <_dtoa_r+0x6c2> @ imm = #-0x49c
 8060fa8: 2301         	movs	r3, #0x1
 8060faa: 9325         	str	r3, [sp, #0x94]
 8060fac: 9308         	str	r3, [sp, #0x20]
 8060fae: f7ff bb81    	b.w	0x80606b4 <_dtoa_r+0x268> @ imm = #-0x8fe
 8060fb2: 2600         	movs	r6, #0x0
 8060fb4: 4635         	mov	r5, r6
 8060fb6: e736         	b	0x8060e26 <_dtoa_r+0x9da> @ imm = #-0x194
 8060fb8: e9dd 1202    	ldrd	r1, r2, [sp, #8]
 8060fbc: 2900         	cmp	r1, #0x0
 8060fbe: f47f ad29    	bne.w	0x8060a14 <_dtoa_r+0x5c8> @ imm = #-0x5ae
 8060fc2: f3c2 0313    	ubfx	r3, r2, #0x0, #0x14
 8060fc6: 2b00         	cmp	r3, #0x0
 8060fc8: f47f ad24    	bne.w	0x8060a14 <_dtoa_r+0x5c8> @ imm = #-0x5b8
 8060fcc: e7ac         	b	0x8060f28 <_dtoa_r+0xadc> @ imm = #-0xa8
 8060fce: 9b08         	ldr	r3, [sp, #0x20]
 8060fd0: 2b00         	cmp	r3, #0x0
 8060fd2: f43f ac66    	beq.w	0x80608a2 <_dtoa_r+0x456> @ imm = #-0x734
 8060fd6: 9b13         	ldr	r3, [sp, #0x4c]
 8060fd8: 2b00         	cmp	r3, #0x0
 8060fda: f77f ac8a    	ble.w	0x80608f2 <_dtoa_r+0x4a6> @ imm = #-0x6ec
 8060fde: 9a06         	ldr	r2, [sp, #0x18]
 8060fe0: 4628         	mov	r0, r5
 8060fe2: 4631         	mov	r1, r6
 8060fe4: 3a01         	subs	r2, #0x1
 8060fe6: e9cd 3214    	strd	r3, r2, [sp, #80]
 8060fea: 4b89         	ldr	r3, [pc, #0x224]        @ 0x8061210 <_dtoa_r+0xdc4>
 8060fec: 2200         	movs	r2, #0x0
 8060fee: f004 f825    	bl	0x806503c <__muldf3>    @ imm = #0x404a
 8060ff2: 4602         	mov	r2, r0
 8060ff4: 460e         	mov	r6, r1
 8060ff6: f108 0001    	add.w	r0, r8, #0x1
 8060ffa: 4615         	mov	r5, r2
 8060ffc: e9cd 5610    	strd	r5, r6, [sp, #64]
 8061000: f003 ffb2    	bl	0x8064f68 <__floatsidf> @ imm = #0x3f64
 8061004: 462a         	mov	r2, r5
 8061006: 4633         	mov	r3, r6
 8061008: f004 f818    	bl	0x806503c <__muldf3>    @ imm = #0x4030
 806100c: 2200         	movs	r2, #0x0
 806100e: 4b81         	ldr	r3, [pc, #0x204]        @ 0x8061214 <_dtoa_r+0xdc8>
 8061010: f003 fe5e    	bl	0x8064cd0 <__aeabi_dadd> @ imm = #0x3cbc
 8061014: 4680         	mov	r8, r0
 8061016: f1a1 7950    	sub.w	r9, r1, #0x3400000
 806101a: f7ff bbbc    	b.w	0x8060796 <_dtoa_r+0x34a> @ imm = #-0x888
 806101e: 900f         	str	r0, [sp, #0x3c]
 8061020: e49b         	b	0x806095a <_dtoa_r+0x50e> @ imm = #-0x6ca
 8061022: 9a12         	ldr	r2, [sp, #0x48]
 8061024: 2a00         	cmp	r2, #0x0
 8061026: f000 80a8    	beq.w	0x806117a <_dtoa_r+0xd2e> @ imm = #0x150
 806102a: f203 4333    	addw	r3, r3, #0x433
 806102e: 9a07         	ldr	r2, [sp, #0x1c]
 8061030: 9e0e         	ldr	r6, [sp, #0x38]
 8061032: 441a         	add	r2, r3
 8061034: 9207         	str	r2, [sp, #0x1c]
 8061036: 9a09         	ldr	r2, [sp, #0x24]
 8061038: 4617         	mov	r7, r2
 806103a: 441a         	add	r2, r3
 806103c: 9209         	str	r2, [sp, #0x24]
 806103e: e47e         	b	0x806093e <_dtoa_r+0x4f2> @ imm = #-0x704
 8061040: 990c         	ldr	r1, [sp, #0x30]
 8061042: 4620         	mov	r0, r4
 8061044: 9a0e         	ldr	r2, [sp, #0x38]
 8061046: f001 faa5    	bl	0x8062594 <__pow5mult>  @ imm = #0x154a
 806104a: 900c         	str	r0, [sp, #0x30]
 806104c: e4d5         	b	0x80609fa <_dtoa_r+0x5ae> @ imm = #-0x656
 806104e: 2100         	movs	r1, #0x0
 8061050: 4620         	mov	r0, r4
 8061052: 6461         	str	r1, [r4, #0x44]
 8061054: f001 f896    	bl	0x8062184 <_Balloc>     @ imm = #0x112c
 8061058: 9004         	str	r0, [sp, #0x10]
 806105a: 2800         	cmp	r0, #0x0
 806105c: f000 815c    	beq.w	0x8061318 <_dtoa_r+0xecc> @ imm = #0x2b8
 8061060: 9a06         	ldr	r2, [sp, #0x18]
 8061062: 9b04         	ldr	r3, [sp, #0x10]
 8061064: 2a0e         	cmp	r2, #0xe
 8061066: 6423         	str	r3, [r4, #0x40]
 8061068: 9b19         	ldr	r3, [sp, #0x64]
 806106a: f300 815c    	bgt.w	0x8061326 <_dtoa_r+0xeda> @ imm = #0x2b8
 806106e: 2b00         	cmp	r3, #0x0
 8061070: f2c0 8159    	blt.w	0x8061326 <_dtoa_r+0xeda> @ imm = #0x2b2
 8061074: 9a06         	ldr	r2, [sp, #0x18]
 8061076: 4b68         	ldr	r3, [pc, #0x1a0]        @ 0x8061218 <_dtoa_r+0xdcc>
 8061078: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 806107c: f04f 32ff    	mov.w	r2, #0xffffffff
 8061080: e9d3 ab00    	ldrd	r10, r11, [r3]
 8061084: 9208         	str	r2, [sp, #0x20]
 8061086: 4652         	mov	r2, r10
 8061088: 465b         	mov	r3, r11
 806108a: 9d04         	ldr	r5, [sp, #0x10]
 806108c: e9dd 670a    	ldrd	r6, r7, [sp, #40]
 8061090: 4630         	mov	r0, r6
 8061092: 4639         	mov	r1, r7
 8061094: f004 f8fc    	bl	0x8065290 <__divdf3>    @ imm = #0x41f8
 8061098: f004 fa80    	bl	0x806559c <__fixdfsi>   @ imm = #0x4500
 806109c: 4680         	mov	r8, r0
 806109e: f003 ff63    	bl	0x8064f68 <__floatsidf> @ imm = #0x3ec6
 80610a2: 4652         	mov	r2, r10
 80610a4: 465b         	mov	r3, r11
 80610a6: f003 ffc9    	bl	0x806503c <__muldf3>    @ imm = #0x3f92
 80610aa: 460b         	mov	r3, r1
 80610ac: 4602         	mov	r2, r0
 80610ae: 4639         	mov	r1, r7
 80610b0: 4630         	mov	r0, r6
 80610b2: f003 fe0b    	bl	0x8064ccc <__subdf3>    @ imm = #0x3c16
 80610b6: f108 0330    	add.w	r3, r8, #0x30
 80610ba: f805 3b01    	strb	r3, [r5], #1
 80610be: 9b08         	ldr	r3, [sp, #0x20]
 80610c0: 2b01         	cmp	r3, #0x1
 80610c2: f000 80ac    	beq.w	0x806121e <_dtoa_r+0xdd2> @ imm = #0x158
 80610c6: 9402         	str	r4, [sp, #0x8]
 80610c8: f04f 0901    	mov.w	r9, #0x1
 80610cc: 9c08         	ldr	r4, [sp, #0x20]
 80610ce: e01d         	b	0x806110c <_dtoa_r+0xcc0> @ imm = #0x3a
 80610d0: 4652         	mov	r2, r10
 80610d2: 465b         	mov	r3, r11
 80610d4: 4630         	mov	r0, r6
 80610d6: 4639         	mov	r1, r7
 80610d8: f004 f8da    	bl	0x8065290 <__divdf3>    @ imm = #0x41b4
 80610dc: f109 0901    	add.w	r9, r9, #0x1
 80610e0: f004 fa5c    	bl	0x806559c <__fixdfsi>   @ imm = #0x44b8
 80610e4: 4680         	mov	r8, r0
 80610e6: f003 ff3f    	bl	0x8064f68 <__floatsidf> @ imm = #0x3e7e
 80610ea: 4652         	mov	r2, r10
 80610ec: 465b         	mov	r3, r11
 80610ee: f003 ffa5    	bl	0x806503c <__muldf3>    @ imm = #0x3f4a
 80610f2: 460b         	mov	r3, r1
 80610f4: 4602         	mov	r2, r0
 80610f6: 4639         	mov	r1, r7
 80610f8: 4630         	mov	r0, r6
 80610fa: f003 fde7    	bl	0x8064ccc <__subdf3>    @ imm = #0x3bce
 80610fe: f108 0330    	add.w	r3, r8, #0x30
 8061102: 45a1         	cmp	r9, r4
 8061104: f805 3b01    	strb	r3, [r5], #1
 8061108: f000 8088    	beq.w	0x806121c <_dtoa_r+0xdd0> @ imm = #0x110
 806110c: 2200         	movs	r2, #0x0
 806110e: 4b40         	ldr	r3, [pc, #0x100]        @ 0x8061210 <_dtoa_r+0xdc4>
 8061110: f003 ff94    	bl	0x806503c <__muldf3>    @ imm = #0x3f28
 8061114: 2200         	movs	r2, #0x0
 8061116: 2300         	movs	r3, #0x0
 8061118: 4606         	mov	r6, r0
 806111a: 460f         	mov	r7, r1
 806111c: f004 f9f6    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x43ec
 8061120: 2800         	cmp	r0, #0x0
 8061122: d0d5         	beq	0x80610d0 <_dtoa_r+0xc84> @ imm = #-0x56
 8061124: 9c02         	ldr	r4, [sp, #0x8]
 8061126: 9b06         	ldr	r3, [sp, #0x18]
 8061128: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 806112c: 3301         	adds	r3, #0x1
 806112e: 9504         	str	r5, [sp, #0x10]
 8061130: 9306         	str	r3, [sp, #0x18]
 8061132: e4b7         	b	0x8060aa4 <_dtoa_r+0x658> @ imm = #-0x692
 8061134: d103         	bne	0x806113e <_dtoa_r+0xcf2> @ imm = #0x6
 8061136: f019 0f01    	tst.w	r9, #0x1
 806113a: f47f aeb1    	bne.w	0x8060ea0 <_dtoa_r+0xa54> @ imm = #-0x29e
 806113e: 46d8         	mov	r8, r11
 8061140: f81b 3d01    	ldrb	r3, [r11, #-1]!
 8061144: 2b30         	cmp	r3, #0x30
 8061146: d0fa         	beq	0x806113e <_dtoa_r+0xcf2> @ imm = #-0xc
 8061148: e6c6         	b	0x8060ed8 <_dtoa_r+0xa8c> @ imm = #-0x274
 806114a: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 806114e: f8cd 8010    	str.w	r8, [sp, #0x10]
 8061152: e4a7         	b	0x8060aa4 <_dtoa_r+0x658> @ imm = #-0x6b2
 8061154: 9b06         	ldr	r3, [sp, #0x18]
 8061156: 9a04         	ldr	r2, [sp, #0x10]
 8061158: 3301         	adds	r3, #0x1
 806115a: 9306         	str	r3, [sp, #0x18]
 806115c: 2331         	movs	r3, #0x31
 806115e: 7013         	strb	r3, [r2]
 8061160: e6ba         	b	0x8060ed8 <_dtoa_r+0xa8c> @ imm = #-0x28c
 8061162: e9dd 2308    	ldrd	r2, r3, [sp, #32]
 8061166: 1a9f         	subs	r7, r3, r2
 8061168: f7ff bbe9    	b.w	0x806093e <_dtoa_r+0x4f2> @ imm = #-0x82e
 806116c: 9b15         	ldr	r3, [sp, #0x54]
 806116e: 9104         	str	r1, [sp, #0x10]
 8061170: 3301         	adds	r3, #0x1
 8061172: 9315         	str	r3, [sp, #0x54]
 8061174: 2331         	movs	r3, #0x31
 8061176: f7ff bb8c    	b.w	0x8060892 <_dtoa_r+0x446> @ imm = #-0x8e8
 806117a: 9b18         	ldr	r3, [sp, #0x60]
 806117c: f1c3 0336    	rsb.w	r3, r3, #0x36
 8061180: e755         	b	0x806102e <_dtoa_r+0xbe2> @ imm = #-0x156
 8061182: 2a00         	cmp	r2, #0x0
 8061184: 4659         	mov	r1, r11
 8061186: f8cd b030    	str.w	r11, [sp, #0x30]
 806118a: 46cb         	mov	r11, r9
 806118c: 4699         	mov	r9, r3
 806118e: dd0f         	ble	0x80611b0 <_dtoa_r+0xd64> @ imm = #0x1e
 8061190: 2201         	movs	r2, #0x1
 8061192: 4620         	mov	r0, r4
 8061194: f001 fa5e    	bl	0x8062654 <__lshift>    @ imm = #0x14bc
 8061198: 4631         	mov	r1, r6
 806119a: 900c         	str	r0, [sp, #0x30]
 806119c: f001 face    	bl	0x806273c <__mcmp>      @ imm = #0x159c
 80611a0: 2800         	cmp	r0, #0x0
 80611a2: f340 809f    	ble.w	0x80612e4 <_dtoa_r+0xe98> @ imm = #0x13e
 80611a6: f1b9 0f39    	cmp.w	r9, #0x39
 80611aa: d06a         	beq	0x8061282 <_dtoa_r+0xe36> @ imm = #0xd4
 80611ac: f10b 0931    	add.w	r9, r11, #0x31
 80611b0: f808 9b01    	strb	r9, [r8], #1
 80611b4: 9b06         	ldr	r3, [sp, #0x18]
 80611b6: 462f         	mov	r7, r5
 80611b8: 4655         	mov	r5, r10
 80611ba: 3301         	adds	r3, #0x1
 80611bc: 9306         	str	r3, [sp, #0x18]
 80611be: e68b         	b	0x8060ed8 <_dtoa_r+0xa8c> @ imm = #-0x2ea
 80611c0: 9c10         	ldr	r4, [sp, #0x40]
 80611c2: 9b15         	ldr	r3, [sp, #0x54]
 80611c4: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 80611c8: 3301         	adds	r3, #0x1
 80611ca: 9504         	str	r5, [sp, #0x10]
 80611cc: 9306         	str	r3, [sp, #0x18]
 80611ce: e469         	b	0x8060aa4 <_dtoa_r+0x658> @ imm = #-0x72e
 80611d0: 9904         	ldr	r1, [sp, #0x10]
 80611d2: f7ff bb56    	b.w	0x8060882 <_dtoa_r+0x436> @ imm = #-0x954
 80611d6: 6869         	ldr	r1, [r5, #0x4]
 80611d8: 4620         	mov	r0, r4
 80611da: f000 ffd3    	bl	0x8062184 <_Balloc>     @ imm = #0xfa6
 80611de: 4607         	mov	r7, r0
 80611e0: 2800         	cmp	r0, #0x0
 80611e2: f000 8092    	beq.w	0x806130a <_dtoa_r+0xebe> @ imm = #0x124
 80611e6: 692b         	ldr	r3, [r5, #0x10]
 80611e8: f105 010c    	add.w	r1, r5, #0xc
 80611ec: 300c         	adds	r0, #0xc
 80611ee: 3302         	adds	r3, #0x2
 80611f0: 009a         	lsls	r2, r3, #0x2
 80611f2: f7fd fc75    	bl	0x805eae0 <memcpy>      @ imm = #-0x2716
 80611f6: 4639         	mov	r1, r7
 80611f8: 2201         	movs	r2, #0x1
 80611fa: 4620         	mov	r0, r4
 80611fc: f001 fa2a    	bl	0x8062654 <__lshift>    @ imm = #0x1454
 8061200: 4682         	mov	r10, r0
 8061202: e477         	b	0x8060af4 <_dtoa_r+0x6a8> @ imm = #-0x712
 8061204: 9c10         	ldr	r4, [sp, #0x40]
 8061206: f7ff bb74    	b.w	0x80608f2 <_dtoa_r+0x4a6> @ imm = #-0x918
 806120a: bf00         	nop

0806120c <$d>:
 806120c: 00 00 f0 7f  	.word	0x7ff00000
 8061210: 00 00 24 40  	.word	0x40240000
 8061214: 00 00 1c 40  	.word	0x401c0000
 8061218: c8 5a 06 08  	.word	0x08065ac8

0806121c <$t>:
 806121c: 9c02         	ldr	r4, [sp, #0x8]
 806121e: 4602         	mov	r2, r0
 8061220: 460b         	mov	r3, r1
 8061222: f003 fd55    	bl	0x8064cd0 <__aeabi_dadd> @ imm = #0x3aaa
 8061226: 4652         	mov	r2, r10
 8061228: 465b         	mov	r3, r11
 806122a: 4606         	mov	r6, r0
 806122c: 460f         	mov	r7, r1
 806122e: f004 f995    	bl	0x806555c <__aeabi_dcmpgt> @ imm = #0x432a
 8061232: b960         	cbnz	r0, 0x806124e <_dtoa_r+0xe02> @ imm = #0x18
 8061234: 4652         	mov	r2, r10
 8061236: 465b         	mov	r3, r11
 8061238: 4630         	mov	r0, r6
 806123a: 4639         	mov	r1, r7
 806123c: f004 f966    	bl	0x806550c <__aeabi_dcmpeq> @ imm = #0x42cc
 8061240: 2800         	cmp	r0, #0x0
 8061242: f43f af70    	beq.w	0x8061126 <_dtoa_r+0xcda> @ imm = #-0x120
 8061246: f018 0f01    	tst.w	r8, #0x1
 806124a: f43f af6c    	beq.w	0x8061126 <_dtoa_r+0xcda> @ imm = #-0x128
 806124e: 9b06         	ldr	r3, [sp, #0x18]
 8061250: 9904         	ldr	r1, [sp, #0x10]
 8061252: 9315         	str	r3, [sp, #0x54]
 8061254: f7ff bb15    	b.w	0x8060882 <_dtoa_r+0x436> @ imm = #-0x9d6
 8061258: 2b39         	cmp	r3, #0x39
 806125a: f8cd b030    	str.w	r11, [sp, #0x30]
 806125e: d010         	beq	0x8061282 <_dtoa_r+0xe36> @ imm = #0x20
 8061260: 3301         	adds	r3, #0x1
 8061262: f808 3b01    	strb	r3, [r8], #1
 8061266: e7a5         	b	0x80611b4 <_dtoa_r+0xd68> @ imm = #-0xb6
 8061268: 4699         	mov	r9, r3
 806126a: 9b06         	ldr	r3, [sp, #0x18]
 806126c: f8cd b030    	str.w	r11, [sp, #0x30]
 8061270: 46bb         	mov	r11, r7
 8061272: 3301         	adds	r3, #0x1
 8061274: 462f         	mov	r7, r5
 8061276: 4655         	mov	r5, r10
 8061278: 9306         	str	r3, [sp, #0x18]
 806127a: e605         	b	0x8060e88 <_dtoa_r+0xa3c> @ imm = #-0x3f6
 806127c: 4699         	mov	r9, r3
 806127e: f7ff bbcb    	b.w	0x8060a18 <_dtoa_r+0x5cc> @ imm = #-0x86a
 8061282: 9b06         	ldr	r3, [sp, #0x18]
 8061284: 46c3         	mov	r11, r8
 8061286: 462f         	mov	r7, r5
 8061288: 4655         	mov	r5, r10
 806128a: 3301         	adds	r3, #0x1
 806128c: 9306         	str	r3, [sp, #0x18]
 806128e: 2339         	movs	r3, #0x39
 8061290: f80b 3b01    	strb	r3, [r11], #1
 8061294: e606         	b	0x8060ea4 <_dtoa_r+0xa58> @ imm = #-0x3f4
 8061296: 2b39         	cmp	r3, #0x39
 8061298: f8cd b030    	str.w	r11, [sp, #0x30]
 806129c: 46cb         	mov	r11, r9
 806129e: 4699         	mov	r9, r3
 80612a0: d0ef         	beq	0x8061282 <_dtoa_r+0xe36> @ imm = #-0x22
 80612a2: 2f00         	cmp	r7, #0x0
 80612a4: dc82         	bgt	0x80611ac <_dtoa_r+0xd60> @ imm = #-0xfc
 80612a6: e783         	b	0x80611b0 <_dtoa_r+0xd64> @ imm = #-0xfa
 80612a8: 4645         	mov	r5, r8
 80612aa: e589         	b	0x8060dc0 <_dtoa_r+0x974> @ imm = #-0x4ee
 80612ac: 9b13         	ldr	r3, [sp, #0x4c]
 80612ae: 9308         	str	r3, [sp, #0x20]
 80612b0: e5c5         	b	0x8060e3e <_dtoa_r+0x9f2> @ imm = #-0x476
 80612b2: 4629         	mov	r1, r5
 80612b4: 2300         	movs	r3, #0x0
 80612b6: 220a         	movs	r2, #0xa
 80612b8: 4620         	mov	r0, r4
 80612ba: f000 ff93    	bl	0x80621e4 <__multadd>   @ imm = #0xf26
 80612be: 9b13         	ldr	r3, [sp, #0x4c]
 80612c0: 4605         	mov	r5, r0
 80612c2: 2b00         	cmp	r3, #0x0
 80612c4: dc03         	bgt	0x80612ce <_dtoa_r+0xe82> @ imm = #0x6
 80612c6: 9b24         	ldr	r3, [sp, #0x90]
 80612c8: 2b02         	cmp	r3, #0x2
 80612ca: f73f acf9    	bgt.w	0x8060cc0 <_dtoa_r+0x874> @ imm = #-0x60e
 80612ce: 9b13         	ldr	r3, [sp, #0x4c]
 80612d0: f8cd 8018    	str.w	r8, [sp, #0x18]
 80612d4: 9308         	str	r3, [sp, #0x20]
 80612d6: e405         	b	0x8060ae4 <_dtoa_r+0x698> @ imm = #-0x7f6
 80612d8: f04f 0802    	mov.w	r8, #0x2
 80612dc: e9cd ab10    	strd	r10, r11, [sp, #64]
 80612e0: f7ff ba36    	b.w	0x8060750 <_dtoa_r+0x304> @ imm = #-0xb94
 80612e4: f47f af64    	bne.w	0x80611b0 <_dtoa_r+0xd64> @ imm = #-0x138
 80612e8: f019 0f01    	tst.w	r9, #0x1
 80612ec: f47f af5b    	bne.w	0x80611a6 <_dtoa_r+0xd5a> @ imm = #-0x14a
 80612f0: e75e         	b	0x80611b0 <_dtoa_r+0xd64> @ imm = #-0x144
 80612f2: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 80612f6: f8cd 8010    	str.w	r8, [sp, #0x10]
 80612fa: f7ff bbcf    	b.w	0x8060a9c <_dtoa_r+0x650> @ imm = #-0x862
 80612fe: f43f aba2    	beq.w	0x8060a46 <_dtoa_r+0x5fa> @ imm = #-0x8bc
 8061302: f1c3 033c    	rsb.w	r3, r3, #0x3c
 8061306: f7ff bbe1    	b.w	0x8060acc <_dtoa_r+0x680> @ imm = #-0x83e
 806130a: 4602         	mov	r2, r0
 806130c: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x806133c <_dtoa_r+0xef0>
 806130e: f240 21ea    	movw	r1, #0x2ea
 8061312: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8061340 <_dtoa_r+0xef4>
 8061314: f002 fb6e    	bl	0x80639f4 <__assert_func> @ imm = #0x26dc
 8061318: 4b08         	ldr	r3, [pc, #0x20]         @ 0x806133c <_dtoa_r+0xef0>
 806131a: 2200         	movs	r2, #0x0
 806131c: f44f 71d5    	mov.w	r1, #0x1aa
 8061320: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8061340 <_dtoa_r+0xef4>
 8061322: f002 fb67    	bl	0x80639f4 <__assert_func> @ imm = #0x26ce
 8061326: 2200         	movs	r2, #0x0
 8061328: 2101         	movs	r1, #0x1
 806132a: 9225         	str	r2, [sp, #0x94]
 806132c: f04f 32ff    	mov.w	r2, #0xffffffff
 8061330: 910d         	str	r1, [sp, #0x34]
 8061332: 9208         	str	r2, [sp, #0x20]
 8061334: 9213         	str	r2, [sp, #0x4c]
 8061336: f7ff bae6    	b.w	0x8060906 <_dtoa_r+0x4ba> @ imm = #-0xa34
 806133a: bf00         	nop

0806133c <$d>:
 806133c: 34 5a 06 08  	.word	0x08065a34
 8061340: 48 5a 06 08  	.word	0x08065a48

08061344 <__sflush_r>:
 8061344: f9b1 200c    	ldrsh.w	r2, [r1, #0xc]
 8061348: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 806134a: 460c         	mov	r4, r1
 806134c: 0711         	lsls	r1, r2, #0x1c
 806134e: 4607         	mov	r7, r0
 8061350: d42e         	bmi	0x80613b0 <__sflush_r+0x6c> @ imm = #0x5c
 8061352: 6863         	ldr	r3, [r4, #0x4]
 8061354: f442 6200    	orr	r2, r2, #0x800
 8061358: 2b00         	cmp	r3, #0x0
 806135a: 81a2         	strh	r2, [r4, #0xc]
 806135c: dd46         	ble	0x80613ec <__sflush_r+0xa8> @ imm = #0x8c
 806135e: 6aa5         	ldr	r5, [r4, #0x28]
 8061360: 2d00         	cmp	r5, #0x0
 8061362: d041         	beq	0x80613e8 <__sflush_r+0xa4> @ imm = #0x82
 8061364: 2300         	movs	r3, #0x0
 8061366: 683e         	ldr	r6, [r7]
 8061368: 603b         	str	r3, [r7]
 806136a: b293         	uxth	r3, r2
 806136c: f412 5280    	ands	r2, r2, #0x1000
 8061370: d140         	bne	0x80613f4 <__sflush_r+0xb0> @ imm = #0x80
 8061372: 2301         	movs	r3, #0x1
 8061374: 69e1         	ldr	r1, [r4, #0x1c]
 8061376: 4638         	mov	r0, r7
 8061378: 47a8         	blx	r5
 806137a: 1c42         	adds	r2, r0, #0x1
 806137c: d071         	beq	0x8061462 <__sflush_r+0x11e> @ imm = #0xe2
 806137e: 89a3         	ldrh	r3, [r4, #0xc]
 8061380: 6aa5         	ldr	r5, [r4, #0x28]
 8061382: 075b         	lsls	r3, r3, #0x1d
 8061384: d505         	bpl	0x8061392 <__sflush_r+0x4e> @ imm = #0xa
 8061386: 6863         	ldr	r3, [r4, #0x4]
 8061388: 1ac0         	subs	r0, r0, r3
 806138a: 6b23         	ldr	r3, [r4, #0x30]
 806138c: b10b         	cbz	r3, 0x8061392 <__sflush_r+0x4e> @ imm = #0x2
 806138e: 6be3         	ldr	r3, [r4, #0x3c]
 8061390: 1ac0         	subs	r0, r0, r3
 8061392: 4602         	mov	r2, r0
 8061394: 2300         	movs	r3, #0x0
 8061396: 69e1         	ldr	r1, [r4, #0x1c]
 8061398: 4638         	mov	r0, r7
 806139a: 47a8         	blx	r5
 806139c: 1c45         	adds	r5, r0, #0x1
 806139e: d132         	bne	0x8061406 <__sflush_r+0xc2> @ imm = #0x64
 80613a0: 683a         	ldr	r2, [r7]
 80613a2: 2a1d         	cmp	r2, #0x1d
 80613a4: d94a         	bls	0x806143c <__sflush_r+0xf8> @ imm = #0x94
 80613a6: 89a3         	ldrh	r3, [r4, #0xc]
 80613a8: f043 0340    	orr	r3, r3, #0x40
 80613ac: 81a3         	strh	r3, [r4, #0xc]
 80613ae: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 80613b0: 6926         	ldr	r6, [r4, #0x10]
 80613b2: b1ce         	cbz	r6, 0x80613e8 <__sflush_r+0xa4> @ imm = #0x32
 80613b4: b293         	uxth	r3, r2
 80613b6: 6825         	ldr	r5, [r4]
 80613b8: 6026         	str	r6, [r4]
 80613ba: 0799         	lsls	r1, r3, #0x1e
 80613bc: eba5 0506    	sub.w	r5, r5, r6
 80613c0: bf0c         	ite	eq
 80613c2: 6963         	ldreq	r3, [r4, #0x14]
 80613c4: 2300         	movne	r3, #0x0
 80613c6: 60a3         	str	r3, [r4, #0x8]
 80613c8: e00c         	b	0x80613e4 <__sflush_r+0xa0> @ imm = #0x18
 80613ca: 462b         	mov	r3, r5
 80613cc: 4632         	mov	r2, r6
 80613ce: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 80613d2: 4638         	mov	r0, r7
 80613d4: 69e1         	ldr	r1, [r4, #0x1c]
 80613d6: 47e0         	blx	r12
 80613d8: f1b0 0c00    	subs.w	r12, r0, #0x0
 80613dc: eba5 050c    	sub.w	r5, r5, r12
 80613e0: 4466         	add	r6, r12
 80613e2: dd09         	ble	0x80613f8 <__sflush_r+0xb4> @ imm = #0x12
 80613e4: 2d00         	cmp	r5, #0x0
 80613e6: dcf0         	bgt	0x80613ca <__sflush_r+0x86> @ imm = #-0x20
 80613e8: 2000         	movs	r0, #0x0
 80613ea: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 80613ec: 6be3         	ldr	r3, [r4, #0x3c]
 80613ee: 2b00         	cmp	r3, #0x0
 80613f0: dcb5         	bgt	0x806135e <__sflush_r+0x1a> @ imm = #-0x96
 80613f2: e7f9         	b	0x80613e8 <__sflush_r+0xa4> @ imm = #-0xe
 80613f4: 6d20         	ldr	r0, [r4, #0x50]
 80613f6: e7c4         	b	0x8061382 <__sflush_r+0x3e> @ imm = #-0x78
 80613f8: 89a3         	ldrh	r3, [r4, #0xc]
 80613fa: f04f 30ff    	mov.w	r0, #0xffffffff
 80613fe: f043 0340    	orr	r3, r3, #0x40
 8061402: 81a3         	strh	r3, [r4, #0xc]
 8061404: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8061406: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 806140a: 2200         	movs	r2, #0x0
 806140c: f423 6300    	bic	r3, r3, #0x800
 8061410: 6062         	str	r2, [r4, #0x4]
 8061412: 6922         	ldr	r2, [r4, #0x10]
 8061414: 81a3         	strh	r3, [r4, #0xc]
 8061416: 6022         	str	r2, [r4]
 8061418: 04da         	lsls	r2, r3, #0x13
 806141a: d500         	bpl	0x806141e <__sflush_r+0xda> @ imm = #0x0
 806141c: 6520         	str	r0, [r4, #0x50]
 806141e: 6b21         	ldr	r1, [r4, #0x30]
 8061420: 603e         	str	r6, [r7]
 8061422: 2900         	cmp	r1, #0x0
 8061424: d0e0         	beq	0x80613e8 <__sflush_r+0xa4> @ imm = #-0x40
 8061426: f104 0340    	add.w	r3, r4, #0x40
 806142a: 4299         	cmp	r1, r3
 806142c: d002         	beq	0x8061434 <__sflush_r+0xf0> @ imm = #0x4
 806142e: 4638         	mov	r0, r7
 8061430: f000 f9be    	bl	0x80617b0 <_free_r>     @ imm = #0x37c
 8061434: 2300         	movs	r3, #0x0
 8061436: 4618         	mov	r0, r3
 8061438: 6323         	str	r3, [r4, #0x30]
 806143a: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 806143c: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x8061478 <__sflush_r+0x134>
 806143e: 40d3         	lsrs	r3, r2
 8061440: 43db         	mvns	r3, r3
 8061442: f013 0301    	ands	r3, r3, #0x1
 8061446: d1ae         	bne	0x80613a6 <__sflush_r+0x62> @ imm = #-0xa4
 8061448: 6063         	str	r3, [r4, #0x4]
 806144a: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 806144e: 6921         	ldr	r1, [r4, #0x10]
 8061450: f423 6300    	bic	r3, r3, #0x800
 8061454: 6021         	str	r1, [r4]
 8061456: 81a3         	strh	r3, [r4, #0xc]
 8061458: 04db         	lsls	r3, r3, #0x13
 806145a: d5e0         	bpl	0x806141e <__sflush_r+0xda> @ imm = #-0x40
 806145c: 2a00         	cmp	r2, #0x0
 806145e: d1de         	bne	0x806141e <__sflush_r+0xda> @ imm = #-0x44
 8061460: e7dc         	b	0x806141c <__sflush_r+0xd8> @ imm = #-0x48
 8061462: 683b         	ldr	r3, [r7]
 8061464: 2b00         	cmp	r3, #0x0
 8061466: d08a         	beq	0x806137e <__sflush_r+0x3a> @ imm = #-0xec
 8061468: 2b1d         	cmp	r3, #0x1d
 806146a: d001         	beq	0x8061470 <__sflush_r+0x12c> @ imm = #0x2
 806146c: 2b16         	cmp	r3, #0x16
 806146e: d19a         	bne	0x80613a6 <__sflush_r+0x62> @ imm = #-0xcc
 8061470: 2000         	movs	r0, #0x0
 8061472: 603e         	str	r6, [r7]
 8061474: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8061476: bf00         	nop

08061478 <$d>:
 8061478: 01 00 40 20  	.word	0x20400001

0806147c <_fflush_r>:
 806147c: b538         	push	{r3, r4, r5, lr}
 806147e: 4604         	mov	r4, r0
 8061480: 460d         	mov	r5, r1
 8061482: b108         	cbz	r0, 0x8061488 <_fflush_r+0xc> @ imm = #0x2
 8061484: 6b83         	ldr	r3, [r0, #0x38]
 8061486: b11b         	cbz	r3, 0x8061490 <_fflush_r+0x14> @ imm = #0x6
 8061488: f9b5 000c    	ldrsh.w	r0, [r5, #0xc]
 806148c: b930         	cbnz	r0, 0x806149c <_fflush_r+0x20> @ imm = #0xc
 806148e: bd38         	pop	{r3, r4, r5, pc}
 8061490: f000 f91e    	bl	0x80616d0 <__sinit>     @ imm = #0x23c
 8061494: f9b5 000c    	ldrsh.w	r0, [r5, #0xc]
 8061498: 2800         	cmp	r0, #0x0
 806149a: d0f8         	beq	0x806148e <_fflush_r+0x12> @ imm = #-0x10
 806149c: 4629         	mov	r1, r5
 806149e: 4620         	mov	r0, r4
 80614a0: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 80614a4: f7ff bf4e    	b.w	0x8061344 <__sflush_r>  @ imm = #-0x164

080614a8 <fflush>:
 80614a8: b538         	push	{r3, r4, r5, lr}
 80614aa: b1b8         	cbz	r0, 0x80614dc <fflush+0x34> @ imm = #0x2e
 80614ac: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x80614ec <fflush+0x44>
 80614ae: 4604         	mov	r4, r0
 80614b0: 681d         	ldr	r5, [r3]
 80614b2: b10d         	cbz	r5, 0x80614b8 <fflush+0x10> @ imm = #0x2
 80614b4: 6bab         	ldr	r3, [r5, #0x38]
 80614b6: b14b         	cbz	r3, 0x80614cc <fflush+0x24> @ imm = #0x12
 80614b8: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 80614bc: b900         	cbnz	r0, 0x80614c0 <fflush+0x18> @ imm = #0x0
 80614be: bd38         	pop	{r3, r4, r5, pc}
 80614c0: 4621         	mov	r1, r4
 80614c2: 4628         	mov	r0, r5
 80614c4: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 80614c8: f7ff bf3c    	b.w	0x8061344 <__sflush_r>  @ imm = #-0x188
 80614cc: 4628         	mov	r0, r5
 80614ce: f000 f8ff    	bl	0x80616d0 <__sinit>     @ imm = #0x1fe
 80614d2: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 80614d6: 2800         	cmp	r0, #0x0
 80614d8: d0f1         	beq	0x80614be <fflush+0x16> @ imm = #-0x1e
 80614da: e7f1         	b	0x80614c0 <fflush+0x18> @ imm = #-0x1e
 80614dc: 4b04         	ldr	r3, [pc, #0x10]         @ 0x80614f0 <fflush+0x48>
 80614de: 4905         	ldr	r1, [pc, #0x14]         @ 0x80614f4 <fflush+0x4c>
 80614e0: 6818         	ldr	r0, [r3]
 80614e2: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 80614e6: f000 ba89    	b.w	0x80619fc <_fwalk_reent> @ imm = #0x512
 80614ea: bf00         	nop

080614ec <$d>:
 80614ec: 90 23 00 20  	.word	0x20002390
 80614f0: 7c 5a 06 08  	.word	0x08065a7c
 80614f4: 7d 14 06 08  	.word	0x0806147d

080614f8 <__fp_lock>:
 80614f8: 2000         	movs	r0, #0x0
 80614fa: 4770         	bx	lr

080614fc <_cleanup_r>:
 80614fc: 4901         	ldr	r1, [pc, #0x4]          @ 0x8061504 <_cleanup_r+0x8>
 80614fe: f000 ba7d    	b.w	0x80619fc <_fwalk_reent> @ imm = #0x4fa
 8061502: bf00         	nop

08061504 <$d>:
 8061504: 25 3b 06 08  	.word	0x08063b25

08061508 <__fp_unlock>:
 8061508: 2000         	movs	r0, #0x0
 806150a: 4770         	bx	lr

0806150c <__sinit.part.0>:
 806150c: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8061510: 492d         	ldr	r1, [pc, #0xb4]         @ 0x80615c8 <__sinit.part.0+0xbc>
 8061512: 2400         	movs	r4, #0x0
 8061514: 6846         	ldr	r6, [r0, #0x4]
 8061516: 4607         	mov	r7, r0
 8061518: 2304         	movs	r3, #0x4
 806151a: 2203         	movs	r2, #0x3
 806151c: f500 703b    	add.w	r0, r0, #0x2ec
 8061520: 63f9         	str	r1, [r7, #0x3c]
 8061522: 4621         	mov	r1, r4
 8061524: f8df b0a4    	ldr.w	r11, [pc, #0xa4]        @ 0x80615cc <__sinit.part.0+0xc0>
 8061528: f8c7 02e8    	str.w	r0, [r7, #0x2e8]
 806152c: f106 005c    	add.w	r0, r6, #0x5c
 8061530: f8df a09c    	ldr.w	r10, [pc, #0x9c]        @ 0x80615d0 <__sinit.part.0+0xc4>
 8061534: f8df 909c    	ldr.w	r9, [pc, #0x9c]         @ 0x80615d4 <__sinit.part.0+0xc8>
 8061538: f8df 809c    	ldr.w	r8, [pc, #0x9c]         @ 0x80615d8 <__sinit.part.0+0xcc>
 806153c: e9c7 42b8    	strd	r4, r2, [r7, #736]
 8061540: 2208         	movs	r2, #0x8
 8061542: 6674         	str	r4, [r6, #0x64]
 8061544: 61b4         	str	r4, [r6, #0x18]
 8061546: e9c6 4302    	strd	r4, r3, [r6, #8]
 806154a: e9c6 4400    	strd	r4, r4, [r6]
 806154e: e9c6 4404    	strd	r4, r4, [r6, #16]
 8061552: f7fd fb3b    	bl	0x805ebcc <memset>      @ imm = #-0x298a
 8061556: 68bd         	ldr	r5, [r7, #0x8]
 8061558: 4b20         	ldr	r3, [pc, #0x80]         @ 0x80615dc <__sinit.part.0+0xd0>
 806155a: 2208         	movs	r2, #0x8
 806155c: f8c6 a024    	str.w	r10, [r6, #0x24]
 8061560: 4621         	mov	r1, r4
 8061562: f8c6 9028    	str.w	r9, [r6, #0x28]
 8061566: f105 005c    	add.w	r0, r5, #0x5c
 806156a: f8c6 802c    	str.w	r8, [r6, #0x2c]
 806156e: e9c6 6b07    	strd	r6, r11, [r6, #28]
 8061572: 60eb         	str	r3, [r5, #0xc]
 8061574: 666c         	str	r4, [r5, #0x64]
 8061576: 60ac         	str	r4, [r5, #0x8]
 8061578: 61ac         	str	r4, [r5, #0x18]
 806157a: e9c5 4400    	strd	r4, r4, [r5]
 806157e: e9c5 4404    	strd	r4, r4, [r5, #16]
 8061582: f7fd fb23    	bl	0x805ebcc <memset>      @ imm = #-0x29ba
 8061586: 4b16         	ldr	r3, [pc, #0x58]         @ 0x80615e0 <__sinit.part.0+0xd4>
 8061588: f8c5 802c    	str.w	r8, [r5, #0x2c]
 806158c: 4621         	mov	r1, r4
 806158e: 2208         	movs	r2, #0x8
 8061590: e9c5 5b07    	strd	r5, r11, [r5, #28]
 8061594: e9c5 a909    	strd	r10, r9, [r5, #36]
 8061598: 68fd         	ldr	r5, [r7, #0xc]
 806159a: 60eb         	str	r3, [r5, #0xc]
 806159c: f105 005c    	add.w	r0, r5, #0x5c
 80615a0: 666c         	str	r4, [r5, #0x64]
 80615a2: 60ac         	str	r4, [r5, #0x8]
 80615a4: 61ac         	str	r4, [r5, #0x18]
 80615a6: e9c5 4400    	strd	r4, r4, [r5]
 80615aa: e9c5 4404    	strd	r4, r4, [r5, #16]
 80615ae: f7fd fb0d    	bl	0x805ebcc <memset>      @ imm = #-0x29e6
 80615b2: 2301         	movs	r3, #0x1
 80615b4: f8c5 a024    	str.w	r10, [r5, #0x24]
 80615b8: e9c5 5b07    	strd	r5, r11, [r5, #28]
 80615bc: e9c5 980a    	strd	r9, r8, [r5, #40]
 80615c0: 63bb         	str	r3, [r7, #0x38]
 80615c2: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80615c6: bf00         	nop

080615c8 <$d>:
 80615c8: fd 14 06 08  	.word	0x080614fd
 80615cc: 19 2c 06 08  	.word	0x08062c19
 80615d0: 41 2c 06 08  	.word	0x08062c41
 80615d4: 81 2c 06 08  	.word	0x08062c81
 80615d8: a5 2c 06 08  	.word	0x08062ca5
 80615dc: 09 00 01 00  	.word	0x00010009
 80615e0: 12 00 02 00  	.word	0x00020012

080615e4 <__sfmoreglue>:
 80615e4: b570         	push	{r4, r5, r6, lr}
 80615e6: 2268         	movs	r2, #0x68
 80615e8: 1e4e         	subs	r6, r1, #0x1
 80615ea: 460d         	mov	r5, r1
 80615ec: fb02 f606    	mul	r6, r2, r6
 80615f0: f106 0174    	add.w	r1, r6, #0x74
 80615f4: f000 face    	bl	0x8061b94 <_malloc_r>   @ imm = #0x59c
 80615f8: 4604         	mov	r4, r0
 80615fa: b140         	cbz	r0, 0x806160e <__sfmoreglue+0x2a> @ imm = #0x10
 80615fc: 2100         	movs	r1, #0x0
 80615fe: 300c         	adds	r0, #0xc
 8061600: f106 0268    	add.w	r2, r6, #0x68
 8061604: 60a0         	str	r0, [r4, #0x8]
 8061606: e9c4 1500    	strd	r1, r5, [r4]
 806160a: f7fd fadf    	bl	0x805ebcc <memset>      @ imm = #-0x2a42
 806160e: 4620         	mov	r0, r4
 8061610: bd70         	pop	{r4, r5, r6, pc}
 8061612: bf00         	nop

08061614 <__sfp>:
 8061614: 4b27         	ldr	r3, [pc, #0x9c]         @ 0x80616b4 <__sfp+0xa0>
 8061616: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 806161a: 681e         	ldr	r6, [r3]
 806161c: 4607         	mov	r7, r0
 806161e: 6bb3         	ldr	r3, [r6, #0x38]
 8061620: b35b         	cbz	r3, 0x806167a <__sfp+0x66> @ imm = #0x56
 8061622: f506 7638    	add.w	r6, r6, #0x2e0
 8061626: f04f 0804    	mov.w	r8, #0x4
 806162a: e9d6 3401    	ldrd	r3, r4, [r6, #4]
 806162e: 3b01         	subs	r3, #0x1
 8061630: d504         	bpl	0x806163c <__sfp+0x28>  @ imm = #0x8
 8061632: e01e         	b	0x8061672 <__sfp+0x5e>  @ imm = #0x3c
 8061634: 1c5a         	adds	r2, r3, #0x1
 8061636: f104 0468    	add.w	r4, r4, #0x68
 806163a: d01a         	beq	0x8061672 <__sfp+0x5e>  @ imm = #0x34
 806163c: f9b4 500c    	ldrsh.w	r5, [r4, #0xc]
 8061640: 3b01         	subs	r3, #0x1
 8061642: 2d00         	cmp	r5, #0x0
 8061644: d1f6         	bne	0x8061634 <__sfp+0x20>  @ imm = #-0x14
 8061646: 4b1c         	ldr	r3, [pc, #0x70]         @ 0x80616b8 <__sfp+0xa4>
 8061648: 2208         	movs	r2, #0x8
 806164a: 4629         	mov	r1, r5
 806164c: f104 005c    	add.w	r0, r4, #0x5c
 8061650: 6665         	str	r5, [r4, #0x64]
 8061652: 61a5         	str	r5, [r4, #0x18]
 8061654: e9c4 5500    	strd	r5, r5, [r4]
 8061658: e9c4 5302    	strd	r5, r3, [r4, #8]
 806165c: e9c4 5504    	strd	r5, r5, [r4, #16]
 8061660: f7fd fab4    	bl	0x805ebcc <memset>      @ imm = #-0x2a98
 8061664: e9c4 550c    	strd	r5, r5, [r4, #48]
 8061668: e9c4 5511    	strd	r5, r5, [r4, #68]
 806166c: 4620         	mov	r0, r4
 806166e: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8061672: 6835         	ldr	r5, [r6]
 8061674: b12d         	cbz	r5, 0x8061682 <__sfp+0x6e> @ imm = #0xa
 8061676: 462e         	mov	r6, r5
 8061678: e7d7         	b	0x806162a <__sfp+0x16>  @ imm = #-0x52
 806167a: 4630         	mov	r0, r6
 806167c: f7ff ff46    	bl	0x806150c <__sinit.part.0> @ imm = #-0x174
 8061680: e7cf         	b	0x8061622 <__sfp+0xe>   @ imm = #-0x62
 8061682: f44f 71d6    	mov.w	r1, #0x1ac
 8061686: 4638         	mov	r0, r7
 8061688: f000 fa84    	bl	0x8061b94 <_malloc_r>   @ imm = #0x508
 806168c: 4604         	mov	r4, r0
 806168e: b168         	cbz	r0, 0x80616ac <__sfp+0x98> @ imm = #0x1a
 8061690: 6005         	str	r5, [r0]
 8061692: 300c         	adds	r0, #0xc
 8061694: 4629         	mov	r1, r5
 8061696: 4625         	mov	r5, r4
 8061698: f840 8c08    	str	r8, [r0, #-8]
 806169c: f44f 72d0    	mov.w	r2, #0x1a0
 80616a0: 60a0         	str	r0, [r4, #0x8]
 80616a2: f7fd fa93    	bl	0x805ebcc <memset>      @ imm = #-0x2ada
 80616a6: 6034         	str	r4, [r6]
 80616a8: 462e         	mov	r6, r5
 80616aa: e7be         	b	0x806162a <__sfp+0x16>  @ imm = #-0x84
 80616ac: 230c         	movs	r3, #0xc
 80616ae: 6030         	str	r0, [r6]
 80616b0: 603b         	str	r3, [r7]
 80616b2: e7db         	b	0x806166c <__sfp+0x58>  @ imm = #-0x4a

080616b4 <$d>:
 80616b4: 7c 5a 06 08  	.word	0x08065a7c
 80616b8: 01 00 ff ff  	.word	0xffff0001

080616bc <_cleanup>:
 80616bc: 4b02         	ldr	r3, [pc, #0x8]          @ 0x80616c8 <_cleanup+0xc>
 80616be: 4903         	ldr	r1, [pc, #0xc]          @ 0x80616cc <_cleanup+0x10>
 80616c0: 6818         	ldr	r0, [r3]
 80616c2: f000 b99b    	b.w	0x80619fc <_fwalk_reent> @ imm = #0x336
 80616c6: bf00         	nop

080616c8 <$d>:
 80616c8: 7c 5a 06 08  	.word	0x08065a7c
 80616cc: 25 3b 06 08  	.word	0x08063b25

080616d0 <__sinit>:
 80616d0: 6b83         	ldr	r3, [r0, #0x38]
 80616d2: b103         	cbz	r3, 0x80616d6 <__sinit+0x6> @ imm = #0x0
 80616d4: 4770         	bx	lr
 80616d6: e719         	b	0x806150c <__sinit.part.0> @ imm = #-0x1ce

080616d8 <__sfp_lock_acquire>:
 80616d8: 4770         	bx	lr
 80616da: bf00         	nop

080616dc <__sfp_lock_release>:
 80616dc: 4770         	bx	lr
 80616de: bf00         	nop

080616e0 <__sinit_lock_acquire>:
 80616e0: 4770         	bx	lr
 80616e2: bf00         	nop

080616e4 <__sinit_lock_release>:
 80616e4: 4770         	bx	lr
 80616e6: bf00         	nop

080616e8 <__fp_lock_all>:
 80616e8: 4b02         	ldr	r3, [pc, #0x8]          @ 0x80616f4 <__fp_lock_all+0xc>
 80616ea: 4903         	ldr	r1, [pc, #0xc]          @ 0x80616f8 <__fp_lock_all+0x10>
 80616ec: 6818         	ldr	r0, [r3]
 80616ee: f000 b965    	b.w	0x80619bc <_fwalk>      @ imm = #0x2ca
 80616f2: bf00         	nop

080616f4 <$d>:
 80616f4: 90 23 00 20  	.word	0x20002390
 80616f8: f9 14 06 08  	.word	0x080614f9

080616fc <__fp_unlock_all>:
 80616fc: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8061708 <__fp_unlock_all+0xc>
 80616fe: 4903         	ldr	r1, [pc, #0xc]          @ 0x806170c <__fp_unlock_all+0x10>
 8061700: 6818         	ldr	r0, [r3]
 8061702: f000 b95b    	b.w	0x80619bc <_fwalk>      @ imm = #0x2b6
 8061706: bf00         	nop

08061708 <$d>:
 8061708: 90 23 00 20  	.word	0x20002390
 806170c: 09 15 06 08  	.word	0x08061509

08061710 <_malloc_trim_r>:
 8061710: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 8061712: 4f23         	ldr	r7, [pc, #0x8c]         @ 0x80617a0 <_malloc_trim_r+0x90>
 8061714: 460c         	mov	r4, r1
 8061716: 4606         	mov	r6, r0
 8061718: f000 fd30    	bl	0x806217c <__malloc_lock> @ imm = #0xa60
 806171c: 68ba         	ldr	r2, [r7, #0x8]
 806171e: f640 73ef    	movw	r3, #0xfef
 8061722: 6855         	ldr	r5, [r2, #0x4]
 8061724: 1b1b         	subs	r3, r3, r4
 8061726: 4c1f         	ldr	r4, [pc, #0x7c]         @ 0x80617a4 <_malloc_trim_r+0x94>
 8061728: f025 0503    	bic	r5, r5, #0x3
 806172c: 442b         	add	r3, r5
 806172e: 401c         	ands	r4, r3
 8061730: f5a4 5480    	sub.w	r4, r4, #0x1000
 8061734: f5b4 5f80    	cmp.w	r4, #0x1000
 8061738: db07         	blt	0x806174a <_malloc_trim_r+0x3a> @ imm = #0xe
 806173a: 2100         	movs	r1, #0x0
 806173c: 4630         	mov	r0, r6
 806173e: f001 fa59    	bl	0x8062bf4 <_sbrk_r>     @ imm = #0x14b2
 8061742: 68bb         	ldr	r3, [r7, #0x8]
 8061744: 442b         	add	r3, r5
 8061746: 4298         	cmp	r0, r3
 8061748: d004         	beq	0x8061754 <_malloc_trim_r+0x44> @ imm = #0x8
 806174a: 4630         	mov	r0, r6
 806174c: f000 fd18    	bl	0x8062180 <__malloc_unlock> @ imm = #0xa30
 8061750: 2000         	movs	r0, #0x0
 8061752: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8061754: 4261         	rsbs	r1, r4, #0
 8061756: 4630         	mov	r0, r6
 8061758: f001 fa4c    	bl	0x8062bf4 <_sbrk_r>     @ imm = #0x1498
 806175c: 3001         	adds	r0, #0x1
 806175e: d00d         	beq	0x806177c <_malloc_trim_r+0x6c> @ imm = #0x1a
 8061760: 1b2d         	subs	r5, r5, r4
 8061762: 4b11         	ldr	r3, [pc, #0x44]         @ 0x80617a8 <_malloc_trim_r+0x98>
 8061764: 68ba         	ldr	r2, [r7, #0x8]
 8061766: 4630         	mov	r0, r6
 8061768: f045 0501    	orr	r5, r5, #0x1
 806176c: 6055         	str	r5, [r2, #0x4]
 806176e: 681a         	ldr	r2, [r3]
 8061770: 1b12         	subs	r2, r2, r4
 8061772: 601a         	str	r2, [r3]
 8061774: f000 fd04    	bl	0x8062180 <__malloc_unlock> @ imm = #0xa08
 8061778: 2001         	movs	r0, #0x1
 806177a: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 806177c: 2100         	movs	r1, #0x0
 806177e: 4630         	mov	r0, r6
 8061780: f001 fa38    	bl	0x8062bf4 <_sbrk_r>     @ imm = #0x1470
 8061784: 68ba         	ldr	r2, [r7, #0x8]
 8061786: 1a83         	subs	r3, r0, r2
 8061788: 2b0f         	cmp	r3, #0xf
 806178a: ddde         	ble	0x806174a <_malloc_trim_r+0x3a> @ imm = #-0x44
 806178c: f043 0301    	orr	r3, r3, #0x1
 8061790: 4905         	ldr	r1, [pc, #0x14]         @ 0x80617a8 <_malloc_trim_r+0x98>
 8061792: 6053         	str	r3, [r2, #0x4]
 8061794: 4b05         	ldr	r3, [pc, #0x14]         @ 0x80617ac <_malloc_trim_r+0x9c>
 8061796: 681b         	ldr	r3, [r3]
 8061798: 1ac0         	subs	r0, r0, r3
 806179a: 6008         	str	r0, [r1]
 806179c: e7d5         	b	0x806174a <_malloc_trim_r+0x3a> @ imm = #-0x56
 806179e: bf00         	nop

080617a0 <$d>:
 80617a0: c0 27 00 20  	.word	0x200027c0
 80617a4: 00 f0 ff ff  	.word	0xfffff000
 80617a8: 6c 2f 00 20  	.word	0x20002f6c
 80617ac: c8 2b 00 20  	.word	0x20002bc8

080617b0 <_free_r>:
 80617b0: 2900         	cmp	r1, #0x0
 80617b2: d061         	beq	0x8061878 <_free_r+0xc8> @ imm = #0xc2
 80617b4: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 80617b6: 460c         	mov	r4, r1
 80617b8: 4606         	mov	r6, r0
 80617ba: f000 fcdf    	bl	0x806217c <__malloc_lock> @ imm = #0x9be
 80617be: 4f7c         	ldr	r7, [pc, #0x1f0]        @ 0x80619b0 <_free_r+0x200>
 80617c0: f854 2c04    	ldr	r2, [r4, #-4]
 80617c4: f1a4 0508    	sub.w	r5, r4, #0x8
 80617c8: 68b8         	ldr	r0, [r7, #0x8]
 80617ca: f022 0101    	bic	r1, r2, #0x1
 80617ce: eb05 0c01    	add.w	r12, r5, r1
 80617d2: f8dc 3004    	ldr.w	r3, [r12, #0x4]
 80617d6: 4560         	cmp	r0, r12
 80617d8: f023 0303    	bic	r3, r3, #0x3
 80617dc: f000 808b    	beq.w	0x80618f6 <_free_r+0x146> @ imm = #0x116
 80617e0: 07d2         	lsls	r2, r2, #0x1f
 80617e2: f8cc 3004    	str.w	r3, [r12, #0x4]
 80617e6: d432         	bmi	0x806184e <_free_r+0x9e> @ imm = #0x64
 80617e8: f854 2c08    	ldr	r2, [r4, #-8]
 80617ec: f107 0008    	add.w	r0, r7, #0x8
 80617f0: 1aad         	subs	r5, r5, r2
 80617f2: 4411         	add	r1, r2
 80617f4: 68aa         	ldr	r2, [r5, #0x8]
 80617f6: 4282         	cmp	r2, r0
 80617f8: d06a         	beq	0x80618d0 <_free_r+0x120> @ imm = #0xd4
 80617fa: eb0c 0403    	add.w	r4, r12, r3
 80617fe: f8d4 e004    	ldr.w	lr, [r4, #0x4]
 8061802: 68ec         	ldr	r4, [r5, #0xc]
 8061804: f01e 0f01    	tst.w	lr, #0x1
 8061808: 60d4         	str	r4, [r2, #0xc]
 806180a: 60a2         	str	r2, [r4, #0x8]
 806180c: f000 8097    	beq.w	0x806193e <_free_r+0x18e> @ imm = #0x12e
 8061810: f041 0301    	orr	r3, r1, #0x1
 8061814: 606b         	str	r3, [r5, #0x4]
 8061816: f8cc 1000    	str.w	r1, [r12]
 806181a: f5b1 7f00    	cmp.w	r1, #0x200
 806181e: d235         	bhs	0x806188c <_free_r+0xdc> @ imm = #0x6a
 8061820: 094a         	lsrs	r2, r1, #0x5
 8061822: 08cb         	lsrs	r3, r1, #0x3
 8061824: 2101         	movs	r1, #0x1
 8061826: 3301         	adds	r3, #0x1
 8061828: 4091         	lsls	r1, r2
 806182a: 687a         	ldr	r2, [r7, #0x4]
 806182c: 4311         	orrs	r1, r2
 806182e: eb07 02c3    	add.w	r2, r7, r3, lsl #3
 8061832: 6079         	str	r1, [r7, #0x4]
 8061834: 3a08         	subs	r2, #0x8
 8061836: f857 1033    	ldr.w	r1, [r7, r3, lsl #3]
 806183a: e9c5 1202    	strd	r1, r2, [r5, #8]
 806183e: f847 5033    	str.w	r5, [r7, r3, lsl #3]
 8061842: 60cd         	str	r5, [r1, #0xc]
 8061844: 4630         	mov	r0, r6
 8061846: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 806184a: f000 bc99    	b.w	0x8062180 <__malloc_unlock> @ imm = #0x932
 806184e: eb0c 0203    	add.w	r2, r12, r3
 8061852: 6852         	ldr	r2, [r2, #0x4]
 8061854: 07d0         	lsls	r0, r2, #0x1f
 8061856: d410         	bmi	0x806187a <_free_r+0xca> @ imm = #0x20
 8061858: 4419         	add	r1, r3
 806185a: f107 0008    	add.w	r0, r7, #0x8
 806185e: f8dc 3008    	ldr.w	r3, [r12, #0x8]
 8061862: 4283         	cmp	r3, r0
 8061864: d073         	beq	0x806194e <_free_r+0x19e> @ imm = #0xe6
 8061866: f8dc 200c    	ldr.w	r2, [r12, #0xc]
 806186a: 60da         	str	r2, [r3, #0xc]
 806186c: 6093         	str	r3, [r2, #0x8]
 806186e: f041 0301    	orr	r3, r1, #0x1
 8061872: 606b         	str	r3, [r5, #0x4]
 8061874: 5069         	str	r1, [r5, r1]
 8061876: e7d0         	b	0x806181a <_free_r+0x6a> @ imm = #-0x60
 8061878: 4770         	bx	lr
 806187a: f041 0301    	orr	r3, r1, #0x1
 806187e: f5b1 7f00    	cmp.w	r1, #0x200
 8061882: f844 3c04    	str	r3, [r4, #-4]
 8061886: f8cc 1000    	str.w	r1, [r12]
 806188a: d3c9         	blo	0x8061820 <_free_r+0x70> @ imm = #-0x6e
 806188c: f5b1 6f20    	cmp.w	r1, #0xa00
 8061890: ea4f 2351    	lsr.w	r3, r1, #0x9
 8061894: d248         	bhs	0x8061928 <_free_r+0x178> @ imm = #0x90
 8061896: 098b         	lsrs	r3, r1, #0x6
 8061898: f103 0039    	add.w	r0, r3, #0x39
 806189c: f103 0238    	add.w	r2, r3, #0x38
 80618a0: 00c3         	lsls	r3, r0, #0x3
 80618a2: 18f8         	adds	r0, r7, r3
 80618a4: 58fb         	ldr	r3, [r7, r3]
 80618a6: 3808         	subs	r0, #0x8
 80618a8: 4298         	cmp	r0, r3
 80618aa: d059         	beq	0x8061960 <_free_r+0x1b0> @ imm = #0xb2
 80618ac: 685a         	ldr	r2, [r3, #0x4]
 80618ae: f022 0203    	bic	r2, r2, #0x3
 80618b2: 428a         	cmp	r2, r1
 80618b4: d902         	bls	0x80618bc <_free_r+0x10c> @ imm = #0x4
 80618b6: 689b         	ldr	r3, [r3, #0x8]
 80618b8: 4298         	cmp	r0, r3
 80618ba: d1f7         	bne	0x80618ac <_free_r+0xfc> @ imm = #-0x12
 80618bc: 68d8         	ldr	r0, [r3, #0xc]
 80618be: e9c5 3002    	strd	r3, r0, [r5, #8]
 80618c2: 6085         	str	r5, [r0, #0x8]
 80618c4: 4630         	mov	r0, r6
 80618c6: 60dd         	str	r5, [r3, #0xc]
 80618c8: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 80618cc: f000 bc58    	b.w	0x8062180 <__malloc_unlock> @ imm = #0x8b0
 80618d0: eb0c 0203    	add.w	r2, r12, r3
 80618d4: 6852         	ldr	r2, [r2, #0x4]
 80618d6: 07d2         	lsls	r2, r2, #0x1f
 80618d8: d463         	bmi	0x80619a2 <_free_r+0x1f2> @ imm = #0xc6
 80618da: 440b         	add	r3, r1
 80618dc: 4630         	mov	r0, r6
 80618de: e9dc 1202    	ldrd	r1, r2, [r12, #8]
 80618e2: 60ca         	str	r2, [r1, #0xc]
 80618e4: 6091         	str	r1, [r2, #0x8]
 80618e6: f043 0201    	orr	r2, r3, #0x1
 80618ea: 606a         	str	r2, [r5, #0x4]
 80618ec: 50eb         	str	r3, [r5, r3]
 80618ee: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 80618f2: f000 bc45    	b.w	0x8062180 <__malloc_unlock> @ imm = #0x88a
 80618f6: 440b         	add	r3, r1
 80618f8: 07d1         	lsls	r1, r2, #0x1f
 80618fa: d407         	bmi	0x806190c <_free_r+0x15c> @ imm = #0xe
 80618fc: f854 2c08    	ldr	r2, [r4, #-8]
 8061900: 1aad         	subs	r5, r5, r2
 8061902: 4413         	add	r3, r2
 8061904: e9d5 1202    	ldrd	r1, r2, [r5, #8]
 8061908: 60ca         	str	r2, [r1, #0xc]
 806190a: 6091         	str	r1, [r2, #0x8]
 806190c: f043 0201    	orr	r2, r3, #0x1
 8061910: 606a         	str	r2, [r5, #0x4]
 8061912: 4a28         	ldr	r2, [pc, #0xa0]         @ 0x80619b4 <_free_r+0x204>
 8061914: 60bd         	str	r5, [r7, #0x8]
 8061916: 6812         	ldr	r2, [r2]
 8061918: 429a         	cmp	r2, r3
 806191a: d893         	bhi	0x8061844 <_free_r+0x94> @ imm = #-0xda
 806191c: 4b26         	ldr	r3, [pc, #0x98]         @ 0x80619b8 <_free_r+0x208>
 806191e: 4630         	mov	r0, r6
 8061920: 6819         	ldr	r1, [r3]
 8061922: f7ff fef5    	bl	0x8061710 <_malloc_trim_r> @ imm = #-0x216
 8061926: e78d         	b	0x8061844 <_free_r+0x94> @ imm = #-0xe6
 8061928: 2b14         	cmp	r3, #0x14
 806192a: d90a         	bls	0x8061942 <_free_r+0x192> @ imm = #0x14
 806192c: 2b54         	cmp	r3, #0x54
 806192e: d81f         	bhi	0x8061970 <_free_r+0x1c0> @ imm = #0x3e
 8061930: 0b0b         	lsrs	r3, r1, #0xc
 8061932: f103 006f    	add.w	r0, r3, #0x6f
 8061936: f103 026e    	add.w	r2, r3, #0x6e
 806193a: 00c3         	lsls	r3, r0, #0x3
 806193c: e7b1         	b	0x80618a2 <_free_r+0xf2> @ imm = #-0x9e
 806193e: 4419         	add	r1, r3
 8061940: e78d         	b	0x806185e <_free_r+0xae> @ imm = #-0xe6
 8061942: f103 005c    	add.w	r0, r3, #0x5c
 8061946: f103 025b    	add.w	r2, r3, #0x5b
 806194a: 00c3         	lsls	r3, r0, #0x3
 806194c: e7a9         	b	0x80618a2 <_free_r+0xf2> @ imm = #-0xae
 806194e: f041 0301    	orr	r3, r1, #0x1
 8061952: e9c7 5504    	strd	r5, r5, [r7, #16]
 8061956: e9c5 0002    	strd	r0, r0, [r5, #8]
 806195a: 606b         	str	r3, [r5, #0x4]
 806195c: 5069         	str	r1, [r5, r1]
 806195e: e771         	b	0x8061844 <_free_r+0x94> @ imm = #-0x11e
 8061960: 2101         	movs	r1, #0x1
 8061962: 1092         	asrs	r2, r2, #0x2
 8061964: fa01 f202    	lsl.w	r2, r1, r2
 8061968: 6879         	ldr	r1, [r7, #0x4]
 806196a: 430a         	orrs	r2, r1
 806196c: 607a         	str	r2, [r7, #0x4]
 806196e: e7a6         	b	0x80618be <_free_r+0x10e> @ imm = #-0xb4
 8061970: f5b3 7faa    	cmp.w	r3, #0x154
 8061974: d806         	bhi	0x8061984 <_free_r+0x1d4> @ imm = #0xc
 8061976: 0bcb         	lsrs	r3, r1, #0xf
 8061978: f103 0078    	add.w	r0, r3, #0x78
 806197c: f103 0277    	add.w	r2, r3, #0x77
 8061980: 00c3         	lsls	r3, r0, #0x3
 8061982: e78e         	b	0x80618a2 <_free_r+0xf2> @ imm = #-0xe4
 8061984: f240 5254    	movw	r2, #0x554
 8061988: 4293         	cmp	r3, r2
 806198a: d806         	bhi	0x806199a <_free_r+0x1ea> @ imm = #0xc
 806198c: 0c8b         	lsrs	r3, r1, #0x12
 806198e: f103 007d    	add.w	r0, r3, #0x7d
 8061992: f103 027c    	add.w	r2, r3, #0x7c
 8061996: 00c3         	lsls	r3, r0, #0x3
 8061998: e783         	b	0x80618a2 <_free_r+0xf2> @ imm = #-0xfa
 806199a: f44f 737e    	mov.w	r3, #0x3f8
 806199e: 227e         	movs	r2, #0x7e
 80619a0: e77f         	b	0x80618a2 <_free_r+0xf2> @ imm = #-0x102
 80619a2: f041 0301    	orr	r3, r1, #0x1
 80619a6: 606b         	str	r3, [r5, #0x4]
 80619a8: f8cc 1000    	str.w	r1, [r12]
 80619ac: e74a         	b	0x8061844 <_free_r+0x94> @ imm = #-0x16c
 80619ae: bf00         	nop

080619b0 <$d>:
 80619b0: c0 27 00 20  	.word	0x200027c0
 80619b4: cc 2b 00 20  	.word	0x20002bcc
 80619b8: 68 2f 00 20  	.word	0x20002f68

080619bc <_fwalk>:
 80619bc: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 80619c0: 2600         	movs	r6, #0x0
 80619c2: 4688         	mov	r8, r1
 80619c4: f500 7738    	add.w	r7, r0, #0x2e0
 80619c8: e9d7 5401    	ldrd	r5, r4, [r7, #4]
 80619cc: 3d01         	subs	r5, #0x1
 80619ce: d40e         	bmi	0x80619ee <_fwalk+0x32> @ imm = #0x1c
 80619d0: 89a3         	ldrh	r3, [r4, #0xc]
 80619d2: 3d01         	subs	r5, #0x1
 80619d4: 2b01         	cmp	r3, #0x1
 80619d6: d906         	bls	0x80619e6 <_fwalk+0x2a> @ imm = #0xc
 80619d8: f9b4 300e    	ldrsh.w	r3, [r4, #0xe]
 80619dc: 4620         	mov	r0, r4
 80619de: 3301         	adds	r3, #0x1
 80619e0: d001         	beq	0x80619e6 <_fwalk+0x2a> @ imm = #0x2
 80619e2: 47c0         	blx	r8
 80619e4: 4306         	orrs	r6, r0
 80619e6: 1c6b         	adds	r3, r5, #0x1
 80619e8: f104 0468    	add.w	r4, r4, #0x68
 80619ec: d1f0         	bne	0x80619d0 <_fwalk+0x14> @ imm = #-0x20
 80619ee: 683f         	ldr	r7, [r7]
 80619f0: 2f00         	cmp	r7, #0x0
 80619f2: d1e9         	bne	0x80619c8 <_fwalk+0xc>  @ imm = #-0x2e
 80619f4: 4630         	mov	r0, r6
 80619f6: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 80619fa: bf00         	nop

080619fc <_fwalk_reent>:
 80619fc: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
 8061a00: 2600         	movs	r6, #0x0
 8061a02: 4681         	mov	r9, r0
 8061a04: 4688         	mov	r8, r1
 8061a06: f500 7738    	add.w	r7, r0, #0x2e0
 8061a0a: e9d7 5401    	ldrd	r5, r4, [r7, #4]
 8061a0e: 3d01         	subs	r5, #0x1
 8061a10: d40f         	bmi	0x8061a32 <_fwalk_reent+0x36> @ imm = #0x1e
 8061a12: 89a3         	ldrh	r3, [r4, #0xc]
 8061a14: 3d01         	subs	r5, #0x1
 8061a16: 2b01         	cmp	r3, #0x1
 8061a18: d907         	bls	0x8061a2a <_fwalk_reent+0x2e> @ imm = #0xe
 8061a1a: f9b4 300e    	ldrsh.w	r3, [r4, #0xe]
 8061a1e: 4621         	mov	r1, r4
 8061a20: 4648         	mov	r0, r9
 8061a22: 3301         	adds	r3, #0x1
 8061a24: d001         	beq	0x8061a2a <_fwalk_reent+0x2e> @ imm = #0x2
 8061a26: 47c0         	blx	r8
 8061a28: 4306         	orrs	r6, r0
 8061a2a: 1c6b         	adds	r3, r5, #0x1
 8061a2c: f104 0468    	add.w	r4, r4, #0x68
 8061a30: d1ef         	bne	0x8061a12 <_fwalk_reent+0x16> @ imm = #-0x22
 8061a32: 683f         	ldr	r7, [r7]
 8061a34: 2f00         	cmp	r7, #0x0
 8061a36: d1e8         	bne	0x8061a0a <_fwalk_reent+0xe> @ imm = #-0x30
 8061a38: 4630         	mov	r0, r6
 8061a3a: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
 8061a3e: bf00         	nop

08061a40 <__localeconv_l>:
 8061a40: 30f0         	adds	r0, #0xf0
 8061a42: 4770         	bx	lr

08061a44 <_localeconv_r>:
 8061a44: 4800         	ldr	r0, [pc, #0x0]          @ 0x8061a48 <_localeconv_r+0x4>
 8061a46: 4770         	bx	lr

08061a48 <$d>:
 8061a48: c0 2c 00 20  	.word	0x20002cc0

08061a4c <localeconv>:
 8061a4c: 4800         	ldr	r0, [pc, #0x0]          @ 0x8061a50 <localeconv+0x4>
 8061a4e: 4770         	bx	lr

08061a50 <$d>:
 8061a50: c0 2c 00 20  	.word	0x20002cc0

08061a54 <__smakebuf_r>:
 8061a54: 898b         	ldrh	r3, [r1, #0xc]
 8061a56: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8061a5a: 460c         	mov	r4, r1
 8061a5c: 0799         	lsls	r1, r3, #0x1e
 8061a5e: b096         	sub	sp, #0x58
 8061a60: d508         	bpl	0x8061a74 <__smakebuf_r+0x20> @ imm = #0x10
 8061a62: f104 0343    	add.w	r3, r4, #0x43
 8061a66: 2201         	movs	r2, #0x1
 8061a68: 6023         	str	r3, [r4]
 8061a6a: e9c4 3204    	strd	r3, r2, [r4, #16]
 8061a6e: b016         	add	sp, #0x58
 8061a70: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8061a74: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 8061a78: 4606         	mov	r6, r0
 8061a7a: 2900         	cmp	r1, #0x0
 8061a7c: db27         	blt	0x8061ace <__smakebuf_r+0x7a> @ imm = #0x4e
 8061a7e: 466a         	mov	r2, sp
 8061a80: f002 f92e    	bl	0x8063ce0 <_fstat_r>    @ imm = #0x225c
 8061a84: 2800         	cmp	r0, #0x0
 8061a86: db21         	blt	0x8061acc <__smakebuf_r+0x78> @ imm = #0x42
 8061a88: 9d01         	ldr	r5, [sp, #0x4]
 8061a8a: f44f 6880    	mov.w	r8, #0x400
 8061a8e: f44f 6700    	mov.w	r7, #0x800
 8061a92: f405 4570    	and	r5, r5, #0xf000
 8061a96: f5a5 5500    	sub.w	r5, r5, #0x2000
 8061a9a: fab5 f585    	clz	r5, r5
 8061a9e: 096d         	lsrs	r5, r5, #0x5
 8061aa0: 4641         	mov	r1, r8
 8061aa2: 4630         	mov	r0, r6
 8061aa4: f000 f876    	bl	0x8061b94 <_malloc_r>   @ imm = #0xec
 8061aa8: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8061aac: b1f0         	cbz	r0, 0x8061aec <__smakebuf_r+0x98> @ imm = #0x3c
 8061aae: f043 0380    	orr	r3, r3, #0x80
 8061ab2: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x8061b30 <__smakebuf_r+0xdc>
 8061ab4: 63f2         	str	r2, [r6, #0x3c]
 8061ab6: f8c4 8014    	str.w	r8, [r4, #0x14]
 8061aba: 81a3         	strh	r3, [r4, #0xc]
 8061abc: 6020         	str	r0, [r4]
 8061abe: 6120         	str	r0, [r4, #0x10]
 8061ac0: bb35         	cbnz	r5, 0x8061b10 <__smakebuf_r+0xbc> @ imm = #0x4c
 8061ac2: 433b         	orrs	r3, r7
 8061ac4: 81a3         	strh	r3, [r4, #0xc]
 8061ac6: b016         	add	sp, #0x58
 8061ac8: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8061acc: 89a3         	ldrh	r3, [r4, #0xc]
 8061ace: f013 0580    	ands	r5, r3, #0x80
 8061ad2: d019         	beq	0x8061b08 <__smakebuf_r+0xb4> @ imm = #0x32
 8061ad4: f04f 0840    	mov.w	r8, #0x40
 8061ad8: 2500         	movs	r5, #0x0
 8061ada: 4630         	mov	r0, r6
 8061adc: 4641         	mov	r1, r8
 8061ade: 462f         	mov	r7, r5
 8061ae0: f000 f858    	bl	0x8061b94 <_malloc_r>   @ imm = #0xb0
 8061ae4: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8061ae8: 2800         	cmp	r0, #0x0
 8061aea: d1e0         	bne	0x8061aae <__smakebuf_r+0x5a> @ imm = #-0x40
 8061aec: 059a         	lsls	r2, r3, #0x16
 8061aee: d4be         	bmi	0x8061a6e <__smakebuf_r+0x1a> @ imm = #-0x84
 8061af0: f023 0303    	bic	r3, r3, #0x3
 8061af4: f104 0243    	add.w	r2, r4, #0x43
 8061af8: 2101         	movs	r1, #0x1
 8061afa: f043 0302    	orr	r3, r3, #0x2
 8061afe: 6022         	str	r2, [r4]
 8061b00: e9c4 2104    	strd	r2, r1, [r4, #16]
 8061b04: 81a3         	strh	r3, [r4, #0xc]
 8061b06: e7b2         	b	0x8061a6e <__smakebuf_r+0x1a> @ imm = #-0x9c
 8061b08: f44f 6880    	mov.w	r8, #0x400
 8061b0c: 462f         	mov	r7, r5
 8061b0e: e7c7         	b	0x8061aa0 <__smakebuf_r+0x4c> @ imm = #-0x72
 8061b10: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 8061b14: 4630         	mov	r0, r6
 8061b16: f002 fa6f    	bl	0x8063ff8 <_isatty_r>   @ imm = #0x24de
 8061b1a: b910         	cbnz	r0, 0x8061b22 <__smakebuf_r+0xce> @ imm = #0x4
 8061b1c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8061b20: e7cf         	b	0x8061ac2 <__smakebuf_r+0x6e> @ imm = #-0x62
 8061b22: 89a3         	ldrh	r3, [r4, #0xc]
 8061b24: f023 0303    	bic	r3, r3, #0x3
 8061b28: f043 0301    	orr	r3, r3, #0x1
 8061b2c: b21b         	sxth	r3, r3
 8061b2e: e7c8         	b	0x8061ac2 <__smakebuf_r+0x6e> @ imm = #-0x70

08061b30 <$d>:
 8061b30: fd 14 06 08  	.word	0x080614fd

08061b34 <__swhatbuf_r>:
 8061b34: b570         	push	{r4, r5, r6, lr}
 8061b36: 460c         	mov	r4, r1
 8061b38: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 8061b3c: b096         	sub	sp, #0x58
 8061b3e: 4615         	mov	r5, r2
 8061b40: 2900         	cmp	r1, #0x0
 8061b42: 461e         	mov	r6, r3
 8061b44: db14         	blt	0x8061b70 <__swhatbuf_r+0x3c> @ imm = #0x28
 8061b46: 466a         	mov	r2, sp
 8061b48: f002 f8ca    	bl	0x8063ce0 <_fstat_r>    @ imm = #0x2194
 8061b4c: 2800         	cmp	r0, #0x0
 8061b4e: db0f         	blt	0x8061b70 <__swhatbuf_r+0x3c> @ imm = #0x1e
 8061b50: 9a01         	ldr	r2, [sp, #0x4]
 8061b52: f44f 6380    	mov.w	r3, #0x400
 8061b56: f44f 6000    	mov.w	r0, #0x800
 8061b5a: f402 4270    	and	r2, r2, #0xf000
 8061b5e: f5a2 5200    	sub.w	r2, r2, #0x2000
 8061b62: fab2 f282    	clz	r2, r2
 8061b66: 0952         	lsrs	r2, r2, #0x5
 8061b68: 6032         	str	r2, [r6]
 8061b6a: 602b         	str	r3, [r5]
 8061b6c: b016         	add	sp, #0x58
 8061b6e: bd70         	pop	{r4, r5, r6, pc}
 8061b70: f9b4 100c    	ldrsh.w	r1, [r4, #0xc]
 8061b74: 2300         	movs	r3, #0x0
 8061b76: f011 0080    	ands	r0, r1, #0x80
 8061b7a: 6033         	str	r3, [r6]
 8061b7c: d004         	beq	0x8061b88 <__swhatbuf_r+0x54> @ imm = #0x8
 8061b7e: 2240         	movs	r2, #0x40
 8061b80: 4618         	mov	r0, r3
 8061b82: 602a         	str	r2, [r5]
 8061b84: b016         	add	sp, #0x58
 8061b86: bd70         	pop	{r4, r5, r6, pc}
 8061b88: f44f 6380    	mov.w	r3, #0x400
 8061b8c: 602b         	str	r3, [r5]
 8061b8e: b016         	add	sp, #0x58
 8061b90: bd70         	pop	{r4, r5, r6, pc}
 8061b92: bf00         	nop

08061b94 <_malloc_r>:
 8061b94: f101 030b    	add.w	r3, r1, #0xb
 8061b98: 2b16         	cmp	r3, #0x16
 8061b9a: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8061b9e: 4605         	mov	r5, r0
 8061ba0: b083         	sub	sp, #0xc
 8061ba2: d824         	bhi	0x8061bee <_malloc_r+0x5a> @ imm = #0x48
 8061ba4: 2910         	cmp	r1, #0x10
 8061ba6: f200 80fc    	bhi.w	0x8061da2 <_malloc_r+0x20e> @ imm = #0x1f8
 8061baa: f000 fae7    	bl	0x806217c <__malloc_lock> @ imm = #0x5ce
 8061bae: 2410         	movs	r4, #0x10
 8061bb0: 2218         	movs	r2, #0x18
 8061bb2: 2002         	movs	r0, #0x2
 8061bb4: 4ec4         	ldr	r6, [pc, #0x310]        @ 0x8061ec8 <_malloc_r+0x334>
 8061bb6: 4432         	add	r2, r6
 8061bb8: 6853         	ldr	r3, [r2, #0x4]
 8061bba: f1a2 0108    	sub.w	r1, r2, #0x8
 8061bbe: 428b         	cmp	r3, r1
 8061bc0: f000 80f6    	beq.w	0x8061db0 <_malloc_r+0x21c> @ imm = #0x1ec
 8061bc4: 685a         	ldr	r2, [r3, #0x4]
 8061bc6: 4628         	mov	r0, r5
 8061bc8: f022 0203    	bic	r2, r2, #0x3
 8061bcc: e9d3 4102    	ldrd	r4, r1, [r3, #8]
 8061bd0: 441a         	add	r2, r3
 8061bd2: 60e1         	str	r1, [r4, #0xc]
 8061bd4: 608c         	str	r4, [r1, #0x8]
 8061bd6: f103 0408    	add.w	r4, r3, #0x8
 8061bda: 6853         	ldr	r3, [r2, #0x4]
 8061bdc: f043 0301    	orr	r3, r3, #0x1
 8061be0: 6053         	str	r3, [r2, #0x4]
 8061be2: f000 facd    	bl	0x8062180 <__malloc_unlock> @ imm = #0x59a
 8061be6: 4620         	mov	r0, r4
 8061be8: b003         	add	sp, #0xc
 8061bea: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8061bee: 2b00         	cmp	r3, #0x0
 8061bf0: f023 0407    	bic	r4, r3, #0x7
 8061bf4: f2c0 80d5    	blt.w	0x8061da2 <_malloc_r+0x20e> @ imm = #0x1aa
 8061bf8: 42a1         	cmp	r1, r4
 8061bfa: f200 80d2    	bhi.w	0x8061da2 <_malloc_r+0x20e> @ imm = #0x1a4
 8061bfe: f000 fabd    	bl	0x806217c <__malloc_lock> @ imm = #0x57a
 8061c02: f5b4 7ffc    	cmp.w	r4, #0x1f8
 8061c06: f0c0 81c2    	blo.w	0x8061f8e <_malloc_r+0x3fa> @ imm = #0x384
 8061c0a: 0a63         	lsrs	r3, r4, #0x9
 8061c0c: f000 813a    	beq.w	0x8061e84 <_malloc_r+0x2f0> @ imm = #0x274
 8061c10: 2b04         	cmp	r3, #0x4
 8061c12: f200 8198    	bhi.w	0x8061f46 <_malloc_r+0x3b2> @ imm = #0x330
 8061c16: 09a3         	lsrs	r3, r4, #0x6
 8061c18: f103 0039    	add.w	r0, r3, #0x39
 8061c1c: f103 0738    	add.w	r7, r3, #0x38
 8061c20: 00c3         	lsls	r3, r0, #0x3
 8061c22: 4ea9         	ldr	r6, [pc, #0x2a4]        @ 0x8061ec8 <_malloc_r+0x334>
 8061c24: 4433         	add	r3, r6
 8061c26: f1a3 0c08    	sub.w	r12, r3, #0x8
 8061c2a: 685b         	ldr	r3, [r3, #0x4]
 8061c2c: 459c         	cmp	r12, r3
 8061c2e: d107         	bne	0x8061c40 <_malloc_r+0xac> @ imm = #0xe
 8061c30: e0c3         	b	0x8061dba <_malloc_r+0x226> @ imm = #0x186
 8061c32: 2900         	cmp	r1, #0x0
 8061c34: f280 8150    	bge.w	0x8061ed8 <_malloc_r+0x344> @ imm = #0x2a0
 8061c38: 68db         	ldr	r3, [r3, #0xc]
 8061c3a: 459c         	cmp	r12, r3
 8061c3c: f000 80bd    	beq.w	0x8061dba <_malloc_r+0x226> @ imm = #0x17a
 8061c40: 685a         	ldr	r2, [r3, #0x4]
 8061c42: f022 0203    	bic	r2, r2, #0x3
 8061c46: 1b11         	subs	r1, r2, r4
 8061c48: 290f         	cmp	r1, #0xf
 8061c4a: ddf2         	ble	0x8061c32 <_malloc_r+0x9e> @ imm = #-0x1c
 8061c4c: 6933         	ldr	r3, [r6, #0x10]
 8061c4e: 4638         	mov	r0, r7
 8061c50: f8df e278    	ldr.w	lr, [pc, #0x278]        @ 0x8061ecc <_malloc_r+0x338>
 8061c54: 4573         	cmp	r3, lr
 8061c56: f040 80b6    	bne.w	0x8061dc6 <_malloc_r+0x232> @ imm = #0x16c
 8061c5a: 1083         	asrs	r3, r0, #0x2
 8061c5c: 2101         	movs	r1, #0x1
 8061c5e: 6872         	ldr	r2, [r6, #0x4]
 8061c60: 4099         	lsls	r1, r3
 8061c62: 4291         	cmp	r1, r2
 8061c64: f240 80d8    	bls.w	0x8061e18 <_malloc_r+0x284> @ imm = #0x1b0
 8061c68: 68b7         	ldr	r7, [r6, #0x8]
 8061c6a: 687b         	ldr	r3, [r7, #0x4]
 8061c6c: f023 0903    	bic	r9, r3, #0x3
 8061c70: eba9 0304    	sub.w	r3, r9, r4
 8061c74: 2b0f         	cmp	r3, #0xf
 8061c76: dd02         	ble	0x8061c7e <_malloc_r+0xea> @ imm = #0x4
 8061c78: 454c         	cmp	r4, r9
 8061c7a: f240 8113    	bls.w	0x8061ea4 <_malloc_r+0x310> @ imm = #0x226
 8061c7e: f8df a250    	ldr.w	r10, [pc, #0x250]       @ 0x8061ed0 <_malloc_r+0x33c>
 8061c82: eb07 0309    	add.w	r3, r7, r9
 8061c86: f8d6 1408    	ldr.w	r1, [r6, #0x408]
 8061c8a: f8da 2000    	ldr.w	r2, [r10]
 8061c8e: 3101         	adds	r1, #0x1
 8061c90: 4422         	add	r2, r4
 8061c92: f000 81ca    	beq.w	0x806202a <_malloc_r+0x496> @ imm = #0x394
 8061c96: f241 010f    	movw	r1, #0x100f
 8061c9a: f8df 8238    	ldr.w	r8, [pc, #0x238]        @ 0x8061ed4 <_malloc_r+0x340>
 8061c9e: 4411         	add	r1, r2
 8061ca0: ea01 0808    	and.w	r8, r1, r8
 8061ca4: 4641         	mov	r1, r8
 8061ca6: 4628         	mov	r0, r5
 8061ca8: 9300         	str	r3, [sp]
 8061caa: f000 ffa3    	bl	0x8062bf4 <_sbrk_r>     @ imm = #0xf46
 8061cae: f1b0 3fff    	cmp.w	r0, #0xffffffff
 8061cb2: 4683         	mov	r11, r0
 8061cb4: 9b00         	ldr	r3, [sp]
 8061cb6: f000 81a7    	beq.w	0x8062008 <_malloc_r+0x474> @ imm = #0x34e
 8061cba: 42b7         	cmp	r7, r6
 8061cbc: d002         	beq	0x8061cc4 <_malloc_r+0x130> @ imm = #0x4
 8061cbe: 4283         	cmp	r3, r0
 8061cc0: f200 81a2    	bhi.w	0x8062008 <_malloc_r+0x474> @ imm = #0x344
 8061cc4: f8da 1004    	ldr.w	r1, [r10, #0x4]
 8061cc8: 455b         	cmp	r3, r11
 8061cca: 4441         	add	r1, r8
 8061ccc: f8ca 1004    	str.w	r1, [r10, #0x4]
 8061cd0: f000 819d    	beq.w	0x806200e <_malloc_r+0x47a> @ imm = #0x33a
 8061cd4: f8d6 2408    	ldr.w	r2, [r6, #0x408]
 8061cd8: 3201         	adds	r2, #0x1
 8061cda: f000 81a3    	beq.w	0x8062024 <_malloc_r+0x490> @ imm = #0x346
 8061cde: ebab 0303    	sub.w	r3, r11, r3
 8061ce2: 4419         	add	r1, r3
 8061ce4: f8ca 1004    	str.w	r1, [r10, #0x4]
 8061ce8: f01b 0307    	ands	r3, r11, #0x7
 8061cec: f000 81a7    	beq.w	0x806203e <_malloc_r+0x4aa> @ imm = #0x34e
 8061cf0: f1c3 0208    	rsb.w	r2, r3, #0x8
 8061cf4: 4628         	mov	r0, r5
 8061cf6: 9300         	str	r3, [sp]
 8061cf8: 4493         	add	r11, r2
 8061cfa: f241 0208    	movw	r2, #0x1008
 8061cfe: 44d8         	add	r8, r11
 8061d00: 1ad2         	subs	r2, r2, r3
 8061d02: eba2 0108    	sub.w	r1, r2, r8
 8061d06: f3c1 010b    	ubfx	r1, r1, #0x0, #0xc
 8061d0a: 9101         	str	r1, [sp, #0x4]
 8061d0c: f000 ff72    	bl	0x8062bf4 <_sbrk_r>     @ imm = #0xee4
 8061d10: 1c42         	adds	r2, r0, #0x1
 8061d12: 9b00         	ldr	r3, [sp]
 8061d14: f000 81d9    	beq.w	0x80620ca <_malloc_r+0x536> @ imm = #0x3b2
 8061d18: eba0 000b    	sub.w	r0, r0, r11
 8061d1c: 9901         	ldr	r1, [sp, #0x4]
 8061d1e: eb00 0801    	add.w	r8, r0, r1
 8061d22: f8da 2004    	ldr.w	r2, [r10, #0x4]
 8061d26: f048 0301    	orr	r3, r8, #0x1
 8061d2a: 42b7         	cmp	r7, r6
 8061d2c: f8c6 b008    	str.w	r11, [r6, #0x8]
 8061d30: 4411         	add	r1, r2
 8061d32: f8cb 3004    	str.w	r3, [r11, #0x4]
 8061d36: f8ca 1004    	str.w	r1, [r10, #0x4]
 8061d3a: f000 81a2    	beq.w	0x8062082 <_malloc_r+0x4ee> @ imm = #0x344
 8061d3e: f1b9 0f0f    	cmp.w	r9, #0xf
 8061d42: f240 81a0    	bls.w	0x8062086 <_malloc_r+0x4f2> @ imm = #0x340
 8061d46: 687b         	ldr	r3, [r7, #0x4]
 8061d48: f1a9 020c    	sub.w	r2, r9, #0xc
 8061d4c: 2005         	movs	r0, #0x5
 8061d4e: f022 0207    	bic	r2, r2, #0x7
 8061d52: f003 0301    	and	r3, r3, #0x1
 8061d56: 4313         	orrs	r3, r2
 8061d58: 2a0f         	cmp	r2, #0xf
 8061d5a: 607b         	str	r3, [r7, #0x4]
 8061d5c: eb07 0302    	add.w	r3, r7, r2
 8061d60: e9c3 0001    	strd	r0, r0, [r3, #4]
 8061d64: f200 81a7    	bhi.w	0x80620b6 <_malloc_r+0x522> @ imm = #0x34e
 8061d68: f8db 3004    	ldr.w	r3, [r11, #0x4]
 8061d6c: 465f         	mov	r7, r11
 8061d6e: f8da 202c    	ldr.w	r2, [r10, #0x2c]
 8061d72: 428a         	cmp	r2, r1
 8061d74: f8da 2030    	ldr.w	r2, [r10, #0x30]
 8061d78: bf38         	it	lo
 8061d7a: f8ca 102c    	strlo.w	r1, [r10, #0x2c]
 8061d7e: 428a         	cmp	r2, r1
 8061d80: bf38         	it	lo
 8061d82: f8ca 1030    	strlo.w	r1, [r10, #0x30]
 8061d86: f023 0803    	bic	r8, r3, #0x3
 8061d8a: 4544         	cmp	r4, r8
 8061d8c: eba8 0304    	sub.w	r3, r8, r4
 8061d90: d802         	bhi	0x8061d98 <_malloc_r+0x204> @ imm = #0x4
 8061d92: 2b0f         	cmp	r3, #0xf
 8061d94: f300 8086    	bgt.w	0x8061ea4 <_malloc_r+0x310> @ imm = #0x10c
 8061d98: 4628         	mov	r0, r5
 8061d9a: 2400         	movs	r4, #0x0
 8061d9c: f000 f9f0    	bl	0x8062180 <__malloc_unlock> @ imm = #0x3e0
 8061da0: e721         	b	0x8061be6 <_malloc_r+0x52> @ imm = #-0x1be
 8061da2: 2400         	movs	r4, #0x0
 8061da4: 230c         	movs	r3, #0xc
 8061da6: 4620         	mov	r0, r4
 8061da8: 602b         	str	r3, [r5]
 8061daa: b003         	add	sp, #0xc
 8061dac: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8061db0: 68d3         	ldr	r3, [r2, #0xc]
 8061db2: 429a         	cmp	r2, r3
 8061db4: f47f af06    	bne.w	0x8061bc4 <_malloc_r+0x30> @ imm = #-0x1f4
 8061db8: 3002         	adds	r0, #0x2
 8061dba: 6933         	ldr	r3, [r6, #0x10]
 8061dbc: f8df e10c    	ldr.w	lr, [pc, #0x10c]        @ 0x8061ecc <_malloc_r+0x338>
 8061dc0: 4573         	cmp	r3, lr
 8061dc2: f43f af4a    	beq.w	0x8061c5a <_malloc_r+0xc6> @ imm = #-0x16c
 8061dc6: 6859         	ldr	r1, [r3, #0x4]
 8061dc8: f021 0103    	bic	r1, r1, #0x3
 8061dcc: 1b0a         	subs	r2, r1, r4
 8061dce: 2a0f         	cmp	r2, #0xf
 8061dd0: f300 80e1    	bgt.w	0x8061f96 <_malloc_r+0x402> @ imm = #0x1c2
 8061dd4: 2a00         	cmp	r2, #0x0
 8061dd6: e9c6 ee04    	strd	lr, lr, [r6, #16]
 8061dda: da58         	bge	0x8061e8e <_malloc_r+0x2fa> @ imm = #0xb0
 8061ddc: f5b1 7f00    	cmp.w	r1, #0x200
 8061de0: f080 808c    	bhs.w	0x8061efc <_malloc_r+0x368> @ imm = #0x118
 8061de4: ea4f 0cd1    	lsr.w	r12, r1, #0x3
 8061de8: 2201         	movs	r2, #0x1
 8061dea: 0949         	lsrs	r1, r1, #0x5
 8061dec: f10c 0c01    	add.w	r12, r12, #0x1
 8061df0: 408a         	lsls	r2, r1
 8061df2: 6871         	ldr	r1, [r6, #0x4]
 8061df4: f856 703c    	ldr.w	r7, [r6, r12, lsl #3]
 8061df8: 430a         	orrs	r2, r1
 8061dfa: eb06 01cc    	add.w	r1, r6, r12, lsl #3
 8061dfe: 3908         	subs	r1, #0x8
 8061e00: 6072         	str	r2, [r6, #0x4]
 8061e02: e9c3 7102    	strd	r7, r1, [r3, #8]
 8061e06: f846 303c    	str.w	r3, [r6, r12, lsl #3]
 8061e0a: 60fb         	str	r3, [r7, #0xc]
 8061e0c: 1083         	asrs	r3, r0, #0x2
 8061e0e: 2101         	movs	r1, #0x1
 8061e10: 4099         	lsls	r1, r3
 8061e12: 4291         	cmp	r1, r2
 8061e14: f63f af28    	bhi.w	0x8061c68 <_malloc_r+0xd4> @ imm = #-0x1b0
 8061e18: 4211         	tst	r1, r2
 8061e1a: d105         	bne	0x8061e28 <_malloc_r+0x294> @ imm = #0xa
 8061e1c: f020 0003    	bic	r0, r0, #0x3
 8061e20: 0049         	lsls	r1, r1, #0x1
 8061e22: 3004         	adds	r0, #0x4
 8061e24: 4211         	tst	r1, r2
 8061e26: d0fb         	beq	0x8061e20 <_malloc_r+0x28c> @ imm = #-0xa
 8061e28: eb06 09c0    	add.w	r9, r6, r0, lsl #3
 8061e2c: 4680         	mov	r8, r0
 8061e2e: 46cc         	mov	r12, r9
 8061e30: f8dc 700c    	ldr.w	r7, [r12, #0xc]
 8061e34: 45bc         	cmp	r12, r7
 8061e36: d107         	bne	0x8061e48 <_malloc_r+0x2b4> @ imm = #0xe
 8061e38: e091         	b	0x8061f5e <_malloc_r+0x3ca> @ imm = #0x122
 8061e3a: 2b00         	cmp	r3, #0x0
 8061e3c: f280 8098    	bge.w	0x8061f70 <_malloc_r+0x3dc> @ imm = #0x130
 8061e40: 68ff         	ldr	r7, [r7, #0xc]
 8061e42: 45bc         	cmp	r12, r7
 8061e44: f000 808b    	beq.w	0x8061f5e <_malloc_r+0x3ca> @ imm = #0x116
 8061e48: 687a         	ldr	r2, [r7, #0x4]
 8061e4a: f022 0203    	bic	r2, r2, #0x3
 8061e4e: 1b13         	subs	r3, r2, r4
 8061e50: 2b0f         	cmp	r3, #0xf
 8061e52: ddf2         	ble	0x8061e3a <_malloc_r+0x2a6> @ imm = #-0x1c
 8061e54: 1939         	adds	r1, r7, r4
 8061e56: f044 0401    	orr	r4, r4, #0x1
 8061e5a: 4628         	mov	r0, r5
 8061e5c: 607c         	str	r4, [r7, #0x4]
 8061e5e: f043 0401    	orr	r4, r3, #0x1
 8061e62: e9d7 c502    	ldrd	r12, r5, [r7, #8]
 8061e66: f8cc 500c    	str.w	r5, [r12, #0xc]
 8061e6a: f8c5 c008    	str.w	r12, [r5, #0x8]
 8061e6e: e9c6 1104    	strd	r1, r1, [r6, #16]
 8061e72: 604c         	str	r4, [r1, #0x4]
 8061e74: f107 0408    	add.w	r4, r7, #0x8
 8061e78: e9c1 ee02    	strd	lr, lr, [r1, #8]
 8061e7c: 50bb         	str	r3, [r7, r2]
 8061e7e: f000 f97f    	bl	0x8062180 <__malloc_unlock> @ imm = #0x2fe
 8061e82: e6b0         	b	0x8061be6 <_malloc_r+0x52> @ imm = #-0x2a0
 8061e84: f44f 7300    	mov.w	r3, #0x200
 8061e88: 2040         	movs	r0, #0x40
 8061e8a: 273f         	movs	r7, #0x3f
 8061e8c: e6c9         	b	0x8061c22 <_malloc_r+0x8e> @ imm = #-0x26e
 8061e8e: 4419         	add	r1, r3
 8061e90: f103 0408    	add.w	r4, r3, #0x8
 8061e94: 4628         	mov	r0, r5
 8061e96: 684b         	ldr	r3, [r1, #0x4]
 8061e98: f043 0301    	orr	r3, r3, #0x1
 8061e9c: 604b         	str	r3, [r1, #0x4]
 8061e9e: f000 f96f    	bl	0x8062180 <__malloc_unlock> @ imm = #0x2de
 8061ea2: e6a0         	b	0x8061be6 <_malloc_r+0x52> @ imm = #-0x2c0
 8061ea4: 193a         	adds	r2, r7, r4
 8061ea6: f044 0401    	orr	r4, r4, #0x1
 8061eaa: f043 0301    	orr	r3, r3, #0x1
 8061eae: 4628         	mov	r0, r5
 8061eb0: 607c         	str	r4, [r7, #0x4]
 8061eb2: f107 0408    	add.w	r4, r7, #0x8
 8061eb6: 60b2         	str	r2, [r6, #0x8]
 8061eb8: 6053         	str	r3, [r2, #0x4]
 8061eba: f000 f961    	bl	0x8062180 <__malloc_unlock> @ imm = #0x2c2
 8061ebe: 4620         	mov	r0, r4
 8061ec0: b003         	add	sp, #0xc
 8061ec2: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8061ec6: bf00         	nop

08061ec8 <$d>:
 8061ec8: c0 27 00 20  	.word	0x200027c0
 8061ecc: c8 27 00 20  	.word	0x200027c8
 8061ed0: 68 2f 00 20  	.word	0x20002f68
 8061ed4: 00 f0 ff ff  	.word	0xfffff000

08061ed8 <$t>:
 8061ed8: 441a         	add	r2, r3
 8061eda: f103 0408    	add.w	r4, r3, #0x8
 8061ede: 4628         	mov	r0, r5
 8061ee0: e9d3 6102    	ldrd	r6, r1, [r3, #8]
 8061ee4: 6853         	ldr	r3, [r2, #0x4]
 8061ee6: 60f1         	str	r1, [r6, #0xc]
 8061ee8: f043 0301    	orr	r3, r3, #0x1
 8061eec: 608e         	str	r6, [r1, #0x8]
 8061eee: 6053         	str	r3, [r2, #0x4]
 8061ef0: f000 f946    	bl	0x8062180 <__malloc_unlock> @ imm = #0x28c
 8061ef4: 4620         	mov	r0, r4
 8061ef6: b003         	add	sp, #0xc
 8061ef8: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8061efc: f5b1 6f20    	cmp.w	r1, #0xa00
 8061f00: ea4f 2251    	lsr.w	r2, r1, #0x9
 8061f04: d359         	blo	0x8061fba <_malloc_r+0x426> @ imm = #0xb2
 8061f06: 2a14         	cmp	r2, #0x14
 8061f08: f200 80a9    	bhi.w	0x806205e <_malloc_r+0x4ca> @ imm = #0x152
 8061f0c: f102 075c    	add.w	r7, r2, #0x5c
 8061f10: 325b         	adds	r2, #0x5b
 8061f12: 00ff         	lsls	r7, r7, #0x3
 8061f14: eb06 0c07    	add.w	r12, r6, r7
 8061f18: 59f7         	ldr	r7, [r6, r7]
 8061f1a: f1ac 0c08    	sub.w	r12, r12, #0x8
 8061f1e: 45bc         	cmp	r12, r7
 8061f20: f000 8086    	beq.w	0x8062030 <_malloc_r+0x49c> @ imm = #0x10c
 8061f24: 687a         	ldr	r2, [r7, #0x4]
 8061f26: f022 0203    	bic	r2, r2, #0x3
 8061f2a: 428a         	cmp	r2, r1
 8061f2c: d902         	bls	0x8061f34 <_malloc_r+0x3a0> @ imm = #0x4
 8061f2e: 68bf         	ldr	r7, [r7, #0x8]
 8061f30: 45bc         	cmp	r12, r7
 8061f32: d1f7         	bne	0x8061f24 <_malloc_r+0x390> @ imm = #-0x12
 8061f34: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8061f38: 6872         	ldr	r2, [r6, #0x4]
 8061f3a: e9c3 7c02    	strd	r7, r12, [r3, #8]
 8061f3e: f8cc 3008    	str.w	r3, [r12, #0x8]
 8061f42: 60fb         	str	r3, [r7, #0xc]
 8061f44: e762         	b	0x8061e0c <_malloc_r+0x278> @ imm = #-0x13c
 8061f46: 2b14         	cmp	r3, #0x14
 8061f48: d93d         	bls	0x8061fc6 <_malloc_r+0x432> @ imm = #0x7a
 8061f4a: 2b54         	cmp	r3, #0x54
 8061f4c: f200 808f    	bhi.w	0x806206e <_malloc_r+0x4da> @ imm = #0x11e
 8061f50: 0b23         	lsrs	r3, r4, #0xc
 8061f52: f103 006f    	add.w	r0, r3, #0x6f
 8061f56: f103 076e    	add.w	r7, r3, #0x6e
 8061f5a: 00c3         	lsls	r3, r0, #0x3
 8061f5c: e661         	b	0x8061c22 <_malloc_r+0x8e> @ imm = #-0x33e
 8061f5e: f108 0801    	add.w	r8, r8, #0x1
 8061f62: f10c 0c08    	add.w	r12, r12, #0x8
 8061f66: f018 0f03    	tst.w	r8, #0x3
 8061f6a: f47f af61    	bne.w	0x8061e30 <_malloc_r+0x29c> @ imm = #-0x13e
 8061f6e: e035         	b	0x8061fdc <_malloc_r+0x448> @ imm = #0x6a
 8061f70: 443a         	add	r2, r7
 8061f72: 463c         	mov	r4, r7
 8061f74: 68f9         	ldr	r1, [r7, #0xc]
 8061f76: 4628         	mov	r0, r5
 8061f78: 6853         	ldr	r3, [r2, #0x4]
 8061f7a: f043 0301    	orr	r3, r3, #0x1
 8061f7e: 6053         	str	r3, [r2, #0x4]
 8061f80: f854 3f08    	ldr	r3, [r4, #8]!
 8061f84: 60d9         	str	r1, [r3, #0xc]
 8061f86: 608b         	str	r3, [r1, #0x8]
 8061f88: f000 f8fa    	bl	0x8062180 <__malloc_unlock> @ imm = #0x1f4
 8061f8c: e62b         	b	0x8061be6 <_malloc_r+0x52> @ imm = #-0x3aa
 8061f8e: 08e0         	lsrs	r0, r4, #0x3
 8061f90: f104 0208    	add.w	r2, r4, #0x8
 8061f94: e60e         	b	0x8061bb4 <_malloc_r+0x20> @ imm = #-0x3e4
 8061f96: 4628         	mov	r0, r5
 8061f98: 191d         	adds	r5, r3, r4
 8061f9a: f044 0401    	orr	r4, r4, #0x1
 8061f9e: 605c         	str	r4, [r3, #0x4]
 8061fa0: f042 0401    	orr	r4, r2, #0x1
 8061fa4: e9c6 5504    	strd	r5, r5, [r6, #16]
 8061fa8: 606c         	str	r4, [r5, #0x4]
 8061faa: f103 0408    	add.w	r4, r3, #0x8
 8061fae: e9c5 ee02    	strd	lr, lr, [r5, #8]
 8061fb2: 505a         	str	r2, [r3, r1]
 8061fb4: f000 f8e4    	bl	0x8062180 <__malloc_unlock> @ imm = #0x1c8
 8061fb8: e615         	b	0x8061be6 <_malloc_r+0x52> @ imm = #-0x3d6
 8061fba: 098a         	lsrs	r2, r1, #0x6
 8061fbc: f102 0739    	add.w	r7, r2, #0x39
 8061fc0: 3238         	adds	r2, #0x38
 8061fc2: 00ff         	lsls	r7, r7, #0x3
 8061fc4: e7a6         	b	0x8061f14 <_malloc_r+0x380> @ imm = #-0xb4
 8061fc6: f103 005c    	add.w	r0, r3, #0x5c
 8061fca: f103 075b    	add.w	r7, r3, #0x5b
 8061fce: 00c3         	lsls	r3, r0, #0x3
 8061fd0: e627         	b	0x8061c22 <_malloc_r+0x8e> @ imm = #-0x3b2
 8061fd2: f859 3908    	ldr	r3, [r9], #-8
 8061fd6: 454b         	cmp	r3, r9
 8061fd8: f040 8090    	bne.w	0x80620fc <_malloc_r+0x568> @ imm = #0x120
 8061fdc: f010 0f03    	tst.w	r0, #0x3
 8061fe0: f100 30ff    	add.w	r0, r0, #0xffffffff
 8061fe4: d1f5         	bne	0x8061fd2 <_malloc_r+0x43e> @ imm = #-0x16
 8061fe6: 6873         	ldr	r3, [r6, #0x4]
 8061fe8: ea23 0301    	bic.w	r3, r3, r1
 8061fec: 6073         	str	r3, [r6, #0x4]
 8061fee: 0049         	lsls	r1, r1, #0x1
 8061ff0: f43f ae3a    	beq.w	0x8061c68 <_malloc_r+0xd4> @ imm = #-0x38c
 8061ff4: 4299         	cmp	r1, r3
 8061ff6: d903         	bls	0x8062000 <_malloc_r+0x46c> @ imm = #0x6
 8061ff8: e636         	b	0x8061c68 <_malloc_r+0xd4> @ imm = #-0x394
 8061ffa: 0049         	lsls	r1, r1, #0x1
 8061ffc: f108 0804    	add.w	r8, r8, #0x4
 8062000: 4219         	tst	r1, r3
 8062002: d0fa         	beq	0x8061ffa <_malloc_r+0x466> @ imm = #-0xc
 8062004: 4640         	mov	r0, r8
 8062006: e70f         	b	0x8061e28 <_malloc_r+0x294> @ imm = #-0x1e2
 8062008: 68b7         	ldr	r7, [r6, #0x8]
 806200a: 687b         	ldr	r3, [r7, #0x4]
 806200c: e6bb         	b	0x8061d86 <_malloc_r+0x1f2> @ imm = #-0x28a
 806200e: f3c3 020b    	ubfx	r2, r3, #0x0, #0xc
 8062012: 2a00         	cmp	r2, #0x0
 8062014: f47f ae5e    	bne.w	0x8061cd4 <_malloc_r+0x140> @ imm = #-0x344
 8062018: 44c8         	add	r8, r9
 806201a: 68b7         	ldr	r7, [r6, #0x8]
 806201c: f048 0301    	orr	r3, r8, #0x1
 8062020: 607b         	str	r3, [r7, #0x4]
 8062022: e6a4         	b	0x8061d6e <_malloc_r+0x1da> @ imm = #-0x2b8
 8062024: f8c6 b408    	str.w	r11, [r6, #0x408]
 8062028: e65e         	b	0x8061ce8 <_malloc_r+0x154> @ imm = #-0x344
 806202a: f102 0810    	add.w	r8, r2, #0x10
 806202e: e639         	b	0x8061ca4 <_malloc_r+0x110> @ imm = #-0x38e
 8062030: 1092         	asrs	r2, r2, #0x2
 8062032: 2101         	movs	r1, #0x1
 8062034: 4091         	lsls	r1, r2
 8062036: 6872         	ldr	r2, [r6, #0x4]
 8062038: 430a         	orrs	r2, r1
 806203a: 6072         	str	r2, [r6, #0x4]
 806203c: e77d         	b	0x8061f3a <_malloc_r+0x3a6> @ imm = #-0x106
 806203e: eb0b 0108    	add.w	r1, r11, r8
 8062042: 4628         	mov	r0, r5
 8062044: 9300         	str	r3, [sp]
 8062046: 4249         	rsbs	r1, r1, #0
 8062048: f3c1 010b    	ubfx	r1, r1, #0x0, #0xc
 806204c: 9101         	str	r1, [sp, #0x4]
 806204e: f000 fdd1    	bl	0x8062bf4 <_sbrk_r>     @ imm = #0xba2
 8062052: 1c43         	adds	r3, r0, #0x1
 8062054: 9b00         	ldr	r3, [sp]
 8062056: f47f ae5f    	bne.w	0x8061d18 <_malloc_r+0x184> @ imm = #-0x342
 806205a: 4619         	mov	r1, r3
 806205c: e661         	b	0x8061d22 <_malloc_r+0x18e> @ imm = #-0x33e
 806205e: 2a54         	cmp	r2, #0x54
 8062060: d815         	bhi	0x806208e <_malloc_r+0x4fa> @ imm = #0x2a
 8062062: 0b0a         	lsrs	r2, r1, #0xc
 8062064: f102 076f    	add.w	r7, r2, #0x6f
 8062068: 326e         	adds	r2, #0x6e
 806206a: 00ff         	lsls	r7, r7, #0x3
 806206c: e752         	b	0x8061f14 <_malloc_r+0x380> @ imm = #-0x15c
 806206e: f5b3 7faa    	cmp.w	r3, #0x154
 8062072: d815         	bhi	0x80620a0 <_malloc_r+0x50c> @ imm = #0x2a
 8062074: 0be3         	lsrs	r3, r4, #0xf
 8062076: f103 0078    	add.w	r0, r3, #0x78
 806207a: f103 0777    	add.w	r7, r3, #0x77
 806207e: 00c3         	lsls	r3, r0, #0x3
 8062080: e5cf         	b	0x8061c22 <_malloc_r+0x8e> @ imm = #-0x462
 8062082: 465f         	mov	r7, r11
 8062084: e673         	b	0x8061d6e <_malloc_r+0x1da> @ imm = #-0x31a
 8062086: 2301         	movs	r3, #0x1
 8062088: f8cb 3004    	str.w	r3, [r11, #0x4]
 806208c: e684         	b	0x8061d98 <_malloc_r+0x204> @ imm = #-0x2f8
 806208e: f5b2 7faa    	cmp.w	r2, #0x154
 8062092: d820         	bhi	0x80620d6 <_malloc_r+0x542> @ imm = #0x40
 8062094: 0bca         	lsrs	r2, r1, #0xf
 8062096: f102 0778    	add.w	r7, r2, #0x78
 806209a: 3277         	adds	r2, #0x77
 806209c: 00ff         	lsls	r7, r7, #0x3
 806209e: e739         	b	0x8061f14 <_malloc_r+0x380> @ imm = #-0x18e
 80620a0: f240 5254    	movw	r2, #0x554
 80620a4: 4293         	cmp	r3, r2
 80620a6: d820         	bhi	0x80620ea <_malloc_r+0x556> @ imm = #0x40
 80620a8: 0ca3         	lsrs	r3, r4, #0x12
 80620aa: f103 007d    	add.w	r0, r3, #0x7d
 80620ae: f103 077c    	add.w	r7, r3, #0x7c
 80620b2: 00c3         	lsls	r3, r0, #0x3
 80620b4: e5b5         	b	0x8061c22 <_malloc_r+0x8e> @ imm = #-0x496
 80620b6: f107 0108    	add.w	r1, r7, #0x8
 80620ba: 4628         	mov	r0, r5
 80620bc: f7ff fb78    	bl	0x80617b0 <_free_r>     @ imm = #-0x910
 80620c0: 68b7         	ldr	r7, [r6, #0x8]
 80620c2: f8da 1004    	ldr.w	r1, [r10, #0x4]
 80620c6: 687b         	ldr	r3, [r7, #0x4]
 80620c8: e651         	b	0x8061d6e <_malloc_r+0x1da> @ imm = #-0x35e
 80620ca: 3b08         	subs	r3, #0x8
 80620cc: 2100         	movs	r1, #0x0
 80620ce: 4498         	add	r8, r3
 80620d0: eba8 080b    	sub.w	r8, r8, r11
 80620d4: e625         	b	0x8061d22 <_malloc_r+0x18e> @ imm = #-0x3b6
 80620d6: f240 5754    	movw	r7, #0x554
 80620da: 42ba         	cmp	r2, r7
 80620dc: d80a         	bhi	0x80620f4 <_malloc_r+0x560> @ imm = #0x14
 80620de: 0c8a         	lsrs	r2, r1, #0x12
 80620e0: f102 077d    	add.w	r7, r2, #0x7d
 80620e4: 327c         	adds	r2, #0x7c
 80620e6: 00ff         	lsls	r7, r7, #0x3
 80620e8: e714         	b	0x8061f14 <_malloc_r+0x380> @ imm = #-0x1d8
 80620ea: f44f 737e    	mov.w	r3, #0x3f8
 80620ee: 207f         	movs	r0, #0x7f
 80620f0: 277e         	movs	r7, #0x7e
 80620f2: e596         	b	0x8061c22 <_malloc_r+0x8e> @ imm = #-0x4d4
 80620f4: f44f 777e    	mov.w	r7, #0x3f8
 80620f8: 227e         	movs	r2, #0x7e
 80620fa: e70b         	b	0x8061f14 <_malloc_r+0x380> @ imm = #-0x1ea
 80620fc: 6873         	ldr	r3, [r6, #0x4]
 80620fe: e776         	b	0x8061fee <_malloc_r+0x45a> @ imm = #-0x114

08062100 <memchr>:
 8062100: b510         	push	{r4, lr}
 8062102: fa5f fe81    	uxtb.w	lr, r1
 8062106: 0781         	lsls	r1, r0, #0x1e
 8062108: d010         	beq	0x806212c <memchr+0x2c> @ imm = #0x20
 806210a: 4603         	mov	r3, r0
 806210c: 1e51         	subs	r1, r2, #0x1
 806210e: b922         	cbnz	r2, 0x806211a <memchr+0x1a> @ imm = #0x8
 8062110: e00a         	b	0x8062128 <memchr+0x28> @ imm = #0x14
 8062112: 079a         	lsls	r2, r3, #0x1e
 8062114: d00c         	beq	0x8062130 <memchr+0x30> @ imm = #0x18
 8062116: 3901         	subs	r1, #0x1
 8062118: d306         	blo	0x8062128 <memchr+0x28> @ imm = #0xc
 806211a: 4618         	mov	r0, r3
 806211c: f813 2b01    	ldrb	r2, [r3], #1
 8062120: 4572         	cmp	r2, lr
 8062122: 469c         	mov	r12, r3
 8062124: d1f5         	bne	0x8062112 <memchr+0x12> @ imm = #-0x16
 8062126: bd10         	pop	{r4, pc}
 8062128: 2000         	movs	r0, #0x0
 806212a: bd10         	pop	{r4, pc}
 806212c: 4684         	mov	r12, r0
 806212e: 4611         	mov	r1, r2
 8062130: 2903         	cmp	r1, #0x3
 8062132: d80c         	bhi	0x806214e <memchr+0x4e> @ imm = #0x18
 8062134: 2900         	cmp	r1, #0x0
 8062136: d0f7         	beq	0x8062128 <memchr+0x28> @ imm = #-0x12
 8062138: eb0c 0301    	add.w	r3, r12, r1
 806213c: e001         	b	0x8062142 <memchr+0x42> @ imm = #0x2
 806213e: 459c         	cmp	r12, r3
 8062140: d0f2         	beq	0x8062128 <memchr+0x28> @ imm = #-0x1c
 8062142: 4660         	mov	r0, r12
 8062144: f81c 2b01    	ldrb	r2, [r12], #1
 8062148: 4572         	cmp	r2, lr
 806214a: d1f8         	bne	0x806213e <memchr+0x3e> @ imm = #-0x10
 806214c: bd10         	pop	{r4, pc}
 806214e: ea4e 240e    	orr.w	r4, lr, lr, lsl #8
 8062152: 4662         	mov	r2, r12
 8062154: ea44 4404    	orr.w	r4, r4, r4, lsl #16
 8062158: 4694         	mov	r12, r2
 806215a: 3204         	adds	r2, #0x4
 806215c: f8dc 3000    	ldr.w	r3, [r12]
 8062160: 4063         	eors	r3, r4
 8062162: f1a3 3001    	sub.w	r0, r3, #0x1010101
 8062166: ea20 0303    	bic.w	r3, r0, r3
 806216a: f013 3f80    	tst.w	r3, #0x80808080
 806216e: d1e3         	bne	0x8062138 <memchr+0x38> @ imm = #-0x3a
 8062170: 3904         	subs	r1, #0x4
 8062172: 4694         	mov	r12, r2
 8062174: 2903         	cmp	r1, #0x3
 8062176: d8ef         	bhi	0x8062158 <memchr+0x58> @ imm = #-0x22
 8062178: e7dc         	b	0x8062134 <memchr+0x34> @ imm = #-0x48
 806217a: bf00         	nop

0806217c <__malloc_lock>:
 806217c: 4770         	bx	lr
 806217e: bf00         	nop

08062180 <__malloc_unlock>:
 8062180: 4770         	bx	lr
 8062182: bf00         	nop

08062184 <_Balloc>:
 8062184: b538         	push	{r3, r4, r5, lr}
 8062186: 6cc3         	ldr	r3, [r0, #0x4c]
 8062188: 4605         	mov	r5, r0
 806218a: 460c         	mov	r4, r1
 806218c: b14b         	cbz	r3, 0x80621a2 <_Balloc+0x1e> @ imm = #0x12
 806218e: f853 0024    	ldr.w	r0, [r3, r4, lsl #2]
 8062192: b180         	cbz	r0, 0x80621b6 <_Balloc+0x32> @ imm = #0x20
 8062194: 6802         	ldr	r2, [r0]
 8062196: f843 2024    	str.w	r2, [r3, r4, lsl #2]
 806219a: 2300         	movs	r3, #0x0
 806219c: e9c0 3303    	strd	r3, r3, [r0, #12]
 80621a0: bd38         	pop	{r3, r4, r5, pc}
 80621a2: 2221         	movs	r2, #0x21
 80621a4: 2104         	movs	r1, #0x4
 80621a6: f001 fc49    	bl	0x8063a3c <_calloc_r>   @ imm = #0x1892
 80621aa: 4603         	mov	r3, r0
 80621ac: 64e8         	str	r0, [r5, #0x4c]
 80621ae: 2800         	cmp	r0, #0x0
 80621b0: d1ed         	bne	0x806218e <_Balloc+0xa> @ imm = #-0x26
 80621b2: 2000         	movs	r0, #0x0
 80621b4: bd38         	pop	{r3, r4, r5, pc}
 80621b6: 2101         	movs	r1, #0x1
 80621b8: 4628         	mov	r0, r5
 80621ba: fa01 f504    	lsl.w	r5, r1, r4
 80621be: 1d6a         	adds	r2, r5, #0x5
 80621c0: 0092         	lsls	r2, r2, #0x2
 80621c2: f001 fc3b    	bl	0x8063a3c <_calloc_r>   @ imm = #0x1876
 80621c6: 2800         	cmp	r0, #0x0
 80621c8: d0f3         	beq	0x80621b2 <_Balloc+0x2e> @ imm = #-0x1a
 80621ca: e9c0 4501    	strd	r4, r5, [r0, #4]
 80621ce: e7e4         	b	0x806219a <_Balloc+0x16> @ imm = #-0x38

080621d0 <_Bfree>:
 80621d0: b131         	cbz	r1, 0x80621e0 <_Bfree+0x10> @ imm = #0xc
 80621d2: 6cc3         	ldr	r3, [r0, #0x4c]
 80621d4: 684a         	ldr	r2, [r1, #0x4]
 80621d6: f853 0022    	ldr.w	r0, [r3, r2, lsl #2]
 80621da: 6008         	str	r0, [r1]
 80621dc: f843 1022    	str.w	r1, [r3, r2, lsl #2]
 80621e0: 4770         	bx	lr
 80621e2: bf00         	nop

080621e4 <__multadd>:
 80621e4: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 80621e8: 4680         	mov	r8, r0
 80621ea: 460f         	mov	r7, r1
 80621ec: 461d         	mov	r5, r3
 80621ee: 690e         	ldr	r6, [r1, #0x10]
 80621f0: f101 0e14    	add.w	lr, r1, #0x14
 80621f4: 2000         	movs	r0, #0x0
 80621f6: f8de 1000    	ldr.w	r1, [lr]
 80621fa: 3001         	adds	r0, #0x1
 80621fc: b28b         	uxth	r3, r1
 80621fe: 4286         	cmp	r6, r0
 8062200: ea4f 4111    	lsr.w	r1, r1, #0x10
 8062204: fb02 5303    	mla	r3, r2, r3, r5
 8062208: ea4f 4c13    	lsr.w	r12, r3, #0x10
 806220c: b29b         	uxth	r3, r3
 806220e: fb02 cc01    	mla	r12, r2, r1, r12
 8062212: eb03 430c    	add.w	r3, r3, r12, lsl #16
 8062216: ea4f 451c    	lsr.w	r5, r12, #0x10
 806221a: f84e 3b04    	str	r3, [lr], #4
 806221e: dcea         	bgt	0x80621f6 <__multadd+0x12> @ imm = #-0x2c
 8062220: b13d         	cbz	r5, 0x8062232 <__multadd+0x4e> @ imm = #0xe
 8062222: 68bb         	ldr	r3, [r7, #0x8]
 8062224: 42b3         	cmp	r3, r6
 8062226: dd07         	ble	0x8062238 <__multadd+0x54> @ imm = #0xe
 8062228: eb07 0386    	add.w	r3, r7, r6, lsl #2
 806222c: 3601         	adds	r6, #0x1
 806222e: 615d         	str	r5, [r3, #0x14]
 8062230: 613e         	str	r6, [r7, #0x10]
 8062232: 4638         	mov	r0, r7
 8062234: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8062238: 6879         	ldr	r1, [r7, #0x4]
 806223a: 4640         	mov	r0, r8
 806223c: 3101         	adds	r1, #0x1
 806223e: f7ff ffa1    	bl	0x8062184 <_Balloc>     @ imm = #-0xbe
 8062242: 4604         	mov	r4, r0
 8062244: b1b0         	cbz	r0, 0x8062274 <__multadd+0x90> @ imm = #0x2c
 8062246: 693a         	ldr	r2, [r7, #0x10]
 8062248: f107 010c    	add.w	r1, r7, #0xc
 806224c: 300c         	adds	r0, #0xc
 806224e: 3202         	adds	r2, #0x2
 8062250: 0092         	lsls	r2, r2, #0x2
 8062252: f7fc fc45    	bl	0x805eae0 <memcpy>      @ imm = #-0x3776
 8062256: f8d8 304c    	ldr.w	r3, [r8, #0x4c]
 806225a: 687a         	ldr	r2, [r7, #0x4]
 806225c: f853 1022    	ldr.w	r1, [r3, r2, lsl #2]
 8062260: 6039         	str	r1, [r7]
 8062262: f843 7022    	str.w	r7, [r3, r2, lsl #2]
 8062266: 4627         	mov	r7, r4
 8062268: eb07 0386    	add.w	r3, r7, r6, lsl #2
 806226c: 3601         	adds	r6, #0x1
 806226e: 615d         	str	r5, [r3, #0x14]
 8062270: 613e         	str	r6, [r7, #0x10]
 8062272: e7de         	b	0x8062232 <__multadd+0x4e> @ imm = #-0x44
 8062274: 4602         	mov	r2, r0
 8062276: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8062280 <__multadd+0x9c>
 8062278: 21b5         	movs	r1, #0xb5
 806227a: 4802         	ldr	r0, [pc, #0x8]          @ 0x8062284 <__multadd+0xa0>
 806227c: f001 fbba    	bl	0x80639f4 <__assert_func> @ imm = #0x1774

08062280 <$d>:
 8062280: 34 5a 06 08  	.word	0x08065a34
 8062284: 80 5a 06 08  	.word	0x08065a80

08062288 <__s2b>:
 8062288: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
 806228c: 461e         	mov	r6, r3
 806228e: 460c         	mov	r4, r1
 8062290: 4617         	mov	r7, r2
 8062292: 4926         	ldr	r1, [pc, #0x98]         @ 0x806232c <__s2b+0xa4>
 8062294: f103 0208    	add.w	r2, r3, #0x8
 8062298: 2e09         	cmp	r6, #0x9
 806229a: 4605         	mov	r5, r0
 806229c: fb81 3102    	smull	r3, r1, r1, r2
 80622a0: ea4f 73e2    	asr.w	r3, r2, #0x1f
 80622a4: ebc3 0361    	rsb	r3, r3, r1, asr #1
 80622a8: dd38         	ble	0x806231c <__s2b+0x94>  @ imm = #0x70
 80622aa: f04f 0c01    	mov.w	r12, #0x1
 80622ae: 2100         	movs	r1, #0x0
 80622b0: ea4f 0c4c    	lsl.w	r12, r12, #0x1
 80622b4: 3101         	adds	r1, #0x1
 80622b6: 4563         	cmp	r3, r12
 80622b8: dcfa         	bgt	0x80622b0 <__s2b+0x28>  @ imm = #-0xc
 80622ba: 4628         	mov	r0, r5
 80622bc: f7ff ff62    	bl	0x8062184 <_Balloc>     @ imm = #-0x13c
 80622c0: 4601         	mov	r1, r0
 80622c2: b368         	cbz	r0, 0x8062320 <__s2b+0x98> @ imm = #0x5a
 80622c4: 9b08         	ldr	r3, [sp, #0x20]
 80622c6: 2f09         	cmp	r7, #0x9
 80622c8: 6143         	str	r3, [r0, #0x14]
 80622ca: f04f 0301    	mov.w	r3, #0x1
 80622ce: 6103         	str	r3, [r0, #0x10]
 80622d0: dc12         	bgt	0x80622f8 <__s2b+0x70>  @ imm = #0x24
 80622d2: 340a         	adds	r4, #0xa
 80622d4: 2709         	movs	r7, #0x9
 80622d6: 42be         	cmp	r6, r7
 80622d8: dd0b         	ble	0x80622f2 <__s2b+0x6a>  @ imm = #0x16
 80622da: 1bf6         	subs	r6, r6, r7
 80622dc: 4426         	add	r6, r4
 80622de: f814 3b01    	ldrb	r3, [r4], #1
 80622e2: 220a         	movs	r2, #0xa
 80622e4: 4628         	mov	r0, r5
 80622e6: 3b30         	subs	r3, #0x30
 80622e8: f7ff ff7c    	bl	0x80621e4 <__multadd>   @ imm = #-0x108
 80622ec: 42a6         	cmp	r6, r4
 80622ee: 4601         	mov	r1, r0
 80622f0: d1f5         	bne	0x80622de <__s2b+0x56>  @ imm = #-0x16
 80622f2: 4608         	mov	r0, r1
 80622f4: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
 80622f8: f104 0909    	add.w	r9, r4, #0x9
 80622fc: 443c         	add	r4, r7
 80622fe: 46c8         	mov	r8, r9
 8062300: f818 3b01    	ldrb	r3, [r8], #1
 8062304: 220a         	movs	r2, #0xa
 8062306: 4628         	mov	r0, r5
 8062308: 3b30         	subs	r3, #0x30
 806230a: f7ff ff6b    	bl	0x80621e4 <__multadd>   @ imm = #-0x12a
 806230e: 45a0         	cmp	r8, r4
 8062310: 4601         	mov	r1, r0
 8062312: d1f5         	bne	0x8062300 <__s2b+0x78>  @ imm = #-0x16
 8062314: f1a7 0408    	sub.w	r4, r7, #0x8
 8062318: 444c         	add	r4, r9
 806231a: e7dc         	b	0x80622d6 <__s2b+0x4e>  @ imm = #-0x48
 806231c: 2100         	movs	r1, #0x0
 806231e: e7cc         	b	0x80622ba <__s2b+0x32>  @ imm = #-0x68
 8062320: 4602         	mov	r2, r0
 8062322: 4b03         	ldr	r3, [pc, #0xc]          @ 0x8062330 <__s2b+0xa8>
 8062324: 21ce         	movs	r1, #0xce
 8062326: 4803         	ldr	r0, [pc, #0xc]          @ 0x8062334 <__s2b+0xac>
 8062328: f001 fb64    	bl	0x80639f4 <__assert_func> @ imm = #0x16c8

0806232c <$d>:
 806232c: 39 8e e3 38  	.word	0x38e38e39
 8062330: 34 5a 06 08  	.word	0x08065a34
 8062334: 80 5a 06 08  	.word	0x08065a80

08062338 <__hi0bits>:
 8062338: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0x8062378 <__hi0bits+0x40>
 806233a: 4603         	mov	r3, r0
 806233c: 4002         	ands	r2, r0
 806233e: b9ca         	cbnz	r2, 0x8062374 <__hi0bits+0x3c> @ imm = #0x32
 8062340: 0403         	lsls	r3, r0, #0x10
 8062342: 2010         	movs	r0, #0x10
 8062344: f013 4f7f    	tst.w	r3, #0xff000000
 8062348: d101         	bne	0x806234e <__hi0bits+0x16> @ imm = #0x2
 806234a: 3008         	adds	r0, #0x8
 806234c: 021b         	lsls	r3, r3, #0x8
 806234e: f013 4f70    	tst.w	r3, #0xf0000000
 8062352: d101         	bne	0x8062358 <__hi0bits+0x20> @ imm = #0x2
 8062354: 3004         	adds	r0, #0x4
 8062356: 011b         	lsls	r3, r3, #0x4
 8062358: f013 4f40    	tst.w	r3, #0xc0000000
 806235c: d101         	bne	0x8062362 <__hi0bits+0x2a> @ imm = #0x2
 806235e: 3002         	adds	r0, #0x2
 8062360: 009b         	lsls	r3, r3, #0x2
 8062362: 2b00         	cmp	r3, #0x0
 8062364: db05         	blt	0x8062372 <__hi0bits+0x3a> @ imm = #0xa
 8062366: f013 4f80    	tst.w	r3, #0x40000000
 806236a: f100 0001    	add.w	r0, r0, #0x1
 806236e: bf08         	it	eq
 8062370: 2020         	moveq	r0, #0x20
 8062372: 4770         	bx	lr
 8062374: 2000         	movs	r0, #0x0
 8062376: e7e5         	b	0x8062344 <__hi0bits+0xc> @ imm = #-0x36

08062378 <$d>:
 8062378: 00 00 ff ff  	.word	0xffff0000

0806237c <__lo0bits>:
 806237c: 6803         	ldr	r3, [r0]
 806237e: 4602         	mov	r2, r0
 8062380: f013 0007    	ands	r0, r3, #0x7
 8062384: d007         	beq	0x8062396 <__lo0bits+0x1a> @ imm = #0xe
 8062386: 07d9         	lsls	r1, r3, #0x1f
 8062388: d41d         	bmi	0x80623c6 <__lo0bits+0x4a> @ imm = #0x3a
 806238a: 0798         	lsls	r0, r3, #0x1e
 806238c: d51f         	bpl	0x80623ce <__lo0bits+0x52> @ imm = #0x3e
 806238e: 085b         	lsrs	r3, r3, #0x1
 8062390: 2001         	movs	r0, #0x1
 8062392: 6013         	str	r3, [r2]
 8062394: 4770         	bx	lr
 8062396: b299         	uxth	r1, r3
 8062398: b909         	cbnz	r1, 0x806239e <__lo0bits+0x22> @ imm = #0x2
 806239a: 0c1b         	lsrs	r3, r3, #0x10
 806239c: 2010         	movs	r0, #0x10
 806239e: b2d9         	uxtb	r1, r3
 80623a0: b909         	cbnz	r1, 0x80623a6 <__lo0bits+0x2a> @ imm = #0x2
 80623a2: 3008         	adds	r0, #0x8
 80623a4: 0a1b         	lsrs	r3, r3, #0x8
 80623a6: 0719         	lsls	r1, r3, #0x1c
 80623a8: d101         	bne	0x80623ae <__lo0bits+0x32> @ imm = #0x2
 80623aa: 3004         	adds	r0, #0x4
 80623ac: 091b         	lsrs	r3, r3, #0x4
 80623ae: 0799         	lsls	r1, r3, #0x1e
 80623b0: d101         	bne	0x80623b6 <__lo0bits+0x3a> @ imm = #0x2
 80623b2: 3002         	adds	r0, #0x2
 80623b4: 089b         	lsrs	r3, r3, #0x2
 80623b6: 07d9         	lsls	r1, r3, #0x1f
 80623b8: d403         	bmi	0x80623c2 <__lo0bits+0x46> @ imm = #0x6
 80623ba: 085b         	lsrs	r3, r3, #0x1
 80623bc: f100 0001    	add.w	r0, r0, #0x1
 80623c0: d003         	beq	0x80623ca <__lo0bits+0x4e> @ imm = #0x6
 80623c2: 6013         	str	r3, [r2]
 80623c4: 4770         	bx	lr
 80623c6: 2000         	movs	r0, #0x0
 80623c8: 4770         	bx	lr
 80623ca: 2020         	movs	r0, #0x20
 80623cc: 4770         	bx	lr
 80623ce: 089b         	lsrs	r3, r3, #0x2
 80623d0: 2002         	movs	r0, #0x2
 80623d2: 6013         	str	r3, [r2]
 80623d4: 4770         	bx	lr
 80623d6: bf00         	nop

080623d8 <__i2b>:
 80623d8: b538         	push	{r3, r4, r5, lr}
 80623da: 6cc3         	ldr	r3, [r0, #0x4c]
 80623dc: 4604         	mov	r4, r0
 80623de: 460d         	mov	r5, r1
 80623e0: b14b         	cbz	r3, 0x80623f6 <__i2b+0x1e> @ imm = #0x12
 80623e2: 6858         	ldr	r0, [r3, #0x4]
 80623e4: b1b0         	cbz	r0, 0x8062414 <__i2b+0x3c> @ imm = #0x2c
 80623e6: 6802         	ldr	r2, [r0]
 80623e8: 605a         	str	r2, [r3, #0x4]
 80623ea: 2200         	movs	r2, #0x0
 80623ec: 2301         	movs	r3, #0x1
 80623ee: 6145         	str	r5, [r0, #0x14]
 80623f0: e9c0 2303    	strd	r2, r3, [r0, #12]
 80623f4: bd38         	pop	{r3, r4, r5, pc}
 80623f6: 2221         	movs	r2, #0x21
 80623f8: 2104         	movs	r1, #0x4
 80623fa: f001 fb1f    	bl	0x8063a3c <_calloc_r>   @ imm = #0x163e
 80623fe: 4603         	mov	r3, r0
 8062400: 64e0         	str	r0, [r4, #0x4c]
 8062402: 2800         	cmp	r0, #0x0
 8062404: d1ed         	bne	0x80623e2 <__i2b+0xa>   @ imm = #-0x26
 8062406: 4b09         	ldr	r3, [pc, #0x24]         @ 0x806242c <__i2b+0x54>
 8062408: 2200         	movs	r2, #0x0
 806240a: f44f 71a0    	mov.w	r1, #0x140
 806240e: 4808         	ldr	r0, [pc, #0x20]         @ 0x8062430 <__i2b+0x58>
 8062410: f001 faf0    	bl	0x80639f4 <__assert_func> @ imm = #0x15e0
 8062414: 221c         	movs	r2, #0x1c
 8062416: 2101         	movs	r1, #0x1
 8062418: 4620         	mov	r0, r4
 806241a: f001 fb0f    	bl	0x8063a3c <_calloc_r>   @ imm = #0x161e
 806241e: 2800         	cmp	r0, #0x0
 8062420: d0f1         	beq	0x8062406 <__i2b+0x2e>  @ imm = #-0x1e
 8062422: 2201         	movs	r2, #0x1
 8062424: 2302         	movs	r3, #0x2
 8062426: e9c0 2301    	strd	r2, r3, [r0, #4]
 806242a: e7de         	b	0x80623ea <__i2b+0x12>  @ imm = #-0x44

0806242c <$d>:
 806242c: 34 5a 06 08  	.word	0x08065a34
 8062430: 80 5a 06 08  	.word	0x08065a80

08062434 <__multiply>:
 8062434: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8062438: 690e         	ldr	r6, [r1, #0x10]
 806243a: b085         	sub	sp, #0x14
 806243c: 6915         	ldr	r5, [r2, #0x10]
 806243e: 4688         	mov	r8, r1
 8062440: 4614         	mov	r4, r2
 8062442: 42ae         	cmp	r6, r5
 8062444: db05         	blt	0x8062452 <__multiply+0x1e> @ imm = #0xa
 8062446: 462a         	mov	r2, r5
 8062448: 4623         	mov	r3, r4
 806244a: 4635         	mov	r5, r6
 806244c: 460c         	mov	r4, r1
 806244e: 4616         	mov	r6, r2
 8062450: 4698         	mov	r8, r3
 8062452: 19af         	adds	r7, r5, r6
 8062454: e9d4 1301    	ldrd	r1, r3, [r4, #4]
 8062458: 42bb         	cmp	r3, r7
 806245a: bfb8         	it	lt
 806245c: 3101         	addlt	r1, #0x1
 806245e: f7ff fe91    	bl	0x8062184 <_Balloc>     @ imm = #-0x2de
 8062462: 9001         	str	r0, [sp, #0x4]
 8062464: 2800         	cmp	r0, #0x0
 8062466: f000 8089    	beq.w	0x806257c <__multiply+0x148> @ imm = #0x112
 806246a: 9b01         	ldr	r3, [sp, #0x4]
 806246c: f103 0914    	add.w	r9, r3, #0x14
 8062470: eb09 0a87    	add.w	r10, r9, r7, lsl #2
 8062474: 45d1         	cmp	r9, r10
 8062476: d205         	bhs	0x8062484 <__multiply+0x50> @ imm = #0xa
 8062478: 464b         	mov	r3, r9
 806247a: 2200         	movs	r2, #0x0
 806247c: f843 2b04    	str	r2, [r3], #4
 8062480: 459a         	cmp	r10, r3
 8062482: d8fb         	bhi	0x806247c <__multiply+0x48> @ imm = #-0xa
 8062484: f108 0814    	add.w	r8, r8, #0x14
 8062488: f104 0314    	add.w	r3, r4, #0x14
 806248c: eb08 0b86    	add.w	r11, r8, r6, lsl #2
 8062490: 461a         	mov	r2, r3
 8062492: eb03 0585    	add.w	r5, r3, r5, lsl #2
 8062496: 45d8         	cmp	r8, r11
 8062498: d261         	bhs	0x806255e <__multiply+0x12a> @ imm = #0xc2
 806249a: 1b2b         	subs	r3, r5, r4
 806249c: 3415         	adds	r4, #0x15
 806249e: 46ac         	mov	r12, r5
 80624a0: 3b15         	subs	r3, #0x15
 80624a2: f023 0303    	bic	r3, r3, #0x3
 80624a6: 3304         	adds	r3, #0x4
 80624a8: 42a5         	cmp	r5, r4
 80624aa: bf38         	it	lo
 80624ac: 2304         	movlo	r3, #0x4
 80624ae: e9cd a702    	strd	r10, r7, [sp, #8]
 80624b2: 461f         	mov	r7, r3
 80624b4: 4692         	mov	r10, r2
 80624b6: e005         	b	0x80624c4 <__multiply+0x90> @ imm = #0xa
 80624b8: 0c00         	lsrs	r0, r0, #0x10
 80624ba: d12b         	bne	0x8062514 <__multiply+0xe0> @ imm = #0x56
 80624bc: 45c3         	cmp	r11, r8
 80624be: f109 0904    	add.w	r9, r9, #0x4
 80624c2: d94a         	bls	0x806255a <__multiply+0x126> @ imm = #0x94
 80624c4: f858 0b04    	ldr	r0, [r8], #4
 80624c8: b285         	uxth	r5, r0
 80624ca: 2d00         	cmp	r5, #0x0
 80624cc: d0f4         	beq	0x80624b8 <__multiply+0x84> @ imm = #-0x18
 80624ce: 4656         	mov	r6, r10
 80624d0: 464c         	mov	r4, r9
 80624d2: 2300         	movs	r3, #0x0
 80624d4: f856 0b04    	ldr	r0, [r6], #4
 80624d8: 6821         	ldr	r1, [r4]
 80624da: b282         	uxth	r2, r0
 80624dc: 45b4         	cmp	r12, r6
 80624de: fa1f fe81    	uxth.w	lr, r1
 80624e2: ea4f 4010    	lsr.w	r0, r0, #0x10
 80624e6: fb05 ee02    	mla	lr, r5, r2, lr
 80624ea: ea4f 4211    	lsr.w	r2, r1, #0x10
 80624ee: 4473         	add	r3, lr
 80624f0: fb05 2200    	mla	r2, r5, r0, r2
 80624f4: eb02 4213    	add.w	r2, r2, r3, lsr #16
 80624f8: b29b         	uxth	r3, r3
 80624fa: ea43 4302    	orr.w	r3, r3, r2, lsl #16
 80624fe: f844 3b04    	str	r3, [r4], #4
 8062502: ea4f 4312    	lsr.w	r3, r2, #0x10
 8062506: d8e5         	bhi	0x80624d4 <__multiply+0xa0> @ imm = #-0x36
 8062508: f849 3007    	str.w	r3, [r9, r7]
 806250c: f858 0c04    	ldr	r0, [r8, #-4]
 8062510: 0c00         	lsrs	r0, r0, #0x10
 8062512: d0d3         	beq	0x80624bc <__multiply+0x88> @ imm = #-0x5a
 8062514: f8d9 3000    	ldr.w	r3, [r9]
 8062518: 4654         	mov	r4, r10
 806251a: 464d         	mov	r5, r9
 806251c: 2200         	movs	r2, #0x0
 806251e: 4619         	mov	r1, r3
 8062520: 8826         	ldrh	r6, [r4]
 8062522: 0c09         	lsrs	r1, r1, #0x10
 8062524: b29b         	uxth	r3, r3
 8062526: fb00 1106    	mla	r1, r0, r6, r1
 806252a: 440a         	add	r2, r1
 806252c: ea43 4302    	orr.w	r3, r3, r2, lsl #16
 8062530: f845 3b04    	str	r3, [r5], #4
 8062534: f854 6b04    	ldr	r6, [r4], #4
 8062538: 6829         	ldr	r1, [r5]
 806253a: 0c36         	lsrs	r6, r6, #0x10
 806253c: 45a4         	cmp	r12, r4
 806253e: b28b         	uxth	r3, r1
 8062540: fb00 3306    	mla	r3, r0, r6, r3
 8062544: eb03 4312    	add.w	r3, r3, r2, lsr #16
 8062548: ea4f 4213    	lsr.w	r2, r3, #0x10
 806254c: d8e8         	bhi	0x8062520 <__multiply+0xec> @ imm = #-0x30
 806254e: 45c3         	cmp	r11, r8
 8062550: f849 3007    	str.w	r3, [r9, r7]
 8062554: f109 0904    	add.w	r9, r9, #0x4
 8062558: d8b4         	bhi	0x80624c4 <__multiply+0x90> @ imm = #-0x98
 806255a: e9dd a702    	ldrd	r10, r7, [sp, #8]
 806255e: 2f00         	cmp	r7, #0x0
 8062560: dc02         	bgt	0x8062568 <__multiply+0x134> @ imm = #0x4
 8062562: e005         	b	0x8062570 <__multiply+0x13c> @ imm = #0xa
 8062564: 3f01         	subs	r7, #0x1
 8062566: d003         	beq	0x8062570 <__multiply+0x13c> @ imm = #0x6
 8062568: f85a 3d04    	ldr	r3, [r10, #-4]!
 806256c: 2b00         	cmp	r3, #0x0
 806256e: d0f9         	beq	0x8062564 <__multiply+0x130> @ imm = #-0xe
 8062570: 9b01         	ldr	r3, [sp, #0x4]
 8062572: 4618         	mov	r0, r3
 8062574: 611f         	str	r7, [r3, #0x10]
 8062576: b005         	add	sp, #0x14
 8062578: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806257c: 4602         	mov	r2, r0
 806257e: 4b03         	ldr	r3, [pc, #0xc]          @ 0x806258c <__multiply+0x158>
 8062580: f240 115d    	movw	r1, #0x15d
 8062584: 4802         	ldr	r0, [pc, #0x8]          @ 0x8062590 <__multiply+0x15c>
 8062586: f001 fa35    	bl	0x80639f4 <__assert_func> @ imm = #0x146a
 806258a: bf00         	nop

0806258c <$d>:
 806258c: 34 5a 06 08  	.word	0x08065a34
 8062590: 80 5a 06 08  	.word	0x08065a80

08062594 <__pow5mult>:
 8062594: f012 0303    	ands	r3, r2, #0x3
 8062598: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 806259c: 4614         	mov	r4, r2
 806259e: 4606         	mov	r6, r0
 80625a0: d132         	bne	0x8062608 <__pow5mult+0x74> @ imm = #0x64
 80625a2: 460d         	mov	r5, r1
 80625a4: 10a4         	asrs	r4, r4, #0x2
 80625a6: d020         	beq	0x80625ea <__pow5mult+0x56> @ imm = #0x40
 80625a8: f8d6 8048    	ldr.w	r8, [r6, #0x48]
 80625ac: f1b8 0f00    	cmp.w	r8, #0x0
 80625b0: d033         	beq	0x806261a <__pow5mult+0x86> @ imm = #0x66
 80625b2: 07e3         	lsls	r3, r4, #0x1f
 80625b4: f04f 0700    	mov.w	r7, #0x0
 80625b8: d407         	bmi	0x80625ca <__pow5mult+0x36> @ imm = #0xe
 80625ba: 1064         	asrs	r4, r4, #0x1
 80625bc: d015         	beq	0x80625ea <__pow5mult+0x56> @ imm = #0x2a
 80625be: f8d8 0000    	ldr.w	r0, [r8]
 80625c2: b1a8         	cbz	r0, 0x80625f0 <__pow5mult+0x5c> @ imm = #0x2a
 80625c4: 4680         	mov	r8, r0
 80625c6: 07e3         	lsls	r3, r4, #0x1f
 80625c8: d5f7         	bpl	0x80625ba <__pow5mult+0x26> @ imm = #-0x12
 80625ca: 4642         	mov	r2, r8
 80625cc: 4629         	mov	r1, r5
 80625ce: 4630         	mov	r0, r6
 80625d0: f7ff ff30    	bl	0x8062434 <__multiply>  @ imm = #-0x1a0
 80625d4: b1b5         	cbz	r5, 0x8062604 <__pow5mult+0x70> @ imm = #0x2c
 80625d6: 6869         	ldr	r1, [r5, #0x4]
 80625d8: 1064         	asrs	r4, r4, #0x1
 80625da: 6cf3         	ldr	r3, [r6, #0x4c]
 80625dc: f853 2021    	ldr.w	r2, [r3, r1, lsl #2]
 80625e0: 602a         	str	r2, [r5]
 80625e2: f843 5021    	str.w	r5, [r3, r1, lsl #2]
 80625e6: 4605         	mov	r5, r0
 80625e8: d1e9         	bne	0x80625be <__pow5mult+0x2a> @ imm = #-0x2e
 80625ea: 4628         	mov	r0, r5
 80625ec: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 80625f0: 4642         	mov	r2, r8
 80625f2: 4641         	mov	r1, r8
 80625f4: 4630         	mov	r0, r6
 80625f6: f7ff ff1d    	bl	0x8062434 <__multiply>  @ imm = #-0x1c6
 80625fa: f8c8 0000    	str.w	r0, [r8]
 80625fe: 4680         	mov	r8, r0
 8062600: 6007         	str	r7, [r0]
 8062602: e7e0         	b	0x80625c6 <__pow5mult+0x32> @ imm = #-0x40
 8062604: 4605         	mov	r5, r0
 8062606: e7d8         	b	0x80625ba <__pow5mult+0x26> @ imm = #-0x50
 8062608: 3b01         	subs	r3, #0x1
 806260a: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0x8062648 <__pow5mult+0xb4>
 806260c: f852 2023    	ldr.w	r2, [r2, r3, lsl #2]
 8062610: 2300         	movs	r3, #0x0
 8062612: f7ff fde7    	bl	0x80621e4 <__multadd>   @ imm = #-0x432
 8062616: 4605         	mov	r5, r0
 8062618: e7c4         	b	0x80625a4 <__pow5mult+0x10> @ imm = #-0x78
 806261a: 2101         	movs	r1, #0x1
 806261c: 4630         	mov	r0, r6
 806261e: f7ff fdb1    	bl	0x8062184 <_Balloc>     @ imm = #-0x49e
 8062622: 4680         	mov	r8, r0
 8062624: b140         	cbz	r0, 0x8062638 <__pow5mult+0xa4> @ imm = #0x10
 8062626: 2301         	movs	r3, #0x1
 8062628: f240 2271    	movw	r2, #0x271
 806262c: e9c0 3204    	strd	r3, r2, [r0, #16]
 8062630: 2300         	movs	r3, #0x0
 8062632: 64b0         	str	r0, [r6, #0x48]
 8062634: 6003         	str	r3, [r0]
 8062636: e7bc         	b	0x80625b2 <__pow5mult+0x1e> @ imm = #-0x88
 8062638: 4602         	mov	r2, r0
 806263a: 4b04         	ldr	r3, [pc, #0x10]         @ 0x806264c <__pow5mult+0xb8>
 806263c: f44f 71a0    	mov.w	r1, #0x140
 8062640: 4803         	ldr	r0, [pc, #0xc]          @ 0x8062650 <__pow5mult+0xbc>
 8062642: f001 f9d7    	bl	0x80639f4 <__assert_func> @ imm = #0x13ae
 8062646: bf00         	nop

08062648 <$d>:
 8062648: b8 5a 06 08  	.word	0x08065ab8
 806264c: 34 5a 06 08  	.word	0x08065a34
 8062650: 80 5a 06 08  	.word	0x08065a80

08062654 <__lshift>:
 8062654: e92d 47f0    	push.w	{r4, r5, r6, r7, r8, r9, r10, lr}
 8062658: 460c         	mov	r4, r1
 806265a: 4690         	mov	r8, r2
 806265c: 4607         	mov	r7, r0
 806265e: ea4f 1962    	asr.w	r9, r2, #0x5
 8062662: 6926         	ldr	r6, [r4, #0x10]
 8062664: 68a3         	ldr	r3, [r4, #0x8]
 8062666: eb06 1662    	add.w	r6, r6, r2, asr #5
 806266a: 6849         	ldr	r1, [r1, #0x4]
 806266c: 1c75         	adds	r5, r6, #0x1
 806266e: 429d         	cmp	r5, r3
 8062670: dd03         	ble	0x806267a <__lshift+0x26> @ imm = #0x6
 8062672: 005b         	lsls	r3, r3, #0x1
 8062674: 3101         	adds	r1, #0x1
 8062676: 429d         	cmp	r5, r3
 8062678: dcfb         	bgt	0x8062672 <__lshift+0x1e> @ imm = #-0xa
 806267a: 4638         	mov	r0, r7
 806267c: f7ff fd82    	bl	0x8062184 <_Balloc>     @ imm = #-0x4fc
 8062680: 2800         	cmp	r0, #0x0
 8062682: d050         	beq	0x8062726 <__lshift+0xd2> @ imm = #0xa0
 8062684: f1b9 0f00    	cmp.w	r9, #0x0
 8062688: f100 0c14    	add.w	r12, r0, #0x14
 806268c: dd0e         	ble	0x80626ac <__lshift+0x58> @ imm = #0x1c
 806268e: f109 0205    	add.w	r2, r9, #0x5
 8062692: 4663         	mov	r3, r12
 8062694: 2100         	movs	r1, #0x0
 8062696: ea4f 0e82    	lsl.w	lr, r2, #0x2
 806269a: eb00 0282    	add.w	r2, r0, r2, lsl #2
 806269e: f843 1b04    	str	r1, [r3], #4
 80626a2: 4293         	cmp	r3, r2
 80626a4: d1fb         	bne	0x806269e <__lshift+0x4a> @ imm = #-0xa
 80626a6: f1ae 0314    	sub.w	r3, lr, #0x14
 80626aa: 449c         	add	r12, r3
 80626ac: f104 0314    	add.w	r3, r4, #0x14
 80626b0: 6921         	ldr	r1, [r4, #0x10]
 80626b2: f018 081f    	ands	r8, r8, #0x1f
 80626b6: eb03 0181    	add.w	r1, r3, r1, lsl #2
 80626ba: d02b         	beq	0x8062714 <__lshift+0xc0> @ imm = #0x56
 80626bc: f1c8 0920    	rsb.w	r9, r8, #0x20
 80626c0: 46e6         	mov	lr, r12
 80626c2: f04f 0a00    	mov.w	r10, #0x0
 80626c6: 681a         	ldr	r2, [r3]
 80626c8: fa02 f208    	lsl.w	r2, r2, r8
 80626cc: ea42 020a    	orr.w	r2, r2, r10
 80626d0: f84e 2b04    	str	r2, [lr], #4
 80626d4: f853 2b04    	ldr	r2, [r3], #4
 80626d8: 4299         	cmp	r1, r3
 80626da: fa22 fa09    	lsr.w	r10, r2, r9
 80626de: d8f2         	bhi	0x80626c6 <__lshift+0x72> @ imm = #-0x1c
 80626e0: 1b0b         	subs	r3, r1, r4
 80626e2: f104 0215    	add.w	r2, r4, #0x15
 80626e6: f1ba 0f00    	cmp.w	r10, #0x0
 80626ea: bf18         	it	ne
 80626ec: 462e         	movne	r6, r5
 80626ee: 3b15         	subs	r3, #0x15
 80626f0: f023 0303    	bic	r3, r3, #0x3
 80626f4: 3304         	adds	r3, #0x4
 80626f6: 4291         	cmp	r1, r2
 80626f8: bf38         	it	lo
 80626fa: 2304         	movlo	r3, #0x4
 80626fc: f84c a003    	str.w	r10, [r12, r3]
 8062700: 6cfb         	ldr	r3, [r7, #0x4c]
 8062702: 6862         	ldr	r2, [r4, #0x4]
 8062704: 6106         	str	r6, [r0, #0x10]
 8062706: f853 1022    	ldr.w	r1, [r3, r2, lsl #2]
 806270a: 6021         	str	r1, [r4]
 806270c: f843 4022    	str.w	r4, [r3, r2, lsl #2]
 8062710: e8bd 87f0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, pc}
 8062714: f1ac 0c04    	sub.w	r12, r12, #0x4
 8062718: f853 2b04    	ldr	r2, [r3], #4
 806271c: 4299         	cmp	r1, r3
 806271e: f84c 2f04    	str	r2, [r12, #4]!
 8062722: d8f9         	bhi	0x8062718 <__lshift+0xc4> @ imm = #-0xe
 8062724: e7ec         	b	0x8062700 <__lshift+0xac> @ imm = #-0x28
 8062726: 4602         	mov	r2, r0
 8062728: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8062734 <__lshift+0xe0>
 806272a: f240 11d9    	movw	r1, #0x1d9
 806272e: 4802         	ldr	r0, [pc, #0x8]          @ 0x8062738 <__lshift+0xe4>
 8062730: f001 f960    	bl	0x80639f4 <__assert_func> @ imm = #0x12c0

08062734 <$d>:
 8062734: 34 5a 06 08  	.word	0x08065a34
 8062738: 80 5a 06 08  	.word	0x08065a80

0806273c <__mcmp>:
 806273c: 4684         	mov	r12, r0
 806273e: 690b         	ldr	r3, [r1, #0x10]
 8062740: 6900         	ldr	r0, [r0, #0x10]
 8062742: 1ac0         	subs	r0, r0, r3
 8062744: d115         	bne	0x8062772 <__mcmp+0x36> @ imm = #0x2a
 8062746: f10c 0c14    	add.w	r12, r12, #0x14
 806274a: 3114         	adds	r1, #0x14
 806274c: eb0c 0283    	add.w	r2, r12, r3, lsl #2
 8062750: eb01 0383    	add.w	r3, r1, r3, lsl #2
 8062754: b410         	push	{r4}
 8062756: e001         	b	0x806275c <__mcmp+0x20> @ imm = #0x2
 8062758: 4594         	cmp	r12, r2
 806275a: d208         	bhs	0x806276e <__mcmp+0x32> @ imm = #0x10
 806275c: f852 4d04    	ldr	r4, [r2, #-4]!
 8062760: f853 1d04    	ldr	r1, [r3, #-4]!
 8062764: 428c         	cmp	r4, r1
 8062766: d0f7         	beq	0x8062758 <__mcmp+0x1c> @ imm = #-0x12
 8062768: d204         	bhs	0x8062774 <__mcmp+0x38> @ imm = #0x8
 806276a: f04f 30ff    	mov.w	r0, #0xffffffff
 806276e: bc10         	pop	{r4}
 8062770: 4770         	bx	lr
 8062772: 4770         	bx	lr
 8062774: 2001         	movs	r0, #0x1
 8062776: bc10         	pop	{r4}
 8062778: 4770         	bx	lr
 806277a: bf00         	nop

0806277c <__mdiff>:
 806277c: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8062780: 690e         	ldr	r6, [r1, #0x10]
 8062782: 460d         	mov	r5, r1
 8062784: 6913         	ldr	r3, [r2, #0x10]
 8062786: 4617         	mov	r7, r2
 8062788: 1af6         	subs	r6, r6, r3
 806278a: 2e00         	cmp	r6, #0x0
 806278c: d17a         	bne	0x8062884 <__mdiff+0x108> @ imm = #0xf4
 806278e: f101 0c14    	add.w	r12, r1, #0x14
 8062792: 3214         	adds	r2, #0x14
 8062794: eb02 0283    	add.w	r2, r2, r3, lsl #2
 8062798: eb0c 0383    	add.w	r3, r12, r3, lsl #2
 806279c: e001         	b	0x80627a2 <__mdiff+0x26> @ imm = #0x2
 806279e: 459c         	cmp	r12, r3
 80627a0: d273         	bhs	0x806288a <__mdiff+0x10e> @ imm = #0xe6
 80627a2: f853 1d04    	ldr	r1, [r3, #-4]!
 80627a6: f852 4d04    	ldr	r4, [r2, #-4]!
 80627aa: 42a1         	cmp	r1, r4
 80627ac: d0f7         	beq	0x806279e <__mdiff+0x22> @ imm = #-0x12
 80627ae: d364         	blo	0x806287a <__mdiff+0xfe> @ imm = #0xc8
 80627b0: 6869         	ldr	r1, [r5, #0x4]
 80627b2: f7ff fce7    	bl	0x8062184 <_Balloc>     @ imm = #-0x632
 80627b6: 2800         	cmp	r0, #0x0
 80627b8: d071         	beq	0x806289e <__mdiff+0x122> @ imm = #0xe2
 80627ba: 692c         	ldr	r4, [r5, #0x10]
 80627bc: f105 0814    	add.w	r8, r5, #0x14
 80627c0: f107 0e14    	add.w	lr, r7, #0x14
 80627c4: 693a         	ldr	r2, [r7, #0x10]
 80627c6: f100 0914    	add.w	r9, r0, #0x14
 80627ca: f105 0c10    	add.w	r12, r5, #0x10
 80627ce: 60c6         	str	r6, [r0, #0xc]
 80627d0: eb0e 0282    	add.w	r2, lr, r2, lsl #2
 80627d4: eb08 0684    	add.w	r6, r8, r4, lsl #2
 80627d8: f04f 0a00    	mov.w	r10, #0x0
 80627dc: 464d         	mov	r5, r9
 80627de: f85c bf04    	ldr	r11, [r12, #4]!
 80627e2: f85e 1b04    	ldr	r1, [lr], #4
 80627e6: fa1f f38b    	uxth.w	r3, r11
 80627ea: 4572         	cmp	r2, lr
 80627ec: 4453         	add	r3, r10
 80627ee: fa1f fa81    	uxth.w	r10, r1
 80627f2: ea4f 4111    	lsr.w	r1, r1, #0x10
 80627f6: eba3 030a    	sub.w	r3, r3, r10
 80627fa: ebc1 411b    	rsb	r1, r1, r11, lsr #16
 80627fe: eb01 4123    	add.w	r1, r1, r3, asr #16
 8062802: b29b         	uxth	r3, r3
 8062804: ea4f 4a21    	asr.w	r10, r1, #0x10
 8062808: ea43 4301    	orr.w	r3, r3, r1, lsl #16
 806280c: f845 3b04    	str	r3, [r5], #4
 8062810: d8e5         	bhi	0x80627de <__mdiff+0x62> @ imm = #-0x36
 8062812: 1bd1         	subs	r1, r2, r7
 8062814: 3715         	adds	r7, #0x15
 8062816: 42ba         	cmp	r2, r7
 8062818: f1a1 0215    	sub.w	r2, r1, #0x15
 806281c: f022 0103    	bic	r1, r2, #0x3
 8062820: 460a         	mov	r2, r1
 8062822: f101 0104    	add.w	r1, r1, #0x4
 8062826: bf3c         	itt	lo
 8062828: 2104         	movlo	r1, #0x4
 806282a: 2200         	movlo	r2, #0x0
 806282c: 4488         	add	r8, r1
 806282e: 444a         	add	r2, r9
 8062830: 4489         	add	r9, r1
 8062832: 4546         	cmp	r6, r8
 8062834: d918         	bls	0x8062868 <__mdiff+0xec> @ imm = #0x30
 8062836: 464d         	mov	r5, r9
 8062838: 4642         	mov	r2, r8
 806283a: f852 1b04    	ldr	r1, [r2], #4
 806283e: b28b         	uxth	r3, r1
 8062840: 4296         	cmp	r6, r2
 8062842: 4453         	add	r3, r10
 8062844: ea4f 4a23    	asr.w	r10, r3, #0x10
 8062848: b29b         	uxth	r3, r3
 806284a: eb0a 4111    	add.w	r1, r10, r1, lsr #16
 806284e: ea43 4301    	orr.w	r3, r3, r1, lsl #16
 8062852: ea4f 4a21    	asr.w	r10, r1, #0x10
 8062856: f845 3b04    	str	r3, [r5], #4
 806285a: d8ee         	bhi	0x806283a <__mdiff+0xbe> @ imm = #-0x24
 806285c: 1e72         	subs	r2, r6, #0x1
 806285e: eba2 0808    	sub.w	r8, r2, r8
 8062862: f028 0203    	bic	r2, r8, #0x3
 8062866: 444a         	add	r2, r9
 8062868: b923         	cbnz	r3, 0x8062874 <__mdiff+0xf8> @ imm = #0x8
 806286a: f852 3d04    	ldr	r3, [r2, #-4]!
 806286e: 3c01         	subs	r4, #0x1
 8062870: 2b00         	cmp	r3, #0x0
 8062872: d0fa         	beq	0x806286a <__mdiff+0xee> @ imm = #-0xc
 8062874: 6104         	str	r4, [r0, #0x10]
 8062876: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806287a: 462b         	mov	r3, r5
 806287c: 2601         	movs	r6, #0x1
 806287e: 463d         	mov	r5, r7
 8062880: 461f         	mov	r7, r3
 8062882: e795         	b	0x80627b0 <__mdiff+0x34> @ imm = #-0xd6
 8062884: dbf9         	blt	0x806287a <__mdiff+0xfe> @ imm = #-0xe
 8062886: 2600         	movs	r6, #0x0
 8062888: e792         	b	0x80627b0 <__mdiff+0x34> @ imm = #-0xdc
 806288a: 2100         	movs	r1, #0x0
 806288c: f7ff fc7a    	bl	0x8062184 <_Balloc>     @ imm = #-0x70c
 8062890: b160         	cbz	r0, 0x80628ac <__mdiff+0x130> @ imm = #0x18
 8062892: 2201         	movs	r2, #0x1
 8062894: 2300         	movs	r3, #0x0
 8062896: e9c0 2304    	strd	r2, r3, [r0, #16]
 806289a: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806289e: 4602         	mov	r2, r0
 80628a0: 4b06         	ldr	r3, [pc, #0x18]         @ 0x80628bc <__mdiff+0x140>
 80628a2: f44f 7110    	mov.w	r1, #0x240
 80628a6: 4806         	ldr	r0, [pc, #0x18]         @ 0x80628c0 <__mdiff+0x144>
 80628a8: f001 f8a4    	bl	0x80639f4 <__assert_func> @ imm = #0x1148
 80628ac: 4602         	mov	r2, r0
 80628ae: 4b03         	ldr	r3, [pc, #0xc]          @ 0x80628bc <__mdiff+0x140>
 80628b0: f240 2132    	movw	r1, #0x232
 80628b4: 4802         	ldr	r0, [pc, #0x8]          @ 0x80628c0 <__mdiff+0x144>
 80628b6: f001 f89d    	bl	0x80639f4 <__assert_func> @ imm = #0x113a
 80628ba: bf00         	nop

080628bc <$d>:
 80628bc: 34 5a 06 08  	.word	0x08065a34
 80628c0: 80 5a 06 08  	.word	0x08065a80

080628c4 <__ulp>:
 80628c4: 4b10         	ldr	r3, [pc, #0x40]         @ 0x8062908 <__ulp+0x44>
 80628c6: 400b         	ands	r3, r1
 80628c8: f1a3 7350    	sub.w	r3, r3, #0x3400000
 80628cc: 2b00         	cmp	r3, #0x0
 80628ce: dd02         	ble	0x80628d6 <__ulp+0x12>  @ imm = #0x4
 80628d0: 2000         	movs	r0, #0x0
 80628d2: 4619         	mov	r1, r3
 80628d4: 4770         	bx	lr
 80628d6: 425b         	rsbs	r3, r3, #0
 80628d8: f1b3 7fa0    	cmp.w	r3, #0x1400000
 80628dc: ea4f 5223    	asr.w	r2, r3, #0x14
 80628e0: da05         	bge	0x80628ee <__ulp+0x2a>  @ imm = #0xa
 80628e2: f44f 2300    	mov.w	r3, #0x80000
 80628e6: 2000         	movs	r0, #0x0
 80628e8: fa43 f102    	asr.w	r1, r3, r2
 80628ec: 4770         	bx	lr
 80628ee: 3a14         	subs	r2, #0x14
 80628f0: 2100         	movs	r1, #0x0
 80628f2: 2a1e         	cmp	r2, #0x1e
 80628f4: dd02         	ble	0x80628fc <__ulp+0x38>  @ imm = #0x4
 80628f6: 2201         	movs	r2, #0x1
 80628f8: 4610         	mov	r0, r2
 80628fa: 4770         	bx	lr
 80628fc: f04f 4300    	mov.w	r3, #0x80000000
 8062900: fa23 f202    	lsr.w	r2, r3, r2
 8062904: 4610         	mov	r0, r2
 8062906: 4770         	bx	lr

08062908 <$d>:
 8062908: 00 00 f0 7f  	.word	0x7ff00000

0806290c <__b2d>:
 806290c: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8062910: 6907         	ldr	r7, [r0, #0x10]
 8062912: f100 0614    	add.w	r6, r0, #0x14
 8062916: 460c         	mov	r4, r1
 8062918: eb06 0787    	add.w	r7, r6, r7, lsl #2
 806291c: f857 1c04    	ldr	r1, [r7, #-4]
 8062920: f1a7 0804    	sub.w	r8, r7, #0x4
 8062924: 4608         	mov	r0, r1
 8062926: f7ff fd07    	bl	0x8062338 <__hi0bits>   @ imm = #-0x5f2
 806292a: f1c0 0320    	rsb.w	r3, r0, #0x20
 806292e: 280a         	cmp	r0, #0xa
 8062930: 6023         	str	r3, [r4]
 8062932: dd38         	ble	0x80629a6 <__b2d+0x9a>  @ imm = #0x70
 8062934: 4546         	cmp	r6, r8
 8062936: d220         	bhs	0x806297a <__b2d+0x6e>  @ imm = #0x40
 8062938: f1b0 030b    	subs.w	r3, r0, #0xb
 806293c: f857 2c08    	ldr	r2, [r7, #-8]
 8062940: d028         	beq	0x8062994 <__b2d+0x88>  @ imm = #0x50
 8062942: f1c3 0c20    	rsb.w	r12, r3, #0x20
 8062946: fa01 f003    	lsl.w	r0, r1, r3
 806294a: f1a7 0108    	sub.w	r1, r7, #0x8
 806294e: fa22 f40c    	lsr.w	r4, r2, r12
 8062952: 428e         	cmp	r6, r1
 8062954: ea40 0004    	orr.w	r0, r0, r4
 8062958: f040 557f    	orr	r5, r0, #0x3fc00000
 806295c: f445 1540    	orr	r5, r5, #0x300000
 8062960: d23a         	bhs	0x80629d8 <__b2d+0xcc>  @ imm = #0x74
 8062962: fa02 f003    	lsl.w	r0, r2, r3
 8062966: f857 3c0c    	ldr	r3, [r7, #-12]
 806296a: fa23 f30c    	lsr.w	r3, r3, r12
 806296e: 4303         	orrs	r3, r0
 8062970: 461c         	mov	r4, r3
 8062972: 4620         	mov	r0, r4
 8062974: 4629         	mov	r1, r5
 8062976: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 806297a: f1b0 030b    	subs.w	r3, r0, #0xb
 806297e: d008         	beq	0x8062992 <__b2d+0x86>  @ imm = #0x10
 8062980: fa01 f003    	lsl.w	r0, r1, r3
 8062984: 2300         	movs	r3, #0x0
 8062986: f040 557f    	orr	r5, r0, #0x3fc00000
 806298a: 461c         	mov	r4, r3
 806298c: f445 1540    	orr	r5, r5, #0x300000
 8062990: e7ef         	b	0x8062972 <__b2d+0x66>  @ imm = #-0x22
 8062992: 461a         	mov	r2, r3
 8062994: f041 557f    	orr	r5, r1, #0x3fc00000
 8062998: 4614         	mov	r4, r2
 806299a: f445 1540    	orr	r5, r5, #0x300000
 806299e: 4620         	mov	r0, r4
 80629a0: 4629         	mov	r1, r5
 80629a2: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 80629a6: f1c0 030b    	rsb.w	r3, r0, #0xb
 80629aa: 4546         	cmp	r6, r8
 80629ac: fa21 f203    	lsr.w	r2, r1, r3
 80629b0: f042 557f    	orr	r5, r2, #0x3fc00000
 80629b4: f445 1540    	orr	r5, r5, #0x300000
 80629b8: d30a         	blo	0x80629d0 <__b2d+0xc4>  @ imm = #0x14
 80629ba: 2200         	movs	r2, #0x0
 80629bc: f100 0315    	add.w	r3, r0, #0x15
 80629c0: fa01 f303    	lsl.w	r3, r1, r3
 80629c4: 4629         	mov	r1, r5
 80629c6: ea43 0402    	orr.w	r4, r3, r2
 80629ca: 4620         	mov	r0, r4
 80629cc: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 80629d0: f857 2c08    	ldr	r2, [r7, #-8]
 80629d4: 40da         	lsrs	r2, r3
 80629d6: e7f1         	b	0x80629bc <__b2d+0xb0>  @ imm = #-0x1e
 80629d8: fa02 f303    	lsl.w	r3, r2, r3
 80629dc: 461c         	mov	r4, r3
 80629de: e7c8         	b	0x8062972 <__b2d+0x66>  @ imm = #-0x70

080629e0 <__d2b>:
 80629e0: b570         	push	{r4, r5, r6, lr}
 80629e2: 2101         	movs	r1, #0x1
 80629e4: b082         	sub	sp, #0x8
 80629e6: 4616         	mov	r6, r2
 80629e8: 461d         	mov	r5, r3
 80629ea: f7ff fbcb    	bl	0x8062184 <_Balloc>     @ imm = #-0x86a
 80629ee: 4604         	mov	r4, r0
 80629f0: 2800         	cmp	r0, #0x0
 80629f2: d04c         	beq	0x8062a8e <__d2b+0xae>  @ imm = #0x98
 80629f4: 462b         	mov	r3, r5
 80629f6: f3c5 550a    	ubfx	r5, r5, #0x14, #0xb
 80629fa: f3c3 0313    	ubfx	r3, r3, #0x0, #0x14
 80629fe: b10d         	cbz	r5, 0x8062a04 <__d2b+0x24> @ imm = #0x2
 8062a00: f443 1380    	orr	r3, r3, #0x100000
 8062a04: 2e00         	cmp	r6, #0x0
 8062a06: 9301         	str	r3, [sp, #0x4]
 8062a08: d022         	beq	0x8062a50 <__d2b+0x70>  @ imm = #0x44
 8062a0a: 4668         	mov	r0, sp
 8062a0c: 9600         	str	r6, [sp]
 8062a0e: f7ff fcb5    	bl	0x806237c <__lo0bits>   @ imm = #-0x696
 8062a12: 2800         	cmp	r0, #0x0
 8062a14: d037         	beq	0x8062a86 <__d2b+0xa6>  @ imm = #0x6e
 8062a16: 9b01         	ldr	r3, [sp, #0x4]
 8062a18: f1c0 0220    	rsb.w	r2, r0, #0x20
 8062a1c: 9900         	ldr	r1, [sp]
 8062a1e: fa03 f202    	lsl.w	r2, r3, r2
 8062a22: 40c3         	lsrs	r3, r0
 8062a24: 430a         	orrs	r2, r1
 8062a26: 9301         	str	r3, [sp, #0x4]
 8062a28: 6162         	str	r2, [r4, #0x14]
 8062a2a: 2b00         	cmp	r3, #0x0
 8062a2c: 61a3         	str	r3, [r4, #0x18]
 8062a2e: bf14         	ite	ne
 8062a30: 2102         	movne	r1, #0x2
 8062a32: 2101         	moveq	r1, #0x1
 8062a34: 6121         	str	r1, [r4, #0x10]
 8062a36: b1b5         	cbz	r5, 0x8062a66 <__d2b+0x86> @ imm = #0x2c
 8062a38: f2a5 4333    	subw	r3, r5, #0x433
 8062a3c: f1c0 0235    	rsb.w	r2, r0, #0x35
 8062a40: 4418         	add	r0, r3
 8062a42: 9b06         	ldr	r3, [sp, #0x18]
 8062a44: 6018         	str	r0, [r3]
 8062a46: 4620         	mov	r0, r4
 8062a48: 9b07         	ldr	r3, [sp, #0x1c]
 8062a4a: 601a         	str	r2, [r3]
 8062a4c: b002         	add	sp, #0x8
 8062a4e: bd70         	pop	{r4, r5, r6, pc}
 8062a50: a801         	add	r0, sp, #0x4
 8062a52: f7ff fc93    	bl	0x806237c <__lo0bits>   @ imm = #-0x6da
 8062a56: 2301         	movs	r3, #0x1
 8062a58: 9a01         	ldr	r2, [sp, #0x4]
 8062a5a: 3020         	adds	r0, #0x20
 8062a5c: 4619         	mov	r1, r3
 8062a5e: 6123         	str	r3, [r4, #0x10]
 8062a60: 6162         	str	r2, [r4, #0x14]
 8062a62: 2d00         	cmp	r5, #0x0
 8062a64: d1e8         	bne	0x8062a38 <__d2b+0x58>  @ imm = #-0x30
 8062a66: eb04 0381    	add.w	r3, r4, r1, lsl #2
 8062a6a: 9a06         	ldr	r2, [sp, #0x18]
 8062a6c: f2a0 4032    	subw	r0, r0, #0x432
 8062a70: 6010         	str	r0, [r2]
 8062a72: 6918         	ldr	r0, [r3, #0x10]
 8062a74: f7ff fc60    	bl	0x8062338 <__hi0bits>   @ imm = #-0x740
 8062a78: 9b07         	ldr	r3, [sp, #0x1c]
 8062a7a: ebc0 1141    	rsb	r1, r0, r1, lsl #5
 8062a7e: 4620         	mov	r0, r4
 8062a80: 6019         	str	r1, [r3]
 8062a82: b002         	add	sp, #0x8
 8062a84: bd70         	pop	{r4, r5, r6, pc}
 8062a86: e9dd 2300    	ldrd	r2, r3, [sp]
 8062a8a: 6162         	str	r2, [r4, #0x14]
 8062a8c: e7cd         	b	0x8062a2a <__d2b+0x4a>  @ imm = #-0x66
 8062a8e: 4602         	mov	r2, r0
 8062a90: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8062a9c <__d2b+0xbc>
 8062a92: f240 310a    	movw	r1, #0x30a
 8062a96: 4802         	ldr	r0, [pc, #0x8]          @ 0x8062aa0 <__d2b+0xc0>
 8062a98: f000 ffac    	bl	0x80639f4 <__assert_func> @ imm = #0xf58

08062a9c <$d>:
 8062a9c: 34 5a 06 08  	.word	0x08065a34
 8062aa0: 80 5a 06 08  	.word	0x08065a80

08062aa4 <__ratio>:
 8062aa4: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
 8062aa8: b083         	sub	sp, #0xc
 8062aaa: 460f         	mov	r7, r1
 8062aac: 4680         	mov	r8, r0
 8062aae: 4669         	mov	r1, sp
 8062ab0: f7ff ff2c    	bl	0x806290c <__b2d>       @ imm = #-0x1a8
 8062ab4: 4604         	mov	r4, r0
 8062ab6: 460d         	mov	r5, r1
 8062ab8: 4638         	mov	r0, r7
 8062aba: a901         	add	r1, sp, #0x4
 8062abc: f7ff ff26    	bl	0x806290c <__b2d>       @ imm = #-0x1b4
 8062ac0: f8d8 3010    	ldr.w	r3, [r8, #0x10]
 8062ac4: 693a         	ldr	r2, [r7, #0x10]
 8062ac6: 460f         	mov	r7, r1
 8062ac8: 4606         	mov	r6, r0
 8062aca: 1a9a         	subs	r2, r3, r2
 8062acc: e9dd 1300    	ldrd	r1, r3, [sp]
 8062ad0: 1acb         	subs	r3, r1, r3
 8062ad2: eb03 1342    	add.w	r3, r3, r2, lsl #5
 8062ad6: 2b00         	cmp	r3, #0x0
 8062ad8: dd0b         	ble	0x8062af2 <__ratio+0x4e> @ imm = #0x16
 8062ada: eb05 5903    	add.w	r9, r5, r3, lsl #20
 8062ade: 464d         	mov	r5, r9
 8062ae0: 4632         	mov	r2, r6
 8062ae2: 463b         	mov	r3, r7
 8062ae4: 4620         	mov	r0, r4
 8062ae6: 4629         	mov	r1, r5
 8062ae8: f002 fbd2    	bl	0x8065290 <__divdf3>    @ imm = #0x27a4
 8062aec: b003         	add	sp, #0xc
 8062aee: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8062af2: ebc3 3303    	rsb	r3, r3, r3, lsl #12
 8062af6: eb07 5103    	add.w	r1, r7, r3, lsl #20
 8062afa: 460f         	mov	r7, r1
 8062afc: e7f0         	b	0x8062ae0 <__ratio+0x3c> @ imm = #-0x20
 8062afe: bf00         	nop

08062b00 <_mprec_log10>:
 8062b00: 2817         	cmp	r0, #0x17
 8062b02: b570         	push	{r4, r5, r6, lr}
 8062b04: 4606         	mov	r6, r0
 8062b06: dd0a         	ble	0x8062b1e <_mprec_log10+0x1e> @ imm = #0x14
 8062b08: 2000         	movs	r0, #0x0
 8062b0a: 4908         	ldr	r1, [pc, #0x20]         @ 0x8062b2c <_mprec_log10+0x2c>
 8062b0c: 2400         	movs	r4, #0x0
 8062b0e: 4d08         	ldr	r5, [pc, #0x20]         @ 0x8062b30 <_mprec_log10+0x30>
 8062b10: 4622         	mov	r2, r4
 8062b12: 462b         	mov	r3, r5
 8062b14: f002 fa92    	bl	0x806503c <__muldf3>    @ imm = #0x2524
 8062b18: 3e01         	subs	r6, #0x1
 8062b1a: d1f9         	bne	0x8062b10 <_mprec_log10+0x10> @ imm = #-0xe
 8062b1c: bd70         	pop	{r4, r5, r6, pc}
 8062b1e: 4b05         	ldr	r3, [pc, #0x14]         @ 0x8062b34 <_mprec_log10+0x34>
 8062b20: eb03 06c0    	add.w	r6, r3, r0, lsl #3
 8062b24: e9d6 0104    	ldrd	r0, r1, [r6, #16]
 8062b28: bd70         	pop	{r4, r5, r6, pc}
 8062b2a: bf00         	nop

08062b2c <$d>:
 8062b2c: 00 00 f0 3f  	.word	0x3ff00000
 8062b30: 00 00 24 40  	.word	0x40240000
 8062b34: b8 5a 06 08  	.word	0x08065ab8

08062b38 <__copybits>:
 8062b38: 3901         	subs	r1, #0x1
 8062b3a: f102 0314    	add.w	r3, r2, #0x14
 8062b3e: ea4f 1c61    	asr.w	r12, r1, #0x5
 8062b42: 6911         	ldr	r1, [r2, #0x10]
 8062b44: eb03 0181    	add.w	r1, r3, r1, lsl #2
 8062b48: f10c 0c01    	add.w	r12, r12, #0x1
 8062b4c: 428b         	cmp	r3, r1
 8062b4e: eb00 0c8c    	add.w	r12, r0, r12, lsl #2
 8062b52: d216         	bhs	0x8062b82 <__copybits+0x4a> @ imm = #0x2c
 8062b54: b510         	push	{r4, lr}
 8062b56: f1a0 0e04    	sub.w	lr, r0, #0x4
 8062b5a: f853 4b04    	ldr	r4, [r3], #4
 8062b5e: 4299         	cmp	r1, r3
 8062b60: f84e 4f04    	str	r4, [lr, #4]!
 8062b64: d8f9         	bhi	0x8062b5a <__copybits+0x22> @ imm = #-0xe
 8062b66: 1a8b         	subs	r3, r1, r2
 8062b68: 3b15         	subs	r3, #0x15
 8062b6a: f023 0303    	bic	r3, r3, #0x3
 8062b6e: 3304         	adds	r3, #0x4
 8062b70: 4418         	add	r0, r3
 8062b72: 4584         	cmp	r12, r0
 8062b74: d904         	bls	0x8062b80 <__copybits+0x48> @ imm = #0x8
 8062b76: 2300         	movs	r3, #0x0
 8062b78: f840 3b04    	str	r3, [r0], #4
 8062b7c: 4584         	cmp	r12, r0
 8062b7e: d8fb         	bhi	0x8062b78 <__copybits+0x40> @ imm = #-0xa
 8062b80: bd10         	pop	{r4, pc}
 8062b82: 4584         	cmp	r12, r0
 8062b84: d905         	bls	0x8062b92 <__copybits+0x5a> @ imm = #0xa
 8062b86: 2300         	movs	r3, #0x0
 8062b88: f840 3b04    	str	r3, [r0], #4
 8062b8c: 4584         	cmp	r12, r0
 8062b8e: d8fb         	bhi	0x8062b88 <__copybits+0x50> @ imm = #-0xa
 8062b90: 4770         	bx	lr
 8062b92: 4770         	bx	lr

08062b94 <__any_on>:
 8062b94: 6903         	ldr	r3, [r0, #0x10]
 8062b96: 114a         	asrs	r2, r1, #0x5
 8062b98: 3014         	adds	r0, #0x14
 8062b9a: 4293         	cmp	r3, r2
 8062b9c: da09         	bge	0x8062bb2 <__any_on+0x1e> @ imm = #0x12
 8062b9e: eb00 0383    	add.w	r3, r0, r3, lsl #2
 8062ba2: e002         	b	0x8062baa <__any_on+0x16> @ imm = #0x4
 8062ba4: f853 2d04    	ldr	r2, [r3, #-4]!
 8062ba8: b9c2         	cbnz	r2, 0x8062bdc <__any_on+0x48> @ imm = #0x30
 8062baa: 4283         	cmp	r3, r0
 8062bac: d8fa         	bhi	0x8062ba4 <__any_on+0x10> @ imm = #-0xc
 8062bae: 2000         	movs	r0, #0x0
 8062bb0: 4770         	bx	lr
 8062bb2: dd10         	ble	0x8062bd6 <__any_on+0x42> @ imm = #0x20
 8062bb4: f011 011f    	ands	r1, r1, #0x1f
 8062bb8: d00d         	beq	0x8062bd6 <__any_on+0x42> @ imm = #0x1a
 8062bba: eb00 0382    	add.w	r3, r0, r2, lsl #2
 8062bbe: b410         	push	{r4}
 8062bc0: f850 4022    	ldr.w	r4, [r0, r2, lsl #2]
 8062bc4: fa24 f201    	lsr.w	r2, r4, r1
 8062bc8: fa02 f101    	lsl.w	r1, r2, r1
 8062bcc: 428c         	cmp	r4, r1
 8062bce: d00b         	beq	0x8062be8 <__any_on+0x54> @ imm = #0x16
 8062bd0: 2001         	movs	r0, #0x1
 8062bd2: bc10         	pop	{r4}
 8062bd4: 4770         	bx	lr
 8062bd6: eb00 0382    	add.w	r3, r0, r2, lsl #2
 8062bda: e7e6         	b	0x8062baa <__any_on+0x16> @ imm = #-0x34
 8062bdc: 2001         	movs	r0, #0x1
 8062bde: 4770         	bx	lr
 8062be0: f853 2d04    	ldr	r2, [r3, #-4]!
 8062be4: 2a00         	cmp	r2, #0x0
 8062be6: d1f3         	bne	0x8062bd0 <__any_on+0x3c> @ imm = #-0x1a
 8062be8: 4283         	cmp	r3, r0
 8062bea: d8f9         	bhi	0x8062be0 <__any_on+0x4c> @ imm = #-0xe
 8062bec: 2000         	movs	r0, #0x0
 8062bee: bc10         	pop	{r4}
 8062bf0: 4770         	bx	lr
 8062bf2: bf00         	nop

08062bf4 <_sbrk_r>:
 8062bf4: b538         	push	{r3, r4, r5, lr}
 8062bf6: 2200         	movs	r2, #0x0
 8062bf8: 4d06         	ldr	r5, [pc, #0x18]         @ 0x8062c14 <_sbrk_r+0x20>
 8062bfa: 4604         	mov	r4, r0
 8062bfc: 4608         	mov	r0, r1
 8062bfe: 602a         	str	r2, [r5]
 8062c00: f002 f846    	bl	0x8064c90 <_sbrk>       @ imm = #0x208c
 8062c04: 1c43         	adds	r3, r0, #0x1
 8062c06: d000         	beq	0x8062c0a <_sbrk_r+0x16> @ imm = #0x0
 8062c08: bd38         	pop	{r3, r4, r5, pc}
 8062c0a: 682b         	ldr	r3, [r5]
 8062c0c: 2b00         	cmp	r3, #0x0
 8062c0e: d0fb         	beq	0x8062c08 <_sbrk_r+0x14> @ imm = #-0xa
 8062c10: 6023         	str	r3, [r4]
 8062c12: bd38         	pop	{r3, r4, r5, pc}

08062c14 <$d>:
 8062c14: 9c 2f 00 20  	.word	0x20002f9c

08062c18 <__sread>:
 8062c18: b510         	push	{r4, lr}
 8062c1a: 460c         	mov	r4, r1
 8062c1c: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 8062c20: f001 faf4    	bl	0x806420c <_read_r>     @ imm = #0x15e8
 8062c24: 2800         	cmp	r0, #0x0
 8062c26: db03         	blt	0x8062c30 <__sread+0x18> @ imm = #0x6
 8062c28: 6d23         	ldr	r3, [r4, #0x50]
 8062c2a: 4403         	add	r3, r0
 8062c2c: 6523         	str	r3, [r4, #0x50]
 8062c2e: bd10         	pop	{r4, pc}
 8062c30: 89a3         	ldrh	r3, [r4, #0xc]
 8062c32: f423 5380    	bic	r3, r3, #0x1000
 8062c36: 81a3         	strh	r3, [r4, #0xc]
 8062c38: bd10         	pop	{r4, pc}
 8062c3a: bf00         	nop

08062c3c <__seofread>:
 8062c3c: 2000         	movs	r0, #0x0
 8062c3e: 4770         	bx	lr

08062c40 <__swrite>:
 8062c40: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8062c44: 460c         	mov	r4, r1
 8062c46: f9b1 100c    	ldrsh.w	r1, [r1, #0xc]
 8062c4a: 461f         	mov	r7, r3
 8062c4c: 4605         	mov	r5, r0
 8062c4e: 05cb         	lsls	r3, r1, #0x17
 8062c50: 4616         	mov	r6, r2
 8062c52: d40b         	bmi	0x8062c6c <__swrite+0x2c> @ imm = #0x16
 8062c54: f421 5180    	bic	r1, r1, #0x1000
 8062c58: 463b         	mov	r3, r7
 8062c5a: 4632         	mov	r2, r6
 8062c5c: 4628         	mov	r0, r5
 8062c5e: 81a1         	strh	r1, [r4, #0xc]
 8062c60: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 8062c64: e8bd 41f0    	pop.w	{r4, r5, r6, r7, r8, lr}
 8062c68: f000 beae    	b.w	0x80639c8 <_write_r>    @ imm = #0xd5c
 8062c6c: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 8062c70: 2302         	movs	r3, #0x2
 8062c72: 2200         	movs	r2, #0x0
 8062c74: f001 fa18    	bl	0x80640a8 <_lseek_r>    @ imm = #0x1430
 8062c78: f9b4 100c    	ldrsh.w	r1, [r4, #0xc]
 8062c7c: e7ea         	b	0x8062c54 <__swrite+0x14> @ imm = #-0x2c
 8062c7e: bf00         	nop

08062c80 <__sseek>:
 8062c80: b510         	push	{r4, lr}
 8062c82: 460c         	mov	r4, r1
 8062c84: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 8062c88: f001 fa0e    	bl	0x80640a8 <_lseek_r>    @ imm = #0x141c
 8062c8c: 1c42         	adds	r2, r0, #0x1
 8062c8e: 89a3         	ldrh	r3, [r4, #0xc]
 8062c90: d004         	beq	0x8062c9c <__sseek+0x1c> @ imm = #0x8
 8062c92: f443 5380    	orr	r3, r3, #0x1000
 8062c96: 6520         	str	r0, [r4, #0x50]
 8062c98: 81a3         	strh	r3, [r4, #0xc]
 8062c9a: bd10         	pop	{r4, pc}
 8062c9c: f423 5380    	bic	r3, r3, #0x1000
 8062ca0: 81a3         	strh	r3, [r4, #0xc]
 8062ca2: bd10         	pop	{r4, pc}

08062ca4 <__sclose>:
 8062ca4: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 8062ca8: f000 bef8    	b.w	0x8063a9c <_close_r>    @ imm = #0xdf0

08062cac <strlen>:
 8062cac: f020 0103    	bic	r1, r0, #0x3
 8062cb0: f010 0003    	ands	r0, r0, #0x3
 8062cb4: f1c0 0000    	rsb.w	r0, r0, #0x0
 8062cb8: f851 3b04    	ldr	r3, [r1], #4
 8062cbc: f100 0c04    	add.w	r12, r0, #0x4
 8062cc0: ea4f 0ccc    	lsl.w	r12, r12, #0x3
 8062cc4: f06f 0200    	mvn	r2, #0x0
 8062cc8: bf1c         	itt	ne
 8062cca: fa22 f20c    	lsrne.w	r2, r2, r12
 8062cce: 4313         	orrne	r3, r2
 8062cd0: f04f 0c01    	mov.w	r12, #0x1
 8062cd4: ea4c 2c0c    	orr.w	r12, r12, r12, lsl #8
 8062cd8: ea4c 4c0c    	orr.w	r12, r12, r12, lsl #16
 8062cdc: eba3 020c    	sub.w	r2, r3, r12
 8062ce0: ea22 0203    	bic.w	r2, r2, r3
 8062ce4: ea12 12cc    	ands.w	r2, r2, r12, lsl #7
 8062ce8: bf04         	itt	eq
 8062cea: f851 3b04    	ldreq	r3, [r1], #4
 8062cee: 3004         	addeq	r0, #0x4
 8062cf0: d0f4         	beq	0x8062cdc <strlen+0x30> @ imm = #-0x18
 8062cf2: f1c2 0100    	rsb.w	r1, r2, #0x0
 8062cf6: ea02 0201    	and.w	r2, r2, r1
 8062cfa: fab2 f282    	clz	r2, r2
 8062cfe: f1c2 021f    	rsb.w	r2, r2, #0x1f
 8062d02: eb00 00d2    	add.w	r0, r0, r2, lsr #3
 8062d06: 4770         	bx	lr

08062d08 <__sprint_r.part.0>:
 8062d08: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8062d0c: 6e4b         	ldr	r3, [r1, #0x64]
 8062d0e: 4690         	mov	r8, r2
 8062d10: 049c         	lsls	r4, r3, #0x12
 8062d12: d52c         	bpl	0x8062d6e <__sprint_r.part.0+0x66> @ imm = #0x58
 8062d14: 6893         	ldr	r3, [r2, #0x8]
 8062d16: 6812         	ldr	r2, [r2]
 8062d18: b33b         	cbz	r3, 0x8062d6a <__sprint_r.part.0+0x62> @ imm = #0x4e
 8062d1a: 468b         	mov	r11, r1
 8062d1c: 4606         	mov	r6, r0
 8062d1e: f102 0908    	add.w	r9, r2, #0x8
 8062d22: e959 5a02    	ldrd	r5, r10, [r9, #-8]
 8062d26: ea5f 079a    	lsrs.w	r7, r10, #0x2
 8062d2a: d014         	beq	0x8062d56 <__sprint_r.part.0+0x4e> @ imm = #0x28
 8062d2c: 3d04         	subs	r5, #0x4
 8062d2e: 2400         	movs	r4, #0x0
 8062d30: e001         	b	0x8062d36 <__sprint_r.part.0+0x2e> @ imm = #0x2
 8062d32: 42a7         	cmp	r7, r4
 8062d34: d00d         	beq	0x8062d52 <__sprint_r.part.0+0x4a> @ imm = #0x1a
 8062d36: 465a         	mov	r2, r11
 8062d38: f855 1f04    	ldr	r1, [r5, #4]!
 8062d3c: 4630         	mov	r0, r6
 8062d3e: 3401         	adds	r4, #0x1
 8062d40: f000 ff9c    	bl	0x8063c7c <_fputwc_r>   @ imm = #0xf38
 8062d44: 1c43         	adds	r3, r0, #0x1
 8062d46: d1f4         	bne	0x8062d32 <__sprint_r.part.0+0x2a> @ imm = #-0x18
 8062d48: 2300         	movs	r3, #0x0
 8062d4a: e9c8 3301    	strd	r3, r3, [r8, #4]
 8062d4e: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8062d52: f8d8 3008    	ldr.w	r3, [r8, #0x8]
 8062d56: f02a 0a03    	bic	r10, r10, #0x3
 8062d5a: f109 0908    	add.w	r9, r9, #0x8
 8062d5e: eba3 030a    	sub.w	r3, r3, r10
 8062d62: f8c8 3008    	str.w	r3, [r8, #0x8]
 8062d66: 2b00         	cmp	r3, #0x0
 8062d68: d1db         	bne	0x8062d22 <__sprint_r.part.0+0x1a> @ imm = #-0x4a
 8062d6a: 2000         	movs	r0, #0x0
 8062d6c: e7ec         	b	0x8062d48 <__sprint_r.part.0+0x40> @ imm = #-0x28
 8062d6e: f000 ffcd    	bl	0x8063d0c <__sfvwrite_r> @ imm = #0xf9a
 8062d72: 2300         	movs	r3, #0x0
 8062d74: e9c8 3301    	strd	r3, r3, [r8, #4]
 8062d78: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

08062d7c <__sprint_r>:
 8062d7c: b410         	push	{r4}
 8062d7e: 6894         	ldr	r4, [r2, #0x8]
 8062d80: b10c         	cbz	r4, 0x8062d86 <__sprint_r+0xa> @ imm = #0x2
 8062d82: bc10         	pop	{r4}
 8062d84: e7c0         	b	0x8062d08 <__sprint_r.part.0> @ imm = #-0x80
 8062d86: 4620         	mov	r0, r4
 8062d88: 6054         	str	r4, [r2, #0x4]
 8062d8a: bc10         	pop	{r4}
 8062d8c: 4770         	bx	lr
 8062d8e: bf00         	nop

08062d90 <_vfiprintf_r>:
 8062d90: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8062d94: b0ab         	sub	sp, #0xac
 8062d96: 461c         	mov	r4, r3
 8062d98: 468b         	mov	r11, r1
 8062d9a: 4617         	mov	r7, r2
 8062d9c: 4680         	mov	r8, r0
 8062d9e: 9306         	str	r3, [sp, #0x18]
 8062da0: b118         	cbz	r0, 0x8062daa <_vfiprintf_r+0x1a> @ imm = #0x6
 8062da2: 6b83         	ldr	r3, [r0, #0x38]
 8062da4: 2b00         	cmp	r3, #0x0
 8062da6: f000 8224    	beq.w	0x80631f2 <_vfiprintf_r+0x462> @ imm = #0x448
 8062daa: f9bb 100c    	ldrsh.w	r1, [r11, #0xc]
 8062dae: 048e         	lsls	r6, r1, #0x12
 8062db0: b28a         	uxth	r2, r1
 8062db2: d40a         	bmi	0x8062dca <_vfiprintf_r+0x3a> @ imm = #0x14
 8062db4: f441 5200    	orr	r2, r1, #0x2000
 8062db8: f8db 3064    	ldr.w	r3, [r11, #0x64]
 8062dbc: f8ab 200c    	strh.w	r2, [r11, #0xc]
 8062dc0: f423 5300    	bic	r3, r3, #0x2000
 8062dc4: b292         	uxth	r2, r2
 8062dc6: f8cb 3064    	str.w	r3, [r11, #0x64]
 8062dca: 0715         	lsls	r5, r2, #0x1c
 8062dcc: f140 80b0    	bpl.w	0x8062f30 <_vfiprintf_r+0x1a0> @ imm = #0x160
 8062dd0: f8db 3010    	ldr.w	r3, [r11, #0x10]
 8062dd4: 2b00         	cmp	r3, #0x0
 8062dd6: f000 80ab    	beq.w	0x8062f30 <_vfiprintf_r+0x1a0> @ imm = #0x156
 8062dda: f002 021a    	and	r2, r2, #0x1a
 8062dde: 2a0a         	cmp	r2, #0xa
 8062de0: f000 80b4    	beq.w	0x8062f4c <_vfiprintf_r+0x1bc> @ imm = #0x168
 8062de4: ab1a         	add	r3, sp, #0x68
 8062de6: f10d 0968    	add.w	r9, sp, #0x68
 8062dea: 930d         	str	r3, [sp, #0x34]
 8062dec: 2300         	movs	r3, #0x0
 8062dee: e9cd 330e    	strd	r3, r3, [sp, #56]
 8062df2: 9309         	str	r3, [sp, #0x24]
 8062df4: 9305         	str	r3, [sp, #0x14]
 8062df6: 783b         	ldrb	r3, [r7]
 8062df8: 463c         	mov	r4, r7
 8062dfa: b1d3         	cbz	r3, 0x8062e32 <_vfiprintf_r+0xa2> @ imm = #0x34
 8062dfc: 2b25         	cmp	r3, #0x25
 8062dfe: d018         	beq	0x8062e32 <_vfiprintf_r+0xa2> @ imm = #0x30
 8062e00: 4625         	mov	r5, r4
 8062e02: f814 3f01    	ldrb	r3, [r4, #1]!
 8062e06: b10b         	cbz	r3, 0x8062e0c <_vfiprintf_r+0x7c> @ imm = #0x2
 8062e08: 2b25         	cmp	r3, #0x25
 8062e0a: d1f9         	bne	0x8062e00 <_vfiprintf_r+0x70> @ imm = #-0xe
 8062e0c: 1be6         	subs	r6, r4, r7
 8062e0e: d010         	beq	0x8062e32 <_vfiprintf_r+0xa2> @ imm = #0x20
 8062e10: 9b0e         	ldr	r3, [sp, #0x38]
 8062e12: 9a0f         	ldr	r2, [sp, #0x3c]
 8062e14: 3301         	adds	r3, #0x1
 8062e16: 4432         	add	r2, r6
 8062e18: 2b07         	cmp	r3, #0x7
 8062e1a: 930e         	str	r3, [sp, #0x38]
 8062e1c: 920f         	str	r2, [sp, #0x3c]
 8062e1e: e9c9 7600    	strd	r7, r6, [r9]
 8062e22: f300 8175    	bgt.w	0x8063110 <_vfiprintf_r+0x380> @ imm = #0x2ea
 8062e26: f109 0908    	add.w	r9, r9, #0x8
 8062e2a: 9b05         	ldr	r3, [sp, #0x14]
 8062e2c: 4433         	add	r3, r6
 8062e2e: 9305         	str	r3, [sp, #0x14]
 8062e30: 786b         	ldrb	r3, [r5, #0x1]
 8062e32: 2b00         	cmp	r3, #0x0
 8062e34: f000 8178    	beq.w	0x8063128 <_vfiprintf_r+0x398> @ imm = #0x2f0
 8062e38: 2100         	movs	r1, #0x0
 8062e3a: f04f 0200    	mov.w	r2, #0x0
 8062e3e: 1c67         	adds	r7, r4, #0x1
 8062e40: 7863         	ldrb	r3, [r4, #0x1]
 8062e42: f04f 3aff    	mov.w	r10, #0xffffffff
 8062e46: 4608         	mov	r0, r1
 8062e48: 460d         	mov	r5, r1
 8062e4a: f88d 202f    	strb.w	r2, [sp, #0x2f]
 8062e4e: 9104         	str	r1, [sp, #0x10]
 8062e50: 3701         	adds	r7, #0x1
 8062e52: f1a3 0220    	sub.w	r2, r3, #0x20
 8062e56: 2a58         	cmp	r2, #0x58
 8062e58: f200 8173    	bhi.w	0x8063142 <_vfiprintf_r+0x3b2> @ imm = #0x2e6
 8062e5c: e8df f012    	tbh	[pc, r2, lsl #1]

08062e60 <$d>:
 8062e60: 77 02 71 01  	.word	0x01710277
 8062e64: 71 01 73 02  	.word	0x02730171
 8062e68: 71 01 71 01  	.word	0x01710171
 8062e6c: 71 01 71 01  	.word	0x01710171
 8062e70: 71 01 71 01  	.word	0x01710171
 8062e74: d7 01 6f 02  	.word	0x026f01d7
 8062e78: 71 01 e2 01  	.word	0x01e20171
 8062e7c: 3b 02 71 01  	.word	0x0171023b
 8062e80: 6b 02 59 00  	.word	0x0059026b
 8062e84: 59 00 59 00  	.word	0x00590059
 8062e88: 59 00 59 00  	.word	0x00590059
 8062e8c: 59 00 59 00  	.word	0x00590059
 8062e90: 59 00 59 00  	.word	0x00590059
 8062e94: 71 01 71 01  	.word	0x01710171
 8062e98: 71 01 71 01  	.word	0x01710171
 8062e9c: 71 01 71 01  	.word	0x01710171
 8062ea0: 71 01 71 01  	.word	0x01710171
 8062ea4: 71 01 71 01  	.word	0x01710171
 8062ea8: 54 02 71 01  	.word	0x01710254
 8062eac: 71 01 71 01  	.word	0x01710171
 8062eb0: 71 01 71 01  	.word	0x01710171
 8062eb4: 71 01 71 01  	.word	0x01710171
 8062eb8: 71 01 71 01  	.word	0x01710171
 8062ebc: 71 01 94 00  	.word	0x00940171
 8062ec0: 71 01 71 01  	.word	0x01710171
 8062ec4: 71 01 71 01  	.word	0x01710171
 8062ec8: 71 01 84 00  	.word	0x00840171
 8062ecc: 71 01 71 01  	.word	0x01710171
 8062ed0: ab 02 71 01  	.word	0x017102ab
 8062ed4: 71 01 71 01  	.word	0x01710171
 8062ed8: 71 01 71 01  	.word	0x01710171
 8062edc: 71 01 71 01  	.word	0x01710171
 8062ee0: 71 01 71 01  	.word	0x01710171
 8062ee4: 71 01 9c 02  	.word	0x029c0171
 8062ee8: 9e 01 71 01  	.word	0x0171019e
 8062eec: 71 01 71 01  	.word	0x01710171
 8062ef0: 7e 02 9e 01  	.word	0x019e027e
 8062ef4: 71 01 71 01  	.word	0x01710171
 8062ef8: 95 02 71 01  	.word	0x01710295
 8062efc: 82 02 96 00  	.word	0x00960282
 8062f00: 2a 02 26 02  	.word	0x0226022a
 8062f04: 71 01 07 02  	.word	0x02070171
 8062f08: 71 01 86 00  	.word	0x00860171
 8062f0c: 71 01 71 01  	.word	0x01710171
 8062f10: e6 01        	.short	0x01e6

08062f12 <$t>:
 8062f12: f1a3 0230    	sub.w	r2, r3, #0x30
 8062f16: 2400         	movs	r4, #0x0
 8062f18: eb04 0484    	add.w	r4, r4, r4, lsl #2
 8062f1c: f817 3b01    	ldrb	r3, [r7], #1
 8062f20: eb02 0444    	add.w	r4, r2, r4, lsl #1
 8062f24: f1a3 0230    	sub.w	r2, r3, #0x30
 8062f28: 2a09         	cmp	r2, #0x9
 8062f2a: d9f5         	bls	0x8062f18 <_vfiprintf_r+0x188> @ imm = #-0x16
 8062f2c: 9404         	str	r4, [sp, #0x10]
 8062f2e: e790         	b	0x8062e52 <_vfiprintf_r+0xc2> @ imm = #-0xe0
 8062f30: 4659         	mov	r1, r11
 8062f32: 4640         	mov	r0, r8
 8062f34: f7fd f986    	bl	0x8060244 <__swsetup_r> @ imm = #-0x2cf4
 8062f38: 2800         	cmp	r0, #0x0
 8062f3a: f040 84ef    	bne.w	0x806391c <_vfiprintf_r+0xb8c> @ imm = #0x9de
 8062f3e: f8bb 200c    	ldrh.w	r2, [r11, #0xc]
 8062f42: f002 021a    	and	r2, r2, #0x1a
 8062f46: 2a0a         	cmp	r2, #0xa
 8062f48: f47f af4c    	bne.w	0x8062de4 <_vfiprintf_r+0x54> @ imm = #-0x168
 8062f4c: f9bb 300e    	ldrsh.w	r3, [r11, #0xe]
 8062f50: 2b00         	cmp	r3, #0x0
 8062f52: f6ff af47    	blt.w	0x8062de4 <_vfiprintf_r+0x54> @ imm = #-0x172
 8062f56: 4623         	mov	r3, r4
 8062f58: 463a         	mov	r2, r7
 8062f5a: 4659         	mov	r1, r11
 8062f5c: 4640         	mov	r0, r8
 8062f5e: b02b         	add	sp, #0xac
 8062f60: e8bd 4ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8062f64: f000 bcfa    	b.w	0x806395c <__sbprintf>  @ imm = #0x9f4
 8062f68: f045 0510    	orr	r5, r5, #0x10
 8062f6c: f015 0120    	ands	r1, r5, #0x20
 8062f70: 9a06         	ldr	r2, [sp, #0x18]
 8062f72: f000 8106    	beq.w	0x8063182 <_vfiprintf_r+0x3f2> @ imm = #0x20c
 8062f76: 3207         	adds	r2, #0x7
 8062f78: 2301         	movs	r3, #0x1
 8062f7a: f022 0207    	bic	r2, r2, #0x7
 8062f7e: 6851         	ldr	r1, [r2, #0x4]
 8062f80: f852 0b08    	ldr	r0, [r2], #8
 8062f84: 9206         	str	r2, [sp, #0x18]
 8062f86: e00e         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #0x1c
 8062f88: f045 0510    	orr	r5, r5, #0x10
 8062f8c: f015 0120    	ands	r1, r5, #0x20
 8062f90: f000 80ea    	beq.w	0x8063168 <_vfiprintf_r+0x3d8> @ imm = #0x1d4
 8062f94: 9a06         	ldr	r2, [sp, #0x18]
 8062f96: 2300         	movs	r3, #0x0
 8062f98: 3207         	adds	r2, #0x7
 8062f9a: f022 0207    	bic	r2, r2, #0x7
 8062f9e: 6851         	ldr	r1, [r2, #0x4]
 8062fa0: f852 0b08    	ldr	r0, [r2], #8
 8062fa4: 9206         	str	r2, [sp, #0x18]
 8062fa6: f04f 0200    	mov.w	r2, #0x0
 8062faa: 2600         	movs	r6, #0x0
 8062fac: f88d 202f    	strb.w	r2, [sp, #0x2f]
 8062fb0: f1ba 3fff    	cmp.w	r10, #0xffffffff
 8062fb4: f000 8223    	beq.w	0x80633fe <_vfiprintf_r+0x66e> @ imm = #0x446
 8062fb8: f025 0280    	bic	r2, r5, #0x80
 8062fbc: 9202         	str	r2, [sp, #0x8]
 8062fbe: ea50 0201    	orrs.w	r2, r0, r1
 8062fc2: f040 821b    	bne.w	0x80633fc <_vfiprintf_r+0x66c> @ imm = #0x436
 8062fc6: f1ba 0200    	subs.w	r2, r10, #0x0
 8062fca: bf18         	it	ne
 8062fcc: 2201         	movne	r2, #0x1
 8062fce: f1ba 0f00    	cmp.w	r10, #0x0
 8062fd2: f040 8213    	bne.w	0x80633fc <_vfiprintf_r+0x66c> @ imm = #0x426
 8062fd6: 2b00         	cmp	r3, #0x0
 8062fd8: f040 8399    	bne.w	0x806370e <_vfiprintf_r+0x97e> @ imm = #0x732
 8062fdc: f015 0201    	ands	r2, r5, #0x1
 8062fe0: 469a         	mov	r10, r3
 8062fe2: 9203         	str	r2, [sp, #0xc]
 8062fe4: f000 83c7    	beq.w	0x8063776 <_vfiprintf_r+0x9e6> @ imm = #0x78e
 8062fe8: 2330         	movs	r3, #0x30
 8062fea: f10d 0467    	add.w	r4, sp, #0x67
 8062fee: f88d 3067    	strb.w	r3, [sp, #0x67]
 8062ff2: 9b03         	ldr	r3, [sp, #0xc]
 8062ff4: 4553         	cmp	r3, r10
 8062ff6: bfb8         	it	lt
 8062ff8: 4653         	movlt	r3, r10
 8062ffa: 9301         	str	r3, [sp, #0x4]
 8062ffc: b10e         	cbz	r6, 0x8063002 <_vfiprintf_r+0x272> @ imm = #0x2
 8062ffe: 3301         	adds	r3, #0x1
 8063000: 9301         	str	r3, [sp, #0x4]
 8063002: 9b02         	ldr	r3, [sp, #0x8]
 8063004: f013 0302    	ands	r3, r3, #0x2
 8063008: 9307         	str	r3, [sp, #0x1c]
 806300a: d002         	beq	0x8063012 <_vfiprintf_r+0x282> @ imm = #0x4
 806300c: 9b01         	ldr	r3, [sp, #0x4]
 806300e: 3302         	adds	r3, #0x2
 8063010: 9301         	str	r3, [sp, #0x4]
 8063012: 9b02         	ldr	r3, [sp, #0x8]
 8063014: f013 0384    	ands	r3, r3, #0x84
 8063018: 9308         	str	r3, [sp, #0x20]
 806301a: d105         	bne	0x8063028 <_vfiprintf_r+0x298> @ imm = #0xa
 806301c: 9b04         	ldr	r3, [sp, #0x10]
 806301e: 9a01         	ldr	r2, [sp, #0x4]
 8063020: 1a9d         	subs	r5, r3, r2
 8063022: 2d00         	cmp	r5, #0x0
 8063024: f300 82de    	bgt.w	0x80635e4 <_vfiprintf_r+0x854> @ imm = #0x5bc
 8063028: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 806302c: 1c51         	adds	r1, r2, #0x1
 806302e: f89d 002f    	ldrb.w	r0, [sp, #0x2f]
 8063032: b190         	cbz	r0, 0x806305a <_vfiprintf_r+0x2ca> @ imm = #0x24
 8063034: f10d 022f    	add.w	r2, sp, #0x2f
 8063038: f10c 0c01    	add.w	r12, r12, #0x1
 806303c: 2907         	cmp	r1, #0x7
 806303e: f8c9 2000    	str.w	r2, [r9]
 8063042: f04f 0201    	mov.w	r2, #0x1
 8063046: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 806304a: f8c9 2004    	str.w	r2, [r9, #0x4]
 806304e: f300 82aa    	bgt.w	0x80635a6 <_vfiprintf_r+0x816> @ imm = #0x554
 8063052: 460a         	mov	r2, r1
 8063054: f109 0908    	add.w	r9, r9, #0x8
 8063058: 3101         	adds	r1, #0x1
 806305a: 9b07         	ldr	r3, [sp, #0x1c]
 806305c: b1eb         	cbz	r3, 0x806309a <_vfiprintf_r+0x30a> @ imm = #0x3a
 806305e: ab0c         	add	r3, sp, #0x30
 8063060: f10c 0c02    	add.w	r12, r12, #0x2
 8063064: 2907         	cmp	r1, #0x7
 8063066: f8c9 3000    	str.w	r3, [r9]
 806306a: f04f 0302    	mov.w	r3, #0x2
 806306e: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 8063072: f8c9 3004    	str.w	r3, [r9, #0x4]
 8063076: f340 82b0    	ble.w	0x80635da <_vfiprintf_r+0x84a> @ imm = #0x560
 806307a: f1bc 0f00    	cmp.w	r12, #0x0
 806307e: f000 835d    	beq.w	0x806373c <_vfiprintf_r+0x9ac> @ imm = #0x6ba
 8063082: aa0d         	add	r2, sp, #0x34
 8063084: 4659         	mov	r1, r11
 8063086: 4640         	mov	r0, r8
 8063088: f7ff fe3e    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x384
 806308c: 2800         	cmp	r0, #0x0
 806308e: d14f         	bne	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #0x9e
 8063090: f10d 0968    	add.w	r9, sp, #0x68
 8063094: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 8063098: 1c51         	adds	r1, r2, #0x1
 806309a: 9b08         	ldr	r3, [sp, #0x20]
 806309c: 2b80         	cmp	r3, #0x80
 806309e: f000 81e1    	beq.w	0x8063464 <_vfiprintf_r+0x6d4> @ imm = #0x3c2
 80630a2: 9b03         	ldr	r3, [sp, #0xc]
 80630a4: ebaa 0603    	sub.w	r6, r10, r3
 80630a8: 2e00         	cmp	r6, #0x0
 80630aa: f300 8238    	bgt.w	0x806351e <_vfiprintf_r+0x78e> @ imm = #0x470
 80630ae: 9a03         	ldr	r2, [sp, #0xc]
 80630b0: 2907         	cmp	r1, #0x7
 80630b2: f8c9 4000    	str.w	r4, [r9]
 80630b6: eb02 030c    	add.w	r3, r2, r12
 80630ba: f8c9 2004    	str.w	r2, [r9, #0x4]
 80630be: e9cd 130e    	strd	r1, r3, [sp, #56]
 80630c2: f340 8198    	ble.w	0x80633f6 <_vfiprintf_r+0x666> @ imm = #0x330
 80630c6: 2b00         	cmp	r3, #0x0
 80630c8: f000 82cc    	beq.w	0x8063664 <_vfiprintf_r+0x8d4> @ imm = #0x598
 80630cc: aa0d         	add	r2, sp, #0x34
 80630ce: 4659         	mov	r1, r11
 80630d0: 4640         	mov	r0, r8
 80630d2: f7ff fe19    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x3ce
 80630d6: bb58         	cbnz	r0, 0x8063130 <_vfiprintf_r+0x3a0> @ imm = #0x56
 80630d8: 9b0f         	ldr	r3, [sp, #0x3c]
 80630da: f10d 0968    	add.w	r9, sp, #0x68
 80630de: 9a02         	ldr	r2, [sp, #0x8]
 80630e0: 0752         	lsls	r2, r2, #0x1d
 80630e2: d505         	bpl	0x80630f0 <_vfiprintf_r+0x360> @ imm = #0xa
 80630e4: 9a04         	ldr	r2, [sp, #0x10]
 80630e6: 9901         	ldr	r1, [sp, #0x4]
 80630e8: 1a54         	subs	r4, r2, r1
 80630ea: 2c00         	cmp	r4, #0x0
 80630ec: f300 82c5    	bgt.w	0x806367a <_vfiprintf_r+0x8ea> @ imm = #0x58a
 80630f0: 9801         	ldr	r0, [sp, #0x4]
 80630f2: e9dd 1204    	ldrd	r1, r2, [sp, #16]
 80630f6: 4281         	cmp	r1, r0
 80630f8: bfac         	ite	ge
 80630fa: 1852         	addge	r2, r2, r1
 80630fc: 1812         	addlt	r2, r2, r0
 80630fe: 9205         	str	r2, [sp, #0x14]
 8063100: 2b00         	cmp	r3, #0x0
 8063102: f040 8247    	bne.w	0x8063594 <_vfiprintf_r+0x804> @ imm = #0x48e
 8063106: 2300         	movs	r3, #0x0
 8063108: f10d 0968    	add.w	r9, sp, #0x68
 806310c: 930e         	str	r3, [sp, #0x38]
 806310e: e672         	b	0x8062df6 <_vfiprintf_r+0x66> @ imm = #-0x31c
 8063110: 2a00         	cmp	r2, #0x0
 8063112: f000 832b    	beq.w	0x806376c <_vfiprintf_r+0x9dc> @ imm = #0x656
 8063116: aa0d         	add	r2, sp, #0x34
 8063118: 4659         	mov	r1, r11
 806311a: 4640         	mov	r0, r8
 806311c: f7ff fdf4    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x418
 8063120: b930         	cbnz	r0, 0x8063130 <_vfiprintf_r+0x3a0> @ imm = #0xc
 8063122: f10d 0968    	add.w	r9, sp, #0x68
 8063126: e680         	b	0x8062e2a <_vfiprintf_r+0x9a> @ imm = #-0x300
 8063128: 9b0f         	ldr	r3, [sp, #0x3c]
 806312a: 2b00         	cmp	r3, #0x0
 806312c: f040 83ca    	bne.w	0x80638c4 <_vfiprintf_r+0xb34> @ imm = #0x794
 8063130: f8bb 300c    	ldrh.w	r3, [r11, #0xc]
 8063134: 065b         	lsls	r3, r3, #0x19
 8063136: f100 83f1    	bmi.w	0x806391c <_vfiprintf_r+0xb8c> @ imm = #0x7e2
 806313a: 9805         	ldr	r0, [sp, #0x14]
 806313c: b02b         	add	sp, #0xac
 806313e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8063142: 2900         	cmp	r1, #0x0
 8063144: f040 83bb    	bne.w	0x80638be <_vfiprintf_r+0xb2e> @ imm = #0x776
 8063148: 2b00         	cmp	r3, #0x0
 806314a: d0ed         	beq	0x8063128 <_vfiprintf_r+0x398> @ imm = #-0x26
 806314c: f88d 3040    	strb.w	r3, [sp, #0x40]
 8063150: f04f 0300    	mov.w	r3, #0x0
 8063154: ac10         	add	r4, sp, #0x40
 8063156: f88d 302f    	strb.w	r3, [sp, #0x2f]
 806315a: 2301         	movs	r3, #0x1
 806315c: 9301         	str	r3, [sp, #0x4]
 806315e: 9303         	str	r3, [sp, #0xc]
 8063160: f04f 0a00    	mov.w	r10, #0x0
 8063164: 9502         	str	r5, [sp, #0x8]
 8063166: e74c         	b	0x8063002 <_vfiprintf_r+0x272> @ imm = #-0x168
 8063168: f015 0310    	ands	r3, r5, #0x10
 806316c: d144         	bne	0x80631f8 <_vfiprintf_r+0x468> @ imm = #0x88
 806316e: f015 0140    	ands	r1, r5, #0x40
 8063172: d041         	beq	0x80631f8 <_vfiprintf_r+0x468> @ imm = #0x82
 8063174: 9a06         	ldr	r2, [sp, #0x18]
 8063176: 4619         	mov	r1, r3
 8063178: f852 0b04    	ldr	r0, [r2], #4
 806317c: b280         	uxth	r0, r0
 806317e: 9206         	str	r2, [sp, #0x18]
 8063180: e711         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #-0x1de
 8063182: f015 0310    	ands	r3, r5, #0x10
 8063186: d13d         	bne	0x8063204 <_vfiprintf_r+0x474> @ imm = #0x7a
 8063188: f015 0140    	ands	r1, r5, #0x40
 806318c: d03a         	beq	0x8063204 <_vfiprintf_r+0x474> @ imm = #0x74
 806318e: f852 0b04    	ldr	r0, [r2], #4
 8063192: 4619         	mov	r1, r3
 8063194: 2301         	movs	r3, #0x1
 8063196: b280         	uxth	r0, r0
 8063198: 9206         	str	r2, [sp, #0x18]
 806319a: e704         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #-0x1f8
 806319c: 2900         	cmp	r1, #0x0
 806319e: f040 83a5    	bne.w	0x80638ec <_vfiprintf_r+0xb5c> @ imm = #0x74a
 80631a2: 06a8         	lsls	r0, r5, #0x1a
 80631a4: 9b06         	ldr	r3, [sp, #0x18]
 80631a6: f140 80b8    	bpl.w	0x806331a <_vfiprintf_r+0x58a> @ imm = #0x170
 80631aa: 3307         	adds	r3, #0x7
 80631ac: f023 0307    	bic	r3, r3, #0x7
 80631b0: 461a         	mov	r2, r3
 80631b2: 685b         	ldr	r3, [r3, #0x4]
 80631b4: f852 0b08    	ldr	r0, [r2], #8
 80631b8: 4619         	mov	r1, r3
 80631ba: 9206         	str	r2, [sp, #0x18]
 80631bc: 2b00         	cmp	r3, #0x0
 80631be: f2c0 82e1    	blt.w	0x8063784 <_vfiprintf_r+0x9f4> @ imm = #0x5c2
 80631c2: f1ba 3fff    	cmp.w	r10, #0xffffffff
 80631c6: f000 82a6    	beq.w	0x8063716 <_vfiprintf_r+0x986> @ imm = #0x54c
 80631ca: f025 0380    	bic	r3, r5, #0x80
 80631ce: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 80631d2: 9302         	str	r3, [sp, #0x8]
 80631d4: f1ba 0f00    	cmp.w	r10, #0x0
 80631d8: f040 837a    	bne.w	0x80638d0 <_vfiprintf_r+0xb40> @ imm = #0x6f4
 80631dc: ea50 0301    	orrs.w	r3, r0, r1
 80631e0: bf14         	ite	ne
 80631e2: 2301         	movne	r3, #0x1
 80631e4: 2300         	moveq	r3, #0x0
 80631e6: f040 8373    	bne.w	0x80638d0 <_vfiprintf_r+0xb40> @ imm = #0x6e6
 80631ea: 469a         	mov	r10, r3
 80631ec: ac1a         	add	r4, sp, #0x68
 80631ee: 9303         	str	r3, [sp, #0xc]
 80631f0: e6ff         	b	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x202
 80631f2: f7fe fa6d    	bl	0x80616d0 <__sinit>     @ imm = #-0x1b26
 80631f6: e5d8         	b	0x8062daa <_vfiprintf_r+0x1a> @ imm = #-0x450
 80631f8: 9b06         	ldr	r3, [sp, #0x18]
 80631fa: f853 0b04    	ldr	r0, [r3], #4
 80631fe: 9306         	str	r3, [sp, #0x18]
 8063200: 460b         	mov	r3, r1
 8063202: e6d0         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #-0x260
 8063204: f852 0b04    	ldr	r0, [r2], #4
 8063208: 2301         	movs	r3, #0x1
 806320a: 9206         	str	r2, [sp, #0x18]
 806320c: e6cb         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #-0x26a
 806320e: 9b06         	ldr	r3, [sp, #0x18]
 8063210: f853 2b04    	ldr	r2, [r3], #4
 8063214: 2a00         	cmp	r2, #0x0
 8063216: 9204         	str	r2, [sp, #0x10]
 8063218: f280 82d3    	bge.w	0x80637c2 <_vfiprintf_r+0xa32> @ imm = #0x5a6
 806321c: 9a04         	ldr	r2, [sp, #0x10]
 806321e: 9306         	str	r3, [sp, #0x18]
 8063220: 4252         	rsbs	r2, r2, #0
 8063222: 9204         	str	r2, [sp, #0x10]
 8063224: f045 0504    	orr	r5, r5, #0x4
 8063228: 783b         	ldrb	r3, [r7]
 806322a: e611         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x3de
 806322c: 2900         	cmp	r1, #0x0
 806322e: f040 8354    	bne.w	0x80638da <_vfiprintf_r+0xb4a> @ imm = #0x6a8
 8063232: 4a92         	ldr	r2, [pc, #0x248]        @ 0x806347c <_vfiprintf_r+0x6ec>
 8063234: f015 0120    	ands	r1, r5, #0x20
 8063238: 9209         	str	r2, [sp, #0x24]
 806323a: f000 80c5    	beq.w	0x80633c8 <_vfiprintf_r+0x638> @ imm = #0x18a
 806323e: 9a06         	ldr	r2, [sp, #0x18]
 8063240: 3207         	adds	r2, #0x7
 8063242: f022 0207    	bic	r2, r2, #0x7
 8063246: 6851         	ldr	r1, [r2, #0x4]
 8063248: f852 0b08    	ldr	r0, [r2], #8
 806324c: 9206         	str	r2, [sp, #0x18]
 806324e: 07ec         	lsls	r4, r5, #0x1f
 8063250: d50b         	bpl	0x806326a <_vfiprintf_r+0x4da> @ imm = #0x16
 8063252: ea50 0201    	orrs.w	r2, r0, r1
 8063256: d008         	beq	0x806326a <_vfiprintf_r+0x4da> @ imm = #0x10
 8063258: f88d 3031    	strb.w	r3, [sp, #0x31]
 806325c: 2330         	movs	r3, #0x30
 806325e: f045 0502    	orr	r5, r5, #0x2
 8063262: f88d 3030    	strb.w	r3, [sp, #0x30]
 8063266: 2302         	movs	r3, #0x2
 8063268: e69d         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #-0x2c6
 806326a: 2302         	movs	r3, #0x2
 806326c: e69b         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #-0x2ca
 806326e: 9e06         	ldr	r6, [sp, #0x18]
 8063270: f04f 0300    	mov.w	r3, #0x0
 8063274: f856 4b04    	ldr	r4, [r6], #4
 8063278: f88d 302f    	strb.w	r3, [sp, #0x2f]
 806327c: 2c00         	cmp	r4, #0x0
 806327e: f000 8305    	beq.w	0x806388c <_vfiprintf_r+0xafc> @ imm = #0x60a
 8063282: f1ba 3fff    	cmp.w	r10, #0xffffffff
 8063286: f000 82b7    	beq.w	0x80637f8 <_vfiprintf_r+0xa68> @ imm = #0x56e
 806328a: 4652         	mov	r2, r10
 806328c: 2100         	movs	r1, #0x0
 806328e: 4620         	mov	r0, r4
 8063290: f7fe ff36    	bl	0x8062100 <memchr>      @ imm = #-0x1194
 8063294: 2800         	cmp	r0, #0x0
 8063296: f000 832c    	beq.w	0x80638f2 <_vfiprintf_r+0xb62> @ imm = #0x658
 806329a: 1b03         	subs	r3, r0, r4
 806329c: 9606         	str	r6, [sp, #0x18]
 806329e: f04f 0a00    	mov.w	r10, #0x0
 80632a2: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 80632a6: 9303         	str	r3, [sp, #0xc]
 80632a8: 9502         	str	r5, [sp, #0x8]
 80632aa: e6a2         	b	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x2bc
 80632ac: f045 0520    	orr	r5, r5, #0x20
 80632b0: 783b         	ldrb	r3, [r7]
 80632b2: e5cd         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x466
 80632b4: 9b06         	ldr	r3, [sp, #0x18]
 80632b6: 2230         	movs	r2, #0x30
 80632b8: f045 0502    	orr	r5, r5, #0x2
 80632bc: 2100         	movs	r1, #0x0
 80632be: f853 0b04    	ldr	r0, [r3], #4
 80632c2: f88d 2030    	strb.w	r2, [sp, #0x30]
 80632c6: 9306         	str	r3, [sp, #0x18]
 80632c8: 2378         	movs	r3, #0x78
 80632ca: f88d 3031    	strb.w	r3, [sp, #0x31]
 80632ce: 4b6b         	ldr	r3, [pc, #0x1ac]        @ 0x806347c <_vfiprintf_r+0x6ec>
 80632d0: 9309         	str	r3, [sp, #0x24]
 80632d2: 2302         	movs	r3, #0x2
 80632d4: e667         	b	0x8062fa6 <_vfiprintf_r+0x216> @ imm = #-0x332
 80632d6: 463c         	mov	r4, r7
 80632d8: f814 3b01    	ldrb	r3, [r4], #1
 80632dc: 2b2a         	cmp	r3, #0x2a
 80632de: f000 8321    	beq.w	0x8063924 <_vfiprintf_r+0xb94> @ imm = #0x642
 80632e2: f1a3 0230    	sub.w	r2, r3, #0x30
 80632e6: 4627         	mov	r7, r4
 80632e8: f04f 0a00    	mov.w	r10, #0x0
 80632ec: 2a09         	cmp	r2, #0x9
 80632ee: f63f adb0    	bhi.w	0x8062e52 <_vfiprintf_r+0xc2> @ imm = #-0x4a0
 80632f2: eb0a 0a8a    	add.w	r10, r10, r10, lsl #2
 80632f6: f817 3b01    	ldrb	r3, [r7], #1
 80632fa: eb02 0a4a    	add.w	r10, r2, r10, lsl #1
 80632fe: f1a3 0230    	sub.w	r2, r3, #0x30
 8063302: 2a09         	cmp	r2, #0x9
 8063304: d9f5         	bls	0x80632f2 <_vfiprintf_r+0x562> @ imm = #-0x16
 8063306: e5a4         	b	0x8062e52 <_vfiprintf_r+0xc2> @ imm = #-0x4b8
 8063308: 2900         	cmp	r1, #0x0
 806330a: f040 82ec    	bne.w	0x80638e6 <_vfiprintf_r+0xb56> @ imm = #0x5d8
 806330e: f045 0510    	orr	r5, r5, #0x10
 8063312: 9b06         	ldr	r3, [sp, #0x18]
 8063314: 06a8         	lsls	r0, r5, #0x1a
 8063316: f53f af48    	bmi.w	0x80631aa <_vfiprintf_r+0x41a> @ imm = #-0x170
 806331a: f853 0b04    	ldr	r0, [r3], #4
 806331e: 06e9         	lsls	r1, r5, #0x1b
 8063320: 9306         	str	r3, [sp, #0x18]
 8063322: f100 822a    	bmi.w	0x806377a <_vfiprintf_r+0x9ea> @ imm = #0x454
 8063326: 066a         	lsls	r2, r5, #0x19
 8063328: f140 8227    	bpl.w	0x806377a <_vfiprintf_r+0x9ea> @ imm = #0x44e
 806332c: f340 31c0    	sbfx	r1, r0, #0xf, #0x1
 8063330: b200         	sxth	r0, r0
 8063332: 460b         	mov	r3, r1
 8063334: e742         	b	0x80631bc <_vfiprintf_r+0x42c> @ imm = #-0x17c
 8063336: f045 0580    	orr	r5, r5, #0x80
 806333a: 783b         	ldrb	r3, [r7]
 806333c: e588         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x4f0
 806333e: 783b         	ldrb	r3, [r7]
 8063340: 2101         	movs	r1, #0x1
 8063342: 202b         	movs	r0, #0x2b
 8063344: e584         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x4f8
 8063346: f045 0501    	orr	r5, r5, #0x1
 806334a: 783b         	ldrb	r3, [r7]
 806334c: e580         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x500
 806334e: 783b         	ldrb	r3, [r7]
 8063350: 2800         	cmp	r0, #0x0
 8063352: f47f ad7d    	bne.w	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x506
 8063356: 2101         	movs	r1, #0x1
 8063358: 2020         	movs	r0, #0x20
 806335a: e579         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x50e
 806335c: f045 0540    	orr	r5, r5, #0x40
 8063360: 783b         	ldrb	r3, [r7]
 8063362: e575         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x516
 8063364: 2900         	cmp	r1, #0x0
 8063366: f040 82bb    	bne.w	0x80638e0 <_vfiprintf_r+0xb50> @ imm = #0x576
 806336a: 06ab         	lsls	r3, r5, #0x1a
 806336c: f100 8232    	bmi.w	0x80637d4 <_vfiprintf_r+0xa44> @ imm = #0x464
 8063370: 06ee         	lsls	r6, r5, #0x1b
 8063372: f100 825e    	bmi.w	0x8063832 <_vfiprintf_r+0xaa2> @ imm = #0x4bc
 8063376: 066d         	lsls	r5, r5, #0x19
 8063378: f140 825b    	bpl.w	0x8063832 <_vfiprintf_r+0xaa2> @ imm = #0x4b6
 806337c: 9b06         	ldr	r3, [sp, #0x18]
 806337e: 9905         	ldr	r1, [sp, #0x14]
 8063380: f853 2b04    	ldr	r2, [r3], #4
 8063384: 8011         	strh	r1, [r2]
 8063386: 9306         	str	r3, [sp, #0x18]
 8063388: e535         	b	0x8062df6 <_vfiprintf_r+0x66> @ imm = #-0x596
 806338a: 783b         	ldrb	r3, [r7]
 806338c: 2b6c         	cmp	r3, #0x6c
 806338e: f000 8277    	beq.w	0x8063880 <_vfiprintf_r+0xaf0> @ imm = #0x4ee
 8063392: f045 0510    	orr	r5, r5, #0x10
 8063396: e55b         	b	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x54a
 8063398: 9b06         	ldr	r3, [sp, #0x18]
 806339a: f04f 0200    	mov.w	r2, #0x0
 806339e: 2101         	movs	r1, #0x1
 80633a0: ac10         	add	r4, sp, #0x40
 80633a2: f88d 202f    	strb.w	r2, [sp, #0x2f]
 80633a6: f853 2b04    	ldr	r2, [r3], #4
 80633aa: 9101         	str	r1, [sp, #0x4]
 80633ac: f88d 2040    	strb.w	r2, [sp, #0x40]
 80633b0: 9306         	str	r3, [sp, #0x18]
 80633b2: 9103         	str	r1, [sp, #0xc]
 80633b4: e6d4         	b	0x8063160 <_vfiprintf_r+0x3d0> @ imm = #-0x258
 80633b6: 2900         	cmp	r1, #0x0
 80633b8: f040 828c    	bne.w	0x80638d4 <_vfiprintf_r+0xb44> @ imm = #0x518
 80633bc: 4a30         	ldr	r2, [pc, #0xc0]         @ 0x8063480 <_vfiprintf_r+0x6f0>
 80633be: f015 0120    	ands	r1, r5, #0x20
 80633c2: 9209         	str	r2, [sp, #0x24]
 80633c4: f47f af3b    	bne.w	0x806323e <_vfiprintf_r+0x4ae> @ imm = #-0x18a
 80633c8: f015 0210    	ands	r2, r5, #0x10
 80633cc: f040 81e3    	bne.w	0x8063796 <_vfiprintf_r+0xa06> @ imm = #0x3c6
 80633d0: f015 0140    	ands	r1, r5, #0x40
 80633d4: f000 81df    	beq.w	0x8063796 <_vfiprintf_r+0xa06> @ imm = #0x3be
 80633d8: 9c06         	ldr	r4, [sp, #0x18]
 80633da: 4611         	mov	r1, r2
 80633dc: f854 0b04    	ldr	r0, [r4], #4
 80633e0: b280         	uxth	r0, r0
 80633e2: 9406         	str	r4, [sp, #0x18]
 80633e4: e733         	b	0x806324e <_vfiprintf_r+0x4be> @ imm = #-0x19a
 80633e6: 9b03         	ldr	r3, [sp, #0xc]
 80633e8: 2201         	movs	r2, #0x1
 80633ea: f10d 0968    	add.w	r9, sp, #0x68
 80633ee: 941a         	str	r4, [sp, #0x68]
 80633f0: 931b         	str	r3, [sp, #0x6c]
 80633f2: 930f         	str	r3, [sp, #0x3c]
 80633f4: 920e         	str	r2, [sp, #0x38]
 80633f6: f109 0908    	add.w	r9, r9, #0x8
 80633fa: e670         	b	0x80630de <_vfiprintf_r+0x34e> @ imm = #-0x320
 80633fc: 9d02         	ldr	r5, [sp, #0x8]
 80633fe: 2b01         	cmp	r3, #0x1
 8063400: f000 818b    	beq.w	0x806371a <_vfiprintf_r+0x98a> @ imm = #0x316
 8063404: 2b02         	cmp	r3, #0x2
 8063406: ac1a         	add	r4, sp, #0x68
 8063408: d111         	bne	0x806342e <_vfiprintf_r+0x69e> @ imm = #0x22
 806340a: 9a09         	ldr	r2, [sp, #0x24]
 806340c: f000 030f    	and	r3, r0, #0xf
 8063410: 0900         	lsrs	r0, r0, #0x4
 8063412: 5cd3         	ldrb	r3, [r2, r3]
 8063414: ea40 7001    	orr.w	r0, r0, r1, lsl #28
 8063418: 0909         	lsrs	r1, r1, #0x4
 806341a: f804 3d01    	strb	r3, [r4, #-1]!
 806341e: ea50 0301    	orrs.w	r3, r0, r1
 8063422: d1f3         	bne	0x806340c <_vfiprintf_r+0x67c> @ imm = #-0x1a
 8063424: ab1a         	add	r3, sp, #0x68
 8063426: 9502         	str	r5, [sp, #0x8]
 8063428: 1b1b         	subs	r3, r3, r4
 806342a: 9303         	str	r3, [sp, #0xc]
 806342c: e5e1         	b	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x43e
 806342e: f000 0307    	and	r3, r0, #0x7
 8063432: 08c0         	lsrs	r0, r0, #0x3
 8063434: 4622         	mov	r2, r4
 8063436: ea40 7041    	orr.w	r0, r0, r1, lsl #29
 806343a: 3330         	adds	r3, #0x30
 806343c: 08c9         	lsrs	r1, r1, #0x3
 806343e: f804 3d01    	strb	r3, [r4, #-1]!
 8063442: ea50 0c01    	orrs.w	r12, r0, r1
 8063446: d1f2         	bne	0x806342e <_vfiprintf_r+0x69e> @ imm = #-0x1c
 8063448: 2b30         	cmp	r3, #0x30
 806344a: d0eb         	beq	0x8063424 <_vfiprintf_r+0x694> @ imm = #-0x2a
 806344c: 07e8         	lsls	r0, r5, #0x1f
 806344e: d5e9         	bpl	0x8063424 <_vfiprintf_r+0x694> @ imm = #-0x2e
 8063450: 2330         	movs	r3, #0x30
 8063452: 3a02         	subs	r2, #0x2
 8063454: 9502         	str	r5, [sp, #0x8]
 8063456: f804 3c01    	strb	r3, [r4, #-1]
 806345a: ab1a         	add	r3, sp, #0x68
 806345c: 4614         	mov	r4, r2
 806345e: 1a9b         	subs	r3, r3, r2
 8063460: 9303         	str	r3, [sp, #0xc]
 8063462: e5c6         	b	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x474
 8063464: 9b04         	ldr	r3, [sp, #0x10]
 8063466: 9801         	ldr	r0, [sp, #0x4]
 8063468: 1a1e         	subs	r6, r3, r0
 806346a: 2e00         	cmp	r6, #0x0
 806346c: f77f ae19    	ble.w	0x80630a2 <_vfiprintf_r+0x312> @ imm = #-0x3ce
 8063470: 2e10         	cmp	r6, #0x10
 8063472: f340 8250    	ble.w	0x8063916 <_vfiprintf_r+0xb86> @ imm = #0x4a0
 8063476: 4d03         	ldr	r5, [pc, #0xc]          @ 0x8063484 <_vfiprintf_r+0x6f4>
 8063478: 4660         	mov	r0, r12
 806347a: e012         	b	0x80634a2 <_vfiprintf_r+0x712> @ imm = #0x24

0806347c <$d>:
 806347c: d0 59 06 08  	.word	0x080659d0
 8063480: e4 59 06 08  	.word	0x080659e4
 8063484: f0 5b 06 08  	.word	0x08065bf0

08063488 <$t>:
 8063488: 4659         	mov	r1, r11
 806348a: 4640         	mov	r0, r8
 806348c: f7ff fc3c    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x788
 8063490: 2800         	cmp	r0, #0x0
 8063492: f47f ae4d    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x366
 8063496: e9dd 200e    	ldrd	r2, r0, [sp, #56]
 806349a: 1c51         	adds	r1, r2, #0x1
 806349c: 3e10         	subs	r6, #0x10
 806349e: 2e10         	cmp	r6, #0x10
 80634a0: dd19         	ble	0x80634d6 <_vfiprintf_r+0x746> @ imm = #0x32
 80634a2: 1c53         	adds	r3, r2, #0x1
 80634a4: 2110         	movs	r1, #0x10
 80634a6: 3010         	adds	r0, #0x10
 80634a8: f8c9 5000    	str.w	r5, [r9]
 80634ac: 2b07         	cmp	r3, #0x7
 80634ae: f8c9 1004    	str.w	r1, [r9, #0x4]
 80634b2: f102 0102    	add.w	r1, r2, #0x2
 80634b6: f109 0908    	add.w	r9, r9, #0x8
 80634ba: 461a         	mov	r2, r3
 80634bc: e9cd 300e    	strd	r3, r0, [sp, #56]
 80634c0: ddec         	ble	0x806349c <_vfiprintf_r+0x70c> @ imm = #-0x28
 80634c2: aa0d         	add	r2, sp, #0x34
 80634c4: f10d 0968    	add.w	r9, sp, #0x68
 80634c8: 2800         	cmp	r0, #0x0
 80634ca: d1dd         	bne	0x8063488 <_vfiprintf_r+0x6f8> @ imm = #-0x46
 80634cc: 3e10         	subs	r6, #0x10
 80634ce: 2101         	movs	r1, #0x1
 80634d0: 4602         	mov	r2, r0
 80634d2: 2e10         	cmp	r6, #0x10
 80634d4: dce5         	bgt	0x80634a2 <_vfiprintf_r+0x712> @ imm = #-0x36
 80634d6: 4684         	mov	r12, r0
 80634d8: 4608         	mov	r0, r1
 80634da: 44b4         	add	r12, r6
 80634dc: 2807         	cmp	r0, #0x7
 80634de: f8c9 5000    	str.w	r5, [r9]
 80634e2: f8c9 6004    	str.w	r6, [r9, #0x4]
 80634e6: e9cd 0c0e    	strd	r0, r12, [sp, #56]
 80634ea: f340 816e    	ble.w	0x80637ca <_vfiprintf_r+0xa3a> @ imm = #0x2dc
 80634ee: f1bc 0f00    	cmp.w	r12, #0x0
 80634f2: f000 81d4    	beq.w	0x806389e <_vfiprintf_r+0xb0e> @ imm = #0x3a8
 80634f6: aa0d         	add	r2, sp, #0x34
 80634f8: 4659         	mov	r1, r11
 80634fa: 4640         	mov	r0, r8
 80634fc: f7ff fc04    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x7f8
 8063500: 2800         	cmp	r0, #0x0
 8063502: f47f ae15    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x3d6
 8063506: 9b03         	ldr	r3, [sp, #0xc]
 8063508: f10d 0968    	add.w	r9, sp, #0x68
 806350c: ebaa 0603    	sub.w	r6, r10, r3
 8063510: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 8063514: 2e00         	cmp	r6, #0x0
 8063516: f102 0101    	add.w	r1, r2, #0x1
 806351a: f77f adc8    	ble.w	0x80630ae <_vfiprintf_r+0x31e> @ imm = #-0x470
 806351e: 2e10         	cmp	r6, #0x10
 8063520: 4dbb         	ldr	r5, [pc, #0x2ec]        @ 0x8063810 <_vfiprintf_r+0xa80>
 8063522: dd29         	ble	0x8063578 <_vfiprintf_r+0x7e8> @ imm = #0x52
 8063524: 9407         	str	r4, [sp, #0x1c]
 8063526: f04f 0a10    	mov.w	r10, #0x10
 806352a: 4664         	mov	r4, r12
 806352c: e00a         	b	0x8063544 <_vfiprintf_r+0x7b4> @ imm = #0x14
 806352e: f7ff fbeb    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x82a
 8063532: 2800         	cmp	r0, #0x0
 8063534: f47f adfc    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x408
 8063538: e9dd 240e    	ldrd	r2, r4, [sp, #56]
 806353c: 1c51         	adds	r1, r2, #0x1
 806353e: 3e10         	subs	r6, #0x10
 8063540: 2e10         	cmp	r6, #0x10
 8063542: dd17         	ble	0x8063574 <_vfiprintf_r+0x7e4> @ imm = #0x2e
 8063544: 1c53         	adds	r3, r2, #0x1
 8063546: 3410         	adds	r4, #0x10
 8063548: 1c91         	adds	r1, r2, #0x2
 806354a: 2b07         	cmp	r3, #0x7
 806354c: 461a         	mov	r2, r3
 806354e: e9c9 5a00    	strd	r5, r10, [r9]
 8063552: e9cd 340e    	strd	r3, r4, [sp, #56]
 8063556: f109 0908    	add.w	r9, r9, #0x8
 806355a: ddf0         	ble	0x806353e <_vfiprintf_r+0x7ae> @ imm = #-0x20
 806355c: aa0d         	add	r2, sp, #0x34
 806355e: 4659         	mov	r1, r11
 8063560: 4640         	mov	r0, r8
 8063562: f10d 0968    	add.w	r9, sp, #0x68
 8063566: 2c00         	cmp	r4, #0x0
 8063568: d1e1         	bne	0x806352e <_vfiprintf_r+0x79e> @ imm = #-0x3e
 806356a: 3e10         	subs	r6, #0x10
 806356c: 2101         	movs	r1, #0x1
 806356e: 4622         	mov	r2, r4
 8063570: 2e10         	cmp	r6, #0x10
 8063572: dce7         	bgt	0x8063544 <_vfiprintf_r+0x7b4> @ imm = #-0x32
 8063574: 46a4         	mov	r12, r4
 8063576: 9c07         	ldr	r4, [sp, #0x1c]
 8063578: 44b4         	add	r12, r6
 806357a: 2907         	cmp	r1, #0x7
 806357c: f8c9 5000    	str.w	r5, [r9]
 8063580: f8c9 6004    	str.w	r6, [r9, #0x4]
 8063584: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 8063588: f300 80dd    	bgt.w	0x8063746 <_vfiprintf_r+0x9b6> @ imm = #0x1ba
 806358c: f109 0908    	add.w	r9, r9, #0x8
 8063590: 3101         	adds	r1, #0x1
 8063592: e58c         	b	0x80630ae <_vfiprintf_r+0x31e> @ imm = #-0x4e8
 8063594: aa0d         	add	r2, sp, #0x34
 8063596: 4659         	mov	r1, r11
 8063598: 4640         	mov	r0, r8
 806359a: f7ff fbb5    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x896
 806359e: 2800         	cmp	r0, #0x0
 80635a0: f43f adb1    	beq.w	0x8063106 <_vfiprintf_r+0x376> @ imm = #-0x49e
 80635a4: e5c4         	b	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x478
 80635a6: f1bc 0f00    	cmp.w	r12, #0x0
 80635aa: f000 80c4    	beq.w	0x8063736 <_vfiprintf_r+0x9a6> @ imm = #0x188
 80635ae: aa0d         	add	r2, sp, #0x34
 80635b0: 4659         	mov	r1, r11
 80635b2: 4640         	mov	r0, r8
 80635b4: f7ff fba8    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x8b0
 80635b8: 2800         	cmp	r0, #0x0
 80635ba: f47f adb9    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x48e
 80635be: f10d 0968    	add.w	r9, sp, #0x68
 80635c2: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 80635c6: 1c51         	adds	r1, r2, #0x1
 80635c8: e547         	b	0x806305a <_vfiprintf_r+0x2ca> @ imm = #-0x572
 80635ca: 2302         	movs	r3, #0x2
 80635cc: 2101         	movs	r1, #0x1
 80635ce: f10d 0968    	add.w	r9, sp, #0x68
 80635d2: 469c         	mov	r12, r3
 80635d4: 931b         	str	r3, [sp, #0x6c]
 80635d6: ab0c         	add	r3, sp, #0x30
 80635d8: 931a         	str	r3, [sp, #0x68]
 80635da: 460a         	mov	r2, r1
 80635dc: f109 0908    	add.w	r9, r9, #0x8
 80635e0: 1c51         	adds	r1, r2, #0x1
 80635e2: e55a         	b	0x806309a <_vfiprintf_r+0x30a> @ imm = #-0x54c
 80635e4: 2d10         	cmp	r5, #0x10
 80635e6: f340 818d    	ble.w	0x8063904 <_vfiprintf_r+0xb74> @ imm = #0x31a
 80635ea: 4e8a         	ldr	r6, [pc, #0x228]        @ 0x8063814 <_vfiprintf_r+0xa84>
 80635ec: 2310         	movs	r3, #0x10
 80635ee: e9dd c00e    	ldrd	r12, r0, [sp, #56]
 80635f2: 4662         	mov	r2, r12
 80635f4: e00d         	b	0x8063612 <_vfiprintf_r+0x882> @ imm = #0x1a
 80635f6: 4640         	mov	r0, r8
 80635f8: f7ff fb86    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x8f4
 80635fc: 2800         	cmp	r0, #0x0
 80635fe: f47f ad97    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x4d2
 8063602: 2310         	movs	r3, #0x10
 8063604: e9dd 200e    	ldrd	r2, r0, [sp, #56]
 8063608: f102 0c01    	add.w	r12, r2, #0x1
 806360c: 3d10         	subs	r5, #0x10
 806360e: 2d10         	cmp	r5, #0x10
 8063610: dd18         	ble	0x8063644 <_vfiprintf_r+0x8b4> @ imm = #0x30
 8063612: 1c51         	adds	r1, r2, #0x1
 8063614: 3010         	adds	r0, #0x10
 8063616: f102 0c02    	add.w	r12, r2, #0x2
 806361a: 2907         	cmp	r1, #0x7
 806361c: 460a         	mov	r2, r1
 806361e: e9c9 6300    	strd	r6, r3, [r9]
 8063622: e9cd 100e    	strd	r1, r0, [sp, #56]
 8063626: f109 0908    	add.w	r9, r9, #0x8
 806362a: ddef         	ble	0x806360c <_vfiprintf_r+0x87c> @ imm = #-0x22
 806362c: aa0d         	add	r2, sp, #0x34
 806362e: 4659         	mov	r1, r11
 8063630: f10d 0968    	add.w	r9, sp, #0x68
 8063634: 2800         	cmp	r0, #0x0
 8063636: d1de         	bne	0x80635f6 <_vfiprintf_r+0x866> @ imm = #-0x44
 8063638: 3d10         	subs	r5, #0x10
 806363a: 4602         	mov	r2, r0
 806363c: f04f 0c01    	mov.w	r12, #0x1
 8063640: 2d10         	cmp	r5, #0x10
 8063642: dce6         	bgt	0x8063612 <_vfiprintf_r+0x882> @ imm = #-0x34
 8063644: 4662         	mov	r2, r12
 8063646: eb05 0c00    	add.w	r12, r5, r0
 806364a: 2a07         	cmp	r2, #0x7
 806364c: f8c9 6000    	str.w	r6, [r9]
 8063650: f8c9 5004    	str.w	r5, [r9, #0x4]
 8063654: e9cd 2c0e    	strd	r2, r12, [sp, #56]
 8063658: f300 80a2    	bgt.w	0x80637a0 <_vfiprintf_r+0xa10> @ imm = #0x144
 806365c: f109 0908    	add.w	r9, r9, #0x8
 8063660: 1c51         	adds	r1, r2, #0x1
 8063662: e4e4         	b	0x806302e <_vfiprintf_r+0x29e> @ imm = #-0x638
 8063664: 9a02         	ldr	r2, [sp, #0x8]
 8063666: 930e         	str	r3, [sp, #0x38]
 8063668: 0751         	lsls	r1, r2, #0x1d
 806366a: d547         	bpl	0x80636fc <_vfiprintf_r+0x96c> @ imm = #0x8e
 806366c: 9a04         	ldr	r2, [sp, #0x10]
 806366e: 9901         	ldr	r1, [sp, #0x4]
 8063670: 1a54         	subs	r4, r2, r1
 8063672: 2c00         	cmp	r4, #0x0
 8063674: dd42         	ble	0x80636fc <_vfiprintf_r+0x96c> @ imm = #0x84
 8063676: f10d 0968    	add.w	r9, sp, #0x68
 806367a: 2c10         	cmp	r4, #0x10
 806367c: f340 8147    	ble.w	0x806390e <_vfiprintf_r+0xb7e> @ imm = #0x28e
 8063680: 990e         	ldr	r1, [sp, #0x38]
 8063682: 2510         	movs	r5, #0x10
 8063684: 4e63         	ldr	r6, [pc, #0x18c]        @ 0x8063814 <_vfiprintf_r+0xa84>
 8063686: 4608         	mov	r0, r1
 8063688: e00e         	b	0x80636a8 <_vfiprintf_r+0x918> @ imm = #0x1c
 806368a: 4659         	mov	r1, r11
 806368c: 4640         	mov	r0, r8
 806368e: f7ff fb3b    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x98a
 8063692: 2800         	cmp	r0, #0x0
 8063694: f47f ad4c    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x568
 8063698: f10d 0968    	add.w	r9, sp, #0x68
 806369c: e9dd 030e    	ldrd	r0, r3, [sp, #56]
 80636a0: 1c41         	adds	r1, r0, #0x1
 80636a2: 3c10         	subs	r4, #0x10
 80636a4: 2c10         	cmp	r4, #0x10
 80636a6: dd15         	ble	0x80636d4 <_vfiprintf_r+0x944> @ imm = #0x2a
 80636a8: 1c42         	adds	r2, r0, #0x1
 80636aa: 3310         	adds	r3, #0x10
 80636ac: 1c81         	adds	r1, r0, #0x2
 80636ae: 2a07         	cmp	r2, #0x7
 80636b0: 4610         	mov	r0, r2
 80636b2: e9c9 6500    	strd	r6, r5, [r9]
 80636b6: e9cd 230e    	strd	r2, r3, [sp, #56]
 80636ba: f109 0908    	add.w	r9, r9, #0x8
 80636be: ddf0         	ble	0x80636a2 <_vfiprintf_r+0x912> @ imm = #-0x20
 80636c0: aa0d         	add	r2, sp, #0x34
 80636c2: 2b00         	cmp	r3, #0x0
 80636c4: d1e1         	bne	0x806368a <_vfiprintf_r+0x8fa> @ imm = #-0x3e
 80636c6: 3c10         	subs	r4, #0x10
 80636c8: 2101         	movs	r1, #0x1
 80636ca: 4618         	mov	r0, r3
 80636cc: f10d 0968    	add.w	r9, sp, #0x68
 80636d0: 2c10         	cmp	r4, #0x10
 80636d2: dce9         	bgt	0x80636a8 <_vfiprintf_r+0x918> @ imm = #-0x2e
 80636d4: 4608         	mov	r0, r1
 80636d6: 4423         	add	r3, r4
 80636d8: 2807         	cmp	r0, #0x7
 80636da: e9c9 6400    	strd	r6, r4, [r9]
 80636de: e9cd 030e    	strd	r0, r3, [sp, #56]
 80636e2: f77f ad05    	ble.w	0x80630f0 <_vfiprintf_r+0x360> @ imm = #-0x5f6
 80636e6: b14b         	cbz	r3, 0x80636fc <_vfiprintf_r+0x96c> @ imm = #0x12
 80636e8: aa0d         	add	r2, sp, #0x34
 80636ea: 4659         	mov	r1, r11
 80636ec: 4640         	mov	r0, r8
 80636ee: f7ff fb0b    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0x9ea
 80636f2: 2800         	cmp	r0, #0x0
 80636f4: f47f ad1c    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x5c8
 80636f8: 9b0f         	ldr	r3, [sp, #0x3c]
 80636fa: e4f9         	b	0x80630f0 <_vfiprintf_r+0x360> @ imm = #-0x60e
 80636fc: e9dd 2304    	ldrd	r2, r3, [sp, #16]
 8063700: 9901         	ldr	r1, [sp, #0x4]
 8063702: 428a         	cmp	r2, r1
 8063704: bfac         	ite	ge
 8063706: 189b         	addge	r3, r3, r2
 8063708: 185b         	addlt	r3, r3, r1
 806370a: 9305         	str	r3, [sp, #0x14]
 806370c: e4fb         	b	0x8063106 <_vfiprintf_r+0x376> @ imm = #-0x60a
 806370e: 4692         	mov	r10, r2
 8063710: ac1a         	add	r4, sp, #0x68
 8063712: 9203         	str	r2, [sp, #0xc]
 8063714: e46d         	b	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x726
 8063716: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 806371a: 280a         	cmp	r0, #0xa
 806371c: f171 0300    	sbcs	r3, r1, #0x0
 8063720: f080 808f    	bhs.w	0x8063842 <_vfiprintf_r+0xab2> @ imm = #0x11e
 8063724: 3030         	adds	r0, #0x30
 8063726: 2301         	movs	r3, #0x1
 8063728: f10d 0467    	add.w	r4, sp, #0x67
 806372c: 9502         	str	r5, [sp, #0x8]
 806372e: f88d 0067    	strb.w	r0, [sp, #0x67]
 8063732: 9303         	str	r3, [sp, #0xc]
 8063734: e45d         	b	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x746
 8063736: 9b07         	ldr	r3, [sp, #0x1c]
 8063738: 2b00         	cmp	r3, #0x0
 806373a: d155         	bne	0x80637e8 <_vfiprintf_r+0xa58> @ imm = #0xaa
 806373c: 2101         	movs	r1, #0x1
 806373e: 4662         	mov	r2, r12
 8063740: f10d 0968    	add.w	r9, sp, #0x68
 8063744: e4a9         	b	0x806309a <_vfiprintf_r+0x30a> @ imm = #-0x6ae
 8063746: f1bc 0f00    	cmp.w	r12, #0x0
 806374a: f43f ae4c    	beq.w	0x80633e6 <_vfiprintf_r+0x656> @ imm = #-0x368
 806374e: aa0d         	add	r2, sp, #0x34
 8063750: 4659         	mov	r1, r11
 8063752: 4640         	mov	r0, r8
 8063754: f7ff fad8    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0xa50
 8063758: 2800         	cmp	r0, #0x0
 806375a: f47f ace9    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x62e
 806375e: 990e         	ldr	r1, [sp, #0x38]
 8063760: f10d 0968    	add.w	r9, sp, #0x68
 8063764: f8dd c03c    	ldr.w	r12, [sp, #0x3c]
 8063768: 3101         	adds	r1, #0x1
 806376a: e4a0         	b	0x80630ae <_vfiprintf_r+0x31e> @ imm = #-0x6c0
 806376c: f10d 0968    	add.w	r9, sp, #0x68
 8063770: 920e         	str	r2, [sp, #0x38]
 8063772: f7ff bb5a    	b.w	0x8062e2a <_vfiprintf_r+0x9a> @ imm = #-0x94c
 8063776: ac1a         	add	r4, sp, #0x68
 8063778: e43b         	b	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x78a
 806377a: 17c1         	asrs	r1, r0, #0x1f
 806377c: 460b         	mov	r3, r1
 806377e: 2b00         	cmp	r3, #0x0
 8063780: f6bf ad1f    	bge.w	0x80631c2 <_vfiprintf_r+0x432> @ imm = #-0x5c2
 8063784: 232d         	movs	r3, #0x2d
 8063786: 4240         	rsbs	r0, r0, #0
 8063788: 461e         	mov	r6, r3
 806378a: f88d 302f    	strb.w	r3, [sp, #0x2f]
 806378e: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 8063792: 2301         	movs	r3, #0x1
 8063794: e40c         	b	0x8062fb0 <_vfiprintf_r+0x220> @ imm = #-0x7e8
 8063796: 9a06         	ldr	r2, [sp, #0x18]
 8063798: f852 0b04    	ldr	r0, [r2], #4
 806379c: 9206         	str	r2, [sp, #0x18]
 806379e: e556         	b	0x806324e <_vfiprintf_r+0x4be> @ imm = #-0x554
 80637a0: f1bc 0f00    	cmp.w	r12, #0x0
 80637a4: d038         	beq	0x8063818 <_vfiprintf_r+0xa88> @ imm = #0x70
 80637a6: aa0d         	add	r2, sp, #0x34
 80637a8: 4659         	mov	r1, r11
 80637aa: 4640         	mov	r0, r8
 80637ac: f7ff faac    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0xaa8
 80637b0: 2800         	cmp	r0, #0x0
 80637b2: f47f acbd    	bne.w	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x686
 80637b6: f10d 0968    	add.w	r9, sp, #0x68
 80637ba: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 80637be: 1c51         	adds	r1, r2, #0x1
 80637c0: e435         	b	0x806302e <_vfiprintf_r+0x29e> @ imm = #-0x796
 80637c2: 9306         	str	r3, [sp, #0x18]
 80637c4: 783b         	ldrb	r3, [r7]
 80637c6: f7ff bb43    	b.w	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0x97a
 80637ca: f109 0908    	add.w	r9, r9, #0x8
 80637ce: 1c41         	adds	r1, r0, #0x1
 80637d0: 4602         	mov	r2, r0
 80637d2: e466         	b	0x80630a2 <_vfiprintf_r+0x312> @ imm = #-0x734
 80637d4: e9dd 0305    	ldrd	r0, r3, [sp, #20]
 80637d8: f853 1b04    	ldr	r1, [r3], #4
 80637dc: 17c2         	asrs	r2, r0, #0x1f
 80637de: 9306         	str	r3, [sp, #0x18]
 80637e0: e9c1 0200    	strd	r0, r2, [r1]
 80637e4: f7ff bb07    	b.w	0x8062df6 <_vfiprintf_r+0x66> @ imm = #-0x9f2
 80637e8: 2302         	movs	r3, #0x2
 80637ea: f10d 0968    	add.w	r9, sp, #0x68
 80637ee: 469c         	mov	r12, r3
 80637f0: 931b         	str	r3, [sp, #0x6c]
 80637f2: ab0c         	add	r3, sp, #0x30
 80637f4: 931a         	str	r3, [sp, #0x68]
 80637f6: e6f1         	b	0x80635dc <_vfiprintf_r+0x84c> @ imm = #-0x21e
 80637f8: 4620         	mov	r0, r4
 80637fa: 9606         	str	r6, [sp, #0x18]
 80637fc: 9502         	str	r5, [sp, #0x8]
 80637fe: f04f 0a00    	mov.w	r10, #0x0
 8063802: f7ff fa53    	bl	0x8062cac <strlen>      @ imm = #-0xb5a
 8063806: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 806380a: 9003         	str	r0, [sp, #0xc]
 806380c: f7ff bbf1    	b.w	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x81e

08063810 <$d>:
 8063810: f0 5b 06 08  	.word	0x08065bf0
 8063814: e0 5b 06 08  	.word	0x08065be0

08063818 <$t>:
 8063818: f89d 202f    	ldrb.w	r2, [sp, #0x2f]
 806381c: 2a00         	cmp	r2, #0x0
 806381e: d144         	bne	0x80638aa <_vfiprintf_r+0xb1a> @ imm = #0x88
 8063820: 9b07         	ldr	r3, [sp, #0x1c]
 8063822: 2b00         	cmp	r3, #0x0
 8063824: f47f aed1    	bne.w	0x80635ca <_vfiprintf_r+0x83a> @ imm = #-0x25e
 8063828: 4662         	mov	r2, r12
 806382a: 2101         	movs	r1, #0x1
 806382c: f10d 0968    	add.w	r9, sp, #0x68
 8063830: e437         	b	0x80630a2 <_vfiprintf_r+0x312> @ imm = #-0x792
 8063832: 9b06         	ldr	r3, [sp, #0x18]
 8063834: 9905         	ldr	r1, [sp, #0x14]
 8063836: f853 2b04    	ldr	r2, [r3], #4
 806383a: 6011         	str	r1, [r2]
 806383c: 9306         	str	r3, [sp, #0x18]
 806383e: f7ff bada    	b.w	0x8062df6 <_vfiprintf_r+0x66> @ imm = #-0xa4c
 8063842: ac1a         	add	r4, sp, #0x68
 8063844: e9cd 5a01    	strd	r5, r10, [sp, #4]
 8063848: 220a         	movs	r2, #0xa
 806384a: 2300         	movs	r3, #0x0
 806384c: 4682         	mov	r10, r0
 806384e: 460d         	mov	r5, r1
 8063850: f001 fecc    	bl	0x80655ec <__aeabi_uldivmod> @ imm = #0x1d98
 8063854: 3230         	adds	r2, #0x30
 8063856: 2300         	movs	r3, #0x0
 8063858: 4650         	mov	r0, r10
 806385a: f804 2d01    	strb	r2, [r4, #-1]!
 806385e: 4629         	mov	r1, r5
 8063860: 220a         	movs	r2, #0xa
 8063862: f001 fec3    	bl	0x80655ec <__aeabi_uldivmod> @ imm = #0x1d86
 8063866: f1ba 0f0a    	cmp.w	r10, #0xa
 806386a: f175 0300    	sbcs	r3, r5, #0x0
 806386e: d2eb         	bhs	0x8063848 <_vfiprintf_r+0xab8> @ imm = #-0x2a
 8063870: ab1a         	add	r3, sp, #0x68
 8063872: e9dd 5a01    	ldrd	r5, r10, [sp, #4]
 8063876: 1b1b         	subs	r3, r3, r4
 8063878: 9502         	str	r5, [sp, #0x8]
 806387a: 9303         	str	r3, [sp, #0xc]
 806387c: f7ff bbb9    	b.w	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x88e
 8063880: 787b         	ldrb	r3, [r7, #0x1]
 8063882: f045 0520    	orr	r5, r5, #0x20
 8063886: 3701         	adds	r7, #0x1
 8063888: f7ff bae2    	b.w	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0xa3c
 806388c: 4653         	mov	r3, r10
 806388e: 4c2a         	ldr	r4, [pc, #0xa8]         @ 0x8063938 <_vfiprintf_r+0xba8>
 8063890: 9606         	str	r6, [sp, #0x18]
 8063892: 2b06         	cmp	r3, #0x6
 8063894: bf28         	it	hs
 8063896: 2306         	movhs	r3, #0x6
 8063898: 9303         	str	r3, [sp, #0xc]
 806389a: 9301         	str	r3, [sp, #0x4]
 806389c: e460         	b	0x8063160 <_vfiprintf_r+0x3d0> @ imm = #-0x740
 806389e: 2101         	movs	r1, #0x1
 80638a0: 4662         	mov	r2, r12
 80638a2: f10d 0968    	add.w	r9, sp, #0x68
 80638a6: f7ff bbfc    	b.w	0x80630a2 <_vfiprintf_r+0x312> @ imm = #-0x808
 80638aa: 2101         	movs	r1, #0x1
 80638ac: f10d 022f    	add.w	r2, sp, #0x2f
 80638b0: f10d 0968    	add.w	r9, sp, #0x68
 80638b4: 468c         	mov	r12, r1
 80638b6: 911b         	str	r1, [sp, #0x6c]
 80638b8: 921a         	str	r2, [sp, #0x68]
 80638ba: f7ff bbca    	b.w	0x8063052 <_vfiprintf_r+0x2c2> @ imm = #-0x86c
 80638be: f88d 002f    	strb.w	r0, [sp, #0x2f]
 80638c2: e441         	b	0x8063148 <_vfiprintf_r+0x3b8> @ imm = #-0x77e
 80638c4: aa0d         	add	r2, sp, #0x34
 80638c6: 4659         	mov	r1, r11
 80638c8: 4640         	mov	r0, r8
 80638ca: f7ff fa1d    	bl	0x8062d08 <__sprint_r.part.0> @ imm = #-0xbc6
 80638ce: e42f         	b	0x8063130 <_vfiprintf_r+0x3a0> @ imm = #-0x7a2
 80638d0: 9d02         	ldr	r5, [sp, #0x8]
 80638d2: e722         	b	0x806371a <_vfiprintf_r+0x98a> @ imm = #-0x1bc
 80638d4: f88d 002f    	strb.w	r0, [sp, #0x2f]
 80638d8: e570         	b	0x80633bc <_vfiprintf_r+0x62c> @ imm = #-0x520
 80638da: f88d 002f    	strb.w	r0, [sp, #0x2f]
 80638de: e4a8         	b	0x8063232 <_vfiprintf_r+0x4a2> @ imm = #-0x6b0
 80638e0: f88d 002f    	strb.w	r0, [sp, #0x2f]
 80638e4: e541         	b	0x806336a <_vfiprintf_r+0x5da> @ imm = #-0x57e
 80638e6: f88d 002f    	strb.w	r0, [sp, #0x2f]
 80638ea: e510         	b	0x806330e <_vfiprintf_r+0x57e> @ imm = #-0x5e0
 80638ec: f88d 002f    	strb.w	r0, [sp, #0x2f]
 80638f0: e457         	b	0x80631a2 <_vfiprintf_r+0x412> @ imm = #-0x752
 80638f2: f8cd a00c    	str.w	r10, [sp, #0xc]
 80638f6: 4682         	mov	r10, r0
 80638f8: 9606         	str	r6, [sp, #0x18]
 80638fa: 9502         	str	r5, [sp, #0x8]
 80638fc: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 8063900: f7ff bb77    	b.w	0x8062ff2 <_vfiprintf_r+0x262> @ imm = #-0x912
 8063904: 9a0e         	ldr	r2, [sp, #0x38]
 8063906: 980f         	ldr	r0, [sp, #0x3c]
 8063908: 3201         	adds	r2, #0x1
 806390a: 4e0c         	ldr	r6, [pc, #0x30]         @ 0x806393c <_vfiprintf_r+0xbac>
 806390c: e69b         	b	0x8063646 <_vfiprintf_r+0x8b6> @ imm = #-0x2ca
 806390e: 980e         	ldr	r0, [sp, #0x38]
 8063910: 4e0a         	ldr	r6, [pc, #0x28]         @ 0x806393c <_vfiprintf_r+0xbac>
 8063912: 3001         	adds	r0, #0x1
 8063914: e6df         	b	0x80636d6 <_vfiprintf_r+0x946> @ imm = #-0x242
 8063916: 4608         	mov	r0, r1
 8063918: 4d09         	ldr	r5, [pc, #0x24]         @ 0x8063940 <_vfiprintf_r+0xbb0>
 806391a: e5de         	b	0x80634da <_vfiprintf_r+0x74a> @ imm = #-0x444
 806391c: f04f 33ff    	mov.w	r3, #0xffffffff
 8063920: 9305         	str	r3, [sp, #0x14]
 8063922: e40a         	b	0x806313a <_vfiprintf_r+0x3aa> @ imm = #-0x7ec
 8063924: 9a06         	ldr	r2, [sp, #0x18]
 8063926: 787b         	ldrb	r3, [r7, #0x1]
 8063928: 4627         	mov	r7, r4
 806392a: f852 4b04    	ldr	r4, [r2], #4
 806392e: ea44 7ae4    	orr.w	r10, r4, r4, asr #31
 8063932: 9206         	str	r2, [sp, #0x18]
 8063934: f7ff ba8c    	b.w	0x8062e50 <_vfiprintf_r+0xc0> @ imm = #-0xae8

08063938 <$d>:
 8063938: f8 59 06 08  	.word	0x080659f8
 806393c: e0 5b 06 08  	.word	0x08065be0
 8063940: f0 5b 06 08  	.word	0x08065bf0

08063944 <vfiprintf>:
 8063944: b410         	push	{r4}
 8063946: 4c04         	ldr	r4, [pc, #0x10]         @ 0x8063958 <vfiprintf+0x14>
 8063948: 4613         	mov	r3, r2
 806394a: 460a         	mov	r2, r1
 806394c: 4601         	mov	r1, r0
 806394e: 6820         	ldr	r0, [r4]
 8063950: bc10         	pop	{r4}
 8063952: f7ff ba1d    	b.w	0x8062d90 <_vfiprintf_r> @ imm = #-0xbc6
 8063956: bf00         	nop

08063958 <$d>:
 8063958: 90 23 00 20  	.word	0x20002390

0806395c <__sbprintf>:
 806395c: b570         	push	{r4, r5, r6, lr}
 806395e: f5ad 6d8d    	sub.w	sp, sp, #0x468
 8063962: 460c         	mov	r4, r1
 8063964: 4606         	mov	r6, r0
 8063966: a91a         	add	r1, sp, #0x68
 8063968: 9100         	str	r1, [sp]
 806396a: 9104         	str	r1, [sp, #0x10]
 806396c: 89a1         	ldrh	r1, [r4, #0xc]
 806396e: f021 0102    	bic	r1, r1, #0x2
 8063972: f8ad 100c    	strh.w	r1, [sp, #0xc]
 8063976: 6e61         	ldr	r1, [r4, #0x64]
 8063978: 9119         	str	r1, [sp, #0x64]
 806397a: 89e1         	ldrh	r1, [r4, #0xe]
 806397c: f8ad 100e    	strh.w	r1, [sp, #0xe]
 8063980: 69e1         	ldr	r1, [r4, #0x1c]
 8063982: 9107         	str	r1, [sp, #0x1c]
 8063984: 6a61         	ldr	r1, [r4, #0x24]
 8063986: 9109         	str	r1, [sp, #0x24]
 8063988: f44f 6180    	mov.w	r1, #0x400
 806398c: 9102         	str	r1, [sp, #0x8]
 806398e: 9105         	str	r1, [sp, #0x14]
 8063990: 2100         	movs	r1, #0x0
 8063992: 9106         	str	r1, [sp, #0x18]
 8063994: 4669         	mov	r1, sp
 8063996: f7ff f9fb    	bl	0x8062d90 <_vfiprintf_r> @ imm = #-0xc0a
 806399a: 1e05         	subs	r5, r0, #0x0
 806399c: db07         	blt	0x80639ae <__sbprintf+0x52> @ imm = #0xe
 806399e: 4669         	mov	r1, sp
 80639a0: 4630         	mov	r0, r6
 80639a2: f7fd fd6b    	bl	0x806147c <_fflush_r>   @ imm = #-0x252a
 80639a6: 2800         	cmp	r0, #0x0
 80639a8: bf18         	it	ne
 80639aa: f04f 35ff    	movne.w	r5, #0xffffffff
 80639ae: f8bd 300c    	ldrh.w	r3, [sp, #0xc]
 80639b2: 065b         	lsls	r3, r3, #0x19
 80639b4: d503         	bpl	0x80639be <__sbprintf+0x62> @ imm = #0x6
 80639b6: 89a3         	ldrh	r3, [r4, #0xc]
 80639b8: f043 0340    	orr	r3, r3, #0x40
 80639bc: 81a3         	strh	r3, [r4, #0xc]
 80639be: 4628         	mov	r0, r5
 80639c0: f50d 6d8d    	add.w	sp, sp, #0x468
 80639c4: bd70         	pop	{r4, r5, r6, pc}
 80639c6: bf00         	nop

080639c8 <_write_r>:
 80639c8: b538         	push	{r3, r4, r5, lr}
 80639ca: 460c         	mov	r4, r1
 80639cc: 4684         	mov	r12, r0
 80639ce: 4611         	mov	r1, r2
 80639d0: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x80639f0 <_write_r+0x28>
 80639d2: 461a         	mov	r2, r3
 80639d4: 2300         	movs	r3, #0x0
 80639d6: 4620         	mov	r0, r4
 80639d8: 4664         	mov	r4, r12
 80639da: 602b         	str	r3, [r5]
 80639dc: f001 f968    	bl	0x8064cb0 <_write>      @ imm = #0x12d0
 80639e0: 1c43         	adds	r3, r0, #0x1
 80639e2: d000         	beq	0x80639e6 <_write_r+0x1e> @ imm = #0x0
 80639e4: bd38         	pop	{r3, r4, r5, pc}
 80639e6: 682b         	ldr	r3, [r5]
 80639e8: 2b00         	cmp	r3, #0x0
 80639ea: d0fb         	beq	0x80639e4 <_write_r+0x1c> @ imm = #-0xa
 80639ec: 6023         	str	r3, [r4]
 80639ee: bd38         	pop	{r3, r4, r5, pc}

080639f0 <$d>:
 80639f0: 9c 2f 00 20  	.word	0x20002f9c

080639f4 <__assert_func>:
 80639f4: 4d0a         	ldr	r5, [pc, #0x28]         @ 0x8063a20 <__assert_func+0x2c>
 80639f6: 4614         	mov	r4, r2
 80639f8: 461a         	mov	r2, r3
 80639fa: 4603         	mov	r3, r0
 80639fc: 682e         	ldr	r6, [r5]
 80639fe: 460d         	mov	r5, r1
 8063a00: b500         	push	{lr}
 8063a02: 68f0         	ldr	r0, [r6, #0xc]
 8063a04: b085         	sub	sp, #0x14
 8063a06: b144         	cbz	r4, 0x8063a1a <__assert_func+0x26> @ imm = #0x10
 8063a08: 4906         	ldr	r1, [pc, #0x18]         @ 0x8063a24 <__assert_func+0x30>
 8063a0a: 9500         	str	r5, [sp]
 8063a0c: e9cd 1401    	strd	r1, r4, [sp, #4]
 8063a10: 4905         	ldr	r1, [pc, #0x14]         @ 0x8063a28 <__assert_func+0x34>
 8063a12: f000 f8cd    	bl	0x8063bb0 <fiprintf>    @ imm = #0x19a
 8063a16: f000 ff9f    	bl	0x8064958 <abort>       @ imm = #0xf3e
 8063a1a: 4904         	ldr	r1, [pc, #0x10]         @ 0x8063a2c <__assert_func+0x38>
 8063a1c: 460c         	mov	r4, r1
 8063a1e: e7f4         	b	0x8063a0a <__assert_func+0x16> @ imm = #-0x18

08063a20 <$d>:
 8063a20: 90 23 00 20  	.word	0x20002390
 8063a24: 00 5c 06 08  	.word	0x08065c00
 8063a28: 10 5c 06 08  	.word	0x08065c10
 8063a2c: 0c 5c 06 08  	.word	0x08065c0c

08063a30 <__assert>:
 8063a30: b508         	push	{r3, lr}
 8063a32: 4613         	mov	r3, r2
 8063a34: 2200         	movs	r2, #0x0
 8063a36: f7ff ffdd    	bl	0x80639f4 <__assert_func> @ imm = #-0x46
 8063a3a: bf00         	nop

08063a3c <_calloc_r>:
 8063a3c: b510         	push	{r4, lr}
 8063a3e: fb02 f101    	mul	r1, r2, r1
 8063a42: f7fe f8a7    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x1eb2
 8063a46: 4604         	mov	r4, r0
 8063a48: b168         	cbz	r0, 0x8063a66 <_calloc_r+0x2a> @ imm = #0x1a
 8063a4a: f850 2c04    	ldr	r2, [r0, #-4]
 8063a4e: f022 0203    	bic	r2, r2, #0x3
 8063a52: 3a04         	subs	r2, #0x4
 8063a54: 2a24         	cmp	r2, #0x24
 8063a56: d814         	bhi	0x8063a82 <_calloc_r+0x46> @ imm = #0x28
 8063a58: 2a13         	cmp	r2, #0x13
 8063a5a: d806         	bhi	0x8063a6a <_calloc_r+0x2e> @ imm = #0xc
 8063a5c: 4602         	mov	r2, r0
 8063a5e: 2300         	movs	r3, #0x0
 8063a60: e9c2 3300    	strd	r3, r3, [r2]
 8063a64: 6093         	str	r3, [r2, #0x8]
 8063a66: 4620         	mov	r0, r4
 8063a68: bd10         	pop	{r4, pc}
 8063a6a: 2300         	movs	r3, #0x0
 8063a6c: 2a1b         	cmp	r2, #0x1b
 8063a6e: e9c0 3300    	strd	r3, r3, [r0]
 8063a72: d90b         	bls	0x8063a8c <_calloc_r+0x50> @ imm = #0x16
 8063a74: 2a24         	cmp	r2, #0x24
 8063a76: e9c0 3302    	strd	r3, r3, [r0, #8]
 8063a7a: d00a         	beq	0x8063a92 <_calloc_r+0x56> @ imm = #0x14
 8063a7c: f100 0210    	add.w	r2, r0, #0x10
 8063a80: e7ed         	b	0x8063a5e <_calloc_r+0x22> @ imm = #-0x26
 8063a82: 2100         	movs	r1, #0x0
 8063a84: f7fb f8a2    	bl	0x805ebcc <memset>      @ imm = #-0x4ebc
 8063a88: 4620         	mov	r0, r4
 8063a8a: bd10         	pop	{r4, pc}
 8063a8c: f100 0208    	add.w	r2, r0, #0x8
 8063a90: e7e5         	b	0x8063a5e <_calloc_r+0x22> @ imm = #-0x36
 8063a92: f100 0218    	add.w	r2, r0, #0x18
 8063a96: e9c0 3304    	strd	r3, r3, [r0, #16]
 8063a9a: e7e0         	b	0x8063a5e <_calloc_r+0x22> @ imm = #-0x40

08063a9c <_close_r>:
 8063a9c: b538         	push	{r3, r4, r5, lr}
 8063a9e: 2200         	movs	r2, #0x0
 8063aa0: 4d06         	ldr	r5, [pc, #0x18]         @ 0x8063abc <_close_r+0x20>
 8063aa2: 4604         	mov	r4, r0
 8063aa4: 4608         	mov	r0, r1
 8063aa6: 602a         	str	r2, [r5]
 8063aa8: f001 f8ba    	bl	0x8064c20 <_close>      @ imm = #0x1174
 8063aac: 1c43         	adds	r3, r0, #0x1
 8063aae: d000         	beq	0x8063ab2 <_close_r+0x16> @ imm = #0x0
 8063ab0: bd38         	pop	{r3, r4, r5, pc}
 8063ab2: 682b         	ldr	r3, [r5]
 8063ab4: 2b00         	cmp	r3, #0x0
 8063ab6: d0fb         	beq	0x8063ab0 <_close_r+0x14> @ imm = #-0xa
 8063ab8: 6023         	str	r3, [r4]
 8063aba: bd38         	pop	{r3, r4, r5, pc}

08063abc <$d>:
 8063abc: 9c 2f 00 20  	.word	0x20002f9c

08063ac0 <_fclose_r.part.0>:
 8063ac0: b570         	push	{r4, r5, r6, lr}
 8063ac2: 460c         	mov	r4, r1
 8063ac4: 4606         	mov	r6, r0
 8063ac6: f7fd fc3d    	bl	0x8061344 <__sflush_r>  @ imm = #-0x2786
 8063aca: 4605         	mov	r5, r0
 8063acc: 6ae3         	ldr	r3, [r4, #0x2c]
 8063ace: b133         	cbz	r3, 0x8063ade <_fclose_r.part.0+0x1e> @ imm = #0xc
 8063ad0: 69e1         	ldr	r1, [r4, #0x1c]
 8063ad2: 4630         	mov	r0, r6
 8063ad4: 4798         	blx	r3
 8063ad6: 2800         	cmp	r0, #0x0
 8063ad8: bfb8         	it	lt
 8063ada: f04f 35ff    	movlt.w	r5, #0xffffffff
 8063ade: 89a3         	ldrh	r3, [r4, #0xc]
 8063ae0: 061b         	lsls	r3, r3, #0x18
 8063ae2: d419         	bmi	0x8063b18 <_fclose_r.part.0+0x58> @ imm = #0x32
 8063ae4: 6b21         	ldr	r1, [r4, #0x30]
 8063ae6: b141         	cbz	r1, 0x8063afa <_fclose_r.part.0+0x3a> @ imm = #0x10
 8063ae8: f104 0340    	add.w	r3, r4, #0x40
 8063aec: 4299         	cmp	r1, r3
 8063aee: d002         	beq	0x8063af6 <_fclose_r.part.0+0x36> @ imm = #0x4
 8063af0: 4630         	mov	r0, r6
 8063af2: f7fd fe5d    	bl	0x80617b0 <_free_r>     @ imm = #-0x2346
 8063af6: 2300         	movs	r3, #0x0
 8063af8: 6323         	str	r3, [r4, #0x30]
 8063afa: 6c61         	ldr	r1, [r4, #0x44]
 8063afc: b121         	cbz	r1, 0x8063b08 <_fclose_r.part.0+0x48> @ imm = #0x8
 8063afe: 4630         	mov	r0, r6
 8063b00: f7fd fe56    	bl	0x80617b0 <_free_r>     @ imm = #-0x2354
 8063b04: 2300         	movs	r3, #0x0
 8063b06: 6463         	str	r3, [r4, #0x44]
 8063b08: f7fd fde6    	bl	0x80616d8 <__sfp_lock_acquire> @ imm = #-0x2434
 8063b0c: 2300         	movs	r3, #0x0
 8063b0e: 81a3         	strh	r3, [r4, #0xc]
 8063b10: f7fd fde4    	bl	0x80616dc <__sfp_lock_release> @ imm = #-0x2438
 8063b14: 4628         	mov	r0, r5
 8063b16: bd70         	pop	{r4, r5, r6, pc}
 8063b18: 6921         	ldr	r1, [r4, #0x10]
 8063b1a: 4630         	mov	r0, r6
 8063b1c: f7fd fe48    	bl	0x80617b0 <_free_r>     @ imm = #-0x2370
 8063b20: e7e0         	b	0x8063ae4 <_fclose_r.part.0+0x24> @ imm = #-0x40
 8063b22: bf00         	nop

08063b24 <_fclose_r>:
 8063b24: b1b1         	cbz	r1, 0x8063b54 <_fclose_r+0x30> @ imm = #0x2c
 8063b26: b538         	push	{r3, r4, r5, lr}
 8063b28: 4605         	mov	r5, r0
 8063b2a: 460c         	mov	r4, r1
 8063b2c: b108         	cbz	r0, 0x8063b32 <_fclose_r+0xe> @ imm = #0x2
 8063b2e: 6b83         	ldr	r3, [r0, #0x38]
 8063b30: b14b         	cbz	r3, 0x8063b46 <_fclose_r+0x22> @ imm = #0x12
 8063b32: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063b36: b90b         	cbnz	r3, 0x8063b3c <_fclose_r+0x18> @ imm = #0x2
 8063b38: 2000         	movs	r0, #0x0
 8063b3a: bd38         	pop	{r3, r4, r5, pc}
 8063b3c: 4621         	mov	r1, r4
 8063b3e: 4628         	mov	r0, r5
 8063b40: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8063b44: e7bc         	b	0x8063ac0 <_fclose_r.part.0> @ imm = #-0x88
 8063b46: f7fd fdc3    	bl	0x80616d0 <__sinit>     @ imm = #-0x247a
 8063b4a: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063b4e: 2b00         	cmp	r3, #0x0
 8063b50: d0f2         	beq	0x8063b38 <_fclose_r+0x14> @ imm = #-0x1c
 8063b52: e7f3         	b	0x8063b3c <_fclose_r+0x18> @ imm = #-0x1a
 8063b54: 2000         	movs	r0, #0x0
 8063b56: 4770         	bx	lr

08063b58 <fclose>:
 8063b58: b1c0         	cbz	r0, 0x8063b8c <fclose+0x34> @ imm = #0x30
 8063b5a: b538         	push	{r3, r4, r5, lr}
 8063b5c: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x8063b90 <fclose+0x38>
 8063b5e: 4604         	mov	r4, r0
 8063b60: 681d         	ldr	r5, [r3]
 8063b62: b10d         	cbz	r5, 0x8063b68 <fclose+0x10> @ imm = #0x2
 8063b64: 6bab         	ldr	r3, [r5, #0x38]
 8063b66: b14b         	cbz	r3, 0x8063b7c <fclose+0x24> @ imm = #0x12
 8063b68: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063b6c: b90b         	cbnz	r3, 0x8063b72 <fclose+0x1a> @ imm = #0x2
 8063b6e: 2000         	movs	r0, #0x0
 8063b70: bd38         	pop	{r3, r4, r5, pc}
 8063b72: 4621         	mov	r1, r4
 8063b74: 4628         	mov	r0, r5
 8063b76: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8063b7a: e7a1         	b	0x8063ac0 <_fclose_r.part.0> @ imm = #-0xbe
 8063b7c: 4628         	mov	r0, r5
 8063b7e: f7fd fda7    	bl	0x80616d0 <__sinit>     @ imm = #-0x24b2
 8063b82: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063b86: 2b00         	cmp	r3, #0x0
 8063b88: d0f1         	beq	0x8063b6e <fclose+0x16> @ imm = #-0x1e
 8063b8a: e7f2         	b	0x8063b72 <fclose+0x1a> @ imm = #-0x1c
 8063b8c: 2000         	movs	r0, #0x0
 8063b8e: 4770         	bx	lr

08063b90 <$d>:
 8063b90: 90 23 00 20  	.word	0x20002390

08063b94 <_fiprintf_r>:
 8063b94: b40c         	push	{r2, r3}
 8063b96: b500         	push	{lr}
 8063b98: b083         	sub	sp, #0xc
 8063b9a: ab04         	add	r3, sp, #0x10
 8063b9c: f853 2b04    	ldr	r2, [r3], #4
 8063ba0: 9301         	str	r3, [sp, #0x4]
 8063ba2: f7ff f8f5    	bl	0x8062d90 <_vfiprintf_r> @ imm = #-0xe16
 8063ba6: b003         	add	sp, #0xc
 8063ba8: f85d eb04    	ldr	lr, [sp], #4
 8063bac: b002         	add	sp, #0x8
 8063bae: 4770         	bx	lr

08063bb0 <fiprintf>:
 8063bb0: b40e         	push	{r1, r2, r3}
 8063bb2: b510         	push	{r4, lr}
 8063bb4: b083         	sub	sp, #0xc
 8063bb6: 4c07         	ldr	r4, [pc, #0x1c]         @ 0x8063bd4 <fiprintf+0x24>
 8063bb8: 4601         	mov	r1, r0
 8063bba: ab05         	add	r3, sp, #0x14
 8063bbc: 6820         	ldr	r0, [r4]
 8063bbe: f853 2b04    	ldr	r2, [r3], #4
 8063bc2: 9301         	str	r3, [sp, #0x4]
 8063bc4: f7ff f8e4    	bl	0x8062d90 <_vfiprintf_r> @ imm = #-0xe38
 8063bc8: b003         	add	sp, #0xc
 8063bca: e8bd 4010    	pop.w	{r4, lr}
 8063bce: b003         	add	sp, #0xc
 8063bd0: 4770         	bx	lr
 8063bd2: bf00         	nop

08063bd4 <$d>:
 8063bd4: 90 23 00 20  	.word	0x20002390

08063bd8 <__fputwc>:
 8063bd8: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
 8063bdc: b083         	sub	sp, #0xc
 8063bde: 4607         	mov	r7, r0
 8063be0: 4688         	mov	r8, r1
 8063be2: 4614         	mov	r4, r2
 8063be4: f000 fa3a    	bl	0x806405c <__locale_mb_cur_max> @ imm = #0x474
 8063be8: 2801         	cmp	r0, #0x1
 8063bea: d103         	bne	0x8063bf4 <__fputwc+0x1c> @ imm = #0x6
 8063bec: f108 33ff    	add.w	r3, r8, #0xffffffff
 8063bf0: 2bfe         	cmp	r3, #0xfe
 8063bf2: d932         	bls	0x8063c5a <__fputwc+0x82> @ imm = #0x64
 8063bf4: 4642         	mov	r2, r8
 8063bf6: f104 035c    	add.w	r3, r4, #0x5c
 8063bfa: a901         	add	r1, sp, #0x4
 8063bfc: 4638         	mov	r0, r7
 8063bfe: f000 fe4d    	bl	0x806489c <_wcrtomb_r>  @ imm = #0xc9a
 8063c02: 1c42         	adds	r2, r0, #0x1
 8063c04: 4606         	mov	r6, r0
 8063c06: d033         	beq	0x8063c70 <__fputwc+0x98> @ imm = #0x66
 8063c08: b368         	cbz	r0, 0x8063c66 <__fputwc+0x8e> @ imm = #0x5a
 8063c0a: f89d c004    	ldrb.w	r12, [sp, #0x4]
 8063c0e: f10d 0905    	add.w	r9, sp, #0x5
 8063c12: 2500         	movs	r5, #0x0
 8063c14: e00c         	b	0x8063c30 <__fputwc+0x58> @ imm = #0x18
 8063c16: f1bc 0f0a    	cmp.w	r12, #0xa
 8063c1a: d015         	beq	0x8063c48 <__fputwc+0x70> @ imm = #0x2a
 8063c1c: 6823         	ldr	r3, [r4]
 8063c1e: 1c5a         	adds	r2, r3, #0x1
 8063c20: 6022         	str	r2, [r4]
 8063c22: f883 c000    	strb.w	r12, [r3]
 8063c26: 3501         	adds	r5, #0x1
 8063c28: 42b5         	cmp	r5, r6
 8063c2a: d21c         	bhs	0x8063c66 <__fputwc+0x8e> @ imm = #0x38
 8063c2c: f819 cb01    	ldrb	r12, [r9], #1
 8063c30: 68a3         	ldr	r3, [r4, #0x8]
 8063c32: 3b01         	subs	r3, #0x1
 8063c34: 2b00         	cmp	r3, #0x0
 8063c36: 60a3         	str	r3, [r4, #0x8]
 8063c38: daf0         	bge	0x8063c1c <__fputwc+0x44> @ imm = #-0x20
 8063c3a: f8d4 e018    	ldr.w	lr, [r4, #0x18]
 8063c3e: 4661         	mov	r1, r12
 8063c40: 4622         	mov	r2, r4
 8063c42: 4638         	mov	r0, r7
 8063c44: 4573         	cmp	r3, lr
 8063c46: dae6         	bge	0x8063c16 <__fputwc+0x3e> @ imm = #-0x34
 8063c48: f000 fdc8    	bl	0x80647dc <__swbuf_r>   @ imm = #0xb90
 8063c4c: 1c43         	adds	r3, r0, #0x1
 8063c4e: d1ea         	bne	0x8063c26 <__fputwc+0x4e> @ imm = #-0x2c
 8063c50: 4606         	mov	r6, r0
 8063c52: 4630         	mov	r0, r6
 8063c54: b003         	add	sp, #0xc
 8063c56: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8063c5a: fa5f fc88    	uxtb.w	r12, r8
 8063c5e: 4606         	mov	r6, r0
 8063c60: f88d c004    	strb.w	r12, [sp, #0x4]
 8063c64: e7d3         	b	0x8063c0e <__fputwc+0x36> @ imm = #-0x5a
 8063c66: 4646         	mov	r6, r8
 8063c68: 4630         	mov	r0, r6
 8063c6a: b003         	add	sp, #0xc
 8063c6c: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8063c70: 89a3         	ldrh	r3, [r4, #0xc]
 8063c72: f043 0340    	orr	r3, r3, #0x40
 8063c76: 81a3         	strh	r3, [r4, #0xc]
 8063c78: e7eb         	b	0x8063c52 <__fputwc+0x7a> @ imm = #-0x2a
 8063c7a: bf00         	nop

08063c7c <_fputwc_r>:
 8063c7c: f9b2 300c    	ldrsh.w	r3, [r2, #0xc]
 8063c80: f413 5f00    	tst.w	r3, #0x2000
 8063c84: d10a         	bne	0x8063c9c <_fputwc_r+0x20> @ imm = #0x14
 8063c86: f443 5300    	orr	r3, r3, #0x2000
 8063c8a: b410         	push	{r4}
 8063c8c: 6e54         	ldr	r4, [r2, #0x64]
 8063c8e: 8193         	strh	r3, [r2, #0xc]
 8063c90: f444 5400    	orr	r4, r4, #0x2000
 8063c94: 6654         	str	r4, [r2, #0x64]
 8063c96: bc10         	pop	{r4}
 8063c98: f7ff bf9e    	b.w	0x8063bd8 <__fputwc>    @ imm = #-0xc4
 8063c9c: f7ff bf9c    	b.w	0x8063bd8 <__fputwc>    @ imm = #-0xc8

08063ca0 <fputwc>:
 8063ca0: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x8063cdc <fputwc+0x3c>
 8063ca2: b570         	push	{r4, r5, r6, lr}
 8063ca4: 681e         	ldr	r6, [r3]
 8063ca6: 4605         	mov	r5, r0
 8063ca8: 460c         	mov	r4, r1
 8063caa: b10e         	cbz	r6, 0x8063cb0 <fputwc+0x10> @ imm = #0x2
 8063cac: 6bb3         	ldr	r3, [r6, #0x38]
 8063cae: b18b         	cbz	r3, 0x8063cd4 <fputwc+0x34> @ imm = #0x22
 8063cb0: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063cb4: 049a         	lsls	r2, r3, #0x12
 8063cb6: d406         	bmi	0x8063cc6 <fputwc+0x26> @ imm = #0xc
 8063cb8: 6e62         	ldr	r2, [r4, #0x64]
 8063cba: f443 5300    	orr	r3, r3, #0x2000
 8063cbe: f442 5200    	orr	r2, r2, #0x2000
 8063cc2: 81a3         	strh	r3, [r4, #0xc]
 8063cc4: 6662         	str	r2, [r4, #0x64]
 8063cc6: 4622         	mov	r2, r4
 8063cc8: 4629         	mov	r1, r5
 8063cca: 4630         	mov	r0, r6
 8063ccc: e8bd 4070    	pop.w	{r4, r5, r6, lr}
 8063cd0: f7ff bf82    	b.w	0x8063bd8 <__fputwc>    @ imm = #-0xfc
 8063cd4: 4630         	mov	r0, r6
 8063cd6: f7fd fcfb    	bl	0x80616d0 <__sinit>     @ imm = #-0x260a
 8063cda: e7e9         	b	0x8063cb0 <fputwc+0x10> @ imm = #-0x2e

08063cdc <$d>:
 8063cdc: 90 23 00 20  	.word	0x20002390

08063ce0 <_fstat_r>:
 8063ce0: b570         	push	{r4, r5, r6, lr}
 8063ce2: 460c         	mov	r4, r1
 8063ce4: 4603         	mov	r3, r0
 8063ce6: 4d08         	ldr	r5, [pc, #0x20]         @ 0x8063d08 <_fstat_r+0x28>
 8063ce8: 2600         	movs	r6, #0x0
 8063cea: 4620         	mov	r0, r4
 8063cec: 4611         	mov	r1, r2
 8063cee: 461c         	mov	r4, r3
 8063cf0: 602e         	str	r6, [r5]
 8063cf2: f000 ff9d    	bl	0x8064c30 <_fstat>      @ imm = #0xf3a
 8063cf6: 1c43         	adds	r3, r0, #0x1
 8063cf8: d000         	beq	0x8063cfc <_fstat_r+0x1c> @ imm = #0x0
 8063cfa: bd70         	pop	{r4, r5, r6, pc}
 8063cfc: 682b         	ldr	r3, [r5]
 8063cfe: 2b00         	cmp	r3, #0x0
 8063d00: d0fb         	beq	0x8063cfa <_fstat_r+0x1a> @ imm = #-0xa
 8063d02: 6023         	str	r3, [r4]
 8063d04: bd70         	pop	{r4, r5, r6, pc}
 8063d06: bf00         	nop

08063d08 <$d>:
 8063d08: 9c 2f 00 20  	.word	0x20002f9c

08063d0c <__sfvwrite_r>:
 8063d0c: 6893         	ldr	r3, [r2, #0x8]
 8063d0e: 2b00         	cmp	r3, #0x0
 8063d10: f000 8081    	beq.w	0x8063e16 <__sfvwrite_r+0x10a> @ imm = #0x102
 8063d14: f9b1 300c    	ldrsh.w	r3, [r1, #0xc]
 8063d18: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8063d1c: 460c         	mov	r4, r1
 8063d1e: 0719         	lsls	r1, r3, #0x1c
 8063d20: 4680         	mov	r8, r0
 8063d22: b083         	sub	sp, #0xc
 8063d24: 4617         	mov	r7, r2
 8063d26: b298         	uxth	r0, r3
 8063d28: d523         	bpl	0x8063d72 <__sfvwrite_r+0x66> @ imm = #0x46
 8063d2a: 6923         	ldr	r3, [r4, #0x10]
 8063d2c: b30b         	cbz	r3, 0x8063d72 <__sfvwrite_r+0x66> @ imm = #0x42
 8063d2e: f010 0302    	ands	r3, r0, #0x2
 8063d32: 683d         	ldr	r5, [r7]
 8063d34: d02b         	beq	0x8063d8e <__sfvwrite_r+0x82> @ imm = #0x56
 8063d36: f04f 0a00    	mov.w	r10, #0x0
 8063d3a: f8df b2b8    	ldr.w	r11, [pc, #0x2b8]       @ 0x8063ff4 <__sfvwrite_r+0x2e8>
 8063d3e: 4656         	mov	r6, r10
 8063d40: 455e         	cmp	r6, r11
 8063d42: 4633         	mov	r3, r6
 8063d44: 4652         	mov	r2, r10
 8063d46: 4640         	mov	r0, r8
 8063d48: bf28         	it	hs
 8063d4a: 465b         	movhs	r3, r11
 8063d4c: 2e00         	cmp	r6, #0x0
 8063d4e: d04f         	beq	0x8063df0 <__sfvwrite_r+0xe4> @ imm = #0x9e
 8063d50: 69e1         	ldr	r1, [r4, #0x1c]
 8063d52: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 8063d56: 47e0         	blx	r12
 8063d58: 2800         	cmp	r0, #0x0
 8063d5a: dd52         	ble	0x8063e02 <__sfvwrite_r+0xf6> @ imm = #0xa4
 8063d5c: 68bb         	ldr	r3, [r7, #0x8]
 8063d5e: 4482         	add	r10, r0
 8063d60: 1a36         	subs	r6, r6, r0
 8063d62: 1a18         	subs	r0, r3, r0
 8063d64: 60b8         	str	r0, [r7, #0x8]
 8063d66: 2800         	cmp	r0, #0x0
 8063d68: d1ea         	bne	0x8063d40 <__sfvwrite_r+0x34> @ imm = #-0x2c
 8063d6a: 2000         	movs	r0, #0x0
 8063d6c: b003         	add	sp, #0xc
 8063d6e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8063d72: 4621         	mov	r1, r4
 8063d74: 4640         	mov	r0, r8
 8063d76: f7fc fa65    	bl	0x8060244 <__swsetup_r> @ imm = #-0x3b36
 8063d7a: 2800         	cmp	r0, #0x0
 8063d7c: f040 8137    	bne.w	0x8063fee <__sfvwrite_r+0x2e2> @ imm = #0x26e
 8063d80: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063d84: 683d         	ldr	r5, [r7]
 8063d86: b298         	uxth	r0, r3
 8063d88: f010 0302    	ands	r3, r0, #0x2
 8063d8c: d1d3         	bne	0x8063d36 <__sfvwrite_r+0x2a> @ imm = #-0x5a
 8063d8e: f010 0901    	ands	r9, r0, #0x1
 8063d92: d142         	bne	0x8063e1a <__sfvwrite_r+0x10e> @ imm = #0x84
 8063d94: 464e         	mov	r6, r9
 8063d96: b33e         	cbz	r6, 0x8063de8 <__sfvwrite_r+0xdc> @ imm = #0x4e
 8063d98: 0582         	lsls	r2, r0, #0x16
 8063d9a: f8d4 b008    	ldr.w	r11, [r4, #0x8]
 8063d9e: f140 8084    	bpl.w	0x8063eaa <__sfvwrite_r+0x19e> @ imm = #0x108
 8063da2: 45b3         	cmp	r11, r6
 8063da4: 465a         	mov	r2, r11
 8063da6: f200 80b4    	bhi.w	0x8063f12 <__sfvwrite_r+0x206> @ imm = #0x168
 8063daa: f410 6f90    	tst.w	r0, #0x480
 8063dae: f040 80c1    	bne.w	0x8063f34 <__sfvwrite_r+0x228> @ imm = #0x182
 8063db2: 6820         	ldr	r0, [r4]
 8063db4: 4649         	mov	r1, r9
 8063db6: 9201         	str	r2, [sp, #0x4]
 8063db8: f000 f9ac    	bl	0x8064114 <memmove>     @ imm = #0x358
 8063dbc: 68a3         	ldr	r3, [r4, #0x8]
 8063dbe: 6821         	ldr	r1, [r4]
 8063dc0: 46b2         	mov	r10, r6
 8063dc2: 9a01         	ldr	r2, [sp, #0x4]
 8063dc4: eba3 030b    	sub.w	r3, r3, r11
 8063dc8: 2600         	movs	r6, #0x0
 8063dca: 440a         	add	r2, r1
 8063dcc: 60a3         	str	r3, [r4, #0x8]
 8063dce: 6022         	str	r2, [r4]
 8063dd0: 68b8         	ldr	r0, [r7, #0x8]
 8063dd2: 44d1         	add	r9, r10
 8063dd4: eba0 000a    	sub.w	r0, r0, r10
 8063dd8: 60b8         	str	r0, [r7, #0x8]
 8063dda: 2800         	cmp	r0, #0x0
 8063ddc: d0c5         	beq	0x8063d6a <__sfvwrite_r+0x5e> @ imm = #-0x76
 8063dde: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 8063de2: b280         	uxth	r0, r0
 8063de4: 2e00         	cmp	r6, #0x0
 8063de6: d1d7         	bne	0x8063d98 <__sfvwrite_r+0x8c> @ imm = #-0x52
 8063de8: e9d5 9600    	ldrd	r9, r6, [r5]
 8063dec: 3508         	adds	r5, #0x8
 8063dee: e7d2         	b	0x8063d96 <__sfvwrite_r+0x8a> @ imm = #-0x5c
 8063df0: e9d5 a600    	ldrd	r10, r6, [r5]
 8063df4: 3508         	adds	r5, #0x8
 8063df6: e7a3         	b	0x8063d40 <__sfvwrite_r+0x34> @ imm = #-0xba
 8063df8: 4621         	mov	r1, r4
 8063dfa: 4640         	mov	r0, r8
 8063dfc: f7fd fb3e    	bl	0x806147c <_fflush_r>   @ imm = #-0x2984
 8063e00: b388         	cbz	r0, 0x8063e66 <__sfvwrite_r+0x15a> @ imm = #0x62
 8063e02: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063e06: f043 0340    	orr	r3, r3, #0x40
 8063e0a: f04f 30ff    	mov.w	r0, #0xffffffff
 8063e0e: 81a3         	strh	r3, [r4, #0xc]
 8063e10: b003         	add	sp, #0xc
 8063e12: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8063e16: 2000         	movs	r0, #0x0
 8063e18: 4770         	bx	lr
 8063e1a: 461e         	mov	r6, r3
 8063e1c: 46aa         	mov	r10, r5
 8063e1e: 4699         	mov	r9, r3
 8063e20: 4618         	mov	r0, r3
 8063e22: 461d         	mov	r5, r3
 8063e24: b35e         	cbz	r6, 0x8063e7e <__sfvwrite_r+0x172> @ imm = #0x56
 8063e26: 2800         	cmp	r0, #0x0
 8063e28: d033         	beq	0x8063e92 <__sfvwrite_r+0x186> @ imm = #0x66
 8063e2a: 464a         	mov	r2, r9
 8063e2c: 68a1         	ldr	r1, [r4, #0x8]
 8063e2e: 42b2         	cmp	r2, r6
 8063e30: 6963         	ldr	r3, [r4, #0x14]
 8063e32: 6820         	ldr	r0, [r4]
 8063e34: bf28         	it	hs
 8063e36: 4632         	movhs	r2, r6
 8063e38: eb03 0b01    	add.w	r11, r3, r1
 8063e3c: 6921         	ldr	r1, [r4, #0x10]
 8063e3e: 4288         	cmp	r0, r1
 8063e40: d902         	bls	0x8063e48 <__sfvwrite_r+0x13c> @ imm = #0x4
 8063e42: 455a         	cmp	r2, r11
 8063e44: f300 80a9    	bgt.w	0x8063f9a <__sfvwrite_r+0x28e> @ imm = #0x152
 8063e48: 4293         	cmp	r3, r2
 8063e4a: dc66         	bgt	0x8063f1a <__sfvwrite_r+0x20e> @ imm = #0xcc
 8063e4c: 462a         	mov	r2, r5
 8063e4e: 69e1         	ldr	r1, [r4, #0x1c]
 8063e50: 4640         	mov	r0, r8
 8063e52: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 8063e56: 47e0         	blx	r12
 8063e58: f1b0 0b00    	subs.w	r11, r0, #0x0
 8063e5c: ddd1         	ble	0x8063e02 <__sfvwrite_r+0xf6> @ imm = #-0x5e
 8063e5e: ebb9 090b    	subs.w	r9, r9, r11
 8063e62: d0c9         	beq	0x8063df8 <__sfvwrite_r+0xec> @ imm = #-0x6e
 8063e64: 2001         	movs	r0, #0x1
 8063e66: 68ba         	ldr	r2, [r7, #0x8]
 8063e68: 445d         	add	r5, r11
 8063e6a: eba6 060b    	sub.w	r6, r6, r11
 8063e6e: eba2 020b    	sub.w	r2, r2, r11
 8063e72: 60ba         	str	r2, [r7, #0x8]
 8063e74: 2a00         	cmp	r2, #0x0
 8063e76: f43f af78    	beq.w	0x8063d6a <__sfvwrite_r+0x5e> @ imm = #-0x110
 8063e7a: 2e00         	cmp	r6, #0x0
 8063e7c: d1d3         	bne	0x8063e26 <__sfvwrite_r+0x11a> @ imm = #-0x5a
 8063e7e: f10a 0308    	add.w	r3, r10, #0x8
 8063e82: f853 6c04    	ldr	r6, [r3, #-4]
 8063e86: 469a         	mov	r10, r3
 8063e88: f853 5c08    	ldr	r5, [r3, #-8]
 8063e8c: 3308         	adds	r3, #0x8
 8063e8e: 2e00         	cmp	r6, #0x0
 8063e90: d0f7         	beq	0x8063e82 <__sfvwrite_r+0x176> @ imm = #-0x12
 8063e92: 4632         	mov	r2, r6
 8063e94: 210a         	movs	r1, #0xa
 8063e96: 4628         	mov	r0, r5
 8063e98: f7fe f932    	bl	0x8062100 <memchr>      @ imm = #-0x1d9c
 8063e9c: 2800         	cmp	r0, #0x0
 8063e9e: f000 809d    	beq.w	0x8063fdc <__sfvwrite_r+0x2d0> @ imm = #0x13a
 8063ea2: 3001         	adds	r0, #0x1
 8063ea4: eba0 0905    	sub.w	r9, r0, r5
 8063ea8: e7bf         	b	0x8063e2a <__sfvwrite_r+0x11e> @ imm = #-0x82
 8063eaa: 6820         	ldr	r0, [r4]
 8063eac: 6923         	ldr	r3, [r4, #0x10]
 8063eae: 4298         	cmp	r0, r3
 8063eb0: d817         	bhi	0x8063ee2 <__sfvwrite_r+0x1d6> @ imm = #0x2e
 8063eb2: 6963         	ldr	r3, [r4, #0x14]
 8063eb4: 42b3         	cmp	r3, r6
 8063eb6: d814         	bhi	0x8063ee2 <__sfvwrite_r+0x1d6> @ imm = #0x28
 8063eb8: f06f 4200    	mvn	r2, #0x80000000
 8063ebc: 69e1         	ldr	r1, [r4, #0x1c]
 8063ebe: 4640         	mov	r0, r8
 8063ec0: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 8063ec4: 42b2         	cmp	r2, r6
 8063ec6: bf28         	it	hs
 8063ec8: 4632         	movhs	r2, r6
 8063eca: fb92 f2f3    	sdiv	r2, r2, r3
 8063ece: fb02 f303    	mul	r3, r2, r3
 8063ed2: 464a         	mov	r2, r9
 8063ed4: 47e0         	blx	r12
 8063ed6: f1b0 0a00    	subs.w	r10, r0, #0x0
 8063eda: dd92         	ble	0x8063e02 <__sfvwrite_r+0xf6> @ imm = #-0xdc
 8063edc: eba6 060a    	sub.w	r6, r6, r10
 8063ee0: e776         	b	0x8063dd0 <__sfvwrite_r+0xc4> @ imm = #-0x114
 8063ee2: 45b3         	cmp	r11, r6
 8063ee4: 46da         	mov	r10, r11
 8063ee6: 4649         	mov	r1, r9
 8063ee8: bf28         	it	hs
 8063eea: 46b2         	movhs	r10, r6
 8063eec: 4652         	mov	r2, r10
 8063eee: f000 f911    	bl	0x8064114 <memmove>     @ imm = #0x222
 8063ef2: 68a3         	ldr	r3, [r4, #0x8]
 8063ef4: 6822         	ldr	r2, [r4]
 8063ef6: eba3 030a    	sub.w	r3, r3, r10
 8063efa: 4452         	add	r2, r10
 8063efc: 60a3         	str	r3, [r4, #0x8]
 8063efe: 6022         	str	r2, [r4]
 8063f00: 2b00         	cmp	r3, #0x0
 8063f02: d1eb         	bne	0x8063edc <__sfvwrite_r+0x1d0> @ imm = #-0x2a
 8063f04: 4621         	mov	r1, r4
 8063f06: 4640         	mov	r0, r8
 8063f08: f7fd fab8    	bl	0x806147c <_fflush_r>   @ imm = #-0x2a90
 8063f0c: 2800         	cmp	r0, #0x0
 8063f0e: d0e5         	beq	0x8063edc <__sfvwrite_r+0x1d0> @ imm = #-0x36
 8063f10: e777         	b	0x8063e02 <__sfvwrite_r+0xf6> @ imm = #-0x112
 8063f12: 46b3         	mov	r11, r6
 8063f14: 6820         	ldr	r0, [r4]
 8063f16: 4632         	mov	r2, r6
 8063f18: e74c         	b	0x8063db4 <__sfvwrite_r+0xa8> @ imm = #-0x168
 8063f1a: 4629         	mov	r1, r5
 8063f1c: 9201         	str	r2, [sp, #0x4]
 8063f1e: f000 f8f9    	bl	0x8064114 <memmove>     @ imm = #0x1f2
 8063f22: 9a01         	ldr	r2, [sp, #0x4]
 8063f24: 68a3         	ldr	r3, [r4, #0x8]
 8063f26: 4693         	mov	r11, r2
 8063f28: 1a9b         	subs	r3, r3, r2
 8063f2a: 60a3         	str	r3, [r4, #0x8]
 8063f2c: 6823         	ldr	r3, [r4]
 8063f2e: 4413         	add	r3, r2
 8063f30: 6023         	str	r3, [r4]
 8063f32: e794         	b	0x8063e5e <__sfvwrite_r+0x152> @ imm = #-0xd8
 8063f34: 6823         	ldr	r3, [r4]
 8063f36: 6921         	ldr	r1, [r4, #0x10]
 8063f38: eba3 0b01    	sub.w	r11, r3, r1
 8063f3c: 6963         	ldr	r3, [r4, #0x14]
 8063f3e: eb13 0343    	adds.w	r3, r3, r3, lsl #1
 8063f42: bf48         	it	mi
 8063f44: 3301         	addmi	r3, #0x1
 8063f46: ea4f 0a63    	asr.w	r10, r3, #0x1
 8063f4a: f10b 0301    	add.w	r3, r11, #0x1
 8063f4e: 4433         	add	r3, r6
 8063f50: 4652         	mov	r2, r10
 8063f52: 4553         	cmp	r3, r10
 8063f54: d901         	bls	0x8063f5a <__sfvwrite_r+0x24e> @ imm = #0x2
 8063f56: 469a         	mov	r10, r3
 8063f58: 461a         	mov	r2, r3
 8063f5a: 0543         	lsls	r3, r0, #0x15
 8063f5c: d52c         	bpl	0x8063fb8 <__sfvwrite_r+0x2ac> @ imm = #0x58
 8063f5e: 4611         	mov	r1, r2
 8063f60: 4640         	mov	r0, r8
 8063f62: f7fd fe17    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x23d2
 8063f66: 2800         	cmp	r0, #0x0
 8063f68: d03b         	beq	0x8063fe2 <__sfvwrite_r+0x2d6> @ imm = #0x76
 8063f6a: 465a         	mov	r2, r11
 8063f6c: 6921         	ldr	r1, [r4, #0x10]
 8063f6e: 9001         	str	r0, [sp, #0x4]
 8063f70: f7fa fdb6    	bl	0x805eae0 <memcpy>      @ imm = #-0x5494
 8063f74: 89a2         	ldrh	r2, [r4, #0xc]
 8063f76: 9b01         	ldr	r3, [sp, #0x4]
 8063f78: f422 6290    	bic	r2, r2, #0x480
 8063f7c: f042 0280    	orr	r2, r2, #0x80
 8063f80: 81a2         	strh	r2, [r4, #0xc]
 8063f82: eb03 000b    	add.w	r0, r3, r11
 8063f86: 6123         	str	r3, [r4, #0x10]
 8063f88: ebaa 030b    	sub.w	r3, r10, r11
 8063f8c: 4632         	mov	r2, r6
 8063f8e: 46b3         	mov	r11, r6
 8063f90: f8c4 a014    	str.w	r10, [r4, #0x14]
 8063f94: 60a3         	str	r3, [r4, #0x8]
 8063f96: 6020         	str	r0, [r4]
 8063f98: e70c         	b	0x8063db4 <__sfvwrite_r+0xa8> @ imm = #-0x1e8
 8063f9a: 4629         	mov	r1, r5
 8063f9c: 465a         	mov	r2, r11
 8063f9e: f000 f8b9    	bl	0x8064114 <memmove>     @ imm = #0x172
 8063fa2: 6823         	ldr	r3, [r4]
 8063fa4: 4621         	mov	r1, r4
 8063fa6: 4640         	mov	r0, r8
 8063fa8: 445b         	add	r3, r11
 8063faa: 6023         	str	r3, [r4]
 8063fac: f7fd fa66    	bl	0x806147c <_fflush_r>   @ imm = #-0x2b34
 8063fb0: 2800         	cmp	r0, #0x0
 8063fb2: f43f af54    	beq.w	0x8063e5e <__sfvwrite_r+0x152> @ imm = #-0x158
 8063fb6: e724         	b	0x8063e02 <__sfvwrite_r+0xf6> @ imm = #-0x1b8
 8063fb8: 4640         	mov	r0, r8
 8063fba: f000 f93d    	bl	0x8064238 <_realloc_r>  @ imm = #0x27a
 8063fbe: 4603         	mov	r3, r0
 8063fc0: 2800         	cmp	r0, #0x0
 8063fc2: d1de         	bne	0x8063f82 <__sfvwrite_r+0x276> @ imm = #-0x44
 8063fc4: 6921         	ldr	r1, [r4, #0x10]
 8063fc6: 4640         	mov	r0, r8
 8063fc8: f7fd fbf2    	bl	0x80617b0 <_free_r>     @ imm = #-0x281c
 8063fcc: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063fd0: 220c         	movs	r2, #0xc
 8063fd2: f023 0380    	bic	r3, r3, #0x80
 8063fd6: f8c8 2000    	str.w	r2, [r8]
 8063fda: e714         	b	0x8063e06 <__sfvwrite_r+0xfa> @ imm = #-0x1d8
 8063fdc: 1c72         	adds	r2, r6, #0x1
 8063fde: 4691         	mov	r9, r2
 8063fe0: e724         	b	0x8063e2c <__sfvwrite_r+0x120> @ imm = #-0x1b8
 8063fe2: 220c         	movs	r2, #0xc
 8063fe4: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063fe8: f8c8 2000    	str.w	r2, [r8]
 8063fec: e70b         	b	0x8063e06 <__sfvwrite_r+0xfa> @ imm = #-0x1ea
 8063fee: f04f 30ff    	mov.w	r0, #0xffffffff
 8063ff2: e6bb         	b	0x8063d6c <__sfvwrite_r+0x60> @ imm = #-0x28a

08063ff4 <$d>:
 8063ff4: 00 fc ff 7f  	.word	0x7ffffc00

08063ff8 <_isatty_r>:
 8063ff8: b538         	push	{r3, r4, r5, lr}
 8063ffa: 2200         	movs	r2, #0x0
 8063ffc: 4d06         	ldr	r5, [pc, #0x18]         @ 0x8064018 <_isatty_r+0x20>
 8063ffe: 4604         	mov	r4, r0
 8064000: 4608         	mov	r0, r1
 8064002: 602a         	str	r2, [r5]
 8064004: f000 fe24    	bl	0x8064c50 <_isatty>     @ imm = #0xc48
 8064008: 1c43         	adds	r3, r0, #0x1
 806400a: d000         	beq	0x806400e <_isatty_r+0x16> @ imm = #0x0
 806400c: bd38         	pop	{r3, r4, r5, pc}
 806400e: 682b         	ldr	r3, [r5]
 8064010: 2b00         	cmp	r3, #0x0
 8064012: d0fb         	beq	0x806400c <_isatty_r+0x14> @ imm = #-0xa
 8064014: 6023         	str	r3, [r4]
 8064016: bd38         	pop	{r3, r4, r5, pc}

08064018 <$d>:
 8064018: 9c 2f 00 20  	.word	0x20002f9c

0806401c <_setlocale_r>:
 806401c: b142         	cbz	r2, 0x8064030 <_setlocale_r+0x14> @ imm = #0x10
 806401e: 490c         	ldr	r1, [pc, #0x30]         @ 0x8064050 <_setlocale_r+0x34>
 8064020: 4610         	mov	r0, r2
 8064022: b510         	push	{r4, lr}
 8064024: 4614         	mov	r4, r2
 8064026: f000 fafb    	bl	0x8064620 <strcmp>      @ imm = #0x5f6
 806402a: b918         	cbnz	r0, 0x8064034 <_setlocale_r+0x18> @ imm = #0x6
 806402c: 4809         	ldr	r0, [pc, #0x24]         @ 0x8064054 <_setlocale_r+0x38>
 806402e: bd10         	pop	{r4, pc}
 8064030: 4808         	ldr	r0, [pc, #0x20]         @ 0x8064054 <_setlocale_r+0x38>
 8064032: 4770         	bx	lr
 8064034: 4907         	ldr	r1, [pc, #0x1c]         @ 0x8064054 <_setlocale_r+0x38>
 8064036: 4620         	mov	r0, r4
 8064038: f000 faf2    	bl	0x8064620 <strcmp>      @ imm = #0x5e4
 806403c: 2800         	cmp	r0, #0x0
 806403e: d0f5         	beq	0x806402c <_setlocale_r+0x10> @ imm = #-0x16
 8064040: 4905         	ldr	r1, [pc, #0x14]         @ 0x8064058 <_setlocale_r+0x3c>
 8064042: 4620         	mov	r0, r4
 8064044: f000 faec    	bl	0x8064620 <strcmp>      @ imm = #0x5d8
 8064048: 2800         	cmp	r0, #0x0
 806404a: d0ef         	beq	0x806402c <_setlocale_r+0x10> @ imm = #-0x22
 806404c: 2000         	movs	r0, #0x0
 806404e: bd10         	pop	{r4, pc}

08064050 <$d>:
 8064050: 44 5c 06 08  	.word	0x08065c44
 8064054: 40 5c 06 08  	.word	0x08065c40
 8064058: 0c 5c 06 08  	.word	0x08065c0c

0806405c <__locale_mb_cur_max>:
 806405c: 4b01         	ldr	r3, [pc, #0x4]          @ 0x8064064 <__locale_mb_cur_max+0x8>
 806405e: f893 0128    	ldrb.w	r0, [r3, #0x128]
 8064062: 4770         	bx	lr

08064064 <$d>:
 8064064: d0 2b 00 20  	.word	0x20002bd0

08064068 <setlocale>:
 8064068: b141         	cbz	r1, 0x806407c <setlocale+0x14> @ imm = #0x10
 806406a: b510         	push	{r4, lr}
 806406c: 460c         	mov	r4, r1
 806406e: 490b         	ldr	r1, [pc, #0x2c]         @ 0x806409c <setlocale+0x34>
 8064070: 4620         	mov	r0, r4
 8064072: f000 fad5    	bl	0x8064620 <strcmp>      @ imm = #0x5aa
 8064076: b918         	cbnz	r0, 0x8064080 <setlocale+0x18> @ imm = #0x6
 8064078: 4809         	ldr	r0, [pc, #0x24]         @ 0x80640a0 <setlocale+0x38>
 806407a: bd10         	pop	{r4, pc}
 806407c: 4808         	ldr	r0, [pc, #0x20]         @ 0x80640a0 <setlocale+0x38>
 806407e: 4770         	bx	lr
 8064080: 4907         	ldr	r1, [pc, #0x1c]         @ 0x80640a0 <setlocale+0x38>
 8064082: 4620         	mov	r0, r4
 8064084: f000 facc    	bl	0x8064620 <strcmp>      @ imm = #0x598
 8064088: 2800         	cmp	r0, #0x0
 806408a: d0f5         	beq	0x8064078 <setlocale+0x10> @ imm = #-0x16
 806408c: 4905         	ldr	r1, [pc, #0x14]         @ 0x80640a4 <setlocale+0x3c>
 806408e: 4620         	mov	r0, r4
 8064090: f000 fac6    	bl	0x8064620 <strcmp>      @ imm = #0x58c
 8064094: 2800         	cmp	r0, #0x0
 8064096: d0ef         	beq	0x8064078 <setlocale+0x10> @ imm = #-0x22
 8064098: 2000         	movs	r0, #0x0
 806409a: bd10         	pop	{r4, pc}

0806409c <$d>:
 806409c: 44 5c 06 08  	.word	0x08065c44
 80640a0: 40 5c 06 08  	.word	0x08065c40
 80640a4: 0c 5c 06 08  	.word	0x08065c0c

080640a8 <_lseek_r>:
 80640a8: b538         	push	{r3, r4, r5, lr}
 80640aa: 460c         	mov	r4, r1
 80640ac: 4684         	mov	r12, r0
 80640ae: 4611         	mov	r1, r2
 80640b0: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x80640d0 <_lseek_r+0x28>
 80640b2: 461a         	mov	r2, r3
 80640b4: 2300         	movs	r3, #0x0
 80640b6: 4620         	mov	r0, r4
 80640b8: 4664         	mov	r4, r12
 80640ba: 602b         	str	r3, [r5]
 80640bc: f000 fdd8    	bl	0x8064c70 <_lseek>      @ imm = #0xbb0
 80640c0: 1c43         	adds	r3, r0, #0x1
 80640c2: d000         	beq	0x80640c6 <_lseek_r+0x1e> @ imm = #0x0
 80640c4: bd38         	pop	{r3, r4, r5, pc}
 80640c6: 682b         	ldr	r3, [r5]
 80640c8: 2b00         	cmp	r3, #0x0
 80640ca: d0fb         	beq	0x80640c4 <_lseek_r+0x1c> @ imm = #-0xa
 80640cc: 6023         	str	r3, [r4]
 80640ce: bd38         	pop	{r3, r4, r5, pc}

080640d0 <$d>:
 80640d0: 9c 2f 00 20  	.word	0x20002f9c

080640d4 <_mbtowc_r>:
 80640d4: b410         	push	{r4}
 80640d6: 4c03         	ldr	r4, [pc, #0xc]          @ 0x80640e4 <_mbtowc_r+0x10>
 80640d8: f8d4 40e4    	ldr.w	r4, [r4, #0xe4]
 80640dc: 46a4         	mov	r12, r4
 80640de: bc10         	pop	{r4}
 80640e0: 4760         	bx	r12
 80640e2: bf00         	nop

080640e4 <$d>:
 80640e4: d0 2b 00 20  	.word	0x20002bd0

080640e8 <__ascii_mbtowc>:
 80640e8: b082         	sub	sp, #0x8
 80640ea: b149         	cbz	r1, 0x8064100 <__ascii_mbtowc+0x18> @ imm = #0x12
 80640ec: b15a         	cbz	r2, 0x8064106 <__ascii_mbtowc+0x1e> @ imm = #0x16
 80640ee: b16b         	cbz	r3, 0x806410c <__ascii_mbtowc+0x24> @ imm = #0x1a
 80640f0: 7813         	ldrb	r3, [r2]
 80640f2: 600b         	str	r3, [r1]
 80640f4: 7812         	ldrb	r2, [r2]
 80640f6: 1e10         	subs	r0, r2, #0x0
 80640f8: bf18         	it	ne
 80640fa: 2001         	movne	r0, #0x1
 80640fc: b002         	add	sp, #0x8
 80640fe: 4770         	bx	lr
 8064100: a901         	add	r1, sp, #0x4
 8064102: 2a00         	cmp	r2, #0x0
 8064104: d1f3         	bne	0x80640ee <__ascii_mbtowc+0x6> @ imm = #-0x1a
 8064106: 4610         	mov	r0, r2
 8064108: b002         	add	sp, #0x8
 806410a: 4770         	bx	lr
 806410c: f06f 0001    	mvn	r0, #0x1
 8064110: e7f4         	b	0x80640fc <__ascii_mbtowc+0x14> @ imm = #-0x18
 8064112: bf00         	nop

08064114 <memmove>:
 8064114: 4288         	cmp	r0, r1
 8064116: d90d         	bls	0x8064134 <memmove+0x20> @ imm = #0x1a
 8064118: 188b         	adds	r3, r1, r2
 806411a: 4283         	cmp	r3, r0
 806411c: d90a         	bls	0x8064134 <memmove+0x20> @ imm = #0x14
 806411e: eb00 0c02    	add.w	r12, r0, r2
 8064122: b1ba         	cbz	r2, 0x8064154 <memmove+0x40> @ imm = #0x2e
 8064124: 4662         	mov	r2, r12
 8064126: f813 cd01    	ldrb	r12, [r3, #-1]!
 806412a: 4299         	cmp	r1, r3
 806412c: f802 cd01    	strb	r12, [r2, #-1]!
 8064130: d1f9         	bne	0x8064126 <memmove+0x12> @ imm = #-0xe
 8064132: 4770         	bx	lr
 8064134: 2a0f         	cmp	r2, #0xf
 8064136: d80e         	bhi	0x8064156 <memmove+0x42> @ imm = #0x1c
 8064138: 4603         	mov	r3, r0
 806413a: f102 3cff    	add.w	r12, r2, #0xffffffff
 806413e: b14a         	cbz	r2, 0x8064154 <memmove+0x40> @ imm = #0x12
 8064140: f10c 0c01    	add.w	r12, r12, #0x1
 8064144: 3b01         	subs	r3, #0x1
 8064146: 448c         	add	r12, r1
 8064148: f811 2b01    	ldrb	r2, [r1], #1
 806414c: 4561         	cmp	r1, r12
 806414e: f803 2f01    	strb	r2, [r3, #1]!
 8064152: d1f9         	bne	0x8064148 <memmove+0x34> @ imm = #-0xe
 8064154: 4770         	bx	lr
 8064156: ea40 0301    	orr.w	r3, r0, r1
 806415a: 079b         	lsls	r3, r3, #0x1e
 806415c: d150         	bne	0x8064200 <memmove+0xec> @ imm = #0xa0
 806415e: f1a2 0310    	sub.w	r3, r2, #0x10
 8064162: f101 0c20    	add.w	r12, r1, #0x20
 8064166: b570         	push	{r4, r5, r6, lr}
 8064168: f023 050f    	bic	r5, r3, #0xf
 806416c: f101 0e10    	add.w	lr, r1, #0x10
 8064170: f100 0410    	add.w	r4, r0, #0x10
 8064174: 091b         	lsrs	r3, r3, #0x4
 8064176: 44ac         	add	r12, r5
 8064178: f85e 5c10    	ldr	r5, [lr, #-16]
 806417c: f10e 0e10    	add.w	lr, lr, #0x10
 8064180: 3410         	adds	r4, #0x10
 8064182: f844 5c20    	str	r5, [r4, #-32]
 8064186: f85e 5c1c    	ldr	r5, [lr, #-28]
 806418a: f844 5c1c    	str	r5, [r4, #-28]
 806418e: f85e 5c18    	ldr	r5, [lr, #-24]
 8064192: f844 5c18    	str	r5, [r4, #-24]
 8064196: f85e 5c14    	ldr	r5, [lr, #-20]
 806419a: 45e6         	cmp	lr, r12
 806419c: f844 5c14    	str	r5, [r4, #-20]
 80641a0: d1ea         	bne	0x8064178 <memmove+0x64> @ imm = #-0x2c
 80641a2: 3301         	adds	r3, #0x1
 80641a4: f012 0f0c    	tst.w	r2, #0xc
 80641a8: f002 0c0f    	and	r12, r2, #0xf
 80641ac: eb01 1103    	add.w	r1, r1, r3, lsl #4
 80641b0: eb00 1303    	add.w	r3, r0, r3, lsl #4
 80641b4: d028         	beq	0x8064208 <memmove+0xf4> @ imm = #0x50
 80641b6: f1ac 0c04    	sub.w	r12, r12, #0x4
 80641ba: 1f1c         	subs	r4, r3, #0x4
 80641bc: 468e         	mov	lr, r1
 80641be: f02c 0603    	bic	r6, r12, #0x3
 80641c2: ea4f 0c9c    	lsr.w	r12, r12, #0x2
 80641c6: 441e         	add	r6, r3
 80641c8: f85e 5b04    	ldr	r5, [lr], #4
 80641cc: f844 5f04    	str	r5, [r4, #4]!
 80641d0: 42b4         	cmp	r4, r6
 80641d2: d1f9         	bne	0x80641c8 <memmove+0xb4> @ imm = #-0xe
 80641d4: f10c 0c01    	add.w	r12, r12, #0x1
 80641d8: f002 0203    	and	r2, r2, #0x3
 80641dc: eb03 038c    	add.w	r3, r3, r12, lsl #2
 80641e0: eb01 018c    	add.w	r1, r1, r12, lsl #2
 80641e4: f102 3cff    	add.w	r12, r2, #0xffffffff
 80641e8: b14a         	cbz	r2, 0x80641fe <memmove+0xea> @ imm = #0x12
 80641ea: f10c 0c01    	add.w	r12, r12, #0x1
 80641ee: 3b01         	subs	r3, #0x1
 80641f0: 448c         	add	r12, r1
 80641f2: f811 2b01    	ldrb	r2, [r1], #1
 80641f6: 4561         	cmp	r1, r12
 80641f8: f803 2f01    	strb	r2, [r3, #1]!
 80641fc: d1f9         	bne	0x80641f2 <memmove+0xde> @ imm = #-0xe
 80641fe: bd70         	pop	{r4, r5, r6, pc}
 8064200: f102 3cff    	add.w	r12, r2, #0xffffffff
 8064204: 4603         	mov	r3, r0
 8064206: e79b         	b	0x8064140 <memmove+0x2c> @ imm = #-0xca
 8064208: 4662         	mov	r2, r12
 806420a: e7eb         	b	0x80641e4 <memmove+0xd0> @ imm = #-0x2a

0806420c <_read_r>:
 806420c: b538         	push	{r3, r4, r5, lr}
 806420e: 460c         	mov	r4, r1
 8064210: 4684         	mov	r12, r0
 8064212: 4611         	mov	r1, r2
 8064214: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x8064234 <_read_r+0x28>
 8064216: 461a         	mov	r2, r3
 8064218: 2300         	movs	r3, #0x0
 806421a: 4620         	mov	r0, r4
 806421c: 4664         	mov	r4, r12
 806421e: 602b         	str	r3, [r5]
 8064220: f000 fd2e    	bl	0x8064c80 <_read>       @ imm = #0xa5c
 8064224: 1c43         	adds	r3, r0, #0x1
 8064226: d000         	beq	0x806422a <_read_r+0x1e> @ imm = #0x0
 8064228: bd38         	pop	{r3, r4, r5, pc}
 806422a: 682b         	ldr	r3, [r5]
 806422c: 2b00         	cmp	r3, #0x0
 806422e: d0fb         	beq	0x8064228 <_read_r+0x1c> @ imm = #-0xa
 8064230: 6023         	str	r3, [r4]
 8064232: bd38         	pop	{r3, r4, r5, pc}

08064234 <$d>:
 8064234: 9c 2f 00 20  	.word	0x20002f9c

08064238 <_realloc_r>:
 8064238: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 806423c: 4617         	mov	r7, r2
 806423e: 2900         	cmp	r1, #0x0
 8064240: f000 8096    	beq.w	0x8064370 <_realloc_r+0x138> @ imm = #0x12c
 8064244: 460c         	mov	r4, r1
 8064246: f107 060b    	add.w	r6, r7, #0xb
 806424a: 4680         	mov	r8, r0
 806424c: f7fd ff96    	bl	0x806217c <__malloc_lock> @ imm = #-0x20d4
 8064250: f854 1c04    	ldr	r1, [r4, #-4]
 8064254: 2e16         	cmp	r6, #0x16
 8064256: f1a4 0908    	sub.w	r9, r4, #0x8
 806425a: f021 0503    	bic	r5, r1, #0x3
 806425e: d85c         	bhi	0x806431a <_realloc_r+0xe2> @ imm = #0xb8
 8064260: 2210         	movs	r2, #0x10
 8064262: 2300         	movs	r3, #0x0
 8064264: 4616         	mov	r6, r2
 8064266: 42be         	cmp	r6, r7
 8064268: f0c0 809d    	blo.w	0x80643a6 <_realloc_r+0x16e> @ imm = #0x13a
 806426c: 2b00         	cmp	r3, #0x0
 806426e: f040 809a    	bne.w	0x80643a6 <_realloc_r+0x16e> @ imm = #0x134
 8064272: 4295         	cmp	r5, r2
 8064274: da5b         	bge	0x806432e <_realloc_r+0xf6> @ imm = #0xb6
 8064276: 4bbd         	ldr	r3, [pc, #0x2f4]        @ 0x806456c <_realloc_r+0x334>
 8064278: eb09 0005    	add.w	r0, r9, r5
 806427c: f8d3 c008    	ldr.w	r12, [r3, #0x8]
 8064280: 4584         	cmp	r12, r0
 8064282: f000 8097    	beq.w	0x80643b4 <_realloc_r+0x17c> @ imm = #0x12e
 8064286: f8d0 c004    	ldr.w	r12, [r0, #0x4]
 806428a: f02c 0301    	bic	r3, r12, #0x1
 806428e: 4403         	add	r3, r0
 8064290: 685b         	ldr	r3, [r3, #0x4]
 8064292: 07db         	lsls	r3, r3, #0x1f
 8064294: d461         	bmi	0x806435a <_realloc_r+0x122> @ imm = #0xc2
 8064296: f02c 0c03    	bic	r12, r12, #0x3
 806429a: eb05 030c    	add.w	r3, r5, r12
 806429e: 4293         	cmp	r3, r2
 80642a0: da40         	bge	0x8064324 <_realloc_r+0xec> @ imm = #0x80
 80642a2: 07cb         	lsls	r3, r1, #0x1f
 80642a4: d410         	bmi	0x80642c8 <_realloc_r+0x90> @ imm = #0x20
 80642a6: f854 3c08    	ldr	r3, [r4, #-8]
 80642aa: eba9 0a03    	sub.w	r10, r9, r3
 80642ae: f8da 3004    	ldr.w	r3, [r10, #0x4]
 80642b2: f023 0103    	bic	r1, r3, #0x3
 80642b6: 448c         	add	r12, r1
 80642b8: 44ac         	add	r12, r5
 80642ba: 4594         	cmp	r12, r2
 80642bc: f280 80fe    	bge.w	0x80644bc <_realloc_r+0x284> @ imm = #0x1fc
 80642c0: 186b         	adds	r3, r5, r1
 80642c2: 4293         	cmp	r3, r2
 80642c4: f280 80d5    	bge.w	0x8064472 <_realloc_r+0x23a> @ imm = #0x1aa
 80642c8: 4639         	mov	r1, r7
 80642ca: 4640         	mov	r0, r8
 80642cc: f7fd fc62    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x273c
 80642d0: 4607         	mov	r7, r0
 80642d2: b1e0         	cbz	r0, 0x806430e <_realloc_r+0xd6> @ imm = #0x38
 80642d4: f854 3c04    	ldr	r3, [r4, #-4]
 80642d8: f1a0 0208    	sub.w	r2, r0, #0x8
 80642dc: f023 0301    	bic	r3, r3, #0x1
 80642e0: 444b         	add	r3, r9
 80642e2: 4293         	cmp	r3, r2
 80642e4: f000 80b4    	beq.w	0x8064450 <_realloc_r+0x218> @ imm = #0x168
 80642e8: 1f2a         	subs	r2, r5, #0x4
 80642ea: 2a24         	cmp	r2, #0x24
 80642ec: f200 80e2    	bhi.w	0x80644b4 <_realloc_r+0x27c> @ imm = #0x1c4
 80642f0: 2a13         	cmp	r2, #0x13
 80642f2: f200 80b3    	bhi.w	0x806445c <_realloc_r+0x224> @ imm = #0x166
 80642f6: 4603         	mov	r3, r0
 80642f8: 4622         	mov	r2, r4
 80642fa: 6811         	ldr	r1, [r2]
 80642fc: 6019         	str	r1, [r3]
 80642fe: 6851         	ldr	r1, [r2, #0x4]
 8064300: 6059         	str	r1, [r3, #0x4]
 8064302: 6892         	ldr	r2, [r2, #0x8]
 8064304: 609a         	str	r2, [r3, #0x8]
 8064306: 4621         	mov	r1, r4
 8064308: 4640         	mov	r0, r8
 806430a: f7fd fa51    	bl	0x80617b0 <_free_r>     @ imm = #-0x2b5e
 806430e: 4640         	mov	r0, r8
 8064310: f7fd ff36    	bl	0x8062180 <__malloc_unlock> @ imm = #-0x2194
 8064314: 4638         	mov	r0, r7
 8064316: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806431a: f026 0607    	bic	r6, r6, #0x7
 806431e: 4632         	mov	r2, r6
 8064320: 0ff3         	lsrs	r3, r6, #0x1f
 8064322: e7a0         	b	0x8064266 <_realloc_r+0x2e> @ imm = #-0xc0
 8064324: 461d         	mov	r5, r3
 8064326: e9d0 2302    	ldrd	r2, r3, [r0, #8]
 806432a: 60d3         	str	r3, [r2, #0xc]
 806432c: 609a         	str	r2, [r3, #0x8]
 806432e: 1bab         	subs	r3, r5, r6
 8064330: 2b0f         	cmp	r3, #0xf
 8064332: d822         	bhi	0x806437a <_realloc_r+0x142> @ imm = #0x44
 8064334: f8d9 3004    	ldr.w	r3, [r9, #0x4]
 8064338: f003 0301    	and	r3, r3, #0x1
 806433c: 432b         	orrs	r3, r5
 806433e: 444d         	add	r5, r9
 8064340: f8c9 3004    	str.w	r3, [r9, #0x4]
 8064344: 686b         	ldr	r3, [r5, #0x4]
 8064346: f043 0301    	orr	r3, r3, #0x1
 806434a: 606b         	str	r3, [r5, #0x4]
 806434c: 4640         	mov	r0, r8
 806434e: 4627         	mov	r7, r4
 8064350: f7fd ff16    	bl	0x8062180 <__malloc_unlock> @ imm = #-0x21d4
 8064354: 4638         	mov	r0, r7
 8064356: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806435a: 07c9         	lsls	r1, r1, #0x1f
 806435c: d4b4         	bmi	0x80642c8 <_realloc_r+0x90> @ imm = #-0x98
 806435e: f854 3c08    	ldr	r3, [r4, #-8]
 8064362: eba9 0a03    	sub.w	r10, r9, r3
 8064366: f8da 1004    	ldr.w	r1, [r10, #0x4]
 806436a: f021 0103    	bic	r1, r1, #0x3
 806436e: e7a7         	b	0x80642c0 <_realloc_r+0x88> @ imm = #-0xb2
 8064370: 4611         	mov	r1, r2
 8064372: e8bd 4ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8064376: f7fd bc0d    	b.w	0x8061b94 <_malloc_r>   @ imm = #-0x27e6
 806437a: f8d9 1004    	ldr.w	r1, [r9, #0x4]
 806437e: 444d         	add	r5, r9
 8064380: f043 0301    	orr	r3, r3, #0x1
 8064384: 4640         	mov	r0, r8
 8064386: f001 0101    	and	r1, r1, #0x1
 806438a: 4331         	orrs	r1, r6
 806438c: f8c9 1004    	str.w	r1, [r9, #0x4]
 8064390: eb09 0106    	add.w	r1, r9, r6
 8064394: 604b         	str	r3, [r1, #0x4]
 8064396: 3108         	adds	r1, #0x8
 8064398: 686b         	ldr	r3, [r5, #0x4]
 806439a: f043 0301    	orr	r3, r3, #0x1
 806439e: 606b         	str	r3, [r5, #0x4]
 80643a0: f7fd fa06    	bl	0x80617b0 <_free_r>     @ imm = #-0x2bf4
 80643a4: e7d2         	b	0x806434c <_realloc_r+0x114> @ imm = #-0x5c
 80643a6: 230c         	movs	r3, #0xc
 80643a8: 2700         	movs	r7, #0x0
 80643aa: f8c8 3000    	str.w	r3, [r8]
 80643ae: 4638         	mov	r0, r7
 80643b0: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80643b4: f8dc 0004    	ldr.w	r0, [r12, #0x4]
 80643b8: f020 0b03    	bic	r11, r0, #0x3
 80643bc: f106 0010    	add.w	r0, r6, #0x10
 80643c0: eb05 0c0b    	add.w	r12, r5, r11
 80643c4: 4584         	cmp	r12, r0
 80643c6: f280 80b3    	bge.w	0x8064530 <_realloc_r+0x2f8> @ imm = #0x166
 80643ca: 07c9         	lsls	r1, r1, #0x1f
 80643cc: f53f af7c    	bmi.w	0x80642c8 <_realloc_r+0x90> @ imm = #-0x108
 80643d0: f854 1c08    	ldr	r1, [r4, #-8]
 80643d4: eba9 0a01    	sub.w	r10, r9, r1
 80643d8: f8da 1004    	ldr.w	r1, [r10, #0x4]
 80643dc: f021 0103    	bic	r1, r1, #0x3
 80643e0: 448b         	add	r11, r1
 80643e2: 44ab         	add	r11, r5
 80643e4: 4558         	cmp	r0, r11
 80643e6: f73f af6b    	bgt.w	0x80642c0 <_realloc_r+0x88> @ imm = #-0x12a
 80643ea: 1f2a         	subs	r2, r5, #0x4
 80643ec: 4657         	mov	r7, r10
 80643ee: f8da 100c    	ldr.w	r1, [r10, #0xc]
 80643f2: f857 0f08    	ldr	r0, [r7, #8]!
 80643f6: 2a24         	cmp	r2, #0x24
 80643f8: 60c1         	str	r1, [r0, #0xc]
 80643fa: 6088         	str	r0, [r1, #0x8]
 80643fc: f200 80db    	bhi.w	0x80645b6 <_realloc_r+0x37e> @ imm = #0x1b6
 8064400: 2a13         	cmp	r2, #0x13
 8064402: f240 80d6    	bls.w	0x80645b2 <_realloc_r+0x37a> @ imm = #0x1ac
 8064406: 6821         	ldr	r1, [r4]
 8064408: 2a1b         	cmp	r2, #0x1b
 806440a: f8ca 1008    	str.w	r1, [r10, #0x8]
 806440e: 6861         	ldr	r1, [r4, #0x4]
 8064410: f8ca 100c    	str.w	r1, [r10, #0xc]
 8064414: f200 80e0    	bhi.w	0x80645d8 <_realloc_r+0x3a0> @ imm = #0x1c0
 8064418: 3408         	adds	r4, #0x8
 806441a: f10a 0210    	add.w	r2, r10, #0x10
 806441e: 6821         	ldr	r1, [r4]
 8064420: 6011         	str	r1, [r2]
 8064422: 6861         	ldr	r1, [r4, #0x4]
 8064424: 6051         	str	r1, [r2, #0x4]
 8064426: 68a1         	ldr	r1, [r4, #0x8]
 8064428: 6091         	str	r1, [r2, #0x8]
 806442a: ebab 0206    	sub.w	r2, r11, r6
 806442e: eb0a 0106    	add.w	r1, r10, r6
 8064432: 4640         	mov	r0, r8
 8064434: f042 0201    	orr	r2, r2, #0x1
 8064438: 6099         	str	r1, [r3, #0x8]
 806443a: 604a         	str	r2, [r1, #0x4]
 806443c: f8da 3004    	ldr.w	r3, [r10, #0x4]
 8064440: f003 0301    	and	r3, r3, #0x1
 8064444: 431e         	orrs	r6, r3
 8064446: f8ca 6004    	str.w	r6, [r10, #0x4]
 806444a: f7fd fe99    	bl	0x8062180 <__malloc_unlock> @ imm = #-0x22ce
 806444e: e781         	b	0x8064354 <_realloc_r+0x11c> @ imm = #-0xfe
 8064450: f850 3c04    	ldr	r3, [r0, #-4]
 8064454: f023 0303    	bic	r3, r3, #0x3
 8064458: 441d         	add	r5, r3
 806445a: e768         	b	0x806432e <_realloc_r+0xf6> @ imm = #-0x130
 806445c: 6823         	ldr	r3, [r4]
 806445e: 2a1b         	cmp	r2, #0x1b
 8064460: 6003         	str	r3, [r0]
 8064462: 6863         	ldr	r3, [r4, #0x4]
 8064464: 6043         	str	r3, [r0, #0x4]
 8064466: d84e         	bhi	0x8064506 <_realloc_r+0x2ce> @ imm = #0x9c
 8064468: f104 0208    	add.w	r2, r4, #0x8
 806446c: f100 0308    	add.w	r3, r0, #0x8
 8064470: e743         	b	0x80642fa <_realloc_r+0xc2> @ imm = #-0x17a
 8064472: 1f2a         	subs	r2, r5, #0x4
 8064474: 4657         	mov	r7, r10
 8064476: f8da 100c    	ldr.w	r1, [r10, #0xc]
 806447a: f857 0f08    	ldr	r0, [r7, #8]!
 806447e: 2a24         	cmp	r2, #0x24
 8064480: 60c1         	str	r1, [r0, #0xc]
 8064482: 6088         	str	r0, [r1, #0x8]
 8064484: d84c         	bhi	0x8064520 <_realloc_r+0x2e8> @ imm = #0x98
 8064486: 2a13         	cmp	r2, #0x13
 8064488: d948         	bls	0x806451c <_realloc_r+0x2e4> @ imm = #0x90
 806448a: 6821         	ldr	r1, [r4]
 806448c: 2a1b         	cmp	r2, #0x1b
 806448e: f8ca 1008    	str.w	r1, [r10, #0x8]
 8064492: 6861         	ldr	r1, [r4, #0x4]
 8064494: f8ca 100c    	str.w	r1, [r10, #0xc]
 8064498: d86a         	bhi	0x8064570 <_realloc_r+0x338> @ imm = #0xd4
 806449a: 3408         	adds	r4, #0x8
 806449c: f10a 0210    	add.w	r2, r10, #0x10
 80644a0: 461d         	mov	r5, r3
 80644a2: 6823         	ldr	r3, [r4]
 80644a4: 46d1         	mov	r9, r10
 80644a6: 6013         	str	r3, [r2]
 80644a8: 6863         	ldr	r3, [r4, #0x4]
 80644aa: 6053         	str	r3, [r2, #0x4]
 80644ac: 68a3         	ldr	r3, [r4, #0x8]
 80644ae: 463c         	mov	r4, r7
 80644b0: 6093         	str	r3, [r2, #0x8]
 80644b2: e73c         	b	0x806432e <_realloc_r+0xf6> @ imm = #-0x188
 80644b4: 4621         	mov	r1, r4
 80644b6: f7ff fe2d    	bl	0x8064114 <memmove>     @ imm = #-0x3a6
 80644ba: e724         	b	0x8064306 <_realloc_r+0xce> @ imm = #-0x1b8
 80644bc: e9d0 1302    	ldrd	r1, r3, [r0, #8]
 80644c0: 1f2a         	subs	r2, r5, #0x4
 80644c2: 4657         	mov	r7, r10
 80644c4: 60cb         	str	r3, [r1, #0xc]
 80644c6: 6099         	str	r1, [r3, #0x8]
 80644c8: 2a24         	cmp	r2, #0x24
 80644ca: f8da 300c    	ldr.w	r3, [r10, #0xc]
 80644ce: f857 1f08    	ldr	r1, [r7, #8]!
 80644d2: 60cb         	str	r3, [r1, #0xc]
 80644d4: 6099         	str	r1, [r3, #0x8]
 80644d6: d841         	bhi	0x806455c <_realloc_r+0x324> @ imm = #0x82
 80644d8: 2a13         	cmp	r2, #0x13
 80644da: d93d         	bls	0x8064558 <_realloc_r+0x320> @ imm = #0x7a
 80644dc: 6823         	ldr	r3, [r4]
 80644de: 2a1b         	cmp	r2, #0x1b
 80644e0: f8ca 3008    	str.w	r3, [r10, #0x8]
 80644e4: 6863         	ldr	r3, [r4, #0x4]
 80644e6: f8ca 300c    	str.w	r3, [r10, #0xc]
 80644ea: d856         	bhi	0x806459a <_realloc_r+0x362> @ imm = #0xac
 80644ec: 3408         	adds	r4, #0x8
 80644ee: f10a 0310    	add.w	r3, r10, #0x10
 80644f2: 6822         	ldr	r2, [r4]
 80644f4: 4665         	mov	r5, r12
 80644f6: 46d1         	mov	r9, r10
 80644f8: 601a         	str	r2, [r3]
 80644fa: 6862         	ldr	r2, [r4, #0x4]
 80644fc: 605a         	str	r2, [r3, #0x4]
 80644fe: 68a2         	ldr	r2, [r4, #0x8]
 8064500: 463c         	mov	r4, r7
 8064502: 609a         	str	r2, [r3, #0x8]
 8064504: e713         	b	0x806432e <_realloc_r+0xf6> @ imm = #-0x1da
 8064506: 68a3         	ldr	r3, [r4, #0x8]
 8064508: 2a24         	cmp	r2, #0x24
 806450a: 6083         	str	r3, [r0, #0x8]
 806450c: 68e3         	ldr	r3, [r4, #0xc]
 806450e: 60c3         	str	r3, [r0, #0xc]
 8064510: d03a         	beq	0x8064588 <_realloc_r+0x350> @ imm = #0x74
 8064512: f104 0210    	add.w	r2, r4, #0x10
 8064516: f100 0310    	add.w	r3, r0, #0x10
 806451a: e6ee         	b	0x80642fa <_realloc_r+0xc2> @ imm = #-0x224
 806451c: 463a         	mov	r2, r7
 806451e: e7bf         	b	0x80644a0 <_realloc_r+0x268> @ imm = #-0x82
 8064520: 4621         	mov	r1, r4
 8064522: 4638         	mov	r0, r7
 8064524: 461d         	mov	r5, r3
 8064526: 46d1         	mov	r9, r10
 8064528: 463c         	mov	r4, r7
 806452a: f7ff fdf3    	bl	0x8064114 <memmove>     @ imm = #-0x41a
 806452e: e6fe         	b	0x806432e <_realloc_r+0xf6> @ imm = #-0x204
 8064530: eb09 0206    	add.w	r2, r9, r6
 8064534: ebac 0c06    	sub.w	r12, r12, r6
 8064538: 4640         	mov	r0, r8
 806453a: 4627         	mov	r7, r4
 806453c: 609a         	str	r2, [r3, #0x8]
 806453e: f04c 0301    	orr	r3, r12, #0x1
 8064542: 6053         	str	r3, [r2, #0x4]
 8064544: f854 3c04    	ldr	r3, [r4, #-4]
 8064548: f003 0301    	and	r3, r3, #0x1
 806454c: 431e         	orrs	r6, r3
 806454e: f844 6c04    	str	r6, [r4, #-4]
 8064552: f7fd fe15    	bl	0x8062180 <__malloc_unlock> @ imm = #-0x23d6
 8064556: e6fd         	b	0x8064354 <_realloc_r+0x11c> @ imm = #-0x206
 8064558: 463b         	mov	r3, r7
 806455a: e7ca         	b	0x80644f2 <_realloc_r+0x2ba> @ imm = #-0x6c
 806455c: 4621         	mov	r1, r4
 806455e: 4638         	mov	r0, r7
 8064560: 4665         	mov	r5, r12
 8064562: 46d1         	mov	r9, r10
 8064564: 463c         	mov	r4, r7
 8064566: f7ff fdd5    	bl	0x8064114 <memmove>     @ imm = #-0x456
 806456a: e6e0         	b	0x806432e <_realloc_r+0xf6> @ imm = #-0x240

0806456c <$d>:
 806456c: c0 27 00 20  	.word	0x200027c0

08064570 <$t>:
 8064570: 68a1         	ldr	r1, [r4, #0x8]
 8064572: 2a24         	cmp	r2, #0x24
 8064574: f8ca 1010    	str.w	r1, [r10, #0x10]
 8064578: 68e1         	ldr	r1, [r4, #0xc]
 806457a: f8ca 1014    	str.w	r1, [r10, #0x14]
 806457e: d020         	beq	0x80645c2 <_realloc_r+0x38a> @ imm = #0x40
 8064580: 3410         	adds	r4, #0x10
 8064582: f10a 0218    	add.w	r2, r10, #0x18
 8064586: e78b         	b	0x80644a0 <_realloc_r+0x268> @ imm = #-0xea
 8064588: 6923         	ldr	r3, [r4, #0x10]
 806458a: f104 0218    	add.w	r2, r4, #0x18
 806458e: 6103         	str	r3, [r0, #0x10]
 8064590: 6963         	ldr	r3, [r4, #0x14]
 8064592: 6143         	str	r3, [r0, #0x14]
 8064594: f100 0318    	add.w	r3, r0, #0x18
 8064598: e6af         	b	0x80642fa <_realloc_r+0xc2> @ imm = #-0x2a2
 806459a: 68a3         	ldr	r3, [r4, #0x8]
 806459c: 2a24         	cmp	r2, #0x24
 806459e: f8ca 3010    	str.w	r3, [r10, #0x10]
 80645a2: 68e3         	ldr	r3, [r4, #0xc]
 80645a4: f8ca 3014    	str.w	r3, [r10, #0x14]
 80645a8: d022         	beq	0x80645f0 <_realloc_r+0x3b8> @ imm = #0x44
 80645aa: 3410         	adds	r4, #0x10
 80645ac: f10a 0318    	add.w	r3, r10, #0x18
 80645b0: e79f         	b	0x80644f2 <_realloc_r+0x2ba> @ imm = #-0xc2
 80645b2: 463a         	mov	r2, r7
 80645b4: e733         	b	0x806441e <_realloc_r+0x1e6> @ imm = #-0x19a
 80645b6: 4621         	mov	r1, r4
 80645b8: 4638         	mov	r0, r7
 80645ba: f7ff fdab    	bl	0x8064114 <memmove>     @ imm = #-0x4aa
 80645be: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x806461c <_realloc_r+0x3e4>
 80645c0: e733         	b	0x806442a <_realloc_r+0x1f2> @ imm = #-0x19a
 80645c2: 6922         	ldr	r2, [r4, #0x10]
 80645c4: 3418         	adds	r4, #0x18
 80645c6: f8ca 2018    	str.w	r2, [r10, #0x18]
 80645ca: f854 2c04    	ldr	r2, [r4, #-4]
 80645ce: f8ca 201c    	str.w	r2, [r10, #0x1c]
 80645d2: f10a 0220    	add.w	r2, r10, #0x20
 80645d6: e763         	b	0x80644a0 <_realloc_r+0x268> @ imm = #-0x13a
 80645d8: 68a1         	ldr	r1, [r4, #0x8]
 80645da: 2a24         	cmp	r2, #0x24
 80645dc: f8ca 1010    	str.w	r1, [r10, #0x10]
 80645e0: 68e1         	ldr	r1, [r4, #0xc]
 80645e2: f8ca 1014    	str.w	r1, [r10, #0x14]
 80645e6: d00e         	beq	0x8064606 <_realloc_r+0x3ce> @ imm = #0x1c
 80645e8: 3410         	adds	r4, #0x10
 80645ea: f10a 0218    	add.w	r2, r10, #0x18
 80645ee: e716         	b	0x806441e <_realloc_r+0x1e6> @ imm = #-0x1d4
 80645f0: 6923         	ldr	r3, [r4, #0x10]
 80645f2: 3418         	adds	r4, #0x18
 80645f4: f8ca 3018    	str.w	r3, [r10, #0x18]
 80645f8: f854 3c04    	ldr	r3, [r4, #-4]
 80645fc: f8ca 301c    	str.w	r3, [r10, #0x1c]
 8064600: f10a 0320    	add.w	r3, r10, #0x20
 8064604: e775         	b	0x80644f2 <_realloc_r+0x2ba> @ imm = #-0x116
 8064606: 6922         	ldr	r2, [r4, #0x10]
 8064608: 3418         	adds	r4, #0x18
 806460a: f8ca 2018    	str.w	r2, [r10, #0x18]
 806460e: f854 2c04    	ldr	r2, [r4, #-4]
 8064612: f8ca 201c    	str.w	r2, [r10, #0x1c]
 8064616: f10a 0220    	add.w	r2, r10, #0x20
 806461a: e700         	b	0x806441e <_realloc_r+0x1e6> @ imm = #-0x200

0806461c <$d>:
 806461c: c0 27 00 20  	.word	0x200027c0

08064620 <strcmp>:
 8064620: ea80 0c01    	eor.w	r12, r0, r1
 8064624: f01c 0f03    	tst.w	r12, #0x3
 8064628: d137         	bne	0x806469a <strcmp+0x7a> @ imm = #0x6e
 806462a: f010 0c03    	ands	r12, r0, #0x3
 806462e: f020 0003    	bic	r0, r0, #0x3
 8064632: f021 0103    	bic	r1, r1, #0x3
 8064636: f850 2b04    	ldr	r2, [r0], #4
 806463a: bf08         	it	eq
 806463c: f851 3b04    	ldreq	r3, [r1], #4
 8064640: d00e         	beq	0x8064660 <strcmp+0x40> @ imm = #0x1c
 8064642: f08c 0c03    	eor	r12, r12, #0x3
 8064646: f06f 437f    	mvn	r3, #0xff000000
 806464a: ea4f 0ccc    	lsl.w	r12, r12, #0x3
 806464e: fa23 fc0c    	lsr.w	r12, r3, r12
 8064652: f851 3b04    	ldr	r3, [r1], #4
 8064656: ea42 020c    	orr.w	r2, r2, r12
 806465a: ea43 030c    	orr.w	r3, r3, r12
 806465e: bf00         	nop
 8064660: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8064664: 429a         	cmp	r2, r3
 8064666: bf01         	itttt	eq
 8064668: ea2c 0c02    	biceq.w	r12, r12, r2
 806466c: f01c 3f80    	tsteq.w	r12, #0x80808080
 8064670: f850 2b04    	ldreq	r2, [r0], #4
 8064674: f851 3b04    	ldreq	r3, [r1], #4
 8064678: d0f2         	beq	0x8064660 <strcmp+0x40> @ imm = #-0x1c
 806467a: ea4f 6002    	lsl.w	r0, r2, #0x18
 806467e: ea4f 2212    	lsr.w	r2, r2, #0x8
 8064682: 2801         	cmp	r0, #0x1
 8064684: bf28         	it	hs
 8064686: ebb0 6f03    	cmphs.w	r0, r3, lsl #24
 806468a: bf08         	it	eq
 806468c: 0a1b         	lsreq	r3, r3, #0x8
 806468e: d0f4         	beq	0x806467a <strcmp+0x5a> @ imm = #-0x18
 8064690: f003 03ff    	and	r3, r3, #0xff
 8064694: 0e00         	lsrs	r0, r0, #0x18
 8064696: 1ac0         	subs	r0, r0, r3
 8064698: 4770         	bx	lr
 806469a: f010 0f03    	tst.w	r0, #0x3
 806469e: d00a         	beq	0x80646b6 <strcmp+0x96> @ imm = #0x14
 80646a0: f810 2b01    	ldrb	r2, [r0], #1
 80646a4: f811 3b01    	ldrb	r3, [r1], #1
 80646a8: 2a01         	cmp	r2, #0x1
 80646aa: bf28         	it	hs
 80646ac: 429a         	cmphs	r2, r3
 80646ae: d0f4         	beq	0x806469a <strcmp+0x7a> @ imm = #-0x18
 80646b0: eba2 0003    	sub.w	r0, r2, r3
 80646b4: 4770         	bx	lr
 80646b6: f84d 5d04    	str	r5, [sp, #-4]!
 80646ba: f850 2b04    	ldr	r2, [r0], #4
 80646be: f001 0503    	and	r5, r1, #0x3
 80646c2: f021 0103    	bic	r1, r1, #0x3
 80646c6: f851 3b04    	ldr	r3, [r1], #4
 80646ca: 2d02         	cmp	r5, #0x2
 80646cc: d026         	beq	0x806471c <strcmp+0xfc> @ imm = #0x4c
 80646ce: d84d         	bhi	0x806476c <strcmp+0x14c> @ imm = #0x9a
 80646d0: f022 457f    	bic	r5, r2, #0xff000000
 80646d4: ebb5 2f13    	cmp.w	r5, r3, lsr #8
 80646d8: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 80646dc: ea2c 0c02    	bic.w	r12, r12, r2
 80646e0: d10d         	bne	0x80646fe <strcmp+0xde> @ imm = #0x1a
 80646e2: f01c 3c80    	ands	r12, r12, #0x80808080
 80646e6: bf08         	it	eq
 80646e8: f851 3b04    	ldreq	r3, [r1], #4
 80646ec: d10a         	bne	0x8064704 <strcmp+0xe4> @ imm = #0x14
 80646ee: ea85 0502    	eor.w	r5, r5, r2
 80646f2: ebb5 6f03    	cmp.w	r5, r3, lsl #24
 80646f6: d10c         	bne	0x8064712 <strcmp+0xf2> @ imm = #0x18
 80646f8: f850 2b04    	ldr	r2, [r0], #4
 80646fc: e7e8         	b	0x80646d0 <strcmp+0xb0> @ imm = #-0x30
 80646fe: ea4f 2313    	lsr.w	r3, r3, #0x8
 8064702: e05b         	b	0x80647bc <strcmp+0x19c> @ imm = #0xb6
 8064704: f03c 4c7f    	bics	r12, r12, #0xff000000
 8064708: d154         	bne	0x80647b4 <strcmp+0x194> @ imm = #0xa8
 806470a: 780b         	ldrb	r3, [r1]
 806470c: ea4f 6512    	lsr.w	r5, r2, #0x18
 8064710: e054         	b	0x80647bc <strcmp+0x19c> @ imm = #0xa8
 8064712: ea4f 6512    	lsr.w	r5, r2, #0x18
 8064716: f003 03ff    	and	r3, r3, #0xff
 806471a: e04f         	b	0x80647bc <strcmp+0x19c> @ imm = #0x9e
 806471c: ea4f 4502    	lsl.w	r5, r2, #0x10
 8064720: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8064724: ea4f 4515    	lsr.w	r5, r5, #0x10
 8064728: ea2c 0c02    	bic.w	r12, r12, r2
 806472c: ebb5 4f13    	cmp.w	r5, r3, lsr #16
 8064730: d118         	bne	0x8064764 <strcmp+0x144> @ imm = #0x30
 8064732: f01c 3c80    	ands	r12, r12, #0x80808080
 8064736: bf08         	it	eq
 8064738: f851 3b04    	ldreq	r3, [r1], #4
 806473c: d107         	bne	0x806474e <strcmp+0x12e> @ imm = #0xe
 806473e: ea85 0502    	eor.w	r5, r5, r2
 8064742: ebb5 4f03    	cmp.w	r5, r3, lsl #16
 8064746: d109         	bne	0x806475c <strcmp+0x13c> @ imm = #0x12
 8064748: f850 2b04    	ldr	r2, [r0], #4
 806474c: e7e6         	b	0x806471c <strcmp+0xfc> @ imm = #-0x34
 806474e: ea5f 4c0c    	lsls.w	r12, r12, #0x10
 8064752: d12f         	bne	0x80647b4 <strcmp+0x194> @ imm = #0x5e
 8064754: 880b         	ldrh	r3, [r1]
 8064756: ea4f 4512    	lsr.w	r5, r2, #0x10
 806475a: e02f         	b	0x80647bc <strcmp+0x19c> @ imm = #0x5e
 806475c: ea4f 4303    	lsl.w	r3, r3, #0x10
 8064760: ea4f 4512    	lsr.w	r5, r2, #0x10
 8064764: ea4f 4313    	lsr.w	r3, r3, #0x10
 8064768: e028         	b	0x80647bc <strcmp+0x19c> @ imm = #0x50
 806476a: bf00         	nop
 806476c: f002 05ff    	and	r5, r2, #0xff
 8064770: ebb5 6f13    	cmp.w	r5, r3, lsr #24
 8064774: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8064778: ea2c 0c02    	bic.w	r12, r12, r2
 806477c: d10d         	bne	0x806479a <strcmp+0x17a> @ imm = #0x1a
 806477e: f01c 3c80    	ands	r12, r12, #0x80808080
 8064782: bf08         	it	eq
 8064784: f851 3b04    	ldreq	r3, [r1], #4
 8064788: d10a         	bne	0x80647a0 <strcmp+0x180> @ imm = #0x14
 806478a: ea85 0502    	eor.w	r5, r5, r2
 806478e: ebb5 2f03    	cmp.w	r5, r3, lsl #8
 8064792: d10a         	bne	0x80647aa <strcmp+0x18a> @ imm = #0x14
 8064794: f850 2b04    	ldr	r2, [r0], #4
 8064798: e7e8         	b	0x806476c <strcmp+0x14c> @ imm = #-0x30
 806479a: ea4f 6313    	lsr.w	r3, r3, #0x18
 806479e: e00d         	b	0x80647bc <strcmp+0x19c> @ imm = #0x1a
 80647a0: f012 0fff    	tst.w	r2, #0xff
 80647a4: d006         	beq	0x80647b4 <strcmp+0x194> @ imm = #0xc
 80647a6: f851 3b04    	ldr	r3, [r1], #4
 80647aa: ea4f 2512    	lsr.w	r5, r2, #0x8
 80647ae: f023 437f    	bic	r3, r3, #0xff000000
 80647b2: e003         	b	0x80647bc <strcmp+0x19c> @ imm = #0x6
 80647b4: f04f 0000    	mov.w	r0, #0x0
 80647b8: bc20         	pop	{r5}
 80647ba: 4770         	bx	lr
 80647bc: f005 02ff    	and	r2, r5, #0xff
 80647c0: f003 00ff    	and	r0, r3, #0xff
 80647c4: 2801         	cmp	r0, #0x1
 80647c6: bf28         	it	hs
 80647c8: 4290         	cmphs	r0, r2
 80647ca: bf04         	itt	eq
 80647cc: 0a2d         	lsreq	r5, r5, #0x8
 80647ce: 0a1b         	lsreq	r3, r3, #0x8
 80647d0: d0f4         	beq	0x80647bc <strcmp+0x19c> @ imm = #-0x18
 80647d2: eba2 0000    	sub.w	r0, r2, r0
 80647d6: bc20         	pop	{r5}
 80647d8: 4770         	bx	lr
 80647da: bf00         	nop

080647dc <__swbuf_r>:
 80647dc: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 80647de: 460d         	mov	r5, r1
 80647e0: 4606         	mov	r6, r0
 80647e2: 4614         	mov	r4, r2
 80647e4: b110         	cbz	r0, 0x80647ec <__swbuf_r+0x10> @ imm = #0x4
 80647e6: 6b83         	ldr	r3, [r0, #0x38]
 80647e8: 2b00         	cmp	r3, #0x0
 80647ea: d043         	beq	0x8064874 <__swbuf_r+0x98> @ imm = #0x86
 80647ec: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
 80647f0: 69a3         	ldr	r3, [r4, #0x18]
 80647f2: 0717         	lsls	r7, r2, #0x1c
 80647f4: b290         	uxth	r0, r2
 80647f6: 60a3         	str	r3, [r4, #0x8]
 80647f8: d51b         	bpl	0x8064832 <__swbuf_r+0x56> @ imm = #0x36
 80647fa: 6923         	ldr	r3, [r4, #0x10]
 80647fc: b1cb         	cbz	r3, 0x8064832 <__swbuf_r+0x56> @ imm = #0x32
 80647fe: b2ed         	uxtb	r5, r5
 8064800: 0481         	lsls	r1, r0, #0x12
 8064802: 462f         	mov	r7, r5
 8064804: d522         	bpl	0x806484c <__swbuf_r+0x70> @ imm = #0x44
 8064806: 6822         	ldr	r2, [r4]
 8064808: 6961         	ldr	r1, [r4, #0x14]
 806480a: 1ad3         	subs	r3, r2, r3
 806480c: 4299         	cmp	r1, r3
 806480e: dd29         	ble	0x8064864 <__swbuf_r+0x88> @ imm = #0x52
 8064810: 3301         	adds	r3, #0x1
 8064812: 68a1         	ldr	r1, [r4, #0x8]
 8064814: 3901         	subs	r1, #0x1
 8064816: 60a1         	str	r1, [r4, #0x8]
 8064818: 1c51         	adds	r1, r2, #0x1
 806481a: 6021         	str	r1, [r4]
 806481c: 7015         	strb	r5, [r2]
 806481e: 6962         	ldr	r2, [r4, #0x14]
 8064820: 429a         	cmp	r2, r3
 8064822: d02a         	beq	0x806487a <__swbuf_r+0x9e> @ imm = #0x54
 8064824: 2d0a         	cmp	r5, #0xa
 8064826: d102         	bne	0x806482e <__swbuf_r+0x52> @ imm = #0x4
 8064828: 89a3         	ldrh	r3, [r4, #0xc]
 806482a: 07db         	lsls	r3, r3, #0x1f
 806482c: d425         	bmi	0x806487a <__swbuf_r+0x9e> @ imm = #0x4a
 806482e: 4638         	mov	r0, r7
 8064830: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064832: 4621         	mov	r1, r4
 8064834: 4630         	mov	r0, r6
 8064836: f7fb fd05    	bl	0x8060244 <__swsetup_r> @ imm = #-0x45f6
 806483a: bb20         	cbnz	r0, 0x8064886 <__swbuf_r+0xaa> @ imm = #0x48
 806483c: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
 8064840: b2ed         	uxtb	r5, r5
 8064842: 6923         	ldr	r3, [r4, #0x10]
 8064844: b290         	uxth	r0, r2
 8064846: 462f         	mov	r7, r5
 8064848: 0481         	lsls	r1, r0, #0x12
 806484a: d4dc         	bmi	0x8064806 <__swbuf_r+0x2a> @ imm = #-0x48
 806484c: f442 5200    	orr	r2, r2, #0x2000
 8064850: 6961         	ldr	r1, [r4, #0x14]
 8064852: 81a2         	strh	r2, [r4, #0xc]
 8064854: 6e62         	ldr	r2, [r4, #0x64]
 8064856: f422 5200    	bic	r2, r2, #0x2000
 806485a: 6662         	str	r2, [r4, #0x64]
 806485c: 6822         	ldr	r2, [r4]
 806485e: 1ad3         	subs	r3, r2, r3
 8064860: 4299         	cmp	r1, r3
 8064862: dcd5         	bgt	0x8064810 <__swbuf_r+0x34> @ imm = #-0x56
 8064864: 4621         	mov	r1, r4
 8064866: 4630         	mov	r0, r6
 8064868: f7fc fe08    	bl	0x806147c <_fflush_r>   @ imm = #-0x33f0
 806486c: b958         	cbnz	r0, 0x8064886 <__swbuf_r+0xaa> @ imm = #0x16
 806486e: 6822         	ldr	r2, [r4]
 8064870: 2301         	movs	r3, #0x1
 8064872: e7ce         	b	0x8064812 <__swbuf_r+0x36> @ imm = #-0x64
 8064874: f7fc ff2c    	bl	0x80616d0 <__sinit>     @ imm = #-0x31a8
 8064878: e7b8         	b	0x80647ec <__swbuf_r+0x10> @ imm = #-0x90
 806487a: 4621         	mov	r1, r4
 806487c: 4630         	mov	r0, r6
 806487e: f7fc fdfd    	bl	0x806147c <_fflush_r>   @ imm = #-0x3406
 8064882: 2800         	cmp	r0, #0x0
 8064884: d0d3         	beq	0x806482e <__swbuf_r+0x52> @ imm = #-0x5a
 8064886: f04f 37ff    	mov.w	r7, #0xffffffff
 806488a: e7d0         	b	0x806482e <__swbuf_r+0x52> @ imm = #-0x60

0806488c <__swbuf>:
 806488c: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064898 <__swbuf+0xc>
 806488e: 460a         	mov	r2, r1
 8064890: 4601         	mov	r1, r0
 8064892: 6818         	ldr	r0, [r3]
 8064894: f7ff bfa2    	b.w	0x80647dc <__swbuf_r>   @ imm = #-0xbc

08064898 <$d>:
 8064898: 90 23 00 20  	.word	0x20002390

0806489c <_wcrtomb_r>:
 806489c: b570         	push	{r4, r5, r6, lr}
 806489e: 4605         	mov	r5, r0
 80648a0: b084         	sub	sp, #0x10
 80648a2: 461c         	mov	r4, r3
 80648a4: b139         	cbz	r1, 0x80648b6 <_wcrtomb_r+0x1a> @ imm = #0xe
 80648a6: 4e0b         	ldr	r6, [pc, #0x2c]         @ 0x80648d4 <_wcrtomb_r+0x38>
 80648a8: f8d6 60e0    	ldr.w	r6, [r6, #0xe0]
 80648ac: 47b0         	blx	r6
 80648ae: 1c43         	adds	r3, r0, #0x1
 80648b0: d009         	beq	0x80648c6 <_wcrtomb_r+0x2a> @ imm = #0x12
 80648b2: b004         	add	sp, #0x10
 80648b4: bd70         	pop	{r4, r5, r6, pc}
 80648b6: 460a         	mov	r2, r1
 80648b8: 4906         	ldr	r1, [pc, #0x18]         @ 0x80648d4 <_wcrtomb_r+0x38>
 80648ba: f8d1 60e0    	ldr.w	r6, [r1, #0xe0]
 80648be: a901         	add	r1, sp, #0x4
 80648c0: 47b0         	blx	r6
 80648c2: 1c43         	adds	r3, r0, #0x1
 80648c4: d1f5         	bne	0x80648b2 <_wcrtomb_r+0x16> @ imm = #-0x16
 80648c6: 2200         	movs	r2, #0x0
 80648c8: 238a         	movs	r3, #0x8a
 80648ca: 6022         	str	r2, [r4]
 80648cc: 602b         	str	r3, [r5]
 80648ce: b004         	add	sp, #0x10
 80648d0: bd70         	pop	{r4, r5, r6, pc}
 80648d2: bf00         	nop

080648d4 <$d>:
 80648d4: d0 2b 00 20  	.word	0x20002bd0

080648d8 <wcrtomb>:
 80648d8: b570         	push	{r4, r5, r6, lr}
 80648da: 4d11         	ldr	r5, [pc, #0x44]         @ 0x8064920 <wcrtomb+0x48>
 80648dc: 460b         	mov	r3, r1
 80648de: b084         	sub	sp, #0x10
 80648e0: 4601         	mov	r1, r0
 80648e2: 4614         	mov	r4, r2
 80648e4: 682d         	ldr	r5, [r5]
 80648e6: b150         	cbz	r0, 0x80648fe <wcrtomb+0x26> @ imm = #0x14
 80648e8: 480e         	ldr	r0, [pc, #0x38]         @ 0x8064924 <wcrtomb+0x4c>
 80648ea: 461a         	mov	r2, r3
 80648ec: 4623         	mov	r3, r4
 80648ee: f8d0 60e0    	ldr.w	r6, [r0, #0xe0]
 80648f2: 4628         	mov	r0, r5
 80648f4: 47b0         	blx	r6
 80648f6: 1c43         	adds	r3, r0, #0x1
 80648f8: d00b         	beq	0x8064912 <wcrtomb+0x3a> @ imm = #0x16
 80648fa: b004         	add	sp, #0x10
 80648fc: bd70         	pop	{r4, r5, r6, pc}
 80648fe: 4809         	ldr	r0, [pc, #0x24]         @ 0x8064924 <wcrtomb+0x4c>
 8064900: 4613         	mov	r3, r2
 8064902: 460a         	mov	r2, r1
 8064904: a901         	add	r1, sp, #0x4
 8064906: f8d0 60e0    	ldr.w	r6, [r0, #0xe0]
 806490a: 4628         	mov	r0, r5
 806490c: 47b0         	blx	r6
 806490e: 1c43         	adds	r3, r0, #0x1
 8064910: d1f3         	bne	0x80648fa <wcrtomb+0x22> @ imm = #-0x1a
 8064912: 2200         	movs	r2, #0x0
 8064914: 238a         	movs	r3, #0x8a
 8064916: 6022         	str	r2, [r4]
 8064918: 602b         	str	r3, [r5]
 806491a: b004         	add	sp, #0x10
 806491c: bd70         	pop	{r4, r5, r6, pc}
 806491e: bf00         	nop

08064920 <$d>:
 8064920: 90 23 00 20  	.word	0x20002390
 8064924: d0 2b 00 20  	.word	0x20002bd0

08064928 <_wctomb_r>:
 8064928: b410         	push	{r4}
 806492a: 4c03         	ldr	r4, [pc, #0xc]          @ 0x8064938 <_wctomb_r+0x10>
 806492c: f8d4 40e0    	ldr.w	r4, [r4, #0xe0]
 8064930: 46a4         	mov	r12, r4
 8064932: bc10         	pop	{r4}
 8064934: 4760         	bx	r12
 8064936: bf00         	nop

08064938 <$d>:
 8064938: d0 2b 00 20  	.word	0x20002bd0

0806493c <__ascii_wctomb>:
 806493c: 4603         	mov	r3, r0
 806493e: b149         	cbz	r1, 0x8064954 <__ascii_wctomb+0x18> @ imm = #0x12
 8064940: 2aff         	cmp	r2, #0xff
 8064942: d802         	bhi	0x806494a <__ascii_wctomb+0xe> @ imm = #0x4
 8064944: 2001         	movs	r0, #0x1
 8064946: 700a         	strb	r2, [r1]
 8064948: 4770         	bx	lr
 806494a: 228a         	movs	r2, #0x8a
 806494c: f04f 30ff    	mov.w	r0, #0xffffffff
 8064950: 601a         	str	r2, [r3]
 8064952: 4770         	bx	lr
 8064954: 4608         	mov	r0, r1
 8064956: 4770         	bx	lr

08064958 <abort>:
 8064958: 2006         	movs	r0, #0x6
 806495a: b508         	push	{r3, lr}
 806495c: f000 f8a0    	bl	0x8064aa0 <raise>       @ imm = #0x140
 8064960: 2001         	movs	r0, #0x1
 8064962: f000 f9ad    	bl	0x8064cc0 <_exit>       @ imm = #0x35a
 8064966: bf00         	nop

08064968 <_init_signal_r>:
 8064968: b538         	push	{r3, r4, r5, lr}
 806496a: f8d0 42dc    	ldr.w	r4, [r0, #0x2dc]
 806496e: b10c         	cbz	r4, 0x8064974 <_init_signal_r+0xc> @ imm = #0x2
 8064970: 2000         	movs	r0, #0x0
 8064972: bd38         	pop	{r3, r4, r5, pc}
 8064974: 4605         	mov	r5, r0
 8064976: 2180         	movs	r1, #0x80
 8064978: f7fd f90c    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x2de8
 806497c: 4602         	mov	r2, r0
 806497e: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8064982: b130         	cbz	r0, 0x8064992 <_init_signal_r+0x2a> @ imm = #0xc
 8064984: 1f03         	subs	r3, r0, #0x4
 8064986: 327c         	adds	r2, #0x7c
 8064988: f843 4f04    	str	r4, [r3, #4]!
 806498c: 4293         	cmp	r3, r2
 806498e: d1fb         	bne	0x8064988 <_init_signal_r+0x20> @ imm = #-0xa
 8064990: e7ee         	b	0x8064970 <_init_signal_r+0x8> @ imm = #-0x24
 8064992: f04f 30ff    	mov.w	r0, #0xffffffff
 8064996: bd38         	pop	{r3, r4, r5, pc}

08064998 <_signal_r>:
 8064998: 291f         	cmp	r1, #0x1f
 806499a: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 806499c: 4605         	mov	r5, r0
 806499e: d809         	bhi	0x80649b4 <_signal_r+0x1c> @ imm = #0x12
 80649a0: f8d0 62dc    	ldr.w	r6, [r0, #0x2dc]
 80649a4: 460c         	mov	r4, r1
 80649a6: 4617         	mov	r7, r2
 80649a8: b14e         	cbz	r6, 0x80649be <_signal_r+0x26> @ imm = #0x12
 80649aa: f856 0024    	ldr.w	r0, [r6, r4, lsl #2]
 80649ae: f846 7024    	str.w	r7, [r6, r4, lsl #2]
 80649b2: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 80649b4: 2316         	movs	r3, #0x16
 80649b6: f04f 30ff    	mov.w	r0, #0xffffffff
 80649ba: 602b         	str	r3, [r5]
 80649bc: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 80649be: 2180         	movs	r1, #0x80
 80649c0: f7fd f8e8    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x2e30
 80649c4: 4606         	mov	r6, r0
 80649c6: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 80649ca: b140         	cbz	r0, 0x80649de <_signal_r+0x46> @ imm = #0x10
 80649cc: 1f03         	subs	r3, r0, #0x4
 80649ce: f100 057c    	add.w	r5, r0, #0x7c
 80649d2: 2100         	movs	r1, #0x0
 80649d4: f843 1f04    	str	r1, [r3, #4]!
 80649d8: 429d         	cmp	r5, r3
 80649da: d1fb         	bne	0x80649d4 <_signal_r+0x3c> @ imm = #-0xa
 80649dc: e7e5         	b	0x80649aa <_signal_r+0x12> @ imm = #-0x36
 80649de: f04f 30ff    	mov.w	r0, #0xffffffff
 80649e2: bdf8         	pop	{r3, r4, r5, r6, r7, pc}

080649e4 <_raise_r>:
 80649e4: 291f         	cmp	r1, #0x1f
 80649e6: b538         	push	{r3, r4, r5, lr}
 80649e8: 4605         	mov	r5, r0
 80649ea: d821         	bhi	0x8064a30 <_raise_r+0x4c> @ imm = #0x42
 80649ec: f8d0 22dc    	ldr.w	r2, [r0, #0x2dc]
 80649f0: 460c         	mov	r4, r1
 80649f2: b16a         	cbz	r2, 0x8064a10 <_raise_r+0x2c> @ imm = #0x1a
 80649f4: f852 3021    	ldr.w	r3, [r2, r1, lsl #2]
 80649f8: b153         	cbz	r3, 0x8064a10 <_raise_r+0x2c> @ imm = #0x14
 80649fa: 2b01         	cmp	r3, #0x1
 80649fc: d016         	beq	0x8064a2c <_raise_r+0x48> @ imm = #0x2c
 80649fe: 1c59         	adds	r1, r3, #0x1
 8064a00: d010         	beq	0x8064a24 <_raise_r+0x40> @ imm = #0x20
 8064a02: 2500         	movs	r5, #0x0
 8064a04: 4620         	mov	r0, r4
 8064a06: f842 5024    	str.w	r5, [r2, r4, lsl #2]
 8064a0a: 4798         	blx	r3
 8064a0c: 4628         	mov	r0, r5
 8064a0e: bd38         	pop	{r3, r4, r5, pc}
 8064a10: 4628         	mov	r0, r5
 8064a12: f000 f903    	bl	0x8064c1c <_getpid_r>   @ imm = #0x206
 8064a16: 4622         	mov	r2, r4
 8064a18: 4601         	mov	r1, r0
 8064a1a: 4628         	mov	r0, r5
 8064a1c: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8064a20: f000 b8e6    	b.w	0x8064bf0 <_kill_r>     @ imm = #0x1cc
 8064a24: 2316         	movs	r3, #0x16
 8064a26: 2001         	movs	r0, #0x1
 8064a28: 602b         	str	r3, [r5]
 8064a2a: bd38         	pop	{r3, r4, r5, pc}
 8064a2c: 2000         	movs	r0, #0x0
 8064a2e: bd38         	pop	{r3, r4, r5, pc}
 8064a30: 2316         	movs	r3, #0x16
 8064a32: f04f 30ff    	mov.w	r0, #0xffffffff
 8064a36: 602b         	str	r3, [r5]
 8064a38: bd38         	pop	{r3, r4, r5, pc}
 8064a3a: bf00         	nop

08064a3c <__sigtramp_r>:
 8064a3c: 291f         	cmp	r1, #0x1f
 8064a3e: d82c         	bhi	0x8064a9a <__sigtramp_r+0x5e> @ imm = #0x58
 8064a40: f8d0 22dc    	ldr.w	r2, [r0, #0x2dc]
 8064a44: b538         	push	{r3, r4, r5, lr}
 8064a46: 460c         	mov	r4, r1
 8064a48: 4605         	mov	r5, r0
 8064a4a: b182         	cbz	r2, 0x8064a6e <__sigtramp_r+0x32> @ imm = #0x20
 8064a4c: f852 3024    	ldr.w	r3, [r2, r4, lsl #2]
 8064a50: eb02 0284    	add.w	r2, r2, r4, lsl #2
 8064a54: b14b         	cbz	r3, 0x8064a6a <__sigtramp_r+0x2e> @ imm = #0x12
 8064a56: 1c59         	adds	r1, r3, #0x1
 8064a58: d01a         	beq	0x8064a90 <__sigtramp_r+0x54> @ imm = #0x34
 8064a5a: 2b01         	cmp	r3, #0x1
 8064a5c: d016         	beq	0x8064a8c <__sigtramp_r+0x50> @ imm = #0x2c
 8064a5e: 2500         	movs	r5, #0x0
 8064a60: 4620         	mov	r0, r4
 8064a62: 6015         	str	r5, [r2]
 8064a64: 4798         	blx	r3
 8064a66: 4628         	mov	r0, r5
 8064a68: bd38         	pop	{r3, r4, r5, pc}
 8064a6a: 2001         	movs	r0, #0x1
 8064a6c: bd38         	pop	{r3, r4, r5, pc}
 8064a6e: 2180         	movs	r1, #0x80
 8064a70: f7fd f890    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x2ee0
 8064a74: 4602         	mov	r2, r0
 8064a76: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8064a7a: b158         	cbz	r0, 0x8064a94 <__sigtramp_r+0x58> @ imm = #0x16
 8064a7c: 1f03         	subs	r3, r0, #0x4
 8064a7e: 2100         	movs	r1, #0x0
 8064a80: 307c         	adds	r0, #0x7c
 8064a82: f843 1f04    	str	r1, [r3, #4]!
 8064a86: 4298         	cmp	r0, r3
 8064a88: d1fb         	bne	0x8064a82 <__sigtramp_r+0x46> @ imm = #-0xa
 8064a8a: e7df         	b	0x8064a4c <__sigtramp_r+0x10> @ imm = #-0x42
 8064a8c: 2003         	movs	r0, #0x3
 8064a8e: bd38         	pop	{r3, r4, r5, pc}
 8064a90: 2002         	movs	r0, #0x2
 8064a92: bd38         	pop	{r3, r4, r5, pc}
 8064a94: f04f 30ff    	mov.w	r0, #0xffffffff
 8064a98: bd38         	pop	{r3, r4, r5, pc}
 8064a9a: f04f 30ff    	mov.w	r0, #0xffffffff
 8064a9e: 4770         	bx	lr

08064aa0 <raise>:
 8064aa0: b538         	push	{r3, r4, r5, lr}
 8064aa2: 281f         	cmp	r0, #0x1f
 8064aa4: 4b14         	ldr	r3, [pc, #0x50]         @ 0x8064af8 <raise+0x58>
 8064aa6: 681d         	ldr	r5, [r3]
 8064aa8: d820         	bhi	0x8064aec <raise+0x4c>  @ imm = #0x40
 8064aaa: f8d5 22dc    	ldr.w	r2, [r5, #0x2dc]
 8064aae: 4604         	mov	r4, r0
 8064ab0: b162         	cbz	r2, 0x8064acc <raise+0x2c> @ imm = #0x18
 8064ab2: f852 3020    	ldr.w	r3, [r2, r0, lsl #2]
 8064ab6: b14b         	cbz	r3, 0x8064acc <raise+0x2c> @ imm = #0x12
 8064ab8: 2b01         	cmp	r3, #0x1
 8064aba: d015         	beq	0x8064ae8 <raise+0x48>  @ imm = #0x2a
 8064abc: 1c59         	adds	r1, r3, #0x1
 8064abe: d00f         	beq	0x8064ae0 <raise+0x40>  @ imm = #0x1e
 8064ac0: 2500         	movs	r5, #0x0
 8064ac2: f842 5020    	str.w	r5, [r2, r0, lsl #2]
 8064ac6: 4798         	blx	r3
 8064ac8: 4628         	mov	r0, r5
 8064aca: bd38         	pop	{r3, r4, r5, pc}
 8064acc: 4628         	mov	r0, r5
 8064ace: f000 f8a5    	bl	0x8064c1c <_getpid_r>   @ imm = #0x14a
 8064ad2: 4622         	mov	r2, r4
 8064ad4: 4601         	mov	r1, r0
 8064ad6: 4628         	mov	r0, r5
 8064ad8: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8064adc: f000 b888    	b.w	0x8064bf0 <_kill_r>     @ imm = #0x110
 8064ae0: 2316         	movs	r3, #0x16
 8064ae2: 2001         	movs	r0, #0x1
 8064ae4: 602b         	str	r3, [r5]
 8064ae6: bd38         	pop	{r3, r4, r5, pc}
 8064ae8: 2000         	movs	r0, #0x0
 8064aea: bd38         	pop	{r3, r4, r5, pc}
 8064aec: 2316         	movs	r3, #0x16
 8064aee: f04f 30ff    	mov.w	r0, #0xffffffff
 8064af2: 602b         	str	r3, [r5]
 8064af4: bd38         	pop	{r3, r4, r5, pc}
 8064af6: bf00         	nop

08064af8 <$d>:
 8064af8: 90 23 00 20  	.word	0x20002390

08064afc <signal>:
 8064afc: 4b13         	ldr	r3, [pc, #0x4c]         @ 0x8064b4c <signal+0x50>
 8064afe: 281f         	cmp	r0, #0x1f
 8064b00: b570         	push	{r4, r5, r6, lr}
 8064b02: 681e         	ldr	r6, [r3]
 8064b04: d809         	bhi	0x8064b1a <signal+0x1e> @ imm = #0x12
 8064b06: 460d         	mov	r5, r1
 8064b08: f8d6 12dc    	ldr.w	r1, [r6, #0x2dc]
 8064b0c: 4604         	mov	r4, r0
 8064b0e: b149         	cbz	r1, 0x8064b24 <signal+0x28> @ imm = #0x12
 8064b10: f851 0024    	ldr.w	r0, [r1, r4, lsl #2]
 8064b14: f841 5024    	str.w	r5, [r1, r4, lsl #2]
 8064b18: bd70         	pop	{r4, r5, r6, pc}
 8064b1a: 2316         	movs	r3, #0x16
 8064b1c: f04f 30ff    	mov.w	r0, #0xffffffff
 8064b20: 6033         	str	r3, [r6]
 8064b22: bd70         	pop	{r4, r5, r6, pc}
 8064b24: 2180         	movs	r1, #0x80
 8064b26: 4630         	mov	r0, r6
 8064b28: f7fd f834    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x2f98
 8064b2c: 4601         	mov	r1, r0
 8064b2e: f8c6 02dc    	str.w	r0, [r6, #0x2dc]
 8064b32: b140         	cbz	r0, 0x8064b46 <signal+0x4a> @ imm = #0x10
 8064b34: 1f03         	subs	r3, r0, #0x4
 8064b36: f100 0c7c    	add.w	r12, r0, #0x7c
 8064b3a: 2200         	movs	r2, #0x0
 8064b3c: f843 2f04    	str	r2, [r3, #4]!
 8064b40: 4563         	cmp	r3, r12
 8064b42: d1fb         	bne	0x8064b3c <signal+0x40> @ imm = #-0xa
 8064b44: e7e4         	b	0x8064b10 <signal+0x14> @ imm = #-0x38
 8064b46: f04f 30ff    	mov.w	r0, #0xffffffff
 8064b4a: bd70         	pop	{r4, r5, r6, pc}

08064b4c <$d>:
 8064b4c: 90 23 00 20  	.word	0x20002390

08064b50 <_init_signal>:
 8064b50: b538         	push	{r3, r4, r5, lr}
 8064b52: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x8064b84 <_init_signal+0x34>
 8064b54: 681d         	ldr	r5, [r3]
 8064b56: f8d5 42dc    	ldr.w	r4, [r5, #0x2dc]
 8064b5a: b10c         	cbz	r4, 0x8064b60 <_init_signal+0x10> @ imm = #0x2
 8064b5c: 2000         	movs	r0, #0x0
 8064b5e: bd38         	pop	{r3, r4, r5, pc}
 8064b60: 2180         	movs	r1, #0x80
 8064b62: 4628         	mov	r0, r5
 8064b64: f7fd f816    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x2fd4
 8064b68: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8064b6c: b138         	cbz	r0, 0x8064b7e <_init_signal+0x2e> @ imm = #0xe
 8064b6e: 1f03         	subs	r3, r0, #0x4
 8064b70: f100 027c    	add.w	r2, r0, #0x7c
 8064b74: f843 4f04    	str	r4, [r3, #4]!
 8064b78: 4293         	cmp	r3, r2
 8064b7a: d1fb         	bne	0x8064b74 <_init_signal+0x24> @ imm = #-0xa
 8064b7c: e7ee         	b	0x8064b5c <_init_signal+0xc> @ imm = #-0x24
 8064b7e: f04f 30ff    	mov.w	r0, #0xffffffff
 8064b82: bd38         	pop	{r3, r4, r5, pc}

08064b84 <$d>:
 8064b84: 90 23 00 20  	.word	0x20002390

08064b88 <__sigtramp>:
 8064b88: b538         	push	{r3, r4, r5, lr}
 8064b8a: 281f         	cmp	r0, #0x1f
 8064b8c: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x8064bec <__sigtramp+0x64>
 8064b8e: 681d         	ldr	r5, [r3]
 8064b90: d828         	bhi	0x8064be4 <__sigtramp+0x5c> @ imm = #0x50
 8064b92: f8d5 22dc    	ldr.w	r2, [r5, #0x2dc]
 8064b96: 4604         	mov	r4, r0
 8064b98: b182         	cbz	r2, 0x8064bbc <__sigtramp+0x34> @ imm = #0x20
 8064b9a: f852 3024    	ldr.w	r3, [r2, r4, lsl #2]
 8064b9e: eb02 0284    	add.w	r2, r2, r4, lsl #2
 8064ba2: b14b         	cbz	r3, 0x8064bb8 <__sigtramp+0x30> @ imm = #0x12
 8064ba4: 1c59         	adds	r1, r3, #0x1
 8064ba6: d01b         	beq	0x8064be0 <__sigtramp+0x58> @ imm = #0x36
 8064ba8: 2b01         	cmp	r3, #0x1
 8064baa: d017         	beq	0x8064bdc <__sigtramp+0x54> @ imm = #0x2e
 8064bac: 2500         	movs	r5, #0x0
 8064bae: 4620         	mov	r0, r4
 8064bb0: 6015         	str	r5, [r2]
 8064bb2: 4798         	blx	r3
 8064bb4: 4628         	mov	r0, r5
 8064bb6: bd38         	pop	{r3, r4, r5, pc}
 8064bb8: 2001         	movs	r0, #0x1
 8064bba: bd38         	pop	{r3, r4, r5, pc}
 8064bbc: 2180         	movs	r1, #0x80
 8064bbe: 4628         	mov	r0, r5
 8064bc0: f7fc ffe8    	bl	0x8061b94 <_malloc_r>   @ imm = #-0x3030
 8064bc4: 4602         	mov	r2, r0
 8064bc6: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8064bca: b158         	cbz	r0, 0x8064be4 <__sigtramp+0x5c> @ imm = #0x16
 8064bcc: 1f03         	subs	r3, r0, #0x4
 8064bce: 2100         	movs	r1, #0x0
 8064bd0: 307c         	adds	r0, #0x7c
 8064bd2: f843 1f04    	str	r1, [r3, #4]!
 8064bd6: 4283         	cmp	r3, r0
 8064bd8: d1fb         	bne	0x8064bd2 <__sigtramp+0x4a> @ imm = #-0xa
 8064bda: e7de         	b	0x8064b9a <__sigtramp+0x12> @ imm = #-0x44
 8064bdc: 2003         	movs	r0, #0x3
 8064bde: bd38         	pop	{r3, r4, r5, pc}
 8064be0: 2002         	movs	r0, #0x2
 8064be2: bd38         	pop	{r3, r4, r5, pc}
 8064be4: f04f 30ff    	mov.w	r0, #0xffffffff
 8064be8: bd38         	pop	{r3, r4, r5, pc}
 8064bea: bf00         	nop

08064bec <$d>:
 8064bec: 90 23 00 20  	.word	0x20002390

08064bf0 <_kill_r>:
 8064bf0: b570         	push	{r4, r5, r6, lr}
 8064bf2: 460c         	mov	r4, r1
 8064bf4: 4603         	mov	r3, r0
 8064bf6: 4d08         	ldr	r5, [pc, #0x20]         @ 0x8064c18 <_kill_r+0x28>
 8064bf8: 2600         	movs	r6, #0x0
 8064bfa: 4620         	mov	r0, r4
 8064bfc: 4611         	mov	r1, r2
 8064bfe: 461c         	mov	r4, r3
 8064c00: 602e         	str	r6, [r5]
 8064c02: f000 f82d    	bl	0x8064c60 <_kill>       @ imm = #0x5a
 8064c06: 1c43         	adds	r3, r0, #0x1
 8064c08: d000         	beq	0x8064c0c <_kill_r+0x1c> @ imm = #0x0
 8064c0a: bd70         	pop	{r4, r5, r6, pc}
 8064c0c: 682b         	ldr	r3, [r5]
 8064c0e: 2b00         	cmp	r3, #0x0
 8064c10: d0fb         	beq	0x8064c0a <_kill_r+0x1a> @ imm = #-0xa
 8064c12: 6023         	str	r3, [r4]
 8064c14: bd70         	pop	{r4, r5, r6, pc}
 8064c16: bf00         	nop

08064c18 <$d>:
 8064c18: 9c 2f 00 20  	.word	0x20002f9c

08064c1c <_getpid_r>:
 8064c1c: f000 b810    	b.w	0x8064c40 <_getpid>     @ imm = #0x20

08064c20 <_close>:
 8064c20: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064c2c <_close+0xc>
 8064c22: 2258         	movs	r2, #0x58
 8064c24: f04f 30ff    	mov.w	r0, #0xffffffff
 8064c28: 601a         	str	r2, [r3]
 8064c2a: 4770         	bx	lr

08064c2c <$d>:
 8064c2c: 9c 2f 00 20  	.word	0x20002f9c

08064c30 <_fstat>:
 8064c30: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064c3c <_fstat+0xc>
 8064c32: 2258         	movs	r2, #0x58
 8064c34: f04f 30ff    	mov.w	r0, #0xffffffff
 8064c38: 601a         	str	r2, [r3]
 8064c3a: 4770         	bx	lr

08064c3c <$d>:
 8064c3c: 9c 2f 00 20  	.word	0x20002f9c

08064c40 <_getpid>:
 8064c40: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064c4c <_getpid+0xc>
 8064c42: 2258         	movs	r2, #0x58
 8064c44: f04f 30ff    	mov.w	r0, #0xffffffff
 8064c48: 601a         	str	r2, [r3]
 8064c4a: 4770         	bx	lr

08064c4c <$d>:
 8064c4c: 9c 2f 00 20  	.word	0x20002f9c

08064c50 <_isatty>:
 8064c50: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064c5c <_isatty+0xc>
 8064c52: 2258         	movs	r2, #0x58
 8064c54: 2000         	movs	r0, #0x0
 8064c56: 601a         	str	r2, [r3]
 8064c58: 4770         	bx	lr
 8064c5a: bf00         	nop

08064c5c <$d>:
 8064c5c: 9c 2f 00 20  	.word	0x20002f9c

08064c60 <_kill>:
 8064c60: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064c6c <_kill+0xc>
 8064c62: 2258         	movs	r2, #0x58
 8064c64: f04f 30ff    	mov.w	r0, #0xffffffff
 8064c68: 601a         	str	r2, [r3]
 8064c6a: 4770         	bx	lr

08064c6c <$d>:
 8064c6c: 9c 2f 00 20  	.word	0x20002f9c

08064c70 <_lseek>:
 8064c70: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064c7c <_lseek+0xc>
 8064c72: 2258         	movs	r2, #0x58
 8064c74: f04f 30ff    	mov.w	r0, #0xffffffff
 8064c78: 601a         	str	r2, [r3]
 8064c7a: 4770         	bx	lr

08064c7c <$d>:
 8064c7c: 9c 2f 00 20  	.word	0x20002f9c

08064c80 <_read>:
 8064c80: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064c8c <_read+0xc>
 8064c82: 2258         	movs	r2, #0x58
 8064c84: f04f 30ff    	mov.w	r0, #0xffffffff
 8064c88: 601a         	str	r2, [r3]
 8064c8a: 4770         	bx	lr

08064c8c <$d>:
 8064c8c: 9c 2f 00 20  	.word	0x20002f9c

08064c90 <_sbrk>:
 8064c90: 4a05         	ldr	r2, [pc, #0x14]         @ 0x8064ca8 <_sbrk+0x18>
 8064c92: 4603         	mov	r3, r0
 8064c94: 6810         	ldr	r0, [r2]
 8064c96: b110         	cbz	r0, 0x8064c9e <_sbrk+0xe> @ imm = #0x4
 8064c98: 4403         	add	r3, r0
 8064c9a: 6013         	str	r3, [r2]
 8064c9c: 4770         	bx	lr
 8064c9e: 4803         	ldr	r0, [pc, #0xc]          @ 0x8064cac <_sbrk+0x1c>
 8064ca0: 4403         	add	r3, r0
 8064ca2: 6013         	str	r3, [r2]
 8064ca4: 4770         	bx	lr
 8064ca6: bf00         	nop

08064ca8 <$d>:
 8064ca8: a0 2f 00 20  	.word	0x20002fa0
 8064cac: c0 3f 00 20  	.word	0x20003fc0

08064cb0 <_write>:
 8064cb0: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064cbc <_write+0xc>
 8064cb2: 2258         	movs	r2, #0x58
 8064cb4: f04f 30ff    	mov.w	r0, #0xffffffff
 8064cb8: 601a         	str	r2, [r3]
 8064cba: 4770         	bx	lr

08064cbc <$d>:
 8064cbc: 9c 2f 00 20  	.word	0x20002f9c

08064cc0 <_exit>:
 8064cc0: e7fe         	b	0x8064cc0 <_exit>       @ imm = #-0x4
 8064cc2: bf00         	nop

08064cc4 <__aeabi_drsub>:
 8064cc4: f081 4100    	eor	r1, r1, #0x80000000
 8064cc8: e002         	b	0x8064cd0 <__aeabi_dadd> @ imm = #0x4
 8064cca: bf00         	nop

08064ccc <__subdf3>:
 8064ccc: f083 4300    	eor	r3, r3, #0x80000000

08064cd0 <__aeabi_dadd>:
 8064cd0: b530         	push	{r4, r5, lr}
 8064cd2: ea4f 0441    	lsl.w	r4, r1, #0x1
 8064cd6: ea4f 0543    	lsl.w	r5, r3, #0x1
 8064cda: ea94 0f05    	teq.w	r4, r5
 8064cde: bf08         	it	eq
 8064ce0: ea90 0f02    	teqeq.w	r0, r2
 8064ce4: bf1f         	itttt	ne
 8064ce6: ea54 0c00    	orrsne.w	r12, r4, r0
 8064cea: ea55 0c02    	orrsne.w	r12, r5, r2
 8064cee: ea7f 5c64    	mvnsne.w	r12, r4, asr #21
 8064cf2: ea7f 5c65    	mvnsne.w	r12, r5, asr #21
 8064cf6: f000 80e2    	beq.w	0x8064ebe <__aeabi_dadd+0x1ee> @ imm = #0x1c4
 8064cfa: ea4f 5454    	lsr.w	r4, r4, #0x15
 8064cfe: ebd4 5555    	rsbs	r5, r4, r5, lsr #21
 8064d02: bfb8         	it	lt
 8064d04: 426d         	rsblt	r5, r5, #0
 8064d06: dd0c         	ble	0x8064d22 <__aeabi_dadd+0x52> @ imm = #0x18
 8064d08: 442c         	add	r4, r5
 8064d0a: ea80 0202    	eor.w	r2, r0, r2
 8064d0e: ea81 0303    	eor.w	r3, r1, r3
 8064d12: ea82 0000    	eor.w	r0, r2, r0
 8064d16: ea83 0101    	eor.w	r1, r3, r1
 8064d1a: ea80 0202    	eor.w	r2, r0, r2
 8064d1e: ea81 0303    	eor.w	r3, r1, r3
 8064d22: 2d36         	cmp	r5, #0x36
 8064d24: bf88         	it	hi
 8064d26: bd30         	pophi	{r4, r5, pc}
 8064d28: f011 4f00    	tst.w	r1, #0x80000000
 8064d2c: ea4f 3101    	lsl.w	r1, r1, #0xc
 8064d30: f44f 1c80    	mov.w	r12, #0x100000
 8064d34: ea4c 3111    	orr.w	r1, r12, r1, lsr #12
 8064d38: d002         	beq	0x8064d40 <__aeabi_dadd+0x70> @ imm = #0x4
 8064d3a: 4240         	rsbs	r0, r0, #0
 8064d3c: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 8064d40: f013 4f00    	tst.w	r3, #0x80000000
 8064d44: ea4f 3303    	lsl.w	r3, r3, #0xc
 8064d48: ea4c 3313    	orr.w	r3, r12, r3, lsr #12
 8064d4c: d002         	beq	0x8064d54 <__aeabi_dadd+0x84> @ imm = #0x4
 8064d4e: 4252         	rsbs	r2, r2, #0
 8064d50: eb63 0343    	sbc.w	r3, r3, r3, lsl #1
 8064d54: ea94 0f05    	teq.w	r4, r5
 8064d58: f000 80a7    	beq.w	0x8064eaa <__aeabi_dadd+0x1da> @ imm = #0x14e
 8064d5c: f1a4 0401    	sub.w	r4, r4, #0x1
 8064d60: f1d5 0e20    	rsbs.w	lr, r5, #0x20
 8064d64: db0d         	blt	0x8064d82 <__aeabi_dadd+0xb2> @ imm = #0x1a
 8064d66: fa02 fc0e    	lsl.w	r12, r2, lr
 8064d6a: fa22 f205    	lsr.w	r2, r2, r5
 8064d6e: 1880         	adds	r0, r0, r2
 8064d70: f141 0100    	adc	r1, r1, #0x0
 8064d74: fa03 f20e    	lsl.w	r2, r3, lr
 8064d78: 1880         	adds	r0, r0, r2
 8064d7a: fa43 f305    	asr.w	r3, r3, r5
 8064d7e: 4159         	adcs	r1, r3
 8064d80: e00e         	b	0x8064da0 <__aeabi_dadd+0xd0> @ imm = #0x1c
 8064d82: f1a5 0520    	sub.w	r5, r5, #0x20
 8064d86: f10e 0e20    	add.w	lr, lr, #0x20
 8064d8a: 2a01         	cmp	r2, #0x1
 8064d8c: fa03 fc0e    	lsl.w	r12, r3, lr
 8064d90: bf28         	it	hs
 8064d92: f04c 0c02    	orrhs	r12, r12, #0x2
 8064d96: fa43 f305    	asr.w	r3, r3, r5
 8064d9a: 18c0         	adds	r0, r0, r3
 8064d9c: eb51 71e3    	adcs.w	r1, r1, r3, asr #31
 8064da0: f001 4500    	and	r5, r1, #0x80000000
 8064da4: d507         	bpl	0x8064db6 <__aeabi_dadd+0xe6> @ imm = #0xe
 8064da6: f04f 0e00    	mov.w	lr, #0x0
 8064daa: f1dc 0c00    	rsbs.w	r12, r12, #0x0
 8064dae: eb7e 0000    	sbcs.w	r0, lr, r0
 8064db2: eb6e 0101    	sbc.w	r1, lr, r1
 8064db6: f5b1 1f80    	cmp.w	r1, #0x100000
 8064dba: d31b         	blo	0x8064df4 <__aeabi_dadd+0x124> @ imm = #0x36
 8064dbc: f5b1 1f00    	cmp.w	r1, #0x200000
 8064dc0: d30c         	blo	0x8064ddc <__aeabi_dadd+0x10c> @ imm = #0x18
 8064dc2: 0849         	lsrs	r1, r1, #0x1
 8064dc4: ea5f 0030    	rrxs	r0, r0
 8064dc8: ea4f 0c3c    	rrx	r12, r12
 8064dcc: f104 0401    	add.w	r4, r4, #0x1
 8064dd0: ea4f 5244    	lsl.w	r2, r4, #0x15
 8064dd4: f512 0f80    	cmn.w	r2, #0x400000
 8064dd8: f080 809a    	bhs.w	0x8064f10 <__aeabi_dadd+0x240> @ imm = #0x134
 8064ddc: f1bc 4f00    	cmp.w	r12, #0x80000000
 8064de0: bf08         	it	eq
 8064de2: ea5f 0c50    	lsrseq.w	r12, r0, #0x1
 8064de6: f150 0000    	adcs	r0, r0, #0x0
 8064dea: eb41 5104    	adc.w	r1, r1, r4, lsl #20
 8064dee: ea41 0105    	orr.w	r1, r1, r5
 8064df2: bd30         	pop	{r4, r5, pc}
 8064df4: ea5f 0c4c    	lsls.w	r12, r12, #0x1
 8064df8: 4140         	adcs	r0, r0
 8064dfa: eb41 0101    	adc.w	r1, r1, r1
 8064dfe: 3c01         	subs	r4, #0x1
 8064e00: bf28         	it	hs
 8064e02: f5b1 1f80    	cmphs.w	r1, #0x100000
 8064e06: d2e9         	bhs	0x8064ddc <__aeabi_dadd+0x10c> @ imm = #-0x2e
 8064e08: f091 0f00    	teq.w	r1, #0x0
 8064e0c: bf04         	itt	eq
 8064e0e: 4601         	moveq	r1, r0
 8064e10: 2000         	moveq	r0, #0x0
 8064e12: fab1 f381    	clz	r3, r1
 8064e16: bf08         	it	eq
 8064e18: 3320         	addeq	r3, #0x20
 8064e1a: f1a3 030b    	sub.w	r3, r3, #0xb
 8064e1e: f1b3 0220    	subs.w	r2, r3, #0x20
 8064e22: da0c         	bge	0x8064e3e <__aeabi_dadd+0x16e> @ imm = #0x18
 8064e24: 320c         	adds	r2, #0xc
 8064e26: dd08         	ble	0x8064e3a <__aeabi_dadd+0x16a> @ imm = #0x10
 8064e28: f102 0c14    	add.w	r12, r2, #0x14
 8064e2c: f1c2 020c    	rsb.w	r2, r2, #0xc
 8064e30: fa01 f00c    	lsl.w	r0, r1, r12
 8064e34: fa21 f102    	lsr.w	r1, r1, r2
 8064e38: e00c         	b	0x8064e54 <__aeabi_dadd+0x184> @ imm = #0x18
 8064e3a: f102 0214    	add.w	r2, r2, #0x14
 8064e3e: bfd8         	it	le
 8064e40: f1c2 0c20    	rsble.w	r12, r2, #0x20
 8064e44: fa01 f102    	lsl.w	r1, r1, r2
 8064e48: fa20 fc0c    	lsr.w	r12, r0, r12
 8064e4c: bfdc         	itt	le
 8064e4e: ea41 010c    	orrle.w	r1, r1, r12
 8064e52: 4090         	lslle	r0, r2
 8064e54: 1ae4         	subs	r4, r4, r3
 8064e56: bfa2         	ittt	ge
 8064e58: eb01 5104    	addge.w	r1, r1, r4, lsl #20
 8064e5c: 4329         	orrge	r1, r5
 8064e5e: bd30         	popge	{r4, r5, pc}
 8064e60: ea6f 0404    	mvn.w	r4, r4
 8064e64: 3c1f         	subs	r4, #0x1f
 8064e66: da1c         	bge	0x8064ea2 <__aeabi_dadd+0x1d2> @ imm = #0x38
 8064e68: 340c         	adds	r4, #0xc
 8064e6a: dc0e         	bgt	0x8064e8a <__aeabi_dadd+0x1ba> @ imm = #0x1c
 8064e6c: f104 0414    	add.w	r4, r4, #0x14
 8064e70: f1c4 0220    	rsb.w	r2, r4, #0x20
 8064e74: fa20 f004    	lsr.w	r0, r0, r4
 8064e78: fa01 f302    	lsl.w	r3, r1, r2
 8064e7c: ea40 0003    	orr.w	r0, r0, r3
 8064e80: fa21 f304    	lsr.w	r3, r1, r4
 8064e84: ea45 0103    	orr.w	r1, r5, r3
 8064e88: bd30         	pop	{r4, r5, pc}
 8064e8a: f1c4 040c    	rsb.w	r4, r4, #0xc
 8064e8e: f1c4 0220    	rsb.w	r2, r4, #0x20
 8064e92: fa20 f002    	lsr.w	r0, r0, r2
 8064e96: fa01 f304    	lsl.w	r3, r1, r4
 8064e9a: ea40 0003    	orr.w	r0, r0, r3
 8064e9e: 4629         	mov	r1, r5
 8064ea0: bd30         	pop	{r4, r5, pc}
 8064ea2: fa21 f004    	lsr.w	r0, r1, r4
 8064ea6: 4629         	mov	r1, r5
 8064ea8: bd30         	pop	{r4, r5, pc}
 8064eaa: f094 0f00    	teq.w	r4, #0x0
 8064eae: f483 1380    	eor	r3, r3, #0x100000
 8064eb2: bf06         	itte	eq
 8064eb4: f481 1180    	eoreq	r1, r1, #0x100000
 8064eb8: 3401         	addeq	r4, #0x1
 8064eba: 3d01         	subne	r5, #0x1
 8064ebc: e74e         	b	0x8064d5c <__aeabi_dadd+0x8c> @ imm = #-0x164
 8064ebe: ea7f 5c64    	mvns.w	r12, r4, asr #21
 8064ec2: bf18         	it	ne
 8064ec4: ea7f 5c65    	mvnsne.w	r12, r5, asr #21
 8064ec8: d029         	beq	0x8064f1e <__aeabi_dadd+0x24e> @ imm = #0x52
 8064eca: ea94 0f05    	teq.w	r4, r5
 8064ece: bf08         	it	eq
 8064ed0: ea90 0f02    	teqeq.w	r0, r2
 8064ed4: d005         	beq	0x8064ee2 <__aeabi_dadd+0x212> @ imm = #0xa
 8064ed6: ea54 0c00    	orrs.w	r12, r4, r0
 8064eda: bf04         	itt	eq
 8064edc: 4619         	moveq	r1, r3
 8064ede: 4610         	moveq	r0, r2
 8064ee0: bd30         	pop	{r4, r5, pc}
 8064ee2: ea91 0f03    	teq.w	r1, r3
 8064ee6: bf1e         	ittt	ne
 8064ee8: 2100         	movne	r1, #0x0
 8064eea: 2000         	movne	r0, #0x0
 8064eec: bd30         	popne	{r4, r5, pc}
 8064eee: ea5f 5c54    	lsrs.w	r12, r4, #0x15
 8064ef2: d105         	bne	0x8064f00 <__aeabi_dadd+0x230> @ imm = #0xa
 8064ef4: 0040         	lsls	r0, r0, #0x1
 8064ef6: 4149         	adcs	r1, r1
 8064ef8: bf28         	it	hs
 8064efa: f041 4100    	orrhs	r1, r1, #0x80000000
 8064efe: bd30         	pop	{r4, r5, pc}
 8064f00: f514 0480    	adds.w	r4, r4, #0x400000
 8064f04: bf3c         	itt	lo
 8064f06: f501 1180    	addlo.w	r1, r1, #0x100000
 8064f0a: bd30         	poplo	{r4, r5, pc}
 8064f0c: f001 4500    	and	r5, r1, #0x80000000
 8064f10: f045 41fe    	orr	r1, r5, #0x7f000000
 8064f14: f441 0170    	orr	r1, r1, #0xf00000
 8064f18: f04f 0000    	mov.w	r0, #0x0
 8064f1c: bd30         	pop	{r4, r5, pc}
 8064f1e: ea7f 5c64    	mvns.w	r12, r4, asr #21
 8064f22: bf1a         	itte	ne
 8064f24: 4619         	movne	r1, r3
 8064f26: 4610         	movne	r0, r2
 8064f28: ea7f 5c65    	mvnseq.w	r12, r5, asr #21
 8064f2c: bf1c         	itt	ne
 8064f2e: 460b         	movne	r3, r1
 8064f30: 4602         	movne	r2, r0
 8064f32: ea50 3401    	orrs.w	r4, r0, r1, lsl #12
 8064f36: bf06         	itte	eq
 8064f38: ea52 3503    	orrseq.w	r5, r2, r3, lsl #12
 8064f3c: ea91 0f03    	teqeq.w	r1, r3
 8064f40: f441 2100    	orrne	r1, r1, #0x80000
 8064f44: bd30         	pop	{r4, r5, pc}
 8064f46: bf00         	nop

08064f48 <__floatunsidf>:
 8064f48: f090 0f00    	teq.w	r0, #0x0
 8064f4c: bf04         	itt	eq
 8064f4e: 2100         	moveq	r1, #0x0
 8064f50: 4770         	bxeq	lr
 8064f52: b530         	push	{r4, r5, lr}
 8064f54: f44f 6480    	mov.w	r4, #0x400
 8064f58: f104 0432    	add.w	r4, r4, #0x32
 8064f5c: f04f 0500    	mov.w	r5, #0x0
 8064f60: f04f 0100    	mov.w	r1, #0x0
 8064f64: e750         	b	0x8064e08 <__aeabi_dadd+0x138> @ imm = #-0x160
 8064f66: bf00         	nop

08064f68 <__floatsidf>:
 8064f68: f090 0f00    	teq.w	r0, #0x0
 8064f6c: bf04         	itt	eq
 8064f6e: 2100         	moveq	r1, #0x0
 8064f70: 4770         	bxeq	lr
 8064f72: b530         	push	{r4, r5, lr}
 8064f74: f44f 6480    	mov.w	r4, #0x400
 8064f78: f104 0432    	add.w	r4, r4, #0x32
 8064f7c: f010 4500    	ands	r5, r0, #0x80000000
 8064f80: bf48         	it	mi
 8064f82: 4240         	rsbmi	r0, r0, #0
 8064f84: f04f 0100    	mov.w	r1, #0x0
 8064f88: e73e         	b	0x8064e08 <__aeabi_dadd+0x138> @ imm = #-0x184
 8064f8a: bf00         	nop

08064f8c <__extendsfdf2>:
 8064f8c: 0042         	lsls	r2, r0, #0x1
 8064f8e: ea4f 01e2    	asr.w	r1, r2, #0x3
 8064f92: ea4f 0131    	rrx	r1, r1
 8064f96: ea4f 7002    	lsl.w	r0, r2, #0x1c
 8064f9a: bf1f         	itttt	ne
 8064f9c: f012 437f    	andsne	r3, r2, #0xff000000
 8064fa0: f093 4f7f    	teqne.w	r3, #0xff000000
 8064fa4: f081 5160    	eorne	r1, r1, #0x38000000
 8064fa8: 4770         	bxne	lr
 8064faa: f032 427f    	bics	r2, r2, #0xff000000
 8064fae: bf08         	it	eq
 8064fb0: 4770         	bxeq	lr
 8064fb2: f093 4f7f    	teq.w	r3, #0xff000000
 8064fb6: bf04         	itt	eq
 8064fb8: f441 2100    	orreq	r1, r1, #0x80000
 8064fbc: 4770         	bxeq	lr
 8064fbe: b530         	push	{r4, r5, lr}
 8064fc0: f44f 7460    	mov.w	r4, #0x380
 8064fc4: f001 4500    	and	r5, r1, #0x80000000
 8064fc8: f021 4100    	bic	r1, r1, #0x80000000
 8064fcc: e71c         	b	0x8064e08 <__aeabi_dadd+0x138> @ imm = #-0x1c8
 8064fce: bf00         	nop

08064fd0 <__floatundidf>:
 8064fd0: ea50 0201    	orrs.w	r2, r0, r1
 8064fd4: bf08         	it	eq
 8064fd6: 4770         	bxeq	lr
 8064fd8: b530         	push	{r4, r5, lr}
 8064fda: f04f 0500    	mov.w	r5, #0x0
 8064fde: e00a         	b	0x8064ff6 <__floatdidf+0x16> @ imm = #0x14

08064fe0 <__floatdidf>:
 8064fe0: ea50 0201    	orrs.w	r2, r0, r1
 8064fe4: bf08         	it	eq
 8064fe6: 4770         	bxeq	lr
 8064fe8: b530         	push	{r4, r5, lr}
 8064fea: f011 4500    	ands	r5, r1, #0x80000000
 8064fee: d502         	bpl	0x8064ff6 <__floatdidf+0x16> @ imm = #0x4
 8064ff0: 4240         	rsbs	r0, r0, #0
 8064ff2: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 8064ff6: f44f 6480    	mov.w	r4, #0x400
 8064ffa: f104 0432    	add.w	r4, r4, #0x32
 8064ffe: ea5f 5c91    	lsrs.w	r12, r1, #0x16
 8065002: f43f aed8    	beq.w	0x8064db6 <__aeabi_dadd+0xe6> @ imm = #-0x250
 8065006: f04f 0203    	mov.w	r2, #0x3
 806500a: ea5f 0cdc    	lsrs.w	r12, r12, #0x3
 806500e: bf18         	it	ne
 8065010: 3203         	addne	r2, #0x3
 8065012: ea5f 0cdc    	lsrs.w	r12, r12, #0x3
 8065016: bf18         	it	ne
 8065018: 3203         	addne	r2, #0x3
 806501a: eb02 02dc    	add.w	r2, r2, r12, lsr #3
 806501e: f1c2 0320    	rsb.w	r3, r2, #0x20
 8065022: fa00 fc03    	lsl.w	r12, r0, r3
 8065026: fa20 f002    	lsr.w	r0, r0, r2
 806502a: fa01 fe03    	lsl.w	lr, r1, r3
 806502e: ea40 000e    	orr.w	r0, r0, lr
 8065032: fa21 f102    	lsr.w	r1, r1, r2
 8065036: 4414         	add	r4, r2
 8065038: e6bd         	b	0x8064db6 <__aeabi_dadd+0xe6> @ imm = #-0x286
 806503a: bf00         	nop

0806503c <__muldf3>:
 806503c: b570         	push	{r4, r5, r6, lr}
 806503e: f04f 0cff    	mov.w	r12, #0xff
 8065042: f44c 6ce0    	orr	r12, r12, #0x700
 8065046: ea1c 5411    	ands.w	r4, r12, r1, lsr #20
 806504a: bf1d         	ittte	ne
 806504c: ea1c 5513    	andsne.w	r5, r12, r3, lsr #20
 8065050: ea94 0f0c    	teqne.w	r4, r12
 8065054: ea95 0f0c    	teqne.w	r5, r12
 8065058: f000 f8de    	bleq	0x8065218 <__muldf3+0x1dc> @ imm = #0x1bc
 806505c: 442c         	add	r4, r5
 806505e: ea81 0603    	eor.w	r6, r1, r3
 8065062: ea21 514c    	bic.w	r1, r1, r12, lsl #21
 8065066: ea23 534c    	bic.w	r3, r3, r12, lsl #21
 806506a: ea50 3501    	orrs.w	r5, r0, r1, lsl #12
 806506e: bf18         	it	ne
 8065070: ea52 3503    	orrsne.w	r5, r2, r3, lsl #12
 8065074: f441 1180    	orr	r1, r1, #0x100000
 8065078: f443 1380    	orr	r3, r3, #0x100000
 806507c: d038         	beq	0x80650f0 <__muldf3+0xb4> @ imm = #0x70
 806507e: fba0 ce02    	umull	r12, lr, r0, r2
 8065082: f04f 0500    	mov.w	r5, #0x0
 8065086: fbe1 e502    	umlal	lr, r5, r1, r2
 806508a: f006 4200    	and	r2, r6, #0x80000000
 806508e: fbe0 e503    	umlal	lr, r5, r0, r3
 8065092: f04f 0600    	mov.w	r6, #0x0
 8065096: fbe1 5603    	umlal	r5, r6, r1, r3
 806509a: f09c 0f00    	teq.w	r12, #0x0
 806509e: bf18         	it	ne
 80650a0: f04e 0e01    	orrne	lr, lr, #0x1
 80650a4: f1a4 04ff    	sub.w	r4, r4, #0xff
 80650a8: f5b6 7f00    	cmp.w	r6, #0x200
 80650ac: f564 7440    	sbc	r4, r4, #0x300
 80650b0: d204         	bhs	0x80650bc <__muldf3+0x80> @ imm = #0x8
 80650b2: ea5f 0e4e    	lsls.w	lr, lr, #0x1
 80650b6: 416d         	adcs	r5, r5
 80650b8: eb46 0606    	adc.w	r6, r6, r6
 80650bc: ea42 21c6    	orr.w	r1, r2, r6, lsl #11
 80650c0: ea41 5155    	orr.w	r1, r1, r5, lsr #21
 80650c4: ea4f 20c5    	lsl.w	r0, r5, #0xb
 80650c8: ea40 505e    	orr.w	r0, r0, lr, lsr #21
 80650cc: ea4f 2ece    	lsl.w	lr, lr, #0xb
 80650d0: f1b4 0cfd    	subs.w	r12, r4, #0xfd
 80650d4: bf88         	it	hi
 80650d6: f5bc 6fe0    	cmphi.w	r12, #0x700
 80650da: d81e         	bhi	0x806511a <__muldf3+0xde> @ imm = #0x3c
 80650dc: f1be 4f00    	cmp.w	lr, #0x80000000
 80650e0: bf08         	it	eq
 80650e2: ea5f 0e50    	lsrseq.w	lr, r0, #0x1
 80650e6: f150 0000    	adcs	r0, r0, #0x0
 80650ea: eb41 5104    	adc.w	r1, r1, r4, lsl #20
 80650ee: bd70         	pop	{r4, r5, r6, pc}
 80650f0: f006 4600    	and	r6, r6, #0x80000000
 80650f4: ea46 0101    	orr.w	r1, r6, r1
 80650f8: ea40 0002    	orr.w	r0, r0, r2
 80650fc: ea81 0103    	eor.w	r1, r1, r3
 8065100: ebb4 045c    	subs.w	r4, r4, r12, lsr #1
 8065104: bfc2         	ittt	gt
 8065106: ebd4 050c    	rsbsgt	r5, r4, r12
 806510a: ea41 5104    	orrgt.w	r1, r1, r4, lsl #20
 806510e: bd70         	popgt	{r4, r5, r6, pc}
 8065110: f441 1180    	orr	r1, r1, #0x100000
 8065114: f04f 0e00    	mov.w	lr, #0x0
 8065118: 3c01         	subs	r4, #0x1
 806511a: f300 80ab    	bgt.w	0x8065274 <__muldf3+0x238> @ imm = #0x156
 806511e: f114 0f36    	cmn.w	r4, #0x36
 8065122: bfde         	ittt	le
 8065124: 2000         	movle	r0, #0x0
 8065126: f001 4100    	andle	r1, r1, #0x80000000
 806512a: bd70         	pople	{r4, r5, r6, pc}
 806512c: f1c4 0400    	rsb.w	r4, r4, #0x0
 8065130: 3c20         	subs	r4, #0x20
 8065132: da35         	bge	0x80651a0 <__muldf3+0x164> @ imm = #0x6a
 8065134: 340c         	adds	r4, #0xc
 8065136: dc1b         	bgt	0x8065170 <__muldf3+0x134> @ imm = #0x36
 8065138: f104 0414    	add.w	r4, r4, #0x14
 806513c: f1c4 0520    	rsb.w	r5, r4, #0x20
 8065140: fa00 f305    	lsl.w	r3, r0, r5
 8065144: fa20 f004    	lsr.w	r0, r0, r4
 8065148: fa01 f205    	lsl.w	r2, r1, r5
 806514c: ea40 0002    	orr.w	r0, r0, r2
 8065150: f001 4200    	and	r2, r1, #0x80000000
 8065154: f021 4100    	bic	r1, r1, #0x80000000
 8065158: eb10 70d3    	adds.w	r0, r0, r3, lsr #31
 806515c: fa21 f604    	lsr.w	r6, r1, r4
 8065160: eb42 0106    	adc.w	r1, r2, r6
 8065164: ea5e 0e43    	orrs.w	lr, lr, r3, lsl #1
 8065168: bf08         	it	eq
 806516a: ea20 70d3    	biceq.w	r0, r0, r3, lsr #31
 806516e: bd70         	pop	{r4, r5, r6, pc}
 8065170: f1c4 040c    	rsb.w	r4, r4, #0xc
 8065174: f1c4 0520    	rsb.w	r5, r4, #0x20
 8065178: fa00 f304    	lsl.w	r3, r0, r4
 806517c: fa20 f005    	lsr.w	r0, r0, r5
 8065180: fa01 f204    	lsl.w	r2, r1, r4
 8065184: ea40 0002    	orr.w	r0, r0, r2
 8065188: f001 4100    	and	r1, r1, #0x80000000
 806518c: eb10 70d3    	adds.w	r0, r0, r3, lsr #31
 8065190: f141 0100    	adc	r1, r1, #0x0
 8065194: ea5e 0e43    	orrs.w	lr, lr, r3, lsl #1
 8065198: bf08         	it	eq
 806519a: ea20 70d3    	biceq.w	r0, r0, r3, lsr #31
 806519e: bd70         	pop	{r4, r5, r6, pc}
 80651a0: f1c4 0520    	rsb.w	r5, r4, #0x20
 80651a4: fa00 f205    	lsl.w	r2, r0, r5
 80651a8: ea4e 0e02    	orr.w	lr, lr, r2
 80651ac: fa20 f304    	lsr.w	r3, r0, r4
 80651b0: fa01 f205    	lsl.w	r2, r1, r5
 80651b4: ea43 0302    	orr.w	r3, r3, r2
 80651b8: fa21 f004    	lsr.w	r0, r1, r4
 80651bc: f001 4100    	and	r1, r1, #0x80000000
 80651c0: fa21 f204    	lsr.w	r2, r1, r4
 80651c4: ea20 0002    	bic.w	r0, r0, r2
 80651c8: eb00 70d3    	add.w	r0, r0, r3, lsr #31
 80651cc: ea5e 0e43    	orrs.w	lr, lr, r3, lsl #1
 80651d0: bf08         	it	eq
 80651d2: ea20 70d3    	biceq.w	r0, r0, r3, lsr #31
 80651d6: bd70         	pop	{r4, r5, r6, pc}
 80651d8: f094 0f00    	teq.w	r4, #0x0
 80651dc: d10f         	bne	0x80651fe <__muldf3+0x1c2> @ imm = #0x1e
 80651de: f001 4600    	and	r6, r1, #0x80000000
 80651e2: 0040         	lsls	r0, r0, #0x1
 80651e4: eb41 0101    	adc.w	r1, r1, r1
 80651e8: f411 1f80    	tst.w	r1, #0x100000
 80651ec: bf08         	it	eq
 80651ee: 3c01         	subeq	r4, #0x1
 80651f0: d0f7         	beq	0x80651e2 <__muldf3+0x1a6> @ imm = #-0x12
 80651f2: ea41 0106    	orr.w	r1, r1, r6
 80651f6: f095 0f00    	teq.w	r5, #0x0
 80651fa: bf18         	it	ne
 80651fc: 4770         	bxne	lr
 80651fe: f003 4600    	and	r6, r3, #0x80000000
 8065202: 0052         	lsls	r2, r2, #0x1
 8065204: eb43 0303    	adc.w	r3, r3, r3
 8065208: f413 1f80    	tst.w	r3, #0x100000
 806520c: bf08         	it	eq
 806520e: 3d01         	subeq	r5, #0x1
 8065210: d0f7         	beq	0x8065202 <__muldf3+0x1c6> @ imm = #-0x12
 8065212: ea43 0306    	orr.w	r3, r3, r6
 8065216: 4770         	bx	lr
 8065218: ea94 0f0c    	teq.w	r4, r12
 806521c: ea0c 5513    	and.w	r5, r12, r3, lsr #20
 8065220: bf18         	it	ne
 8065222: ea95 0f0c    	teqne.w	r5, r12
 8065226: d00c         	beq	0x8065242 <__muldf3+0x206> @ imm = #0x18
 8065228: ea50 0641    	orrs.w	r6, r0, r1, lsl #1
 806522c: bf18         	it	ne
 806522e: ea52 0643    	orrsne.w	r6, r2, r3, lsl #1
 8065232: d1d1         	bne	0x80651d8 <__muldf3+0x19c> @ imm = #-0x5e
 8065234: ea81 0103    	eor.w	r1, r1, r3
 8065238: f001 4100    	and	r1, r1, #0x80000000
 806523c: f04f 0000    	mov.w	r0, #0x0
 8065240: bd70         	pop	{r4, r5, r6, pc}
 8065242: ea50 0641    	orrs.w	r6, r0, r1, lsl #1
 8065246: bf06         	itte	eq
 8065248: 4610         	moveq	r0, r2
 806524a: 4619         	moveq	r1, r3
 806524c: ea52 0643    	orrsne.w	r6, r2, r3, lsl #1
 8065250: d019         	beq	0x8065286 <__muldf3+0x24a> @ imm = #0x32
 8065252: ea94 0f0c    	teq.w	r4, r12
 8065256: d102         	bne	0x806525e <__muldf3+0x222> @ imm = #0x4
 8065258: ea50 3601    	orrs.w	r6, r0, r1, lsl #12
 806525c: d113         	bne	0x8065286 <__muldf3+0x24a> @ imm = #0x26
 806525e: ea95 0f0c    	teq.w	r5, r12
 8065262: d105         	bne	0x8065270 <__muldf3+0x234> @ imm = #0xa
 8065264: ea52 3603    	orrs.w	r6, r2, r3, lsl #12
 8065268: bf1c         	itt	ne
 806526a: 4610         	movne	r0, r2
 806526c: 4619         	movne	r1, r3
 806526e: d10a         	bne	0x8065286 <__muldf3+0x24a> @ imm = #0x14
 8065270: ea81 0103    	eor.w	r1, r1, r3
 8065274: f001 4100    	and	r1, r1, #0x80000000
 8065278: f041 41fe    	orr	r1, r1, #0x7f000000
 806527c: f441 0170    	orr	r1, r1, #0xf00000
 8065280: f04f 0000    	mov.w	r0, #0x0
 8065284: bd70         	pop	{r4, r5, r6, pc}
 8065286: f041 41fe    	orr	r1, r1, #0x7f000000
 806528a: f441 0178    	orr	r1, r1, #0xf80000
 806528e: bd70         	pop	{r4, r5, r6, pc}

08065290 <__divdf3>:
 8065290: b570         	push	{r4, r5, r6, lr}
 8065292: f04f 0cff    	mov.w	r12, #0xff
 8065296: f44c 6ce0    	orr	r12, r12, #0x700
 806529a: ea1c 5411    	ands.w	r4, r12, r1, lsr #20
 806529e: bf1d         	ittte	ne
 80652a0: ea1c 5513    	andsne.w	r5, r12, r3, lsr #20
 80652a4: ea94 0f0c    	teqne.w	r4, r12
 80652a8: ea95 0f0c    	teqne.w	r5, r12
 80652ac: f000 f8a7    	bleq	0x80653fe <__divdf3+0x16e> @ imm = #0x14e
 80652b0: eba4 0405    	sub.w	r4, r4, r5
 80652b4: ea81 0e03    	eor.w	lr, r1, r3
 80652b8: ea52 3503    	orrs.w	r5, r2, r3, lsl #12
 80652bc: ea4f 3101    	lsl.w	r1, r1, #0xc
 80652c0: f000 8088    	beq.w	0x80653d4 <__divdf3+0x144> @ imm = #0x110
 80652c4: ea4f 3303    	lsl.w	r3, r3, #0xc
 80652c8: f04f 5580    	mov.w	r5, #0x10000000
 80652cc: ea45 1313    	orr.w	r3, r5, r3, lsr #4
 80652d0: ea43 6312    	orr.w	r3, r3, r2, lsr #24
 80652d4: ea4f 2202    	lsl.w	r2, r2, #0x8
 80652d8: ea45 1511    	orr.w	r5, r5, r1, lsr #4
 80652dc: ea45 6510    	orr.w	r5, r5, r0, lsr #24
 80652e0: ea4f 2600    	lsl.w	r6, r0, #0x8
 80652e4: f00e 4100    	and	r1, lr, #0x80000000
 80652e8: 429d         	cmp	r5, r3
 80652ea: bf08         	it	eq
 80652ec: 4296         	cmpeq	r6, r2
 80652ee: f144 04fd    	adc	r4, r4, #0xfd
 80652f2: f504 7440    	add.w	r4, r4, #0x300
 80652f6: d202         	bhs	0x80652fe <__divdf3+0x6e> @ imm = #0x4
 80652f8: 085b         	lsrs	r3, r3, #0x1
 80652fa: ea4f 0232    	rrx	r2, r2
 80652fe: 1ab6         	subs	r6, r6, r2
 8065300: eb65 0503    	sbc.w	r5, r5, r3
 8065304: 085b         	lsrs	r3, r3, #0x1
 8065306: ea4f 0232    	rrx	r2, r2
 806530a: f44f 1080    	mov.w	r0, #0x100000
 806530e: f44f 2c00    	mov.w	r12, #0x80000
 8065312: ebb6 0e02    	subs.w	lr, r6, r2
 8065316: eb75 0e03    	sbcs.w	lr, r5, r3
 806531a: bf22         	ittt	hs
 806531c: 1ab6         	subhs	r6, r6, r2
 806531e: 4675         	movhs	r5, lr
 8065320: ea40 000c    	orrhs.w	r0, r0, r12
 8065324: 085b         	lsrs	r3, r3, #0x1
 8065326: ea4f 0232    	rrx	r2, r2
 806532a: ebb6 0e02    	subs.w	lr, r6, r2
 806532e: eb75 0e03    	sbcs.w	lr, r5, r3
 8065332: bf22         	ittt	hs
 8065334: 1ab6         	subhs	r6, r6, r2
 8065336: 4675         	movhs	r5, lr
 8065338: ea40 005c    	orrhs.w	r0, r0, r12, lsr #1
 806533c: 085b         	lsrs	r3, r3, #0x1
 806533e: ea4f 0232    	rrx	r2, r2
 8065342: ebb6 0e02    	subs.w	lr, r6, r2
 8065346: eb75 0e03    	sbcs.w	lr, r5, r3
 806534a: bf22         	ittt	hs
 806534c: 1ab6         	subhs	r6, r6, r2
 806534e: 4675         	movhs	r5, lr
 8065350: ea40 009c    	orrhs.w	r0, r0, r12, lsr #2
 8065354: 085b         	lsrs	r3, r3, #0x1
 8065356: ea4f 0232    	rrx	r2, r2
 806535a: ebb6 0e02    	subs.w	lr, r6, r2
 806535e: eb75 0e03    	sbcs.w	lr, r5, r3
 8065362: bf22         	ittt	hs
 8065364: 1ab6         	subhs	r6, r6, r2
 8065366: 4675         	movhs	r5, lr
 8065368: ea40 00dc    	orrhs.w	r0, r0, r12, lsr #3
 806536c: ea55 0e06    	orrs.w	lr, r5, r6
 8065370: d018         	beq	0x80653a4 <__divdf3+0x114> @ imm = #0x30
 8065372: ea4f 1505    	lsl.w	r5, r5, #0x4
 8065376: ea45 7516    	orr.w	r5, r5, r6, lsr #28
 806537a: ea4f 1606    	lsl.w	r6, r6, #0x4
 806537e: ea4f 03c3    	lsl.w	r3, r3, #0x3
 8065382: ea43 7352    	orr.w	r3, r3, r2, lsr #29
 8065386: ea4f 02c2    	lsl.w	r2, r2, #0x3
 806538a: ea5f 1c1c    	lsrs.w	r12, r12, #0x4
 806538e: d1c0         	bne	0x8065312 <__divdf3+0x82> @ imm = #-0x80
 8065390: f411 1f80    	tst.w	r1, #0x100000
 8065394: d10b         	bne	0x80653ae <__divdf3+0x11e> @ imm = #0x16
 8065396: ea41 0100    	orr.w	r1, r1, r0
 806539a: f04f 0000    	mov.w	r0, #0x0
 806539e: f04f 4c00    	mov.w	r12, #0x80000000
 80653a2: e7b6         	b	0x8065312 <__divdf3+0x82> @ imm = #-0x94
 80653a4: f411 1f80    	tst.w	r1, #0x100000
 80653a8: bf04         	itt	eq
 80653aa: 4301         	orreq	r1, r0
 80653ac: 2000         	moveq	r0, #0x0
 80653ae: f1b4 0cfd    	subs.w	r12, r4, #0xfd
 80653b2: bf88         	it	hi
 80653b4: f5bc 6fe0    	cmphi.w	r12, #0x700
 80653b8: f63f aeaf    	bhi.w	0x806511a <__muldf3+0xde> @ imm = #-0x2a2
 80653bc: ebb5 0c03    	subs.w	r12, r5, r3
 80653c0: bf04         	itt	eq
 80653c2: ebb6 0c02    	subseq.w	r12, r6, r2
 80653c6: ea5f 0c50    	lsrseq.w	r12, r0, #0x1
 80653ca: f150 0000    	adcs	r0, r0, #0x0
 80653ce: eb41 5104    	adc.w	r1, r1, r4, lsl #20
 80653d2: bd70         	pop	{r4, r5, r6, pc}
 80653d4: f00e 4e00    	and	lr, lr, #0x80000000
 80653d8: ea4e 3111    	orr.w	r1, lr, r1, lsr #12
 80653dc: eb14 045c    	adds.w	r4, r4, r12, lsr #1
 80653e0: bfc2         	ittt	gt
 80653e2: ebd4 050c    	rsbsgt	r5, r4, r12
 80653e6: ea41 5104    	orrgt.w	r1, r1, r4, lsl #20
 80653ea: bd70         	popgt	{r4, r5, r6, pc}
 80653ec: f441 1180    	orr	r1, r1, #0x100000
 80653f0: f04f 0e00    	mov.w	lr, #0x0
 80653f4: 3c01         	subs	r4, #0x1
 80653f6: e690         	b	0x806511a <__muldf3+0xde> @ imm = #-0x2e0
 80653f8: ea45 0e06    	orr.w	lr, r5, r6
 80653fc: e68d         	b	0x806511a <__muldf3+0xde> @ imm = #-0x2e6
 80653fe: ea0c 5513    	and.w	r5, r12, r3, lsr #20
 8065402: ea94 0f0c    	teq.w	r4, r12
 8065406: bf08         	it	eq
 8065408: ea95 0f0c    	teqeq.w	r5, r12
 806540c: f43f af3b    	beq.w	0x8065286 <__muldf3+0x24a> @ imm = #-0x18a
 8065410: ea94 0f0c    	teq.w	r4, r12
 8065414: d10a         	bne	0x806542c <__divdf3+0x19c> @ imm = #0x14
 8065416: ea50 3401    	orrs.w	r4, r0, r1, lsl #12
 806541a: f47f af34    	bne.w	0x8065286 <__muldf3+0x24a> @ imm = #-0x198
 806541e: ea95 0f0c    	teq.w	r5, r12
 8065422: f47f af25    	bne.w	0x8065270 <__muldf3+0x234> @ imm = #-0x1b6
 8065426: 4610         	mov	r0, r2
 8065428: 4619         	mov	r1, r3
 806542a: e72c         	b	0x8065286 <__muldf3+0x24a> @ imm = #-0x1a8
 806542c: ea95 0f0c    	teq.w	r5, r12
 8065430: d106         	bne	0x8065440 <__divdf3+0x1b0> @ imm = #0xc
 8065432: ea52 3503    	orrs.w	r5, r2, r3, lsl #12
 8065436: f43f aefd    	beq.w	0x8065234 <__muldf3+0x1f8> @ imm = #-0x206
 806543a: 4610         	mov	r0, r2
 806543c: 4619         	mov	r1, r3
 806543e: e722         	b	0x8065286 <__muldf3+0x24a> @ imm = #-0x1bc
 8065440: ea50 0641    	orrs.w	r6, r0, r1, lsl #1
 8065444: bf18         	it	ne
 8065446: ea52 0643    	orrsne.w	r6, r2, r3, lsl #1
 806544a: f47f aec5    	bne.w	0x80651d8 <__muldf3+0x19c> @ imm = #-0x276
 806544e: ea50 0441    	orrs.w	r4, r0, r1, lsl #1
 8065452: f47f af0d    	bne.w	0x8065270 <__muldf3+0x234> @ imm = #-0x1e6
 8065456: ea52 0543    	orrs.w	r5, r2, r3, lsl #1
 806545a: f47f aeeb    	bne.w	0x8065234 <__muldf3+0x1f8> @ imm = #-0x22a
 806545e: e712         	b	0x8065286 <__muldf3+0x24a> @ imm = #-0x1dc

08065460 <__gtdf2>:
 8065460: f04f 3cff    	mov.w	r12, #0xffffffff
 8065464: e006         	b	0x8065474 <__nedf2+0x4> @ imm = #0xc
 8065466: bf00         	nop

08065468 <__ltdf2>:
 8065468: f04f 0c01    	mov.w	r12, #0x1
 806546c: e002         	b	0x8065474 <__nedf2+0x4> @ imm = #0x4
 806546e: bf00         	nop

08065470 <__nedf2>:
 8065470: f04f 0c01    	mov.w	r12, #0x1
 8065474: f84d cd04    	str	r12, [sp, #-4]!
 8065478: ea4f 0c41    	lsl.w	r12, r1, #0x1
 806547c: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8065480: ea4f 0c43    	lsl.w	r12, r3, #0x1
 8065484: bf18         	it	ne
 8065486: ea7f 5c6c    	mvnsne.w	r12, r12, asr #21
 806548a: d01b         	beq	0x80654c4 <__nedf2+0x54> @ imm = #0x36
 806548c: b001         	add	sp, #0x4
 806548e: ea50 0c41    	orrs.w	r12, r0, r1, lsl #1
 8065492: bf0c         	ite	eq
 8065494: ea52 0c43    	orrseq.w	r12, r2, r3, lsl #1
 8065498: ea91 0f03    	teqne.w	r1, r3
 806549c: bf02         	ittt	eq
 806549e: ea90 0f02    	teqeq.w	r0, r2
 80654a2: 2000         	moveq	r0, #0x0
 80654a4: 4770         	bxeq	lr
 80654a6: f110 0f00    	cmn.w	r0, #0x0
 80654aa: ea91 0f03    	teq.w	r1, r3
 80654ae: bf58         	it	pl
 80654b0: 4299         	cmppl	r1, r3
 80654b2: bf08         	it	eq
 80654b4: 4290         	cmpeq	r0, r2
 80654b6: bf2c         	ite	hs
 80654b8: 17d8         	asrhs	r0, r3, #0x1f
 80654ba: ea6f 70e3    	mvnlo.w	r0, r3, asr #31
 80654be: f040 0001    	orr	r0, r0, #0x1
 80654c2: 4770         	bx	lr
 80654c4: ea4f 0c41    	lsl.w	r12, r1, #0x1
 80654c8: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 80654cc: d102         	bne	0x80654d4 <__nedf2+0x64> @ imm = #0x4
 80654ce: ea50 3c01    	orrs.w	r12, r0, r1, lsl #12
 80654d2: d107         	bne	0x80654e4 <__nedf2+0x74> @ imm = #0xe
 80654d4: ea4f 0c43    	lsl.w	r12, r3, #0x1
 80654d8: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 80654dc: d1d6         	bne	0x806548c <__nedf2+0x1c> @ imm = #-0x54
 80654de: ea52 3c03    	orrs.w	r12, r2, r3, lsl #12
 80654e2: d0d3         	beq	0x806548c <__nedf2+0x1c> @ imm = #-0x5a
 80654e4: f85d 0b04    	ldr	r0, [sp], #4
 80654e8: 4770         	bx	lr
 80654ea: bf00         	nop

080654ec <__aeabi_cdrcmple>:
 80654ec: 4684         	mov	r12, r0
 80654ee: 4610         	mov	r0, r2
 80654f0: 4662         	mov	r2, r12
 80654f2: 468c         	mov	r12, r1
 80654f4: 4619         	mov	r1, r3
 80654f6: 4663         	mov	r3, r12
 80654f8: e000         	b	0x80654fc <__aeabi_cdcmple> @ imm = #0x0
 80654fa: bf00         	nop

080654fc <__aeabi_cdcmple>:
 80654fc: b501         	push	{r0, lr}
 80654fe: f7ff ffb7    	bl	0x8065470 <__nedf2>     @ imm = #-0x92
 8065502: 2800         	cmp	r0, #0x0
 8065504: bf48         	it	mi
 8065506: f110 0f00    	cmnmi.w	r0, #0x0
 806550a: bd01         	pop	{r0, pc}

0806550c <__aeabi_dcmpeq>:
 806550c: f84d ed08    	str	lr, [sp, #-8]!
 8065510: f7ff fff4    	bl	0x80654fc <__aeabi_cdcmple> @ imm = #-0x18
 8065514: bf0c         	ite	eq
 8065516: 2001         	moveq	r0, #0x1
 8065518: 2000         	movne	r0, #0x0
 806551a: f85d fb08    	ldr	pc, [sp], #8
 806551e: bf00         	nop

08065520 <__aeabi_dcmplt>:
 8065520: f84d ed08    	str	lr, [sp, #-8]!
 8065524: f7ff ffea    	bl	0x80654fc <__aeabi_cdcmple> @ imm = #-0x2c
 8065528: bf34         	ite	lo
 806552a: 2001         	movlo	r0, #0x1
 806552c: 2000         	movhs	r0, #0x0
 806552e: f85d fb08    	ldr	pc, [sp], #8
 8065532: bf00         	nop

08065534 <__aeabi_dcmple>:
 8065534: f84d ed08    	str	lr, [sp, #-8]!
 8065538: f7ff ffe0    	bl	0x80654fc <__aeabi_cdcmple> @ imm = #-0x40
 806553c: bf94         	ite	ls
 806553e: 2001         	movls	r0, #0x1
 8065540: 2000         	movhi	r0, #0x0
 8065542: f85d fb08    	ldr	pc, [sp], #8
 8065546: bf00         	nop

08065548 <__aeabi_dcmpge>:
 8065548: f84d ed08    	str	lr, [sp, #-8]!
 806554c: f7ff ffce    	bl	0x80654ec <__aeabi_cdrcmple> @ imm = #-0x64
 8065550: bf94         	ite	ls
 8065552: 2001         	movls	r0, #0x1
 8065554: 2000         	movhi	r0, #0x0
 8065556: f85d fb08    	ldr	pc, [sp], #8
 806555a: bf00         	nop

0806555c <__aeabi_dcmpgt>:
 806555c: f84d ed08    	str	lr, [sp, #-8]!
 8065560: f7ff ffc4    	bl	0x80654ec <__aeabi_cdrcmple> @ imm = #-0x78
 8065564: bf34         	ite	lo
 8065566: 2001         	movlo	r0, #0x1
 8065568: 2000         	movhs	r0, #0x0
 806556a: f85d fb08    	ldr	pc, [sp], #8
 806556e: bf00         	nop

08065570 <__unorddf2>:
 8065570: ea4f 0c41    	lsl.w	r12, r1, #0x1
 8065574: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8065578: d102         	bne	0x8065580 <__unorddf2+0x10> @ imm = #0x4
 806557a: ea50 3c01    	orrs.w	r12, r0, r1, lsl #12
 806557e: d10a         	bne	0x8065596 <__unorddf2+0x26> @ imm = #0x14
 8065580: ea4f 0c43    	lsl.w	r12, r3, #0x1
 8065584: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8065588: d102         	bne	0x8065590 <__unorddf2+0x20> @ imm = #0x4
 806558a: ea52 3c03    	orrs.w	r12, r2, r3, lsl #12
 806558e: d102         	bne	0x8065596 <__unorddf2+0x26> @ imm = #0x4
 8065590: f04f 0000    	mov.w	r0, #0x0
 8065594: 4770         	bx	lr
 8065596: f04f 0001    	mov.w	r0, #0x1
 806559a: 4770         	bx	lr

0806559c <__fixdfsi>:
 806559c: ea4f 0241    	lsl.w	r2, r1, #0x1
 80655a0: f512 1200    	adds.w	r2, r2, #0x200000
 80655a4: d215         	bhs	0x80655d2 <__fixdfsi+0x36> @ imm = #0x2a
 80655a6: d511         	bpl	0x80655cc <__fixdfsi+0x30> @ imm = #0x22
 80655a8: f46f 7378    	mvn	r3, #0x3e0
 80655ac: ebb3 5262    	subs.w	r2, r3, r2, asr #21
 80655b0: d912         	bls	0x80655d8 <__fixdfsi+0x3c> @ imm = #0x24
 80655b2: ea4f 23c1    	lsl.w	r3, r1, #0xb
 80655b6: f043 4300    	orr	r3, r3, #0x80000000
 80655ba: ea43 5350    	orr.w	r3, r3, r0, lsr #21
 80655be: f011 4f00    	tst.w	r1, #0x80000000
 80655c2: fa23 f002    	lsr.w	r0, r3, r2
 80655c6: bf18         	it	ne
 80655c8: 4240         	rsbne	r0, r0, #0
 80655ca: 4770         	bx	lr
 80655cc: f04f 0000    	mov.w	r0, #0x0
 80655d0: 4770         	bx	lr
 80655d2: ea50 3001    	orrs.w	r0, r0, r1, lsl #12
 80655d6: d105         	bne	0x80655e4 <__fixdfsi+0x48> @ imm = #0xa
 80655d8: f011 4000    	ands	r0, r1, #0x80000000
 80655dc: bf08         	it	eq
 80655de: f06f 4000    	mvneq	r0, #0x80000000
 80655e2: 4770         	bx	lr
 80655e4: f04f 0000    	mov.w	r0, #0x0
 80655e8: 4770         	bx	lr
 80655ea: bf00         	nop

080655ec <__aeabi_uldivmod>:
 80655ec: b953         	cbnz	r3, 0x8065604 <__aeabi_uldivmod+0x18> @ imm = #0x14
 80655ee: b94a         	cbnz	r2, 0x8065604 <__aeabi_uldivmod+0x18> @ imm = #0x12
 80655f0: 2900         	cmp	r1, #0x0
 80655f2: bf08         	it	eq
 80655f4: 2800         	cmpeq	r0, #0x0
 80655f6: bf1c         	itt	ne
 80655f8: f04f 31ff    	movne.w	r1, #0xffffffff
 80655fc: f04f 30ff    	movne.w	r0, #0xffffffff
 8065600: f000 b980    	b.w	0x8065904 <__aeabi_ldiv0> @ imm = #0x300
 8065604: f1ad 0c08    	sub.w	r12, sp, #0x8
 8065608: e96d ce04    	strd	r12, lr, [sp, #-16]!
 806560c: f000 f806    	bl	0x806561c <__udivmoddi4> @ imm = #0xc
 8065610: f8dd e004    	ldr.w	lr, [sp, #0x4]
 8065614: e9dd 2302    	ldrd	r2, r3, [sp, #8]
 8065618: b004         	add	sp, #0x10
 806561a: 4770         	bx	lr

0806561c <__udivmoddi4>:
 806561c: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8065620: 9e09         	ldr	r6, [sp, #0x24]
 8065622: 460d         	mov	r5, r1
 8065624: 4604         	mov	r4, r0
 8065626: 460f         	mov	r7, r1
 8065628: 2b00         	cmp	r3, #0x0
 806562a: d147         	bne	0x80656bc <__udivmoddi4+0xa0> @ imm = #0x8e
 806562c: 428a         	cmp	r2, r1
 806562e: 4694         	mov	r12, r2
 8065630: d95f         	bls	0x80656f2 <__udivmoddi4+0xd6> @ imm = #0xbe
 8065632: fab2 f382    	clz	r3, r2
 8065636: b143         	cbz	r3, 0x806564a <__udivmoddi4+0x2e> @ imm = #0x10
 8065638: f1c3 0120    	rsb.w	r1, r3, #0x20
 806563c: 409f         	lsls	r7, r3
 806563e: fa02 fc03    	lsl.w	r12, r2, r3
 8065642: 409c         	lsls	r4, r3
 8065644: fa20 f101    	lsr.w	r1, r0, r1
 8065648: 430f         	orrs	r7, r1
 806564a: ea4f 451c    	lsr.w	r5, r12, #0x10
 806564e: fa1f fe8c    	uxth.w	lr, r12
 8065652: 0c22         	lsrs	r2, r4, #0x10
 8065654: fbb7 f1f5    	udiv	r1, r7, r5
 8065658: fb05 7711    	mls	r7, r5, r1, r7
 806565c: fb01 f00e    	mul	r0, r1, lr
 8065660: ea42 4207    	orr.w	r2, r2, r7, lsl #16
 8065664: 4290         	cmp	r0, r2
 8065666: d908         	bls	0x806567a <__udivmoddi4+0x5e> @ imm = #0x10
 8065668: eb1c 0202    	adds.w	r2, r12, r2
 806566c: f101 37ff    	add.w	r7, r1, #0xffffffff
 8065670: d202         	bhs	0x8065678 <__udivmoddi4+0x5c> @ imm = #0x4
 8065672: 4290         	cmp	r0, r2
 8065674: f200 8134    	bhi.w	0x80658e0 <__udivmoddi4+0x2c4> @ imm = #0x268
 8065678: 4639         	mov	r1, r7
 806567a: 1a12         	subs	r2, r2, r0
 806567c: b2a4         	uxth	r4, r4
 806567e: fbb2 f0f5    	udiv	r0, r2, r5
 8065682: fb05 2210    	mls	r2, r5, r0, r2
 8065686: fb00 fe0e    	mul	lr, r0, lr
 806568a: ea44 4402    	orr.w	r4, r4, r2, lsl #16
 806568e: 45a6         	cmp	lr, r4
 8065690: d908         	bls	0x80656a4 <__udivmoddi4+0x88> @ imm = #0x10
 8065692: eb1c 0404    	adds.w	r4, r12, r4
 8065696: f100 32ff    	add.w	r2, r0, #0xffffffff
 806569a: d202         	bhs	0x80656a2 <__udivmoddi4+0x86> @ imm = #0x4
 806569c: 45a6         	cmp	lr, r4
 806569e: f200 8119    	bhi.w	0x80658d4 <__udivmoddi4+0x2b8> @ imm = #0x232
 80656a2: 4610         	mov	r0, r2
 80656a4: ea40 4001    	orr.w	r0, r0, r1, lsl #16
 80656a8: eba4 040e    	sub.w	r4, r4, lr
 80656ac: 2100         	movs	r1, #0x0
 80656ae: b11e         	cbz	r6, 0x80656b8 <__udivmoddi4+0x9c> @ imm = #0x6
 80656b0: 40dc         	lsrs	r4, r3
 80656b2: 2300         	movs	r3, #0x0
 80656b4: e9c6 4300    	strd	r4, r3, [r6]
 80656b8: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80656bc: 428b         	cmp	r3, r1
 80656be: d908         	bls	0x80656d2 <__udivmoddi4+0xb6> @ imm = #0x10
 80656c0: 2e00         	cmp	r6, #0x0
 80656c2: f000 80fb    	beq.w	0x80658bc <__udivmoddi4+0x2a0> @ imm = #0x1f6
 80656c6: 2100         	movs	r1, #0x0
 80656c8: e9c6 0500    	strd	r0, r5, [r6]
 80656cc: 4608         	mov	r0, r1
 80656ce: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80656d2: fab3 f183    	clz	r1, r3
 80656d6: 2900         	cmp	r1, #0x0
 80656d8: d14b         	bne	0x8065772 <__udivmoddi4+0x156> @ imm = #0x96
 80656da: 42ab         	cmp	r3, r5
 80656dc: f0c0 80f1    	blo.w	0x80658c2 <__udivmoddi4+0x2a6> @ imm = #0x1e2
 80656e0: 4282         	cmp	r2, r0
 80656e2: f240 80ee    	bls.w	0x80658c2 <__udivmoddi4+0x2a6> @ imm = #0x1dc
 80656e6: 4608         	mov	r0, r1
 80656e8: 2e00         	cmp	r6, #0x0
 80656ea: d0e5         	beq	0x80656b8 <__udivmoddi4+0x9c> @ imm = #-0x36
 80656ec: e9c6 4700    	strd	r4, r7, [r6]
 80656f0: e7e2         	b	0x80656b8 <__udivmoddi4+0x9c> @ imm = #-0x3c
 80656f2: b902         	cbnz	r2, 0x80656f6 <__udivmoddi4+0xda> @ imm = #0x0
 80656f4: deff         	udf	#0xff
 80656f6: fab2 f382    	clz	r3, r2
 80656fa: 2b00         	cmp	r3, #0x0
 80656fc: f040 809d    	bne.w	0x806583a <__udivmoddi4+0x21e> @ imm = #0x13a
 8065700: 1a8d         	subs	r5, r1, r2
 8065702: ea4f 4e12    	lsr.w	lr, r2, #0x10
 8065706: b297         	uxth	r7, r2
 8065708: 2101         	movs	r1, #0x1
 806570a: fbb5 f2fe    	udiv	r2, r5, lr
 806570e: fb0e 5012    	mls	r0, lr, r2, r5
 8065712: 0c25         	lsrs	r5, r4, #0x10
 8065714: ea45 4500    	orr.w	r5, r5, r0, lsl #16
 8065718: fb07 f002    	mul	r0, r7, r2
 806571c: 42a8         	cmp	r0, r5
 806571e: d90f         	bls	0x8065740 <__udivmoddi4+0x124> @ imm = #0x1e
 8065720: eb1c 0505    	adds.w	r5, r12, r5
 8065724: f102 38ff    	add.w	r8, r2, #0xffffffff
 8065728: bf2c         	ite	hs
 806572a: f04f 0901    	movhs.w	r9, #0x1
 806572e: f04f 0900    	movlo.w	r9, #0x0
 8065732: 42a8         	cmp	r0, r5
 8065734: d903         	bls	0x806573e <__udivmoddi4+0x122> @ imm = #0x6
 8065736: f1b9 0f00    	cmp.w	r9, #0x0
 806573a: f000 80ce    	beq.w	0x80658da <__udivmoddi4+0x2be> @ imm = #0x19c
 806573e: 4642         	mov	r2, r8
 8065740: 1a2d         	subs	r5, r5, r0
 8065742: b2a4         	uxth	r4, r4
 8065744: fbb5 f0fe    	udiv	r0, r5, lr
 8065748: fb0e 5510    	mls	r5, lr, r0, r5
 806574c: fb00 f707    	mul	r7, r0, r7
 8065750: ea44 4405    	orr.w	r4, r4, r5, lsl #16
 8065754: 42a7         	cmp	r7, r4
 8065756: d908         	bls	0x806576a <__udivmoddi4+0x14e> @ imm = #0x10
 8065758: eb1c 0404    	adds.w	r4, r12, r4
 806575c: f100 35ff    	add.w	r5, r0, #0xffffffff
 8065760: d202         	bhs	0x8065768 <__udivmoddi4+0x14c> @ imm = #0x4
 8065762: 42a7         	cmp	r7, r4
 8065764: f200 80b3    	bhi.w	0x80658ce <__udivmoddi4+0x2b2> @ imm = #0x166
 8065768: 4628         	mov	r0, r5
 806576a: 1be4         	subs	r4, r4, r7
 806576c: ea40 4002    	orr.w	r0, r0, r2, lsl #16
 8065770: e79d         	b	0x80656ae <__udivmoddi4+0x92> @ imm = #-0xc6
 8065772: f1c1 0720    	rsb.w	r7, r1, #0x20
 8065776: 408b         	lsls	r3, r1
 8065778: fa05 f401    	lsl.w	r4, r5, r1
 806577c: fa22 fc07    	lsr.w	r12, r2, r7
 8065780: 40fd         	lsrs	r5, r7
 8065782: 408a         	lsls	r2, r1
 8065784: ea4c 0c03    	orr.w	r12, r12, r3
 8065788: fa20 f307    	lsr.w	r3, r0, r7
 806578c: ea4f 491c    	lsr.w	r9, r12, #0x10
 8065790: 431c         	orrs	r4, r3
 8065792: fa1f fe8c    	uxth.w	lr, r12
 8065796: fa00 f301    	lsl.w	r3, r0, r1
 806579a: 0c20         	lsrs	r0, r4, #0x10
 806579c: fbb5 f8f9    	udiv	r8, r5, r9
 80657a0: fb09 5518    	mls	r5, r9, r8, r5
 80657a4: ea40 4505    	orr.w	r5, r0, r5, lsl #16
 80657a8: fb08 f00e    	mul	r0, r8, lr
 80657ac: 42a8         	cmp	r0, r5
 80657ae: d90f         	bls	0x80657d0 <__udivmoddi4+0x1b4> @ imm = #0x1e
 80657b0: eb1c 0505    	adds.w	r5, r12, r5
 80657b4: f108 3aff    	add.w	r10, r8, #0xffffffff
 80657b8: bf2c         	ite	hs
 80657ba: f04f 0b01    	movhs.w	r11, #0x1
 80657be: f04f 0b00    	movlo.w	r11, #0x0
 80657c2: 42a8         	cmp	r0, r5
 80657c4: d903         	bls	0x80657ce <__udivmoddi4+0x1b2> @ imm = #0x6
 80657c6: f1bb 0f00    	cmp.w	r11, #0x0
 80657ca: f000 808c    	beq.w	0x80658e6 <__udivmoddi4+0x2ca> @ imm = #0x118
 80657ce: 46d0         	mov	r8, r10
 80657d0: 1a2d         	subs	r5, r5, r0
 80657d2: b2a4         	uxth	r4, r4
 80657d4: fbb5 f0f9    	udiv	r0, r5, r9
 80657d8: fb09 5510    	mls	r5, r9, r0, r5
 80657dc: fb00 fe0e    	mul	lr, r0, lr
 80657e0: ea44 4505    	orr.w	r5, r4, r5, lsl #16
 80657e4: 45ae         	cmp	lr, r5
 80657e6: d907         	bls	0x80657f8 <__udivmoddi4+0x1dc> @ imm = #0xe
 80657e8: eb1c 0505    	adds.w	r5, r12, r5
 80657ec: f100 34ff    	add.w	r4, r0, #0xffffffff
 80657f0: d201         	bhs	0x80657f6 <__udivmoddi4+0x1da> @ imm = #0x2
 80657f2: 45ae         	cmp	lr, r5
 80657f4: d87e         	bhi	0x80658f4 <__udivmoddi4+0x2d8> @ imm = #0xfc
 80657f6: 4620         	mov	r0, r4
 80657f8: ea40 4008    	orr.w	r0, r0, r8, lsl #16
 80657fc: eba5 050e    	sub.w	r5, r5, lr
 8065800: fba0 9802    	umull	r9, r8, r0, r2
 8065804: 4545         	cmp	r5, r8
 8065806: 464c         	mov	r4, r9
 8065808: 46c6         	mov	lr, r8
 806580a: d302         	blo	0x8065812 <__udivmoddi4+0x1f6> @ imm = #0x4
 806580c: d106         	bne	0x806581c <__udivmoddi4+0x200> @ imm = #0xc
 806580e: 454b         	cmp	r3, r9
 8065810: d204         	bhs	0x806581c <__udivmoddi4+0x200> @ imm = #0x8
 8065812: 3801         	subs	r0, #0x1
 8065814: ebb9 0402    	subs.w	r4, r9, r2
 8065818: eb68 0e0c    	sbc.w	lr, r8, r12
 806581c: 2e00         	cmp	r6, #0x0
 806581e: d06f         	beq	0x8065900 <__udivmoddi4+0x2e4> @ imm = #0xde
 8065820: 1b1a         	subs	r2, r3, r4
 8065822: eb65 050e    	sbc.w	r5, r5, lr
 8065826: fa22 f301    	lsr.w	r3, r2, r1
 806582a: fa05 f707    	lsl.w	r7, r5, r7
 806582e: 40cd         	lsrs	r5, r1
 8065830: 2100         	movs	r1, #0x0
 8065832: 431f         	orrs	r7, r3
 8065834: e9c6 7500    	strd	r7, r5, [r6]
 8065838: e73e         	b	0x80656b8 <__udivmoddi4+0x9c> @ imm = #-0x184
 806583a: fa02 fc03    	lsl.w	r12, r2, r3
 806583e: f1c3 0020    	rsb.w	r0, r3, #0x20
 8065842: fa01 f203    	lsl.w	r2, r1, r3
 8065846: ea4f 4e1c    	lsr.w	lr, r12, #0x10
 806584a: 40c1         	lsrs	r1, r0
 806584c: fa24 f500    	lsr.w	r5, r4, r0
 8065850: fa1f f78c    	uxth.w	r7, r12
 8065854: 409c         	lsls	r4, r3
 8065856: 4315         	orrs	r5, r2
 8065858: fbb1 f0fe    	udiv	r0, r1, lr
 806585c: 0c2a         	lsrs	r2, r5, #0x10
 806585e: fb0e 1110    	mls	r1, lr, r0, r1
 8065862: ea42 4201    	orr.w	r2, r2, r1, lsl #16
 8065866: fb00 f107    	mul	r1, r0, r7
 806586a: 4291         	cmp	r1, r2
 806586c: d90e         	bls	0x806588c <__udivmoddi4+0x270> @ imm = #0x1c
 806586e: eb1c 0202    	adds.w	r2, r12, r2
 8065872: f100 38ff    	add.w	r8, r0, #0xffffffff
 8065876: bf2c         	ite	hs
 8065878: f04f 0901    	movhs.w	r9, #0x1
 806587c: f04f 0900    	movlo.w	r9, #0x0
 8065880: 4291         	cmp	r1, r2
 8065882: d902         	bls	0x806588a <__udivmoddi4+0x26e> @ imm = #0x4
 8065884: f1b9 0f00    	cmp.w	r9, #0x0
 8065888: d031         	beq	0x80658ee <__udivmoddi4+0x2d2> @ imm = #0x62
 806588a: 4640         	mov	r0, r8
 806588c: 1a52         	subs	r2, r2, r1
 806588e: b2ad         	uxth	r5, r5
 8065890: fbb2 f1fe    	udiv	r1, r2, lr
 8065894: fb0e 2211    	mls	r2, lr, r1, r2
 8065898: ea45 4502    	orr.w	r5, r5, r2, lsl #16
 806589c: fb01 f207    	mul	r2, r1, r7
 80658a0: 42aa         	cmp	r2, r5
 80658a2: d907         	bls	0x80658b4 <__udivmoddi4+0x298> @ imm = #0xe
 80658a4: eb1c 0505    	adds.w	r5, r12, r5
 80658a8: f101 38ff    	add.w	r8, r1, #0xffffffff
 80658ac: d201         	bhs	0x80658b2 <__udivmoddi4+0x296> @ imm = #0x2
 80658ae: 42aa         	cmp	r2, r5
 80658b0: d823         	bhi	0x80658fa <__udivmoddi4+0x2de> @ imm = #0x46
 80658b2: 4641         	mov	r1, r8
 80658b4: 1aad         	subs	r5, r5, r2
 80658b6: ea41 4100    	orr.w	r1, r1, r0, lsl #16
 80658ba: e726         	b	0x806570a <__udivmoddi4+0xee> @ imm = #-0x1b4
 80658bc: 4631         	mov	r1, r6
 80658be: 4630         	mov	r0, r6
 80658c0: e6fa         	b	0x80656b8 <__udivmoddi4+0x9c> @ imm = #-0x20c
 80658c2: 1a84         	subs	r4, r0, r2
 80658c4: eb65 0303    	sbc.w	r3, r5, r3
 80658c8: 2001         	movs	r0, #0x1
 80658ca: 461f         	mov	r7, r3
 80658cc: e70c         	b	0x80656e8 <__udivmoddi4+0xcc> @ imm = #-0x1e8
 80658ce: 4464         	add	r4, r12
 80658d0: 3802         	subs	r0, #0x2
 80658d2: e74a         	b	0x806576a <__udivmoddi4+0x14e> @ imm = #-0x16c
 80658d4: 4464         	add	r4, r12
 80658d6: 3802         	subs	r0, #0x2
 80658d8: e6e4         	b	0x80656a4 <__udivmoddi4+0x88> @ imm = #-0x238
 80658da: 3a02         	subs	r2, #0x2
 80658dc: 4465         	add	r5, r12
 80658de: e72f         	b	0x8065740 <__udivmoddi4+0x124> @ imm = #-0x1a2
 80658e0: 3902         	subs	r1, #0x2
 80658e2: 4462         	add	r2, r12
 80658e4: e6c9         	b	0x806567a <__udivmoddi4+0x5e> @ imm = #-0x26e
 80658e6: f1a8 0802    	sub.w	r8, r8, #0x2
 80658ea: 4465         	add	r5, r12
 80658ec: e770         	b	0x80657d0 <__udivmoddi4+0x1b4> @ imm = #-0x120
 80658ee: 3802         	subs	r0, #0x2
 80658f0: 4462         	add	r2, r12
 80658f2: e7cb         	b	0x806588c <__udivmoddi4+0x270> @ imm = #-0x6a
 80658f4: 3802         	subs	r0, #0x2
 80658f6: 4465         	add	r5, r12
 80658f8: e77e         	b	0x80657f8 <__udivmoddi4+0x1dc> @ imm = #-0x104
 80658fa: 3902         	subs	r1, #0x2
 80658fc: 4465         	add	r5, r12
 80658fe: e7d9         	b	0x80658b4 <__udivmoddi4+0x298> @ imm = #-0x4e
 8065900: 4631         	mov	r1, r6
 8065902: e6d9         	b	0x80656b8 <__udivmoddi4+0x9c> @ imm = #-0x24e

08065904 <__aeabi_ldiv0>:
 8065904: 4770         	bx	lr
 8065906: bf00         	nop

08065908 <$d>:
 8065908: 00 00 00 00  	.word	0x00000000
 806590c: 00 00 00 00  	.word	0x00000000
 8065910: 01 02 03 04  	.word	0x04030201
 8065914: 06 07 08 09  	.word	0x09080706

08065918 <$d>:
 8065918: a0 86 01 00  	.word	0x000186a0
 806591c: 40 0d 03 00  	.word	0x00030d40
 8065920: 80 1a 06 00  	.word	0x00061a80
 8065924: 00 35 0c 00  	.word	0x000c3500
 8065928: 40 42 0f 00  	.word	0x000f4240
 806592c: 80 84 1e 00  	.word	0x001e8480
 8065930: 00 09 3d 00  	.word	0x003d0900
 8065934: 00 12 7a 00  	.word	0x007a1200
 8065938: 00 24 f4 00  	.word	0x00f42400
 806593c: 00 36 6e 01  	.word	0x016e3600
 8065940: 00 48 e8 01  	.word	0x01e84800
 8065944: 00 6c dc 02  	.word	0x02dc6c00
 8065948: 00 00 00 00  	.word	0x00000000
 806594c: 00 00 00 00  	.word	0x00000000
 8065950: 00 00 00 00  	.word	0x00000000
 8065954: 00 00 00 00  	.word	0x00000000

08065958 <$d>:
 8065958: 30 78 25 78  	.word	0x78257830
 806595c: 0a 00 74 65  	.word	0x6574000a
 8065960: 73 74 54 68  	.word	0x68547473
 8065964: 72 65 61 64  	.word	0x64616572
 8065968: 00 00 00 00  	.word	0x00000000

0806596c <$d>:
 806596c: 5d e8 05 08  	.word	0x0805e85d
 8065970: 5e 59 06 08  	.word	0x0806595e
 8065974: 80 00 00 00  	.word	0x00000080
 8065978: 00 00 00 00  	.word	0x00000000
 806597c: 01 00 00 00  	.word	0x00000001
 8065980: 60 2d 00 20  	.word	0x20002d60
 8065984: 00 00 02 42  	.word	0x42020000
 8065988: 00 20 00 00  	.word	0x00002000
 806598c: 02 00 00 00  	.word	0x00000002
 8065990: 00 00 00 00  	.word	0x00000000
 8065994: 00 00 00 00  	.word	0x00000000
 8065998: 00 00 00 00  	.word	0x00000000
 806599c: 00 00 00 00  	.word	0x00000000
 80659a0: 00 00 00 00  	.word	0x00000000
 80659a4: 00 00 00 00  	.word	0x00000000

080659a8 <$d>:
 80659a8: 0f 00 00 00  	.word	0x0000000f

080659ac <$d>:
 80659ac: 49 44 4c 45  	.word	0x454c4449
 80659b0: 00           	.byte	0x00

080659b1 <$d>:
 80659b1: 54 6d 72 20  	.word	0x20726d54
 80659b5: 53 76 63 00  	.word	0x00637653
 80659b9: 54 6d 72 51  	.word	0x51726d54
 80659bd: 00 00        	.short	0x0000
 80659bf: 00           	.byte	0x00

080659c0 <$d>:
 80659c0: 49 4e 46 00  	.word	0x00464e49
 80659c4: 69 6e 66 00  	.word	0x00666e69
 80659c8: 4e 41 4e 00  	.word	0x004e414e
 80659cc: 6e 61 6e 00  	.word	0x006e616e
 80659d0: 30 31 32 33  	.word	0x33323130
 80659d4: 34 35 36 37  	.word	0x37363534
 80659d8: 38 39 61 62  	.word	0x62613938
 80659dc: 63 64 65 66  	.word	0x66656463
 80659e0: 00 00 00 00  	.word	0x00000000

080659e4 <$d>:
 80659e4: 30 31 32 33  	.word	0x33323130
 80659e8: 34 35 36 37  	.word	0x37363534
 80659ec: 38 39 41 42  	.word	0x42413938
 80659f0: 43 44 45 46  	.word	0x46454443
 80659f4: 00 00 00 00  	.word	0x00000000
 80659f8: 28 6e 75 6c  	.word	0x6c756e28
 80659fc: 6c 29 00 00  	.word	0x0000296c
 8065a00: 30 00 00 00  	.word	0x00000030

08065a04 <$d>:
 8065a04: 20 20 20 20  	.word	0x20202020
 8065a08: 20 20 20 20  	.word	0x20202020
 8065a0c: 20 20 20 20  	.word	0x20202020
 8065a10: 20 20 20 20  	.word	0x20202020

08065a14 <zeroes.0>:
 8065a14: 30 30 30 30 30 30 30 30         00000000
 8065a1c: 30 30 30 30 30 30 30 30         00000000

08065a24 <$d>:
 8065a24: 4e 61 4e 00  	.word	0x004e614e
 8065a28: 49 6e 66 69  	.word	0x69666e49
 8065a2c: 6e 69 74 79  	.word	0x7974696e
 8065a30: 00 00 00 00  	.word	0x00000000

08065a34 <$d>:
 8065a34: 42 61 6c 6c  	.word	0x6c6c6142
 8065a38: 6f 63 20 73  	.word	0x7320636f
 8065a3c: 75 63 63 65  	.word	0x65636375
 8065a40: 65 64 65 64  	.word	0x64656465
 8065a44: 00 00 00 00  	.word	0x00000000
 8065a48: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 8065a4c: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 8065a50: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 8065a54: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 8065a58: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 8065a5c: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 8065a60: 6e 65 77 6c  	.word	0x6c77656e
 8065a64: 69 62 2f 6c  	.word	0x6c2f6269
 8065a68: 69 62 63 2f  	.word	0x2f636269
 8065a6c: 73 74 64 6c  	.word	0x6c647473
 8065a70: 69 62 2f 64  	.word	0x642f6269
 8065a74: 74 6f 61 2e  	.word	0x2e616f74
 8065a78: 63 00 00 00  	.word	0x00000063

08065a7c <$d>:
 8065a7c: 98 23 00 20  	.word	0x20002398
 8065a80: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 8065a84: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 8065a88: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 8065a8c: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 8065a90: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 8065a94: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 8065a98: 6e 65 77 6c  	.word	0x6c77656e
 8065a9c: 69 62 2f 6c  	.word	0x6c2f6269
 8065aa0: 69 62 63 2f  	.word	0x2f636269
 8065aa4: 73 74 64 6c  	.word	0x6c647473
 8065aa8: 69 62 2f 6d  	.word	0x6d2f6269
 8065aac: 70 72 65 63  	.word	0x63657270
 8065ab0: 2e 63 00 00  	.word	0x0000632e
 8065ab4: 00 00 00 00  	.word	0x00000000

08065ab8 <$d>:
 8065ab8: 05 00 00 00  	.word	0x00000005
 8065abc: 19 00 00 00  	.word	0x00000019
 8065ac0: 7d 00 00 00  	.word	0x0000007d
 8065ac4: 00 00 00 00  	.word	0x00000000

08065ac8 <__mprec_tens>:
 8065ac8: 00 00 00 00 00 00 f0 3f         .......?
 8065ad0: 00 00 00 00 00 00 24 40         ......$@
 8065ad8: 00 00 00 00 00 00 59 40         ......Y@
 8065ae0: 00 00 00 00 00 40 8f 40         .....@.@
 8065ae8: 00 00 00 00 00 88 c3 40         .......@
 8065af0: 00 00 00 00 00 6a f8 40         .....j.@
 8065af8: 00 00 00 00 80 84 2e 41         .......A
 8065b00: 00 00 00 00 d0 12 63 41         ......cA
 8065b08: 00 00 00 00 84 d7 97 41         .......A
 8065b10: 00 00 00 00 65 cd cd 41         ....e..A
 8065b18: 00 00 00 20 5f a0 02 42         ... _..B
 8065b20: 00 00 00 e8 76 48 37 42         ....vH7B
 8065b28: 00 00 00 a2 94 1a 6d 42         ......mB
 8065b30: 00 00 40 e5 9c 30 a2 42         ..@..0.B
 8065b38: 00 00 90 1e c4 bc d6 42         .......B
 8065b40: 00 00 34 26 f5 6b 0c 43         ..4&.k.C
 8065b48: 00 80 e0 37 79 c3 41 43         ...7y.AC
 8065b50: 00 a0 d8 85 57 34 76 43         ....W4vC
 8065b58: 00 c8 4e 67 6d c1 ab 43         ..Ngm..C
 8065b60: 00 3d 91 60 e4 58 e1 43         .=.`.X.C
 8065b68: 40 8c b5 78 1d af 15 44         @..x...D
 8065b70: 50 ef e2 d6 e4 1a 4b 44         P.....KD
 8065b78: 92 d5 4d 06 cf f0 80 44         ..M....D
 8065b80: f6 4a e1 c7 02 2d b5 44         .J...-.D
 8065b88: b4 9d d9 79 43 78 ea 44         ...yCx.D

08065b90 <__mprec_tinytens>:
 8065b90: bc 89 d8 97 b2 d2 9c 3c         .......<
 8065b98: 33 a7 a8 d5 23 f6 49 39         3...#.I9
 8065ba0: 3d a7 f4 44 fd 0f a5 32         =..D...2
 8065ba8: 9d 97 8c cf 08 ba 5b 25         ......[%
 8065bb0: 43 6f ac 64 28 06 c8 0a         Co.d(...

08065bb8 <__mprec_bigtens>:
 8065bb8: 00 80 e0 37 79 c3 41 43         ...7y.AC
 8065bc0: 17 6e 05 b5 b5 b8 93 46         .n.....F
 8065bc8: f5 f9 3f e9 03 4f 38 4d         ..?..O8M
 8065bd0: 32 1d 30 f9 48 77 82 5a         2.0.Hw.Z
 8065bd8: 3c bf 73 7f dd 4f 15 75         <.s..O.u

08065be0 <$d>:
 8065be0: 20 20 20 20  	.word	0x20202020
 8065be4: 20 20 20 20  	.word	0x20202020
 8065be8: 20 20 20 20  	.word	0x20202020
 8065bec: 20 20 20 20  	.word	0x20202020

08065bf0 <zeroes.0>:
 8065bf0: 30 30 30 30 30 30 30 30         00000000
 8065bf8: 30 30 30 30 30 30 30 30         00000000
 8065c00: 2c 20 66 75 6e 63 74 69         , functi
 8065c08: 6f 6e 3a 20                     on: 

08065c0c <$d>:
 8065c0c: 00 00 00 00  	.word	0x00000000
 8065c10: 61 73 73 65  	.word	0x65737361
 8065c14: 72 74 69 6f  	.word	0x6f697472
 8065c18: 6e 20 22 25  	.word	0x2522206e
 8065c1c: 73 22 20 66  	.word	0x66202273
 8065c20: 61 69 6c 65  	.word	0x656c6961
 8065c24: 64 3a 20 66  	.word	0x66203a64
 8065c28: 69 6c 65 20  	.word	0x20656c69
 8065c2c: 22 25 73 22  	.word	0x22732522
 8065c30: 2c 20 6c 69  	.word	0x696c202c
 8065c34: 6e 65 20 25  	.word	0x2520656e
 8065c38: 64 25 73 25  	.word	0x25732564
 8065c3c: 73 0a 00 00  	.word	0x00000a73

08065c40 <$d>:
 8065c40: 43 00 00 00  	.word	0x00000043
 8065c44: 50 4f 53 49  	.word	0x49534f50
 8065c48: 58 00 00 00  	.word	0x00000058
 8065c4c: 2e 00 00 00  	.word	0x0000002e

08065c50 <$d>:
 8065c50: 00 20 20 20  	.word	0x20202000
 8065c54: 20 20 20 20  	.word	0x20202020
 8065c58: 20 20 28 28  	.word	0x28282020
 8065c5c: 28 28 28 20  	.word	0x20282828
 8065c60: 20 20 20 20  	.word	0x20202020
 8065c64: 20 20 20 20  	.word	0x20202020
 8065c68: 20 20 20 20  	.word	0x20202020
 8065c6c: 20 20 20 20  	.word	0x20202020
 8065c70: 20 88 10 10  	.word	0x10108820
 8065c74: 10 10 10 10  	.word	0x10101010
 8065c78: 10 10 10 10  	.word	0x10101010
 8065c7c: 10 10 10 10  	.word	0x10101010
 8065c80: 10 04 04 04  	.word	0x04040410
 8065c84: 04 04 04 04  	.word	0x04040404
 8065c88: 04 04 04 10  	.word	0x10040404
 8065c8c: 10 10 10 10  	.word	0x10101010
 8065c90: 10 10 41 41  	.word	0x41411010
 8065c94: 41 41 41 41  	.word	0x41414141
 8065c98: 01 01 01 01  	.word	0x01010101
 8065c9c: 01 01 01 01  	.word	0x01010101
 8065ca0: 01 01 01 01  	.word	0x01010101
 8065ca4: 01 01 01 01  	.word	0x01010101
 8065ca8: 01 01 01 01  	.word	0x01010101
 8065cac: 10 10 10 10  	.word	0x10101010
 8065cb0: 10 10 42 42  	.word	0x42421010
 8065cb4: 42 42 42 42  	.word	0x42424242
 8065cb8: 02 02 02 02  	.word	0x02020202
 8065cbc: 02 02 02 02  	.word	0x02020202
 8065cc0: 02 02 02 02  	.word	0x02020202
 8065cc4: 02 02 02 02  	.word	0x02020202
 8065cc8: 02 02 02 02  	.word	0x02020202
 8065ccc: 10 10 10 10  	.word	0x10101010
 8065cd0: 20 00 00 00  	.word	0x00000020
 8065cd4: 00 00 00 00  	.word	0x00000000
 8065cd8: 00 00 00 00  	.word	0x00000000
 8065cdc: 00 00 00 00  	.word	0x00000000
 8065ce0: 00 00 00 00  	.word	0x00000000
 8065ce4: 00 00 00 00  	.word	0x00000000
 8065ce8: 00 00 00 00  	.word	0x00000000
 8065cec: 00 00 00 00  	.word	0x00000000
 8065cf0: 00 00 00 00  	.word	0x00000000
 8065cf4: 00 00 00 00  	.word	0x00000000
 8065cf8: 00 00 00 00  	.word	0x00000000
 8065cfc: 00 00 00 00  	.word	0x00000000
 8065d00: 00 00 00 00  	.word	0x00000000
 8065d04: 00 00 00 00  	.word	0x00000000
 8065d08: 00 00 00 00  	.word	0x00000000
 8065d0c: 00 00 00 00  	.word	0x00000000
 8065d10: 00 00 00 00  	.word	0x00000000
 8065d14: 00 00 00 00  	.word	0x00000000
 8065d18: 00 00 00 00  	.word	0x00000000
 8065d1c: 00 00 00 00  	.word	0x00000000
 8065d20: 00 00 00 00  	.word	0x00000000
 8065d24: 00 00 00 00  	.word	0x00000000
 8065d28: 00 00 00 00  	.word	0x00000000
 8065d2c: 00 00 00 00  	.word	0x00000000
 8065d30: 00 00 00 00  	.word	0x00000000
 8065d34: 00 00 00 00  	.word	0x00000000
 8065d38: 00 00 00 00  	.word	0x00000000
 8065d3c: 00 00 00 00  	.word	0x00000000
 8065d40: 00 00 00 00  	.word	0x00000000
 8065d44: 00 00 00 00  	.word	0x00000000
 8065d48: 00 00 00 00  	.word	0x00000000
 8065d4c: 00 00 00 00  	.word	0x00000000
 8065d50: 00 00 00 00  	.word	0x00000000
 8065d54: 00 00 00 00  	.word	0x00000000
 8065d58: 00 00 00 00  	.word	0x00000000
 8065d5c: 00 00        	.short	0x0000
 8065d5e: 00           	.byte	0x00

08065d5f <__unprivileged_flash_end__>:
 8065d5f: 00           	.byte	0x00
