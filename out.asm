
build/bin/ns_app.elf:	file format elf32-littlearm

Disassembly of section .privileged_functions:

08055200 <xTaskCreateRestricted>:
;     {
 8055200: b580         	push	{r7, lr}
 8055202: 466f         	mov	r7, sp
 8055204: b086         	sub	sp, #0x18
 8055206: f643 5340    	movw	r3, #0x3d40
 805520a: f2c2 0300    	movt	r3, #0x2000
 805520e: 681a         	ldr	r2, [r3]
 8055210: f642 5c40    	movw	r12, #0x2d40
 8055214: f2c2 0c00    	movt	r12, #0x2000
 8055218: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805521c: 3201         	adds	r2, #0x1
 805521e: 601a         	str	r2, [r3]
 8055220: 9005         	str	r0, [sp, #0x14]
 8055222: 9104         	str	r1, [sp, #0x10]
;         pxNewTCB = prvCreateRestrictedTask( pxTaskDefinition, pxCreatedTask );
 8055224: 9805         	ldr	r0, [sp, #0x14]
 8055226: 9904         	ldr	r1, [sp, #0x10]
 8055228: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x8055258 <xTaskCreateRestricted+0x58>
 805522a: 4790         	blx	r2
 805522c: 9003         	str	r0, [sp, #0xc]
;         if( pxNewTCB != NULL )
 805522e: 9803         	ldr	r0, [sp, #0xc]
 8055230: b130         	cbz	r0, 0x8055240 <xTaskCreateRestricted+0x40> @ imm = #0xc
 8055232: e7ff         	b	0x8055234 <xTaskCreateRestricted+0x34> @ imm = #-0x2
;             prvAddNewTaskToReadyList( pxNewTCB );
 8055234: 9803         	ldr	r0, [sp, #0xc]
 8055236: 4909         	ldr	r1, [pc, #0x24]         @ 0x805525c <xTaskCreateRestricted+0x5c>
 8055238: 4788         	blx	r1
 805523a: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805523c: 9002         	str	r0, [sp, #0x8]
;         }
 805523e: e003         	b	0x8055248 <xTaskCreateRestricted+0x48> @ imm = #0x6
 8055240: f04f 30ff    	mov.w	r0, #0xffffffff
;             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8055244: 9002         	str	r0, [sp, #0x8]
 8055246: e7ff         	b	0x8055248 <xTaskCreateRestricted+0x48> @ imm = #-0x2
;         return xReturn;
 8055248: 9802         	ldr	r0, [sp, #0x8]
 805524a: 9001         	str	r0, [sp, #0x4]
 805524c: 4804         	ldr	r0, [pc, #0x10]         @ 0x8055260 <xTaskCreateRestricted+0x60>
 805524e: 4780         	blx	r0
 8055250: 9801         	ldr	r0, [sp, #0x4]
 8055252: b006         	add	sp, #0x18
 8055254: bd80         	pop	{r7, pc}
 8055256: bf00         	nop

08055258 <$d.1>:
 8055258: 65 52 05 08  	.word	0x08055265
 805525c: 39 53 05 08  	.word	0x08055339
 8055260: 21 05 06 08  	.word	0x08060521

08055264 <prvCreateRestrictedTask>:
;     {
 8055264: b5f0         	push	{r4, r5, r6, r7, lr}
 8055266: af03         	add	r7, sp, #0xc
 8055268: f84d bd04    	str	r11, [sp, #-4]!
 805526c: b088         	sub	sp, #0x20
 805526e: f643 5340    	movw	r3, #0x3d40
 8055272: f2c2 0300    	movt	r3, #0x2000
 8055276: 681a         	ldr	r2, [r3]
 8055278: f642 5c40    	movw	r12, #0x2d40
 805527c: f2c2 0c00    	movt	r12, #0x2000
 8055280: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8055284: 3201         	adds	r2, #0x1
 8055286: 601a         	str	r2, [r3]
 8055288: 9007         	str	r0, [sp, #0x1c]
 805528a: 9106         	str	r1, [sp, #0x18]
;         configASSERT( pxTaskDefinition->puxStackBuffer );
 805528c: 9807         	ldr	r0, [sp, #0x1c]
 805528e: 6940         	ldr	r0, [r0, #0x14]
 8055290: b920         	cbnz	r0, 0x805529c <prvCreateRestrictedTask+0x38> @ imm = #0x8
 8055292: e7ff         	b	0x8055294 <prvCreateRestrictedTask+0x30> @ imm = #-0x2
 8055294: 4827         	ldr	r0, [pc, #0x9c]         @ 0x8055334 <prvCreateRestrictedTask+0xd0>
 8055296: 4780         	blx	r0
 8055298: e7ff         	b	0x805529a <prvCreateRestrictedTask+0x36> @ imm = #-0x2
 805529a: e7fe         	b	0x805529a <prvCreateRestrictedTask+0x36> @ imm = #-0x4
;         if( pxTaskDefinition->puxStackBuffer != NULL )
 805529c: 9807         	ldr	r0, [sp, #0x1c]
 805529e: 6940         	ldr	r0, [r0, #0x14]
 80552a0: b398         	cbz	r0, 0x805530a <prvCreateRestrictedTask+0xa6> @ imm = #0x66
 80552a2: e7ff         	b	0x80552a4 <prvCreateRestrictedTask+0x40> @ imm = #-0x2
;             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80552a4: 491f         	ldr	r1, [pc, #0x7c]         @ 0x8055324 <prvCreateRestrictedTask+0xc0>
 80552a6: 20d8         	movs	r0, #0xd8
 80552a8: 4788         	blx	r1
 80552aa: 9005         	str	r0, [sp, #0x14]
;             if( pxNewTCB != NULL )
 80552ac: 9805         	ldr	r0, [sp, #0x14]
 80552ae: b358         	cbz	r0, 0x8055308 <prvCreateRestrictedTask+0xa4> @ imm = #0x56
 80552b0: e7ff         	b	0x80552b2 <prvCreateRestrictedTask+0x4e> @ imm = #-0x2
;                 ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80552b2: 9805         	ldr	r0, [sp, #0x14]
 80552b4: 4b1c         	ldr	r3, [pc, #0x70]         @ 0x8055328 <prvCreateRestrictedTask+0xc4>
 80552b6: 2100         	movs	r1, #0x0
 80552b8: 22d8         	movs	r2, #0xd8
 80552ba: 4798         	blx	r3
;                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 80552bc: 9807         	ldr	r0, [sp, #0x1c]
 80552be: 6940         	ldr	r0, [r0, #0x14]
 80552c0: 9905         	ldr	r1, [sp, #0x14]
 80552c2: f8c1 00ac    	str.w	r0, [r1, #0xac]
;                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 80552c6: 9905         	ldr	r1, [sp, #0x14]
 80552c8: 2001         	movs	r0, #0x1
 80552ca: f881 00d5    	strb.w	r0, [r1, #0xd5]
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80552ce: f8dd e01c    	ldr.w	lr, [sp, #0x1c]
;                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 80552d2: f8be 2008    	ldrh.w	r2, [lr, #0x8]
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80552d6: f8de 0000    	ldr.w	r0, [lr]
;                                       pxTaskDefinition->pcName,
 80552da: f8de 1004    	ldr.w	r1, [lr, #0x4]
;                                       pxTaskDefinition->pvParameters,
 80552de: f8de 300c    	ldr.w	r3, [lr, #0xc]
;                                       pxTaskDefinition->uxPriority,
 80552e2: f8de c010    	ldr.w	r12, [lr, #0x10]
;                                       pxCreatedTask, pxNewTCB,
 80552e6: 9c06         	ldr	r4, [sp, #0x18]
 80552e8: 9d05         	ldr	r5, [sp, #0x14]
;                                       pxTaskDefinition->xRegions );
 80552ea: f10e 0618    	add.w	r6, lr, #0x18
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80552ee: 46ee         	mov	lr, sp
 80552f0: f8ce 600c    	str.w	r6, [lr, #0xc]
 80552f4: f8ce 5008    	str.w	r5, [lr, #0x8]
 80552f8: f8ce 4004    	str.w	r4, [lr, #0x4]
 80552fc: f8ce c000    	str.w	r12, [lr]
 8055300: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x805532c <prvCreateRestrictedTask+0xc8>
 8055304: 47e0         	blx	r12
;             }
 8055306: e7ff         	b	0x8055308 <prvCreateRestrictedTask+0xa4> @ imm = #-0x2
;         }
 8055308: e002         	b	0x8055310 <prvCreateRestrictedTask+0xac> @ imm = #0x4
 805530a: 2000         	movs	r0, #0x0
;             pxNewTCB = NULL;
 805530c: 9005         	str	r0, [sp, #0x14]
 805530e: e7ff         	b	0x8055310 <prvCreateRestrictedTask+0xac> @ imm = #-0x2
;         return pxNewTCB;
 8055310: 9805         	ldr	r0, [sp, #0x14]
 8055312: 9004         	str	r0, [sp, #0x10]
 8055314: 4806         	ldr	r0, [pc, #0x18]         @ 0x8055330 <prvCreateRestrictedTask+0xcc>
 8055316: 4780         	blx	r0
 8055318: 9804         	ldr	r0, [sp, #0x10]
 805531a: b008         	add	sp, #0x20
 805531c: f85d bb04    	ldr	r11, [sp], #4
 8055320: bdf0         	pop	{r4, r5, r6, r7, pc}
 8055322: bf00         	nop

08055324 <$d.3>:
 8055324: 75 a0 05 08  	.word	0x0805a075
 8055328: 75 23 06 08  	.word	0x08062375
 805532c: 29 8e 05 08  	.word	0x08058e29
 8055330: 21 05 06 08  	.word	0x08060521
 8055334: 55 ec 05 08  	.word	0x0805ec55

08055338 <prvAddNewTaskToReadyList>:
;     {
 8055338: b580         	push	{r7, lr}
 805533a: 466f         	mov	r7, sp
 805533c: b082         	sub	sp, #0x8
 805533e: f643 5240    	movw	r2, #0x3d40
 8055342: f2c2 0200    	movt	r2, #0x2000
 8055346: 6811         	ldr	r1, [r2]
 8055348: f642 5340    	movw	r3, #0x2d40
 805534c: f2c2 0300    	movt	r3, #0x2000
 8055350: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8055354: 3101         	adds	r1, #0x1
 8055356: 6011         	str	r1, [r2]
 8055358: 9001         	str	r0, [sp, #0x4]
;         taskENTER_CRITICAL();
 805535a: 485d         	ldr	r0, [pc, #0x174]        @ 0x80554d0 <prvAddNewTaskToReadyList+0x198>
 805535c: 4780         	blx	r0
;             uxCurrentNumberOfTasks++;
 805535e: f240 1120    	movw	r1, #0x120
 8055362: f2c2 0100    	movt	r1, #0x2000
 8055366: 6808         	ldr	r0, [r1]
 8055368: 3001         	adds	r0, #0x1
 805536a: 6008         	str	r0, [r1]
;             if( pxCurrentTCB == NULL )
 805536c: f240 1000    	movw	r0, #0x100
 8055370: f2c2 0000    	movt	r0, #0x2000
 8055374: 6800         	ldr	r0, [r0]
 8055376: b998         	cbnz	r0, 0x80553a0 <prvAddNewTaskToReadyList+0x68> @ imm = #0x26
 8055378: e7ff         	b	0x805537a <prvAddNewTaskToReadyList+0x42> @ imm = #-0x2
;                 pxCurrentTCB = pxNewTCB;
 805537a: 9801         	ldr	r0, [sp, #0x4]
 805537c: f240 1100    	movw	r1, #0x100
 8055380: f2c2 0100    	movt	r1, #0x2000
 8055384: 6008         	str	r0, [r1]
;                 if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8055386: f240 1020    	movw	r0, #0x120
 805538a: f2c2 0000    	movt	r0, #0x2000
 805538e: 6800         	ldr	r0, [r0]
 8055390: 2801         	cmp	r0, #0x1
 8055392: d103         	bne	0x805539c <prvAddNewTaskToReadyList+0x64> @ imm = #0x6
 8055394: e7ff         	b	0x8055396 <prvAddNewTaskToReadyList+0x5e> @ imm = #-0x2
;                     prvInitialiseTaskLists();
 8055396: 484f         	ldr	r0, [pc, #0x13c]        @ 0x80554d4 <prvAddNewTaskToReadyList+0x19c>
 8055398: 4780         	blx	r0
;                 }
 805539a: e000         	b	0x805539e <prvAddNewTaskToReadyList+0x66> @ imm = #0x0
 805539c: e7ff         	b	0x805539e <prvAddNewTaskToReadyList+0x66> @ imm = #-0x2
;             }
 805539e: e01e         	b	0x80553de <prvAddNewTaskToReadyList+0xa6> @ imm = #0x3c
;                 if( xSchedulerRunning == pdFALSE )
 80553a0: f240 1024    	movw	r0, #0x124
 80553a4: f2c2 0000    	movt	r0, #0x2000
 80553a8: 6800         	ldr	r0, [r0]
 80553aa: b9b0         	cbnz	r0, 0x80553da <prvAddNewTaskToReadyList+0xa2> @ imm = #0x2c
 80553ac: e7ff         	b	0x80553ae <prvAddNewTaskToReadyList+0x76> @ imm = #-0x2
;                     if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80553ae: f240 1000    	movw	r0, #0x100
 80553b2: f2c2 0000    	movt	r0, #0x2000
 80553b6: 6800         	ldr	r0, [r0]
 80553b8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80553bc: 9901         	ldr	r1, [sp, #0x4]
 80553be: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80553c2: 4288         	cmp	r0, r1
 80553c4: d807         	bhi	0x80553d6 <prvAddNewTaskToReadyList+0x9e> @ imm = #0xe
 80553c6: e7ff         	b	0x80553c8 <prvAddNewTaskToReadyList+0x90> @ imm = #-0x2
;                         pxCurrentTCB = pxNewTCB;
 80553c8: 9801         	ldr	r0, [sp, #0x4]
 80553ca: f240 1100    	movw	r1, #0x100
 80553ce: f2c2 0100    	movt	r1, #0x2000
 80553d2: 6008         	str	r0, [r1]
;                     }
 80553d4: e000         	b	0x80553d8 <prvAddNewTaskToReadyList+0xa0> @ imm = #0x0
 80553d6: e7ff         	b	0x80553d8 <prvAddNewTaskToReadyList+0xa0> @ imm = #-0x2
;                 }
 80553d8: e000         	b	0x80553dc <prvAddNewTaskToReadyList+0xa4> @ imm = #0x0
 80553da: e7ff         	b	0x80553dc <prvAddNewTaskToReadyList+0xa4> @ imm = #-0x2
 80553dc: e7ff         	b	0x80553de <prvAddNewTaskToReadyList+0xa6> @ imm = #-0x2
;             uxTaskNumber++;
 80553de: f240 1004    	movw	r0, #0x104
 80553e2: f2c2 0000    	movt	r0, #0x2000
 80553e6: 6801         	ldr	r1, [r0]
 80553e8: 3101         	adds	r1, #0x1
 80553ea: 6001         	str	r1, [r0]
;                 pxNewTCB->uxTCBNumber = uxTaskNumber;
 80553ec: 6800         	ldr	r0, [r0]
 80553ee: 9901         	ldr	r1, [sp, #0x4]
 80553f0: f8c1 00c0    	str.w	r0, [r1, #0xc0]
;             prvAddTaskToReadyList( pxNewTCB );
 80553f4: e7ff         	b	0x80553f6 <prvAddNewTaskToReadyList+0xbe> @ imm = #-0x2
 80553f6: e7ff         	b	0x80553f8 <prvAddNewTaskToReadyList+0xc0> @ imm = #-0x2
 80553f8: 9801         	ldr	r0, [sp, #0x4]
 80553fa: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80553fe: f240 21a0    	movw	r1, #0x2a0
 8055402: f2c2 0100    	movt	r1, #0x2000
 8055406: 6809         	ldr	r1, [r1]
 8055408: 4288         	cmp	r0, r1
 805540a: d909         	bls	0x8055420 <prvAddNewTaskToReadyList+0xe8> @ imm = #0x12
 805540c: e7ff         	b	0x805540e <prvAddNewTaskToReadyList+0xd6> @ imm = #-0x2
 805540e: 9801         	ldr	r0, [sp, #0x4]
 8055410: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055414: f240 21a0    	movw	r1, #0x2a0
 8055418: f2c2 0100    	movt	r1, #0x2000
 805541c: 6008         	str	r0, [r1]
 805541e: e7ff         	b	0x8055420 <prvAddNewTaskToReadyList+0xe8> @ imm = #-0x2
 8055420: e7ff         	b	0x8055422 <prvAddNewTaskToReadyList+0xea> @ imm = #-0x2
 8055422: e7ff         	b	0x8055424 <prvAddNewTaskToReadyList+0xec> @ imm = #-0x2
 8055424: 9801         	ldr	r0, [sp, #0x4]
 8055426: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805542a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805542e: f240 1160    	movw	r1, #0x160
 8055432: f2c2 0100    	movt	r1, #0x2000
 8055436: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805543a: 6840         	ldr	r0, [r0, #0x4]
 805543c: 9000         	str	r0, [sp]
 805543e: 9800         	ldr	r0, [sp]
 8055440: 9a01         	ldr	r2, [sp, #0x4]
 8055442: f8c2 0084    	str.w	r0, [r2, #0x84]
 8055446: 9800         	ldr	r0, [sp]
 8055448: 6880         	ldr	r0, [r0, #0x8]
 805544a: 9a01         	ldr	r2, [sp, #0x4]
 805544c: f8c2 0088    	str.w	r0, [r2, #0x88]
 8055450: 9801         	ldr	r0, [sp, #0x4]
 8055452: 3080         	adds	r0, #0x80
 8055454: 9a00         	ldr	r2, [sp]
 8055456: 6892         	ldr	r2, [r2, #0x8]
 8055458: 6050         	str	r0, [r2, #0x4]
 805545a: 9801         	ldr	r0, [sp, #0x4]
 805545c: 3080         	adds	r0, #0x80
 805545e: 9a00         	ldr	r2, [sp]
 8055460: 6090         	str	r0, [r2, #0x8]
 8055462: 9a01         	ldr	r2, [sp, #0x4]
 8055464: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8055468: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805546c: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055470: f8c2 0090    	str.w	r0, [r2, #0x90]
 8055474: 9801         	ldr	r0, [sp, #0x4]
 8055476: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805547a: eb00 0280    	add.w	r2, r0, r0, lsl #2
 805547e: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8055482: 3001         	adds	r0, #0x1
 8055484: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8055488: e7ff         	b	0x805548a <prvAddNewTaskToReadyList+0x152> @ imm = #-0x2
 805548a: e7ff         	b	0x805548c <prvAddNewTaskToReadyList+0x154> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805548c: 4812         	ldr	r0, [pc, #0x48]         @ 0x80554d8 <prvAddNewTaskToReadyList+0x1a0>
 805548e: 4780         	blx	r0
;         if( xSchedulerRunning != pdFALSE )
 8055490: f240 1024    	movw	r0, #0x124
 8055494: f2c2 0000    	movt	r0, #0x2000
 8055498: 6800         	ldr	r0, [r0]
 805549a: b1a0         	cbz	r0, 0x80554c6 <prvAddNewTaskToReadyList+0x18e> @ imm = #0x28
 805549c: e7ff         	b	0x805549e <prvAddNewTaskToReadyList+0x166> @ imm = #-0x2
;             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 805549e: e7ff         	b	0x80554a0 <prvAddNewTaskToReadyList+0x168> @ imm = #-0x2
 80554a0: f240 1000    	movw	r0, #0x100
 80554a4: f2c2 0000    	movt	r0, #0x2000
 80554a8: 6800         	ldr	r0, [r0]
 80554aa: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80554ae: 9901         	ldr	r1, [sp, #0x4]
 80554b0: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80554b4: 4288         	cmp	r0, r1
 80554b6: d203         	bhs	0x80554c0 <prvAddNewTaskToReadyList+0x188> @ imm = #0x6
 80554b8: e7ff         	b	0x80554ba <prvAddNewTaskToReadyList+0x182> @ imm = #-0x2
 80554ba: 4808         	ldr	r0, [pc, #0x20]         @ 0x80554dc <prvAddNewTaskToReadyList+0x1a4>
 80554bc: 4780         	blx	r0
 80554be: e000         	b	0x80554c2 <prvAddNewTaskToReadyList+0x18a> @ imm = #0x0
 80554c0: e7ff         	b	0x80554c2 <prvAddNewTaskToReadyList+0x18a> @ imm = #-0x2
;             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80554c2: e7ff         	b	0x80554c4 <prvAddNewTaskToReadyList+0x18c> @ imm = #-0x2
;         }
 80554c4: e000         	b	0x80554c8 <prvAddNewTaskToReadyList+0x190> @ imm = #0x0
 80554c6: e7ff         	b	0x80554c8 <prvAddNewTaskToReadyList+0x190> @ imm = #-0x2
;     }
 80554c8: 4805         	ldr	r0, [pc, #0x14]         @ 0x80554e0 <prvAddNewTaskToReadyList+0x1a8>
 80554ca: 4780         	blx	r0
 80554cc: b002         	add	sp, #0x8
 80554ce: bd80         	pop	{r7, pc}

080554d0 <$d.5>:
 80554d0: 05 e1 05 08  	.word	0x0805e105
 80554d4: d5 8f 05 08  	.word	0x08058fd5
 80554d8: 4d e1 05 08  	.word	0x0805e14d
 80554dc: c5 e0 05 08  	.word	0x0805e0c5
 80554e0: 21 05 06 08  	.word	0x08060521

080554e4 <xTaskCreate>:
;     {
 80554e4: b5b0         	push	{r4, r5, r7, lr}
 80554e6: af02         	add	r7, sp, #0x8
 80554e8: b08a         	sub	sp, #0x28
 80554ea: 4674         	mov	r4, lr
 80554ec: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80554f0: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80554f4: f643 5e40    	movw	lr, #0x3d40
 80554f8: f2c2 0e00    	movt	lr, #0x2000
 80554fc: f8de c000    	ldr.w	r12, [lr]
 8055500: f642 5540    	movw	r5, #0x2d40
 8055504: f2c2 0500    	movt	r5, #0x2000
 8055508: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805550c: f10c 0c01    	add.w	r12, r12, #0x1
 8055510: f8ce c000    	str.w	r12, [lr]
 8055514: 9009         	str	r0, [sp, #0x24]
 8055516: 9108         	str	r1, [sp, #0x20]
 8055518: f827 2c12    	strh	r2, [r7, #-18]
 805551c: 9306         	str	r3, [sp, #0x18]
;         pxNewTCB = prvCreateTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 805551e: 9809         	ldr	r0, [sp, #0x24]
 8055520: 9908         	ldr	r1, [sp, #0x20]
 8055522: f837 2c12    	ldrh	r2, [r7, #-18]
 8055526: 9b06         	ldr	r3, [sp, #0x18]
 8055528: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805552c: 68fc         	ldr	r4, [r7, #0xc]
 805552e: 46ee         	mov	lr, sp
 8055530: f8ce 4004    	str.w	r4, [lr, #0x4]
 8055534: f8ce c000    	str.w	r12, [lr]
 8055538: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x8055568 <xTaskCreate+0x84>
 805553c: 47e0         	blx	r12
 805553e: 9005         	str	r0, [sp, #0x14]
;         if( pxNewTCB != NULL )
 8055540: 9805         	ldr	r0, [sp, #0x14]
 8055542: b130         	cbz	r0, 0x8055552 <xTaskCreate+0x6e> @ imm = #0xc
 8055544: e7ff         	b	0x8055546 <xTaskCreate+0x62> @ imm = #-0x2
;             prvAddNewTaskToReadyList( pxNewTCB );
 8055546: 9805         	ldr	r0, [sp, #0x14]
 8055548: 4908         	ldr	r1, [pc, #0x20]         @ 0x805556c <xTaskCreate+0x88>
 805554a: 4788         	blx	r1
 805554c: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805554e: 9004         	str	r0, [sp, #0x10]
;         }
 8055550: e003         	b	0x805555a <xTaskCreate+0x76> @ imm = #0x6
 8055552: f04f 30ff    	mov.w	r0, #0xffffffff
;             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8055556: 9004         	str	r0, [sp, #0x10]
 8055558: e7ff         	b	0x805555a <xTaskCreate+0x76> @ imm = #-0x2
;         return xReturn;
 805555a: 9804         	ldr	r0, [sp, #0x10]
 805555c: 9003         	str	r0, [sp, #0xc]
 805555e: 4804         	ldr	r0, [pc, #0x10]         @ 0x8055570 <xTaskCreate+0x8c>
 8055560: 4780         	blx	r0
 8055562: 9803         	ldr	r0, [sp, #0xc]
 8055564: b00a         	add	sp, #0x28
 8055566: bdb0         	pop	{r4, r5, r7, pc}

08055568 <$d.7>:
 8055568: 75 55 05 08  	.word	0x08055575
 805556c: 39 53 05 08  	.word	0x08055339
 8055570: 21 05 06 08  	.word	0x08060521

08055574 <prvCreateTask>:
;     {
 8055574: b5f0         	push	{r4, r5, r6, r7, lr}
 8055576: af03         	add	r7, sp, #0xc
 8055578: f84d bd04    	str	r11, [sp, #-4]!
 805557c: b08c         	sub	sp, #0x30
 805557e: 4674         	mov	r4, lr
 8055580: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8055584: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8055588: f643 5e40    	movw	lr, #0x3d40
 805558c: f2c2 0e00    	movt	lr, #0x2000
 8055590: f8de c000    	ldr.w	r12, [lr]
 8055594: f642 5540    	movw	r5, #0x2d40
 8055598: f2c2 0500    	movt	r5, #0x2000
 805559c: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 80555a0: f10c 0c01    	add.w	r12, r12, #0x1
 80555a4: f8ce c000    	str.w	r12, [lr]
 80555a8: 900b         	str	r0, [sp, #0x2c]
 80555aa: 910a         	str	r1, [sp, #0x28]
 80555ac: f827 2c1a    	strh	r2, [r7, #-26]
 80555b0: 9308         	str	r3, [sp, #0x20]
;             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80555b2: f837 0c1a    	ldrh	r0, [r7, #-26]
 80555b6: 0080         	lsls	r0, r0, #0x2
 80555b8: 4922         	ldr	r1, [pc, #0x88]         @ 0x8055644 <prvCreateTask+0xd0>
 80555ba: 4788         	blx	r1
 80555bc: 9006         	str	r0, [sp, #0x18]
;             if( pxStack != NULL )
 80555be: 9806         	ldr	r0, [sp, #0x18]
 80555c0: b1b0         	cbz	r0, 0x80555f0 <prvCreateTask+0x7c> @ imm = #0x2c
 80555c2: e7ff         	b	0x80555c4 <prvCreateTask+0x50> @ imm = #-0x2
;                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80555c4: 4920         	ldr	r1, [pc, #0x80]         @ 0x8055648 <prvCreateTask+0xd4>
 80555c6: 20d8         	movs	r0, #0xd8
 80555c8: 4788         	blx	r1
 80555ca: 9007         	str	r0, [sp, #0x1c]
;                 if( pxNewTCB != NULL )
 80555cc: 9807         	ldr	r0, [sp, #0x1c]
 80555ce: b150         	cbz	r0, 0x80555e6 <prvCreateTask+0x72> @ imm = #0x14
 80555d0: e7ff         	b	0x80555d2 <prvCreateTask+0x5e> @ imm = #-0x2
;                     ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80555d2: 9807         	ldr	r0, [sp, #0x1c]
 80555d4: 4b1e         	ldr	r3, [pc, #0x78]         @ 0x8055650 <prvCreateTask+0xdc>
 80555d6: 2100         	movs	r1, #0x0
 80555d8: 22d8         	movs	r2, #0xd8
 80555da: 4798         	blx	r3
;                     pxNewTCB->pxStack = pxStack;
 80555dc: 9806         	ldr	r0, [sp, #0x18]
 80555de: 9907         	ldr	r1, [sp, #0x1c]
 80555e0: f8c1 00ac    	str.w	r0, [r1, #0xac]
;                 }
 80555e4: e003         	b	0x80555ee <prvCreateTask+0x7a> @ imm = #0x6
;                     vPortFreeStack( pxStack );
 80555e6: 9806         	ldr	r0, [sp, #0x18]
 80555e8: 4918         	ldr	r1, [pc, #0x60]         @ 0x805564c <prvCreateTask+0xd8>
 80555ea: 4788         	blx	r1
 80555ec: e7ff         	b	0x80555ee <prvCreateTask+0x7a> @ imm = #-0x2
;             }
 80555ee: e002         	b	0x80555f6 <prvCreateTask+0x82> @ imm = #0x4
 80555f0: 2000         	movs	r0, #0x0
;                 pxNewTCB = NULL;
 80555f2: 9007         	str	r0, [sp, #0x1c]
 80555f4: e7ff         	b	0x80555f6 <prvCreateTask+0x82> @ imm = #-0x2
;         if( pxNewTCB != NULL )
 80555f6: 9807         	ldr	r0, [sp, #0x1c]
 80555f8: b1d0         	cbz	r0, 0x8055630 <prvCreateTask+0xbc> @ imm = #0x34
 80555fa: e7ff         	b	0x80555fc <prvCreateTask+0x88> @ imm = #-0x2
;                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80555fc: 9807         	ldr	r0, [sp, #0x1c]
 80555fe: 2600         	movs	r6, #0x0
 8055600: f880 60d5    	strb.w	r6, [r0, #0xd5]
;             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8055604: 980b         	ldr	r0, [sp, #0x2c]
 8055606: 990a         	ldr	r1, [sp, #0x28]
 8055608: f837 2c1a    	ldrh	r2, [r7, #-26]
 805560c: 9b08         	ldr	r3, [sp, #0x20]
 805560e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8055612: 68fc         	ldr	r4, [r7, #0xc]
 8055614: 9d07         	ldr	r5, [sp, #0x1c]
 8055616: 46ee         	mov	lr, sp
 8055618: f8ce 600c    	str.w	r6, [lr, #0xc]
 805561c: f8ce 5008    	str.w	r5, [lr, #0x8]
 8055620: f8ce 4004    	str.w	r4, [lr, #0x4]
 8055624: f8ce c000    	str.w	r12, [lr]
 8055628: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x8055654 <prvCreateTask+0xe0>
 805562c: 47e0         	blx	r12
;         }
 805562e: e7ff         	b	0x8055630 <prvCreateTask+0xbc> @ imm = #-0x2
;         return pxNewTCB;
 8055630: 9807         	ldr	r0, [sp, #0x1c]
 8055632: 9005         	str	r0, [sp, #0x14]
 8055634: 4808         	ldr	r0, [pc, #0x20]         @ 0x8055658 <prvCreateTask+0xe4>
 8055636: 4780         	blx	r0
 8055638: 9805         	ldr	r0, [sp, #0x14]
 805563a: b00c         	add	sp, #0x30
 805563c: f85d bb04    	ldr	r11, [sp], #4
 8055640: bdf0         	pop	{r4, r5, r6, r7, pc}
 8055642: bf00         	nop

08055644 <$d.9>:
 8055644: 75 a0 05 08  	.word	0x0805a075
 8055648: 75 a0 05 08  	.word	0x0805a075
 805564c: 41 a4 05 08  	.word	0x0805a441
 8055650: 75 23 06 08  	.word	0x08062375
 8055654: 29 8e 05 08  	.word	0x08058e29
 8055658: 21 05 06 08  	.word	0x08060521

0805565c <vTaskDelete>:
;     {
 805565c: b580         	push	{r7, lr}
 805565e: 466f         	mov	r7, sp
 8055660: b084         	sub	sp, #0x10
 8055662: f643 5240    	movw	r2, #0x3d40
 8055666: f2c2 0200    	movt	r2, #0x2000
 805566a: 6811         	ldr	r1, [r2]
 805566c: f642 5340    	movw	r3, #0x2d40
 8055670: f2c2 0300    	movt	r3, #0x2000
 8055674: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8055678: 3101         	adds	r1, #0x1
 805567a: 6011         	str	r1, [r2]
 805567c: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 805567e: 4841         	ldr	r0, [pc, #0x104]        @ 0x8055784 <vTaskDelete+0x128>
 8055680: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8055682: 9803         	ldr	r0, [sp, #0xc]
 8055684: b938         	cbnz	r0, 0x8055696 <vTaskDelete+0x3a> @ imm = #0xe
 8055686: e7ff         	b	0x8055688 <vTaskDelete+0x2c> @ imm = #-0x2
 8055688: f240 1000    	movw	r0, #0x100
 805568c: f2c2 0000    	movt	r0, #0x2000
 8055690: 6800         	ldr	r0, [r0]
 8055692: 9001         	str	r0, [sp, #0x4]
 8055694: e002         	b	0x805569c <vTaskDelete+0x40> @ imm = #0x4
 8055696: 9803         	ldr	r0, [sp, #0xc]
 8055698: 9001         	str	r0, [sp, #0x4]
 805569a: e7ff         	b	0x805569c <vTaskDelete+0x40> @ imm = #-0x2
 805569c: 9801         	ldr	r0, [sp, #0x4]
 805569e: 9002         	str	r0, [sp, #0x8]
;             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80556a0: 9802         	ldr	r0, [sp, #0x8]
 80556a2: 3080         	adds	r0, #0x80
 80556a4: 4938         	ldr	r1, [pc, #0xe0]         @ 0x8055788 <vTaskDelete+0x12c>
 80556a6: 4788         	blx	r1
 80556a8: b908         	cbnz	r0, 0x80556ae <vTaskDelete+0x52> @ imm = #0x2
 80556aa: e7ff         	b	0x80556ac <vTaskDelete+0x50> @ imm = #-0x2
;             }
 80556ac: e000         	b	0x80556b0 <vTaskDelete+0x54> @ imm = #0x0
 80556ae: e7ff         	b	0x80556b0 <vTaskDelete+0x54> @ imm = #-0x2
;             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80556b0: 9802         	ldr	r0, [sp, #0x8]
 80556b2: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80556b6: b128         	cbz	r0, 0x80556c4 <vTaskDelete+0x68> @ imm = #0xa
 80556b8: e7ff         	b	0x80556ba <vTaskDelete+0x5e> @ imm = #-0x2
;                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80556ba: 9802         	ldr	r0, [sp, #0x8]
 80556bc: 3094         	adds	r0, #0x94
 80556be: 4933         	ldr	r1, [pc, #0xcc]         @ 0x805578c <vTaskDelete+0x130>
 80556c0: 4788         	blx	r1
;             }
 80556c2: e000         	b	0x80556c6 <vTaskDelete+0x6a> @ imm = #0x0
 80556c4: e7ff         	b	0x80556c6 <vTaskDelete+0x6a> @ imm = #-0x2
;             uxTaskNumber++;
 80556c6: f240 1104    	movw	r1, #0x104
 80556ca: f2c2 0100    	movt	r1, #0x2000
 80556ce: 6808         	ldr	r0, [r1]
 80556d0: 3001         	adds	r0, #0x1
 80556d2: 6008         	str	r0, [r1]
;             if( taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB ) != pdFALSE )
 80556d4: 9802         	ldr	r0, [sp, #0x8]
 80556d6: f240 1100    	movw	r1, #0x100
 80556da: f2c2 0100    	movt	r1, #0x2000
 80556de: 6809         	ldr	r1, [r1]
 80556e0: 4288         	cmp	r0, r1
 80556e2: d111         	bne	0x8055708 <vTaskDelete+0xac> @ imm = #0x22
 80556e4: e7ff         	b	0x80556e6 <vTaskDelete+0x8a> @ imm = #-0x2
;                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80556e6: 9802         	ldr	r0, [sp, #0x8]
 80556e8: f100 0180    	add.w	r1, r0, #0x80
 80556ec: f240 1008    	movw	r0, #0x108
 80556f0: f2c2 0000    	movt	r0, #0x2000
 80556f4: 4a27         	ldr	r2, [pc, #0x9c]         @ 0x8055794 <vTaskDelete+0x138>
 80556f6: 4790         	blx	r2
;                 ++uxDeletedTasksWaitingCleanUp;
 80556f8: f240 111c    	movw	r1, #0x11c
 80556fc: f2c2 0100    	movt	r1, #0x2000
 8055700: 6808         	ldr	r0, [r1]
 8055702: 3001         	adds	r0, #0x1
 8055704: 6008         	str	r0, [r1]
;             }
 8055706: e009         	b	0x805571c <vTaskDelete+0xc0> @ imm = #0x12
;                 --uxCurrentNumberOfTasks;
 8055708: f240 1120    	movw	r1, #0x120
 805570c: f2c2 0100    	movt	r1, #0x2000
 8055710: 6808         	ldr	r0, [r1]
 8055712: 3801         	subs	r0, #0x1
 8055714: 6008         	str	r0, [r1]
;                 prvResetNextTaskUnblockTime();
 8055716: 481e         	ldr	r0, [pc, #0x78]         @ 0x8055790 <vTaskDelete+0x134>
 8055718: 4780         	blx	r0
 805571a: e7ff         	b	0x805571c <vTaskDelete+0xc0> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 805571c: 481e         	ldr	r0, [pc, #0x78]         @ 0x8055798 <vTaskDelete+0x13c>
 805571e: 4780         	blx	r0
;             if( pxTCB != pxCurrentTCB )
 8055720: 9802         	ldr	r0, [sp, #0x8]
 8055722: f240 1100    	movw	r1, #0x100
 8055726: f2c2 0100    	movt	r1, #0x2000
 805572a: 6809         	ldr	r1, [r1]
 805572c: 4288         	cmp	r0, r1
 805572e: d004         	beq	0x805573a <vTaskDelete+0xde> @ imm = #0x8
 8055730: e7ff         	b	0x8055732 <vTaskDelete+0xd6> @ imm = #-0x2
;                 prvDeleteTCB( pxTCB );
 8055732: 9802         	ldr	r0, [sp, #0x8]
 8055734: 4919         	ldr	r1, [pc, #0x64]         @ 0x805579c <vTaskDelete+0x140>
 8055736: 4788         	blx	r1
;             }
 8055738: e7ff         	b	0x805573a <vTaskDelete+0xde> @ imm = #-0x2
;             if( xSchedulerRunning != pdFALSE )
 805573a: f240 1024    	movw	r0, #0x124
 805573e: f2c2 0000    	movt	r0, #0x2000
 8055742: 6800         	ldr	r0, [r0]
 8055744: b1c8         	cbz	r0, 0x805577a <vTaskDelete+0x11e> @ imm = #0x32
 8055746: e7ff         	b	0x8055748 <vTaskDelete+0xec> @ imm = #-0x2
;                 if( pxTCB == pxCurrentTCB )
 8055748: 9802         	ldr	r0, [sp, #0x8]
 805574a: f240 1100    	movw	r1, #0x100
 805574e: f2c2 0100    	movt	r1, #0x2000
 8055752: 6809         	ldr	r1, [r1]
 8055754: 4288         	cmp	r0, r1
 8055756: d10e         	bne	0x8055776 <vTaskDelete+0x11a> @ imm = #0x1c
 8055758: e7ff         	b	0x805575a <vTaskDelete+0xfe> @ imm = #-0x2
;                     configASSERT( uxSchedulerSuspended == 0 );
 805575a: f240 1028    	movw	r0, #0x128
 805575e: f2c2 0000    	movt	r0, #0x2000
 8055762: 6800         	ldr	r0, [r0]
 8055764: b120         	cbz	r0, 0x8055770 <vTaskDelete+0x114> @ imm = #0x8
 8055766: e7ff         	b	0x8055768 <vTaskDelete+0x10c> @ imm = #-0x2
 8055768: 480f         	ldr	r0, [pc, #0x3c]         @ 0x80557a8 <vTaskDelete+0x14c>
 805576a: 4780         	blx	r0
 805576c: e7ff         	b	0x805576e <vTaskDelete+0x112> @ imm = #-0x2
 805576e: e7fe         	b	0x805576e <vTaskDelete+0x112> @ imm = #-0x4
;                     portYIELD_WITHIN_API();
 8055770: 480b         	ldr	r0, [pc, #0x2c]         @ 0x80557a0 <vTaskDelete+0x144>
 8055772: 4780         	blx	r0
;                 }
 8055774: e000         	b	0x8055778 <vTaskDelete+0x11c> @ imm = #0x0
 8055776: e7ff         	b	0x8055778 <vTaskDelete+0x11c> @ imm = #-0x2
;             }
 8055778: e7ff         	b	0x805577a <vTaskDelete+0x11e> @ imm = #-0x2
;     }
 805577a: 480a         	ldr	r0, [pc, #0x28]         @ 0x80557a4 <vTaskDelete+0x148>
 805577c: 4780         	blx	r0
 805577e: b004         	add	sp, #0x10
 8055780: bd80         	pop	{r7, pc}
 8055782: bf00         	nop

08055784 <$d.11>:
 8055784: 05 e1 05 08  	.word	0x0805e105
 8055788: c9 b1 05 08  	.word	0x0805b1c9
 805578c: c9 b1 05 08  	.word	0x0805b1c9
 8055790: ad 57 05 08  	.word	0x080557ad
 8055794: d9 b0 05 08  	.word	0x0805b0d9
 8055798: 4d e1 05 08  	.word	0x0805e14d
 805579c: 11 58 05 08  	.word	0x08055811
 80557a0: c5 e0 05 08  	.word	0x0805e0c5
 80557a4: 21 05 06 08  	.word	0x08060521
 80557a8: 55 ec 05 08  	.word	0x0805ec55

080557ac <prvResetNextTaskUnblockTime>:
; {
 80557ac: b580         	push	{r7, lr}
 80557ae: 466f         	mov	r7, sp
;     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80557b0: f643 5140    	movw	r1, #0x3d40
 80557b4: f2c2 0100    	movt	r1, #0x2000
 80557b8: 6808         	ldr	r0, [r1]
 80557ba: f642 5240    	movw	r2, #0x2d40
 80557be: f2c2 0200    	movt	r2, #0x2000
 80557c2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80557c6: 3001         	adds	r0, #0x1
 80557c8: 6008         	str	r0, [r1]
 80557ca: f240 1030    	movw	r0, #0x130
 80557ce: f2c2 0000    	movt	r0, #0x2000
 80557d2: 6800         	ldr	r0, [r0]
 80557d4: 6800         	ldr	r0, [r0]
 80557d6: b940         	cbnz	r0, 0x80557ea <prvResetNextTaskUnblockTime+0x3e> @ imm = #0x10
 80557d8: e7ff         	b	0x80557da <prvResetNextTaskUnblockTime+0x2e> @ imm = #-0x2
;         xNextTaskUnblockTime = portMAX_DELAY;
 80557da: f240 21a8    	movw	r1, #0x2a8
 80557de: f2c2 0100    	movt	r1, #0x2000
 80557e2: f04f 30ff    	mov.w	r0, #0xffffffff
 80557e6: 6008         	str	r0, [r1]
;     }
 80557e8: e00c         	b	0x8055804 <prvResetNextTaskUnblockTime+0x58> @ imm = #0x18
;         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80557ea: f240 1030    	movw	r0, #0x130
 80557ee: f2c2 0000    	movt	r0, #0x2000
 80557f2: 6800         	ldr	r0, [r0]
 80557f4: 68c0         	ldr	r0, [r0, #0xc]
 80557f6: 6800         	ldr	r0, [r0]
 80557f8: f240 21a8    	movw	r1, #0x2a8
 80557fc: f2c2 0100    	movt	r1, #0x2000
 8055800: 6008         	str	r0, [r1]
 8055802: e7ff         	b	0x8055804 <prvResetNextTaskUnblockTime+0x58> @ imm = #-0x2
; }
 8055804: 4801         	ldr	r0, [pc, #0x4]          @ 0x805580c <prvResetNextTaskUnblockTime+0x60>
 8055806: 4780         	blx	r0
 8055808: bd80         	pop	{r7, pc}
 805580a: bf00         	nop

0805580c <$d.13>:
 805580c: 21 05 06 08  	.word	0x08060521

08055810 <prvDeleteTCB>:
;     {
 8055810: b580         	push	{r7, lr}
 8055812: 466f         	mov	r7, sp
 8055814: b082         	sub	sp, #0x8
 8055816: f643 5240    	movw	r2, #0x3d40
 805581a: f2c2 0200    	movt	r2, #0x2000
 805581e: 6811         	ldr	r1, [r2]
 8055820: f642 5340    	movw	r3, #0x2d40
 8055824: f2c2 0300    	movt	r3, #0x2000
 8055828: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805582c: 3101         	adds	r1, #0x1
 805582e: 6011         	str	r1, [r2]
 8055830: 9001         	str	r0, [sp, #0x4]
;         portCLEAN_UP_TCB( pxTCB );
 8055832: 9801         	ldr	r0, [sp, #0x4]
;             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8055834: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 8055838: b948         	cbnz	r0, 0x805584e <prvDeleteTCB+0x3e> @ imm = #0x12
 805583a: e7ff         	b	0x805583c <prvDeleteTCB+0x2c> @ imm = #-0x2
;                 vPortFreeStack( pxTCB->pxStack );
 805583c: 9801         	ldr	r0, [sp, #0x4]
 805583e: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8055842: 4912         	ldr	r1, [pc, #0x48]         @ 0x805588c <prvDeleteTCB+0x7c>
 8055844: 4788         	blx	r1
;                 vPortFree( pxTCB );
 8055846: 9801         	ldr	r0, [sp, #0x4]
 8055848: 4911         	ldr	r1, [pc, #0x44]         @ 0x8055890 <prvDeleteTCB+0x80>
 805584a: 4788         	blx	r1
;             }
 805584c: e015         	b	0x805587a <prvDeleteTCB+0x6a> @ imm = #0x2a
;             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 805584e: 9801         	ldr	r0, [sp, #0x4]
 8055850: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 8055854: 2801         	cmp	r0, #0x1
 8055856: d104         	bne	0x8055862 <prvDeleteTCB+0x52> @ imm = #0x8
 8055858: e7ff         	b	0x805585a <prvDeleteTCB+0x4a> @ imm = #-0x2
;                 vPortFree( pxTCB );
 805585a: 9801         	ldr	r0, [sp, #0x4]
 805585c: 490a         	ldr	r1, [pc, #0x28]         @ 0x8055888 <prvDeleteTCB+0x78>
 805585e: 4788         	blx	r1
;             }
 8055860: e00a         	b	0x8055878 <prvDeleteTCB+0x68> @ imm = #0x14
;                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8055862: 9801         	ldr	r0, [sp, #0x4]
 8055864: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 8055868: 2802         	cmp	r0, #0x2
 805586a: d004         	beq	0x8055876 <prvDeleteTCB+0x66> @ imm = #0x8
 805586c: e7ff         	b	0x805586e <prvDeleteTCB+0x5e> @ imm = #-0x2
 805586e: 4805         	ldr	r0, [pc, #0x14]         @ 0x8055884 <prvDeleteTCB+0x74>
 8055870: 4780         	blx	r0
 8055872: e7ff         	b	0x8055874 <prvDeleteTCB+0x64> @ imm = #-0x2
 8055874: e7fe         	b	0x8055874 <prvDeleteTCB+0x64> @ imm = #-0x4
 8055876: e7ff         	b	0x8055878 <prvDeleteTCB+0x68> @ imm = #-0x2
 8055878: e7ff         	b	0x805587a <prvDeleteTCB+0x6a> @ imm = #-0x2
;     }
 805587a: 4806         	ldr	r0, [pc, #0x18]         @ 0x8055894 <prvDeleteTCB+0x84>
 805587c: 4780         	blx	r0
 805587e: b002         	add	sp, #0x8
 8055880: bd80         	pop	{r7, pc}
 8055882: bf00         	nop

08055884 <$d.15>:
 8055884: 55 ec 05 08  	.word	0x0805ec55
 8055888: 41 a4 05 08  	.word	0x0805a441
 805588c: 41 a4 05 08  	.word	0x0805a441
 8055890: 41 a4 05 08  	.word	0x0805a441
 8055894: 21 05 06 08  	.word	0x08060521

08055898 <xTaskDelayUntil>:
;     {
 8055898: b580         	push	{r7, lr}
 805589a: 466f         	mov	r7, sp
 805589c: b088         	sub	sp, #0x20
 805589e: f643 5340    	movw	r3, #0x3d40
 80558a2: f2c2 0300    	movt	r3, #0x2000
 80558a6: 681a         	ldr	r2, [r3]
 80558a8: f642 5c40    	movw	r12, #0x2d40
 80558ac: f2c2 0c00    	movt	r12, #0x2000
 80558b0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 80558b4: 3201         	adds	r2, #0x1
 80558b6: 601a         	str	r2, [r3]
 80558b8: 9007         	str	r0, [sp, #0x1c]
 80558ba: 9106         	str	r1, [sp, #0x18]
 80558bc: 2000         	movs	r0, #0x0
;         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80558be: 9003         	str	r0, [sp, #0xc]
;         configASSERT( pxPreviousWakeTime );
 80558c0: 9807         	ldr	r0, [sp, #0x1c]
 80558c2: b920         	cbnz	r0, 0x80558ce <xTaskDelayUntil+0x36> @ imm = #0x8
 80558c4: e7ff         	b	0x80558c6 <xTaskDelayUntil+0x2e> @ imm = #-0x2
 80558c6: 483b         	ldr	r0, [pc, #0xec]         @ 0x80559b4 <xTaskDelayUntil+0x11c>
 80558c8: 4780         	blx	r0
 80558ca: e7ff         	b	0x80558cc <xTaskDelayUntil+0x34> @ imm = #-0x2
 80558cc: e7fe         	b	0x80558cc <xTaskDelayUntil+0x34> @ imm = #-0x4
;         configASSERT( ( xTimeIncrement > 0U ) );
 80558ce: 9806         	ldr	r0, [sp, #0x18]
 80558d0: b920         	cbnz	r0, 0x80558dc <xTaskDelayUntil+0x44> @ imm = #0x8
 80558d2: e7ff         	b	0x80558d4 <xTaskDelayUntil+0x3c> @ imm = #-0x2
 80558d4: 4836         	ldr	r0, [pc, #0xd8]         @ 0x80559b0 <xTaskDelayUntil+0x118>
 80558d6: 4780         	blx	r0
 80558d8: e7ff         	b	0x80558da <xTaskDelayUntil+0x42> @ imm = #-0x2
 80558da: e7fe         	b	0x80558da <xTaskDelayUntil+0x42> @ imm = #-0x4
;         vTaskSuspendAll();
 80558dc: 482e         	ldr	r0, [pc, #0xb8]         @ 0x8055998 <xTaskDelayUntil+0x100>
 80558de: 4780         	blx	r0
;             const TickType_t xConstTickCount = xTickCount;
 80558e0: f240 102c    	movw	r0, #0x12c
 80558e4: f2c2 0000    	movt	r0, #0x2000
 80558e8: 6800         	ldr	r0, [r0]
 80558ea: 9002         	str	r0, [sp, #0x8]
;             configASSERT( uxSchedulerSuspended == 1U );
 80558ec: f240 1028    	movw	r0, #0x128
 80558f0: f2c2 0000    	movt	r0, #0x2000
 80558f4: 6800         	ldr	r0, [r0]
 80558f6: 2801         	cmp	r0, #0x1
 80558f8: d004         	beq	0x8055904 <xTaskDelayUntil+0x6c> @ imm = #0x8
 80558fa: e7ff         	b	0x80558fc <xTaskDelayUntil+0x64> @ imm = #-0x2
 80558fc: 482b         	ldr	r0, [pc, #0xac]         @ 0x80559ac <xTaskDelayUntil+0x114>
 80558fe: 4780         	blx	r0
 8055900: e7ff         	b	0x8055902 <xTaskDelayUntil+0x6a> @ imm = #-0x2
 8055902: e7fe         	b	0x8055902 <xTaskDelayUntil+0x6a> @ imm = #-0x4
;             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8055904: 9807         	ldr	r0, [sp, #0x1c]
 8055906: 6800         	ldr	r0, [r0]
 8055908: 9906         	ldr	r1, [sp, #0x18]
 805590a: 4408         	add	r0, r1
 805590c: 9005         	str	r0, [sp, #0x14]
;             if( xConstTickCount < *pxPreviousWakeTime )
 805590e: 9802         	ldr	r0, [sp, #0x8]
 8055910: 9907         	ldr	r1, [sp, #0x1c]
 8055912: 6809         	ldr	r1, [r1]
 8055914: 4288         	cmp	r0, r1
 8055916: d210         	bhs	0x805593a <xTaskDelayUntil+0xa2> @ imm = #0x20
 8055918: e7ff         	b	0x805591a <xTaskDelayUntil+0x82> @ imm = #-0x2
;                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 805591a: 9805         	ldr	r0, [sp, #0x14]
 805591c: 9907         	ldr	r1, [sp, #0x1c]
 805591e: 6809         	ldr	r1, [r1]
 8055920: 4288         	cmp	r0, r1
 8055922: d208         	bhs	0x8055936 <xTaskDelayUntil+0x9e> @ imm = #0x10
 8055924: e7ff         	b	0x8055926 <xTaskDelayUntil+0x8e> @ imm = #-0x2
 8055926: 9805         	ldr	r0, [sp, #0x14]
 8055928: 9902         	ldr	r1, [sp, #0x8]
 805592a: 4288         	cmp	r0, r1
 805592c: d903         	bls	0x8055936 <xTaskDelayUntil+0x9e> @ imm = #0x6
 805592e: e7ff         	b	0x8055930 <xTaskDelayUntil+0x98> @ imm = #-0x2
 8055930: 2001         	movs	r0, #0x1
;                     xShouldDelay = pdTRUE;
 8055932: 9003         	str	r0, [sp, #0xc]
;                 }
 8055934: e000         	b	0x8055938 <xTaskDelayUntil+0xa0> @ imm = #0x0
 8055936: e7ff         	b	0x8055938 <xTaskDelayUntil+0xa0> @ imm = #-0x2
;             }
 8055938: e00f         	b	0x805595a <xTaskDelayUntil+0xc2> @ imm = #0x1e
;                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 805593a: 9805         	ldr	r0, [sp, #0x14]
 805593c: 9907         	ldr	r1, [sp, #0x1c]
 805593e: 6809         	ldr	r1, [r1]
 8055940: 4288         	cmp	r0, r1
 8055942: d305         	blo	0x8055950 <xTaskDelayUntil+0xb8> @ imm = #0xa
 8055944: e7ff         	b	0x8055946 <xTaskDelayUntil+0xae> @ imm = #-0x2
 8055946: 9805         	ldr	r0, [sp, #0x14]
 8055948: 9902         	ldr	r1, [sp, #0x8]
 805594a: 4288         	cmp	r0, r1
 805594c: d903         	bls	0x8055956 <xTaskDelayUntil+0xbe> @ imm = #0x6
 805594e: e7ff         	b	0x8055950 <xTaskDelayUntil+0xb8> @ imm = #-0x2
 8055950: 2001         	movs	r0, #0x1
;                     xShouldDelay = pdTRUE;
 8055952: 9003         	str	r0, [sp, #0xc]
;                 }
 8055954: e000         	b	0x8055958 <xTaskDelayUntil+0xc0> @ imm = #0x0
 8055956: e7ff         	b	0x8055958 <xTaskDelayUntil+0xc0> @ imm = #-0x2
 8055958: e7ff         	b	0x805595a <xTaskDelayUntil+0xc2> @ imm = #-0x2
;             *pxPreviousWakeTime = xTimeToWake;
 805595a: 9805         	ldr	r0, [sp, #0x14]
 805595c: 9907         	ldr	r1, [sp, #0x1c]
 805595e: 6008         	str	r0, [r1]
;             if( xShouldDelay != pdFALSE )
 8055960: 9803         	ldr	r0, [sp, #0xc]
 8055962: b138         	cbz	r0, 0x8055974 <xTaskDelayUntil+0xdc> @ imm = #0xe
 8055964: e7ff         	b	0x8055966 <xTaskDelayUntil+0xce> @ imm = #-0x2
;                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8055966: 9805         	ldr	r0, [sp, #0x14]
 8055968: 9902         	ldr	r1, [sp, #0x8]
 805596a: 1a40         	subs	r0, r0, r1
 805596c: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805599c <xTaskDelayUntil+0x104>
 805596e: 2100         	movs	r1, #0x0
 8055970: 4790         	blx	r2
;             }
 8055972: e000         	b	0x8055976 <xTaskDelayUntil+0xde> @ imm = #0x0
 8055974: e7ff         	b	0x8055976 <xTaskDelayUntil+0xde> @ imm = #-0x2
;         xAlreadyYielded = xTaskResumeAll();
 8055976: 480a         	ldr	r0, [pc, #0x28]         @ 0x80559a0 <xTaskDelayUntil+0x108>
 8055978: 4780         	blx	r0
 805597a: 9004         	str	r0, [sp, #0x10]
;         if( xAlreadyYielded == pdFALSE )
 805597c: 9804         	ldr	r0, [sp, #0x10]
 805597e: b918         	cbnz	r0, 0x8055988 <xTaskDelayUntil+0xf0> @ imm = #0x6
 8055980: e7ff         	b	0x8055982 <xTaskDelayUntil+0xea> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 8055982: 4808         	ldr	r0, [pc, #0x20]         @ 0x80559a4 <xTaskDelayUntil+0x10c>
 8055984: 4780         	blx	r0
;         }
 8055986: e000         	b	0x805598a <xTaskDelayUntil+0xf2> @ imm = #0x0
 8055988: e7ff         	b	0x805598a <xTaskDelayUntil+0xf2> @ imm = #-0x2
;         return xShouldDelay;
 805598a: 9803         	ldr	r0, [sp, #0xc]
 805598c: 9001         	str	r0, [sp, #0x4]
 805598e: 4806         	ldr	r0, [pc, #0x18]         @ 0x80559a8 <xTaskDelayUntil+0x110>
 8055990: 4780         	blx	r0
 8055992: 9801         	ldr	r0, [sp, #0x4]
 8055994: b008         	add	sp, #0x20
 8055996: bd80         	pop	{r7, pc}

08055998 <$d.17>:
 8055998: b9 59 05 08  	.word	0x080559b9
 805599c: f1 59 05 08  	.word	0x080559f1
 80559a0: 29 5b 05 08  	.word	0x08055b29
 80559a4: c5 e0 05 08  	.word	0x0805e0c5
 80559a8: 21 05 06 08  	.word	0x08060521
 80559ac: 55 ec 05 08  	.word	0x0805ec55
 80559b0: 55 ec 05 08  	.word	0x0805ec55
 80559b4: 55 ec 05 08  	.word	0x0805ec55

080559b8 <vTaskSuspendAll>:
; {
 80559b8: b580         	push	{r7, lr}
 80559ba: 466f         	mov	r7, sp
;         ++uxSchedulerSuspended;
 80559bc: f643 5140    	movw	r1, #0x3d40
 80559c0: f2c2 0100    	movt	r1, #0x2000
 80559c4: 6808         	ldr	r0, [r1]
 80559c6: f642 5240    	movw	r2, #0x2d40
 80559ca: f2c2 0200    	movt	r2, #0x2000
 80559ce: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80559d2: 3001         	adds	r0, #0x1
 80559d4: 6008         	str	r0, [r1]
 80559d6: f240 1128    	movw	r1, #0x128
 80559da: f2c2 0100    	movt	r1, #0x2000
 80559de: 6808         	ldr	r0, [r1]
 80559e0: 3001         	adds	r0, #0x1
 80559e2: 6008         	str	r0, [r1]
; }
 80559e4: 4801         	ldr	r0, [pc, #0x4]          @ 0x80559ec <vTaskSuspendAll+0x34>
 80559e6: 4780         	blx	r0
 80559e8: bd80         	pop	{r7, pc}
 80559ea: bf00         	nop

080559ec <$d.19>:
 80559ec: 21 05 06 08  	.word	0x08060521

080559f0 <prvAddCurrentTaskToDelayedList>:
; {
 80559f0: b580         	push	{r7, lr}
 80559f2: 466f         	mov	r7, sp
 80559f4: b086         	sub	sp, #0x18
 80559f6: f643 5340    	movw	r3, #0x3d40
 80559fa: f2c2 0300    	movt	r3, #0x2000
 80559fe: 681a         	ldr	r2, [r3]
 8055a00: f642 5c40    	movw	r12, #0x2d40
 8055a04: f2c2 0c00    	movt	r12, #0x2000
 8055a08: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8055a0c: 3201         	adds	r2, #0x1
 8055a0e: 601a         	str	r2, [r3]
 8055a10: 9005         	str	r0, [sp, #0x14]
 8055a12: 9104         	str	r1, [sp, #0x10]
;     const TickType_t xConstTickCount = xTickCount;
 8055a14: f240 102c    	movw	r0, #0x12c
 8055a18: f2c2 0000    	movt	r0, #0x2000
 8055a1c: 6800         	ldr	r0, [r0]
 8055a1e: 9002         	str	r0, [sp, #0x8]
;     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8055a20: f240 1000    	movw	r0, #0x100
 8055a24: f2c2 0000    	movt	r0, #0x2000
 8055a28: 6800         	ldr	r0, [r0]
 8055a2a: 3080         	adds	r0, #0x80
 8055a2c: 493a         	ldr	r1, [pc, #0xe8]         @ 0x8055b18 <prvAddCurrentTaskToDelayedList+0x128>
 8055a2e: 4788         	blx	r1
 8055a30: b908         	cbnz	r0, 0x8055a36 <prvAddCurrentTaskToDelayedList+0x46> @ imm = #0x2
 8055a32: e7ff         	b	0x8055a34 <prvAddCurrentTaskToDelayedList+0x44> @ imm = #-0x2
;     }
 8055a34: e000         	b	0x8055a38 <prvAddCurrentTaskToDelayedList+0x48> @ imm = #0x0
 8055a36: e7ff         	b	0x8055a38 <prvAddCurrentTaskToDelayedList+0x48> @ imm = #-0x2
;         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8055a38: 9805         	ldr	r0, [sp, #0x14]
 8055a3a: 3001         	adds	r0, #0x1
 8055a3c: bb40         	cbnz	r0, 0x8055a90 <prvAddCurrentTaskToDelayedList+0xa0> @ imm = #0x50
 8055a3e: e7ff         	b	0x8055a40 <prvAddCurrentTaskToDelayedList+0x50> @ imm = #-0x2
 8055a40: 9804         	ldr	r0, [sp, #0x10]
 8055a42: b328         	cbz	r0, 0x8055a90 <prvAddCurrentTaskToDelayedList+0xa0> @ imm = #0x4a
 8055a44: e7ff         	b	0x8055a46 <prvAddCurrentTaskToDelayedList+0x56> @ imm = #-0x2
;             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8055a46: e7ff         	b	0x8055a48 <prvAddCurrentTaskToDelayedList+0x58> @ imm = #-0x2
 8055a48: f240 114c    	movw	r1, #0x14c
 8055a4c: f2c2 0100    	movt	r1, #0x2000
 8055a50: 6848         	ldr	r0, [r1, #0x4]
 8055a52: 9001         	str	r0, [sp, #0x4]
 8055a54: 9a01         	ldr	r2, [sp, #0x4]
 8055a56: f240 1000    	movw	r0, #0x100
 8055a5a: f2c2 0000    	movt	r0, #0x2000
 8055a5e: 6803         	ldr	r3, [r0]
 8055a60: f8c3 2084    	str.w	r2, [r3, #0x84]
 8055a64: 9a01         	ldr	r2, [sp, #0x4]
 8055a66: 6892         	ldr	r2, [r2, #0x8]
 8055a68: 6803         	ldr	r3, [r0]
 8055a6a: f8c3 2088    	str.w	r2, [r3, #0x88]
 8055a6e: 6802         	ldr	r2, [r0]
 8055a70: 3280         	adds	r2, #0x80
 8055a72: 9b01         	ldr	r3, [sp, #0x4]
 8055a74: 689b         	ldr	r3, [r3, #0x8]
 8055a76: 605a         	str	r2, [r3, #0x4]
 8055a78: 6802         	ldr	r2, [r0]
 8055a7a: 3280         	adds	r2, #0x80
 8055a7c: 9b01         	ldr	r3, [sp, #0x4]
 8055a7e: 609a         	str	r2, [r3, #0x8]
 8055a80: 6800         	ldr	r0, [r0]
 8055a82: f8c0 1090    	str.w	r1, [r0, #0x90]
 8055a86: 6808         	ldr	r0, [r1]
 8055a88: 3001         	adds	r0, #0x1
 8055a8a: 6008         	str	r0, [r1]
 8055a8c: e7ff         	b	0x8055a8e <prvAddCurrentTaskToDelayedList+0x9e> @ imm = #-0x2
;         }
 8055a8e: e03e         	b	0x8055b0e <prvAddCurrentTaskToDelayedList+0x11e> @ imm = #0x7c
;             xTimeToWake = xConstTickCount + xTicksToWait;
 8055a90: 9802         	ldr	r0, [sp, #0x8]
 8055a92: 9905         	ldr	r1, [sp, #0x14]
 8055a94: 4408         	add	r0, r1
 8055a96: 9003         	str	r0, [sp, #0xc]
;             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8055a98: 9803         	ldr	r0, [sp, #0xc]
 8055a9a: f240 1100    	movw	r1, #0x100
 8055a9e: f2c2 0100    	movt	r1, #0x2000
 8055aa2: 6809         	ldr	r1, [r1]
 8055aa4: f8c1 0080    	str.w	r0, [r1, #0x80]
;             if( xTimeToWake < xConstTickCount )
 8055aa8: 9803         	ldr	r0, [sp, #0xc]
 8055aaa: 9902         	ldr	r1, [sp, #0x8]
 8055aac: 4288         	cmp	r0, r1
 8055aae: d20e         	bhs	0x8055ace <prvAddCurrentTaskToDelayedList+0xde> @ imm = #0x1c
 8055ab0: e7ff         	b	0x8055ab2 <prvAddCurrentTaskToDelayedList+0xc2> @ imm = #-0x2
;                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8055ab2: f240 1034    	movw	r0, #0x134
 8055ab6: f2c2 0000    	movt	r0, #0x2000
 8055aba: 6800         	ldr	r0, [r0]
 8055abc: f240 1100    	movw	r1, #0x100
 8055ac0: f2c2 0100    	movt	r1, #0x2000
 8055ac4: 6809         	ldr	r1, [r1]
 8055ac6: 3180         	adds	r1, #0x80
 8055ac8: 4a15         	ldr	r2, [pc, #0x54]         @ 0x8055b20 <prvAddCurrentTaskToDelayedList+0x130>
 8055aca: 4790         	blx	r2
;             }
 8055acc: e01e         	b	0x8055b0c <prvAddCurrentTaskToDelayedList+0x11c> @ imm = #0x3c
;                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8055ace: f240 1030    	movw	r0, #0x130
 8055ad2: f2c2 0000    	movt	r0, #0x2000
 8055ad6: 6800         	ldr	r0, [r0]
 8055ad8: f240 1100    	movw	r1, #0x100
 8055adc: f2c2 0100    	movt	r1, #0x2000
 8055ae0: 6809         	ldr	r1, [r1]
 8055ae2: 3180         	adds	r1, #0x80
 8055ae4: 4a0d         	ldr	r2, [pc, #0x34]         @ 0x8055b1c <prvAddCurrentTaskToDelayedList+0x12c>
 8055ae6: 4790         	blx	r2
;                 if( xTimeToWake < xNextTaskUnblockTime )
 8055ae8: 9803         	ldr	r0, [sp, #0xc]
 8055aea: f240 21a8    	movw	r1, #0x2a8
 8055aee: f2c2 0100    	movt	r1, #0x2000
 8055af2: 6809         	ldr	r1, [r1]
 8055af4: 4288         	cmp	r0, r1
 8055af6: d207         	bhs	0x8055b08 <prvAddCurrentTaskToDelayedList+0x118> @ imm = #0xe
 8055af8: e7ff         	b	0x8055afa <prvAddCurrentTaskToDelayedList+0x10a> @ imm = #-0x2
;                     xNextTaskUnblockTime = xTimeToWake;
 8055afa: 9803         	ldr	r0, [sp, #0xc]
 8055afc: f240 21a8    	movw	r1, #0x2a8
 8055b00: f2c2 0100    	movt	r1, #0x2000
 8055b04: 6008         	str	r0, [r1]
;                 }
 8055b06: e000         	b	0x8055b0a <prvAddCurrentTaskToDelayedList+0x11a> @ imm = #0x0
 8055b08: e7ff         	b	0x8055b0a <prvAddCurrentTaskToDelayedList+0x11a> @ imm = #-0x2
 8055b0a: e7ff         	b	0x8055b0c <prvAddCurrentTaskToDelayedList+0x11c> @ imm = #-0x2
 8055b0c: e7ff         	b	0x8055b0e <prvAddCurrentTaskToDelayedList+0x11e> @ imm = #-0x2
; }
 8055b0e: 4805         	ldr	r0, [pc, #0x14]         @ 0x8055b24 <prvAddCurrentTaskToDelayedList+0x134>
 8055b10: 4780         	blx	r0
 8055b12: b006         	add	sp, #0x18
 8055b14: bd80         	pop	{r7, pc}
 8055b16: bf00         	nop

08055b18 <$d.21>:
 8055b18: c9 b1 05 08  	.word	0x0805b1c9
 8055b1c: 39 b1 05 08  	.word	0x0805b139
 8055b20: 39 b1 05 08  	.word	0x0805b139
 8055b24: 21 05 06 08  	.word	0x08060521

08055b28 <xTaskResumeAll>:
; {
 8055b28: b580         	push	{r7, lr}
 8055b2a: 466f         	mov	r7, sp
 8055b2c: b08a         	sub	sp, #0x28
 8055b2e: f643 5140    	movw	r1, #0x3d40
 8055b32: f2c2 0100    	movt	r1, #0x2000
 8055b36: 6808         	ldr	r0, [r1]
 8055b38: f642 5240    	movw	r2, #0x2d40
 8055b3c: f2c2 0200    	movt	r2, #0x2000
 8055b40: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8055b44: 3001         	adds	r0, #0x1
 8055b46: 6008         	str	r0, [r1]
 8055b48: 2000         	movs	r0, #0x0
;     TCB_t * pxTCB = NULL;
 8055b4a: 9002         	str	r0, [sp, #0x8]
 8055b4c: 9009         	str	r0, [sp, #0x24]
;     BaseType_t xAlreadyYielded = pdFALSE;
 8055b4e: 9008         	str	r0, [sp, #0x20]
;         taskENTER_CRITICAL();
 8055b50: 489b         	ldr	r0, [pc, #0x26c]        @ 0x8055dc0 <xTaskResumeAll+0x298>
 8055b52: 4780         	blx	r0
 8055b54: 9802         	ldr	r0, [sp, #0x8]
;             xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8055b56: 9007         	str	r0, [sp, #0x1c]
;             configASSERT( uxSchedulerSuspended != 0U );
 8055b58: f240 1028    	movw	r0, #0x128
 8055b5c: f2c2 0000    	movt	r0, #0x2000
 8055b60: 6800         	ldr	r0, [r0]
 8055b62: b920         	cbnz	r0, 0x8055b6e <xTaskResumeAll+0x46> @ imm = #0x8
 8055b64: e7ff         	b	0x8055b66 <xTaskResumeAll+0x3e> @ imm = #-0x2
 8055b66: 489c         	ldr	r0, [pc, #0x270]        @ 0x8055dd8 <xTaskResumeAll+0x2b0>
 8055b68: 4780         	blx	r0
 8055b6a: e7ff         	b	0x8055b6c <xTaskResumeAll+0x44> @ imm = #-0x2
 8055b6c: e7fe         	b	0x8055b6c <xTaskResumeAll+0x44> @ imm = #-0x4
;             --uxSchedulerSuspended;
 8055b6e: f240 1028    	movw	r0, #0x128
 8055b72: f2c2 0000    	movt	r0, #0x2000
 8055b76: 6801         	ldr	r1, [r0]
 8055b78: 3901         	subs	r1, #0x1
 8055b7a: 6001         	str	r1, [r0]
;             if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8055b7c: 6800         	ldr	r0, [r0]
 8055b7e: 2800         	cmp	r0, #0x0
 8055b80: f040 8113    	bne.w	0x8055daa <xTaskResumeAll+0x282> @ imm = #0x226
 8055b84: e7ff         	b	0x8055b86 <xTaskResumeAll+0x5e> @ imm = #-0x2
;                 if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8055b86: f240 1020    	movw	r0, #0x120
 8055b8a: f2c2 0000    	movt	r0, #0x2000
 8055b8e: 6800         	ldr	r0, [r0]
 8055b90: 2800         	cmp	r0, #0x0
 8055b92: f000 8109    	beq.w	0x8055da8 <xTaskResumeAll+0x280> @ imm = #0x212
 8055b96: e7ff         	b	0x8055b98 <xTaskResumeAll+0x70> @ imm = #-0x2
;                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8055b98: e7ff         	b	0x8055b9a <xTaskResumeAll+0x72> @ imm = #-0x2
 8055b9a: f240 1038    	movw	r0, #0x138
 8055b9e: f2c2 0000    	movt	r0, #0x2000
 8055ba2: 6800         	ldr	r0, [r0]
 8055ba4: 2800         	cmp	r0, #0x0
 8055ba6: f000 80ba    	beq.w	0x8055d1e <xTaskResumeAll+0x1f6> @ imm = #0x174
 8055baa: e7ff         	b	0x8055bac <xTaskResumeAll+0x84> @ imm = #-0x2
;                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8055bac: f240 1038    	movw	r0, #0x138
 8055bb0: f2c2 0000    	movt	r0, #0x2000
 8055bb4: 68c0         	ldr	r0, [r0, #0xc]
 8055bb6: 68c0         	ldr	r0, [r0, #0xc]
 8055bb8: 9009         	str	r0, [sp, #0x24]
;                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8055bba: e7ff         	b	0x8055bbc <xTaskResumeAll+0x94> @ imm = #-0x2
 8055bbc: 9809         	ldr	r0, [sp, #0x24]
 8055bbe: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055bc2: 9006         	str	r0, [sp, #0x18]
 8055bc4: 9809         	ldr	r0, [sp, #0x24]
 8055bc6: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8055bca: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8055bce: 6088         	str	r0, [r1, #0x8]
 8055bd0: 9909         	ldr	r1, [sp, #0x24]
 8055bd2: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8055bd6: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8055bda: 6048         	str	r0, [r1, #0x4]
 8055bdc: 9806         	ldr	r0, [sp, #0x18]
 8055bde: 6840         	ldr	r0, [r0, #0x4]
 8055be0: 9909         	ldr	r1, [sp, #0x24]
 8055be2: 3194         	adds	r1, #0x94
 8055be4: 4288         	cmp	r0, r1
 8055be6: d106         	bne	0x8055bf6 <xTaskResumeAll+0xce> @ imm = #0xc
 8055be8: e7ff         	b	0x8055bea <xTaskResumeAll+0xc2> @ imm = #-0x2
 8055bea: 9809         	ldr	r0, [sp, #0x24]
 8055bec: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8055bf0: 9906         	ldr	r1, [sp, #0x18]
 8055bf2: 6048         	str	r0, [r1, #0x4]
 8055bf4: e7ff         	b	0x8055bf6 <xTaskResumeAll+0xce> @ imm = #-0x2
 8055bf6: 9909         	ldr	r1, [sp, #0x24]
 8055bf8: 2000         	movs	r0, #0x0
 8055bfa: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8055bfe: 9906         	ldr	r1, [sp, #0x18]
 8055c00: 6808         	ldr	r0, [r1]
 8055c02: 3801         	subs	r0, #0x1
 8055c04: 6008         	str	r0, [r1]
 8055c06: e7ff         	b	0x8055c08 <xTaskResumeAll+0xe0> @ imm = #-0x2
;                         listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8055c08: e7ff         	b	0x8055c0a <xTaskResumeAll+0xe2> @ imm = #-0x2
 8055c0a: 9809         	ldr	r0, [sp, #0x24]
 8055c0c: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8055c10: 9005         	str	r0, [sp, #0x14]
 8055c12: 9809         	ldr	r0, [sp, #0x24]
 8055c14: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8055c18: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8055c1c: 6088         	str	r0, [r1, #0x8]
 8055c1e: 9909         	ldr	r1, [sp, #0x24]
 8055c20: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8055c24: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8055c28: 6048         	str	r0, [r1, #0x4]
 8055c2a: 9805         	ldr	r0, [sp, #0x14]
 8055c2c: 6840         	ldr	r0, [r0, #0x4]
 8055c2e: 9909         	ldr	r1, [sp, #0x24]
 8055c30: 3180         	adds	r1, #0x80
 8055c32: 4288         	cmp	r0, r1
 8055c34: d106         	bne	0x8055c44 <xTaskResumeAll+0x11c> @ imm = #0xc
 8055c36: e7ff         	b	0x8055c38 <xTaskResumeAll+0x110> @ imm = #-0x2
 8055c38: 9809         	ldr	r0, [sp, #0x24]
 8055c3a: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8055c3e: 9905         	ldr	r1, [sp, #0x14]
 8055c40: 6048         	str	r0, [r1, #0x4]
 8055c42: e7ff         	b	0x8055c44 <xTaskResumeAll+0x11c> @ imm = #-0x2
 8055c44: 9909         	ldr	r1, [sp, #0x24]
 8055c46: 2000         	movs	r0, #0x0
 8055c48: f8c1 0090    	str.w	r0, [r1, #0x90]
 8055c4c: 9905         	ldr	r1, [sp, #0x14]
 8055c4e: 6808         	ldr	r0, [r1]
 8055c50: 3801         	subs	r0, #0x1
 8055c52: 6008         	str	r0, [r1]
 8055c54: e7ff         	b	0x8055c56 <xTaskResumeAll+0x12e> @ imm = #-0x2
;                         prvAddTaskToReadyList( pxTCB );
 8055c56: e7ff         	b	0x8055c58 <xTaskResumeAll+0x130> @ imm = #-0x2
 8055c58: e7ff         	b	0x8055c5a <xTaskResumeAll+0x132> @ imm = #-0x2
 8055c5a: 9809         	ldr	r0, [sp, #0x24]
 8055c5c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055c60: f240 21a0    	movw	r1, #0x2a0
 8055c64: f2c2 0100    	movt	r1, #0x2000
 8055c68: 6809         	ldr	r1, [r1]
 8055c6a: 4288         	cmp	r0, r1
 8055c6c: d909         	bls	0x8055c82 <xTaskResumeAll+0x15a> @ imm = #0x12
 8055c6e: e7ff         	b	0x8055c70 <xTaskResumeAll+0x148> @ imm = #-0x2
 8055c70: 9809         	ldr	r0, [sp, #0x24]
 8055c72: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055c76: f240 21a0    	movw	r1, #0x2a0
 8055c7a: f2c2 0100    	movt	r1, #0x2000
 8055c7e: 6008         	str	r0, [r1]
 8055c80: e7ff         	b	0x8055c82 <xTaskResumeAll+0x15a> @ imm = #-0x2
 8055c82: e7ff         	b	0x8055c84 <xTaskResumeAll+0x15c> @ imm = #-0x2
 8055c84: e7ff         	b	0x8055c86 <xTaskResumeAll+0x15e> @ imm = #-0x2
 8055c86: 9809         	ldr	r0, [sp, #0x24]
 8055c88: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055c8c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055c90: f240 1160    	movw	r1, #0x160
 8055c94: f2c2 0100    	movt	r1, #0x2000
 8055c98: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055c9c: 6840         	ldr	r0, [r0, #0x4]
 8055c9e: 9004         	str	r0, [sp, #0x10]
 8055ca0: 9804         	ldr	r0, [sp, #0x10]
 8055ca2: 9a09         	ldr	r2, [sp, #0x24]
 8055ca4: f8c2 0084    	str.w	r0, [r2, #0x84]
 8055ca8: 9804         	ldr	r0, [sp, #0x10]
 8055caa: 6880         	ldr	r0, [r0, #0x8]
 8055cac: 9a09         	ldr	r2, [sp, #0x24]
 8055cae: f8c2 0088    	str.w	r0, [r2, #0x88]
 8055cb2: 9809         	ldr	r0, [sp, #0x24]
 8055cb4: 3080         	adds	r0, #0x80
 8055cb6: 9a04         	ldr	r2, [sp, #0x10]
 8055cb8: 6892         	ldr	r2, [r2, #0x8]
 8055cba: 6050         	str	r0, [r2, #0x4]
 8055cbc: 9809         	ldr	r0, [sp, #0x24]
 8055cbe: 3080         	adds	r0, #0x80
 8055cc0: 9a04         	ldr	r2, [sp, #0x10]
 8055cc2: 6090         	str	r0, [r2, #0x8]
 8055cc4: 9a09         	ldr	r2, [sp, #0x24]
 8055cc6: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8055cca: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055cce: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055cd2: f8c2 0090    	str.w	r0, [r2, #0x90]
 8055cd6: 9809         	ldr	r0, [sp, #0x24]
 8055cd8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055cdc: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8055ce0: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8055ce4: 3001         	adds	r0, #0x1
 8055ce6: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8055cea: e7ff         	b	0x8055cec <xTaskResumeAll+0x1c4> @ imm = #-0x2
 8055cec: e7ff         	b	0x8055cee <xTaskResumeAll+0x1c6> @ imm = #-0x2
;                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8055cee: 9809         	ldr	r0, [sp, #0x24]
 8055cf0: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055cf4: f240 1100    	movw	r1, #0x100
 8055cf8: f2c2 0100    	movt	r1, #0x2000
 8055cfc: 6809         	ldr	r1, [r1]
 8055cfe: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055d02: 4288         	cmp	r0, r1
 8055d04: d909         	bls	0x8055d1a <xTaskResumeAll+0x1f2> @ imm = #0x12
 8055d06: e7ff         	b	0x8055d08 <xTaskResumeAll+0x1e0> @ imm = #-0x2
;                                 xYieldPendings[ xCoreID ] = pdTRUE;
 8055d08: 9a07         	ldr	r2, [sp, #0x1c]
 8055d0a: f240 21a4    	movw	r1, #0x2a4
 8055d0e: f2c2 0100    	movt	r1, #0x2000
 8055d12: 2001         	movs	r0, #0x1
 8055d14: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;                             }
 8055d18: e000         	b	0x8055d1c <xTaskResumeAll+0x1f4> @ imm = #0x0
 8055d1a: e7ff         	b	0x8055d1c <xTaskResumeAll+0x1f4> @ imm = #-0x2
;                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8055d1c: e73d         	b	0x8055b9a <xTaskResumeAll+0x72> @ imm = #-0x186
;                     if( pxTCB != NULL )
 8055d1e: 9809         	ldr	r0, [sp, #0x24]
 8055d20: b118         	cbz	r0, 0x8055d2a <xTaskResumeAll+0x202> @ imm = #0x6
 8055d22: e7ff         	b	0x8055d24 <xTaskResumeAll+0x1fc> @ imm = #-0x2
;                         prvResetNextTaskUnblockTime();
 8055d24: 4827         	ldr	r0, [pc, #0x9c]         @ 0x8055dc4 <xTaskResumeAll+0x29c>
 8055d26: 4780         	blx	r0
;                     }
 8055d28: e7ff         	b	0x8055d2a <xTaskResumeAll+0x202> @ imm = #-0x2
;                         TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8055d2a: f240 20b0    	movw	r0, #0x2b0
 8055d2e: f2c2 0000    	movt	r0, #0x2000
 8055d32: 6800         	ldr	r0, [r0]
 8055d34: 9003         	str	r0, [sp, #0xc]
;                         if( xPendedCounts > ( TickType_t ) 0U )
 8055d36: 9803         	ldr	r0, [sp, #0xc]
 8055d38: b1f0         	cbz	r0, 0x8055d78 <xTaskResumeAll+0x250> @ imm = #0x3c
 8055d3a: e7ff         	b	0x8055d3c <xTaskResumeAll+0x214> @ imm = #-0x2
;                             do
 8055d3c: e7ff         	b	0x8055d3e <xTaskResumeAll+0x216> @ imm = #-0x2
;                                 if( xTaskIncrementTick() != pdFALSE )
 8055d3e: 4822         	ldr	r0, [pc, #0x88]         @ 0x8055dc8 <xTaskResumeAll+0x2a0>
 8055d40: 4780         	blx	r0
 8055d42: b148         	cbz	r0, 0x8055d58 <xTaskResumeAll+0x230> @ imm = #0x12
 8055d44: e7ff         	b	0x8055d46 <xTaskResumeAll+0x21e> @ imm = #-0x2
;                                     xYieldPendings[ xCoreID ] = pdTRUE;
 8055d46: 9a07         	ldr	r2, [sp, #0x1c]
 8055d48: f240 21a4    	movw	r1, #0x2a4
 8055d4c: f2c2 0100    	movt	r1, #0x2000
 8055d50: 2001         	movs	r0, #0x1
 8055d52: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;                                 }
 8055d56: e000         	b	0x8055d5a <xTaskResumeAll+0x232> @ imm = #0x0
 8055d58: e7ff         	b	0x8055d5a <xTaskResumeAll+0x232> @ imm = #-0x2
;                                 --xPendedCounts;
 8055d5a: 9803         	ldr	r0, [sp, #0xc]
 8055d5c: 3801         	subs	r0, #0x1
 8055d5e: 9003         	str	r0, [sp, #0xc]
;                             } while( xPendedCounts > ( TickType_t ) 0U );
 8055d60: e7ff         	b	0x8055d62 <xTaskResumeAll+0x23a> @ imm = #-0x2
 8055d62: 9803         	ldr	r0, [sp, #0xc]
 8055d64: 2800         	cmp	r0, #0x0
 8055d66: d1ea         	bne	0x8055d3e <xTaskResumeAll+0x216> @ imm = #-0x2c
 8055d68: e7ff         	b	0x8055d6a <xTaskResumeAll+0x242> @ imm = #-0x2
;                             xPendedTicks = 0;
 8055d6a: f240 21b0    	movw	r1, #0x2b0
 8055d6e: f2c2 0100    	movt	r1, #0x2000
 8055d72: 2000         	movs	r0, #0x0
 8055d74: 6008         	str	r0, [r1]
;                         }
 8055d76: e000         	b	0x8055d7a <xTaskResumeAll+0x252> @ imm = #0x0
 8055d78: e7ff         	b	0x8055d7a <xTaskResumeAll+0x252> @ imm = #-0x2
;                     if( xYieldPendings[ xCoreID ] != pdFALSE )
 8055d7a: 9907         	ldr	r1, [sp, #0x1c]
 8055d7c: f240 20a4    	movw	r0, #0x2a4
 8055d80: f2c2 0000    	movt	r0, #0x2000
 8055d84: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 8055d88: b160         	cbz	r0, 0x8055da4 <xTaskResumeAll+0x27c> @ imm = #0x18
 8055d8a: e7ff         	b	0x8055d8c <xTaskResumeAll+0x264> @ imm = #-0x2
 8055d8c: 2001         	movs	r0, #0x1
;                             xAlreadyYielded = pdTRUE;
 8055d8e: 9008         	str	r0, [sp, #0x20]
;                             taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8055d90: e7ff         	b	0x8055d92 <xTaskResumeAll+0x26a> @ imm = #-0x2
 8055d92: f240 1000    	movw	r0, #0x100
 8055d96: f2c2 0000    	movt	r0, #0x2000
 8055d9a: 6800         	ldr	r0, [r0]
 8055d9c: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8055dcc <xTaskResumeAll+0x2a4>
 8055d9e: 4780         	blx	r0
 8055da0: e7ff         	b	0x8055da2 <xTaskResumeAll+0x27a> @ imm = #-0x2
;                     }
 8055da2: e000         	b	0x8055da6 <xTaskResumeAll+0x27e> @ imm = #0x0
 8055da4: e7ff         	b	0x8055da6 <xTaskResumeAll+0x27e> @ imm = #-0x2
;                 }
 8055da6: e7ff         	b	0x8055da8 <xTaskResumeAll+0x280> @ imm = #-0x2
;             }
 8055da8: e000         	b	0x8055dac <xTaskResumeAll+0x284> @ imm = #0x0
 8055daa: e7ff         	b	0x8055dac <xTaskResumeAll+0x284> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8055dac: 4808         	ldr	r0, [pc, #0x20]         @ 0x8055dd0 <xTaskResumeAll+0x2a8>
 8055dae: 4780         	blx	r0
;     return xAlreadyYielded;
 8055db0: 9808         	ldr	r0, [sp, #0x20]
 8055db2: 9001         	str	r0, [sp, #0x4]
 8055db4: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8055dd4 <xTaskResumeAll+0x2ac>
 8055db6: 4780         	blx	r0
 8055db8: 9801         	ldr	r0, [sp, #0x4]
 8055dba: b00a         	add	sp, #0x28
 8055dbc: bd80         	pop	{r7, pc}
 8055dbe: bf00         	nop

08055dc0 <$d.23>:
 8055dc0: 05 e1 05 08  	.word	0x0805e105
 8055dc4: ad 57 05 08  	.word	0x080557ad
 8055dc8: 6d 6a 05 08  	.word	0x08056a6d
 8055dcc: c5 e0 05 08  	.word	0x0805e0c5
 8055dd0: 4d e1 05 08  	.word	0x0805e14d
 8055dd4: 21 05 06 08  	.word	0x08060521
 8055dd8: 55 ec 05 08  	.word	0x0805ec55

08055ddc <vTaskDelay>:
;     {
 8055ddc: b580         	push	{r7, lr}
 8055dde: 466f         	mov	r7, sp
 8055de0: b082         	sub	sp, #0x8
 8055de2: f643 5240    	movw	r2, #0x3d40
 8055de6: f2c2 0200    	movt	r2, #0x2000
 8055dea: 6811         	ldr	r1, [r2]
 8055dec: f642 5340    	movw	r3, #0x2d40
 8055df0: f2c2 0300    	movt	r3, #0x2000
 8055df4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8055df8: 3101         	adds	r1, #0x1
 8055dfa: 6011         	str	r1, [r2]
 8055dfc: 9001         	str	r0, [sp, #0x4]
 8055dfe: 2000         	movs	r0, #0x0
;         BaseType_t xAlreadyYielded = pdFALSE;
 8055e00: 9000         	str	r0, [sp]
;         if( xTicksToDelay > ( TickType_t ) 0U )
 8055e02: 9801         	ldr	r0, [sp, #0x4]
 8055e04: b1b0         	cbz	r0, 0x8055e34 <vTaskDelay+0x58> @ imm = #0x2c
 8055e06: e7ff         	b	0x8055e08 <vTaskDelay+0x2c> @ imm = #-0x2
;             vTaskSuspendAll();
 8055e08: 4810         	ldr	r0, [pc, #0x40]         @ 0x8055e4c <vTaskDelay+0x70>
 8055e0a: 4780         	blx	r0
;                 configASSERT( uxSchedulerSuspended == 1U );
 8055e0c: f240 1028    	movw	r0, #0x128
 8055e10: f2c2 0000    	movt	r0, #0x2000
 8055e14: 6800         	ldr	r0, [r0]
 8055e16: 2801         	cmp	r0, #0x1
 8055e18: d004         	beq	0x8055e24 <vTaskDelay+0x48> @ imm = #0x8
 8055e1a: e7ff         	b	0x8055e1c <vTaskDelay+0x40> @ imm = #-0x2
 8055e1c: 4810         	ldr	r0, [pc, #0x40]         @ 0x8055e60 <vTaskDelay+0x84>
 8055e1e: 4780         	blx	r0
 8055e20: e7ff         	b	0x8055e22 <vTaskDelay+0x46> @ imm = #-0x2
 8055e22: e7fe         	b	0x8055e22 <vTaskDelay+0x46> @ imm = #-0x4
;                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8055e24: 9801         	ldr	r0, [sp, #0x4]
 8055e26: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x8055e50 <vTaskDelay+0x74>
 8055e28: 2100         	movs	r1, #0x0
 8055e2a: 4790         	blx	r2
;             xAlreadyYielded = xTaskResumeAll();
 8055e2c: 4809         	ldr	r0, [pc, #0x24]         @ 0x8055e54 <vTaskDelay+0x78>
 8055e2e: 4780         	blx	r0
 8055e30: 9000         	str	r0, [sp]
;         }
 8055e32: e000         	b	0x8055e36 <vTaskDelay+0x5a> @ imm = #0x0
 8055e34: e7ff         	b	0x8055e36 <vTaskDelay+0x5a> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 8055e36: 9800         	ldr	r0, [sp]
 8055e38: b918         	cbnz	r0, 0x8055e42 <vTaskDelay+0x66> @ imm = #0x6
 8055e3a: e7ff         	b	0x8055e3c <vTaskDelay+0x60> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 8055e3c: 4806         	ldr	r0, [pc, #0x18]         @ 0x8055e58 <vTaskDelay+0x7c>
 8055e3e: 4780         	blx	r0
;         }
 8055e40: e000         	b	0x8055e44 <vTaskDelay+0x68> @ imm = #0x0
 8055e42: e7ff         	b	0x8055e44 <vTaskDelay+0x68> @ imm = #-0x2
;     }
 8055e44: 4805         	ldr	r0, [pc, #0x14]         @ 0x8055e5c <vTaskDelay+0x80>
 8055e46: 4780         	blx	r0
 8055e48: b002         	add	sp, #0x8
 8055e4a: bd80         	pop	{r7, pc}

08055e4c <$d.25>:
 8055e4c: b9 59 05 08  	.word	0x080559b9
 8055e50: f1 59 05 08  	.word	0x080559f1
 8055e54: 29 5b 05 08  	.word	0x08055b29
 8055e58: c5 e0 05 08  	.word	0x0805e0c5
 8055e5c: 21 05 06 08  	.word	0x08060521
 8055e60: 55 ec 05 08  	.word	0x0805ec55

08055e64 <eTaskGetState>:
;     {
 8055e64: b580         	push	{r7, lr}
 8055e66: 466f         	mov	r7, sp
 8055e68: b08a         	sub	sp, #0x28
 8055e6a: f643 5240    	movw	r2, #0x3d40
 8055e6e: f2c2 0200    	movt	r2, #0x2000
 8055e72: 6811         	ldr	r1, [r2]
 8055e74: f642 5340    	movw	r3, #0x2d40
 8055e78: f2c2 0300    	movt	r3, #0x2000
 8055e7c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8055e80: 3101         	adds	r1, #0x1
 8055e82: 6011         	str	r1, [r2]
 8055e84: 9009         	str	r0, [sp, #0x24]
;         const TCB_t * const pxTCB = xTask;
 8055e86: 9809         	ldr	r0, [sp, #0x24]
 8055e88: 9003         	str	r0, [sp, #0xc]
;         configASSERT( pxTCB );
 8055e8a: 9803         	ldr	r0, [sp, #0xc]
 8055e8c: b920         	cbnz	r0, 0x8055e98 <eTaskGetState+0x34> @ imm = #0x8
 8055e8e: e7ff         	b	0x8055e90 <eTaskGetState+0x2c> @ imm = #-0x2
 8055e90: 484a         	ldr	r0, [pc, #0x128]        @ 0x8055fbc <eTaskGetState+0x158>
 8055e92: 4780         	blx	r0
 8055e94: e7ff         	b	0x8055e96 <eTaskGetState+0x32> @ imm = #-0x2
 8055e96: e7fe         	b	0x8055e96 <eTaskGetState+0x32> @ imm = #-0x4
;             if( pxTCB == pxCurrentTCB )
 8055e98: 9803         	ldr	r0, [sp, #0xc]
 8055e9a: f240 1100    	movw	r1, #0x100
 8055e9e: f2c2 0100    	movt	r1, #0x2000
 8055ea2: 6809         	ldr	r1, [r1]
 8055ea4: 4288         	cmp	r0, r1
 8055ea6: d104         	bne	0x8055eb2 <eTaskGetState+0x4e> @ imm = #0x8
 8055ea8: e7ff         	b	0x8055eaa <eTaskGetState+0x46> @ imm = #-0x2
 8055eaa: 2000         	movs	r0, #0x0
;                 eReturn = eRunning;
 8055eac: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055eb0: e076         	b	0x8055fa0 <eTaskGetState+0x13c> @ imm = #0xec
;             taskENTER_CRITICAL();
 8055eb2: 483f         	ldr	r0, [pc, #0xfc]         @ 0x8055fb0 <eTaskGetState+0x14c>
 8055eb4: 4780         	blx	r0
;                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8055eb6: 9803         	ldr	r0, [sp, #0xc]
 8055eb8: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8055ebc: 9007         	str	r0, [sp, #0x1c]
;                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8055ebe: 9803         	ldr	r0, [sp, #0xc]
 8055ec0: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055ec4: 9006         	str	r0, [sp, #0x18]
;                 pxDelayedList = pxDelayedTaskList;
 8055ec6: f240 1030    	movw	r0, #0x130
 8055eca: f2c2 0000    	movt	r0, #0x2000
 8055ece: 6800         	ldr	r0, [r0]
 8055ed0: 9005         	str	r0, [sp, #0x14]
;                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8055ed2: f240 1034    	movw	r0, #0x134
 8055ed6: f2c2 0000    	movt	r0, #0x2000
 8055eda: 6800         	ldr	r0, [r0]
 8055edc: 9004         	str	r0, [sp, #0x10]
;             taskEXIT_CRITICAL();
 8055ede: 4835         	ldr	r0, [pc, #0xd4]         @ 0x8055fb4 <eTaskGetState+0x150>
 8055ee0: 4780         	blx	r0
;             if( pxEventList == &xPendingReadyList )
 8055ee2: 9806         	ldr	r0, [sp, #0x18]
 8055ee4: f240 1138    	movw	r1, #0x138
 8055ee8: f2c2 0100    	movt	r1, #0x2000
 8055eec: 4288         	cmp	r0, r1
 8055eee: d104         	bne	0x8055efa <eTaskGetState+0x96> @ imm = #0x8
 8055ef0: e7ff         	b	0x8055ef2 <eTaskGetState+0x8e> @ imm = #-0x2
 8055ef2: 2001         	movs	r0, #0x1
;                 eReturn = eReady;
 8055ef4: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055ef8: e051         	b	0x8055f9e <eTaskGetState+0x13a> @ imm = #0xa2
;             else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8055efa: 9807         	ldr	r0, [sp, #0x1c]
 8055efc: 9905         	ldr	r1, [sp, #0x14]
 8055efe: 4288         	cmp	r0, r1
 8055f00: d005         	beq	0x8055f0e <eTaskGetState+0xaa> @ imm = #0xa
 8055f02: e7ff         	b	0x8055f04 <eTaskGetState+0xa0> @ imm = #-0x2
 8055f04: 9807         	ldr	r0, [sp, #0x1c]
 8055f06: 9904         	ldr	r1, [sp, #0x10]
 8055f08: 4288         	cmp	r0, r1
 8055f0a: d104         	bne	0x8055f16 <eTaskGetState+0xb2> @ imm = #0x8
 8055f0c: e7ff         	b	0x8055f0e <eTaskGetState+0xaa> @ imm = #-0x2
 8055f0e: 2002         	movs	r0, #0x2
;                 eReturn = eBlocked;
 8055f10: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055f14: e042         	b	0x8055f9c <eTaskGetState+0x138> @ imm = #0x84
;                 else if( pxStateList == &xSuspendedTaskList )
 8055f16: 9807         	ldr	r0, [sp, #0x1c]
 8055f18: f240 114c    	movw	r1, #0x14c
 8055f1c: f2c2 0100    	movt	r1, #0x2000
 8055f20: 4288         	cmp	r0, r1
 8055f22: d126         	bne	0x8055f72 <eTaskGetState+0x10e> @ imm = #0x4c
 8055f24: e7ff         	b	0x8055f26 <eTaskGetState+0xc2> @ imm = #-0x2
;                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8055f26: 9803         	ldr	r0, [sp, #0xc]
 8055f28: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055f2c: b9e0         	cbnz	r0, 0x8055f68 <eTaskGetState+0x104> @ imm = #0x38
 8055f2e: e7ff         	b	0x8055f30 <eTaskGetState+0xcc> @ imm = #-0x2
 8055f30: 2003         	movs	r0, #0x3
;                             eReturn = eSuspended;
 8055f32: f807 0c05    	strb	r0, [r7, #-5]
 8055f36: 2000         	movs	r0, #0x0
;                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8055f38: 9002         	str	r0, [sp, #0x8]
 8055f3a: e7ff         	b	0x8055f3c <eTaskGetState+0xd8> @ imm = #-0x2
 8055f3c: 9802         	ldr	r0, [sp, #0x8]
 8055f3e: 2800         	cmp	r0, #0x0
 8055f40: dc11         	bgt	0x8055f66 <eTaskGetState+0x102> @ imm = #0x22
 8055f42: e7ff         	b	0x8055f44 <eTaskGetState+0xe0> @ imm = #-0x2
;                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8055f44: 9803         	ldr	r0, [sp, #0xc]
 8055f46: 9902         	ldr	r1, [sp, #0x8]
 8055f48: 4408         	add	r0, r1
 8055f4a: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8055f4e: 2801         	cmp	r0, #0x1
 8055f50: d104         	bne	0x8055f5c <eTaskGetState+0xf8> @ imm = #0x8
 8055f52: e7ff         	b	0x8055f54 <eTaskGetState+0xf0> @ imm = #-0x2
 8055f54: 2002         	movs	r0, #0x2
;                                     eReturn = eBlocked;
 8055f56: f807 0c05    	strb	r0, [r7, #-5]
;                                     break;
 8055f5a: e004         	b	0x8055f66 <eTaskGetState+0x102> @ imm = #0x8
;                             }
 8055f5c: e7ff         	b	0x8055f5e <eTaskGetState+0xfa> @ imm = #-0x2
;                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8055f5e: 9802         	ldr	r0, [sp, #0x8]
 8055f60: 3001         	adds	r0, #0x1
 8055f62: 9002         	str	r0, [sp, #0x8]
 8055f64: e7ea         	b	0x8055f3c <eTaskGetState+0xd8> @ imm = #-0x2c
;                     }
 8055f66: e003         	b	0x8055f70 <eTaskGetState+0x10c> @ imm = #0x6
 8055f68: 2002         	movs	r0, #0x2
;                         eReturn = eBlocked;
 8055f6a: f807 0c05    	strb	r0, [r7, #-5]
 8055f6e: e7ff         	b	0x8055f70 <eTaskGetState+0x10c> @ imm = #-0x2
;                 }
 8055f70: e013         	b	0x8055f9a <eTaskGetState+0x136> @ imm = #0x26
;                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8055f72: 9807         	ldr	r0, [sp, #0x1c]
 8055f74: f240 1108    	movw	r1, #0x108
 8055f78: f2c2 0100    	movt	r1, #0x2000
 8055f7c: 4288         	cmp	r0, r1
 8055f7e: d003         	beq	0x8055f88 <eTaskGetState+0x124> @ imm = #0x6
 8055f80: e7ff         	b	0x8055f82 <eTaskGetState+0x11e> @ imm = #-0x2
 8055f82: 9807         	ldr	r0, [sp, #0x1c]
 8055f84: b920         	cbnz	r0, 0x8055f90 <eTaskGetState+0x12c> @ imm = #0x8
 8055f86: e7ff         	b	0x8055f88 <eTaskGetState+0x124> @ imm = #-0x2
 8055f88: 2004         	movs	r0, #0x4
;                     eReturn = eDeleted;
 8055f8a: f807 0c05    	strb	r0, [r7, #-5]
;                 }
 8055f8e: e003         	b	0x8055f98 <eTaskGetState+0x134> @ imm = #0x6
 8055f90: 2001         	movs	r0, #0x1
;                     eReturn = eReady;
 8055f92: f807 0c05    	strb	r0, [r7, #-5]
 8055f96: e7ff         	b	0x8055f98 <eTaskGetState+0x134> @ imm = #-0x2
 8055f98: e7ff         	b	0x8055f9a <eTaskGetState+0x136> @ imm = #-0x2
 8055f9a: e7ff         	b	0x8055f9c <eTaskGetState+0x138> @ imm = #-0x2
 8055f9c: e7ff         	b	0x8055f9e <eTaskGetState+0x13a> @ imm = #-0x2
 8055f9e: e7ff         	b	0x8055fa0 <eTaskGetState+0x13c> @ imm = #-0x2
;         return eReturn;
 8055fa0: f817 0c05    	ldrb	r0, [r7, #-5]
 8055fa4: 9001         	str	r0, [sp, #0x4]
 8055fa6: 4804         	ldr	r0, [pc, #0x10]         @ 0x8055fb8 <eTaskGetState+0x154>
 8055fa8: 4780         	blx	r0
 8055faa: 9801         	ldr	r0, [sp, #0x4]
 8055fac: b00a         	add	sp, #0x28
 8055fae: bd80         	pop	{r7, pc}

08055fb0 <$d.27>:
 8055fb0: 05 e1 05 08  	.word	0x0805e105
 8055fb4: 4d e1 05 08  	.word	0x0805e14d
 8055fb8: 21 05 06 08  	.word	0x08060521
 8055fbc: 55 ec 05 08  	.word	0x0805ec55

08055fc0 <uxTaskPriorityGet>:
;     {
 8055fc0: b580         	push	{r7, lr}
 8055fc2: 466f         	mov	r7, sp
 8055fc4: b086         	sub	sp, #0x18
 8055fc6: f643 5240    	movw	r2, #0x3d40
 8055fca: f2c2 0200    	movt	r2, #0x2000
 8055fce: 6811         	ldr	r1, [r2]
 8055fd0: f642 5340    	movw	r3, #0x2d40
 8055fd4: f2c2 0300    	movt	r3, #0x2000
 8055fd8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8055fdc: 3101         	adds	r1, #0x1
 8055fde: 6011         	str	r1, [r2]
 8055fe0: 9005         	str	r0, [sp, #0x14]
;         taskENTER_CRITICAL();
 8055fe2: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8056020 <uxTaskPriorityGet+0x60>
 8055fe4: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055fe6: 9805         	ldr	r0, [sp, #0x14]
 8055fe8: b938         	cbnz	r0, 0x8055ffa <uxTaskPriorityGet+0x3a> @ imm = #0xe
 8055fea: e7ff         	b	0x8055fec <uxTaskPriorityGet+0x2c> @ imm = #-0x2
 8055fec: f240 1000    	movw	r0, #0x100
 8055ff0: f2c2 0000    	movt	r0, #0x2000
 8055ff4: 6800         	ldr	r0, [r0]
 8055ff6: 9002         	str	r0, [sp, #0x8]
 8055ff8: e002         	b	0x8056000 <uxTaskPriorityGet+0x40> @ imm = #0x4
 8055ffa: 9805         	ldr	r0, [sp, #0x14]
 8055ffc: 9002         	str	r0, [sp, #0x8]
 8055ffe: e7ff         	b	0x8056000 <uxTaskPriorityGet+0x40> @ imm = #-0x2
 8056000: 9802         	ldr	r0, [sp, #0x8]
 8056002: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxPriority;
 8056004: 9804         	ldr	r0, [sp, #0x10]
 8056006: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805600a: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL();
 805600c: 4805         	ldr	r0, [pc, #0x14]         @ 0x8056024 <uxTaskPriorityGet+0x64>
 805600e: 4780         	blx	r0
;         return uxReturn;
 8056010: 9803         	ldr	r0, [sp, #0xc]
 8056012: 9001         	str	r0, [sp, #0x4]
 8056014: 4804         	ldr	r0, [pc, #0x10]         @ 0x8056028 <uxTaskPriorityGet+0x68>
 8056016: 4780         	blx	r0
 8056018: 9801         	ldr	r0, [sp, #0x4]
 805601a: b006         	add	sp, #0x18
 805601c: bd80         	pop	{r7, pc}
 805601e: bf00         	nop

08056020 <$d.29>:
 8056020: 05 e1 05 08  	.word	0x0805e105
 8056024: 4d e1 05 08  	.word	0x0805e14d
 8056028: 21 05 06 08  	.word	0x08060521

0805602c <uxTaskPriorityGetFromISR>:
;     {
 805602c: b580         	push	{r7, lr}
 805602e: 466f         	mov	r7, sp
 8056030: b086         	sub	sp, #0x18
 8056032: f643 5240    	movw	r2, #0x3d40
 8056036: f2c2 0200    	movt	r2, #0x2000
 805603a: 6811         	ldr	r1, [r2]
 805603c: f642 5340    	movw	r3, #0x2d40
 8056040: f2c2 0300    	movt	r3, #0x2000
 8056044: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8056048: 3101         	adds	r1, #0x1
 805604a: 6011         	str	r1, [r2]
 805604c: 9005         	str	r0, [sp, #0x14]
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805604e: 4811         	ldr	r0, [pc, #0x44]         @ 0x8056094 <uxTaskPriorityGetFromISR+0x68>
 8056050: 4780         	blx	r0
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8056052: 4811         	ldr	r0, [pc, #0x44]         @ 0x8056098 <uxTaskPriorityGetFromISR+0x6c>
 8056054: 4780         	blx	r0
 8056056: 9002         	str	r0, [sp, #0x8]
;             pxTCB = prvGetTCBFromHandle( xTask );
 8056058: 9805         	ldr	r0, [sp, #0x14]
 805605a: b938         	cbnz	r0, 0x805606c <uxTaskPriorityGetFromISR+0x40> @ imm = #0xe
 805605c: e7ff         	b	0x805605e <uxTaskPriorityGetFromISR+0x32> @ imm = #-0x2
 805605e: f240 1000    	movw	r0, #0x100
 8056062: f2c2 0000    	movt	r0, #0x2000
 8056066: 6800         	ldr	r0, [r0]
 8056068: 9001         	str	r0, [sp, #0x4]
 805606a: e002         	b	0x8056072 <uxTaskPriorityGetFromISR+0x46> @ imm = #0x4
 805606c: 9805         	ldr	r0, [sp, #0x14]
 805606e: 9001         	str	r0, [sp, #0x4]
 8056070: e7ff         	b	0x8056072 <uxTaskPriorityGetFromISR+0x46> @ imm = #-0x2
 8056072: 9801         	ldr	r0, [sp, #0x4]
 8056074: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxPriority;
 8056076: 9804         	ldr	r0, [sp, #0x10]
 8056078: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805607c: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805607e: 9802         	ldr	r0, [sp, #0x8]
 8056080: 4906         	ldr	r1, [pc, #0x18]         @ 0x805609c <uxTaskPriorityGetFromISR+0x70>
 8056082: 4788         	blx	r1
;         return uxReturn;
 8056084: 9803         	ldr	r0, [sp, #0xc]
 8056086: 9000         	str	r0, [sp]
 8056088: 4805         	ldr	r0, [pc, #0x14]         @ 0x80560a0 <uxTaskPriorityGetFromISR+0x74>
 805608a: 4780         	blx	r0
 805608c: 9800         	ldr	r0, [sp]
 805608e: b006         	add	sp, #0x18
 8056090: bd80         	pop	{r7, pc}
 8056092: bf00         	nop

08056094 <$d.31>:
 8056094: 95 21 06 08  	.word	0x08062195
 8056098: 55 ec 05 08  	.word	0x0805ec55
 805609c: 85 ec 05 08  	.word	0x0805ec85
 80560a0: 21 05 06 08  	.word	0x08060521

080560a4 <uxTaskBasePriorityGet>:
;     {
 80560a4: b580         	push	{r7, lr}
 80560a6: 466f         	mov	r7, sp
 80560a8: b086         	sub	sp, #0x18
 80560aa: f643 5240    	movw	r2, #0x3d40
 80560ae: f2c2 0200    	movt	r2, #0x2000
 80560b2: 6811         	ldr	r1, [r2]
 80560b4: f642 5340    	movw	r3, #0x2d40
 80560b8: f2c2 0300    	movt	r3, #0x2000
 80560bc: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80560c0: 3101         	adds	r1, #0x1
 80560c2: 6011         	str	r1, [r2]
 80560c4: 9005         	str	r0, [sp, #0x14]
;         taskENTER_CRITICAL();
 80560c6: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8056104 <uxTaskBasePriorityGet+0x60>
 80560c8: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTask );
 80560ca: 9805         	ldr	r0, [sp, #0x14]
 80560cc: b938         	cbnz	r0, 0x80560de <uxTaskBasePriorityGet+0x3a> @ imm = #0xe
 80560ce: e7ff         	b	0x80560d0 <uxTaskBasePriorityGet+0x2c> @ imm = #-0x2
 80560d0: f240 1000    	movw	r0, #0x100
 80560d4: f2c2 0000    	movt	r0, #0x2000
 80560d8: 6800         	ldr	r0, [r0]
 80560da: 9002         	str	r0, [sp, #0x8]
 80560dc: e002         	b	0x80560e4 <uxTaskBasePriorityGet+0x40> @ imm = #0x4
 80560de: 9805         	ldr	r0, [sp, #0x14]
 80560e0: 9002         	str	r0, [sp, #0x8]
 80560e2: e7ff         	b	0x80560e4 <uxTaskBasePriorityGet+0x40> @ imm = #-0x2
 80560e4: 9802         	ldr	r0, [sp, #0x8]
 80560e6: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxBasePriority;
 80560e8: 9804         	ldr	r0, [sp, #0x10]
 80560ea: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 80560ee: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL();
 80560f0: 4805         	ldr	r0, [pc, #0x14]         @ 0x8056108 <uxTaskBasePriorityGet+0x64>
 80560f2: 4780         	blx	r0
;         return uxReturn;
 80560f4: 9803         	ldr	r0, [sp, #0xc]
 80560f6: 9001         	str	r0, [sp, #0x4]
 80560f8: 4804         	ldr	r0, [pc, #0x10]         @ 0x805610c <uxTaskBasePriorityGet+0x68>
 80560fa: 4780         	blx	r0
 80560fc: 9801         	ldr	r0, [sp, #0x4]
 80560fe: b006         	add	sp, #0x18
 8056100: bd80         	pop	{r7, pc}
 8056102: bf00         	nop

08056104 <$d.33>:
 8056104: 05 e1 05 08  	.word	0x0805e105
 8056108: 4d e1 05 08  	.word	0x0805e14d
 805610c: 21 05 06 08  	.word	0x08060521

08056110 <uxTaskBasePriorityGetFromISR>:
;     {
 8056110: b580         	push	{r7, lr}
 8056112: 466f         	mov	r7, sp
 8056114: b086         	sub	sp, #0x18
 8056116: f643 5240    	movw	r2, #0x3d40
 805611a: f2c2 0200    	movt	r2, #0x2000
 805611e: 6811         	ldr	r1, [r2]
 8056120: f642 5340    	movw	r3, #0x2d40
 8056124: f2c2 0300    	movt	r3, #0x2000
 8056128: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805612c: 3101         	adds	r1, #0x1
 805612e: 6011         	str	r1, [r2]
 8056130: 9005         	str	r0, [sp, #0x14]
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8056132: 4811         	ldr	r0, [pc, #0x44]         @ 0x8056178 <uxTaskBasePriorityGetFromISR+0x68>
 8056134: 4780         	blx	r0
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8056136: 4811         	ldr	r0, [pc, #0x44]         @ 0x805617c <uxTaskBasePriorityGetFromISR+0x6c>
 8056138: 4780         	blx	r0
 805613a: 9002         	str	r0, [sp, #0x8]
;             pxTCB = prvGetTCBFromHandle( xTask );
 805613c: 9805         	ldr	r0, [sp, #0x14]
 805613e: b938         	cbnz	r0, 0x8056150 <uxTaskBasePriorityGetFromISR+0x40> @ imm = #0xe
 8056140: e7ff         	b	0x8056142 <uxTaskBasePriorityGetFromISR+0x32> @ imm = #-0x2
 8056142: f240 1000    	movw	r0, #0x100
 8056146: f2c2 0000    	movt	r0, #0x2000
 805614a: 6800         	ldr	r0, [r0]
 805614c: 9001         	str	r0, [sp, #0x4]
 805614e: e002         	b	0x8056156 <uxTaskBasePriorityGetFromISR+0x46> @ imm = #0x4
 8056150: 9805         	ldr	r0, [sp, #0x14]
 8056152: 9001         	str	r0, [sp, #0x4]
 8056154: e7ff         	b	0x8056156 <uxTaskBasePriorityGetFromISR+0x46> @ imm = #-0x2
 8056156: 9801         	ldr	r0, [sp, #0x4]
 8056158: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxBasePriority;
 805615a: 9804         	ldr	r0, [sp, #0x10]
 805615c: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8056160: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8056162: 9802         	ldr	r0, [sp, #0x8]
 8056164: 4906         	ldr	r1, [pc, #0x18]         @ 0x8056180 <uxTaskBasePriorityGetFromISR+0x70>
 8056166: 4788         	blx	r1
;         return uxReturn;
 8056168: 9803         	ldr	r0, [sp, #0xc]
 805616a: 9000         	str	r0, [sp]
 805616c: 4805         	ldr	r0, [pc, #0x14]         @ 0x8056184 <uxTaskBasePriorityGetFromISR+0x74>
 805616e: 4780         	blx	r0
 8056170: 9800         	ldr	r0, [sp]
 8056172: b006         	add	sp, #0x18
 8056174: bd80         	pop	{r7, pc}
 8056176: bf00         	nop

08056178 <$d.35>:
 8056178: 95 21 06 08  	.word	0x08062195
 805617c: 55 ec 05 08  	.word	0x0805ec55
 8056180: 85 ec 05 08  	.word	0x0805ec85
 8056184: 21 05 06 08  	.word	0x08060521

08056188 <vTaskPrioritySet>:
;     {
 8056188: b580         	push	{r7, lr}
 805618a: 466f         	mov	r7, sp
 805618c: b088         	sub	sp, #0x20
 805618e: f643 5340    	movw	r3, #0x3d40
 8056192: f2c2 0300    	movt	r3, #0x2000
 8056196: 681a         	ldr	r2, [r3]
 8056198: f642 5c40    	movw	r12, #0x2d40
 805619c: f2c2 0c00    	movt	r12, #0x2000
 80561a0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 80561a4: 3201         	adds	r2, #0x1
 80561a6: 601a         	str	r2, [r3]
 80561a8: 9007         	str	r0, [sp, #0x1c]
 80561aa: 9106         	str	r1, [sp, #0x18]
 80561ac: 2000         	movs	r0, #0x0
;         BaseType_t xYieldRequired = pdFALSE;
 80561ae: 9002         	str	r0, [sp, #0x8]
;         configASSERT( uxNewPriority < configMAX_PRIORITIES );
 80561b0: 9806         	ldr	r0, [sp, #0x18]
 80561b2: 2810         	cmp	r0, #0x10
 80561b4: d304         	blo	0x80561c0 <vTaskPrioritySet+0x38> @ imm = #0x8
 80561b6: e7ff         	b	0x80561b8 <vTaskPrioritySet+0x30> @ imm = #-0x2
 80561b8: 487f         	ldr	r0, [pc, #0x1fc]        @ 0x80563b8 <vTaskPrioritySet+0x230>
 80561ba: 4780         	blx	r0
 80561bc: e7ff         	b	0x80561be <vTaskPrioritySet+0x36> @ imm = #-0x2
 80561be: e7fe         	b	0x80561be <vTaskPrioritySet+0x36> @ imm = #-0x4
;         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80561c0: 9806         	ldr	r0, [sp, #0x18]
 80561c2: 2810         	cmp	r0, #0x10
 80561c4: d303         	blo	0x80561ce <vTaskPrioritySet+0x46> @ imm = #0x6
 80561c6: e7ff         	b	0x80561c8 <vTaskPrioritySet+0x40> @ imm = #-0x2
 80561c8: 200f         	movs	r0, #0xf
;             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80561ca: 9006         	str	r0, [sp, #0x18]
;         }
 80561cc: e000         	b	0x80561d0 <vTaskPrioritySet+0x48> @ imm = #0x0
 80561ce: e7ff         	b	0x80561d0 <vTaskPrioritySet+0x48> @ imm = #-0x2
;         taskENTER_CRITICAL();
 80561d0: 4874         	ldr	r0, [pc, #0x1d0]        @ 0x80563a4 <vTaskPrioritySet+0x21c>
 80561d2: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTask );
 80561d4: 9807         	ldr	r0, [sp, #0x1c]
 80561d6: b938         	cbnz	r0, 0x80561e8 <vTaskPrioritySet+0x60> @ imm = #0xe
 80561d8: e7ff         	b	0x80561da <vTaskPrioritySet+0x52> @ imm = #-0x2
 80561da: f240 1000    	movw	r0, #0x100
 80561de: f2c2 0000    	movt	r0, #0x2000
 80561e2: 6800         	ldr	r0, [r0]
 80561e4: 9000         	str	r0, [sp]
 80561e6: e002         	b	0x80561ee <vTaskPrioritySet+0x66> @ imm = #0x4
 80561e8: 9807         	ldr	r0, [sp, #0x1c]
 80561ea: 9000         	str	r0, [sp]
 80561ec: e7ff         	b	0x80561ee <vTaskPrioritySet+0x66> @ imm = #-0x2
 80561ee: 9800         	ldr	r0, [sp]
 80561f0: 9005         	str	r0, [sp, #0x14]
;                 uxCurrentBasePriority = pxTCB->uxBasePriority;
 80561f2: 9805         	ldr	r0, [sp, #0x14]
 80561f4: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 80561f8: 9004         	str	r0, [sp, #0x10]
;             if( uxCurrentBasePriority != uxNewPriority )
 80561fa: 9804         	ldr	r0, [sp, #0x10]
 80561fc: 9906         	ldr	r1, [sp, #0x18]
 80561fe: 4288         	cmp	r0, r1
 8056200: f000 80ca    	beq.w	0x8056398 <vTaskPrioritySet+0x210> @ imm = #0x194
 8056204: e7ff         	b	0x8056206 <vTaskPrioritySet+0x7e> @ imm = #-0x2
;                 if( uxNewPriority > uxCurrentBasePriority )
 8056206: 9806         	ldr	r0, [sp, #0x18]
 8056208: 9904         	ldr	r1, [sp, #0x10]
 805620a: 4288         	cmp	r0, r1
 805620c: d91b         	bls	0x8056246 <vTaskPrioritySet+0xbe> @ imm = #0x36
 805620e: e7ff         	b	0x8056210 <vTaskPrioritySet+0x88> @ imm = #-0x2
;                         if( pxTCB != pxCurrentTCB )
 8056210: 9805         	ldr	r0, [sp, #0x14]
 8056212: f240 1100    	movw	r1, #0x100
 8056216: f2c2 0100    	movt	r1, #0x2000
 805621a: 6809         	ldr	r1, [r1]
 805621c: 4288         	cmp	r0, r1
 805621e: d010         	beq	0x8056242 <vTaskPrioritySet+0xba> @ imm = #0x20
 8056220: e7ff         	b	0x8056222 <vTaskPrioritySet+0x9a> @ imm = #-0x2
;                             if( uxNewPriority > pxCurrentTCB->uxPriority )
 8056222: 9806         	ldr	r0, [sp, #0x18]
 8056224: f240 1100    	movw	r1, #0x100
 8056228: f2c2 0100    	movt	r1, #0x2000
 805622c: 6809         	ldr	r1, [r1]
 805622e: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056232: 4288         	cmp	r0, r1
 8056234: d903         	bls	0x805623e <vTaskPrioritySet+0xb6> @ imm = #0x6
 8056236: e7ff         	b	0x8056238 <vTaskPrioritySet+0xb0> @ imm = #-0x2
 8056238: 2001         	movs	r0, #0x1
;                                 xYieldRequired = pdTRUE;
 805623a: 9002         	str	r0, [sp, #0x8]
;                             }
 805623c: e000         	b	0x8056240 <vTaskPrioritySet+0xb8> @ imm = #0x0
 805623e: e7ff         	b	0x8056240 <vTaskPrioritySet+0xb8> @ imm = #-0x2
;                         }
 8056240: e000         	b	0x8056244 <vTaskPrioritySet+0xbc> @ imm = #0x0
 8056242: e7ff         	b	0x8056244 <vTaskPrioritySet+0xbc> @ imm = #-0x2
;                 }
 8056244: e00d         	b	0x8056262 <vTaskPrioritySet+0xda> @ imm = #0x1a
;                 else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8056246: 9805         	ldr	r0, [sp, #0x14]
 8056248: f240 1100    	movw	r1, #0x100
 805624c: f2c2 0100    	movt	r1, #0x2000
 8056250: 6809         	ldr	r1, [r1]
 8056252: 4288         	cmp	r0, r1
 8056254: d103         	bne	0x805625e <vTaskPrioritySet+0xd6> @ imm = #0x6
 8056256: e7ff         	b	0x8056258 <vTaskPrioritySet+0xd0> @ imm = #-0x2
 8056258: 2001         	movs	r0, #0x1
;                         xYieldRequired = pdTRUE;
 805625a: 9002         	str	r0, [sp, #0x8]
;                 }
 805625c: e000         	b	0x8056260 <vTaskPrioritySet+0xd8> @ imm = #0x0
 805625e: e7ff         	b	0x8056260 <vTaskPrioritySet+0xd8> @ imm = #-0x2
 8056260: e7ff         	b	0x8056262 <vTaskPrioritySet+0xda> @ imm = #-0x2
;                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8056262: 9805         	ldr	r0, [sp, #0x14]
 8056264: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056268: 9003         	str	r0, [sp, #0xc]
;                     if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 805626a: 9805         	ldr	r0, [sp, #0x14]
 805626c: f8d0 10a8    	ldr.w	r1, [r0, #0xa8]
 8056270: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8056274: 4288         	cmp	r0, r1
 8056276: d007         	beq	0x8056288 <vTaskPrioritySet+0x100> @ imm = #0xe
 8056278: e7ff         	b	0x805627a <vTaskPrioritySet+0xf2> @ imm = #-0x2
 805627a: 9806         	ldr	r0, [sp, #0x18]
 805627c: 9905         	ldr	r1, [sp, #0x14]
 805627e: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056282: 4288         	cmp	r0, r1
 8056284: d905         	bls	0x8056292 <vTaskPrioritySet+0x10a> @ imm = #0xa
 8056286: e7ff         	b	0x8056288 <vTaskPrioritySet+0x100> @ imm = #-0x2
;                         pxTCB->uxPriority = uxNewPriority;
 8056288: 9806         	ldr	r0, [sp, #0x18]
 805628a: 9905         	ldr	r1, [sp, #0x14]
 805628c: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     }
 8056290: e000         	b	0x8056294 <vTaskPrioritySet+0x10c> @ imm = #0x0
 8056292: e7ff         	b	0x8056294 <vTaskPrioritySet+0x10c> @ imm = #-0x2
;                     pxTCB->uxBasePriority = uxNewPriority;
 8056294: 9806         	ldr	r0, [sp, #0x18]
 8056296: 9905         	ldr	r1, [sp, #0x14]
 8056298: f8c1 00c8    	str.w	r0, [r1, #0xc8]
;                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 805629c: 9805         	ldr	r0, [sp, #0x14]
 805629e: f890 0097    	ldrb.w	r0, [r0, #0x97]
 80562a2: 0600         	lsls	r0, r0, #0x18
 80562a4: 2800         	cmp	r0, #0x0
 80562a6: d407         	bmi	0x80562b8 <vTaskPrioritySet+0x130> @ imm = #0xe
 80562a8: e7ff         	b	0x80562aa <vTaskPrioritySet+0x122> @ imm = #-0x2
;                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80562aa: 9806         	ldr	r0, [sp, #0x18]
 80562ac: f1c0 0010    	rsb.w	r0, r0, #0x10
 80562b0: 9905         	ldr	r1, [sp, #0x14]
 80562b2: f8c1 0094    	str.w	r0, [r1, #0x94]
;                 }
 80562b6: e000         	b	0x80562ba <vTaskPrioritySet+0x132> @ imm = #0x0
 80562b8: e7ff         	b	0x80562ba <vTaskPrioritySet+0x132> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80562ba: 9805         	ldr	r0, [sp, #0x14]
 80562bc: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80562c0: 9903         	ldr	r1, [sp, #0xc]
 80562c2: eb01 0281    	add.w	r2, r1, r1, lsl #2
 80562c6: f240 1160    	movw	r1, #0x160
 80562ca: f2c2 0100    	movt	r1, #0x2000
 80562ce: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80562d2: 4288         	cmp	r0, r1
 80562d4: d155         	bne	0x8056382 <vTaskPrioritySet+0x1fa> @ imm = #0xaa
 80562d6: e7ff         	b	0x80562d8 <vTaskPrioritySet+0x150> @ imm = #-0x2
;                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80562d8: 9805         	ldr	r0, [sp, #0x14]
 80562da: 3080         	adds	r0, #0x80
 80562dc: 4932         	ldr	r1, [pc, #0xc8]         @ 0x80563a8 <vTaskPrioritySet+0x220>
 80562de: 4788         	blx	r1
 80562e0: b908         	cbnz	r0, 0x80562e6 <vTaskPrioritySet+0x15e> @ imm = #0x2
 80562e2: e7ff         	b	0x80562e4 <vTaskPrioritySet+0x15c> @ imm = #-0x2
;                     }
 80562e4: e000         	b	0x80562e8 <vTaskPrioritySet+0x160> @ imm = #0x0
 80562e6: e7ff         	b	0x80562e8 <vTaskPrioritySet+0x160> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 80562e8: e7ff         	b	0x80562ea <vTaskPrioritySet+0x162> @ imm = #-0x2
 80562ea: e7ff         	b	0x80562ec <vTaskPrioritySet+0x164> @ imm = #-0x2
 80562ec: 9805         	ldr	r0, [sp, #0x14]
 80562ee: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80562f2: f240 21a0    	movw	r1, #0x2a0
 80562f6: f2c2 0100    	movt	r1, #0x2000
 80562fa: 6809         	ldr	r1, [r1]
 80562fc: 4288         	cmp	r0, r1
 80562fe: d909         	bls	0x8056314 <vTaskPrioritySet+0x18c> @ imm = #0x12
 8056300: e7ff         	b	0x8056302 <vTaskPrioritySet+0x17a> @ imm = #-0x2
 8056302: 9805         	ldr	r0, [sp, #0x14]
 8056304: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056308: f240 21a0    	movw	r1, #0x2a0
 805630c: f2c2 0100    	movt	r1, #0x2000
 8056310: 6008         	str	r0, [r1]
 8056312: e7ff         	b	0x8056314 <vTaskPrioritySet+0x18c> @ imm = #-0x2
 8056314: e7ff         	b	0x8056316 <vTaskPrioritySet+0x18e> @ imm = #-0x2
 8056316: e7ff         	b	0x8056318 <vTaskPrioritySet+0x190> @ imm = #-0x2
 8056318: 9805         	ldr	r0, [sp, #0x14]
 805631a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805631e: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056322: f240 1160    	movw	r1, #0x160
 8056326: f2c2 0100    	movt	r1, #0x2000
 805632a: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805632e: 6840         	ldr	r0, [r0, #0x4]
 8056330: 9001         	str	r0, [sp, #0x4]
 8056332: 9801         	ldr	r0, [sp, #0x4]
 8056334: 9a05         	ldr	r2, [sp, #0x14]
 8056336: f8c2 0084    	str.w	r0, [r2, #0x84]
 805633a: 9801         	ldr	r0, [sp, #0x4]
 805633c: 6880         	ldr	r0, [r0, #0x8]
 805633e: 9a05         	ldr	r2, [sp, #0x14]
 8056340: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056344: 9805         	ldr	r0, [sp, #0x14]
 8056346: 3080         	adds	r0, #0x80
 8056348: 9a01         	ldr	r2, [sp, #0x4]
 805634a: 6892         	ldr	r2, [r2, #0x8]
 805634c: 6050         	str	r0, [r2, #0x4]
 805634e: 9805         	ldr	r0, [sp, #0x14]
 8056350: 3080         	adds	r0, #0x80
 8056352: 9a01         	ldr	r2, [sp, #0x4]
 8056354: 6090         	str	r0, [r2, #0x8]
 8056356: 9a05         	ldr	r2, [sp, #0x14]
 8056358: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 805635c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056360: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056364: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056368: 9805         	ldr	r0, [sp, #0x14]
 805636a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805636e: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056372: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056376: 3001         	adds	r0, #0x1
 8056378: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805637c: e7ff         	b	0x805637e <vTaskPrioritySet+0x1f6> @ imm = #-0x2
 805637e: e7ff         	b	0x8056380 <vTaskPrioritySet+0x1f8> @ imm = #-0x2
;                 }
 8056380: e000         	b	0x8056384 <vTaskPrioritySet+0x1fc> @ imm = #0x0
 8056382: e7ff         	b	0x8056384 <vTaskPrioritySet+0x1fc> @ imm = #-0x2
;                 if( xYieldRequired != pdFALSE )
 8056384: 9802         	ldr	r0, [sp, #0x8]
 8056386: b128         	cbz	r0, 0x8056394 <vTaskPrioritySet+0x20c> @ imm = #0xa
 8056388: e7ff         	b	0x805638a <vTaskPrioritySet+0x202> @ imm = #-0x2
;                     taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 805638a: e7ff         	b	0x805638c <vTaskPrioritySet+0x204> @ imm = #-0x2
 805638c: 4807         	ldr	r0, [pc, #0x1c]         @ 0x80563ac <vTaskPrioritySet+0x224>
 805638e: 4780         	blx	r0
 8056390: e7ff         	b	0x8056392 <vTaskPrioritySet+0x20a> @ imm = #-0x2
;                 }
 8056392: e000         	b	0x8056396 <vTaskPrioritySet+0x20e> @ imm = #0x0
 8056394: e7ff         	b	0x8056396 <vTaskPrioritySet+0x20e> @ imm = #-0x2
;             }
 8056396: e7ff         	b	0x8056398 <vTaskPrioritySet+0x210> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8056398: 4805         	ldr	r0, [pc, #0x14]         @ 0x80563b0 <vTaskPrioritySet+0x228>
 805639a: 4780         	blx	r0
;     }
 805639c: 4805         	ldr	r0, [pc, #0x14]         @ 0x80563b4 <vTaskPrioritySet+0x22c>
 805639e: 4780         	blx	r0
 80563a0: b008         	add	sp, #0x20
 80563a2: bd80         	pop	{r7, pc}

080563a4 <$d.37>:
 80563a4: 05 e1 05 08  	.word	0x0805e105
 80563a8: c9 b1 05 08  	.word	0x0805b1c9
 80563ac: c5 e0 05 08  	.word	0x0805e0c5
 80563b0: 4d e1 05 08  	.word	0x0805e14d
 80563b4: 21 05 06 08  	.word	0x08060521
 80563b8: 55 ec 05 08  	.word	0x0805ec55

080563bc <vTaskSuspend>:
;     {
 80563bc: b580         	push	{r7, lr}
 80563be: 466f         	mov	r7, sp
 80563c0: b084         	sub	sp, #0x10
 80563c2: f643 5240    	movw	r2, #0x3d40
 80563c6: f2c2 0200    	movt	r2, #0x2000
 80563ca: 6811         	ldr	r1, [r2]
 80563cc: f642 5340    	movw	r3, #0x2d40
 80563d0: f2c2 0300    	movt	r3, #0x2000
 80563d4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80563d8: 3101         	adds	r1, #0x1
 80563da: 6011         	str	r1, [r2]
 80563dc: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 80563de: 484a         	ldr	r0, [pc, #0x128]        @ 0x8056508 <vTaskSuspend+0x14c>
 80563e0: 4780         	blx	r0
;             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80563e2: 9803         	ldr	r0, [sp, #0xc]
 80563e4: b938         	cbnz	r0, 0x80563f6 <vTaskSuspend+0x3a> @ imm = #0xe
 80563e6: e7ff         	b	0x80563e8 <vTaskSuspend+0x2c> @ imm = #-0x2
 80563e8: f240 1000    	movw	r0, #0x100
 80563ec: f2c2 0000    	movt	r0, #0x2000
 80563f0: 6800         	ldr	r0, [r0]
 80563f2: 9000         	str	r0, [sp]
 80563f4: e002         	b	0x80563fc <vTaskSuspend+0x40> @ imm = #0x4
 80563f6: 9803         	ldr	r0, [sp, #0xc]
 80563f8: 9000         	str	r0, [sp]
 80563fa: e7ff         	b	0x80563fc <vTaskSuspend+0x40> @ imm = #-0x2
 80563fc: 9800         	ldr	r0, [sp]
 80563fe: 9002         	str	r0, [sp, #0x8]
;             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8056400: 9802         	ldr	r0, [sp, #0x8]
 8056402: 3080         	adds	r0, #0x80
 8056404: 4941         	ldr	r1, [pc, #0x104]        @ 0x805650c <vTaskSuspend+0x150>
 8056406: 4788         	blx	r1
 8056408: b908         	cbnz	r0, 0x805640e <vTaskSuspend+0x52> @ imm = #0x2
 805640a: e7ff         	b	0x805640c <vTaskSuspend+0x50> @ imm = #-0x2
;             }
 805640c: e000         	b	0x8056410 <vTaskSuspend+0x54> @ imm = #0x0
 805640e: e7ff         	b	0x8056410 <vTaskSuspend+0x54> @ imm = #-0x2
;             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8056410: 9802         	ldr	r0, [sp, #0x8]
 8056412: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056416: b128         	cbz	r0, 0x8056424 <vTaskSuspend+0x68> @ imm = #0xa
 8056418: e7ff         	b	0x805641a <vTaskSuspend+0x5e> @ imm = #-0x2
;                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 805641a: 9802         	ldr	r0, [sp, #0x8]
 805641c: 3094         	adds	r0, #0x94
 805641e: 493c         	ldr	r1, [pc, #0xf0]         @ 0x8056510 <vTaskSuspend+0x154>
 8056420: 4788         	blx	r1
;             }
 8056422: e000         	b	0x8056426 <vTaskSuspend+0x6a> @ imm = #0x0
 8056424: e7ff         	b	0x8056426 <vTaskSuspend+0x6a> @ imm = #-0x2
;             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8056426: 9802         	ldr	r0, [sp, #0x8]
 8056428: f100 0180    	add.w	r1, r0, #0x80
 805642c: f240 104c    	movw	r0, #0x14c
 8056430: f2c2 0000    	movt	r0, #0x2000
 8056434: 4a37         	ldr	r2, [pc, #0xdc]         @ 0x8056514 <vTaskSuspend+0x158>
 8056436: 4790         	blx	r2
 8056438: 2000         	movs	r0, #0x0
;                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 805643a: 9001         	str	r0, [sp, #0x4]
 805643c: e7ff         	b	0x805643e <vTaskSuspend+0x82> @ imm = #-0x2
 805643e: 9801         	ldr	r0, [sp, #0x4]
 8056440: 2800         	cmp	r0, #0x0
 8056442: dc14         	bgt	0x805646e <vTaskSuspend+0xb2> @ imm = #0x28
 8056444: e7ff         	b	0x8056446 <vTaskSuspend+0x8a> @ imm = #-0x2
;                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8056446: 9802         	ldr	r0, [sp, #0x8]
 8056448: 9901         	ldr	r1, [sp, #0x4]
 805644a: 4408         	add	r0, r1
 805644c: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8056450: 2801         	cmp	r0, #0x1
 8056452: d107         	bne	0x8056464 <vTaskSuspend+0xa8> @ imm = #0xe
 8056454: e7ff         	b	0x8056456 <vTaskSuspend+0x9a> @ imm = #-0x2
;                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8056456: 9802         	ldr	r0, [sp, #0x8]
 8056458: 9901         	ldr	r1, [sp, #0x4]
 805645a: 4401         	add	r1, r0
 805645c: 2000         	movs	r0, #0x0
 805645e: f881 00d4    	strb.w	r0, [r1, #0xd4]
;                     }
 8056462: e7ff         	b	0x8056464 <vTaskSuspend+0xa8> @ imm = #-0x2
;                 }
 8056464: e7ff         	b	0x8056466 <vTaskSuspend+0xaa> @ imm = #-0x2
;                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8056466: 9801         	ldr	r0, [sp, #0x4]
 8056468: 3001         	adds	r0, #0x1
 805646a: 9001         	str	r0, [sp, #0x4]
 805646c: e7e7         	b	0x805643e <vTaskSuspend+0x82> @ imm = #-0x32
;             taskEXIT_CRITICAL();
 805646e: 482a         	ldr	r0, [pc, #0xa8]         @ 0x8056518 <vTaskSuspend+0x15c>
 8056470: 4780         	blx	r0
;             if( xSchedulerRunning != pdFALSE )
 8056472: f240 1024    	movw	r0, #0x124
 8056476: f2c2 0000    	movt	r0, #0x2000
 805647a: 6800         	ldr	r0, [r0]
 805647c: b138         	cbz	r0, 0x805648e <vTaskSuspend+0xd2> @ imm = #0xe
 805647e: e7ff         	b	0x8056480 <vTaskSuspend+0xc4> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 8056480: 4826         	ldr	r0, [pc, #0x98]         @ 0x805651c <vTaskSuspend+0x160>
 8056482: 4780         	blx	r0
;                     prvResetNextTaskUnblockTime();
 8056484: 4826         	ldr	r0, [pc, #0x98]         @ 0x8056520 <vTaskSuspend+0x164>
 8056486: 4780         	blx	r0
;                 taskEXIT_CRITICAL();
 8056488: 4826         	ldr	r0, [pc, #0x98]         @ 0x8056524 <vTaskSuspend+0x168>
 805648a: 4780         	blx	r0
;             }
 805648c: e000         	b	0x8056490 <vTaskSuspend+0xd4> @ imm = #0x0
 805648e: e7ff         	b	0x8056490 <vTaskSuspend+0xd4> @ imm = #-0x2
;             if( pxTCB == pxCurrentTCB )
 8056490: 9802         	ldr	r0, [sp, #0x8]
 8056492: f240 1100    	movw	r1, #0x100
 8056496: f2c2 0100    	movt	r1, #0x2000
 805649a: 6809         	ldr	r1, [r1]
 805649c: 4288         	cmp	r0, r1
 805649e: d12e         	bne	0x80564fe <vTaskSuspend+0x142> @ imm = #0x5c
 80564a0: e7ff         	b	0x80564a2 <vTaskSuspend+0xe6> @ imm = #-0x2
;                 if( xSchedulerRunning != pdFALSE )
 80564a2: f240 1024    	movw	r0, #0x124
 80564a6: f2c2 0000    	movt	r0, #0x2000
 80564aa: 6800         	ldr	r0, [r0]
 80564ac: b170         	cbz	r0, 0x80564cc <vTaskSuspend+0x110> @ imm = #0x1c
 80564ae: e7ff         	b	0x80564b0 <vTaskSuspend+0xf4> @ imm = #-0x2
;                     configASSERT( uxSchedulerSuspended == 0 );
 80564b0: f240 1028    	movw	r0, #0x128
 80564b4: f2c2 0000    	movt	r0, #0x2000
 80564b8: 6800         	ldr	r0, [r0]
 80564ba: b120         	cbz	r0, 0x80564c6 <vTaskSuspend+0x10a> @ imm = #0x8
 80564bc: e7ff         	b	0x80564be <vTaskSuspend+0x102> @ imm = #-0x2
 80564be: 481d         	ldr	r0, [pc, #0x74]         @ 0x8056534 <vTaskSuspend+0x178>
 80564c0: 4780         	blx	r0
 80564c2: e7ff         	b	0x80564c4 <vTaskSuspend+0x108> @ imm = #-0x2
 80564c4: e7fe         	b	0x80564c4 <vTaskSuspend+0x108> @ imm = #-0x4
;                     portYIELD_WITHIN_API();
 80564c6: 4819         	ldr	r0, [pc, #0x64]         @ 0x805652c <vTaskSuspend+0x170>
 80564c8: 4780         	blx	r0
;                 }
 80564ca: e017         	b	0x80564fc <vTaskSuspend+0x140> @ imm = #0x2e
;                     if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80564cc: f240 104c    	movw	r0, #0x14c
 80564d0: f2c2 0000    	movt	r0, #0x2000
 80564d4: 6800         	ldr	r0, [r0]
 80564d6: f240 1120    	movw	r1, #0x120
 80564da: f2c2 0100    	movt	r1, #0x2000
 80564de: 6809         	ldr	r1, [r1]
 80564e0: 4288         	cmp	r0, r1
 80564e2: d107         	bne	0x80564f4 <vTaskSuspend+0x138> @ imm = #0xe
 80564e4: e7ff         	b	0x80564e6 <vTaskSuspend+0x12a> @ imm = #-0x2
;                         pxCurrentTCB = NULL;
 80564e6: f240 1100    	movw	r1, #0x100
 80564ea: f2c2 0100    	movt	r1, #0x2000
 80564ee: 2000         	movs	r0, #0x0
 80564f0: 6008         	str	r0, [r1]
;                     }
 80564f2: e002         	b	0x80564fa <vTaskSuspend+0x13e> @ imm = #0x4
;                         vTaskSwitchContext();
 80564f4: 480c         	ldr	r0, [pc, #0x30]         @ 0x8056528 <vTaskSuspend+0x16c>
 80564f6: 4780         	blx	r0
 80564f8: e7ff         	b	0x80564fa <vTaskSuspend+0x13e> @ imm = #-0x2
 80564fa: e7ff         	b	0x80564fc <vTaskSuspend+0x140> @ imm = #-0x2
;             }
 80564fc: e000         	b	0x8056500 <vTaskSuspend+0x144> @ imm = #0x0
 80564fe: e7ff         	b	0x8056500 <vTaskSuspend+0x144> @ imm = #-0x2
;     }
 8056500: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8056530 <vTaskSuspend+0x174>
 8056502: 4780         	blx	r0
 8056504: b004         	add	sp, #0x10
 8056506: bd80         	pop	{r7, pc}

08056508 <$d.39>:
 8056508: 05 e1 05 08  	.word	0x0805e105
 805650c: c9 b1 05 08  	.word	0x0805b1c9
 8056510: c9 b1 05 08  	.word	0x0805b1c9
 8056514: d9 b0 05 08  	.word	0x0805b0d9
 8056518: 4d e1 05 08  	.word	0x0805e14d
 805651c: 05 e1 05 08  	.word	0x0805e105
 8056520: ad 57 05 08  	.word	0x080557ad
 8056524: 4d e1 05 08  	.word	0x0805e14d
 8056528: 39 65 05 08  	.word	0x08056539
 805652c: c5 e0 05 08  	.word	0x0805e0c5
 8056530: 21 05 06 08  	.word	0x08060521
 8056534: 55 ec 05 08  	.word	0x0805ec55

08056538 <vTaskSwitchContext>:
;     {
 8056538: b580         	push	{r7, lr}
 805653a: 466f         	mov	r7, sp
 805653c: b082         	sub	sp, #0x8
 805653e: f643 5140    	movw	r1, #0x3d40
 8056542: f2c2 0100    	movt	r1, #0x2000
 8056546: 6808         	ldr	r0, [r1]
 8056548: f642 5240    	movw	r2, #0x2d40
 805654c: f2c2 0200    	movt	r2, #0x2000
 8056550: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8056554: 3001         	adds	r0, #0x1
 8056556: 6008         	str	r0, [r1]
;         if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8056558: f240 1028    	movw	r0, #0x128
 805655c: f2c2 0000    	movt	r0, #0x2000
 8056560: 6800         	ldr	r0, [r0]
 8056562: b138         	cbz	r0, 0x8056574 <vTaskSwitchContext+0x3c> @ imm = #0xe
 8056564: e7ff         	b	0x8056566 <vTaskSwitchContext+0x2e> @ imm = #-0x2
;             xYieldPendings[ 0 ] = pdTRUE;
 8056566: f240 21a4    	movw	r1, #0x2a4
 805656a: f2c2 0100    	movt	r1, #0x2000
 805656e: 2001         	movs	r0, #0x1
 8056570: 6008         	str	r0, [r1]
;         }
 8056572: e04d         	b	0x8056610 <vTaskSwitchContext+0xd8> @ imm = #0x9a
;             xYieldPendings[ 0 ] = pdFALSE;
 8056574: f240 21a4    	movw	r1, #0x2a4
 8056578: f2c2 0100    	movt	r1, #0x2000
 805657c: 2000         	movs	r0, #0x0
 805657e: 6008         	str	r0, [r1]
;             taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056580: e7ff         	b	0x8056582 <vTaskSwitchContext+0x4a> @ imm = #-0x2
 8056582: f240 20a0    	movw	r0, #0x2a0
 8056586: f2c2 0000    	movt	r0, #0x2000
 805658a: 6800         	ldr	r0, [r0]
 805658c: 9001         	str	r0, [sp, #0x4]
 805658e: e7ff         	b	0x8056590 <vTaskSwitchContext+0x58> @ imm = #-0x2
 8056590: 9801         	ldr	r0, [sp, #0x4]
 8056592: eb00 0180    	add.w	r1, r0, r0, lsl #2
 8056596: f240 1060    	movw	r0, #0x160
 805659a: f2c2 0000    	movt	r0, #0x2000
 805659e: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 80565a2: b958         	cbnz	r0, 0x80565bc <vTaskSwitchContext+0x84> @ imm = #0x16
 80565a4: e7ff         	b	0x80565a6 <vTaskSwitchContext+0x6e> @ imm = #-0x2
 80565a6: 9801         	ldr	r0, [sp, #0x4]
 80565a8: b920         	cbnz	r0, 0x80565b4 <vTaskSwitchContext+0x7c> @ imm = #0x8
 80565aa: e7ff         	b	0x80565ac <vTaskSwitchContext+0x74> @ imm = #-0x2
 80565ac: 481a         	ldr	r0, [pc, #0x68]         @ 0x8056618 <vTaskSwitchContext+0xe0>
 80565ae: 4780         	blx	r0
 80565b0: e7ff         	b	0x80565b2 <vTaskSwitchContext+0x7a> @ imm = #-0x2
 80565b2: e7fe         	b	0x80565b2 <vTaskSwitchContext+0x7a> @ imm = #-0x4
 80565b4: 9801         	ldr	r0, [sp, #0x4]
 80565b6: 3801         	subs	r0, #0x1
 80565b8: 9001         	str	r0, [sp, #0x4]
 80565ba: e7e9         	b	0x8056590 <vTaskSwitchContext+0x58> @ imm = #-0x2e
 80565bc: e7ff         	b	0x80565be <vTaskSwitchContext+0x86> @ imm = #-0x2
 80565be: 9801         	ldr	r0, [sp, #0x4]
 80565c0: eb00 0180    	add.w	r1, r0, r0, lsl #2
 80565c4: f240 1060    	movw	r0, #0x160
 80565c8: f2c2 0000    	movt	r0, #0x2000
 80565cc: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80565d0: 9000         	str	r0, [sp]
 80565d2: 9900         	ldr	r1, [sp]
 80565d4: 6848         	ldr	r0, [r1, #0x4]
 80565d6: 6840         	ldr	r0, [r0, #0x4]
 80565d8: 6048         	str	r0, [r1, #0x4]
 80565da: 9900         	ldr	r1, [sp]
 80565dc: 6848         	ldr	r0, [r1, #0x4]
 80565de: 3108         	adds	r1, #0x8
 80565e0: 4288         	cmp	r0, r1
 80565e2: d104         	bne	0x80565ee <vTaskSwitchContext+0xb6> @ imm = #0x8
 80565e4: e7ff         	b	0x80565e6 <vTaskSwitchContext+0xae> @ imm = #-0x2
 80565e6: 9900         	ldr	r1, [sp]
 80565e8: 68c8         	ldr	r0, [r1, #0xc]
 80565ea: 6048         	str	r0, [r1, #0x4]
 80565ec: e7ff         	b	0x80565ee <vTaskSwitchContext+0xb6> @ imm = #-0x2
 80565ee: 9800         	ldr	r0, [sp]
 80565f0: 6840         	ldr	r0, [r0, #0x4]
 80565f2: 68c0         	ldr	r0, [r0, #0xc]
 80565f4: f240 1100    	movw	r1, #0x100
 80565f8: f2c2 0100    	movt	r1, #0x2000
 80565fc: 6008         	str	r0, [r1]
 80565fe: e7ff         	b	0x8056600 <vTaskSwitchContext+0xc8> @ imm = #-0x2
 8056600: 9801         	ldr	r0, [sp, #0x4]
 8056602: f240 21a0    	movw	r1, #0x2a0
 8056606: f2c2 0100    	movt	r1, #0x2000
 805660a: 6008         	str	r0, [r1]
 805660c: e7ff         	b	0x805660e <vTaskSwitchContext+0xd6> @ imm = #-0x2
 805660e: e7ff         	b	0x8056610 <vTaskSwitchContext+0xd8> @ imm = #-0x2
;     }
 8056610: 4802         	ldr	r0, [pc, #0x8]          @ 0x805661c <vTaskSwitchContext+0xe4>
 8056612: 4780         	blx	r0
 8056614: b002         	add	sp, #0x8
 8056616: bd80         	pop	{r7, pc}

08056618 <$d.41>:
 8056618: 55 ec 05 08  	.word	0x0805ec55
 805661c: 21 05 06 08  	.word	0x08060521

08056620 <vTaskResume>:
;     {
 8056620: b580         	push	{r7, lr}
 8056622: 466f         	mov	r7, sp
 8056624: b084         	sub	sp, #0x10
 8056626: f643 5240    	movw	r2, #0x3d40
 805662a: f2c2 0200    	movt	r2, #0x2000
 805662e: 6811         	ldr	r1, [r2]
 8056630: f642 5340    	movw	r3, #0x2d40
 8056634: f2c2 0300    	movt	r3, #0x2000
 8056638: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805663c: 3101         	adds	r1, #0x1
 805663e: 6011         	str	r1, [r2]
 8056640: 9003         	str	r0, [sp, #0xc]
;         TCB_t * const pxTCB = xTaskToResume;
 8056642: 9803         	ldr	r0, [sp, #0xc]
 8056644: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTaskToResume );
 8056646: 9803         	ldr	r0, [sp, #0xc]
 8056648: b920         	cbnz	r0, 0x8056654 <vTaskResume+0x34> @ imm = #0x8
 805664a: e7ff         	b	0x805664c <vTaskResume+0x2c> @ imm = #-0x2
 805664c: 4848         	ldr	r0, [pc, #0x120]        @ 0x8056770 <vTaskResume+0x150>
 805664e: 4780         	blx	r0
 8056650: e7ff         	b	0x8056652 <vTaskResume+0x32> @ imm = #-0x2
 8056652: e7fe         	b	0x8056652 <vTaskResume+0x32> @ imm = #-0x4
;             if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8056654: 9802         	ldr	r0, [sp, #0x8]
 8056656: f240 1100    	movw	r1, #0x100
 805665a: f2c2 0100    	movt	r1, #0x2000
 805665e: 6809         	ldr	r1, [r1]
 8056660: 4288         	cmp	r0, r1
 8056662: d074         	beq	0x805674e <vTaskResume+0x12e> @ imm = #0xe8
 8056664: e7ff         	b	0x8056666 <vTaskResume+0x46> @ imm = #-0x2
 8056666: 9802         	ldr	r0, [sp, #0x8]
 8056668: 2800         	cmp	r0, #0x0
 805666a: d070         	beq	0x805674e <vTaskResume+0x12e> @ imm = #0xe0
 805666c: e7ff         	b	0x805666e <vTaskResume+0x4e> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805666e: 483a         	ldr	r0, [pc, #0xe8]         @ 0x8056758 <vTaskResume+0x138>
 8056670: 4780         	blx	r0
;                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8056672: 9802         	ldr	r0, [sp, #0x8]
 8056674: 4939         	ldr	r1, [pc, #0xe4]         @ 0x805675c <vTaskResume+0x13c>
 8056676: 4788         	blx	r1
 8056678: 2800         	cmp	r0, #0x0
 805667a: d064         	beq	0x8056746 <vTaskResume+0x126> @ imm = #0xc8
 805667c: e7ff         	b	0x805667e <vTaskResume+0x5e> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 805667e: 9802         	ldr	r0, [sp, #0x8]
 8056680: 3080         	adds	r0, #0x80
 8056682: 4937         	ldr	r1, [pc, #0xdc]         @ 0x8056760 <vTaskResume+0x140>
 8056684: 4788         	blx	r1
;                     prvAddTaskToReadyList( pxTCB );
 8056686: e7ff         	b	0x8056688 <vTaskResume+0x68> @ imm = #-0x2
 8056688: e7ff         	b	0x805668a <vTaskResume+0x6a> @ imm = #-0x2
 805668a: 9802         	ldr	r0, [sp, #0x8]
 805668c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056690: f240 21a0    	movw	r1, #0x2a0
 8056694: f2c2 0100    	movt	r1, #0x2000
 8056698: 6809         	ldr	r1, [r1]
 805669a: 4288         	cmp	r0, r1
 805669c: d909         	bls	0x80566b2 <vTaskResume+0x92> @ imm = #0x12
 805669e: e7ff         	b	0x80566a0 <vTaskResume+0x80> @ imm = #-0x2
 80566a0: 9802         	ldr	r0, [sp, #0x8]
 80566a2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80566a6: f240 21a0    	movw	r1, #0x2a0
 80566aa: f2c2 0100    	movt	r1, #0x2000
 80566ae: 6008         	str	r0, [r1]
 80566b0: e7ff         	b	0x80566b2 <vTaskResume+0x92> @ imm = #-0x2
 80566b2: e7ff         	b	0x80566b4 <vTaskResume+0x94> @ imm = #-0x2
 80566b4: e7ff         	b	0x80566b6 <vTaskResume+0x96> @ imm = #-0x2
 80566b6: 9802         	ldr	r0, [sp, #0x8]
 80566b8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80566bc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80566c0: f240 1160    	movw	r1, #0x160
 80566c4: f2c2 0100    	movt	r1, #0x2000
 80566c8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80566cc: 6840         	ldr	r0, [r0, #0x4]
 80566ce: 9001         	str	r0, [sp, #0x4]
 80566d0: 9801         	ldr	r0, [sp, #0x4]
 80566d2: 9a02         	ldr	r2, [sp, #0x8]
 80566d4: f8c2 0084    	str.w	r0, [r2, #0x84]
 80566d8: 9801         	ldr	r0, [sp, #0x4]
 80566da: 6880         	ldr	r0, [r0, #0x8]
 80566dc: 9a02         	ldr	r2, [sp, #0x8]
 80566de: f8c2 0088    	str.w	r0, [r2, #0x88]
 80566e2: 9802         	ldr	r0, [sp, #0x8]
 80566e4: 3080         	adds	r0, #0x80
 80566e6: 9a01         	ldr	r2, [sp, #0x4]
 80566e8: 6892         	ldr	r2, [r2, #0x8]
 80566ea: 6050         	str	r0, [r2, #0x4]
 80566ec: 9802         	ldr	r0, [sp, #0x8]
 80566ee: 3080         	adds	r0, #0x80
 80566f0: 9a01         	ldr	r2, [sp, #0x4]
 80566f2: 6090         	str	r0, [r2, #0x8]
 80566f4: 9a02         	ldr	r2, [sp, #0x8]
 80566f6: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80566fa: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80566fe: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056702: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056706: 9802         	ldr	r0, [sp, #0x8]
 8056708: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805670c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056710: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056714: 3001         	adds	r0, #0x1
 8056716: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805671a: e7ff         	b	0x805671c <vTaskResume+0xfc> @ imm = #-0x2
 805671c: e7ff         	b	0x805671e <vTaskResume+0xfe> @ imm = #-0x2
;                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 805671e: e7ff         	b	0x8056720 <vTaskResume+0x100> @ imm = #-0x2
 8056720: f240 1000    	movw	r0, #0x100
 8056724: f2c2 0000    	movt	r0, #0x2000
 8056728: 6800         	ldr	r0, [r0]
 805672a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805672e: 9902         	ldr	r1, [sp, #0x8]
 8056730: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056734: 4288         	cmp	r0, r1
 8056736: d203         	bhs	0x8056740 <vTaskResume+0x120> @ imm = #0x6
 8056738: e7ff         	b	0x805673a <vTaskResume+0x11a> @ imm = #-0x2
 805673a: 480a         	ldr	r0, [pc, #0x28]         @ 0x8056764 <vTaskResume+0x144>
 805673c: 4780         	blx	r0
 805673e: e000         	b	0x8056742 <vTaskResume+0x122> @ imm = #0x0
 8056740: e7ff         	b	0x8056742 <vTaskResume+0x122> @ imm = #-0x2
;                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8056742: e7ff         	b	0x8056744 <vTaskResume+0x124> @ imm = #-0x2
;                 }
 8056744: e000         	b	0x8056748 <vTaskResume+0x128> @ imm = #0x0
 8056746: e7ff         	b	0x8056748 <vTaskResume+0x128> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 8056748: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8056768 <vTaskResume+0x148>
 805674a: 4780         	blx	r0
;         }
 805674c: e000         	b	0x8056750 <vTaskResume+0x130> @ imm = #0x0
 805674e: e7ff         	b	0x8056750 <vTaskResume+0x130> @ imm = #-0x2
;     }
 8056750: 4806         	ldr	r0, [pc, #0x18]         @ 0x805676c <vTaskResume+0x14c>
 8056752: 4780         	blx	r0
 8056754: b004         	add	sp, #0x10
 8056756: bd80         	pop	{r7, pc}

08056758 <$d.43>:
 8056758: 05 e1 05 08  	.word	0x0805e105
 805675c: 75 67 05 08  	.word	0x08056775
 8056760: c9 b1 05 08  	.word	0x0805b1c9
 8056764: c5 e0 05 08  	.word	0x0805e0c5
 8056768: 4d e1 05 08  	.word	0x0805e14d
 805676c: 21 05 06 08  	.word	0x08060521
 8056770: 55 ec 05 08  	.word	0x0805ec55

08056774 <prvTaskIsTaskSuspended>:
;     {
 8056774: b580         	push	{r7, lr}
 8056776: 466f         	mov	r7, sp
 8056778: b084         	sub	sp, #0x10
 805677a: f643 5240    	movw	r2, #0x3d40
 805677e: f2c2 0200    	movt	r2, #0x2000
 8056782: 6811         	ldr	r1, [r2]
 8056784: f642 5340    	movw	r3, #0x2d40
 8056788: f2c2 0300    	movt	r3, #0x2000
 805678c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8056790: 3101         	adds	r1, #0x1
 8056792: 6011         	str	r1, [r2]
 8056794: 9003         	str	r0, [sp, #0xc]
 8056796: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 8056798: 9002         	str	r0, [sp, #0x8]
;         const TCB_t * const pxTCB = xTask;
 805679a: 9803         	ldr	r0, [sp, #0xc]
 805679c: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTask );
 805679e: 9803         	ldr	r0, [sp, #0xc]
 80567a0: b920         	cbnz	r0, 0x80567ac <prvTaskIsTaskSuspended+0x38> @ imm = #0x8
 80567a2: e7ff         	b	0x80567a4 <prvTaskIsTaskSuspended+0x30> @ imm = #-0x2
 80567a4: 4816         	ldr	r0, [pc, #0x58]         @ 0x8056800 <prvTaskIsTaskSuspended+0x8c>
 80567a6: 4780         	blx	r0
 80567a8: e7ff         	b	0x80567aa <prvTaskIsTaskSuspended+0x36> @ imm = #-0x2
 80567aa: e7fe         	b	0x80567aa <prvTaskIsTaskSuspended+0x36> @ imm = #-0x4
;         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80567ac: 9801         	ldr	r0, [sp, #0x4]
 80567ae: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80567b2: f240 114c    	movw	r1, #0x14c
 80567b6: f2c2 0100    	movt	r1, #0x2000
 80567ba: 4288         	cmp	r0, r1
 80567bc: d116         	bne	0x80567ec <prvTaskIsTaskSuspended+0x78> @ imm = #0x2c
 80567be: e7ff         	b	0x80567c0 <prvTaskIsTaskSuspended+0x4c> @ imm = #-0x2
;             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80567c0: 9801         	ldr	r0, [sp, #0x4]
 80567c2: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80567c6: f240 1138    	movw	r1, #0x138
 80567ca: f2c2 0100    	movt	r1, #0x2000
 80567ce: 4288         	cmp	r0, r1
 80567d0: d00a         	beq	0x80567e8 <prvTaskIsTaskSuspended+0x74> @ imm = #0x14
 80567d2: e7ff         	b	0x80567d4 <prvTaskIsTaskSuspended+0x60> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80567d4: 9801         	ldr	r0, [sp, #0x4]
 80567d6: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80567da: b918         	cbnz	r0, 0x80567e4 <prvTaskIsTaskSuspended+0x70> @ imm = #0x6
 80567dc: e7ff         	b	0x80567de <prvTaskIsTaskSuspended+0x6a> @ imm = #-0x2
 80567de: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 80567e0: 9002         	str	r0, [sp, #0x8]
;                 }
 80567e2: e000         	b	0x80567e6 <prvTaskIsTaskSuspended+0x72> @ imm = #0x0
 80567e4: e7ff         	b	0x80567e6 <prvTaskIsTaskSuspended+0x72> @ imm = #-0x2
;             }
 80567e6: e000         	b	0x80567ea <prvTaskIsTaskSuspended+0x76> @ imm = #0x0
 80567e8: e7ff         	b	0x80567ea <prvTaskIsTaskSuspended+0x76> @ imm = #-0x2
;         }
 80567ea: e000         	b	0x80567ee <prvTaskIsTaskSuspended+0x7a> @ imm = #0x0
 80567ec: e7ff         	b	0x80567ee <prvTaskIsTaskSuspended+0x7a> @ imm = #-0x2
;         return xReturn;
 80567ee: 9802         	ldr	r0, [sp, #0x8]
 80567f0: 9000         	str	r0, [sp]
 80567f2: 4802         	ldr	r0, [pc, #0x8]          @ 0x80567fc <prvTaskIsTaskSuspended+0x88>
 80567f4: 4780         	blx	r0
 80567f6: 9800         	ldr	r0, [sp]
 80567f8: b004         	add	sp, #0x10
 80567fa: bd80         	pop	{r7, pc}

080567fc <$d.45>:
 80567fc: 21 05 06 08  	.word	0x08060521
 8056800: 55 ec 05 08  	.word	0x0805ec55

08056804 <xTaskResumeFromISR>:
;     {
 8056804: b580         	push	{r7, lr}
 8056806: 466f         	mov	r7, sp
 8056808: b086         	sub	sp, #0x18
 805680a: f643 5240    	movw	r2, #0x3d40
 805680e: f2c2 0200    	movt	r2, #0x2000
 8056812: 6811         	ldr	r1, [r2]
 8056814: f642 5340    	movw	r3, #0x2d40
 8056818: f2c2 0300    	movt	r3, #0x2000
 805681c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8056820: 3101         	adds	r1, #0x1
 8056822: 6011         	str	r1, [r2]
 8056824: 9005         	str	r0, [sp, #0x14]
 8056826: 2000         	movs	r0, #0x0
;         BaseType_t xYieldRequired = pdFALSE;
 8056828: 9004         	str	r0, [sp, #0x10]
;         TCB_t * const pxTCB = xTaskToResume;
 805682a: 9805         	ldr	r0, [sp, #0x14]
 805682c: 9003         	str	r0, [sp, #0xc]
;         configASSERT( xTaskToResume );
 805682e: 9805         	ldr	r0, [sp, #0x14]
 8056830: b920         	cbnz	r0, 0x805683c <xTaskResumeFromISR+0x38> @ imm = #0x8
 8056832: e7ff         	b	0x8056834 <xTaskResumeFromISR+0x30> @ imm = #-0x2
 8056834: 4850         	ldr	r0, [pc, #0x140]        @ 0x8056978 <xTaskResumeFromISR+0x174>
 8056836: 4780         	blx	r0
 8056838: e7ff         	b	0x805683a <xTaskResumeFromISR+0x36> @ imm = #-0x2
 805683a: e7fe         	b	0x805683a <xTaskResumeFromISR+0x36> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805683c: 4847         	ldr	r0, [pc, #0x11c]        @ 0x805695c <xTaskResumeFromISR+0x158>
 805683e: 4780         	blx	r0
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8056840: 4847         	ldr	r0, [pc, #0x11c]        @ 0x8056960 <xTaskResumeFromISR+0x15c>
 8056842: 4780         	blx	r0
 8056844: 9002         	str	r0, [sp, #0x8]
;             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8056846: 9803         	ldr	r0, [sp, #0xc]
 8056848: 4946         	ldr	r1, [pc, #0x118]        @ 0x8056964 <xTaskResumeFromISR+0x160>
 805684a: 4788         	blx	r1
 805684c: 2800         	cmp	r0, #0x0
 805684e: d07a         	beq	0x8056946 <xTaskResumeFromISR+0x142> @ imm = #0xf4
 8056850: e7ff         	b	0x8056852 <xTaskResumeFromISR+0x4e> @ imm = #-0x2
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8056852: f240 1028    	movw	r0, #0x128
 8056856: f2c2 0000    	movt	r0, #0x2000
 805685a: 6800         	ldr	r0, [r0]
 805685c: 2800         	cmp	r0, #0x0
 805685e: d167         	bne	0x8056930 <xTaskResumeFromISR+0x12c> @ imm = #0xce
 8056860: e7ff         	b	0x8056862 <xTaskResumeFromISR+0x5e> @ imm = #-0x2
;                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056862: 9803         	ldr	r0, [sp, #0xc]
 8056864: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056868: f240 1100    	movw	r1, #0x100
 805686c: f2c2 0100    	movt	r1, #0x2000
 8056870: 6809         	ldr	r1, [r1]
 8056872: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056876: 4288         	cmp	r0, r1
 8056878: d908         	bls	0x805688c <xTaskResumeFromISR+0x88> @ imm = #0x10
 805687a: e7ff         	b	0x805687c <xTaskResumeFromISR+0x78> @ imm = #-0x2
 805687c: 2001         	movs	r0, #0x1
;                             xYieldRequired = pdTRUE;
 805687e: 9004         	str	r0, [sp, #0x10]
;                             xYieldPendings[ 0 ] = pdTRUE;
 8056880: f240 21a4    	movw	r1, #0x2a4
 8056884: f2c2 0100    	movt	r1, #0x2000
 8056888: 6008         	str	r0, [r1]
;                         }
 805688a: e000         	b	0x805688e <xTaskResumeFromISR+0x8a> @ imm = #0x0
 805688c: e7ff         	b	0x805688e <xTaskResumeFromISR+0x8a> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 805688e: 9803         	ldr	r0, [sp, #0xc]
 8056890: 3080         	adds	r0, #0x80
 8056892: 4936         	ldr	r1, [pc, #0xd8]         @ 0x805696c <xTaskResumeFromISR+0x168>
 8056894: 4788         	blx	r1
;                     prvAddTaskToReadyList( pxTCB );
 8056896: e7ff         	b	0x8056898 <xTaskResumeFromISR+0x94> @ imm = #-0x2
 8056898: e7ff         	b	0x805689a <xTaskResumeFromISR+0x96> @ imm = #-0x2
 805689a: 9803         	ldr	r0, [sp, #0xc]
 805689c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80568a0: f240 21a0    	movw	r1, #0x2a0
 80568a4: f2c2 0100    	movt	r1, #0x2000
 80568a8: 6809         	ldr	r1, [r1]
 80568aa: 4288         	cmp	r0, r1
 80568ac: d909         	bls	0x80568c2 <xTaskResumeFromISR+0xbe> @ imm = #0x12
 80568ae: e7ff         	b	0x80568b0 <xTaskResumeFromISR+0xac> @ imm = #-0x2
 80568b0: 9803         	ldr	r0, [sp, #0xc]
 80568b2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80568b6: f240 21a0    	movw	r1, #0x2a0
 80568ba: f2c2 0100    	movt	r1, #0x2000
 80568be: 6008         	str	r0, [r1]
 80568c0: e7ff         	b	0x80568c2 <xTaskResumeFromISR+0xbe> @ imm = #-0x2
 80568c2: e7ff         	b	0x80568c4 <xTaskResumeFromISR+0xc0> @ imm = #-0x2
 80568c4: e7ff         	b	0x80568c6 <xTaskResumeFromISR+0xc2> @ imm = #-0x2
 80568c6: 9803         	ldr	r0, [sp, #0xc]
 80568c8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80568cc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80568d0: f240 1160    	movw	r1, #0x160
 80568d4: f2c2 0100    	movt	r1, #0x2000
 80568d8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80568dc: 6840         	ldr	r0, [r0, #0x4]
 80568de: 9001         	str	r0, [sp, #0x4]
 80568e0: 9801         	ldr	r0, [sp, #0x4]
 80568e2: 9a03         	ldr	r2, [sp, #0xc]
 80568e4: f8c2 0084    	str.w	r0, [r2, #0x84]
 80568e8: 9801         	ldr	r0, [sp, #0x4]
 80568ea: 6880         	ldr	r0, [r0, #0x8]
 80568ec: 9a03         	ldr	r2, [sp, #0xc]
 80568ee: f8c2 0088    	str.w	r0, [r2, #0x88]
 80568f2: 9803         	ldr	r0, [sp, #0xc]
 80568f4: 3080         	adds	r0, #0x80
 80568f6: 9a01         	ldr	r2, [sp, #0x4]
 80568f8: 6892         	ldr	r2, [r2, #0x8]
 80568fa: 6050         	str	r0, [r2, #0x4]
 80568fc: 9803         	ldr	r0, [sp, #0xc]
 80568fe: 3080         	adds	r0, #0x80
 8056900: 9a01         	ldr	r2, [sp, #0x4]
 8056902: 6090         	str	r0, [r2, #0x8]
 8056904: 9a03         	ldr	r2, [sp, #0xc]
 8056906: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 805690a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805690e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056912: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056916: 9803         	ldr	r0, [sp, #0xc]
 8056918: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805691c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056920: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056924: 3001         	adds	r0, #0x1
 8056926: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805692a: e7ff         	b	0x805692c <xTaskResumeFromISR+0x128> @ imm = #-0x2
 805692c: e7ff         	b	0x805692e <xTaskResumeFromISR+0x12a> @ imm = #-0x2
;                 }
 805692e: e009         	b	0x8056944 <xTaskResumeFromISR+0x140> @ imm = #0x12
;                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8056930: 9803         	ldr	r0, [sp, #0xc]
 8056932: f100 0194    	add.w	r1, r0, #0x94
 8056936: f240 1038    	movw	r0, #0x138
 805693a: f2c2 0000    	movt	r0, #0x2000
 805693e: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x8056968 <xTaskResumeFromISR+0x164>
 8056940: 4790         	blx	r2
 8056942: e7ff         	b	0x8056944 <xTaskResumeFromISR+0x140> @ imm = #-0x2
;             }
 8056944: e000         	b	0x8056948 <xTaskResumeFromISR+0x144> @ imm = #0x0
 8056946: e7ff         	b	0x8056948 <xTaskResumeFromISR+0x144> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8056948: 9802         	ldr	r0, [sp, #0x8]
 805694a: 4909         	ldr	r1, [pc, #0x24]         @ 0x8056970 <xTaskResumeFromISR+0x16c>
 805694c: 4788         	blx	r1
;         return xYieldRequired;
 805694e: 9804         	ldr	r0, [sp, #0x10]
 8056950: 9000         	str	r0, [sp]
 8056952: 4808         	ldr	r0, [pc, #0x20]         @ 0x8056974 <xTaskResumeFromISR+0x170>
 8056954: 4780         	blx	r0
 8056956: 9800         	ldr	r0, [sp]
 8056958: b006         	add	sp, #0x18
 805695a: bd80         	pop	{r7, pc}

0805695c <$d.47>:
 805695c: 95 21 06 08  	.word	0x08062195
 8056960: 55 ec 05 08  	.word	0x0805ec55
 8056964: 75 67 05 08  	.word	0x08056775
 8056968: d9 b0 05 08  	.word	0x0805b0d9
 805696c: c9 b1 05 08  	.word	0x0805b1c9
 8056970: 85 ec 05 08  	.word	0x0805ec85
 8056974: 21 05 06 08  	.word	0x08060521
 8056978: 55 ec 05 08  	.word	0x0805ec55

0805697c <vTaskStartScheduler>:
; {
 805697c: b580         	push	{r7, lr}
 805697e: 466f         	mov	r7, sp
 8056980: b082         	sub	sp, #0x8
 8056982: f643 5140    	movw	r1, #0x3d40
 8056986: f2c2 0100    	movt	r1, #0x2000
 805698a: 6808         	ldr	r0, [r1]
 805698c: f642 5240    	movw	r2, #0x2d40
 8056990: f2c2 0200    	movt	r2, #0x2000
 8056994: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8056998: 3001         	adds	r0, #0x1
 805699a: 6008         	str	r0, [r1]
;     xReturn = prvCreateIdleTasks();
 805699c: 481c         	ldr	r0, [pc, #0x70]         @ 0x8056a10 <vTaskStartScheduler+0x94>
 805699e: 4780         	blx	r0
 80569a0: 9001         	str	r0, [sp, #0x4]
;         if( xReturn == pdPASS )
 80569a2: 9801         	ldr	r0, [sp, #0x4]
 80569a4: 2801         	cmp	r0, #0x1
 80569a6: d104         	bne	0x80569b2 <vTaskStartScheduler+0x36> @ imm = #0x8
 80569a8: e7ff         	b	0x80569aa <vTaskStartScheduler+0x2e> @ imm = #-0x2
;             xReturn = xTimerCreateTimerTask();
 80569aa: 481a         	ldr	r0, [pc, #0x68]         @ 0x8056a14 <vTaskStartScheduler+0x98>
 80569ac: 4780         	blx	r0
 80569ae: 9001         	str	r0, [sp, #0x4]
;         }
 80569b0: e000         	b	0x80569b4 <vTaskStartScheduler+0x38> @ imm = #0x0
 80569b2: e7ff         	b	0x80569b4 <vTaskStartScheduler+0x38> @ imm = #-0x2
;     if( xReturn == pdPASS )
 80569b4: 9801         	ldr	r0, [sp, #0x4]
 80569b6: 2801         	cmp	r0, #0x1
 80569b8: d118         	bne	0x80569ec <vTaskStartScheduler+0x70> @ imm = #0x30
 80569ba: e7ff         	b	0x80569bc <vTaskStartScheduler+0x40> @ imm = #-0x2
;         portDISABLE_INTERRUPTS();
 80569bc: 4817         	ldr	r0, [pc, #0x5c]         @ 0x8056a1c <vTaskStartScheduler+0xa0>
 80569be: 4780         	blx	r0
;         xNextTaskUnblockTime = portMAX_DELAY;
 80569c0: f240 21a8    	movw	r1, #0x2a8
 80569c4: f2c2 0100    	movt	r1, #0x2000
 80569c8: f04f 30ff    	mov.w	r0, #0xffffffff
 80569cc: 6008         	str	r0, [r1]
;         xSchedulerRunning = pdTRUE;
 80569ce: f240 1124    	movw	r1, #0x124
 80569d2: f2c2 0100    	movt	r1, #0x2000
 80569d6: 2001         	movs	r0, #0x1
 80569d8: 6008         	str	r0, [r1]
;         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80569da: f240 112c    	movw	r1, #0x12c
 80569de: f2c2 0100    	movt	r1, #0x2000
 80569e2: 2000         	movs	r0, #0x0
 80569e4: 6008         	str	r0, [r1]
;         xPortStartScheduler();
 80569e6: 480e         	ldr	r0, [pc, #0x38]         @ 0x8056a20 <vTaskStartScheduler+0xa4>
 80569e8: 4780         	blx	r0
;     }
 80569ea: e008         	b	0x80569fe <vTaskStartScheduler+0x82> @ imm = #0x10
;         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80569ec: 9801         	ldr	r0, [sp, #0x4]
 80569ee: 3001         	adds	r0, #0x1
 80569f0: b920         	cbnz	r0, 0x80569fc <vTaskStartScheduler+0x80> @ imm = #0x8
 80569f2: e7ff         	b	0x80569f4 <vTaskStartScheduler+0x78> @ imm = #-0x2
 80569f4: 4808         	ldr	r0, [pc, #0x20]         @ 0x8056a18 <vTaskStartScheduler+0x9c>
 80569f6: 4780         	blx	r0
 80569f8: e7ff         	b	0x80569fa <vTaskStartScheduler+0x7e> @ imm = #-0x2
 80569fa: e7fe         	b	0x80569fa <vTaskStartScheduler+0x7e> @ imm = #-0x4
 80569fc: e7ff         	b	0x80569fe <vTaskStartScheduler+0x82> @ imm = #-0x2
;     ( void ) uxTopUsedPriority;
 80569fe: f24a 00b4    	movw	r0, #0xa0b4
 8056a02: f6c0 0006    	movt	r0, #0x806
 8056a06: 6800         	ldr	r0, [r0]
; }
 8056a08: 4806         	ldr	r0, [pc, #0x18]         @ 0x8056a24 <vTaskStartScheduler+0xa8>
 8056a0a: 4780         	blx	r0
 8056a0c: b002         	add	sp, #0x8
 8056a0e: bd80         	pop	{r7, pc}

08056a10 <$d.49>:
 8056a10: 71 20 06 08  	.word	0x08062071
 8056a14: 75 91 05 08  	.word	0x08059175
 8056a18: 55 ec 05 08  	.word	0x0805ec55
 8056a1c: 55 ec 05 08  	.word	0x0805ec55
 8056a20: 21 e5 05 08  	.word	0x0805e521
 8056a24: 21 05 06 08  	.word	0x08060521

08056a28 <vTaskEndScheduler>:
; {
 8056a28: b580         	push	{r7, lr}
 8056a2a: 466f         	mov	r7, sp
;     portDISABLE_INTERRUPTS();
 8056a2c: f643 5140    	movw	r1, #0x3d40
 8056a30: f2c2 0100    	movt	r1, #0x2000
 8056a34: 6808         	ldr	r0, [r1]
 8056a36: f642 5240    	movw	r2, #0x2d40
 8056a3a: f2c2 0200    	movt	r2, #0x2000
 8056a3e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8056a42: 3001         	adds	r0, #0x1
 8056a44: 6008         	str	r0, [r1]
 8056a46: 4806         	ldr	r0, [pc, #0x18]         @ 0x8056a60 <vTaskEndScheduler+0x38>
 8056a48: 4780         	blx	r0
;     xSchedulerRunning = pdFALSE;
 8056a4a: f240 1124    	movw	r1, #0x124
 8056a4e: f2c2 0100    	movt	r1, #0x2000
 8056a52: 2000         	movs	r0, #0x0
 8056a54: 6008         	str	r0, [r1]
;     vPortEndScheduler();
 8056a56: 4803         	ldr	r0, [pc, #0xc]          @ 0x8056a64 <vTaskEndScheduler+0x3c>
 8056a58: 4780         	blx	r0
; }
 8056a5a: 4803         	ldr	r0, [pc, #0xc]          @ 0x8056a68 <vTaskEndScheduler+0x40>
 8056a5c: 4780         	blx	r0
 8056a5e: bd80         	pop	{r7, pc}

08056a60 <$d.53>:
 8056a60: 55 ec 05 08  	.word	0x0805ec55
 8056a64: 9d e7 05 08  	.word	0x0805e79d
 8056a68: 21 05 06 08  	.word	0x08060521

08056a6c <xTaskIncrementTick>:
; {
 8056a6c: b580         	push	{r7, lr}
 8056a6e: 466f         	mov	r7, sp
 8056a70: b08a         	sub	sp, #0x28
 8056a72: f643 5140    	movw	r1, #0x3d40
 8056a76: f2c2 0100    	movt	r1, #0x2000
 8056a7a: 6808         	ldr	r0, [r1]
 8056a7c: f642 5240    	movw	r2, #0x2d40
 8056a80: f2c2 0200    	movt	r2, #0x2000
 8056a84: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8056a88: 3001         	adds	r0, #0x1
 8056a8a: 6008         	str	r0, [r1]
 8056a8c: 2000         	movs	r0, #0x0
;     BaseType_t xSwitchRequired = pdFALSE;
 8056a8e: 9007         	str	r0, [sp, #0x1c]
;     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8056a90: f240 1028    	movw	r0, #0x128
 8056a94: f2c2 0000    	movt	r0, #0x2000
 8056a98: 6800         	ldr	r0, [r0]
 8056a9a: 2800         	cmp	r0, #0x0
 8056a9c: f040 813f    	bne.w	0x8056d1e <xTaskIncrementTick+0x2b2> @ imm = #0x27e
 8056aa0: e7ff         	b	0x8056aa2 <xTaskIncrementTick+0x36> @ imm = #-0x2
;         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8056aa2: f240 112c    	movw	r1, #0x12c
 8056aa6: f2c2 0100    	movt	r1, #0x2000
 8056aaa: 6808         	ldr	r0, [r1]
 8056aac: 3001         	adds	r0, #0x1
 8056aae: 9006         	str	r0, [sp, #0x18]
;         xTickCount = xConstTickCount;
 8056ab0: 9806         	ldr	r0, [sp, #0x18]
 8056ab2: 6008         	str	r0, [r1]
;         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8056ab4: 9806         	ldr	r0, [sp, #0x18]
 8056ab6: bb30         	cbnz	r0, 0x8056b06 <xTaskIncrementTick+0x9a> @ imm = #0x4c
 8056ab8: e7ff         	b	0x8056aba <xTaskIncrementTick+0x4e> @ imm = #-0x2
;             taskSWITCH_DELAYED_LISTS();
 8056aba: e7ff         	b	0x8056abc <xTaskIncrementTick+0x50> @ imm = #-0x2
 8056abc: f240 1030    	movw	r0, #0x130
 8056ac0: f2c2 0000    	movt	r0, #0x2000
 8056ac4: 6800         	ldr	r0, [r0]
 8056ac6: 6800         	ldr	r0, [r0]
 8056ac8: b120         	cbz	r0, 0x8056ad4 <xTaskIncrementTick+0x68> @ imm = #0x8
 8056aca: e7ff         	b	0x8056acc <xTaskIncrementTick+0x60> @ imm = #-0x2
 8056acc: 489d         	ldr	r0, [pc, #0x274]        @ 0x8056d44 <xTaskIncrementTick+0x2d8>
 8056ace: 4780         	blx	r0
 8056ad0: e7ff         	b	0x8056ad2 <xTaskIncrementTick+0x66> @ imm = #-0x2
 8056ad2: e7fe         	b	0x8056ad2 <xTaskIncrementTick+0x66> @ imm = #-0x4
 8056ad4: f240 1230    	movw	r2, #0x130
 8056ad8: f2c2 0200    	movt	r2, #0x2000
 8056adc: 6810         	ldr	r0, [r2]
 8056ade: 9005         	str	r0, [sp, #0x14]
 8056ae0: f240 1134    	movw	r1, #0x134
 8056ae4: f2c2 0100    	movt	r1, #0x2000
 8056ae8: 6808         	ldr	r0, [r1]
 8056aea: 6010         	str	r0, [r2]
 8056aec: 9805         	ldr	r0, [sp, #0x14]
 8056aee: 6008         	str	r0, [r1]
 8056af0: f240 21b4    	movw	r1, #0x2b4
 8056af4: f2c2 0100    	movt	r1, #0x2000
 8056af8: 6808         	ldr	r0, [r1]
 8056afa: 3001         	adds	r0, #0x1
 8056afc: 6008         	str	r0, [r1]
 8056afe: 488f         	ldr	r0, [pc, #0x23c]        @ 0x8056d3c <xTaskIncrementTick+0x2d0>
 8056b00: 4780         	blx	r0
 8056b02: e7ff         	b	0x8056b04 <xTaskIncrementTick+0x98> @ imm = #-0x2
;         }
 8056b04: e000         	b	0x8056b08 <xTaskIncrementTick+0x9c> @ imm = #0x0
 8056b06: e7ff         	b	0x8056b08 <xTaskIncrementTick+0x9c> @ imm = #-0x2
;         if( xConstTickCount >= xNextTaskUnblockTime )
 8056b08: 9806         	ldr	r0, [sp, #0x18]
 8056b0a: f240 21a8    	movw	r1, #0x2a8
 8056b0e: f2c2 0100    	movt	r1, #0x2000
 8056b12: 6809         	ldr	r1, [r1]
 8056b14: 4288         	cmp	r0, r1
 8056b16: f0c0 80e0    	blo.w	0x8056cda <xTaskIncrementTick+0x26e> @ imm = #0x1c0
 8056b1a: e7ff         	b	0x8056b1c <xTaskIncrementTick+0xb0> @ imm = #-0x2
;             for( ; ; )
 8056b1c: e7ff         	b	0x8056b1e <xTaskIncrementTick+0xb2> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8056b1e: f240 1030    	movw	r0, #0x130
 8056b22: f2c2 0000    	movt	r0, #0x2000
 8056b26: 6800         	ldr	r0, [r0]
 8056b28: 6800         	ldr	r0, [r0]
 8056b2a: b940         	cbnz	r0, 0x8056b3e <xTaskIncrementTick+0xd2> @ imm = #0x10
 8056b2c: e7ff         	b	0x8056b2e <xTaskIncrementTick+0xc2> @ imm = #-0x2
;                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8056b2e: f240 21a8    	movw	r1, #0x2a8
 8056b32: f2c2 0100    	movt	r1, #0x2000
 8056b36: f04f 30ff    	mov.w	r0, #0xffffffff
 8056b3a: 6008         	str	r0, [r1]
;                     break;
 8056b3c: e0cc         	b	0x8056cd8 <xTaskIncrementTick+0x26c> @ imm = #0x198
;                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056b3e: f240 1030    	movw	r0, #0x130
 8056b42: f2c2 0000    	movt	r0, #0x2000
 8056b46: 6800         	ldr	r0, [r0]
 8056b48: 68c0         	ldr	r0, [r0, #0xc]
 8056b4a: 68c0         	ldr	r0, [r0, #0xc]
 8056b4c: 9009         	str	r0, [sp, #0x24]
;                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8056b4e: 9809         	ldr	r0, [sp, #0x24]
 8056b50: f8d0 0080    	ldr.w	r0, [r0, #0x80]
 8056b54: 9008         	str	r0, [sp, #0x20]
;                     if( xConstTickCount < xItemValue )
 8056b56: 9806         	ldr	r0, [sp, #0x18]
 8056b58: 9908         	ldr	r1, [sp, #0x20]
 8056b5a: 4288         	cmp	r0, r1
 8056b5c: d207         	bhs	0x8056b6e <xTaskIncrementTick+0x102> @ imm = #0xe
 8056b5e: e7ff         	b	0x8056b60 <xTaskIncrementTick+0xf4> @ imm = #-0x2
;                         xNextTaskUnblockTime = xItemValue;
 8056b60: 9808         	ldr	r0, [sp, #0x20]
 8056b62: f240 21a8    	movw	r1, #0x2a8
 8056b66: f2c2 0100    	movt	r1, #0x2000
 8056b6a: 6008         	str	r0, [r1]
;                         break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8056b6c: e0b4         	b	0x8056cd8 <xTaskIncrementTick+0x26c> @ imm = #0x168
 8056b6e: e7ff         	b	0x8056b70 <xTaskIncrementTick+0x104> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8056b70: e7ff         	b	0x8056b72 <xTaskIncrementTick+0x106> @ imm = #-0x2
 8056b72: 9809         	ldr	r0, [sp, #0x24]
 8056b74: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8056b78: 9004         	str	r0, [sp, #0x10]
 8056b7a: 9809         	ldr	r0, [sp, #0x24]
 8056b7c: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8056b80: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056b84: 6088         	str	r0, [r1, #0x8]
 8056b86: 9909         	ldr	r1, [sp, #0x24]
 8056b88: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8056b8c: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8056b90: 6048         	str	r0, [r1, #0x4]
 8056b92: 9804         	ldr	r0, [sp, #0x10]
 8056b94: 6840         	ldr	r0, [r0, #0x4]
 8056b96: 9909         	ldr	r1, [sp, #0x24]
 8056b98: 3180         	adds	r1, #0x80
 8056b9a: 4288         	cmp	r0, r1
 8056b9c: d106         	bne	0x8056bac <xTaskIncrementTick+0x140> @ imm = #0xc
 8056b9e: e7ff         	b	0x8056ba0 <xTaskIncrementTick+0x134> @ imm = #-0x2
 8056ba0: 9809         	ldr	r0, [sp, #0x24]
 8056ba2: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056ba6: 9904         	ldr	r1, [sp, #0x10]
 8056ba8: 6048         	str	r0, [r1, #0x4]
 8056baa: e7ff         	b	0x8056bac <xTaskIncrementTick+0x140> @ imm = #-0x2
 8056bac: 9909         	ldr	r1, [sp, #0x24]
 8056bae: 2000         	movs	r0, #0x0
 8056bb0: f8c1 0090    	str.w	r0, [r1, #0x90]
 8056bb4: 9904         	ldr	r1, [sp, #0x10]
 8056bb6: 6808         	ldr	r0, [r1]
 8056bb8: 3801         	subs	r0, #0x1
 8056bba: 6008         	str	r0, [r1]
 8056bbc: e7ff         	b	0x8056bbe <xTaskIncrementTick+0x152> @ imm = #-0x2
;                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8056bbe: 9809         	ldr	r0, [sp, #0x24]
 8056bc0: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056bc4: b340         	cbz	r0, 0x8056c18 <xTaskIncrementTick+0x1ac> @ imm = #0x50
 8056bc6: e7ff         	b	0x8056bc8 <xTaskIncrementTick+0x15c> @ imm = #-0x2
;                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8056bc8: e7ff         	b	0x8056bca <xTaskIncrementTick+0x15e> @ imm = #-0x2
 8056bca: 9809         	ldr	r0, [sp, #0x24]
 8056bcc: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056bd0: 9003         	str	r0, [sp, #0xc]
 8056bd2: 9809         	ldr	r0, [sp, #0x24]
 8056bd4: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8056bd8: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056bdc: 6088         	str	r0, [r1, #0x8]
 8056bde: 9909         	ldr	r1, [sp, #0x24]
 8056be0: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8056be4: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8056be8: 6048         	str	r0, [r1, #0x4]
 8056bea: 9803         	ldr	r0, [sp, #0xc]
 8056bec: 6840         	ldr	r0, [r0, #0x4]
 8056bee: 9909         	ldr	r1, [sp, #0x24]
 8056bf0: 3194         	adds	r1, #0x94
 8056bf2: 4288         	cmp	r0, r1
 8056bf4: d106         	bne	0x8056c04 <xTaskIncrementTick+0x198> @ imm = #0xc
 8056bf6: e7ff         	b	0x8056bf8 <xTaskIncrementTick+0x18c> @ imm = #-0x2
 8056bf8: 9809         	ldr	r0, [sp, #0x24]
 8056bfa: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056bfe: 9903         	ldr	r1, [sp, #0xc]
 8056c00: 6048         	str	r0, [r1, #0x4]
 8056c02: e7ff         	b	0x8056c04 <xTaskIncrementTick+0x198> @ imm = #-0x2
 8056c04: 9909         	ldr	r1, [sp, #0x24]
 8056c06: 2000         	movs	r0, #0x0
 8056c08: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056c0c: 9903         	ldr	r1, [sp, #0xc]
 8056c0e: 6808         	ldr	r0, [r1]
 8056c10: 3801         	subs	r0, #0x1
 8056c12: 6008         	str	r0, [r1]
 8056c14: e7ff         	b	0x8056c16 <xTaskIncrementTick+0x1aa> @ imm = #-0x2
;                     }
 8056c16: e000         	b	0x8056c1a <xTaskIncrementTick+0x1ae> @ imm = #0x0
 8056c18: e7ff         	b	0x8056c1a <xTaskIncrementTick+0x1ae> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8056c1a: e7ff         	b	0x8056c1c <xTaskIncrementTick+0x1b0> @ imm = #-0x2
 8056c1c: e7ff         	b	0x8056c1e <xTaskIncrementTick+0x1b2> @ imm = #-0x2
 8056c1e: 9809         	ldr	r0, [sp, #0x24]
 8056c20: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056c24: f240 21a0    	movw	r1, #0x2a0
 8056c28: f2c2 0100    	movt	r1, #0x2000
 8056c2c: 6809         	ldr	r1, [r1]
 8056c2e: 4288         	cmp	r0, r1
 8056c30: d909         	bls	0x8056c46 <xTaskIncrementTick+0x1da> @ imm = #0x12
 8056c32: e7ff         	b	0x8056c34 <xTaskIncrementTick+0x1c8> @ imm = #-0x2
 8056c34: 9809         	ldr	r0, [sp, #0x24]
 8056c36: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056c3a: f240 21a0    	movw	r1, #0x2a0
 8056c3e: f2c2 0100    	movt	r1, #0x2000
 8056c42: 6008         	str	r0, [r1]
 8056c44: e7ff         	b	0x8056c46 <xTaskIncrementTick+0x1da> @ imm = #-0x2
 8056c46: e7ff         	b	0x8056c48 <xTaskIncrementTick+0x1dc> @ imm = #-0x2
 8056c48: e7ff         	b	0x8056c4a <xTaskIncrementTick+0x1de> @ imm = #-0x2
 8056c4a: 9809         	ldr	r0, [sp, #0x24]
 8056c4c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056c50: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056c54: f240 1160    	movw	r1, #0x160
 8056c58: f2c2 0100    	movt	r1, #0x2000
 8056c5c: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056c60: 6840         	ldr	r0, [r0, #0x4]
 8056c62: 9002         	str	r0, [sp, #0x8]
 8056c64: 9802         	ldr	r0, [sp, #0x8]
 8056c66: 9a09         	ldr	r2, [sp, #0x24]
 8056c68: f8c2 0084    	str.w	r0, [r2, #0x84]
 8056c6c: 9802         	ldr	r0, [sp, #0x8]
 8056c6e: 6880         	ldr	r0, [r0, #0x8]
 8056c70: 9a09         	ldr	r2, [sp, #0x24]
 8056c72: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056c76: 9809         	ldr	r0, [sp, #0x24]
 8056c78: 3080         	adds	r0, #0x80
 8056c7a: 9a02         	ldr	r2, [sp, #0x8]
 8056c7c: 6892         	ldr	r2, [r2, #0x8]
 8056c7e: 6050         	str	r0, [r2, #0x4]
 8056c80: 9809         	ldr	r0, [sp, #0x24]
 8056c82: 3080         	adds	r0, #0x80
 8056c84: 9a02         	ldr	r2, [sp, #0x8]
 8056c86: 6090         	str	r0, [r2, #0x8]
 8056c88: 9a09         	ldr	r2, [sp, #0x24]
 8056c8a: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8056c8e: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056c92: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056c96: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056c9a: 9809         	ldr	r0, [sp, #0x24]
 8056c9c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056ca0: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056ca4: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056ca8: 3001         	adds	r0, #0x1
 8056caa: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8056cae: e7ff         	b	0x8056cb0 <xTaskIncrementTick+0x244> @ imm = #-0x2
 8056cb0: e7ff         	b	0x8056cb2 <xTaskIncrementTick+0x246> @ imm = #-0x2
;                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056cb2: 9809         	ldr	r0, [sp, #0x24]
 8056cb4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056cb8: f240 1100    	movw	r1, #0x100
 8056cbc: f2c2 0100    	movt	r1, #0x2000
 8056cc0: 6809         	ldr	r1, [r1]
 8056cc2: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056cc6: 4288         	cmp	r0, r1
 8056cc8: d903         	bls	0x8056cd2 <xTaskIncrementTick+0x266> @ imm = #0x6
 8056cca: e7ff         	b	0x8056ccc <xTaskIncrementTick+0x260> @ imm = #-0x2
 8056ccc: 2001         	movs	r0, #0x1
;                                 xSwitchRequired = pdTRUE;
 8056cce: 9007         	str	r0, [sp, #0x1c]
;                             }
 8056cd0: e000         	b	0x8056cd4 <xTaskIncrementTick+0x268> @ imm = #0x0
 8056cd2: e7ff         	b	0x8056cd4 <xTaskIncrementTick+0x268> @ imm = #-0x2
 8056cd4: e7ff         	b	0x8056cd6 <xTaskIncrementTick+0x26a> @ imm = #-0x2
;             for( ; ; )
 8056cd6: e722         	b	0x8056b1e <xTaskIncrementTick+0xb2> @ imm = #-0x1bc
;         }
 8056cd8: e7ff         	b	0x8056cda <xTaskIncrementTick+0x26e> @ imm = #-0x2
;                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8056cda: f240 1000    	movw	r0, #0x100
 8056cde: f2c2 0000    	movt	r0, #0x2000
 8056ce2: 6800         	ldr	r0, [r0]
 8056ce4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056ce8: eb00 0180    	add.w	r1, r0, r0, lsl #2
 8056cec: f240 1060    	movw	r0, #0x160
 8056cf0: f2c2 0000    	movt	r0, #0x2000
 8056cf4: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 8056cf8: 2802         	cmp	r0, #0x2
 8056cfa: d303         	blo	0x8056d04 <xTaskIncrementTick+0x298> @ imm = #0x6
 8056cfc: e7ff         	b	0x8056cfe <xTaskIncrementTick+0x292> @ imm = #-0x2
 8056cfe: 2001         	movs	r0, #0x1
;                     xSwitchRequired = pdTRUE;
 8056d00: 9007         	str	r0, [sp, #0x1c]
;                 }
 8056d02: e000         	b	0x8056d06 <xTaskIncrementTick+0x29a> @ imm = #0x0
 8056d04: e7ff         	b	0x8056d06 <xTaskIncrementTick+0x29a> @ imm = #-0x2
;                 if( xYieldPendings[ 0 ] != pdFALSE )
 8056d06: f240 20a4    	movw	r0, #0x2a4
 8056d0a: f2c2 0000    	movt	r0, #0x2000
 8056d0e: 6800         	ldr	r0, [r0]
 8056d10: b118         	cbz	r0, 0x8056d1a <xTaskIncrementTick+0x2ae> @ imm = #0x6
 8056d12: e7ff         	b	0x8056d14 <xTaskIncrementTick+0x2a8> @ imm = #-0x2
 8056d14: 2001         	movs	r0, #0x1
;                     xSwitchRequired = pdTRUE;
 8056d16: 9007         	str	r0, [sp, #0x1c]
;                 }
 8056d18: e000         	b	0x8056d1c <xTaskIncrementTick+0x2b0> @ imm = #0x0
 8056d1a: e7ff         	b	0x8056d1c <xTaskIncrementTick+0x2b0> @ imm = #-0x2
;     }
 8056d1c: e007         	b	0x8056d2e <xTaskIncrementTick+0x2c2> @ imm = #0xe
;         ++xPendedTicks;
 8056d1e: f240 21b0    	movw	r1, #0x2b0
 8056d22: f2c2 0100    	movt	r1, #0x2000
 8056d26: 6808         	ldr	r0, [r1]
 8056d28: 3001         	adds	r0, #0x1
 8056d2a: 6008         	str	r0, [r1]
 8056d2c: e7ff         	b	0x8056d2e <xTaskIncrementTick+0x2c2> @ imm = #-0x2
;     return xSwitchRequired;
 8056d2e: 9807         	ldr	r0, [sp, #0x1c]
 8056d30: 9001         	str	r0, [sp, #0x4]
 8056d32: 4803         	ldr	r0, [pc, #0xc]          @ 0x8056d40 <xTaskIncrementTick+0x2d4>
 8056d34: 4780         	blx	r0
 8056d36: 9801         	ldr	r0, [sp, #0x4]
 8056d38: b00a         	add	sp, #0x28
 8056d3a: bd80         	pop	{r7, pc}

08056d3c <$d.55>:
 8056d3c: ad 57 05 08  	.word	0x080557ad
 8056d40: 21 05 06 08  	.word	0x08060521
 8056d44: 55 ec 05 08  	.word	0x0805ec55

08056d48 <xTaskGetTickCount>:
; {
 8056d48: b580         	push	{r7, lr}
 8056d4a: 466f         	mov	r7, sp
 8056d4c: b082         	sub	sp, #0x8
 8056d4e: f643 5140    	movw	r1, #0x3d40
 8056d52: f2c2 0100    	movt	r1, #0x2000
 8056d56: 6808         	ldr	r0, [r1]
 8056d58: f642 5240    	movw	r2, #0x2d40
 8056d5c: f2c2 0200    	movt	r2, #0x2000
 8056d60: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8056d64: 3001         	adds	r0, #0x1
 8056d66: 6008         	str	r0, [r1]
;         xTicks = xTickCount;
 8056d68: f240 102c    	movw	r0, #0x12c
 8056d6c: f2c2 0000    	movt	r0, #0x2000
 8056d70: 6800         	ldr	r0, [r0]
 8056d72: 9001         	str	r0, [sp, #0x4]
;     return xTicks;
 8056d74: 9801         	ldr	r0, [sp, #0x4]
 8056d76: 9000         	str	r0, [sp]
 8056d78: 4802         	ldr	r0, [pc, #0x8]          @ 0x8056d84 <xTaskGetTickCount+0x3c>
 8056d7a: 4780         	blx	r0
 8056d7c: 9800         	ldr	r0, [sp]
 8056d7e: b002         	add	sp, #0x8
 8056d80: bd80         	pop	{r7, pc}
 8056d82: bf00         	nop

08056d84 <$d.57>:
 8056d84: 21 05 06 08  	.word	0x08060521

08056d88 <xTaskGetTickCountFromISR>:
; {
 8056d88: b580         	push	{r7, lr}
 8056d8a: 466f         	mov	r7, sp
 8056d8c: b084         	sub	sp, #0x10
 8056d8e: f643 5140    	movw	r1, #0x3d40
 8056d92: f2c2 0100    	movt	r1, #0x2000
 8056d96: 6808         	ldr	r0, [r1]
 8056d98: f642 5240    	movw	r2, #0x2d40
 8056d9c: f2c2 0200    	movt	r2, #0x2000
 8056da0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8056da4: 3001         	adds	r0, #0x1
 8056da6: 6008         	str	r0, [r1]
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8056da8: 4808         	ldr	r0, [pc, #0x20]         @ 0x8056dcc <xTaskGetTickCountFromISR+0x44>
 8056daa: 4780         	blx	r0
 8056dac: 2000         	movs	r0, #0x0
;     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8056dae: 9002         	str	r0, [sp, #0x8]
;         xReturn = xTickCount;
 8056db0: f240 102c    	movw	r0, #0x12c
 8056db4: f2c2 0000    	movt	r0, #0x2000
 8056db8: 6800         	ldr	r0, [r0]
 8056dba: 9003         	str	r0, [sp, #0xc]
;     return xReturn;
 8056dbc: 9803         	ldr	r0, [sp, #0xc]
 8056dbe: 9001         	str	r0, [sp, #0x4]
 8056dc0: 4803         	ldr	r0, [pc, #0xc]          @ 0x8056dd0 <xTaskGetTickCountFromISR+0x48>
 8056dc2: 4780         	blx	r0
 8056dc4: 9801         	ldr	r0, [sp, #0x4]
 8056dc6: b004         	add	sp, #0x10
 8056dc8: bd80         	pop	{r7, pc}
 8056dca: bf00         	nop

08056dcc <$d.59>:
 8056dcc: 95 21 06 08  	.word	0x08062195
 8056dd0: 21 05 06 08  	.word	0x08060521

08056dd4 <uxTaskGetNumberOfTasks>:
; {
 8056dd4: b580         	push	{r7, lr}
 8056dd6: 466f         	mov	r7, sp
 8056dd8: b082         	sub	sp, #0x8
;     return uxCurrentNumberOfTasks;
 8056dda: f643 5140    	movw	r1, #0x3d40
 8056dde: f2c2 0100    	movt	r1, #0x2000
 8056de2: 6808         	ldr	r0, [r1]
 8056de4: f642 5240    	movw	r2, #0x2d40
 8056de8: f2c2 0200    	movt	r2, #0x2000
 8056dec: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8056df0: 3001         	adds	r0, #0x1
 8056df2: 6008         	str	r0, [r1]
 8056df4: f240 1020    	movw	r0, #0x120
 8056df8: f2c2 0000    	movt	r0, #0x2000
 8056dfc: 6800         	ldr	r0, [r0]
 8056dfe: 9001         	str	r0, [sp, #0x4]
 8056e00: 4802         	ldr	r0, [pc, #0x8]          @ 0x8056e0c <uxTaskGetNumberOfTasks+0x38>
 8056e02: 4780         	blx	r0
 8056e04: 9801         	ldr	r0, [sp, #0x4]
 8056e06: b002         	add	sp, #0x8
 8056e08: bd80         	pop	{r7, pc}
 8056e0a: bf00         	nop

08056e0c <$d.61>:
 8056e0c: 21 05 06 08  	.word	0x08060521

08056e10 <pcTaskGetName>:
; {
 8056e10: b580         	push	{r7, lr}
 8056e12: 466f         	mov	r7, sp
 8056e14: b084         	sub	sp, #0x10
 8056e16: f643 5240    	movw	r2, #0x3d40
 8056e1a: f2c2 0200    	movt	r2, #0x2000
 8056e1e: 6811         	ldr	r1, [r2]
 8056e20: f642 5340    	movw	r3, #0x2d40
 8056e24: f2c2 0300    	movt	r3, #0x2000
 8056e28: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8056e2c: 3101         	adds	r1, #0x1
 8056e2e: 6011         	str	r1, [r2]
 8056e30: 9003         	str	r0, [sp, #0xc]
;     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8056e32: 9803         	ldr	r0, [sp, #0xc]
 8056e34: b938         	cbnz	r0, 0x8056e46 <pcTaskGetName+0x36> @ imm = #0xe
 8056e36: e7ff         	b	0x8056e38 <pcTaskGetName+0x28> @ imm = #-0x2
 8056e38: f240 1000    	movw	r0, #0x100
 8056e3c: f2c2 0000    	movt	r0, #0x2000
 8056e40: 6800         	ldr	r0, [r0]
 8056e42: 9001         	str	r0, [sp, #0x4]
 8056e44: e002         	b	0x8056e4c <pcTaskGetName+0x3c> @ imm = #0x4
 8056e46: 9803         	ldr	r0, [sp, #0xc]
 8056e48: 9001         	str	r0, [sp, #0x4]
 8056e4a: e7ff         	b	0x8056e4c <pcTaskGetName+0x3c> @ imm = #-0x2
 8056e4c: 9801         	ldr	r0, [sp, #0x4]
 8056e4e: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxTCB );
 8056e50: 9802         	ldr	r0, [sp, #0x8]
 8056e52: b920         	cbnz	r0, 0x8056e5e <pcTaskGetName+0x4e> @ imm = #0x8
 8056e54: e7ff         	b	0x8056e56 <pcTaskGetName+0x46> @ imm = #-0x2
 8056e56: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8056e74 <pcTaskGetName+0x64>
 8056e58: 4780         	blx	r0
 8056e5a: e7ff         	b	0x8056e5c <pcTaskGetName+0x4c> @ imm = #-0x2
 8056e5c: e7fe         	b	0x8056e5c <pcTaskGetName+0x4c> @ imm = #-0x4
;     return &( pxTCB->pcTaskName[ 0 ] );
 8056e5e: 9802         	ldr	r0, [sp, #0x8]
 8056e60: 30b0         	adds	r0, #0xb0
 8056e62: 9000         	str	r0, [sp]
 8056e64: 4802         	ldr	r0, [pc, #0x8]          @ 0x8056e70 <pcTaskGetName+0x60>
 8056e66: 4780         	blx	r0
 8056e68: 9800         	ldr	r0, [sp]
 8056e6a: b004         	add	sp, #0x10
 8056e6c: bd80         	pop	{r7, pc}
 8056e6e: bf00         	nop

08056e70 <$d.63>:
 8056e70: 21 05 06 08  	.word	0x08060521
 8056e74: 55 ec 05 08  	.word	0x0805ec55

08056e78 <uxTaskGetSystemState>:
;     {
 8056e78: b5d0         	push	{r4, r6, r7, lr}
 8056e7a: af02         	add	r7, sp, #0x8
 8056e7c: b08c         	sub	sp, #0x30
 8056e7e: f643 5c40    	movw	r12, #0x3d40
 8056e82: f2c2 0c00    	movt	r12, #0x2000
 8056e86: f8dc 3000    	ldr.w	r3, [r12]
 8056e8a: f642 5440    	movw	r4, #0x2d40
 8056e8e: f2c2 0400    	movt	r4, #0x2000
 8056e92: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8056e96: 3301         	adds	r3, #0x1
 8056e98: f8cc 3000    	str.w	r3, [r12]
 8056e9c: 900b         	str	r0, [sp, #0x2c]
 8056e9e: 910a         	str	r1, [sp, #0x28]
 8056ea0: 9209         	str	r2, [sp, #0x24]
 8056ea2: 2000         	movs	r0, #0x0
;         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8056ea4: 9008         	str	r0, [sp, #0x20]
 8056ea6: 2010         	movs	r0, #0x10
 8056ea8: 9007         	str	r0, [sp, #0x1c]
;         vTaskSuspendAll();
 8056eaa: 4844         	ldr	r0, [pc, #0x110]        @ 0x8056fbc <uxTaskGetSystemState+0x144>
 8056eac: 4780         	blx	r0
;             if( uxArraySize >= uxCurrentNumberOfTasks )
 8056eae: 980a         	ldr	r0, [sp, #0x28]
 8056eb0: f240 1120    	movw	r1, #0x120
 8056eb4: f2c2 0100    	movt	r1, #0x2000
 8056eb8: 6809         	ldr	r1, [r1]
 8056eba: 4288         	cmp	r0, r1
 8056ebc: d373         	blo	0x8056fa6 <uxTaskGetSystemState+0x12e> @ imm = #0xe6
 8056ebe: e7ff         	b	0x8056ec0 <uxTaskGetSystemState+0x48> @ imm = #-0x2
;                 do
 8056ec0: e7ff         	b	0x8056ec2 <uxTaskGetSystemState+0x4a> @ imm = #-0x2
;                     uxQueue--;
 8056ec2: 9807         	ldr	r0, [sp, #0x1c]
 8056ec4: 3801         	subs	r0, #0x1
 8056ec6: 9007         	str	r0, [sp, #0x1c]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 8056ec8: 9908         	ldr	r1, [sp, #0x20]
 8056eca: 9106         	str	r1, [sp, #0x18]
 8056ecc: 980b         	ldr	r0, [sp, #0x2c]
 8056ece: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056ed2: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056ed6: 9907         	ldr	r1, [sp, #0x1c]
 8056ed8: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8056edc: f240 1160    	movw	r1, #0x160
 8056ee0: f2c2 0100    	movt	r1, #0x2000
 8056ee4: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8056ee8: 4b35         	ldr	r3, [pc, #0xd4]         @ 0x8056fc0 <uxTaskGetSystemState+0x148>
 8056eea: 2201         	movs	r2, #0x1
 8056eec: 4798         	blx	r3
 8056eee: 4601         	mov	r1, r0
 8056ef0: 9806         	ldr	r0, [sp, #0x18]
 8056ef2: 4408         	add	r0, r1
 8056ef4: 9008         	str	r0, [sp, #0x20]
;                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8056ef6: e7ff         	b	0x8056ef8 <uxTaskGetSystemState+0x80> @ imm = #-0x2
 8056ef8: 9807         	ldr	r0, [sp, #0x1c]
 8056efa: 2800         	cmp	r0, #0x0
 8056efc: d1e1         	bne	0x8056ec2 <uxTaskGetSystemState+0x4a> @ imm = #-0x3e
 8056efe: e7ff         	b	0x8056f00 <uxTaskGetSystemState+0x88> @ imm = #-0x2
;                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 8056f00: 9908         	ldr	r1, [sp, #0x20]
 8056f02: 9102         	str	r1, [sp, #0x8]
 8056f04: 980b         	ldr	r0, [sp, #0x2c]
 8056f06: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056f0a: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056f0e: f240 1130    	movw	r1, #0x130
 8056f12: f2c2 0100    	movt	r1, #0x2000
 8056f16: 6809         	ldr	r1, [r1]
 8056f18: 4b2a         	ldr	r3, [pc, #0xa8]         @ 0x8056fc4 <uxTaskGetSystemState+0x14c>
 8056f1a: 2202         	movs	r2, #0x2
 8056f1c: 9201         	str	r2, [sp, #0x4]
 8056f1e: 4798         	blx	r3
 8056f20: 9a01         	ldr	r2, [sp, #0x4]
 8056f22: 4601         	mov	r1, r0
 8056f24: 9802         	ldr	r0, [sp, #0x8]
 8056f26: 4408         	add	r0, r1
 8056f28: 9008         	str	r0, [sp, #0x20]
;                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 8056f2a: 9908         	ldr	r1, [sp, #0x20]
 8056f2c: 9103         	str	r1, [sp, #0xc]
 8056f2e: 980b         	ldr	r0, [sp, #0x2c]
 8056f30: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056f34: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056f38: f240 1134    	movw	r1, #0x134
 8056f3c: f2c2 0100    	movt	r1, #0x2000
 8056f40: 6809         	ldr	r1, [r1]
 8056f42: 4b21         	ldr	r3, [pc, #0x84]         @ 0x8056fc8 <uxTaskGetSystemState+0x150>
 8056f44: 4798         	blx	r3
 8056f46: 4601         	mov	r1, r0
 8056f48: 9803         	ldr	r0, [sp, #0xc]
 8056f4a: 4408         	add	r0, r1
 8056f4c: 9008         	str	r0, [sp, #0x20]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 8056f4e: 9908         	ldr	r1, [sp, #0x20]
 8056f50: 9104         	str	r1, [sp, #0x10]
 8056f52: 980b         	ldr	r0, [sp, #0x2c]
 8056f54: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056f58: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056f5c: f240 1108    	movw	r1, #0x108
 8056f60: f2c2 0100    	movt	r1, #0x2000
 8056f64: 4b19         	ldr	r3, [pc, #0x64]         @ 0x8056fcc <uxTaskGetSystemState+0x154>
 8056f66: 2204         	movs	r2, #0x4
 8056f68: 4798         	blx	r3
 8056f6a: 4601         	mov	r1, r0
 8056f6c: 9804         	ldr	r0, [sp, #0x10]
 8056f6e: 4408         	add	r0, r1
 8056f70: 9008         	str	r0, [sp, #0x20]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 8056f72: 9908         	ldr	r1, [sp, #0x20]
 8056f74: 9105         	str	r1, [sp, #0x14]
 8056f76: 980b         	ldr	r0, [sp, #0x2c]
 8056f78: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056f7c: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056f80: f240 114c    	movw	r1, #0x14c
 8056f84: f2c2 0100    	movt	r1, #0x2000
 8056f88: 4b11         	ldr	r3, [pc, #0x44]         @ 0x8056fd0 <uxTaskGetSystemState+0x158>
 8056f8a: 2203         	movs	r2, #0x3
 8056f8c: 4798         	blx	r3
 8056f8e: 4601         	mov	r1, r0
 8056f90: 9805         	ldr	r0, [sp, #0x14]
 8056f92: 4408         	add	r0, r1
 8056f94: 9008         	str	r0, [sp, #0x20]
;                     if( pulTotalRunTime != NULL )
 8056f96: 9809         	ldr	r0, [sp, #0x24]
 8056f98: b120         	cbz	r0, 0x8056fa4 <uxTaskGetSystemState+0x12c> @ imm = #0x8
 8056f9a: e7ff         	b	0x8056f9c <uxTaskGetSystemState+0x124> @ imm = #-0x2
;                         *pulTotalRunTime = 0;
 8056f9c: 9909         	ldr	r1, [sp, #0x24]
 8056f9e: 2000         	movs	r0, #0x0
 8056fa0: 6008         	str	r0, [r1]
;                     }
 8056fa2: e7ff         	b	0x8056fa4 <uxTaskGetSystemState+0x12c> @ imm = #-0x2
;             }
 8056fa4: e000         	b	0x8056fa8 <uxTaskGetSystemState+0x130> @ imm = #0x0
 8056fa6: e7ff         	b	0x8056fa8 <uxTaskGetSystemState+0x130> @ imm = #-0x2
;         ( void ) xTaskResumeAll();
 8056fa8: 480a         	ldr	r0, [pc, #0x28]         @ 0x8056fd4 <uxTaskGetSystemState+0x15c>
 8056faa: 4780         	blx	r0
;         return uxTask;
 8056fac: 9808         	ldr	r0, [sp, #0x20]
 8056fae: 9000         	str	r0, [sp]
 8056fb0: 4809         	ldr	r0, [pc, #0x24]         @ 0x8056fd8 <uxTaskGetSystemState+0x160>
 8056fb2: 4780         	blx	r0
 8056fb4: 9800         	ldr	r0, [sp]
 8056fb6: b00c         	add	sp, #0x30
 8056fb8: bdd0         	pop	{r4, r6, r7, pc}
 8056fba: bf00         	nop

08056fbc <$d.65>:
 8056fbc: b9 59 05 08  	.word	0x080559b9
 8056fc0: dd 6f 05 08  	.word	0x08056fdd
 8056fc4: dd 6f 05 08  	.word	0x08056fdd
 8056fc8: dd 6f 05 08  	.word	0x08056fdd
 8056fcc: dd 6f 05 08  	.word	0x08056fdd
 8056fd0: dd 6f 05 08  	.word	0x08056fdd
 8056fd4: 29 5b 05 08  	.word	0x08055b29
 8056fd8: 21 05 06 08  	.word	0x08060521

08056fdc <prvListTasksWithinSingleList>:
;     {
 8056fdc: b5d0         	push	{r4, r6, r7, lr}
 8056fde: af02         	add	r7, sp, #0x8
 8056fe0: b08a         	sub	sp, #0x28
 8056fe2: f643 5c40    	movw	r12, #0x3d40
 8056fe6: f2c2 0c00    	movt	r12, #0x2000
 8056fea: f8dc 3000    	ldr.w	r3, [r12]
 8056fee: f642 5440    	movw	r4, #0x2d40
 8056ff2: f2c2 0400    	movt	r4, #0x2000
 8056ff6: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8056ffa: 3301         	adds	r3, #0x1
 8056ffc: f8cc 3000    	str.w	r3, [r12]
 8057000: 9009         	str	r0, [sp, #0x24]
 8057002: 9108         	str	r1, [sp, #0x20]
 8057004: f807 2c11    	strb	r2, [r7, #-17]
 8057008: 2000         	movs	r0, #0x0
;         UBaseType_t uxTask = 0;
 805700a: 9004         	str	r0, [sp, #0x10]
;         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 805700c: 9808         	ldr	r0, [sp, #0x20]
 805700e: 6800         	ldr	r0, [r0]
 8057010: 2800         	cmp	r0, #0x0
 8057012: d044         	beq	0x805709e <prvListTasksWithinSingleList+0xc2> @ imm = #0x88
 8057014: e7ff         	b	0x8057016 <prvListTasksWithinSingleList+0x3a> @ imm = #-0x2
;             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057016: e7ff         	b	0x8057018 <prvListTasksWithinSingleList+0x3c> @ imm = #-0x2
 8057018: 9808         	ldr	r0, [sp, #0x20]
 805701a: 9003         	str	r0, [sp, #0xc]
 805701c: 9903         	ldr	r1, [sp, #0xc]
 805701e: 6848         	ldr	r0, [r1, #0x4]
 8057020: 6840         	ldr	r0, [r0, #0x4]
 8057022: 6048         	str	r0, [r1, #0x4]
 8057024: 9903         	ldr	r1, [sp, #0xc]
 8057026: 6848         	ldr	r0, [r1, #0x4]
 8057028: 3108         	adds	r1, #0x8
 805702a: 4288         	cmp	r0, r1
 805702c: d104         	bne	0x8057038 <prvListTasksWithinSingleList+0x5c> @ imm = #0x8
 805702e: e7ff         	b	0x8057030 <prvListTasksWithinSingleList+0x54> @ imm = #-0x2
 8057030: 9903         	ldr	r1, [sp, #0xc]
 8057032: 68c8         	ldr	r0, [r1, #0xc]
 8057034: 6048         	str	r0, [r1, #0x4]
 8057036: e7ff         	b	0x8057038 <prvListTasksWithinSingleList+0x5c> @ imm = #-0x2
 8057038: 9803         	ldr	r0, [sp, #0xc]
 805703a: 6840         	ldr	r0, [r0, #0x4]
 805703c: 68c0         	ldr	r0, [r0, #0xc]
 805703e: 9005         	str	r0, [sp, #0x14]
 8057040: e7ff         	b	0x8057042 <prvListTasksWithinSingleList+0x66> @ imm = #-0x2
;             do
 8057042: e7ff         	b	0x8057044 <prvListTasksWithinSingleList+0x68> @ imm = #-0x2
;                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057044: e7ff         	b	0x8057046 <prvListTasksWithinSingleList+0x6a> @ imm = #-0x2
 8057046: 9808         	ldr	r0, [sp, #0x20]
 8057048: 9002         	str	r0, [sp, #0x8]
 805704a: 9902         	ldr	r1, [sp, #0x8]
 805704c: 6848         	ldr	r0, [r1, #0x4]
 805704e: 6840         	ldr	r0, [r0, #0x4]
 8057050: 6048         	str	r0, [r1, #0x4]
 8057052: 9902         	ldr	r1, [sp, #0x8]
 8057054: 6848         	ldr	r0, [r1, #0x4]
 8057056: 3108         	adds	r1, #0x8
 8057058: 4288         	cmp	r0, r1
 805705a: d104         	bne	0x8057066 <prvListTasksWithinSingleList+0x8a> @ imm = #0x8
 805705c: e7ff         	b	0x805705e <prvListTasksWithinSingleList+0x82> @ imm = #-0x2
 805705e: 9902         	ldr	r1, [sp, #0x8]
 8057060: 68c8         	ldr	r0, [r1, #0xc]
 8057062: 6048         	str	r0, [r1, #0x4]
 8057064: e7ff         	b	0x8057066 <prvListTasksWithinSingleList+0x8a> @ imm = #-0x2
 8057066: 9802         	ldr	r0, [sp, #0x8]
 8057068: 6840         	ldr	r0, [r0, #0x4]
 805706a: 68c0         	ldr	r0, [r0, #0xc]
 805706c: 9006         	str	r0, [sp, #0x18]
 805706e: e7ff         	b	0x8057070 <prvListTasksWithinSingleList+0x94> @ imm = #-0x2
;                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8057070: 9806         	ldr	r0, [sp, #0x18]
 8057072: 9909         	ldr	r1, [sp, #0x24]
 8057074: 9a04         	ldr	r2, [sp, #0x10]
 8057076: eb02 02c2    	add.w	r2, r2, r2, lsl #3
 805707a: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805707e: f817 3c11    	ldrb	r3, [r7, #-17]
 8057082: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x80570b0 <prvListTasksWithinSingleList+0xd4>
 8057086: 2201         	movs	r2, #0x1
 8057088: 47e0         	blx	r12
;                 uxTask++;
 805708a: 9804         	ldr	r0, [sp, #0x10]
 805708c: 3001         	adds	r0, #0x1
 805708e: 9004         	str	r0, [sp, #0x10]
;             } while( pxNextTCB != pxFirstTCB );
 8057090: e7ff         	b	0x8057092 <prvListTasksWithinSingleList+0xb6> @ imm = #-0x2
 8057092: 9806         	ldr	r0, [sp, #0x18]
 8057094: 9905         	ldr	r1, [sp, #0x14]
 8057096: 4288         	cmp	r0, r1
 8057098: d1d4         	bne	0x8057044 <prvListTasksWithinSingleList+0x68> @ imm = #-0x58
 805709a: e7ff         	b	0x805709c <prvListTasksWithinSingleList+0xc0> @ imm = #-0x2
;         }
 805709c: e000         	b	0x80570a0 <prvListTasksWithinSingleList+0xc4> @ imm = #0x0
 805709e: e7ff         	b	0x80570a0 <prvListTasksWithinSingleList+0xc4> @ imm = #-0x2
;         return uxTask;
 80570a0: 9804         	ldr	r0, [sp, #0x10]
 80570a2: 9001         	str	r0, [sp, #0x4]
 80570a4: 4803         	ldr	r0, [pc, #0xc]          @ 0x80570b4 <prvListTasksWithinSingleList+0xd8>
 80570a6: 4780         	blx	r0
 80570a8: 9801         	ldr	r0, [sp, #0x4]
 80570aa: b00a         	add	sp, #0x28
 80570ac: bdd0         	pop	{r4, r6, r7, pc}
 80570ae: bf00         	nop

080570b0 <$d.67>:
 80570b0: a5 79 05 08  	.word	0x080579a5
 80570b4: 21 05 06 08  	.word	0x08060521

080570b8 <xTaskCatchUpTicks>:
; {
 80570b8: b580         	push	{r7, lr}
 80570ba: 466f         	mov	r7, sp
 80570bc: b084         	sub	sp, #0x10
 80570be: f643 5240    	movw	r2, #0x3d40
 80570c2: f2c2 0200    	movt	r2, #0x2000
 80570c6: 6811         	ldr	r1, [r2]
 80570c8: f642 5340    	movw	r3, #0x2d40
 80570cc: f2c2 0300    	movt	r3, #0x2000
 80570d0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80570d4: 3101         	adds	r1, #0x1
 80570d6: 6011         	str	r1, [r2]
 80570d8: 9003         	str	r0, [sp, #0xc]
;     configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 80570da: f240 1028    	movw	r0, #0x128
 80570de: f2c2 0000    	movt	r0, #0x2000
 80570e2: 6800         	ldr	r0, [r0]
 80570e4: b120         	cbz	r0, 0x80570f0 <xTaskCatchUpTicks+0x38> @ imm = #0x8
 80570e6: e7ff         	b	0x80570e8 <xTaskCatchUpTicks+0x30> @ imm = #-0x2
 80570e8: 4812         	ldr	r0, [pc, #0x48]         @ 0x8057134 <xTaskCatchUpTicks+0x7c>
 80570ea: 4780         	blx	r0
 80570ec: e7ff         	b	0x80570ee <xTaskCatchUpTicks+0x36> @ imm = #-0x2
 80570ee: e7fe         	b	0x80570ee <xTaskCatchUpTicks+0x36> @ imm = #-0x4
;     vTaskSuspendAll();
 80570f0: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8057120 <xTaskCatchUpTicks+0x68>
 80570f2: 4780         	blx	r0
;     taskENTER_CRITICAL();
 80570f4: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8057124 <xTaskCatchUpTicks+0x6c>
 80570f6: 4780         	blx	r0
;         xPendedTicks += xTicksToCatchUp;
 80570f8: 9a03         	ldr	r2, [sp, #0xc]
 80570fa: f240 21b0    	movw	r1, #0x2b0
 80570fe: f2c2 0100    	movt	r1, #0x2000
 8057102: 6808         	ldr	r0, [r1]
 8057104: 4410         	add	r0, r2
 8057106: 6008         	str	r0, [r1]
;     taskEXIT_CRITICAL();
 8057108: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8057128 <xTaskCatchUpTicks+0x70>
 805710a: 4780         	blx	r0
;     xYieldOccurred = xTaskResumeAll();
 805710c: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805712c <xTaskCatchUpTicks+0x74>
 805710e: 4780         	blx	r0
 8057110: 9002         	str	r0, [sp, #0x8]
;     return xYieldOccurred;
 8057112: 9802         	ldr	r0, [sp, #0x8]
 8057114: 9001         	str	r0, [sp, #0x4]
 8057116: 4806         	ldr	r0, [pc, #0x18]         @ 0x8057130 <xTaskCatchUpTicks+0x78>
 8057118: 4780         	blx	r0
 805711a: 9801         	ldr	r0, [sp, #0x4]
 805711c: b004         	add	sp, #0x10
 805711e: bd80         	pop	{r7, pc}

08057120 <$d.69>:
 8057120: b9 59 05 08  	.word	0x080559b9
 8057124: 05 e1 05 08  	.word	0x0805e105
 8057128: 4d e1 05 08  	.word	0x0805e14d
 805712c: 29 5b 05 08  	.word	0x08055b29
 8057130: 21 05 06 08  	.word	0x08060521
 8057134: 55 ec 05 08  	.word	0x0805ec55

08057138 <vTaskPlaceOnEventList>:
; {
 8057138: b580         	push	{r7, lr}
 805713a: 466f         	mov	r7, sp
 805713c: b082         	sub	sp, #0x8
 805713e: f643 5340    	movw	r3, #0x3d40
 8057142: f2c2 0300    	movt	r3, #0x2000
 8057146: 681a         	ldr	r2, [r3]
 8057148: f642 5c40    	movw	r12, #0x2d40
 805714c: f2c2 0c00    	movt	r12, #0x2000
 8057150: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8057154: 3201         	adds	r2, #0x1
 8057156: 601a         	str	r2, [r3]
 8057158: 9001         	str	r0, [sp, #0x4]
 805715a: 9100         	str	r1, [sp]
;     configASSERT( pxEventList );
 805715c: 9801         	ldr	r0, [sp, #0x4]
 805715e: b920         	cbnz	r0, 0x805716a <vTaskPlaceOnEventList+0x32> @ imm = #0x8
 8057160: e7ff         	b	0x8057162 <vTaskPlaceOnEventList+0x2a> @ imm = #-0x2
 8057162: 480d         	ldr	r0, [pc, #0x34]         @ 0x8057198 <vTaskPlaceOnEventList+0x60>
 8057164: 4780         	blx	r0
 8057166: e7ff         	b	0x8057168 <vTaskPlaceOnEventList+0x30> @ imm = #-0x2
 8057168: e7fe         	b	0x8057168 <vTaskPlaceOnEventList+0x30> @ imm = #-0x4
;     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 805716a: 9801         	ldr	r0, [sp, #0x4]
 805716c: f240 1100    	movw	r1, #0x100
 8057170: f2c2 0100    	movt	r1, #0x2000
 8057174: 6809         	ldr	r1, [r1]
 8057176: 3194         	adds	r1, #0x94
 8057178: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805718c <vTaskPlaceOnEventList+0x54>
 805717a: 4790         	blx	r2
;     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 805717c: 9800         	ldr	r0, [sp]
 805717e: 4a04         	ldr	r2, [pc, #0x10]         @ 0x8057190 <vTaskPlaceOnEventList+0x58>
 8057180: 2101         	movs	r1, #0x1
 8057182: 4790         	blx	r2
; }
 8057184: 4803         	ldr	r0, [pc, #0xc]          @ 0x8057194 <vTaskPlaceOnEventList+0x5c>
 8057186: 4780         	blx	r0
 8057188: b002         	add	sp, #0x8
 805718a: bd80         	pop	{r7, pc}

0805718c <$d.71>:
 805718c: 39 b1 05 08  	.word	0x0805b139
 8057190: f1 59 05 08  	.word	0x080559f1
 8057194: 21 05 06 08  	.word	0x08060521
 8057198: 55 ec 05 08  	.word	0x0805ec55

0805719c <vTaskPlaceOnUnorderedEventList>:
; {
 805719c: b5d0         	push	{r4, r6, r7, lr}
 805719e: af02         	add	r7, sp, #0x8
 80571a0: b084         	sub	sp, #0x10
 80571a2: f643 5c40    	movw	r12, #0x3d40
 80571a6: f2c2 0c00    	movt	r12, #0x2000
 80571aa: f8dc 3000    	ldr.w	r3, [r12]
 80571ae: f642 5440    	movw	r4, #0x2d40
 80571b2: f2c2 0400    	movt	r4, #0x2000
 80571b6: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 80571ba: 3301         	adds	r3, #0x1
 80571bc: f8cc 3000    	str.w	r3, [r12]
 80571c0: 9003         	str	r0, [sp, #0xc]
 80571c2: 9102         	str	r1, [sp, #0x8]
 80571c4: 9201         	str	r2, [sp, #0x4]
;     configASSERT( pxEventList );
 80571c6: 9803         	ldr	r0, [sp, #0xc]
 80571c8: b920         	cbnz	r0, 0x80571d4 <vTaskPlaceOnUnorderedEventList+0x38> @ imm = #0x8
 80571ca: e7ff         	b	0x80571cc <vTaskPlaceOnUnorderedEventList+0x30> @ imm = #-0x2
 80571cc: 4824         	ldr	r0, [pc, #0x90]         @ 0x8057260 <vTaskPlaceOnUnorderedEventList+0xc4>
 80571ce: 4780         	blx	r0
 80571d0: e7ff         	b	0x80571d2 <vTaskPlaceOnUnorderedEventList+0x36> @ imm = #-0x2
 80571d2: e7fe         	b	0x80571d2 <vTaskPlaceOnUnorderedEventList+0x36> @ imm = #-0x4
;     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80571d4: f240 1028    	movw	r0, #0x128
 80571d8: f2c2 0000    	movt	r0, #0x2000
 80571dc: 6800         	ldr	r0, [r0]
 80571de: b920         	cbnz	r0, 0x80571ea <vTaskPlaceOnUnorderedEventList+0x4e> @ imm = #0x8
 80571e0: e7ff         	b	0x80571e2 <vTaskPlaceOnUnorderedEventList+0x46> @ imm = #-0x2
 80571e2: 481e         	ldr	r0, [pc, #0x78]         @ 0x805725c <vTaskPlaceOnUnorderedEventList+0xc0>
 80571e4: 4780         	blx	r0
 80571e6: e7ff         	b	0x80571e8 <vTaskPlaceOnUnorderedEventList+0x4c> @ imm = #-0x2
 80571e8: e7fe         	b	0x80571e8 <vTaskPlaceOnUnorderedEventList+0x4c> @ imm = #-0x4
;     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80571ea: 9802         	ldr	r0, [sp, #0x8]
 80571ec: f040 4000    	orr	r0, r0, #0x80000000
 80571f0: f240 1100    	movw	r1, #0x100
 80571f4: f2c2 0100    	movt	r1, #0x2000
 80571f8: 6809         	ldr	r1, [r1]
 80571fa: f8c1 0094    	str.w	r0, [r1, #0x94]
;     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80571fe: e7ff         	b	0x8057200 <vTaskPlaceOnUnorderedEventList+0x64> @ imm = #-0x2
 8057200: 9803         	ldr	r0, [sp, #0xc]
 8057202: 6840         	ldr	r0, [r0, #0x4]
 8057204: 9000         	str	r0, [sp]
 8057206: 9800         	ldr	r0, [sp]
 8057208: f240 1100    	movw	r1, #0x100
 805720c: f2c2 0100    	movt	r1, #0x2000
 8057210: 680a         	ldr	r2, [r1]
 8057212: f8c2 0098    	str.w	r0, [r2, #0x98]
 8057216: 9800         	ldr	r0, [sp]
 8057218: 6880         	ldr	r0, [r0, #0x8]
 805721a: 680a         	ldr	r2, [r1]
 805721c: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8057220: 6808         	ldr	r0, [r1]
 8057222: 3094         	adds	r0, #0x94
 8057224: 9a00         	ldr	r2, [sp]
 8057226: 6892         	ldr	r2, [r2, #0x8]
 8057228: 6050         	str	r0, [r2, #0x4]
 805722a: 6808         	ldr	r0, [r1]
 805722c: 3094         	adds	r0, #0x94
 805722e: 9a00         	ldr	r2, [sp]
 8057230: 6090         	str	r0, [r2, #0x8]
 8057232: 9803         	ldr	r0, [sp, #0xc]
 8057234: 6809         	ldr	r1, [r1]
 8057236: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 805723a: 9903         	ldr	r1, [sp, #0xc]
 805723c: 6808         	ldr	r0, [r1]
 805723e: 3001         	adds	r0, #0x1
 8057240: 6008         	str	r0, [r1]
 8057242: e7ff         	b	0x8057244 <vTaskPlaceOnUnorderedEventList+0xa8> @ imm = #-0x2
;     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8057244: 9801         	ldr	r0, [sp, #0x4]
 8057246: 4a03         	ldr	r2, [pc, #0xc]          @ 0x8057254 <vTaskPlaceOnUnorderedEventList+0xb8>
 8057248: 2101         	movs	r1, #0x1
 805724a: 4790         	blx	r2
; }
 805724c: 4802         	ldr	r0, [pc, #0x8]          @ 0x8057258 <vTaskPlaceOnUnorderedEventList+0xbc>
 805724e: 4780         	blx	r0
 8057250: b004         	add	sp, #0x10
 8057252: bdd0         	pop	{r4, r6, r7, pc}

08057254 <$d.73>:
 8057254: f1 59 05 08  	.word	0x080559f1
 8057258: 21 05 06 08  	.word	0x08060521
 805725c: 55 ec 05 08  	.word	0x0805ec55
 8057260: 55 ec 05 08  	.word	0x0805ec55

08057264 <vTaskPlaceOnEventListRestricted>:
;     {
 8057264: b5d0         	push	{r4, r6, r7, lr}
 8057266: af02         	add	r7, sp, #0x8
 8057268: b084         	sub	sp, #0x10
 805726a: f643 5c40    	movw	r12, #0x3d40
 805726e: f2c2 0c00    	movt	r12, #0x2000
 8057272: f8dc 3000    	ldr.w	r3, [r12]
 8057276: f642 5440    	movw	r4, #0x2d40
 805727a: f2c2 0400    	movt	r4, #0x2000
 805727e: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8057282: 3301         	adds	r3, #0x1
 8057284: f8cc 3000    	str.w	r3, [r12]
 8057288: 9003         	str	r0, [sp, #0xc]
 805728a: 9102         	str	r1, [sp, #0x8]
 805728c: 9201         	str	r2, [sp, #0x4]
;         configASSERT( pxEventList );
 805728e: 9803         	ldr	r0, [sp, #0xc]
 8057290: b920         	cbnz	r0, 0x805729c <vTaskPlaceOnEventListRestricted+0x38> @ imm = #0x8
 8057292: e7ff         	b	0x8057294 <vTaskPlaceOnEventListRestricted+0x30> @ imm = #-0x2
 8057294: 481c         	ldr	r0, [pc, #0x70]         @ 0x8057308 <vTaskPlaceOnEventListRestricted+0xa4>
 8057296: 4780         	blx	r0
 8057298: e7ff         	b	0x805729a <vTaskPlaceOnEventListRestricted+0x36> @ imm = #-0x2
 805729a: e7fe         	b	0x805729a <vTaskPlaceOnEventListRestricted+0x36> @ imm = #-0x4
;         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 805729c: e7ff         	b	0x805729e <vTaskPlaceOnEventListRestricted+0x3a> @ imm = #-0x2
 805729e: 9803         	ldr	r0, [sp, #0xc]
 80572a0: 6840         	ldr	r0, [r0, #0x4]
 80572a2: 9000         	str	r0, [sp]
 80572a4: 9800         	ldr	r0, [sp]
 80572a6: f240 1100    	movw	r1, #0x100
 80572aa: f2c2 0100    	movt	r1, #0x2000
 80572ae: 680a         	ldr	r2, [r1]
 80572b0: f8c2 0098    	str.w	r0, [r2, #0x98]
 80572b4: 9800         	ldr	r0, [sp]
 80572b6: 6880         	ldr	r0, [r0, #0x8]
 80572b8: 680a         	ldr	r2, [r1]
 80572ba: f8c2 009c    	str.w	r0, [r2, #0x9c]
 80572be: 6808         	ldr	r0, [r1]
 80572c0: 3094         	adds	r0, #0x94
 80572c2: 9a00         	ldr	r2, [sp]
 80572c4: 6892         	ldr	r2, [r2, #0x8]
 80572c6: 6050         	str	r0, [r2, #0x4]
 80572c8: 6808         	ldr	r0, [r1]
 80572ca: 3094         	adds	r0, #0x94
 80572cc: 9a00         	ldr	r2, [sp]
 80572ce: 6090         	str	r0, [r2, #0x8]
 80572d0: 9803         	ldr	r0, [sp, #0xc]
 80572d2: 6809         	ldr	r1, [r1]
 80572d4: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 80572d8: 9903         	ldr	r1, [sp, #0xc]
 80572da: 6808         	ldr	r0, [r1]
 80572dc: 3001         	adds	r0, #0x1
 80572de: 6008         	str	r0, [r1]
 80572e0: e7ff         	b	0x80572e2 <vTaskPlaceOnEventListRestricted+0x7e> @ imm = #-0x2
;         if( xWaitIndefinitely != pdFALSE )
 80572e2: 9801         	ldr	r0, [sp, #0x4]
 80572e4: b120         	cbz	r0, 0x80572f0 <vTaskPlaceOnEventListRestricted+0x8c> @ imm = #0x8
 80572e6: e7ff         	b	0x80572e8 <vTaskPlaceOnEventListRestricted+0x84> @ imm = #-0x2
 80572e8: f04f 30ff    	mov.w	r0, #0xffffffff
;             xTicksToWait = portMAX_DELAY;
 80572ec: 9002         	str	r0, [sp, #0x8]
;         }
 80572ee: e7ff         	b	0x80572f0 <vTaskPlaceOnEventListRestricted+0x8c> @ imm = #-0x2
;         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80572f0: 9802         	ldr	r0, [sp, #0x8]
 80572f2: 9901         	ldr	r1, [sp, #0x4]
 80572f4: 4a02         	ldr	r2, [pc, #0x8]          @ 0x8057300 <vTaskPlaceOnEventListRestricted+0x9c>
 80572f6: 4790         	blx	r2
;     }
 80572f8: 4802         	ldr	r0, [pc, #0x8]          @ 0x8057304 <vTaskPlaceOnEventListRestricted+0xa0>
 80572fa: 4780         	blx	r0
 80572fc: b004         	add	sp, #0x10
 80572fe: bdd0         	pop	{r4, r6, r7, pc}

08057300 <$d.75>:
 8057300: f1 59 05 08  	.word	0x080559f1
 8057304: 21 05 06 08  	.word	0x08060521
 8057308: 55 ec 05 08  	.word	0x0805ec55

0805730c <xTaskRemoveFromEventList>:
; {
 805730c: b580         	push	{r7, lr}
 805730e: 466f         	mov	r7, sp
 8057310: b088         	sub	sp, #0x20
 8057312: f643 5240    	movw	r2, #0x3d40
 8057316: f2c2 0200    	movt	r2, #0x2000
 805731a: 6811         	ldr	r1, [r2]
 805731c: f642 5340    	movw	r3, #0x2d40
 8057320: f2c2 0300    	movt	r3, #0x2000
 8057324: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8057328: 3101         	adds	r1, #0x1
 805732a: 6011         	str	r1, [r2]
 805732c: 9007         	str	r0, [sp, #0x1c]
;     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 805732e: 9807         	ldr	r0, [sp, #0x1c]
 8057330: 68c0         	ldr	r0, [r0, #0xc]
 8057332: 68c0         	ldr	r0, [r0, #0xc]
 8057334: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pxUnblockedTCB );
 8057336: 9806         	ldr	r0, [sp, #0x18]
 8057338: b920         	cbnz	r0, 0x8057344 <xTaskRemoveFromEventList+0x38> @ imm = #0x8
 805733a: e7ff         	b	0x805733c <xTaskRemoveFromEventList+0x30> @ imm = #-0x2
 805733c: 4874         	ldr	r0, [pc, #0x1d0]        @ 0x8057510 <xTaskRemoveFromEventList+0x204>
 805733e: 4780         	blx	r0
 8057340: e7ff         	b	0x8057342 <xTaskRemoveFromEventList+0x36> @ imm = #-0x2
 8057342: e7fe         	b	0x8057342 <xTaskRemoveFromEventList+0x36> @ imm = #-0x4
;     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8057344: e7ff         	b	0x8057346 <xTaskRemoveFromEventList+0x3a> @ imm = #-0x2
 8057346: 9806         	ldr	r0, [sp, #0x18]
 8057348: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 805734c: 9004         	str	r0, [sp, #0x10]
 805734e: 9806         	ldr	r0, [sp, #0x18]
 8057350: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8057354: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8057358: 6088         	str	r0, [r1, #0x8]
 805735a: 9906         	ldr	r1, [sp, #0x18]
 805735c: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8057360: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8057364: 6048         	str	r0, [r1, #0x4]
 8057366: 9804         	ldr	r0, [sp, #0x10]
 8057368: 6840         	ldr	r0, [r0, #0x4]
 805736a: 9906         	ldr	r1, [sp, #0x18]
 805736c: 3194         	adds	r1, #0x94
 805736e: 4288         	cmp	r0, r1
 8057370: d106         	bne	0x8057380 <xTaskRemoveFromEventList+0x74> @ imm = #0xc
 8057372: e7ff         	b	0x8057374 <xTaskRemoveFromEventList+0x68> @ imm = #-0x2
 8057374: 9806         	ldr	r0, [sp, #0x18]
 8057376: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 805737a: 9904         	ldr	r1, [sp, #0x10]
 805737c: 6048         	str	r0, [r1, #0x4]
 805737e: e7ff         	b	0x8057380 <xTaskRemoveFromEventList+0x74> @ imm = #-0x2
 8057380: 9906         	ldr	r1, [sp, #0x18]
 8057382: 2000         	movs	r0, #0x0
 8057384: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8057388: 9904         	ldr	r1, [sp, #0x10]
 805738a: 6808         	ldr	r0, [r1]
 805738c: 3801         	subs	r0, #0x1
 805738e: 6008         	str	r0, [r1]
 8057390: e7ff         	b	0x8057392 <xTaskRemoveFromEventList+0x86> @ imm = #-0x2
;     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8057392: f240 1028    	movw	r0, #0x128
 8057396: f2c2 0000    	movt	r0, #0x2000
 805739a: 6800         	ldr	r0, [r0]
 805739c: 2800         	cmp	r0, #0x0
 805739e: d174         	bne	0x805748a <xTaskRemoveFromEventList+0x17e> @ imm = #0xe8
 80573a0: e7ff         	b	0x80573a2 <xTaskRemoveFromEventList+0x96> @ imm = #-0x2
;         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80573a2: e7ff         	b	0x80573a4 <xTaskRemoveFromEventList+0x98> @ imm = #-0x2
 80573a4: 9806         	ldr	r0, [sp, #0x18]
 80573a6: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80573aa: 9003         	str	r0, [sp, #0xc]
 80573ac: 9806         	ldr	r0, [sp, #0x18]
 80573ae: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 80573b2: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80573b6: 6088         	str	r0, [r1, #0x8]
 80573b8: 9906         	ldr	r1, [sp, #0x18]
 80573ba: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 80573be: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 80573c2: 6048         	str	r0, [r1, #0x4]
 80573c4: 9803         	ldr	r0, [sp, #0xc]
 80573c6: 6840         	ldr	r0, [r0, #0x4]
 80573c8: 9906         	ldr	r1, [sp, #0x18]
 80573ca: 3180         	adds	r1, #0x80
 80573cc: 4288         	cmp	r0, r1
 80573ce: d106         	bne	0x80573de <xTaskRemoveFromEventList+0xd2> @ imm = #0xc
 80573d0: e7ff         	b	0x80573d2 <xTaskRemoveFromEventList+0xc6> @ imm = #-0x2
 80573d2: 9806         	ldr	r0, [sp, #0x18]
 80573d4: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80573d8: 9903         	ldr	r1, [sp, #0xc]
 80573da: 6048         	str	r0, [r1, #0x4]
 80573dc: e7ff         	b	0x80573de <xTaskRemoveFromEventList+0xd2> @ imm = #-0x2
 80573de: 9906         	ldr	r1, [sp, #0x18]
 80573e0: 2000         	movs	r0, #0x0
 80573e2: f8c1 0090    	str.w	r0, [r1, #0x90]
 80573e6: 9903         	ldr	r1, [sp, #0xc]
 80573e8: 6808         	ldr	r0, [r1]
 80573ea: 3801         	subs	r0, #0x1
 80573ec: 6008         	str	r0, [r1]
 80573ee: e7ff         	b	0x80573f0 <xTaskRemoveFromEventList+0xe4> @ imm = #-0x2
;         prvAddTaskToReadyList( pxUnblockedTCB );
 80573f0: e7ff         	b	0x80573f2 <xTaskRemoveFromEventList+0xe6> @ imm = #-0x2
 80573f2: e7ff         	b	0x80573f4 <xTaskRemoveFromEventList+0xe8> @ imm = #-0x2
 80573f4: 9806         	ldr	r0, [sp, #0x18]
 80573f6: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80573fa: f240 21a0    	movw	r1, #0x2a0
 80573fe: f2c2 0100    	movt	r1, #0x2000
 8057402: 6809         	ldr	r1, [r1]
 8057404: 4288         	cmp	r0, r1
 8057406: d909         	bls	0x805741c <xTaskRemoveFromEventList+0x110> @ imm = #0x12
 8057408: e7ff         	b	0x805740a <xTaskRemoveFromEventList+0xfe> @ imm = #-0x2
 805740a: 9806         	ldr	r0, [sp, #0x18]
 805740c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057410: f240 21a0    	movw	r1, #0x2a0
 8057414: f2c2 0100    	movt	r1, #0x2000
 8057418: 6008         	str	r0, [r1]
 805741a: e7ff         	b	0x805741c <xTaskRemoveFromEventList+0x110> @ imm = #-0x2
 805741c: e7ff         	b	0x805741e <xTaskRemoveFromEventList+0x112> @ imm = #-0x2
 805741e: e7ff         	b	0x8057420 <xTaskRemoveFromEventList+0x114> @ imm = #-0x2
 8057420: 9806         	ldr	r0, [sp, #0x18]
 8057422: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057426: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805742a: f240 1160    	movw	r1, #0x160
 805742e: f2c2 0100    	movt	r1, #0x2000
 8057432: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057436: 6840         	ldr	r0, [r0, #0x4]
 8057438: 9002         	str	r0, [sp, #0x8]
 805743a: 9802         	ldr	r0, [sp, #0x8]
 805743c: 9a06         	ldr	r2, [sp, #0x18]
 805743e: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057442: 9802         	ldr	r0, [sp, #0x8]
 8057444: 6880         	ldr	r0, [r0, #0x8]
 8057446: 9a06         	ldr	r2, [sp, #0x18]
 8057448: f8c2 0088    	str.w	r0, [r2, #0x88]
 805744c: 9806         	ldr	r0, [sp, #0x18]
 805744e: 3080         	adds	r0, #0x80
 8057450: 9a02         	ldr	r2, [sp, #0x8]
 8057452: 6892         	ldr	r2, [r2, #0x8]
 8057454: 6050         	str	r0, [r2, #0x4]
 8057456: 9806         	ldr	r0, [sp, #0x18]
 8057458: 3080         	adds	r0, #0x80
 805745a: 9a02         	ldr	r2, [sp, #0x8]
 805745c: 6090         	str	r0, [r2, #0x8]
 805745e: 9a06         	ldr	r2, [sp, #0x18]
 8057460: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057464: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057468: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805746c: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057470: 9806         	ldr	r0, [sp, #0x18]
 8057472: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057476: eb00 0280    	add.w	r2, r0, r0, lsl #2
 805747a: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 805747e: 3001         	adds	r0, #0x1
 8057480: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057484: e7ff         	b	0x8057486 <xTaskRemoveFromEventList+0x17a> @ imm = #-0x2
 8057486: e7ff         	b	0x8057488 <xTaskRemoveFromEventList+0x17c> @ imm = #-0x2
;     }
 8057488: e020         	b	0x80574cc <xTaskRemoveFromEventList+0x1c0> @ imm = #0x40
;         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 805748a: e7ff         	b	0x805748c <xTaskRemoveFromEventList+0x180> @ imm = #-0x2
 805748c: f240 1138    	movw	r1, #0x138
 8057490: f2c2 0100    	movt	r1, #0x2000
 8057494: 6848         	ldr	r0, [r1, #0x4]
 8057496: 9001         	str	r0, [sp, #0x4]
 8057498: 9801         	ldr	r0, [sp, #0x4]
 805749a: 9a06         	ldr	r2, [sp, #0x18]
 805749c: f8c2 0098    	str.w	r0, [r2, #0x98]
 80574a0: 9801         	ldr	r0, [sp, #0x4]
 80574a2: 6880         	ldr	r0, [r0, #0x8]
 80574a4: 9a06         	ldr	r2, [sp, #0x18]
 80574a6: f8c2 009c    	str.w	r0, [r2, #0x9c]
 80574aa: 9806         	ldr	r0, [sp, #0x18]
 80574ac: 3094         	adds	r0, #0x94
 80574ae: 9a01         	ldr	r2, [sp, #0x4]
 80574b0: 6892         	ldr	r2, [r2, #0x8]
 80574b2: 6050         	str	r0, [r2, #0x4]
 80574b4: 9806         	ldr	r0, [sp, #0x18]
 80574b6: 3094         	adds	r0, #0x94
 80574b8: 9a01         	ldr	r2, [sp, #0x4]
 80574ba: 6090         	str	r0, [r2, #0x8]
 80574bc: 9806         	ldr	r0, [sp, #0x18]
 80574be: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 80574c2: 6808         	ldr	r0, [r1]
 80574c4: 3001         	adds	r0, #0x1
 80574c6: 6008         	str	r0, [r1]
 80574c8: e7ff         	b	0x80574ca <xTaskRemoveFromEventList+0x1be> @ imm = #-0x2
 80574ca: e7ff         	b	0x80574cc <xTaskRemoveFromEventList+0x1c0> @ imm = #-0x2
;         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80574cc: 9806         	ldr	r0, [sp, #0x18]
 80574ce: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80574d2: f240 1100    	movw	r1, #0x100
 80574d6: f2c2 0100    	movt	r1, #0x2000
 80574da: 6809         	ldr	r1, [r1]
 80574dc: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80574e0: 4288         	cmp	r0, r1
 80574e2: d908         	bls	0x80574f6 <xTaskRemoveFromEventList+0x1ea> @ imm = #0x10
 80574e4: e7ff         	b	0x80574e6 <xTaskRemoveFromEventList+0x1da> @ imm = #-0x2
 80574e6: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 80574e8: 9005         	str	r0, [sp, #0x14]
;             xYieldPendings[ 0 ] = pdTRUE;
 80574ea: f240 21a4    	movw	r1, #0x2a4
 80574ee: f2c2 0100    	movt	r1, #0x2000
 80574f2: 6008         	str	r0, [r1]
;         }
 80574f4: e002         	b	0x80574fc <xTaskRemoveFromEventList+0x1f0> @ imm = #0x4
 80574f6: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 80574f8: 9005         	str	r0, [sp, #0x14]
 80574fa: e7ff         	b	0x80574fc <xTaskRemoveFromEventList+0x1f0> @ imm = #-0x2
;     return xReturn;
 80574fc: 9805         	ldr	r0, [sp, #0x14]
 80574fe: 9000         	str	r0, [sp]
 8057500: 4802         	ldr	r0, [pc, #0x8]          @ 0x805750c <xTaskRemoveFromEventList+0x200>
 8057502: 4780         	blx	r0
 8057504: 9800         	ldr	r0, [sp]
 8057506: b008         	add	sp, #0x20
 8057508: bd80         	pop	{r7, pc}
 805750a: bf00         	nop

0805750c <$d.77>:
 805750c: 21 05 06 08  	.word	0x08060521
 8057510: 55 ec 05 08  	.word	0x0805ec55

08057514 <vTaskRemoveFromUnorderedEventList>:
; {
 8057514: b580         	push	{r7, lr}
 8057516: 466f         	mov	r7, sp
 8057518: b086         	sub	sp, #0x18
 805751a: f643 5340    	movw	r3, #0x3d40
 805751e: f2c2 0300    	movt	r3, #0x2000
 8057522: 681a         	ldr	r2, [r3]
 8057524: f642 5c40    	movw	r12, #0x2d40
 8057528: f2c2 0c00    	movt	r12, #0x2000
 805752c: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8057530: 3201         	adds	r2, #0x1
 8057532: 601a         	str	r2, [r3]
 8057534: 9005         	str	r0, [sp, #0x14]
 8057536: 9104         	str	r1, [sp, #0x10]
;     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8057538: f240 1028    	movw	r0, #0x128
 805753c: f2c2 0000    	movt	r0, #0x2000
 8057540: 6800         	ldr	r0, [r0]
 8057542: b920         	cbnz	r0, 0x805754e <vTaskRemoveFromUnorderedEventList+0x3a> @ imm = #0x8
 8057544: e7ff         	b	0x8057546 <vTaskRemoveFromUnorderedEventList+0x32> @ imm = #-0x2
 8057546: 4860         	ldr	r0, [pc, #0x180]        @ 0x80576c8 <vTaskRemoveFromUnorderedEventList+0x1b4>
 8057548: 4780         	blx	r0
 805754a: e7ff         	b	0x805754c <vTaskRemoveFromUnorderedEventList+0x38> @ imm = #-0x2
 805754c: e7fe         	b	0x805754c <vTaskRemoveFromUnorderedEventList+0x38> @ imm = #-0x4
;     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 805754e: 9804         	ldr	r0, [sp, #0x10]
 8057550: f040 4000    	orr	r0, r0, #0x80000000
 8057554: 9905         	ldr	r1, [sp, #0x14]
 8057556: 6008         	str	r0, [r1]
;     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057558: 9805         	ldr	r0, [sp, #0x14]
 805755a: 68c0         	ldr	r0, [r0, #0xc]
 805755c: 9003         	str	r0, [sp, #0xc]
;     configASSERT( pxUnblockedTCB );
 805755e: 9803         	ldr	r0, [sp, #0xc]
 8057560: b920         	cbnz	r0, 0x805756c <vTaskRemoveFromUnorderedEventList+0x58> @ imm = #0x8
 8057562: e7ff         	b	0x8057564 <vTaskRemoveFromUnorderedEventList+0x50> @ imm = #-0x2
 8057564: 4857         	ldr	r0, [pc, #0x15c]        @ 0x80576c4 <vTaskRemoveFromUnorderedEventList+0x1b0>
 8057566: 4780         	blx	r0
 8057568: e7ff         	b	0x805756a <vTaskRemoveFromUnorderedEventList+0x56> @ imm = #-0x2
 805756a: e7fe         	b	0x805756a <vTaskRemoveFromUnorderedEventList+0x56> @ imm = #-0x4
;     listREMOVE_ITEM( pxEventListItem );
 805756c: e7ff         	b	0x805756e <vTaskRemoveFromUnorderedEventList+0x5a> @ imm = #-0x2
 805756e: 9805         	ldr	r0, [sp, #0x14]
 8057570: 6900         	ldr	r0, [r0, #0x10]
 8057572: 9002         	str	r0, [sp, #0x8]
 8057574: 9805         	ldr	r0, [sp, #0x14]
 8057576: 6841         	ldr	r1, [r0, #0x4]
 8057578: 6880         	ldr	r0, [r0, #0x8]
 805757a: 6088         	str	r0, [r1, #0x8]
 805757c: 9905         	ldr	r1, [sp, #0x14]
 805757e: 6848         	ldr	r0, [r1, #0x4]
 8057580: 6889         	ldr	r1, [r1, #0x8]
 8057582: 6048         	str	r0, [r1, #0x4]
 8057584: 9802         	ldr	r0, [sp, #0x8]
 8057586: 6840         	ldr	r0, [r0, #0x4]
 8057588: 9905         	ldr	r1, [sp, #0x14]
 805758a: 4288         	cmp	r0, r1
 805758c: d105         	bne	0x805759a <vTaskRemoveFromUnorderedEventList+0x86> @ imm = #0xa
 805758e: e7ff         	b	0x8057590 <vTaskRemoveFromUnorderedEventList+0x7c> @ imm = #-0x2
 8057590: 9805         	ldr	r0, [sp, #0x14]
 8057592: 6880         	ldr	r0, [r0, #0x8]
 8057594: 9902         	ldr	r1, [sp, #0x8]
 8057596: 6048         	str	r0, [r1, #0x4]
 8057598: e7ff         	b	0x805759a <vTaskRemoveFromUnorderedEventList+0x86> @ imm = #-0x2
 805759a: 9905         	ldr	r1, [sp, #0x14]
 805759c: 2000         	movs	r0, #0x0
 805759e: 6108         	str	r0, [r1, #0x10]
 80575a0: 9902         	ldr	r1, [sp, #0x8]
 80575a2: 6808         	ldr	r0, [r1]
 80575a4: 3801         	subs	r0, #0x1
 80575a6: 6008         	str	r0, [r1]
 80575a8: e7ff         	b	0x80575aa <vTaskRemoveFromUnorderedEventList+0x96> @ imm = #-0x2
;     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80575aa: e7ff         	b	0x80575ac <vTaskRemoveFromUnorderedEventList+0x98> @ imm = #-0x2
 80575ac: 9803         	ldr	r0, [sp, #0xc]
 80575ae: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80575b2: 9001         	str	r0, [sp, #0x4]
 80575b4: 9803         	ldr	r0, [sp, #0xc]
 80575b6: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 80575ba: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80575be: 6088         	str	r0, [r1, #0x8]
 80575c0: 9903         	ldr	r1, [sp, #0xc]
 80575c2: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 80575c6: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 80575ca: 6048         	str	r0, [r1, #0x4]
 80575cc: 9801         	ldr	r0, [sp, #0x4]
 80575ce: 6840         	ldr	r0, [r0, #0x4]
 80575d0: 9903         	ldr	r1, [sp, #0xc]
 80575d2: 3180         	adds	r1, #0x80
 80575d4: 4288         	cmp	r0, r1
 80575d6: d106         	bne	0x80575e6 <vTaskRemoveFromUnorderedEventList+0xd2> @ imm = #0xc
 80575d8: e7ff         	b	0x80575da <vTaskRemoveFromUnorderedEventList+0xc6> @ imm = #-0x2
 80575da: 9803         	ldr	r0, [sp, #0xc]
 80575dc: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80575e0: 9901         	ldr	r1, [sp, #0x4]
 80575e2: 6048         	str	r0, [r1, #0x4]
 80575e4: e7ff         	b	0x80575e6 <vTaskRemoveFromUnorderedEventList+0xd2> @ imm = #-0x2
 80575e6: 9903         	ldr	r1, [sp, #0xc]
 80575e8: 2000         	movs	r0, #0x0
 80575ea: f8c1 0090    	str.w	r0, [r1, #0x90]
 80575ee: 9901         	ldr	r1, [sp, #0x4]
 80575f0: 6808         	ldr	r0, [r1]
 80575f2: 3801         	subs	r0, #0x1
 80575f4: 6008         	str	r0, [r1]
 80575f6: e7ff         	b	0x80575f8 <vTaskRemoveFromUnorderedEventList+0xe4> @ imm = #-0x2
;     prvAddTaskToReadyList( pxUnblockedTCB );
 80575f8: e7ff         	b	0x80575fa <vTaskRemoveFromUnorderedEventList+0xe6> @ imm = #-0x2
 80575fa: e7ff         	b	0x80575fc <vTaskRemoveFromUnorderedEventList+0xe8> @ imm = #-0x2
 80575fc: 9803         	ldr	r0, [sp, #0xc]
 80575fe: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057602: f240 21a0    	movw	r1, #0x2a0
 8057606: f2c2 0100    	movt	r1, #0x2000
 805760a: 6809         	ldr	r1, [r1]
 805760c: 4288         	cmp	r0, r1
 805760e: d909         	bls	0x8057624 <vTaskRemoveFromUnorderedEventList+0x110> @ imm = #0x12
 8057610: e7ff         	b	0x8057612 <vTaskRemoveFromUnorderedEventList+0xfe> @ imm = #-0x2
 8057612: 9803         	ldr	r0, [sp, #0xc]
 8057614: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057618: f240 21a0    	movw	r1, #0x2a0
 805761c: f2c2 0100    	movt	r1, #0x2000
 8057620: 6008         	str	r0, [r1]
 8057622: e7ff         	b	0x8057624 <vTaskRemoveFromUnorderedEventList+0x110> @ imm = #-0x2
 8057624: e7ff         	b	0x8057626 <vTaskRemoveFromUnorderedEventList+0x112> @ imm = #-0x2
 8057626: e7ff         	b	0x8057628 <vTaskRemoveFromUnorderedEventList+0x114> @ imm = #-0x2
 8057628: 9803         	ldr	r0, [sp, #0xc]
 805762a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805762e: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057632: f240 1160    	movw	r1, #0x160
 8057636: f2c2 0100    	movt	r1, #0x2000
 805763a: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805763e: 6840         	ldr	r0, [r0, #0x4]
 8057640: 9000         	str	r0, [sp]
 8057642: 9800         	ldr	r0, [sp]
 8057644: 9a03         	ldr	r2, [sp, #0xc]
 8057646: f8c2 0084    	str.w	r0, [r2, #0x84]
 805764a: 9800         	ldr	r0, [sp]
 805764c: 6880         	ldr	r0, [r0, #0x8]
 805764e: 9a03         	ldr	r2, [sp, #0xc]
 8057650: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057654: 9803         	ldr	r0, [sp, #0xc]
 8057656: 3080         	adds	r0, #0x80
 8057658: 9a00         	ldr	r2, [sp]
 805765a: 6892         	ldr	r2, [r2, #0x8]
 805765c: 6050         	str	r0, [r2, #0x4]
 805765e: 9803         	ldr	r0, [sp, #0xc]
 8057660: 3080         	adds	r0, #0x80
 8057662: 9a00         	ldr	r2, [sp]
 8057664: 6090         	str	r0, [r2, #0x8]
 8057666: 9a03         	ldr	r2, [sp, #0xc]
 8057668: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 805766c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057670: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057674: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057678: 9803         	ldr	r0, [sp, #0xc]
 805767a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805767e: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057682: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057686: 3001         	adds	r0, #0x1
 8057688: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805768c: e7ff         	b	0x805768e <vTaskRemoveFromUnorderedEventList+0x17a> @ imm = #-0x2
 805768e: e7ff         	b	0x8057690 <vTaskRemoveFromUnorderedEventList+0x17c> @ imm = #-0x2
;         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8057690: 9803         	ldr	r0, [sp, #0xc]
 8057692: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057696: f240 1100    	movw	r1, #0x100
 805769a: f2c2 0100    	movt	r1, #0x2000
 805769e: 6809         	ldr	r1, [r1]
 80576a0: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80576a4: 4288         	cmp	r0, r1
 80576a6: d907         	bls	0x80576b8 <vTaskRemoveFromUnorderedEventList+0x1a4> @ imm = #0xe
 80576a8: e7ff         	b	0x80576aa <vTaskRemoveFromUnorderedEventList+0x196> @ imm = #-0x2
;             xYieldPendings[ 0 ] = pdTRUE;
 80576aa: f240 21a4    	movw	r1, #0x2a4
 80576ae: f2c2 0100    	movt	r1, #0x2000
 80576b2: 2001         	movs	r0, #0x1
 80576b4: 6008         	str	r0, [r1]
;         }
 80576b6: e7ff         	b	0x80576b8 <vTaskRemoveFromUnorderedEventList+0x1a4> @ imm = #-0x2
; }
 80576b8: 4801         	ldr	r0, [pc, #0x4]          @ 0x80576c0 <vTaskRemoveFromUnorderedEventList+0x1ac>
 80576ba: 4780         	blx	r0
 80576bc: b006         	add	sp, #0x18
 80576be: bd80         	pop	{r7, pc}

080576c0 <$d.79>:
 80576c0: 21 05 06 08  	.word	0x08060521
 80576c4: 55 ec 05 08  	.word	0x0805ec55
 80576c8: 55 ec 05 08  	.word	0x0805ec55

080576cc <vTaskSetTimeOutState>:
; {
 80576cc: b580         	push	{r7, lr}
 80576ce: 466f         	mov	r7, sp
 80576d0: b082         	sub	sp, #0x8
 80576d2: f643 5240    	movw	r2, #0x3d40
 80576d6: f2c2 0200    	movt	r2, #0x2000
 80576da: 6811         	ldr	r1, [r2]
 80576dc: f642 5340    	movw	r3, #0x2d40
 80576e0: f2c2 0300    	movt	r3, #0x2000
 80576e4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80576e8: 3101         	adds	r1, #0x1
 80576ea: 6011         	str	r1, [r2]
 80576ec: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxTimeOut );
 80576ee: 9801         	ldr	r0, [sp, #0x4]
 80576f0: b920         	cbnz	r0, 0x80576fc <vTaskSetTimeOutState+0x30> @ imm = #0x8
 80576f2: e7ff         	b	0x80576f4 <vTaskSetTimeOutState+0x28> @ imm = #-0x2
 80576f4: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8057734 <vTaskSetTimeOutState+0x68>
 80576f6: 4780         	blx	r0
 80576f8: e7ff         	b	0x80576fa <vTaskSetTimeOutState+0x2e> @ imm = #-0x2
 80576fa: e7fe         	b	0x80576fa <vTaskSetTimeOutState+0x2e> @ imm = #-0x4
;     taskENTER_CRITICAL();
 80576fc: 480a         	ldr	r0, [pc, #0x28]         @ 0x8057728 <vTaskSetTimeOutState+0x5c>
 80576fe: 4780         	blx	r0
;         pxTimeOut->xOverflowCount = xNumOfOverflows;
 8057700: f240 20b4    	movw	r0, #0x2b4
 8057704: f2c2 0000    	movt	r0, #0x2000
 8057708: 6800         	ldr	r0, [r0]
 805770a: 9901         	ldr	r1, [sp, #0x4]
 805770c: 6008         	str	r0, [r1]
;         pxTimeOut->xTimeOnEntering = xTickCount;
 805770e: f240 102c    	movw	r0, #0x12c
 8057712: f2c2 0000    	movt	r0, #0x2000
 8057716: 6800         	ldr	r0, [r0]
 8057718: 9901         	ldr	r1, [sp, #0x4]
 805771a: 6048         	str	r0, [r1, #0x4]
;     taskEXIT_CRITICAL();
 805771c: 4803         	ldr	r0, [pc, #0xc]          @ 0x805772c <vTaskSetTimeOutState+0x60>
 805771e: 4780         	blx	r0
; }
 8057720: 4803         	ldr	r0, [pc, #0xc]          @ 0x8057730 <vTaskSetTimeOutState+0x64>
 8057722: 4780         	blx	r0
 8057724: b002         	add	sp, #0x8
 8057726: bd80         	pop	{r7, pc}

08057728 <$d.81>:
 8057728: 05 e1 05 08  	.word	0x0805e105
 805772c: 4d e1 05 08  	.word	0x0805e14d
 8057730: 21 05 06 08  	.word	0x08060521
 8057734: 55 ec 05 08  	.word	0x0805ec55

08057738 <vTaskInternalSetTimeOutState>:
; {
 8057738: b580         	push	{r7, lr}
 805773a: 466f         	mov	r7, sp
 805773c: b082         	sub	sp, #0x8
 805773e: f643 5240    	movw	r2, #0x3d40
 8057742: f2c2 0200    	movt	r2, #0x2000
 8057746: 6811         	ldr	r1, [r2]
 8057748: f642 5340    	movw	r3, #0x2d40
 805774c: f2c2 0300    	movt	r3, #0x2000
 8057750: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8057754: 3101         	adds	r1, #0x1
 8057756: 6011         	str	r1, [r2]
 8057758: 9001         	str	r0, [sp, #0x4]
;     pxTimeOut->xOverflowCount = xNumOfOverflows;
 805775a: f240 20b4    	movw	r0, #0x2b4
 805775e: f2c2 0000    	movt	r0, #0x2000
 8057762: 6800         	ldr	r0, [r0]
 8057764: 9901         	ldr	r1, [sp, #0x4]
 8057766: 6008         	str	r0, [r1]
;     pxTimeOut->xTimeOnEntering = xTickCount;
 8057768: f240 102c    	movw	r0, #0x12c
 805776c: f2c2 0000    	movt	r0, #0x2000
 8057770: 6800         	ldr	r0, [r0]
 8057772: 9901         	ldr	r1, [sp, #0x4]
 8057774: 6048         	str	r0, [r1, #0x4]
; }
 8057776: 4802         	ldr	r0, [pc, #0x8]          @ 0x8057780 <vTaskInternalSetTimeOutState+0x48>
 8057778: 4780         	blx	r0
 805777a: b002         	add	sp, #0x8
 805777c: bd80         	pop	{r7, pc}
 805777e: bf00         	nop

08057780 <$d.83>:
 8057780: 21 05 06 08  	.word	0x08060521

08057784 <xTaskCheckForTimeOut>:
; {
 8057784: b580         	push	{r7, lr}
 8057786: 466f         	mov	r7, sp
 8057788: b086         	sub	sp, #0x18
 805778a: f643 5340    	movw	r3, #0x3d40
 805778e: f2c2 0300    	movt	r3, #0x2000
 8057792: 681a         	ldr	r2, [r3]
 8057794: f642 5c40    	movw	r12, #0x2d40
 8057798: f2c2 0c00    	movt	r12, #0x2000
 805779c: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 80577a0: 3201         	adds	r2, #0x1
 80577a2: 601a         	str	r2, [r3]
 80577a4: 9005         	str	r0, [sp, #0x14]
 80577a6: 9104         	str	r1, [sp, #0x10]
;     configASSERT( pxTimeOut );
 80577a8: 9805         	ldr	r0, [sp, #0x14]
 80577aa: b920         	cbnz	r0, 0x80577b6 <xTaskCheckForTimeOut+0x32> @ imm = #0x8
 80577ac: e7ff         	b	0x80577ae <xTaskCheckForTimeOut+0x2a> @ imm = #-0x2
 80577ae: 4831         	ldr	r0, [pc, #0xc4]         @ 0x8057874 <xTaskCheckForTimeOut+0xf0>
 80577b0: 4780         	blx	r0
 80577b2: e7ff         	b	0x80577b4 <xTaskCheckForTimeOut+0x30> @ imm = #-0x2
 80577b4: e7fe         	b	0x80577b4 <xTaskCheckForTimeOut+0x30> @ imm = #-0x4
;     configASSERT( pxTicksToWait );
 80577b6: 9804         	ldr	r0, [sp, #0x10]
 80577b8: b920         	cbnz	r0, 0x80577c4 <xTaskCheckForTimeOut+0x40> @ imm = #0x8
 80577ba: e7ff         	b	0x80577bc <xTaskCheckForTimeOut+0x38> @ imm = #-0x2
 80577bc: 482c         	ldr	r0, [pc, #0xb0]         @ 0x8057870 <xTaskCheckForTimeOut+0xec>
 80577be: 4780         	blx	r0
 80577c0: e7ff         	b	0x80577c2 <xTaskCheckForTimeOut+0x3e> @ imm = #-0x2
 80577c2: e7fe         	b	0x80577c2 <xTaskCheckForTimeOut+0x3e> @ imm = #-0x4
;     taskENTER_CRITICAL();
 80577c4: 4826         	ldr	r0, [pc, #0x98]         @ 0x8057860 <xTaskCheckForTimeOut+0xdc>
 80577c6: 4780         	blx	r0
;         const TickType_t xConstTickCount = xTickCount;
 80577c8: f240 102c    	movw	r0, #0x12c
 80577cc: f2c2 0000    	movt	r0, #0x2000
 80577d0: 6800         	ldr	r0, [r0]
 80577d2: 9002         	str	r0, [sp, #0x8]
;         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80577d4: 9802         	ldr	r0, [sp, #0x8]
 80577d6: 9905         	ldr	r1, [sp, #0x14]
 80577d8: 6849         	ldr	r1, [r1, #0x4]
 80577da: 1a40         	subs	r0, r0, r1
 80577dc: 9001         	str	r0, [sp, #0x4]
;             if( *pxTicksToWait == portMAX_DELAY )
 80577de: 9804         	ldr	r0, [sp, #0x10]
 80577e0: 6800         	ldr	r0, [r0]
 80577e2: 3001         	adds	r0, #0x1
 80577e4: b918         	cbnz	r0, 0x80577ee <xTaskCheckForTimeOut+0x6a> @ imm = #0x6
 80577e6: e7ff         	b	0x80577e8 <xTaskCheckForTimeOut+0x64> @ imm = #-0x2
 80577e8: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 80577ea: 9003         	str	r0, [sp, #0xc]
;             }
 80577ec: e02e         	b	0x805784c <xTaskCheckForTimeOut+0xc8> @ imm = #0x5c
;         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80577ee: f240 20b4    	movw	r0, #0x2b4
 80577f2: f2c2 0000    	movt	r0, #0x2000
 80577f6: 6800         	ldr	r0, [r0]
 80577f8: 9905         	ldr	r1, [sp, #0x14]
 80577fa: 6809         	ldr	r1, [r1]
 80577fc: 4288         	cmp	r0, r1
 80577fe: d00c         	beq	0x805781a <xTaskCheckForTimeOut+0x96> @ imm = #0x18
 8057800: e7ff         	b	0x8057802 <xTaskCheckForTimeOut+0x7e> @ imm = #-0x2
 8057802: 9802         	ldr	r0, [sp, #0x8]
 8057804: 9905         	ldr	r1, [sp, #0x14]
 8057806: 6849         	ldr	r1, [r1, #0x4]
 8057808: 4288         	cmp	r0, r1
 805780a: d306         	blo	0x805781a <xTaskCheckForTimeOut+0x96> @ imm = #0xc
 805780c: e7ff         	b	0x805780e <xTaskCheckForTimeOut+0x8a> @ imm = #-0x2
 805780e: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 8057810: 9003         	str	r0, [sp, #0xc]
;             *pxTicksToWait = ( TickType_t ) 0;
 8057812: 9904         	ldr	r1, [sp, #0x10]
 8057814: 2000         	movs	r0, #0x0
 8057816: 6008         	str	r0, [r1]
;         }
 8057818: e017         	b	0x805784a <xTaskCheckForTimeOut+0xc6> @ imm = #0x2e
;         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 805781a: 9801         	ldr	r0, [sp, #0x4]
 805781c: 9904         	ldr	r1, [sp, #0x10]
 805781e: 6809         	ldr	r1, [r1]
 8057820: 4288         	cmp	r0, r1
 8057822: d20b         	bhs	0x805783c <xTaskCheckForTimeOut+0xb8> @ imm = #0x16
 8057824: e7ff         	b	0x8057826 <xTaskCheckForTimeOut+0xa2> @ imm = #-0x2
;             *pxTicksToWait -= xElapsedTime;
 8057826: 9a01         	ldr	r2, [sp, #0x4]
 8057828: 9904         	ldr	r1, [sp, #0x10]
 805782a: 6808         	ldr	r0, [r1]
 805782c: 1a80         	subs	r0, r0, r2
 805782e: 6008         	str	r0, [r1]
;             vTaskInternalSetTimeOutState( pxTimeOut );
 8057830: 9805         	ldr	r0, [sp, #0x14]
 8057832: 490c         	ldr	r1, [pc, #0x30]         @ 0x8057864 <xTaskCheckForTimeOut+0xe0>
 8057834: 4788         	blx	r1
 8057836: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 8057838: 9003         	str	r0, [sp, #0xc]
;         }
 805783a: e005         	b	0x8057848 <xTaskCheckForTimeOut+0xc4> @ imm = #0xa
;             *pxTicksToWait = ( TickType_t ) 0;
 805783c: 9904         	ldr	r1, [sp, #0x10]
 805783e: 2000         	movs	r0, #0x0
 8057840: 6008         	str	r0, [r1]
 8057842: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 8057844: 9003         	str	r0, [sp, #0xc]
 8057846: e7ff         	b	0x8057848 <xTaskCheckForTimeOut+0xc4> @ imm = #-0x2
 8057848: e7ff         	b	0x805784a <xTaskCheckForTimeOut+0xc6> @ imm = #-0x2
 805784a: e7ff         	b	0x805784c <xTaskCheckForTimeOut+0xc8> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805784c: 4806         	ldr	r0, [pc, #0x18]         @ 0x8057868 <xTaskCheckForTimeOut+0xe4>
 805784e: 4780         	blx	r0
;     return xReturn;
 8057850: 9803         	ldr	r0, [sp, #0xc]
 8057852: 9000         	str	r0, [sp]
 8057854: 4805         	ldr	r0, [pc, #0x14]         @ 0x805786c <xTaskCheckForTimeOut+0xe8>
 8057856: 4780         	blx	r0
 8057858: 9800         	ldr	r0, [sp]
 805785a: b006         	add	sp, #0x18
 805785c: bd80         	pop	{r7, pc}
 805785e: bf00         	nop

08057860 <$d.85>:
 8057860: 05 e1 05 08  	.word	0x0805e105
 8057864: 39 77 05 08  	.word	0x08057739
 8057868: 4d e1 05 08  	.word	0x0805e14d
 805786c: 21 05 06 08  	.word	0x08060521
 8057870: 55 ec 05 08  	.word	0x0805ec55
 8057874: 55 ec 05 08  	.word	0x0805ec55

08057878 <vTaskMissedYield>:
; {
 8057878: b580         	push	{r7, lr}
 805787a: 466f         	mov	r7, sp
;     xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 805787c: f643 5140    	movw	r1, #0x3d40
 8057880: f2c2 0100    	movt	r1, #0x2000
 8057884: 6808         	ldr	r0, [r1]
 8057886: f642 5240    	movw	r2, #0x2d40
 805788a: f2c2 0200    	movt	r2, #0x2000
 805788e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8057892: 3001         	adds	r0, #0x1
 8057894: 6008         	str	r0, [r1]
 8057896: f240 21a4    	movw	r1, #0x2a4
 805789a: f2c2 0100    	movt	r1, #0x2000
 805789e: 2001         	movs	r0, #0x1
 80578a0: 6008         	str	r0, [r1]
; }
 80578a2: 4801         	ldr	r0, [pc, #0x4]          @ 0x80578a8 <vTaskMissedYield+0x30>
 80578a4: 4780         	blx	r0
 80578a6: bd80         	pop	{r7, pc}

080578a8 <$d.87>:
 80578a8: 21 05 06 08  	.word	0x08060521

080578ac <uxTaskGetTaskNumber>:
;     {
 80578ac: b580         	push	{r7, lr}
 80578ae: 466f         	mov	r7, sp
 80578b0: b084         	sub	sp, #0x10
 80578b2: f643 5240    	movw	r2, #0x3d40
 80578b6: f2c2 0200    	movt	r2, #0x2000
 80578ba: 6811         	ldr	r1, [r2]
 80578bc: f642 5340    	movw	r3, #0x2d40
 80578c0: f2c2 0300    	movt	r3, #0x2000
 80578c4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80578c8: 3101         	adds	r1, #0x1
 80578ca: 6011         	str	r1, [r2]
 80578cc: 9003         	str	r0, [sp, #0xc]
;         if( xTask != NULL )
 80578ce: 9803         	ldr	r0, [sp, #0xc]
 80578d0: b138         	cbz	r0, 0x80578e2 <uxTaskGetTaskNumber+0x36> @ imm = #0xe
 80578d2: e7ff         	b	0x80578d4 <uxTaskGetTaskNumber+0x28> @ imm = #-0x2
;             pxTCB = xTask;
 80578d4: 9803         	ldr	r0, [sp, #0xc]
 80578d6: 9001         	str	r0, [sp, #0x4]
;             uxReturn = pxTCB->uxTaskNumber;
 80578d8: 9801         	ldr	r0, [sp, #0x4]
 80578da: f8d0 00c4    	ldr.w	r0, [r0, #0xc4]
 80578de: 9002         	str	r0, [sp, #0x8]
;         }
 80578e0: e002         	b	0x80578e8 <uxTaskGetTaskNumber+0x3c> @ imm = #0x4
 80578e2: 2000         	movs	r0, #0x0
;             uxReturn = 0U;
 80578e4: 9002         	str	r0, [sp, #0x8]
 80578e6: e7ff         	b	0x80578e8 <uxTaskGetTaskNumber+0x3c> @ imm = #-0x2
;         return uxReturn;
 80578e8: 9802         	ldr	r0, [sp, #0x8]
 80578ea: 9000         	str	r0, [sp]
 80578ec: 4802         	ldr	r0, [pc, #0x8]          @ 0x80578f8 <uxTaskGetTaskNumber+0x4c>
 80578ee: 4780         	blx	r0
 80578f0: 9800         	ldr	r0, [sp]
 80578f2: b004         	add	sp, #0x10
 80578f4: bd80         	pop	{r7, pc}
 80578f6: bf00         	nop

080578f8 <$d.89>:
 80578f8: 21 05 06 08  	.word	0x08060521

080578fc <vTaskSetTaskNumber>:
;     {
 80578fc: b580         	push	{r7, lr}
 80578fe: 466f         	mov	r7, sp
 8057900: b084         	sub	sp, #0x10
 8057902: f643 5340    	movw	r3, #0x3d40
 8057906: f2c2 0300    	movt	r3, #0x2000
 805790a: 681a         	ldr	r2, [r3]
 805790c: f642 5c40    	movw	r12, #0x2d40
 8057910: f2c2 0c00    	movt	r12, #0x2000
 8057914: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8057918: 3201         	adds	r2, #0x1
 805791a: 601a         	str	r2, [r3]
 805791c: 9003         	str	r0, [sp, #0xc]
 805791e: 9102         	str	r1, [sp, #0x8]
;         if( xTask != NULL )
 8057920: 9803         	ldr	r0, [sp, #0xc]
 8057922: b138         	cbz	r0, 0x8057934 <vTaskSetTaskNumber+0x38> @ imm = #0xe
 8057924: e7ff         	b	0x8057926 <vTaskSetTaskNumber+0x2a> @ imm = #-0x2
;             pxTCB = xTask;
 8057926: 9803         	ldr	r0, [sp, #0xc]
 8057928: 9001         	str	r0, [sp, #0x4]
;             pxTCB->uxTaskNumber = uxHandle;
 805792a: 9802         	ldr	r0, [sp, #0x8]
 805792c: 9901         	ldr	r1, [sp, #0x4]
 805792e: f8c1 00c4    	str.w	r0, [r1, #0xc4]
;         }
 8057932: e7ff         	b	0x8057934 <vTaskSetTaskNumber+0x38> @ imm = #-0x2
;     }
 8057934: 4801         	ldr	r0, [pc, #0x4]          @ 0x805793c <vTaskSetTaskNumber+0x40>
 8057936: 4780         	blx	r0
 8057938: b004         	add	sp, #0x10
 805793a: bd80         	pop	{r7, pc}

0805793c <$d.91>:
 805793c: 21 05 06 08  	.word	0x08060521

08057940 <vTaskAllocateMPURegions>:
;     {
 8057940: b580         	push	{r7, lr}
 8057942: 466f         	mov	r7, sp
 8057944: b084         	sub	sp, #0x10
 8057946: f643 5340    	movw	r3, #0x3d40
 805794a: f2c2 0300    	movt	r3, #0x2000
 805794e: 681a         	ldr	r2, [r3]
 8057950: f642 5c40    	movw	r12, #0x2d40
 8057954: f2c2 0c00    	movt	r12, #0x2000
 8057958: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805795c: 3201         	adds	r2, #0x1
 805795e: 601a         	str	r2, [r3]
 8057960: 9003         	str	r0, [sp, #0xc]
 8057962: 9102         	str	r1, [sp, #0x8]
;         pxTCB = prvGetTCBFromHandle( xTaskToModify );
 8057964: 9803         	ldr	r0, [sp, #0xc]
 8057966: b938         	cbnz	r0, 0x8057978 <vTaskAllocateMPURegions+0x38> @ imm = #0xe
 8057968: e7ff         	b	0x805796a <vTaskAllocateMPURegions+0x2a> @ imm = #-0x2
 805796a: f240 1000    	movw	r0, #0x100
 805796e: f2c2 0000    	movt	r0, #0x2000
 8057972: 6800         	ldr	r0, [r0]
 8057974: 9000         	str	r0, [sp]
 8057976: e002         	b	0x805797e <vTaskAllocateMPURegions+0x3e> @ imm = #0x4
 8057978: 9803         	ldr	r0, [sp, #0xc]
 805797a: 9000         	str	r0, [sp]
 805797c: e7ff         	b	0x805797e <vTaskAllocateMPURegions+0x3e> @ imm = #-0x2
 805797e: 9800         	ldr	r0, [sp]
 8057980: 9001         	str	r0, [sp, #0x4]
;         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), pxRegions, NULL, 0 );
 8057982: 9801         	ldr	r0, [sp, #0x4]
 8057984: 3004         	adds	r0, #0x4
 8057986: 9902         	ldr	r1, [sp, #0x8]
 8057988: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x805799c <vTaskAllocateMPURegions+0x5c>
 805798c: 2300         	movs	r3, #0x0
 805798e: 461a         	mov	r2, r3
 8057990: 47e0         	blx	r12
;     }
 8057992: 4803         	ldr	r0, [pc, #0xc]          @ 0x80579a0 <vTaskAllocateMPURegions+0x60>
 8057994: 4780         	blx	r0
 8057996: b004         	add	sp, #0x10
 8057998: bd80         	pop	{r7, pc}
 805799a: bf00         	nop

0805799c <$d.93>:
 805799c: e5 e7 05 08  	.word	0x0805e7e5
 80579a0: 21 05 06 08  	.word	0x08060521

080579a4 <vTaskGetInfo>:
;     {
 80579a4: b5b0         	push	{r4, r5, r7, lr}
 80579a6: af02         	add	r7, sp, #0x8
 80579a8: b086         	sub	sp, #0x18
 80579aa: 4674         	mov	r4, lr
 80579ac: f643 5e40    	movw	lr, #0x3d40
 80579b0: f2c2 0e00    	movt	lr, #0x2000
 80579b4: f8de c000    	ldr.w	r12, [lr]
 80579b8: f642 5540    	movw	r5, #0x2d40
 80579bc: f2c2 0500    	movt	r5, #0x2000
 80579c0: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 80579c4: f10c 0c01    	add.w	r12, r12, #0x1
 80579c8: f8ce c000    	str.w	r12, [lr]
 80579cc: 9005         	str	r0, [sp, #0x14]
 80579ce: 9104         	str	r1, [sp, #0x10]
 80579d0: 9203         	str	r2, [sp, #0xc]
 80579d2: f807 3c15    	strb	r3, [r7, #-21]
;         pxTCB = prvGetTCBFromHandle( xTask );
 80579d6: 9805         	ldr	r0, [sp, #0x14]
 80579d8: b938         	cbnz	r0, 0x80579ea <vTaskGetInfo+0x46> @ imm = #0xe
 80579da: e7ff         	b	0x80579dc <vTaskGetInfo+0x38> @ imm = #-0x2
 80579dc: f240 1000    	movw	r0, #0x100
 80579e0: f2c2 0000    	movt	r0, #0x2000
 80579e4: 6800         	ldr	r0, [r0]
 80579e6: 9000         	str	r0, [sp]
 80579e8: e002         	b	0x80579f0 <vTaskGetInfo+0x4c> @ imm = #0x4
 80579ea: 9805         	ldr	r0, [sp, #0x14]
 80579ec: 9000         	str	r0, [sp]
 80579ee: e7ff         	b	0x80579f0 <vTaskGetInfo+0x4c> @ imm = #-0x2
 80579f0: 9800         	ldr	r0, [sp]
 80579f2: 9001         	str	r0, [sp, #0x4]
;         pxTaskStatus->xHandle = pxTCB;
 80579f4: 9801         	ldr	r0, [sp, #0x4]
 80579f6: 9904         	ldr	r1, [sp, #0x10]
 80579f8: 6008         	str	r0, [r1]
;         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 80579fa: 9801         	ldr	r0, [sp, #0x4]
 80579fc: 30b0         	adds	r0, #0xb0
 80579fe: 9904         	ldr	r1, [sp, #0x10]
 8057a00: 6048         	str	r0, [r1, #0x4]
;         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8057a02: 9801         	ldr	r0, [sp, #0x4]
 8057a04: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057a08: 9904         	ldr	r1, [sp, #0x10]
 8057a0a: 6108         	str	r0, [r1, #0x10]
;         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8057a0c: 9801         	ldr	r0, [sp, #0x4]
 8057a0e: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8057a12: 9904         	ldr	r1, [sp, #0x10]
 8057a14: 61c8         	str	r0, [r1, #0x1c]
;         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8057a16: 9801         	ldr	r0, [sp, #0x4]
 8057a18: f8d0 00c0    	ldr.w	r0, [r0, #0xc0]
 8057a1c: 9904         	ldr	r1, [sp, #0x10]
 8057a1e: 6088         	str	r0, [r1, #0x8]
;             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8057a20: 9801         	ldr	r0, [sp, #0x4]
 8057a22: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8057a26: 9904         	ldr	r1, [sp, #0x10]
 8057a28: 6148         	str	r0, [r1, #0x14]
;             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8057a2a: 9904         	ldr	r1, [sp, #0x10]
 8057a2c: 2000         	movs	r0, #0x0
 8057a2e: 6188         	str	r0, [r1, #0x18]
;         if( eState != eInvalid )
 8057a30: f817 0c15    	ldrb	r0, [r7, #-21]
 8057a34: 2805         	cmp	r0, #0x5
 8057a36: d038         	beq	0x8057aaa <vTaskGetInfo+0x106> @ imm = #0x70
 8057a38: e7ff         	b	0x8057a3a <vTaskGetInfo+0x96> @ imm = #-0x2
;             if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8057a3a: 9801         	ldr	r0, [sp, #0x4]
 8057a3c: f240 1100    	movw	r1, #0x100
 8057a40: f2c2 0100    	movt	r1, #0x2000
 8057a44: 6809         	ldr	r1, [r1]
 8057a46: 4288         	cmp	r0, r1
 8057a48: d104         	bne	0x8057a54 <vTaskGetInfo+0xb0> @ imm = #0x8
 8057a4a: e7ff         	b	0x8057a4c <vTaskGetInfo+0xa8> @ imm = #-0x2
;                 pxTaskStatus->eCurrentState = eRunning;
 8057a4c: 9904         	ldr	r1, [sp, #0x10]
 8057a4e: 2000         	movs	r0, #0x0
 8057a50: 7308         	strb	r0, [r1, #0xc]
;             }
 8057a52: e029         	b	0x8057aa8 <vTaskGetInfo+0x104> @ imm = #0x52
;                 pxTaskStatus->eCurrentState = eState;
 8057a54: f817 0c15    	ldrb	r0, [r7, #-21]
 8057a58: 9904         	ldr	r1, [sp, #0x10]
 8057a5a: 7308         	strb	r0, [r1, #0xc]
;                     if( eState == eSuspended )
 8057a5c: f817 0c15    	ldrb	r0, [r7, #-21]
 8057a60: 2803         	cmp	r0, #0x3
 8057a62: d10e         	bne	0x8057a82 <vTaskGetInfo+0xde> @ imm = #0x1c
 8057a64: e7ff         	b	0x8057a66 <vTaskGetInfo+0xc2> @ imm = #-0x2
;                         vTaskSuspendAll();
 8057a66: 481e         	ldr	r0, [pc, #0x78]         @ 0x8057ae0 <vTaskGetInfo+0x13c>
 8057a68: 4780         	blx	r0
;                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8057a6a: 9801         	ldr	r0, [sp, #0x4]
 8057a6c: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057a70: b120         	cbz	r0, 0x8057a7c <vTaskGetInfo+0xd8> @ imm = #0x8
 8057a72: e7ff         	b	0x8057a74 <vTaskGetInfo+0xd0> @ imm = #-0x2
;                                 pxTaskStatus->eCurrentState = eBlocked;
 8057a74: 9904         	ldr	r1, [sp, #0x10]
 8057a76: 2002         	movs	r0, #0x2
 8057a78: 7308         	strb	r0, [r1, #0xc]
;                             }
 8057a7a: e7ff         	b	0x8057a7c <vTaskGetInfo+0xd8> @ imm = #-0x2
;                         ( void ) xTaskResumeAll();
 8057a7c: 4819         	ldr	r0, [pc, #0x64]         @ 0x8057ae4 <vTaskGetInfo+0x140>
 8057a7e: 4780         	blx	r0
;                     }
 8057a80: e7ff         	b	0x8057a82 <vTaskGetInfo+0xde> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 8057a82: 4819         	ldr	r0, [pc, #0x64]         @ 0x8057ae8 <vTaskGetInfo+0x144>
 8057a84: 4780         	blx	r0
;                     if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8057a86: 9801         	ldr	r0, [sp, #0x4]
 8057a88: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057a8c: f240 1138    	movw	r1, #0x138
 8057a90: f2c2 0100    	movt	r1, #0x2000
 8057a94: 4288         	cmp	r0, r1
 8057a96: d104         	bne	0x8057aa2 <vTaskGetInfo+0xfe> @ imm = #0x8
 8057a98: e7ff         	b	0x8057a9a <vTaskGetInfo+0xf6> @ imm = #-0x2
;                         pxTaskStatus->eCurrentState = eReady;
 8057a9a: 9904         	ldr	r1, [sp, #0x10]
 8057a9c: 2001         	movs	r0, #0x1
 8057a9e: 7308         	strb	r0, [r1, #0xc]
;                     }
 8057aa0: e7ff         	b	0x8057aa2 <vTaskGetInfo+0xfe> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 8057aa2: 4812         	ldr	r0, [pc, #0x48]         @ 0x8057aec <vTaskGetInfo+0x148>
 8057aa4: 4780         	blx	r0
 8057aa6: e7ff         	b	0x8057aa8 <vTaskGetInfo+0x104> @ imm = #-0x2
;         }
 8057aa8: e005         	b	0x8057ab6 <vTaskGetInfo+0x112> @ imm = #0xa
;             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8057aaa: 9801         	ldr	r0, [sp, #0x4]
 8057aac: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8057adc <vTaskGetInfo+0x138>
 8057aae: 4788         	blx	r1
 8057ab0: 9904         	ldr	r1, [sp, #0x10]
 8057ab2: 7308         	strb	r0, [r1, #0xc]
 8057ab4: e7ff         	b	0x8057ab6 <vTaskGetInfo+0x112> @ imm = #-0x2
;         if( xGetFreeStackSpace != pdFALSE )
 8057ab6: 9803         	ldr	r0, [sp, #0xc]
 8057ab8: b140         	cbz	r0, 0x8057acc <vTaskGetInfo+0x128> @ imm = #0x10
 8057aba: e7ff         	b	0x8057abc <vTaskGetInfo+0x118> @ imm = #-0x2
;                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8057abc: 9801         	ldr	r0, [sp, #0x4]
 8057abe: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8057ac2: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8057af0 <vTaskGetInfo+0x14c>
 8057ac4: 4788         	blx	r1
 8057ac6: 9904         	ldr	r1, [sp, #0x10]
 8057ac8: 8408         	strh	r0, [r1, #0x20]
;         }
 8057aca: e003         	b	0x8057ad4 <vTaskGetInfo+0x130> @ imm = #0x6
;             pxTaskStatus->usStackHighWaterMark = 0;
 8057acc: 9904         	ldr	r1, [sp, #0x10]
 8057ace: 2000         	movs	r0, #0x0
 8057ad0: 8408         	strh	r0, [r1, #0x20]
 8057ad2: e7ff         	b	0x8057ad4 <vTaskGetInfo+0x130> @ imm = #-0x2
;     }
 8057ad4: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8057af4 <vTaskGetInfo+0x150>
 8057ad6: 4780         	blx	r0
 8057ad8: b006         	add	sp, #0x18
 8057ada: bdb0         	pop	{r4, r5, r7, pc}

08057adc <$d.95>:
 8057adc: 65 5e 05 08  	.word	0x08055e65
 8057ae0: b9 59 05 08  	.word	0x080559b9
 8057ae4: 29 5b 05 08  	.word	0x08055b29
 8057ae8: 05 e1 05 08  	.word	0x0805e105
 8057aec: 4d e1 05 08  	.word	0x0805e14d
 8057af0: f9 7a 05 08  	.word	0x08057af9
 8057af4: 21 05 06 08  	.word	0x08060521

08057af8 <prvTaskCheckFreeStackSpace>:
;     {
 8057af8: b580         	push	{r7, lr}
 8057afa: 466f         	mov	r7, sp
 8057afc: b084         	sub	sp, #0x10
 8057afe: f643 5240    	movw	r2, #0x3d40
 8057b02: f2c2 0200    	movt	r2, #0x2000
 8057b06: 6811         	ldr	r1, [r2]
 8057b08: f642 5340    	movw	r3, #0x2d40
 8057b0c: f2c2 0300    	movt	r3, #0x2000
 8057b10: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8057b14: 3101         	adds	r1, #0x1
 8057b16: 6011         	str	r1, [r2]
 8057b18: 9003         	str	r0, [sp, #0xc]
 8057b1a: 2000         	movs	r0, #0x0
;         uint32_t ulCount = 0U;
 8057b1c: 9002         	str	r0, [sp, #0x8]
;         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8057b1e: e7ff         	b	0x8057b20 <prvTaskCheckFreeStackSpace+0x28> @ imm = #-0x2
 8057b20: 9803         	ldr	r0, [sp, #0xc]
 8057b22: 7800         	ldrb	r0, [r0]
 8057b24: 28a5         	cmp	r0, #0xa5
 8057b26: d107         	bne	0x8057b38 <prvTaskCheckFreeStackSpace+0x40> @ imm = #0xe
 8057b28: e7ff         	b	0x8057b2a <prvTaskCheckFreeStackSpace+0x32> @ imm = #-0x2
;             pucStackByte -= portSTACK_GROWTH;
 8057b2a: 9803         	ldr	r0, [sp, #0xc]
 8057b2c: 3001         	adds	r0, #0x1
 8057b2e: 9003         	str	r0, [sp, #0xc]
;             ulCount++;
 8057b30: 9802         	ldr	r0, [sp, #0x8]
 8057b32: 3001         	adds	r0, #0x1
 8057b34: 9002         	str	r0, [sp, #0x8]
;         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8057b36: e7f3         	b	0x8057b20 <prvTaskCheckFreeStackSpace+0x28> @ imm = #-0x1a
;         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8057b38: 9802         	ldr	r0, [sp, #0x8]
 8057b3a: 0880         	lsrs	r0, r0, #0x2
 8057b3c: 9002         	str	r0, [sp, #0x8]
;         return ( configSTACK_DEPTH_TYPE ) ulCount;
 8057b3e: f8bd 0008    	ldrh.w	r0, [sp, #0x8]
 8057b42: 9001         	str	r0, [sp, #0x4]
 8057b44: 4802         	ldr	r0, [pc, #0x8]          @ 0x8057b50 <prvTaskCheckFreeStackSpace+0x58>
 8057b46: 4780         	blx	r0
 8057b48: 9801         	ldr	r0, [sp, #0x4]
 8057b4a: b004         	add	sp, #0x10
 8057b4c: bd80         	pop	{r7, pc}
 8057b4e: bf00         	nop

08057b50 <$d.97>:
 8057b50: 21 05 06 08  	.word	0x08060521

08057b54 <uxTaskGetStackHighWaterMark>:
;     {
 8057b54: b580         	push	{r7, lr}
 8057b56: 466f         	mov	r7, sp
 8057b58: b086         	sub	sp, #0x18
 8057b5a: f643 5240    	movw	r2, #0x3d40
 8057b5e: f2c2 0200    	movt	r2, #0x2000
 8057b62: 6811         	ldr	r1, [r2]
 8057b64: f642 5340    	movw	r3, #0x2d40
 8057b68: f2c2 0300    	movt	r3, #0x2000
 8057b6c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8057b70: 3101         	adds	r1, #0x1
 8057b72: 6011         	str	r1, [r2]
 8057b74: 9005         	str	r0, [sp, #0x14]
;         pxTCB = prvGetTCBFromHandle( xTask );
 8057b76: 9805         	ldr	r0, [sp, #0x14]
 8057b78: b938         	cbnz	r0, 0x8057b8a <uxTaskGetStackHighWaterMark+0x36> @ imm = #0xe
 8057b7a: e7ff         	b	0x8057b7c <uxTaskGetStackHighWaterMark+0x28> @ imm = #-0x2
 8057b7c: f240 1000    	movw	r0, #0x100
 8057b80: f2c2 0000    	movt	r0, #0x2000
 8057b84: 6800         	ldr	r0, [r0]
 8057b86: 9001         	str	r0, [sp, #0x4]
 8057b88: e002         	b	0x8057b90 <uxTaskGetStackHighWaterMark+0x3c> @ imm = #0x4
 8057b8a: 9805         	ldr	r0, [sp, #0x14]
 8057b8c: 9001         	str	r0, [sp, #0x4]
 8057b8e: e7ff         	b	0x8057b90 <uxTaskGetStackHighWaterMark+0x3c> @ imm = #-0x2
 8057b90: 9801         	ldr	r0, [sp, #0x4]
 8057b92: 9004         	str	r0, [sp, #0x10]
;             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8057b94: 9804         	ldr	r0, [sp, #0x10]
 8057b96: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8057b9a: 9003         	str	r0, [sp, #0xc]
;         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8057b9c: 9803         	ldr	r0, [sp, #0xc]
 8057b9e: 4905         	ldr	r1, [pc, #0x14]         @ 0x8057bb4 <uxTaskGetStackHighWaterMark+0x60>
 8057ba0: 4788         	blx	r1
 8057ba2: 9002         	str	r0, [sp, #0x8]
;         return uxReturn;
 8057ba4: 9802         	ldr	r0, [sp, #0x8]
 8057ba6: 9000         	str	r0, [sp]
 8057ba8: 4803         	ldr	r0, [pc, #0xc]          @ 0x8057bb8 <uxTaskGetStackHighWaterMark+0x64>
 8057baa: 4780         	blx	r0
 8057bac: 9800         	ldr	r0, [sp]
 8057bae: b006         	add	sp, #0x18
 8057bb0: bd80         	pop	{r7, pc}
 8057bb2: bf00         	nop

08057bb4 <$d.99>:
 8057bb4: f9 7a 05 08  	.word	0x08057af9
 8057bb8: 21 05 06 08  	.word	0x08060521

08057bbc <xTaskGetCurrentTaskHandle>:
;         {
 8057bbc: b580         	push	{r7, lr}
 8057bbe: 466f         	mov	r7, sp
 8057bc0: b082         	sub	sp, #0x8
 8057bc2: f643 5140    	movw	r1, #0x3d40
 8057bc6: f2c2 0100    	movt	r1, #0x2000
 8057bca: 6808         	ldr	r0, [r1]
 8057bcc: f642 5240    	movw	r2, #0x2d40
 8057bd0: f2c2 0200    	movt	r2, #0x2000
 8057bd4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8057bd8: 3001         	adds	r0, #0x1
 8057bda: 6008         	str	r0, [r1]
;             xReturn = pxCurrentTCB;
 8057bdc: f240 1000    	movw	r0, #0x100
 8057be0: f2c2 0000    	movt	r0, #0x2000
 8057be4: 6800         	ldr	r0, [r0]
 8057be6: 9001         	str	r0, [sp, #0x4]
;             return xReturn;
 8057be8: 9801         	ldr	r0, [sp, #0x4]
 8057bea: 9000         	str	r0, [sp]
 8057bec: 4802         	ldr	r0, [pc, #0x8]          @ 0x8057bf8 <xTaskGetCurrentTaskHandle+0x3c>
 8057bee: 4780         	blx	r0
 8057bf0: 9800         	ldr	r0, [sp]
 8057bf2: b002         	add	sp, #0x8
 8057bf4: bd80         	pop	{r7, pc}
 8057bf6: bf00         	nop

08057bf8 <$d.101>:
 8057bf8: 21 05 06 08  	.word	0x08060521

08057bfc <xTaskGetSchedulerState>:
;     {
 8057bfc: b580         	push	{r7, lr}
 8057bfe: 466f         	mov	r7, sp
 8057c00: b082         	sub	sp, #0x8
 8057c02: f643 5140    	movw	r1, #0x3d40
 8057c06: f2c2 0100    	movt	r1, #0x2000
 8057c0a: 6808         	ldr	r0, [r1]
 8057c0c: f642 5240    	movw	r2, #0x2d40
 8057c10: f2c2 0200    	movt	r2, #0x2000
 8057c14: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8057c18: 3001         	adds	r0, #0x1
 8057c1a: 6008         	str	r0, [r1]
;         if( xSchedulerRunning == pdFALSE )
 8057c1c: f240 1024    	movw	r0, #0x124
 8057c20: f2c2 0000    	movt	r0, #0x2000
 8057c24: 6800         	ldr	r0, [r0]
 8057c26: b918         	cbnz	r0, 0x8057c30 <xTaskGetSchedulerState+0x34> @ imm = #0x6
 8057c28: e7ff         	b	0x8057c2a <xTaskGetSchedulerState+0x2e> @ imm = #-0x2
 8057c2a: 2001         	movs	r0, #0x1
;             xReturn = taskSCHEDULER_NOT_STARTED;
 8057c2c: 9001         	str	r0, [sp, #0x4]
;         }
 8057c2e: e00d         	b	0x8057c4c <xTaskGetSchedulerState+0x50> @ imm = #0x1a
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8057c30: f240 1028    	movw	r0, #0x128
 8057c34: f2c2 0000    	movt	r0, #0x2000
 8057c38: 6800         	ldr	r0, [r0]
 8057c3a: b918         	cbnz	r0, 0x8057c44 <xTaskGetSchedulerState+0x48> @ imm = #0x6
 8057c3c: e7ff         	b	0x8057c3e <xTaskGetSchedulerState+0x42> @ imm = #-0x2
 8057c3e: 2002         	movs	r0, #0x2
;                     xReturn = taskSCHEDULER_RUNNING;
 8057c40: 9001         	str	r0, [sp, #0x4]
;                 }
 8057c42: e002         	b	0x8057c4a <xTaskGetSchedulerState+0x4e> @ imm = #0x4
 8057c44: 2000         	movs	r0, #0x0
;                     xReturn = taskSCHEDULER_SUSPENDED;
 8057c46: 9001         	str	r0, [sp, #0x4]
 8057c48: e7ff         	b	0x8057c4a <xTaskGetSchedulerState+0x4e> @ imm = #-0x2
 8057c4a: e7ff         	b	0x8057c4c <xTaskGetSchedulerState+0x50> @ imm = #-0x2
;         return xReturn;
 8057c4c: 9801         	ldr	r0, [sp, #0x4]
 8057c4e: 9000         	str	r0, [sp]
 8057c50: 4802         	ldr	r0, [pc, #0x8]          @ 0x8057c5c <xTaskGetSchedulerState+0x60>
 8057c52: 4780         	blx	r0
 8057c54: 9800         	ldr	r0, [sp]
 8057c56: b002         	add	sp, #0x8
 8057c58: bd80         	pop	{r7, pc}
 8057c5a: bf00         	nop

08057c5c <$d.103>:
 8057c5c: 21 05 06 08  	.word	0x08060521

08057c60 <xTaskPriorityInherit>:
;     {
 8057c60: b580         	push	{r7, lr}
 8057c62: 466f         	mov	r7, sp
 8057c64: b086         	sub	sp, #0x18
 8057c66: f643 5240    	movw	r2, #0x3d40
 8057c6a: f2c2 0200    	movt	r2, #0x2000
 8057c6e: 6811         	ldr	r1, [r2]
 8057c70: f642 5340    	movw	r3, #0x2d40
 8057c74: f2c2 0300    	movt	r3, #0x2000
 8057c78: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8057c7c: 3101         	adds	r1, #0x1
 8057c7e: 6011         	str	r1, [r2]
 8057c80: 9005         	str	r0, [sp, #0x14]
;         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8057c82: 9805         	ldr	r0, [sp, #0x14]
 8057c84: 9004         	str	r0, [sp, #0x10]
 8057c86: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 8057c88: 9003         	str	r0, [sp, #0xc]
;         if( pxMutexHolder != NULL )
 8057c8a: 9805         	ldr	r0, [sp, #0x14]
 8057c8c: 2800         	cmp	r0, #0x0
 8057c8e: f000 80b4    	beq.w	0x8057dfa <xTaskPriorityInherit+0x19a> @ imm = #0x168
 8057c92: e7ff         	b	0x8057c94 <xTaskPriorityInherit+0x34> @ imm = #-0x2
;             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8057c94: 9804         	ldr	r0, [sp, #0x10]
 8057c96: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057c9a: f240 1100    	movw	r1, #0x100
 8057c9e: f2c2 0100    	movt	r1, #0x2000
 8057ca2: 6809         	ldr	r1, [r1]
 8057ca4: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057ca8: 4288         	cmp	r0, r1
 8057caa: f080 8093    	bhs.w	0x8057dd4 <xTaskPriorityInherit+0x174> @ imm = #0x126
 8057cae: e7ff         	b	0x8057cb0 <xTaskPriorityInherit+0x50> @ imm = #-0x2
;                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8057cb0: 9804         	ldr	r0, [sp, #0x10]
 8057cb2: f890 0097    	ldrb.w	r0, [r0, #0x97]
 8057cb6: 0600         	lsls	r0, r0, #0x18
 8057cb8: 2800         	cmp	r0, #0x0
 8057cba: d40d         	bmi	0x8057cd8 <xTaskPriorityInherit+0x78> @ imm = #0x1a
 8057cbc: e7ff         	b	0x8057cbe <xTaskPriorityInherit+0x5e> @ imm = #-0x2
;                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057cbe: f240 1000    	movw	r0, #0x100
 8057cc2: f2c2 0000    	movt	r0, #0x2000
 8057cc6: 6800         	ldr	r0, [r0]
 8057cc8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057ccc: f1c0 0010    	rsb.w	r0, r0, #0x10
 8057cd0: 9904         	ldr	r1, [sp, #0x10]
 8057cd2: f8c1 0094    	str.w	r0, [r1, #0x94]
;                 }
 8057cd6: e000         	b	0x8057cda <xTaskPriorityInherit+0x7a> @ imm = #0x0
 8057cd8: e7ff         	b	0x8057cda <xTaskPriorityInherit+0x7a> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8057cda: 9904         	ldr	r1, [sp, #0x10]
 8057cdc: f8d1 0090    	ldr.w	r0, [r1, #0x90]
 8057ce0: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057ce4: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8057ce8: f240 1160    	movw	r1, #0x160
 8057cec: f2c2 0100    	movt	r1, #0x2000
 8057cf0: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057cf4: 4288         	cmp	r0, r1
 8057cf6: d15f         	bne	0x8057db8 <xTaskPriorityInherit+0x158> @ imm = #0xbe
 8057cf8: e7ff         	b	0x8057cfa <xTaskPriorityInherit+0x9a> @ imm = #-0x2
;                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8057cfa: 9804         	ldr	r0, [sp, #0x10]
 8057cfc: 3080         	adds	r0, #0x80
 8057cfe: 4943         	ldr	r1, [pc, #0x10c]        @ 0x8057e0c <xTaskPriorityInherit+0x1ac>
 8057d00: 4788         	blx	r1
 8057d02: b908         	cbnz	r0, 0x8057d08 <xTaskPriorityInherit+0xa8> @ imm = #0x2
 8057d04: e7ff         	b	0x8057d06 <xTaskPriorityInherit+0xa6> @ imm = #-0x2
;                     }
 8057d06: e000         	b	0x8057d0a <xTaskPriorityInherit+0xaa> @ imm = #0x0
 8057d08: e7ff         	b	0x8057d0a <xTaskPriorityInherit+0xaa> @ imm = #-0x2
;                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8057d0a: f240 1000    	movw	r0, #0x100
 8057d0e: f2c2 0000    	movt	r0, #0x2000
 8057d12: 6800         	ldr	r0, [r0]
 8057d14: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057d18: 9904         	ldr	r1, [sp, #0x10]
 8057d1a: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     prvAddTaskToReadyList( pxMutexHolderTCB );
 8057d1e: e7ff         	b	0x8057d20 <xTaskPriorityInherit+0xc0> @ imm = #-0x2
 8057d20: e7ff         	b	0x8057d22 <xTaskPriorityInherit+0xc2> @ imm = #-0x2
 8057d22: 9804         	ldr	r0, [sp, #0x10]
 8057d24: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057d28: f240 21a0    	movw	r1, #0x2a0
 8057d2c: f2c2 0100    	movt	r1, #0x2000
 8057d30: 6809         	ldr	r1, [r1]
 8057d32: 4288         	cmp	r0, r1
 8057d34: d909         	bls	0x8057d4a <xTaskPriorityInherit+0xea> @ imm = #0x12
 8057d36: e7ff         	b	0x8057d38 <xTaskPriorityInherit+0xd8> @ imm = #-0x2
 8057d38: 9804         	ldr	r0, [sp, #0x10]
 8057d3a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057d3e: f240 21a0    	movw	r1, #0x2a0
 8057d42: f2c2 0100    	movt	r1, #0x2000
 8057d46: 6008         	str	r0, [r1]
 8057d48: e7ff         	b	0x8057d4a <xTaskPriorityInherit+0xea> @ imm = #-0x2
 8057d4a: e7ff         	b	0x8057d4c <xTaskPriorityInherit+0xec> @ imm = #-0x2
 8057d4c: e7ff         	b	0x8057d4e <xTaskPriorityInherit+0xee> @ imm = #-0x2
 8057d4e: 9804         	ldr	r0, [sp, #0x10]
 8057d50: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057d54: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057d58: f240 1160    	movw	r1, #0x160
 8057d5c: f2c2 0100    	movt	r1, #0x2000
 8057d60: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057d64: 6840         	ldr	r0, [r0, #0x4]
 8057d66: 9002         	str	r0, [sp, #0x8]
 8057d68: 9802         	ldr	r0, [sp, #0x8]
 8057d6a: 9a04         	ldr	r2, [sp, #0x10]
 8057d6c: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057d70: 9802         	ldr	r0, [sp, #0x8]
 8057d72: 6880         	ldr	r0, [r0, #0x8]
 8057d74: 9a04         	ldr	r2, [sp, #0x10]
 8057d76: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057d7a: 9804         	ldr	r0, [sp, #0x10]
 8057d7c: 3080         	adds	r0, #0x80
 8057d7e: 9a02         	ldr	r2, [sp, #0x8]
 8057d80: 6892         	ldr	r2, [r2, #0x8]
 8057d82: 6050         	str	r0, [r2, #0x4]
 8057d84: 9804         	ldr	r0, [sp, #0x10]
 8057d86: 3080         	adds	r0, #0x80
 8057d88: 9a02         	ldr	r2, [sp, #0x8]
 8057d8a: 6090         	str	r0, [r2, #0x8]
 8057d8c: 9a04         	ldr	r2, [sp, #0x10]
 8057d8e: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057d92: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057d96: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057d9a: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057d9e: 9804         	ldr	r0, [sp, #0x10]
 8057da0: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057da4: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057da8: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057dac: 3001         	adds	r0, #0x1
 8057dae: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057db2: e7ff         	b	0x8057db4 <xTaskPriorityInherit+0x154> @ imm = #-0x2
 8057db4: e7ff         	b	0x8057db6 <xTaskPriorityInherit+0x156> @ imm = #-0x2
;                 }
 8057db6: e00a         	b	0x8057dce <xTaskPriorityInherit+0x16e> @ imm = #0x14
;                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8057db8: f240 1000    	movw	r0, #0x100
 8057dbc: f2c2 0000    	movt	r0, #0x2000
 8057dc0: 6800         	ldr	r0, [r0]
 8057dc2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057dc6: 9904         	ldr	r1, [sp, #0x10]
 8057dc8: f8c1 00a8    	str.w	r0, [r1, #0xa8]
 8057dcc: e7ff         	b	0x8057dce <xTaskPriorityInherit+0x16e> @ imm = #-0x2
 8057dce: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 8057dd0: 9003         	str	r0, [sp, #0xc]
;             }
 8057dd2: e011         	b	0x8057df8 <xTaskPriorityInherit+0x198> @ imm = #0x22
;                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8057dd4: 9804         	ldr	r0, [sp, #0x10]
 8057dd6: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8057dda: f240 1100    	movw	r1, #0x100
 8057dde: f2c2 0100    	movt	r1, #0x2000
 8057de2: 6809         	ldr	r1, [r1]
 8057de4: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057de8: 4288         	cmp	r0, r1
 8057dea: d203         	bhs	0x8057df4 <xTaskPriorityInherit+0x194> @ imm = #0x6
 8057dec: e7ff         	b	0x8057dee <xTaskPriorityInherit+0x18e> @ imm = #-0x2
 8057dee: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 8057df0: 9003         	str	r0, [sp, #0xc]
;                 }
 8057df2: e000         	b	0x8057df6 <xTaskPriorityInherit+0x196> @ imm = #0x0
 8057df4: e7ff         	b	0x8057df6 <xTaskPriorityInherit+0x196> @ imm = #-0x2
 8057df6: e7ff         	b	0x8057df8 <xTaskPriorityInherit+0x198> @ imm = #-0x2
;         }
 8057df8: e000         	b	0x8057dfc <xTaskPriorityInherit+0x19c> @ imm = #0x0
 8057dfa: e7ff         	b	0x8057dfc <xTaskPriorityInherit+0x19c> @ imm = #-0x2
;         return xReturn;
 8057dfc: 9803         	ldr	r0, [sp, #0xc]
 8057dfe: 9001         	str	r0, [sp, #0x4]
 8057e00: 4803         	ldr	r0, [pc, #0xc]          @ 0x8057e10 <xTaskPriorityInherit+0x1b0>
 8057e02: 4780         	blx	r0
 8057e04: 9801         	ldr	r0, [sp, #0x4]
 8057e06: b006         	add	sp, #0x18
 8057e08: bd80         	pop	{r7, pc}
 8057e0a: bf00         	nop

08057e0c <$d.105>:
 8057e0c: c9 b1 05 08  	.word	0x0805b1c9
 8057e10: 21 05 06 08  	.word	0x08060521

08057e14 <xTaskPriorityDisinherit>:
;     {
 8057e14: b580         	push	{r7, lr}
 8057e16: 466f         	mov	r7, sp
 8057e18: b086         	sub	sp, #0x18
 8057e1a: f643 5240    	movw	r2, #0x3d40
 8057e1e: f2c2 0200    	movt	r2, #0x2000
 8057e22: 6811         	ldr	r1, [r2]
 8057e24: f642 5340    	movw	r3, #0x2d40
 8057e28: f2c2 0300    	movt	r3, #0x2000
 8057e2c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8057e30: 3101         	adds	r1, #0x1
 8057e32: 6011         	str	r1, [r2]
 8057e34: 9005         	str	r0, [sp, #0x14]
;         TCB_t * const pxTCB = pxMutexHolder;
 8057e36: 9805         	ldr	r0, [sp, #0x14]
 8057e38: 9004         	str	r0, [sp, #0x10]
 8057e3a: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 8057e3c: 9003         	str	r0, [sp, #0xc]
;         if( pxMutexHolder != NULL )
 8057e3e: 9805         	ldr	r0, [sp, #0x14]
 8057e40: 2800         	cmp	r0, #0x0
 8057e42: f000 8092    	beq.w	0x8057f6a <xTaskPriorityDisinherit+0x156> @ imm = #0x124
 8057e46: e7ff         	b	0x8057e48 <xTaskPriorityDisinherit+0x34> @ imm = #-0x2
;             configASSERT( pxTCB == pxCurrentTCB );
 8057e48: 9804         	ldr	r0, [sp, #0x10]
 8057e4a: f240 1100    	movw	r1, #0x100
 8057e4e: f2c2 0100    	movt	r1, #0x2000
 8057e52: 6809         	ldr	r1, [r1]
 8057e54: 4288         	cmp	r0, r1
 8057e56: d004         	beq	0x8057e62 <xTaskPriorityDisinherit+0x4e> @ imm = #0x8
 8057e58: e7ff         	b	0x8057e5a <xTaskPriorityDisinherit+0x46> @ imm = #-0x2
 8057e5a: 484b         	ldr	r0, [pc, #0x12c]        @ 0x8057f88 <xTaskPriorityDisinherit+0x174>
 8057e5c: 4780         	blx	r0
 8057e5e: e7ff         	b	0x8057e60 <xTaskPriorityDisinherit+0x4c> @ imm = #-0x2
 8057e60: e7fe         	b	0x8057e60 <xTaskPriorityDisinherit+0x4c> @ imm = #-0x4
;             configASSERT( pxTCB->uxMutexesHeld );
 8057e62: 9804         	ldr	r0, [sp, #0x10]
 8057e64: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8057e68: b920         	cbnz	r0, 0x8057e74 <xTaskPriorityDisinherit+0x60> @ imm = #0x8
 8057e6a: e7ff         	b	0x8057e6c <xTaskPriorityDisinherit+0x58> @ imm = #-0x2
 8057e6c: 4845         	ldr	r0, [pc, #0x114]        @ 0x8057f84 <xTaskPriorityDisinherit+0x170>
 8057e6e: 4780         	blx	r0
 8057e70: e7ff         	b	0x8057e72 <xTaskPriorityDisinherit+0x5e> @ imm = #-0x2
 8057e72: e7fe         	b	0x8057e72 <xTaskPriorityDisinherit+0x5e> @ imm = #-0x4
;             ( pxTCB->uxMutexesHeld )--;
 8057e74: 9904         	ldr	r1, [sp, #0x10]
 8057e76: f8d1 00cc    	ldr.w	r0, [r1, #0xcc]
 8057e7a: 3801         	subs	r0, #0x1
 8057e7c: f8c1 00cc    	str.w	r0, [r1, #0xcc]
;             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8057e80: 9904         	ldr	r1, [sp, #0x10]
 8057e82: f8d1 00a8    	ldr.w	r0, [r1, #0xa8]
 8057e86: f8d1 10c8    	ldr.w	r1, [r1, #0xc8]
 8057e8a: 4288         	cmp	r0, r1
 8057e8c: d06b         	beq	0x8057f66 <xTaskPriorityDisinherit+0x152> @ imm = #0xd6
 8057e8e: e7ff         	b	0x8057e90 <xTaskPriorityDisinherit+0x7c> @ imm = #-0x2
;                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8057e90: 9804         	ldr	r0, [sp, #0x10]
 8057e92: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8057e96: 2800         	cmp	r0, #0x0
 8057e98: d163         	bne	0x8057f62 <xTaskPriorityDisinherit+0x14e> @ imm = #0xc6
 8057e9a: e7ff         	b	0x8057e9c <xTaskPriorityDisinherit+0x88> @ imm = #-0x2
;                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8057e9c: 9804         	ldr	r0, [sp, #0x10]
 8057e9e: 3080         	adds	r0, #0x80
 8057ea0: 4936         	ldr	r1, [pc, #0xd8]         @ 0x8057f7c <xTaskPriorityDisinherit+0x168>
 8057ea2: 4788         	blx	r1
 8057ea4: b908         	cbnz	r0, 0x8057eaa <xTaskPriorityDisinherit+0x96> @ imm = #0x2
 8057ea6: e7ff         	b	0x8057ea8 <xTaskPriorityDisinherit+0x94> @ imm = #-0x2
;                     }
 8057ea8: e000         	b	0x8057eac <xTaskPriorityDisinherit+0x98> @ imm = #0x0
 8057eaa: e7ff         	b	0x8057eac <xTaskPriorityDisinherit+0x98> @ imm = #-0x2
;                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 8057eac: 9904         	ldr	r1, [sp, #0x10]
 8057eae: f8d1 00c8    	ldr.w	r0, [r1, #0xc8]
 8057eb2: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057eb6: 9904         	ldr	r1, [sp, #0x10]
 8057eb8: f8d1 00a8    	ldr.w	r0, [r1, #0xa8]
 8057ebc: f1c0 0010    	rsb.w	r0, r0, #0x10
 8057ec0: f8c1 0094    	str.w	r0, [r1, #0x94]
;                     prvAddTaskToReadyList( pxTCB );
 8057ec4: e7ff         	b	0x8057ec6 <xTaskPriorityDisinherit+0xb2> @ imm = #-0x2
 8057ec6: e7ff         	b	0x8057ec8 <xTaskPriorityDisinherit+0xb4> @ imm = #-0x2
 8057ec8: 9804         	ldr	r0, [sp, #0x10]
 8057eca: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057ece: f240 21a0    	movw	r1, #0x2a0
 8057ed2: f2c2 0100    	movt	r1, #0x2000
 8057ed6: 6809         	ldr	r1, [r1]
 8057ed8: 4288         	cmp	r0, r1
 8057eda: d909         	bls	0x8057ef0 <xTaskPriorityDisinherit+0xdc> @ imm = #0x12
 8057edc: e7ff         	b	0x8057ede <xTaskPriorityDisinherit+0xca> @ imm = #-0x2
 8057ede: 9804         	ldr	r0, [sp, #0x10]
 8057ee0: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057ee4: f240 21a0    	movw	r1, #0x2a0
 8057ee8: f2c2 0100    	movt	r1, #0x2000
 8057eec: 6008         	str	r0, [r1]
 8057eee: e7ff         	b	0x8057ef0 <xTaskPriorityDisinherit+0xdc> @ imm = #-0x2
 8057ef0: e7ff         	b	0x8057ef2 <xTaskPriorityDisinherit+0xde> @ imm = #-0x2
 8057ef2: e7ff         	b	0x8057ef4 <xTaskPriorityDisinherit+0xe0> @ imm = #-0x2
 8057ef4: 9804         	ldr	r0, [sp, #0x10]
 8057ef6: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057efa: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057efe: f240 1160    	movw	r1, #0x160
 8057f02: f2c2 0100    	movt	r1, #0x2000
 8057f06: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057f0a: 6840         	ldr	r0, [r0, #0x4]
 8057f0c: 9002         	str	r0, [sp, #0x8]
 8057f0e: 9802         	ldr	r0, [sp, #0x8]
 8057f10: 9a04         	ldr	r2, [sp, #0x10]
 8057f12: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057f16: 9802         	ldr	r0, [sp, #0x8]
 8057f18: 6880         	ldr	r0, [r0, #0x8]
 8057f1a: 9a04         	ldr	r2, [sp, #0x10]
 8057f1c: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057f20: 9804         	ldr	r0, [sp, #0x10]
 8057f22: 3080         	adds	r0, #0x80
 8057f24: 9a02         	ldr	r2, [sp, #0x8]
 8057f26: 6892         	ldr	r2, [r2, #0x8]
 8057f28: 6050         	str	r0, [r2, #0x4]
 8057f2a: 9804         	ldr	r0, [sp, #0x10]
 8057f2c: 3080         	adds	r0, #0x80
 8057f2e: 9a02         	ldr	r2, [sp, #0x8]
 8057f30: 6090         	str	r0, [r2, #0x8]
 8057f32: 9a04         	ldr	r2, [sp, #0x10]
 8057f34: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057f38: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057f3c: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057f40: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057f44: 9804         	ldr	r0, [sp, #0x10]
 8057f46: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057f4a: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057f4e: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057f52: 3001         	adds	r0, #0x1
 8057f54: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057f58: e7ff         	b	0x8057f5a <xTaskPriorityDisinherit+0x146> @ imm = #-0x2
 8057f5a: e7ff         	b	0x8057f5c <xTaskPriorityDisinherit+0x148> @ imm = #-0x2
 8057f5c: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 8057f5e: 9003         	str	r0, [sp, #0xc]
;                 }
 8057f60: e000         	b	0x8057f64 <xTaskPriorityDisinherit+0x150> @ imm = #0x0
 8057f62: e7ff         	b	0x8057f64 <xTaskPriorityDisinherit+0x150> @ imm = #-0x2
;             }
 8057f64: e000         	b	0x8057f68 <xTaskPriorityDisinherit+0x154> @ imm = #0x0
 8057f66: e7ff         	b	0x8057f68 <xTaskPriorityDisinherit+0x154> @ imm = #-0x2
;         }
 8057f68: e000         	b	0x8057f6c <xTaskPriorityDisinherit+0x158> @ imm = #0x0
 8057f6a: e7ff         	b	0x8057f6c <xTaskPriorityDisinherit+0x158> @ imm = #-0x2
;         return xReturn;
 8057f6c: 9803         	ldr	r0, [sp, #0xc]
 8057f6e: 9001         	str	r0, [sp, #0x4]
 8057f70: 4803         	ldr	r0, [pc, #0xc]          @ 0x8057f80 <xTaskPriorityDisinherit+0x16c>
 8057f72: 4780         	blx	r0
 8057f74: 9801         	ldr	r0, [sp, #0x4]
 8057f76: b006         	add	sp, #0x18
 8057f78: bd80         	pop	{r7, pc}
 8057f7a: bf00         	nop

08057f7c <$d.107>:
 8057f7c: c9 b1 05 08  	.word	0x0805b1c9
 8057f80: 21 05 06 08  	.word	0x08060521
 8057f84: 55 ec 05 08  	.word	0x0805ec55
 8057f88: 55 ec 05 08  	.word	0x0805ec55

08057f8c <vTaskPriorityDisinheritAfterTimeout>:
;     {
 8057f8c: b580         	push	{r7, lr}
 8057f8e: 466f         	mov	r7, sp
 8057f90: b088         	sub	sp, #0x20
 8057f92: f643 5340    	movw	r3, #0x3d40
 8057f96: f2c2 0300    	movt	r3, #0x2000
 8057f9a: 681a         	ldr	r2, [r3]
 8057f9c: f642 5c40    	movw	r12, #0x2d40
 8057fa0: f2c2 0c00    	movt	r12, #0x2000
 8057fa4: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8057fa8: 3201         	adds	r2, #0x1
 8057faa: 601a         	str	r2, [r3]
 8057fac: 9007         	str	r0, [sp, #0x1c]
 8057fae: 9106         	str	r1, [sp, #0x18]
;         TCB_t * const pxTCB = pxMutexHolder;
 8057fb0: 9807         	ldr	r0, [sp, #0x1c]
 8057fb2: 9005         	str	r0, [sp, #0x14]
 8057fb4: 2001         	movs	r0, #0x1
;         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8057fb6: 9002         	str	r0, [sp, #0x8]
;         if( pxMutexHolder != NULL )
 8057fb8: 9807         	ldr	r0, [sp, #0x1c]
 8057fba: 2800         	cmp	r0, #0x0
 8057fbc: f000 80b6    	beq.w	0x805812c <vTaskPriorityDisinheritAfterTimeout+0x1a0> @ imm = #0x16c
 8057fc0: e7ff         	b	0x8057fc2 <vTaskPriorityDisinheritAfterTimeout+0x36> @ imm = #-0x2
;             configASSERT( pxTCB->uxMutexesHeld );
 8057fc2: 9805         	ldr	r0, [sp, #0x14]
 8057fc4: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8057fc8: b920         	cbnz	r0, 0x8057fd4 <vTaskPriorityDisinheritAfterTimeout+0x48> @ imm = #0x8
 8057fca: e7ff         	b	0x8057fcc <vTaskPriorityDisinheritAfterTimeout+0x40> @ imm = #-0x2
 8057fcc: 485d         	ldr	r0, [pc, #0x174]        @ 0x8058144 <vTaskPriorityDisinheritAfterTimeout+0x1b8>
 8057fce: 4780         	blx	r0
 8057fd0: e7ff         	b	0x8057fd2 <vTaskPriorityDisinheritAfterTimeout+0x46> @ imm = #-0x2
 8057fd2: e7fe         	b	0x8057fd2 <vTaskPriorityDisinheritAfterTimeout+0x46> @ imm = #-0x4
;             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8057fd4: 9805         	ldr	r0, [sp, #0x14]
 8057fd6: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8057fda: 9906         	ldr	r1, [sp, #0x18]
 8057fdc: 4288         	cmp	r0, r1
 8057fde: d203         	bhs	0x8057fe8 <vTaskPriorityDisinheritAfterTimeout+0x5c> @ imm = #0x6
 8057fe0: e7ff         	b	0x8057fe2 <vTaskPriorityDisinheritAfterTimeout+0x56> @ imm = #-0x2
;                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 8057fe2: 9806         	ldr	r0, [sp, #0x18]
 8057fe4: 9003         	str	r0, [sp, #0xc]
;             }
 8057fe6: e004         	b	0x8057ff2 <vTaskPriorityDisinheritAfterTimeout+0x66> @ imm = #0x8
;                 uxPriorityToUse = pxTCB->uxBasePriority;
 8057fe8: 9805         	ldr	r0, [sp, #0x14]
 8057fea: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8057fee: 9003         	str	r0, [sp, #0xc]
 8057ff0: e7ff         	b	0x8057ff2 <vTaskPriorityDisinheritAfterTimeout+0x66> @ imm = #-0x2
;             if( pxTCB->uxPriority != uxPriorityToUse )
 8057ff2: 9805         	ldr	r0, [sp, #0x14]
 8057ff4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057ff8: 9903         	ldr	r1, [sp, #0xc]
 8057ffa: 4288         	cmp	r0, r1
 8057ffc: f000 8094    	beq.w	0x8058128 <vTaskPriorityDisinheritAfterTimeout+0x19c> @ imm = #0x128
 8058000: e7ff         	b	0x8058002 <vTaskPriorityDisinheritAfterTimeout+0x76> @ imm = #-0x2
;                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8058002: 9805         	ldr	r0, [sp, #0x14]
 8058004: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8058008: 2801         	cmp	r0, #0x1
 805800a: f040 808b    	bne.w	0x8058124 <vTaskPriorityDisinheritAfterTimeout+0x198> @ imm = #0x116
 805800e: e7ff         	b	0x8058010 <vTaskPriorityDisinheritAfterTimeout+0x84> @ imm = #-0x2
;                     configASSERT( pxTCB != pxCurrentTCB );
 8058010: 9805         	ldr	r0, [sp, #0x14]
 8058012: f240 1100    	movw	r1, #0x100
 8058016: f2c2 0100    	movt	r1, #0x2000
 805801a: 6809         	ldr	r1, [r1]
 805801c: 4288         	cmp	r0, r1
 805801e: d104         	bne	0x805802a <vTaskPriorityDisinheritAfterTimeout+0x9e> @ imm = #0x8
 8058020: e7ff         	b	0x8058022 <vTaskPriorityDisinheritAfterTimeout+0x96> @ imm = #-0x2
 8058022: 4847         	ldr	r0, [pc, #0x11c]        @ 0x8058140 <vTaskPriorityDisinheritAfterTimeout+0x1b4>
 8058024: 4780         	blx	r0
 8058026: e7ff         	b	0x8058028 <vTaskPriorityDisinheritAfterTimeout+0x9c> @ imm = #-0x2
 8058028: e7fe         	b	0x8058028 <vTaskPriorityDisinheritAfterTimeout+0x9c> @ imm = #-0x4
;                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 805802a: 9805         	ldr	r0, [sp, #0x14]
 805802c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058030: 9004         	str	r0, [sp, #0x10]
;                     pxTCB->uxPriority = uxPriorityToUse;
 8058032: 9803         	ldr	r0, [sp, #0xc]
 8058034: 9905         	ldr	r1, [sp, #0x14]
 8058036: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 805803a: 9805         	ldr	r0, [sp, #0x14]
 805803c: f890 0097    	ldrb.w	r0, [r0, #0x97]
 8058040: 0600         	lsls	r0, r0, #0x18
 8058042: 2800         	cmp	r0, #0x0
 8058044: d407         	bmi	0x8058056 <vTaskPriorityDisinheritAfterTimeout+0xca> @ imm = #0xe
 8058046: e7ff         	b	0x8058048 <vTaskPriorityDisinheritAfterTimeout+0xbc> @ imm = #-0x2
;                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8058048: 9803         	ldr	r0, [sp, #0xc]
 805804a: f1c0 0010    	rsb.w	r0, r0, #0x10
 805804e: 9905         	ldr	r1, [sp, #0x14]
 8058050: f8c1 0094    	str.w	r0, [r1, #0x94]
;                     }
 8058054: e000         	b	0x8058058 <vTaskPriorityDisinheritAfterTimeout+0xcc> @ imm = #0x0
 8058056: e7ff         	b	0x8058058 <vTaskPriorityDisinheritAfterTimeout+0xcc> @ imm = #-0x2
;                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8058058: 9805         	ldr	r0, [sp, #0x14]
 805805a: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 805805e: 9904         	ldr	r1, [sp, #0x10]
 8058060: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8058064: f240 1160    	movw	r1, #0x160
 8058068: f2c2 0100    	movt	r1, #0x2000
 805806c: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8058070: 4288         	cmp	r0, r1
 8058072: d155         	bne	0x8058120 <vTaskPriorityDisinheritAfterTimeout+0x194> @ imm = #0xaa
 8058074: e7ff         	b	0x8058076 <vTaskPriorityDisinheritAfterTimeout+0xea> @ imm = #-0x2
;                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8058076: 9805         	ldr	r0, [sp, #0x14]
 8058078: 3080         	adds	r0, #0x80
 805807a: 492f         	ldr	r1, [pc, #0xbc]         @ 0x8058138 <vTaskPriorityDisinheritAfterTimeout+0x1ac>
 805807c: 4788         	blx	r1
 805807e: b908         	cbnz	r0, 0x8058084 <vTaskPriorityDisinheritAfterTimeout+0xf8> @ imm = #0x2
 8058080: e7ff         	b	0x8058082 <vTaskPriorityDisinheritAfterTimeout+0xf6> @ imm = #-0x2
;                         }
 8058082: e000         	b	0x8058086 <vTaskPriorityDisinheritAfterTimeout+0xfa> @ imm = #0x0
 8058084: e7ff         	b	0x8058086 <vTaskPriorityDisinheritAfterTimeout+0xfa> @ imm = #-0x2
;                         prvAddTaskToReadyList( pxTCB );
 8058086: e7ff         	b	0x8058088 <vTaskPriorityDisinheritAfterTimeout+0xfc> @ imm = #-0x2
 8058088: e7ff         	b	0x805808a <vTaskPriorityDisinheritAfterTimeout+0xfe> @ imm = #-0x2
 805808a: 9805         	ldr	r0, [sp, #0x14]
 805808c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058090: f240 21a0    	movw	r1, #0x2a0
 8058094: f2c2 0100    	movt	r1, #0x2000
 8058098: 6809         	ldr	r1, [r1]
 805809a: 4288         	cmp	r0, r1
 805809c: d909         	bls	0x80580b2 <vTaskPriorityDisinheritAfterTimeout+0x126> @ imm = #0x12
 805809e: e7ff         	b	0x80580a0 <vTaskPriorityDisinheritAfterTimeout+0x114> @ imm = #-0x2
 80580a0: 9805         	ldr	r0, [sp, #0x14]
 80580a2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80580a6: f240 21a0    	movw	r1, #0x2a0
 80580aa: f2c2 0100    	movt	r1, #0x2000
 80580ae: 6008         	str	r0, [r1]
 80580b0: e7ff         	b	0x80580b2 <vTaskPriorityDisinheritAfterTimeout+0x126> @ imm = #-0x2
 80580b2: e7ff         	b	0x80580b4 <vTaskPriorityDisinheritAfterTimeout+0x128> @ imm = #-0x2
 80580b4: e7ff         	b	0x80580b6 <vTaskPriorityDisinheritAfterTimeout+0x12a> @ imm = #-0x2
 80580b6: 9805         	ldr	r0, [sp, #0x14]
 80580b8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80580bc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80580c0: f240 1160    	movw	r1, #0x160
 80580c4: f2c2 0100    	movt	r1, #0x2000
 80580c8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80580cc: 6840         	ldr	r0, [r0, #0x4]
 80580ce: 9001         	str	r0, [sp, #0x4]
 80580d0: 9801         	ldr	r0, [sp, #0x4]
 80580d2: 9a05         	ldr	r2, [sp, #0x14]
 80580d4: f8c2 0084    	str.w	r0, [r2, #0x84]
 80580d8: 9801         	ldr	r0, [sp, #0x4]
 80580da: 6880         	ldr	r0, [r0, #0x8]
 80580dc: 9a05         	ldr	r2, [sp, #0x14]
 80580de: f8c2 0088    	str.w	r0, [r2, #0x88]
 80580e2: 9805         	ldr	r0, [sp, #0x14]
 80580e4: 3080         	adds	r0, #0x80
 80580e6: 9a01         	ldr	r2, [sp, #0x4]
 80580e8: 6892         	ldr	r2, [r2, #0x8]
 80580ea: 6050         	str	r0, [r2, #0x4]
 80580ec: 9805         	ldr	r0, [sp, #0x14]
 80580ee: 3080         	adds	r0, #0x80
 80580f0: 9a01         	ldr	r2, [sp, #0x4]
 80580f2: 6090         	str	r0, [r2, #0x8]
 80580f4: 9a05         	ldr	r2, [sp, #0x14]
 80580f6: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80580fa: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80580fe: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8058102: f8c2 0090    	str.w	r0, [r2, #0x90]
 8058106: 9805         	ldr	r0, [sp, #0x14]
 8058108: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805810c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8058110: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8058114: 3001         	adds	r0, #0x1
 8058116: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805811a: e7ff         	b	0x805811c <vTaskPriorityDisinheritAfterTimeout+0x190> @ imm = #-0x2
 805811c: e7ff         	b	0x805811e <vTaskPriorityDisinheritAfterTimeout+0x192> @ imm = #-0x2
;                     }
 805811e: e000         	b	0x8058122 <vTaskPriorityDisinheritAfterTimeout+0x196> @ imm = #0x0
 8058120: e7ff         	b	0x8058122 <vTaskPriorityDisinheritAfterTimeout+0x196> @ imm = #-0x2
;                 }
 8058122: e000         	b	0x8058126 <vTaskPriorityDisinheritAfterTimeout+0x19a> @ imm = #0x0
 8058124: e7ff         	b	0x8058126 <vTaskPriorityDisinheritAfterTimeout+0x19a> @ imm = #-0x2
;             }
 8058126: e000         	b	0x805812a <vTaskPriorityDisinheritAfterTimeout+0x19e> @ imm = #0x0
 8058128: e7ff         	b	0x805812a <vTaskPriorityDisinheritAfterTimeout+0x19e> @ imm = #-0x2
;         }
 805812a: e000         	b	0x805812e <vTaskPriorityDisinheritAfterTimeout+0x1a2> @ imm = #0x0
 805812c: e7ff         	b	0x805812e <vTaskPriorityDisinheritAfterTimeout+0x1a2> @ imm = #-0x2
;     }
 805812e: 4803         	ldr	r0, [pc, #0xc]          @ 0x805813c <vTaskPriorityDisinheritAfterTimeout+0x1b0>
 8058130: 4780         	blx	r0
 8058132: b008         	add	sp, #0x20
 8058134: bd80         	pop	{r7, pc}
 8058136: bf00         	nop

08058138 <$d.109>:
 8058138: c9 b1 05 08  	.word	0x0805b1c9
 805813c: 21 05 06 08  	.word	0x08060521
 8058140: 55 ec 05 08  	.word	0x0805ec55
 8058144: 55 ec 05 08  	.word	0x0805ec55

08058148 <uxTaskResetEventItemValue>:
; {
 8058148: b580         	push	{r7, lr}
 805814a: 466f         	mov	r7, sp
 805814c: b082         	sub	sp, #0x8
 805814e: f643 5140    	movw	r1, #0x3d40
 8058152: f2c2 0100    	movt	r1, #0x2000
 8058156: 6808         	ldr	r0, [r1]
 8058158: f642 5240    	movw	r2, #0x2d40
 805815c: f2c2 0200    	movt	r2, #0x2000
 8058160: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8058164: 3001         	adds	r0, #0x1
 8058166: 6008         	str	r0, [r1]
;     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8058168: f240 1100    	movw	r1, #0x100
 805816c: f2c2 0100    	movt	r1, #0x2000
 8058170: 6808         	ldr	r0, [r1]
 8058172: f8d0 0094    	ldr.w	r0, [r0, #0x94]
 8058176: 9001         	str	r0, [sp, #0x4]
;     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8058178: 6808         	ldr	r0, [r1]
 805817a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805817e: f1c0 0010    	rsb.w	r0, r0, #0x10
 8058182: 6809         	ldr	r1, [r1]
 8058184: f8c1 0094    	str.w	r0, [r1, #0x94]
;     return uxReturn;
 8058188: 9801         	ldr	r0, [sp, #0x4]
 805818a: 9000         	str	r0, [sp]
 805818c: 4802         	ldr	r0, [pc, #0x8]          @ 0x8058198 <uxTaskResetEventItemValue+0x50>
 805818e: 4780         	blx	r0
 8058190: 9800         	ldr	r0, [sp]
 8058192: b002         	add	sp, #0x8
 8058194: bd80         	pop	{r7, pc}
 8058196: bf00         	nop

08058198 <$d.111>:
 8058198: 21 05 06 08  	.word	0x08060521

0805819c <pvTaskIncrementMutexHeldCount>:
;     {
 805819c: b580         	push	{r7, lr}
 805819e: 466f         	mov	r7, sp
 80581a0: b082         	sub	sp, #0x8
 80581a2: f643 5140    	movw	r1, #0x3d40
 80581a6: f2c2 0100    	movt	r1, #0x2000
 80581aa: 6808         	ldr	r0, [r1]
 80581ac: f642 5240    	movw	r2, #0x2d40
 80581b0: f2c2 0200    	movt	r2, #0x2000
 80581b4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80581b8: 3001         	adds	r0, #0x1
 80581ba: 6008         	str	r0, [r1]
;         pxTCB = pxCurrentTCB;
 80581bc: f240 1000    	movw	r0, #0x100
 80581c0: f2c2 0000    	movt	r0, #0x2000
 80581c4: 6800         	ldr	r0, [r0]
 80581c6: 9001         	str	r0, [sp, #0x4]
;         if( pxTCB != NULL )
 80581c8: 9801         	ldr	r0, [sp, #0x4]
 80581ca: b138         	cbz	r0, 0x80581dc <pvTaskIncrementMutexHeldCount+0x40> @ imm = #0xe
 80581cc: e7ff         	b	0x80581ce <pvTaskIncrementMutexHeldCount+0x32> @ imm = #-0x2
;             ( pxTCB->uxMutexesHeld )++;
 80581ce: 9901         	ldr	r1, [sp, #0x4]
 80581d0: f8d1 00cc    	ldr.w	r0, [r1, #0xcc]
 80581d4: 3001         	adds	r0, #0x1
 80581d6: f8c1 00cc    	str.w	r0, [r1, #0xcc]
;         }
 80581da: e7ff         	b	0x80581dc <pvTaskIncrementMutexHeldCount+0x40> @ imm = #-0x2
;         return pxTCB;
 80581dc: 9801         	ldr	r0, [sp, #0x4]
 80581de: 9000         	str	r0, [sp]
 80581e0: 4802         	ldr	r0, [pc, #0x8]          @ 0x80581ec <pvTaskIncrementMutexHeldCount+0x50>
 80581e2: 4780         	blx	r0
 80581e4: 9800         	ldr	r0, [sp]
 80581e6: b002         	add	sp, #0x8
 80581e8: bd80         	pop	{r7, pc}
 80581ea: bf00         	nop

080581ec <$d.113>:
 80581ec: 21 05 06 08  	.word	0x08060521

080581f0 <ulTaskGenericNotifyTake>:
;     {
 80581f0: b5d0         	push	{r4, r6, r7, lr}
 80581f2: af02         	add	r7, sp, #0x8
 80581f4: b086         	sub	sp, #0x18
 80581f6: f643 5c40    	movw	r12, #0x3d40
 80581fa: f2c2 0c00    	movt	r12, #0x2000
 80581fe: f8dc 3000    	ldr.w	r3, [r12]
 8058202: f642 5440    	movw	r4, #0x2d40
 8058206: f2c2 0400    	movt	r4, #0x2000
 805820a: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805820e: 3301         	adds	r3, #0x1
 8058210: f8cc 3000    	str.w	r3, [r12]
 8058214: 9005         	str	r0, [sp, #0x14]
 8058216: 9104         	str	r1, [sp, #0x10]
 8058218: 9203         	str	r2, [sp, #0xc]
;         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 805821a: 9805         	ldr	r0, [sp, #0x14]
 805821c: b120         	cbz	r0, 0x8058228 <ulTaskGenericNotifyTake+0x38> @ imm = #0x8
 805821e: e7ff         	b	0x8058220 <ulTaskGenericNotifyTake+0x30> @ imm = #-0x2
 8058220: 4847         	ldr	r0, [pc, #0x11c]        @ 0x8058340 <ulTaskGenericNotifyTake+0x150>
 8058222: 4780         	blx	r0
 8058224: e7ff         	b	0x8058226 <ulTaskGenericNotifyTake+0x36> @ imm = #-0x2
 8058226: e7fe         	b	0x8058226 <ulTaskGenericNotifyTake+0x36> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058228: 483a         	ldr	r0, [pc, #0xe8]         @ 0x8058314 <ulTaskGenericNotifyTake+0x124>
 805822a: 4780         	blx	r0
;         if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0UL )
 805822c: f240 1000    	movw	r0, #0x100
 8058230: f2c2 0000    	movt	r0, #0x2000
 8058234: 6800         	ldr	r0, [r0]
 8058236: 9905         	ldr	r1, [sp, #0x14]
 8058238: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805823c: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8058240: bb20         	cbnz	r0, 0x805828c <ulTaskGenericNotifyTake+0x9c> @ imm = #0x48
 8058242: e7ff         	b	0x8058244 <ulTaskGenericNotifyTake+0x54> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8058244: f240 1000    	movw	r0, #0x100
 8058248: f2c2 0000    	movt	r0, #0x2000
 805824c: 6800         	ldr	r0, [r0]
 805824e: 9905         	ldr	r1, [sp, #0x14]
 8058250: 4401         	add	r1, r0
 8058252: 2001         	movs	r0, #0x1
 8058254: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             if( xTicksToWait > ( TickType_t ) 0 )
 8058258: 9803         	ldr	r0, [sp, #0xc]
 805825a: b198         	cbz	r0, 0x8058284 <ulTaskGenericNotifyTake+0x94> @ imm = #0x26
 805825c: e7ff         	b	0x805825e <ulTaskGenericNotifyTake+0x6e> @ imm = #-0x2
;                 vTaskSuspendAll();
 805825e: 4830         	ldr	r0, [pc, #0xc0]         @ 0x8058320 <ulTaskGenericNotifyTake+0x130>
 8058260: 4780         	blx	r0
;                     taskEXIT_CRITICAL();
 8058262: 4830         	ldr	r0, [pc, #0xc0]         @ 0x8058324 <ulTaskGenericNotifyTake+0x134>
 8058264: 4780         	blx	r0
;                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8058266: 9803         	ldr	r0, [sp, #0xc]
 8058268: 4a2f         	ldr	r2, [pc, #0xbc]         @ 0x8058328 <ulTaskGenericNotifyTake+0x138>
 805826a: 2101         	movs	r1, #0x1
 805826c: 4790         	blx	r2
;                 xAlreadyYielded = xTaskResumeAll();
 805826e: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805832c <ulTaskGenericNotifyTake+0x13c>
 8058270: 4780         	blx	r0
 8058272: 9001         	str	r0, [sp, #0x4]
;                 if( xAlreadyYielded == pdFALSE )
 8058274: 9801         	ldr	r0, [sp, #0x4]
 8058276: b918         	cbnz	r0, 0x8058280 <ulTaskGenericNotifyTake+0x90> @ imm = #0x6
 8058278: e7ff         	b	0x805827a <ulTaskGenericNotifyTake+0x8a> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805827a: 482d         	ldr	r0, [pc, #0xb4]         @ 0x8058330 <ulTaskGenericNotifyTake+0x140>
 805827c: 4780         	blx	r0
;                 }
 805827e: e000         	b	0x8058282 <ulTaskGenericNotifyTake+0x92> @ imm = #0x0
 8058280: e7ff         	b	0x8058282 <ulTaskGenericNotifyTake+0x92> @ imm = #-0x2
;             }
 8058282: e002         	b	0x805828a <ulTaskGenericNotifyTake+0x9a> @ imm = #0x4
;                 taskEXIT_CRITICAL();
 8058284: 4825         	ldr	r0, [pc, #0x94]         @ 0x805831c <ulTaskGenericNotifyTake+0x12c>
 8058286: 4780         	blx	r0
 8058288: e7ff         	b	0x805828a <ulTaskGenericNotifyTake+0x9a> @ imm = #-0x2
;         }
 805828a: e002         	b	0x8058292 <ulTaskGenericNotifyTake+0xa2> @ imm = #0x4
;             taskEXIT_CRITICAL();
 805828c: 4822         	ldr	r0, [pc, #0x88]         @ 0x8058318 <ulTaskGenericNotifyTake+0x128>
 805828e: 4780         	blx	r0
 8058290: e7ff         	b	0x8058292 <ulTaskGenericNotifyTake+0xa2> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8058292: 4828         	ldr	r0, [pc, #0xa0]         @ 0x8058334 <ulTaskGenericNotifyTake+0x144>
 8058294: 4780         	blx	r0
;             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8058296: f240 1000    	movw	r0, #0x100
 805829a: f2c2 0000    	movt	r0, #0x2000
 805829e: 6800         	ldr	r0, [r0]
 80582a0: 9905         	ldr	r1, [sp, #0x14]
 80582a2: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80582a6: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 80582aa: 9002         	str	r0, [sp, #0x8]
;             if( ulReturn != 0UL )
 80582ac: 9802         	ldr	r0, [sp, #0x8]
 80582ae: b1e8         	cbz	r0, 0x80582ec <ulTaskGenericNotifyTake+0xfc> @ imm = #0x3a
 80582b0: e7ff         	b	0x80582b2 <ulTaskGenericNotifyTake+0xc2> @ imm = #-0x2
;                 if( xClearCountOnExit != pdFALSE )
 80582b2: 9804         	ldr	r0, [sp, #0x10]
 80582b4: b160         	cbz	r0, 0x80582d0 <ulTaskGenericNotifyTake+0xe0> @ imm = #0x18
 80582b6: e7ff         	b	0x80582b8 <ulTaskGenericNotifyTake+0xc8> @ imm = #-0x2
;                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = 0UL;
 80582b8: f240 1000    	movw	r0, #0x100
 80582bc: f2c2 0000    	movt	r0, #0x2000
 80582c0: 6800         	ldr	r0, [r0]
 80582c2: 9905         	ldr	r1, [sp, #0x14]
 80582c4: eb00 0181    	add.w	r1, r0, r1, lsl #2
 80582c8: 2000         	movs	r0, #0x0
 80582ca: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                 }
 80582ce: e00c         	b	0x80582ea <ulTaskGenericNotifyTake+0xfa> @ imm = #0x18
;                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 80582d0: 9802         	ldr	r0, [sp, #0x8]
 80582d2: 3801         	subs	r0, #0x1
 80582d4: f240 1100    	movw	r1, #0x100
 80582d8: f2c2 0100    	movt	r1, #0x2000
 80582dc: 6809         	ldr	r1, [r1]
 80582de: 9a05         	ldr	r2, [sp, #0x14]
 80582e0: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80582e4: f8c1 00d0    	str.w	r0, [r1, #0xd0]
 80582e8: e7ff         	b	0x80582ea <ulTaskGenericNotifyTake+0xfa> @ imm = #-0x2
;             }
 80582ea: e000         	b	0x80582ee <ulTaskGenericNotifyTake+0xfe> @ imm = #0x0
 80582ec: e7ff         	b	0x80582ee <ulTaskGenericNotifyTake+0xfe> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80582ee: f240 1000    	movw	r0, #0x100
 80582f2: f2c2 0000    	movt	r0, #0x2000
 80582f6: 6800         	ldr	r0, [r0]
 80582f8: 9905         	ldr	r1, [sp, #0x14]
 80582fa: 4401         	add	r1, r0
 80582fc: 2000         	movs	r0, #0x0
 80582fe: f881 00d4    	strb.w	r0, [r1, #0xd4]
;         taskEXIT_CRITICAL();
 8058302: 480d         	ldr	r0, [pc, #0x34]         @ 0x8058338 <ulTaskGenericNotifyTake+0x148>
 8058304: 4780         	blx	r0
;         return ulReturn;
 8058306: 9802         	ldr	r0, [sp, #0x8]
 8058308: 9000         	str	r0, [sp]
 805830a: 480c         	ldr	r0, [pc, #0x30]         @ 0x805833c <ulTaskGenericNotifyTake+0x14c>
 805830c: 4780         	blx	r0
 805830e: 9800         	ldr	r0, [sp]
 8058310: b006         	add	sp, #0x18
 8058312: bdd0         	pop	{r4, r6, r7, pc}

08058314 <$d.115>:
 8058314: 05 e1 05 08  	.word	0x0805e105
 8058318: 4d e1 05 08  	.word	0x0805e14d
 805831c: 4d e1 05 08  	.word	0x0805e14d
 8058320: b9 59 05 08  	.word	0x080559b9
 8058324: 4d e1 05 08  	.word	0x0805e14d
 8058328: f1 59 05 08  	.word	0x080559f1
 805832c: 29 5b 05 08  	.word	0x08055b29
 8058330: c5 e0 05 08  	.word	0x0805e0c5
 8058334: 05 e1 05 08  	.word	0x0805e105
 8058338: 4d e1 05 08  	.word	0x0805e14d
 805833c: 21 05 06 08  	.word	0x08060521
 8058340: 55 ec 05 08  	.word	0x0805ec55

08058344 <xTaskGenericNotifyWait>:
;     {
 8058344: b5b0         	push	{r4, r5, r7, lr}
 8058346: af02         	add	r7, sp, #0x8
 8058348: b088         	sub	sp, #0x20
 805834a: 4674         	mov	r4, lr
 805834c: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8058350: f643 5e40    	movw	lr, #0x3d40
 8058354: f2c2 0e00    	movt	lr, #0x2000
 8058358: f8de c000    	ldr.w	r12, [lr]
 805835c: f642 5540    	movw	r5, #0x2d40
 8058360: f2c2 0500    	movt	r5, #0x2000
 8058364: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 8058368: f10c 0c01    	add.w	r12, r12, #0x1
 805836c: f8ce c000    	str.w	r12, [lr]
 8058370: 9007         	str	r0, [sp, #0x1c]
 8058372: 9106         	str	r1, [sp, #0x18]
 8058374: 9205         	str	r2, [sp, #0x14]
 8058376: 9304         	str	r3, [sp, #0x10]
;         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8058378: 9807         	ldr	r0, [sp, #0x1c]
 805837a: b120         	cbz	r0, 0x8058386 <xTaskGenericNotifyWait+0x42> @ imm = #0x8
 805837c: e7ff         	b	0x805837e <xTaskGenericNotifyWait+0x3a> @ imm = #-0x2
 805837e: 484f         	ldr	r0, [pc, #0x13c]        @ 0x80584bc <xTaskGenericNotifyWait+0x178>
 8058380: 4780         	blx	r0
 8058382: e7ff         	b	0x8058384 <xTaskGenericNotifyWait+0x40> @ imm = #-0x2
 8058384: e7fe         	b	0x8058384 <xTaskGenericNotifyWait+0x40> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058386: 4842         	ldr	r0, [pc, #0x108]        @ 0x8058490 <xTaskGenericNotifyWait+0x14c>
 8058388: 4780         	blx	r0
;         if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 805838a: f240 1000    	movw	r0, #0x100
 805838e: f2c2 0000    	movt	r0, #0x2000
 8058392: 6800         	ldr	r0, [r0]
 8058394: 9907         	ldr	r1, [sp, #0x1c]
 8058396: 4408         	add	r0, r1
 8058398: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 805839c: 2802         	cmp	r0, #0x2
 805839e: d02e         	beq	0x80583fe <xTaskGenericNotifyWait+0xba> @ imm = #0x5c
 80583a0: e7ff         	b	0x80583a2 <xTaskGenericNotifyWait+0x5e> @ imm = #-0x2
;             pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80583a2: 9b06         	ldr	r3, [sp, #0x18]
 80583a4: f240 1000    	movw	r0, #0x100
 80583a8: f2c2 0000    	movt	r0, #0x2000
 80583ac: 6801         	ldr	r1, [r0]
 80583ae: 9a07         	ldr	r2, [sp, #0x1c]
 80583b0: eb01 0282    	add.w	r2, r1, r2, lsl #2
 80583b4: f8d2 10d0    	ldr.w	r1, [r2, #0xd0]
 80583b8: 4399         	bics	r1, r3
 80583ba: f8c2 10d0    	str.w	r1, [r2, #0xd0]
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80583be: 6800         	ldr	r0, [r0]
 80583c0: 9907         	ldr	r1, [sp, #0x1c]
 80583c2: 4401         	add	r1, r0
 80583c4: 2001         	movs	r0, #0x1
 80583c6: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             if( xTicksToWait > ( TickType_t ) 0 )
 80583ca: 68b8         	ldr	r0, [r7, #0x8]
 80583cc: b198         	cbz	r0, 0x80583f6 <xTaskGenericNotifyWait+0xb2> @ imm = #0x26
 80583ce: e7ff         	b	0x80583d0 <xTaskGenericNotifyWait+0x8c> @ imm = #-0x2
;                 vTaskSuspendAll();
 80583d0: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805849c <xTaskGenericNotifyWait+0x158>
 80583d2: 4780         	blx	r0
;                     taskEXIT_CRITICAL();
 80583d4: 4832         	ldr	r0, [pc, #0xc8]         @ 0x80584a0 <xTaskGenericNotifyWait+0x15c>
 80583d6: 4780         	blx	r0
;                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80583d8: 68b8         	ldr	r0, [r7, #0x8]
 80583da: 4a32         	ldr	r2, [pc, #0xc8]         @ 0x80584a4 <xTaskGenericNotifyWait+0x160>
 80583dc: 2101         	movs	r1, #0x1
 80583de: 4790         	blx	r2
;                 xAlreadyYielded = xTaskResumeAll();
 80583e0: 4831         	ldr	r0, [pc, #0xc4]         @ 0x80584a8 <xTaskGenericNotifyWait+0x164>
 80583e2: 4780         	blx	r0
 80583e4: 9002         	str	r0, [sp, #0x8]
;                 if( xAlreadyYielded == pdFALSE )
 80583e6: 9802         	ldr	r0, [sp, #0x8]
 80583e8: b918         	cbnz	r0, 0x80583f2 <xTaskGenericNotifyWait+0xae> @ imm = #0x6
 80583ea: e7ff         	b	0x80583ec <xTaskGenericNotifyWait+0xa8> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 80583ec: 482f         	ldr	r0, [pc, #0xbc]         @ 0x80584ac <xTaskGenericNotifyWait+0x168>
 80583ee: 4780         	blx	r0
;                 }
 80583f0: e000         	b	0x80583f4 <xTaskGenericNotifyWait+0xb0> @ imm = #0x0
 80583f2: e7ff         	b	0x80583f4 <xTaskGenericNotifyWait+0xb0> @ imm = #-0x2
;             }
 80583f4: e002         	b	0x80583fc <xTaskGenericNotifyWait+0xb8> @ imm = #0x4
;                 taskEXIT_CRITICAL();
 80583f6: 4828         	ldr	r0, [pc, #0xa0]         @ 0x8058498 <xTaskGenericNotifyWait+0x154>
 80583f8: 4780         	blx	r0
 80583fa: e7ff         	b	0x80583fc <xTaskGenericNotifyWait+0xb8> @ imm = #-0x2
;         }
 80583fc: e002         	b	0x8058404 <xTaskGenericNotifyWait+0xc0> @ imm = #0x4
;             taskEXIT_CRITICAL();
 80583fe: 4825         	ldr	r0, [pc, #0x94]         @ 0x8058494 <xTaskGenericNotifyWait+0x150>
 8058400: 4780         	blx	r0
 8058402: e7ff         	b	0x8058404 <xTaskGenericNotifyWait+0xc0> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8058404: 482a         	ldr	r0, [pc, #0xa8]         @ 0x80584b0 <xTaskGenericNotifyWait+0x16c>
 8058406: 4780         	blx	r0
;             if( pulNotificationValue != NULL )
 8058408: 9804         	ldr	r0, [sp, #0x10]
 805840a: b168         	cbz	r0, 0x8058428 <xTaskGenericNotifyWait+0xe4> @ imm = #0x1a
 805840c: e7ff         	b	0x805840e <xTaskGenericNotifyWait+0xca> @ imm = #-0x2
;                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 805840e: f240 1000    	movw	r0, #0x100
 8058412: f2c2 0000    	movt	r0, #0x2000
 8058416: 6800         	ldr	r0, [r0]
 8058418: 9907         	ldr	r1, [sp, #0x1c]
 805841a: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805841e: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8058422: 9904         	ldr	r1, [sp, #0x10]
 8058424: 6008         	str	r0, [r1]
;             }
 8058426: e7ff         	b	0x8058428 <xTaskGenericNotifyWait+0xe4> @ imm = #-0x2
;             if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8058428: f240 1000    	movw	r0, #0x100
 805842c: f2c2 0000    	movt	r0, #0x2000
 8058430: 6800         	ldr	r0, [r0]
 8058432: 9907         	ldr	r1, [sp, #0x1c]
 8058434: 4408         	add	r0, r1
 8058436: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 805843a: 2802         	cmp	r0, #0x2
 805843c: d003         	beq	0x8058446 <xTaskGenericNotifyWait+0x102> @ imm = #0x6
 805843e: e7ff         	b	0x8058440 <xTaskGenericNotifyWait+0xfc> @ imm = #-0x2
 8058440: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 8058442: 9003         	str	r0, [sp, #0xc]
;             }
 8058444: e010         	b	0x8058468 <xTaskGenericNotifyWait+0x124> @ imm = #0x20
;                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8058446: 9a05         	ldr	r2, [sp, #0x14]
 8058448: f240 1000    	movw	r0, #0x100
 805844c: f2c2 0000    	movt	r0, #0x2000
 8058450: 6800         	ldr	r0, [r0]
 8058452: 9907         	ldr	r1, [sp, #0x1c]
 8058454: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8058458: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 805845c: 4390         	bics	r0, r2
 805845e: f8c1 00d0    	str.w	r0, [r1, #0xd0]
 8058462: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 8058464: 9003         	str	r0, [sp, #0xc]
 8058466: e7ff         	b	0x8058468 <xTaskGenericNotifyWait+0x124> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8058468: f240 1000    	movw	r0, #0x100
 805846c: f2c2 0000    	movt	r0, #0x2000
 8058470: 6800         	ldr	r0, [r0]
 8058472: 9907         	ldr	r1, [sp, #0x1c]
 8058474: 4401         	add	r1, r0
 8058476: 2000         	movs	r0, #0x0
 8058478: f881 00d4    	strb.w	r0, [r1, #0xd4]
;         taskEXIT_CRITICAL();
 805847c: 480d         	ldr	r0, [pc, #0x34]         @ 0x80584b4 <xTaskGenericNotifyWait+0x170>
 805847e: 4780         	blx	r0
;         return xReturn;
 8058480: 9803         	ldr	r0, [sp, #0xc]
 8058482: 9001         	str	r0, [sp, #0x4]
 8058484: 480c         	ldr	r0, [pc, #0x30]         @ 0x80584b8 <xTaskGenericNotifyWait+0x174>
 8058486: 4780         	blx	r0
 8058488: 9801         	ldr	r0, [sp, #0x4]
 805848a: b008         	add	sp, #0x20
 805848c: bdb0         	pop	{r4, r5, r7, pc}
 805848e: bf00         	nop

08058490 <$d.117>:
 8058490: 05 e1 05 08  	.word	0x0805e105
 8058494: 4d e1 05 08  	.word	0x0805e14d
 8058498: 4d e1 05 08  	.word	0x0805e14d
 805849c: b9 59 05 08  	.word	0x080559b9
 80584a0: 4d e1 05 08  	.word	0x0805e14d
 80584a4: f1 59 05 08  	.word	0x080559f1
 80584a8: 29 5b 05 08  	.word	0x08055b29
 80584ac: c5 e0 05 08  	.word	0x0805e0c5
 80584b0: 05 e1 05 08  	.word	0x0805e105
 80584b4: 4d e1 05 08  	.word	0x0805e14d
 80584b8: 21 05 06 08  	.word	0x08060521
 80584bc: 55 ec 05 08  	.word	0x0805ec55

080584c0 <xTaskGenericNotify>:
;     {
 80584c0: b5b0         	push	{r4, r5, r7, lr}
 80584c2: af02         	add	r7, sp, #0x8
 80584c4: b08c         	sub	sp, #0x30
 80584c6: 4674         	mov	r4, lr
 80584c8: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80584cc: f643 5e40    	movw	lr, #0x3d40
 80584d0: f2c2 0e00    	movt	lr, #0x2000
 80584d4: f8de c000    	ldr.w	r12, [lr]
 80584d8: f642 5540    	movw	r5, #0x2d40
 80584dc: f2c2 0500    	movt	r5, #0x2000
 80584e0: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 80584e4: f10c 0c01    	add.w	r12, r12, #0x1
 80584e8: f8ce c000    	str.w	r12, [lr]
 80584ec: 900b         	str	r0, [sp, #0x2c]
 80584ee: 910a         	str	r1, [sp, #0x28]
 80584f0: 9209         	str	r2, [sp, #0x24]
 80584f2: f807 3c15    	strb	r3, [r7, #-21]
 80584f6: 2001         	movs	r0, #0x1
;         BaseType_t xReturn = pdPASS;
 80584f8: 9006         	str	r0, [sp, #0x18]
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80584fa: 980a         	ldr	r0, [sp, #0x28]
 80584fc: b120         	cbz	r0, 0x8058508 <xTaskGenericNotify+0x48> @ imm = #0x8
 80584fe: e7ff         	b	0x8058500 <xTaskGenericNotify+0x40> @ imm = #-0x2
 8058500: 4893         	ldr	r0, [pc, #0x24c]        @ 0x8058750 <xTaskGenericNotify+0x290>
 8058502: 4780         	blx	r0
 8058504: e7ff         	b	0x8058506 <xTaskGenericNotify+0x46> @ imm = #-0x2
 8058506: e7fe         	b	0x8058506 <xTaskGenericNotify+0x46> @ imm = #-0x4
;         configASSERT( xTaskToNotify );
 8058508: 980b         	ldr	r0, [sp, #0x2c]
 805850a: b920         	cbnz	r0, 0x8058516 <xTaskGenericNotify+0x56> @ imm = #0x8
 805850c: e7ff         	b	0x805850e <xTaskGenericNotify+0x4e> @ imm = #-0x2
 805850e: 488f         	ldr	r0, [pc, #0x23c]        @ 0x805874c <xTaskGenericNotify+0x28c>
 8058510: 4780         	blx	r0
 8058512: e7ff         	b	0x8058514 <xTaskGenericNotify+0x54> @ imm = #-0x2
 8058514: e7fe         	b	0x8058514 <xTaskGenericNotify+0x54> @ imm = #-0x4
;         pxTCB = xTaskToNotify;
 8058516: 980b         	ldr	r0, [sp, #0x2c]
 8058518: 9007         	str	r0, [sp, #0x1c]
;         taskENTER_CRITICAL();
 805851a: 4886         	ldr	r0, [pc, #0x218]        @ 0x8058734 <xTaskGenericNotify+0x274>
 805851c: 4780         	blx	r0
;             if( pulPreviousNotificationValue != NULL )
 805851e: 68b8         	ldr	r0, [r7, #0x8]
 8058520: b148         	cbz	r0, 0x8058536 <xTaskGenericNotify+0x76> @ imm = #0x12
 8058522: e7ff         	b	0x8058524 <xTaskGenericNotify+0x64> @ imm = #-0x2
;                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8058524: 9807         	ldr	r0, [sp, #0x1c]
 8058526: 990a         	ldr	r1, [sp, #0x28]
 8058528: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805852c: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8058530: 68b9         	ldr	r1, [r7, #0x8]
 8058532: 6008         	str	r0, [r1]
;             }
 8058534: e7ff         	b	0x8058536 <xTaskGenericNotify+0x76> @ imm = #-0x2
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8058536: 9807         	ldr	r0, [sp, #0x1c]
 8058538: 990a         	ldr	r1, [sp, #0x28]
 805853a: 4408         	add	r0, r1
 805853c: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8058540: f807 0c21    	strb	r0, [r7, #-33]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8058544: 9807         	ldr	r0, [sp, #0x1c]
 8058546: 990a         	ldr	r1, [sp, #0x28]
 8058548: 4401         	add	r1, r0
 805854a: 2002         	movs	r0, #0x2
 805854c: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             switch( eAction )
 8058550: f817 0c15    	ldrb	r0, [r7, #-21]
 8058554: 4601         	mov	r1, r0
 8058556: 9102         	str	r1, [sp, #0x8]
 8058558: 2800         	cmp	r0, #0x0
 805855a: d03e         	beq	0x80585da <xTaskGenericNotify+0x11a> @ imm = #0x7c
 805855c: e7ff         	b	0x805855e <xTaskGenericNotify+0x9e> @ imm = #-0x2
 805855e: 9802         	ldr	r0, [sp, #0x8]
 8058560: 2801         	cmp	r0, #0x1
 8058562: d00c         	beq	0x805857e <xTaskGenericNotify+0xbe> @ imm = #0x18
 8058564: e7ff         	b	0x8058566 <xTaskGenericNotify+0xa6> @ imm = #-0x2
 8058566: 9802         	ldr	r0, [sp, #0x8]
 8058568: 2802         	cmp	r0, #0x2
 805856a: d013         	beq	0x8058594 <xTaskGenericNotify+0xd4> @ imm = #0x26
 805856c: e7ff         	b	0x805856e <xTaskGenericNotify+0xae> @ imm = #-0x2
 805856e: 9802         	ldr	r0, [sp, #0x8]
 8058570: 2803         	cmp	r0, #0x3
 8058572: d019         	beq	0x80585a8 <xTaskGenericNotify+0xe8> @ imm = #0x32
 8058574: e7ff         	b	0x8058576 <xTaskGenericNotify+0xb6> @ imm = #-0x2
 8058576: 9802         	ldr	r0, [sp, #0x8]
 8058578: 2804         	cmp	r0, #0x4
 805857a: d01d         	beq	0x80585b8 <xTaskGenericNotify+0xf8> @ imm = #0x3a
 805857c: e02e         	b	0x80585dc <xTaskGenericNotify+0x11c> @ imm = #0x5c
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 805857e: 9a09         	ldr	r2, [sp, #0x24]
 8058580: 9807         	ldr	r0, [sp, #0x1c]
 8058582: 990a         	ldr	r1, [sp, #0x28]
 8058584: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8058588: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 805858c: 4310         	orrs	r0, r2
 805858e: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8058592: e02f         	b	0x80585f4 <xTaskGenericNotify+0x134> @ imm = #0x5e
;                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8058594: 9807         	ldr	r0, [sp, #0x1c]
 8058596: 990a         	ldr	r1, [sp, #0x28]
 8058598: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805859c: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 80585a0: 3001         	adds	r0, #0x1
 80585a2: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 80585a6: e025         	b	0x80585f4 <xTaskGenericNotify+0x134> @ imm = #0x4a
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80585a8: 9809         	ldr	r0, [sp, #0x24]
 80585aa: 9907         	ldr	r1, [sp, #0x1c]
 80585ac: 9a0a         	ldr	r2, [sp, #0x28]
 80585ae: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80585b2: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 80585b6: e01d         	b	0x80585f4 <xTaskGenericNotify+0x134> @ imm = #0x3a
;                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80585b8: f817 0c21    	ldrb	r0, [r7, #-33]
 80585bc: 2802         	cmp	r0, #0x2
 80585be: d008         	beq	0x80585d2 <xTaskGenericNotify+0x112> @ imm = #0x10
 80585c0: e7ff         	b	0x80585c2 <xTaskGenericNotify+0x102> @ imm = #-0x2
;                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80585c2: 9809         	ldr	r0, [sp, #0x24]
 80585c4: 9907         	ldr	r1, [sp, #0x1c]
 80585c6: 9a0a         	ldr	r2, [sp, #0x28]
 80585c8: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80585cc: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     }
 80585d0: e002         	b	0x80585d8 <xTaskGenericNotify+0x118> @ imm = #0x4
 80585d2: 2000         	movs	r0, #0x0
;                         xReturn = pdFAIL;
 80585d4: 9006         	str	r0, [sp, #0x18]
 80585d6: e7ff         	b	0x80585d8 <xTaskGenericNotify+0x118> @ imm = #-0x2
;                     break;
 80585d8: e00c         	b	0x80585f4 <xTaskGenericNotify+0x134> @ imm = #0x18
;                     break;
 80585da: e00b         	b	0x80585f4 <xTaskGenericNotify+0x134> @ imm = #0x16
;                     configASSERT( xTickCount == ( TickType_t ) 0 );
 80585dc: f240 102c    	movw	r0, #0x12c
 80585e0: f2c2 0000    	movt	r0, #0x2000
 80585e4: 6800         	ldr	r0, [r0]
 80585e6: b120         	cbz	r0, 0x80585f2 <xTaskGenericNotify+0x132> @ imm = #0x8
 80585e8: e7ff         	b	0x80585ea <xTaskGenericNotify+0x12a> @ imm = #-0x2
 80585ea: 4857         	ldr	r0, [pc, #0x15c]        @ 0x8058748 <xTaskGenericNotify+0x288>
 80585ec: 4780         	blx	r0
 80585ee: e7ff         	b	0x80585f0 <xTaskGenericNotify+0x130> @ imm = #-0x2
 80585f0: e7fe         	b	0x80585f0 <xTaskGenericNotify+0x130> @ imm = #-0x4
;                     break;
 80585f2: e7ff         	b	0x80585f4 <xTaskGenericNotify+0x134> @ imm = #-0x2
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80585f4: f817 0c21    	ldrb	r0, [r7, #-33]
 80585f8: 2801         	cmp	r0, #0x1
 80585fa: f040 8091    	bne.w	0x8058720 <xTaskGenericNotify+0x260> @ imm = #0x122
 80585fe: e7ff         	b	0x8058600 <xTaskGenericNotify+0x140> @ imm = #-0x2
;                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8058600: e7ff         	b	0x8058602 <xTaskGenericNotify+0x142> @ imm = #-0x2
 8058602: 9807         	ldr	r0, [sp, #0x1c]
 8058604: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8058608: 9004         	str	r0, [sp, #0x10]
 805860a: 9807         	ldr	r0, [sp, #0x1c]
 805860c: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8058610: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8058614: 6088         	str	r0, [r1, #0x8]
 8058616: 9907         	ldr	r1, [sp, #0x1c]
 8058618: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 805861c: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8058620: 6048         	str	r0, [r1, #0x4]
 8058622: 9804         	ldr	r0, [sp, #0x10]
 8058624: 6840         	ldr	r0, [r0, #0x4]
 8058626: 9907         	ldr	r1, [sp, #0x1c]
 8058628: 3180         	adds	r1, #0x80
 805862a: 4288         	cmp	r0, r1
 805862c: d106         	bne	0x805863c <xTaskGenericNotify+0x17c> @ imm = #0xc
 805862e: e7ff         	b	0x8058630 <xTaskGenericNotify+0x170> @ imm = #-0x2
 8058630: 9807         	ldr	r0, [sp, #0x1c]
 8058632: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8058636: 9904         	ldr	r1, [sp, #0x10]
 8058638: 6048         	str	r0, [r1, #0x4]
 805863a: e7ff         	b	0x805863c <xTaskGenericNotify+0x17c> @ imm = #-0x2
 805863c: 9907         	ldr	r1, [sp, #0x1c]
 805863e: 2000         	movs	r0, #0x0
 8058640: f8c1 0090    	str.w	r0, [r1, #0x90]
 8058644: 9904         	ldr	r1, [sp, #0x10]
 8058646: 6808         	ldr	r0, [r1]
 8058648: 3801         	subs	r0, #0x1
 805864a: 6008         	str	r0, [r1]
 805864c: e7ff         	b	0x805864e <xTaskGenericNotify+0x18e> @ imm = #-0x2
;                 prvAddTaskToReadyList( pxTCB );
 805864e: e7ff         	b	0x8058650 <xTaskGenericNotify+0x190> @ imm = #-0x2
 8058650: e7ff         	b	0x8058652 <xTaskGenericNotify+0x192> @ imm = #-0x2
 8058652: 9807         	ldr	r0, [sp, #0x1c]
 8058654: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058658: f240 21a0    	movw	r1, #0x2a0
 805865c: f2c2 0100    	movt	r1, #0x2000
 8058660: 6809         	ldr	r1, [r1]
 8058662: 4288         	cmp	r0, r1
 8058664: d909         	bls	0x805867a <xTaskGenericNotify+0x1ba> @ imm = #0x12
 8058666: e7ff         	b	0x8058668 <xTaskGenericNotify+0x1a8> @ imm = #-0x2
 8058668: 9807         	ldr	r0, [sp, #0x1c]
 805866a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805866e: f240 21a0    	movw	r1, #0x2a0
 8058672: f2c2 0100    	movt	r1, #0x2000
 8058676: 6008         	str	r0, [r1]
 8058678: e7ff         	b	0x805867a <xTaskGenericNotify+0x1ba> @ imm = #-0x2
 805867a: e7ff         	b	0x805867c <xTaskGenericNotify+0x1bc> @ imm = #-0x2
 805867c: e7ff         	b	0x805867e <xTaskGenericNotify+0x1be> @ imm = #-0x2
 805867e: 9807         	ldr	r0, [sp, #0x1c]
 8058680: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058684: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058688: f240 1160    	movw	r1, #0x160
 805868c: f2c2 0100    	movt	r1, #0x2000
 8058690: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8058694: 6840         	ldr	r0, [r0, #0x4]
 8058696: 9003         	str	r0, [sp, #0xc]
 8058698: 9803         	ldr	r0, [sp, #0xc]
 805869a: 9a07         	ldr	r2, [sp, #0x1c]
 805869c: f8c2 0084    	str.w	r0, [r2, #0x84]
 80586a0: 9803         	ldr	r0, [sp, #0xc]
 80586a2: 6880         	ldr	r0, [r0, #0x8]
 80586a4: 9a07         	ldr	r2, [sp, #0x1c]
 80586a6: f8c2 0088    	str.w	r0, [r2, #0x88]
 80586aa: 9807         	ldr	r0, [sp, #0x1c]
 80586ac: 3080         	adds	r0, #0x80
 80586ae: 9a03         	ldr	r2, [sp, #0xc]
 80586b0: 6892         	ldr	r2, [r2, #0x8]
 80586b2: 6050         	str	r0, [r2, #0x4]
 80586b4: 9807         	ldr	r0, [sp, #0x1c]
 80586b6: 3080         	adds	r0, #0x80
 80586b8: 9a03         	ldr	r2, [sp, #0xc]
 80586ba: 6090         	str	r0, [r2, #0x8]
 80586bc: 9a07         	ldr	r2, [sp, #0x1c]
 80586be: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80586c2: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80586c6: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80586ca: f8c2 0090    	str.w	r0, [r2, #0x90]
 80586ce: 9807         	ldr	r0, [sp, #0x1c]
 80586d0: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80586d4: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80586d8: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80586dc: 3001         	adds	r0, #0x1
 80586de: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80586e2: e7ff         	b	0x80586e4 <xTaskGenericNotify+0x224> @ imm = #-0x2
 80586e4: e7ff         	b	0x80586e6 <xTaskGenericNotify+0x226> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80586e6: 9807         	ldr	r0, [sp, #0x1c]
 80586e8: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80586ec: b120         	cbz	r0, 0x80586f8 <xTaskGenericNotify+0x238> @ imm = #0x8
 80586ee: e7ff         	b	0x80586f0 <xTaskGenericNotify+0x230> @ imm = #-0x2
 80586f0: 4814         	ldr	r0, [pc, #0x50]         @ 0x8058744 <xTaskGenericNotify+0x284>
 80586f2: 4780         	blx	r0
 80586f4: e7ff         	b	0x80586f6 <xTaskGenericNotify+0x236> @ imm = #-0x2
 80586f6: e7fe         	b	0x80586f6 <xTaskGenericNotify+0x236> @ imm = #-0x4
;                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80586f8: e7ff         	b	0x80586fa <xTaskGenericNotify+0x23a> @ imm = #-0x2
 80586fa: f240 1000    	movw	r0, #0x100
 80586fe: f2c2 0000    	movt	r0, #0x2000
 8058702: 6800         	ldr	r0, [r0]
 8058704: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058708: 9907         	ldr	r1, [sp, #0x1c]
 805870a: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 805870e: 4288         	cmp	r0, r1
 8058710: d203         	bhs	0x805871a <xTaskGenericNotify+0x25a> @ imm = #0x6
 8058712: e7ff         	b	0x8058714 <xTaskGenericNotify+0x254> @ imm = #-0x2
 8058714: 4808         	ldr	r0, [pc, #0x20]         @ 0x8058738 <xTaskGenericNotify+0x278>
 8058716: 4780         	blx	r0
 8058718: e000         	b	0x805871c <xTaskGenericNotify+0x25c> @ imm = #0x0
 805871a: e7ff         	b	0x805871c <xTaskGenericNotify+0x25c> @ imm = #-0x2
;                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 805871c: e7ff         	b	0x805871e <xTaskGenericNotify+0x25e> @ imm = #-0x2
;             }
 805871e: e000         	b	0x8058722 <xTaskGenericNotify+0x262> @ imm = #0x0
 8058720: e7ff         	b	0x8058722 <xTaskGenericNotify+0x262> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058722: 4806         	ldr	r0, [pc, #0x18]         @ 0x805873c <xTaskGenericNotify+0x27c>
 8058724: 4780         	blx	r0
;         return xReturn;
 8058726: 9806         	ldr	r0, [sp, #0x18]
 8058728: 9001         	str	r0, [sp, #0x4]
 805872a: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058740 <xTaskGenericNotify+0x280>
 805872c: 4780         	blx	r0
 805872e: 9801         	ldr	r0, [sp, #0x4]
 8058730: b00c         	add	sp, #0x30
 8058732: bdb0         	pop	{r4, r5, r7, pc}

08058734 <$d.119>:
 8058734: 05 e1 05 08  	.word	0x0805e105
 8058738: c5 e0 05 08  	.word	0x0805e0c5
 805873c: 4d e1 05 08  	.word	0x0805e14d
 8058740: 21 05 06 08  	.word	0x08060521
 8058744: 55 ec 05 08  	.word	0x0805ec55
 8058748: 55 ec 05 08  	.word	0x0805ec55
 805874c: 55 ec 05 08  	.word	0x0805ec55
 8058750: 55 ec 05 08  	.word	0x0805ec55

08058754 <xTaskGenericNotifyFromISR>:
;     {
 8058754: b5b0         	push	{r4, r5, r7, lr}
 8058756: af02         	add	r7, sp, #0x8
 8058758: b08e         	sub	sp, #0x38
 805875a: 4674         	mov	r4, lr
 805875c: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8058760: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8058764: f643 5e40    	movw	lr, #0x3d40
 8058768: f2c2 0e00    	movt	lr, #0x2000
 805876c: f8de c000    	ldr.w	r12, [lr]
 8058770: f642 5540    	movw	r5, #0x2d40
 8058774: f2c2 0500    	movt	r5, #0x2000
 8058778: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805877c: f10c 0c01    	add.w	r12, r12, #0x1
 8058780: f8ce c000    	str.w	r12, [lr]
 8058784: 900d         	str	r0, [sp, #0x34]
 8058786: 910c         	str	r1, [sp, #0x30]
 8058788: 920b         	str	r2, [sp, #0x2c]
 805878a: f807 3c15    	strb	r3, [r7, #-21]
 805878e: 2001         	movs	r0, #0x1
;         BaseType_t xReturn = pdPASS;
 8058790: 9007         	str	r0, [sp, #0x1c]
;         configASSERT( xTaskToNotify );
 8058792: 980d         	ldr	r0, [sp, #0x34]
 8058794: b920         	cbnz	r0, 0x80587a0 <xTaskGenericNotifyFromISR+0x4c> @ imm = #0x8
 8058796: e7ff         	b	0x8058798 <xTaskGenericNotifyFromISR+0x44> @ imm = #-0x2
 8058798: 48ae         	ldr	r0, [pc, #0x2b8]        @ 0x8058a54 <xTaskGenericNotifyFromISR+0x300>
 805879a: 4780         	blx	r0
 805879c: e7ff         	b	0x805879e <xTaskGenericNotifyFromISR+0x4a> @ imm = #-0x2
 805879e: e7fe         	b	0x805879e <xTaskGenericNotifyFromISR+0x4a> @ imm = #-0x4
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80587a0: 980c         	ldr	r0, [sp, #0x30]
 80587a2: b120         	cbz	r0, 0x80587ae <xTaskGenericNotifyFromISR+0x5a> @ imm = #0x8
 80587a4: e7ff         	b	0x80587a6 <xTaskGenericNotifyFromISR+0x52> @ imm = #-0x2
 80587a6: 48aa         	ldr	r0, [pc, #0x2a8]        @ 0x8058a50 <xTaskGenericNotifyFromISR+0x2fc>
 80587a8: 4780         	blx	r0
 80587aa: e7ff         	b	0x80587ac <xTaskGenericNotifyFromISR+0x58> @ imm = #-0x2
 80587ac: e7fe         	b	0x80587ac <xTaskGenericNotifyFromISR+0x58> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80587ae: 48a2         	ldr	r0, [pc, #0x288]        @ 0x8058a38 <xTaskGenericNotifyFromISR+0x2e4>
 80587b0: 4780         	blx	r0
;         pxTCB = xTaskToNotify;
 80587b2: 980d         	ldr	r0, [sp, #0x34]
 80587b4: 9009         	str	r0, [sp, #0x24]
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 80587b6: 48a1         	ldr	r0, [pc, #0x284]        @ 0x8058a3c <xTaskGenericNotifyFromISR+0x2e8>
 80587b8: 4780         	blx	r0
 80587ba: 9006         	str	r0, [sp, #0x18]
;             if( pulPreviousNotificationValue != NULL )
 80587bc: 68b8         	ldr	r0, [r7, #0x8]
 80587be: b148         	cbz	r0, 0x80587d4 <xTaskGenericNotifyFromISR+0x80> @ imm = #0x12
 80587c0: e7ff         	b	0x80587c2 <xTaskGenericNotifyFromISR+0x6e> @ imm = #-0x2
;                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80587c2: 9809         	ldr	r0, [sp, #0x24]
 80587c4: 990c         	ldr	r1, [sp, #0x30]
 80587c6: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80587ca: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 80587ce: 68b9         	ldr	r1, [r7, #0x8]
 80587d0: 6008         	str	r0, [r1]
;             }
 80587d2: e7ff         	b	0x80587d4 <xTaskGenericNotifyFromISR+0x80> @ imm = #-0x2
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80587d4: 9809         	ldr	r0, [sp, #0x24]
 80587d6: 990c         	ldr	r1, [sp, #0x30]
 80587d8: 4408         	add	r0, r1
 80587da: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 80587de: f807 0c1d    	strb	r0, [r7, #-29]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80587e2: 9809         	ldr	r0, [sp, #0x24]
 80587e4: 990c         	ldr	r1, [sp, #0x30]
 80587e6: 4401         	add	r1, r0
 80587e8: 2002         	movs	r0, #0x2
 80587ea: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             switch( eAction )
 80587ee: f817 0c15    	ldrb	r0, [r7, #-21]
 80587f2: 4601         	mov	r1, r0
 80587f4: 9102         	str	r1, [sp, #0x8]
 80587f6: 2800         	cmp	r0, #0x0
 80587f8: d03e         	beq	0x8058878 <xTaskGenericNotifyFromISR+0x124> @ imm = #0x7c
 80587fa: e7ff         	b	0x80587fc <xTaskGenericNotifyFromISR+0xa8> @ imm = #-0x2
 80587fc: 9802         	ldr	r0, [sp, #0x8]
 80587fe: 2801         	cmp	r0, #0x1
 8058800: d00c         	beq	0x805881c <xTaskGenericNotifyFromISR+0xc8> @ imm = #0x18
 8058802: e7ff         	b	0x8058804 <xTaskGenericNotifyFromISR+0xb0> @ imm = #-0x2
 8058804: 9802         	ldr	r0, [sp, #0x8]
 8058806: 2802         	cmp	r0, #0x2
 8058808: d013         	beq	0x8058832 <xTaskGenericNotifyFromISR+0xde> @ imm = #0x26
 805880a: e7ff         	b	0x805880c <xTaskGenericNotifyFromISR+0xb8> @ imm = #-0x2
 805880c: 9802         	ldr	r0, [sp, #0x8]
 805880e: 2803         	cmp	r0, #0x3
 8058810: d019         	beq	0x8058846 <xTaskGenericNotifyFromISR+0xf2> @ imm = #0x32
 8058812: e7ff         	b	0x8058814 <xTaskGenericNotifyFromISR+0xc0> @ imm = #-0x2
 8058814: 9802         	ldr	r0, [sp, #0x8]
 8058816: 2804         	cmp	r0, #0x4
 8058818: d01d         	beq	0x8058856 <xTaskGenericNotifyFromISR+0x102> @ imm = #0x3a
 805881a: e02e         	b	0x805887a <xTaskGenericNotifyFromISR+0x126> @ imm = #0x5c
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 805881c: 9a0b         	ldr	r2, [sp, #0x2c]
 805881e: 9809         	ldr	r0, [sp, #0x24]
 8058820: 990c         	ldr	r1, [sp, #0x30]
 8058822: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8058826: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 805882a: 4310         	orrs	r0, r2
 805882c: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8058830: e02f         	b	0x8058892 <xTaskGenericNotifyFromISR+0x13e> @ imm = #0x5e
;                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8058832: 9809         	ldr	r0, [sp, #0x24]
 8058834: 990c         	ldr	r1, [sp, #0x30]
 8058836: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805883a: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 805883e: 3001         	adds	r0, #0x1
 8058840: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8058844: e025         	b	0x8058892 <xTaskGenericNotifyFromISR+0x13e> @ imm = #0x4a
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8058846: 980b         	ldr	r0, [sp, #0x2c]
 8058848: 9909         	ldr	r1, [sp, #0x24]
 805884a: 9a0c         	ldr	r2, [sp, #0x30]
 805884c: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8058850: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8058854: e01d         	b	0x8058892 <xTaskGenericNotifyFromISR+0x13e> @ imm = #0x3a
;                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8058856: f817 0c1d    	ldrb	r0, [r7, #-29]
 805885a: 2802         	cmp	r0, #0x2
 805885c: d008         	beq	0x8058870 <xTaskGenericNotifyFromISR+0x11c> @ imm = #0x10
 805885e: e7ff         	b	0x8058860 <xTaskGenericNotifyFromISR+0x10c> @ imm = #-0x2
;                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8058860: 980b         	ldr	r0, [sp, #0x2c]
 8058862: 9909         	ldr	r1, [sp, #0x24]
 8058864: 9a0c         	ldr	r2, [sp, #0x30]
 8058866: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805886a: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     }
 805886e: e002         	b	0x8058876 <xTaskGenericNotifyFromISR+0x122> @ imm = #0x4
 8058870: 2000         	movs	r0, #0x0
;                         xReturn = pdFAIL;
 8058872: 9007         	str	r0, [sp, #0x1c]
 8058874: e7ff         	b	0x8058876 <xTaskGenericNotifyFromISR+0x122> @ imm = #-0x2
;                     break;
 8058876: e00c         	b	0x8058892 <xTaskGenericNotifyFromISR+0x13e> @ imm = #0x18
;                     break;
 8058878: e00b         	b	0x8058892 <xTaskGenericNotifyFromISR+0x13e> @ imm = #0x16
;                     configASSERT( xTickCount == ( TickType_t ) 0 );
 805887a: f240 102c    	movw	r0, #0x12c
 805887e: f2c2 0000    	movt	r0, #0x2000
 8058882: 6800         	ldr	r0, [r0]
 8058884: b120         	cbz	r0, 0x8058890 <xTaskGenericNotifyFromISR+0x13c> @ imm = #0x8
 8058886: e7ff         	b	0x8058888 <xTaskGenericNotifyFromISR+0x134> @ imm = #-0x2
 8058888: 4870         	ldr	r0, [pc, #0x1c0]        @ 0x8058a4c <xTaskGenericNotifyFromISR+0x2f8>
 805888a: 4780         	blx	r0
 805888c: e7ff         	b	0x805888e <xTaskGenericNotifyFromISR+0x13a> @ imm = #-0x2
 805888e: e7fe         	b	0x805888e <xTaskGenericNotifyFromISR+0x13a> @ imm = #-0x4
;                     break;
 8058890: e7ff         	b	0x8058892 <xTaskGenericNotifyFromISR+0x13e> @ imm = #-0x2
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8058892: f817 0c1d    	ldrb	r0, [r7, #-29]
 8058896: 2801         	cmp	r0, #0x1
 8058898: f040 80c4    	bne.w	0x8058a24 <xTaskGenericNotifyFromISR+0x2d0> @ imm = #0x188
 805889c: e7ff         	b	0x805889e <xTaskGenericNotifyFromISR+0x14a> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 805889e: 9809         	ldr	r0, [sp, #0x24]
 80588a0: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 80588a4: b120         	cbz	r0, 0x80588b0 <xTaskGenericNotifyFromISR+0x15c> @ imm = #0x8
 80588a6: e7ff         	b	0x80588a8 <xTaskGenericNotifyFromISR+0x154> @ imm = #-0x2
 80588a8: 4867         	ldr	r0, [pc, #0x19c]        @ 0x8058a48 <xTaskGenericNotifyFromISR+0x2f4>
 80588aa: 4780         	blx	r0
 80588ac: e7ff         	b	0x80588ae <xTaskGenericNotifyFromISR+0x15a> @ imm = #-0x2
 80588ae: e7fe         	b	0x80588ae <xTaskGenericNotifyFromISR+0x15a> @ imm = #-0x4
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80588b0: f240 1028    	movw	r0, #0x128
 80588b4: f2c2 0000    	movt	r0, #0x2000
 80588b8: 6800         	ldr	r0, [r0]
 80588ba: 2800         	cmp	r0, #0x0
 80588bc: d174         	bne	0x80589a8 <xTaskGenericNotifyFromISR+0x254> @ imm = #0xe8
 80588be: e7ff         	b	0x80588c0 <xTaskGenericNotifyFromISR+0x16c> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80588c0: e7ff         	b	0x80588c2 <xTaskGenericNotifyFromISR+0x16e> @ imm = #-0x2
 80588c2: 9809         	ldr	r0, [sp, #0x24]
 80588c4: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80588c8: 9005         	str	r0, [sp, #0x14]
 80588ca: 9809         	ldr	r0, [sp, #0x24]
 80588cc: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 80588d0: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80588d4: 6088         	str	r0, [r1, #0x8]
 80588d6: 9909         	ldr	r1, [sp, #0x24]
 80588d8: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 80588dc: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 80588e0: 6048         	str	r0, [r1, #0x4]
 80588e2: 9805         	ldr	r0, [sp, #0x14]
 80588e4: 6840         	ldr	r0, [r0, #0x4]
 80588e6: 9909         	ldr	r1, [sp, #0x24]
 80588e8: 3180         	adds	r1, #0x80
 80588ea: 4288         	cmp	r0, r1
 80588ec: d106         	bne	0x80588fc <xTaskGenericNotifyFromISR+0x1a8> @ imm = #0xc
 80588ee: e7ff         	b	0x80588f0 <xTaskGenericNotifyFromISR+0x19c> @ imm = #-0x2
 80588f0: 9809         	ldr	r0, [sp, #0x24]
 80588f2: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80588f6: 9905         	ldr	r1, [sp, #0x14]
 80588f8: 6048         	str	r0, [r1, #0x4]
 80588fa: e7ff         	b	0x80588fc <xTaskGenericNotifyFromISR+0x1a8> @ imm = #-0x2
 80588fc: 9909         	ldr	r1, [sp, #0x24]
 80588fe: 2000         	movs	r0, #0x0
 8058900: f8c1 0090    	str.w	r0, [r1, #0x90]
 8058904: 9905         	ldr	r1, [sp, #0x14]
 8058906: 6808         	ldr	r0, [r1]
 8058908: 3801         	subs	r0, #0x1
 805890a: 6008         	str	r0, [r1]
 805890c: e7ff         	b	0x805890e <xTaskGenericNotifyFromISR+0x1ba> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 805890e: e7ff         	b	0x8058910 <xTaskGenericNotifyFromISR+0x1bc> @ imm = #-0x2
 8058910: e7ff         	b	0x8058912 <xTaskGenericNotifyFromISR+0x1be> @ imm = #-0x2
 8058912: 9809         	ldr	r0, [sp, #0x24]
 8058914: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058918: f240 21a0    	movw	r1, #0x2a0
 805891c: f2c2 0100    	movt	r1, #0x2000
 8058920: 6809         	ldr	r1, [r1]
 8058922: 4288         	cmp	r0, r1
 8058924: d909         	bls	0x805893a <xTaskGenericNotifyFromISR+0x1e6> @ imm = #0x12
 8058926: e7ff         	b	0x8058928 <xTaskGenericNotifyFromISR+0x1d4> @ imm = #-0x2
 8058928: 9809         	ldr	r0, [sp, #0x24]
 805892a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805892e: f240 21a0    	movw	r1, #0x2a0
 8058932: f2c2 0100    	movt	r1, #0x2000
 8058936: 6008         	str	r0, [r1]
 8058938: e7ff         	b	0x805893a <xTaskGenericNotifyFromISR+0x1e6> @ imm = #-0x2
 805893a: e7ff         	b	0x805893c <xTaskGenericNotifyFromISR+0x1e8> @ imm = #-0x2
 805893c: e7ff         	b	0x805893e <xTaskGenericNotifyFromISR+0x1ea> @ imm = #-0x2
 805893e: 9809         	ldr	r0, [sp, #0x24]
 8058940: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058944: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058948: f240 1160    	movw	r1, #0x160
 805894c: f2c2 0100    	movt	r1, #0x2000
 8058950: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8058954: 6840         	ldr	r0, [r0, #0x4]
 8058956: 9004         	str	r0, [sp, #0x10]
 8058958: 9804         	ldr	r0, [sp, #0x10]
 805895a: 9a09         	ldr	r2, [sp, #0x24]
 805895c: f8c2 0084    	str.w	r0, [r2, #0x84]
 8058960: 9804         	ldr	r0, [sp, #0x10]
 8058962: 6880         	ldr	r0, [r0, #0x8]
 8058964: 9a09         	ldr	r2, [sp, #0x24]
 8058966: f8c2 0088    	str.w	r0, [r2, #0x88]
 805896a: 9809         	ldr	r0, [sp, #0x24]
 805896c: 3080         	adds	r0, #0x80
 805896e: 9a04         	ldr	r2, [sp, #0x10]
 8058970: 6892         	ldr	r2, [r2, #0x8]
 8058972: 6050         	str	r0, [r2, #0x4]
 8058974: 9809         	ldr	r0, [sp, #0x24]
 8058976: 3080         	adds	r0, #0x80
 8058978: 9a04         	ldr	r2, [sp, #0x10]
 805897a: 6090         	str	r0, [r2, #0x8]
 805897c: 9a09         	ldr	r2, [sp, #0x24]
 805897e: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8058982: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058986: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805898a: f8c2 0090    	str.w	r0, [r2, #0x90]
 805898e: 9809         	ldr	r0, [sp, #0x24]
 8058990: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058994: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8058998: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 805899c: 3001         	adds	r0, #0x1
 805899e: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80589a2: e7ff         	b	0x80589a4 <xTaskGenericNotifyFromISR+0x250> @ imm = #-0x2
 80589a4: e7ff         	b	0x80589a6 <xTaskGenericNotifyFromISR+0x252> @ imm = #-0x2
;                 }
 80589a6: e020         	b	0x80589ea <xTaskGenericNotifyFromISR+0x296> @ imm = #0x40
;                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80589a8: e7ff         	b	0x80589aa <xTaskGenericNotifyFromISR+0x256> @ imm = #-0x2
 80589aa: f240 1138    	movw	r1, #0x138
 80589ae: f2c2 0100    	movt	r1, #0x2000
 80589b2: 6848         	ldr	r0, [r1, #0x4]
 80589b4: 9003         	str	r0, [sp, #0xc]
 80589b6: 9803         	ldr	r0, [sp, #0xc]
 80589b8: 9a09         	ldr	r2, [sp, #0x24]
 80589ba: f8c2 0098    	str.w	r0, [r2, #0x98]
 80589be: 9803         	ldr	r0, [sp, #0xc]
 80589c0: 6880         	ldr	r0, [r0, #0x8]
 80589c2: 9a09         	ldr	r2, [sp, #0x24]
 80589c4: f8c2 009c    	str.w	r0, [r2, #0x9c]
 80589c8: 9809         	ldr	r0, [sp, #0x24]
 80589ca: 3094         	adds	r0, #0x94
 80589cc: 9a03         	ldr	r2, [sp, #0xc]
 80589ce: 6892         	ldr	r2, [r2, #0x8]
 80589d0: 6050         	str	r0, [r2, #0x4]
 80589d2: 9809         	ldr	r0, [sp, #0x24]
 80589d4: 3094         	adds	r0, #0x94
 80589d6: 9a03         	ldr	r2, [sp, #0xc]
 80589d8: 6090         	str	r0, [r2, #0x8]
 80589da: 9809         	ldr	r0, [sp, #0x24]
 80589dc: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 80589e0: 6808         	ldr	r0, [r1]
 80589e2: 3001         	adds	r0, #0x1
 80589e4: 6008         	str	r0, [r1]
 80589e6: e7ff         	b	0x80589e8 <xTaskGenericNotifyFromISR+0x294> @ imm = #-0x2
 80589e8: e7ff         	b	0x80589ea <xTaskGenericNotifyFromISR+0x296> @ imm = #-0x2
;                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80589ea: 9809         	ldr	r0, [sp, #0x24]
 80589ec: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80589f0: f240 1100    	movw	r1, #0x100
 80589f4: f2c2 0100    	movt	r1, #0x2000
 80589f8: 6809         	ldr	r1, [r1]
 80589fa: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80589fe: 4288         	cmp	r0, r1
 8058a00: d90e         	bls	0x8058a20 <xTaskGenericNotifyFromISR+0x2cc> @ imm = #0x1c
 8058a02: e7ff         	b	0x8058a04 <xTaskGenericNotifyFromISR+0x2b0> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 8058a04: 68f8         	ldr	r0, [r7, #0xc]
 8058a06: b120         	cbz	r0, 0x8058a12 <xTaskGenericNotifyFromISR+0x2be> @ imm = #0x8
 8058a08: e7ff         	b	0x8058a0a <xTaskGenericNotifyFromISR+0x2b6> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 8058a0a: 68f9         	ldr	r1, [r7, #0xc]
 8058a0c: 2001         	movs	r0, #0x1
 8058a0e: 6008         	str	r0, [r1]
;                         }
 8058a10: e7ff         	b	0x8058a12 <xTaskGenericNotifyFromISR+0x2be> @ imm = #-0x2
;                         xYieldPendings[ 0 ] = pdTRUE;
 8058a12: f240 21a4    	movw	r1, #0x2a4
 8058a16: f2c2 0100    	movt	r1, #0x2000
 8058a1a: 2001         	movs	r0, #0x1
 8058a1c: 6008         	str	r0, [r1]
;                     }
 8058a1e: e000         	b	0x8058a22 <xTaskGenericNotifyFromISR+0x2ce> @ imm = #0x0
 8058a20: e7ff         	b	0x8058a22 <xTaskGenericNotifyFromISR+0x2ce> @ imm = #-0x2
;             }
 8058a22: e7ff         	b	0x8058a24 <xTaskGenericNotifyFromISR+0x2d0> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8058a24: 9806         	ldr	r0, [sp, #0x18]
 8058a26: 4906         	ldr	r1, [pc, #0x18]         @ 0x8058a40 <xTaskGenericNotifyFromISR+0x2ec>
 8058a28: 4788         	blx	r1
;         return xReturn;
 8058a2a: 9807         	ldr	r0, [sp, #0x1c]
 8058a2c: 9001         	str	r0, [sp, #0x4]
 8058a2e: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058a44 <xTaskGenericNotifyFromISR+0x2f0>
 8058a30: 4780         	blx	r0
 8058a32: 9801         	ldr	r0, [sp, #0x4]
 8058a34: b00e         	add	sp, #0x38
 8058a36: bdb0         	pop	{r4, r5, r7, pc}

08058a38 <$d.121>:
 8058a38: 95 21 06 08  	.word	0x08062195
 8058a3c: 55 ec 05 08  	.word	0x0805ec55
 8058a40: 85 ec 05 08  	.word	0x0805ec85
 8058a44: 21 05 06 08  	.word	0x08060521
 8058a48: 55 ec 05 08  	.word	0x0805ec55
 8058a4c: 55 ec 05 08  	.word	0x0805ec55
 8058a50: 55 ec 05 08  	.word	0x0805ec55
 8058a54: 55 ec 05 08  	.word	0x0805ec55

08058a58 <vTaskGenericNotifyGiveFromISR>:
;     {
 8058a58: b5d0         	push	{r4, r6, r7, lr}
 8058a5a: af02         	add	r7, sp, #0x8
 8058a5c: b08a         	sub	sp, #0x28
 8058a5e: f643 5c40    	movw	r12, #0x3d40
 8058a62: f2c2 0c00    	movt	r12, #0x2000
 8058a66: f8dc 3000    	ldr.w	r3, [r12]
 8058a6a: f642 5440    	movw	r4, #0x2d40
 8058a6e: f2c2 0400    	movt	r4, #0x2000
 8058a72: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8058a76: 3301         	adds	r3, #0x1
 8058a78: f8cc 3000    	str.w	r3, [r12]
 8058a7c: 9009         	str	r0, [sp, #0x24]
 8058a7e: 9108         	str	r1, [sp, #0x20]
 8058a80: 9207         	str	r2, [sp, #0x1c]
;         configASSERT( xTaskToNotify );
 8058a82: 9809         	ldr	r0, [sp, #0x24]
 8058a84: b920         	cbnz	r0, 0x8058a90 <vTaskGenericNotifyGiveFromISR+0x38> @ imm = #0x8
 8058a86: e7ff         	b	0x8058a88 <vTaskGenericNotifyGiveFromISR+0x30> @ imm = #-0x2
 8058a88: 4881         	ldr	r0, [pc, #0x204]        @ 0x8058c90 <vTaskGenericNotifyGiveFromISR+0x238>
 8058a8a: 4780         	blx	r0
 8058a8c: e7ff         	b	0x8058a8e <vTaskGenericNotifyGiveFromISR+0x36> @ imm = #-0x2
 8058a8e: e7fe         	b	0x8058a8e <vTaskGenericNotifyGiveFromISR+0x36> @ imm = #-0x4
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8058a90: 9808         	ldr	r0, [sp, #0x20]
 8058a92: b120         	cbz	r0, 0x8058a9e <vTaskGenericNotifyGiveFromISR+0x46> @ imm = #0x8
 8058a94: e7ff         	b	0x8058a96 <vTaskGenericNotifyGiveFromISR+0x3e> @ imm = #-0x2
 8058a96: 487d         	ldr	r0, [pc, #0x1f4]        @ 0x8058c8c <vTaskGenericNotifyGiveFromISR+0x234>
 8058a98: 4780         	blx	r0
 8058a9a: e7ff         	b	0x8058a9c <vTaskGenericNotifyGiveFromISR+0x44> @ imm = #-0x2
 8058a9c: e7fe         	b	0x8058a9c <vTaskGenericNotifyGiveFromISR+0x44> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8058a9e: 4876         	ldr	r0, [pc, #0x1d8]        @ 0x8058c78 <vTaskGenericNotifyGiveFromISR+0x220>
 8058aa0: 4780         	blx	r0
;         pxTCB = xTaskToNotify;
 8058aa2: 9809         	ldr	r0, [sp, #0x24]
 8058aa4: 9006         	str	r0, [sp, #0x18]
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8058aa6: 4875         	ldr	r0, [pc, #0x1d4]        @ 0x8058c7c <vTaskGenericNotifyGiveFromISR+0x224>
 8058aa8: 4780         	blx	r0
 8058aaa: 9004         	str	r0, [sp, #0x10]
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8058aac: 9806         	ldr	r0, [sp, #0x18]
 8058aae: 9908         	ldr	r1, [sp, #0x20]
 8058ab0: 4408         	add	r0, r1
 8058ab2: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8058ab6: f807 0c19    	strb	r0, [r7, #-25]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8058aba: 9806         	ldr	r0, [sp, #0x18]
 8058abc: 9908         	ldr	r1, [sp, #0x20]
 8058abe: 4401         	add	r1, r0
 8058ac0: 2002         	movs	r0, #0x2
 8058ac2: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8058ac6: 9806         	ldr	r0, [sp, #0x18]
 8058ac8: 9908         	ldr	r1, [sp, #0x20]
 8058aca: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8058ace: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8058ad2: 3001         	adds	r0, #0x1
 8058ad4: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8058ad8: f817 0c19    	ldrb	r0, [r7, #-25]
 8058adc: 2801         	cmp	r0, #0x1
 8058ade: f040 80c4    	bne.w	0x8058c6a <vTaskGenericNotifyGiveFromISR+0x212> @ imm = #0x188
 8058ae2: e7ff         	b	0x8058ae4 <vTaskGenericNotifyGiveFromISR+0x8c> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8058ae4: 9806         	ldr	r0, [sp, #0x18]
 8058ae6: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8058aea: b120         	cbz	r0, 0x8058af6 <vTaskGenericNotifyGiveFromISR+0x9e> @ imm = #0x8
 8058aec: e7ff         	b	0x8058aee <vTaskGenericNotifyGiveFromISR+0x96> @ imm = #-0x2
 8058aee: 4866         	ldr	r0, [pc, #0x198]        @ 0x8058c88 <vTaskGenericNotifyGiveFromISR+0x230>
 8058af0: 4780         	blx	r0
 8058af2: e7ff         	b	0x8058af4 <vTaskGenericNotifyGiveFromISR+0x9c> @ imm = #-0x2
 8058af4: e7fe         	b	0x8058af4 <vTaskGenericNotifyGiveFromISR+0x9c> @ imm = #-0x4
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8058af6: f240 1028    	movw	r0, #0x128
 8058afa: f2c2 0000    	movt	r0, #0x2000
 8058afe: 6800         	ldr	r0, [r0]
 8058b00: 2800         	cmp	r0, #0x0
 8058b02: d174         	bne	0x8058bee <vTaskGenericNotifyGiveFromISR+0x196> @ imm = #0xe8
 8058b04: e7ff         	b	0x8058b06 <vTaskGenericNotifyGiveFromISR+0xae> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8058b06: e7ff         	b	0x8058b08 <vTaskGenericNotifyGiveFromISR+0xb0> @ imm = #-0x2
 8058b08: 9806         	ldr	r0, [sp, #0x18]
 8058b0a: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8058b0e: 9003         	str	r0, [sp, #0xc]
 8058b10: 9806         	ldr	r0, [sp, #0x18]
 8058b12: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8058b16: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8058b1a: 6088         	str	r0, [r1, #0x8]
 8058b1c: 9906         	ldr	r1, [sp, #0x18]
 8058b1e: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8058b22: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8058b26: 6048         	str	r0, [r1, #0x4]
 8058b28: 9803         	ldr	r0, [sp, #0xc]
 8058b2a: 6840         	ldr	r0, [r0, #0x4]
 8058b2c: 9906         	ldr	r1, [sp, #0x18]
 8058b2e: 3180         	adds	r1, #0x80
 8058b30: 4288         	cmp	r0, r1
 8058b32: d106         	bne	0x8058b42 <vTaskGenericNotifyGiveFromISR+0xea> @ imm = #0xc
 8058b34: e7ff         	b	0x8058b36 <vTaskGenericNotifyGiveFromISR+0xde> @ imm = #-0x2
 8058b36: 9806         	ldr	r0, [sp, #0x18]
 8058b38: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8058b3c: 9903         	ldr	r1, [sp, #0xc]
 8058b3e: 6048         	str	r0, [r1, #0x4]
 8058b40: e7ff         	b	0x8058b42 <vTaskGenericNotifyGiveFromISR+0xea> @ imm = #-0x2
 8058b42: 9906         	ldr	r1, [sp, #0x18]
 8058b44: 2000         	movs	r0, #0x0
 8058b46: f8c1 0090    	str.w	r0, [r1, #0x90]
 8058b4a: 9903         	ldr	r1, [sp, #0xc]
 8058b4c: 6808         	ldr	r0, [r1]
 8058b4e: 3801         	subs	r0, #0x1
 8058b50: 6008         	str	r0, [r1]
 8058b52: e7ff         	b	0x8058b54 <vTaskGenericNotifyGiveFromISR+0xfc> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8058b54: e7ff         	b	0x8058b56 <vTaskGenericNotifyGiveFromISR+0xfe> @ imm = #-0x2
 8058b56: e7ff         	b	0x8058b58 <vTaskGenericNotifyGiveFromISR+0x100> @ imm = #-0x2
 8058b58: 9806         	ldr	r0, [sp, #0x18]
 8058b5a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058b5e: f240 21a0    	movw	r1, #0x2a0
 8058b62: f2c2 0100    	movt	r1, #0x2000
 8058b66: 6809         	ldr	r1, [r1]
 8058b68: 4288         	cmp	r0, r1
 8058b6a: d909         	bls	0x8058b80 <vTaskGenericNotifyGiveFromISR+0x128> @ imm = #0x12
 8058b6c: e7ff         	b	0x8058b6e <vTaskGenericNotifyGiveFromISR+0x116> @ imm = #-0x2
 8058b6e: 9806         	ldr	r0, [sp, #0x18]
 8058b70: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058b74: f240 21a0    	movw	r1, #0x2a0
 8058b78: f2c2 0100    	movt	r1, #0x2000
 8058b7c: 6008         	str	r0, [r1]
 8058b7e: e7ff         	b	0x8058b80 <vTaskGenericNotifyGiveFromISR+0x128> @ imm = #-0x2
 8058b80: e7ff         	b	0x8058b82 <vTaskGenericNotifyGiveFromISR+0x12a> @ imm = #-0x2
 8058b82: e7ff         	b	0x8058b84 <vTaskGenericNotifyGiveFromISR+0x12c> @ imm = #-0x2
 8058b84: 9806         	ldr	r0, [sp, #0x18]
 8058b86: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058b8a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058b8e: f240 1160    	movw	r1, #0x160
 8058b92: f2c2 0100    	movt	r1, #0x2000
 8058b96: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8058b9a: 6840         	ldr	r0, [r0, #0x4]
 8058b9c: 9002         	str	r0, [sp, #0x8]
 8058b9e: 9802         	ldr	r0, [sp, #0x8]
 8058ba0: 9a06         	ldr	r2, [sp, #0x18]
 8058ba2: f8c2 0084    	str.w	r0, [r2, #0x84]
 8058ba6: 9802         	ldr	r0, [sp, #0x8]
 8058ba8: 6880         	ldr	r0, [r0, #0x8]
 8058baa: 9a06         	ldr	r2, [sp, #0x18]
 8058bac: f8c2 0088    	str.w	r0, [r2, #0x88]
 8058bb0: 9806         	ldr	r0, [sp, #0x18]
 8058bb2: 3080         	adds	r0, #0x80
 8058bb4: 9a02         	ldr	r2, [sp, #0x8]
 8058bb6: 6892         	ldr	r2, [r2, #0x8]
 8058bb8: 6050         	str	r0, [r2, #0x4]
 8058bba: 9806         	ldr	r0, [sp, #0x18]
 8058bbc: 3080         	adds	r0, #0x80
 8058bbe: 9a02         	ldr	r2, [sp, #0x8]
 8058bc0: 6090         	str	r0, [r2, #0x8]
 8058bc2: 9a06         	ldr	r2, [sp, #0x18]
 8058bc4: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8058bc8: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8058bcc: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8058bd0: f8c2 0090    	str.w	r0, [r2, #0x90]
 8058bd4: 9806         	ldr	r0, [sp, #0x18]
 8058bd6: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058bda: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8058bde: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8058be2: 3001         	adds	r0, #0x1
 8058be4: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8058be8: e7ff         	b	0x8058bea <vTaskGenericNotifyGiveFromISR+0x192> @ imm = #-0x2
 8058bea: e7ff         	b	0x8058bec <vTaskGenericNotifyGiveFromISR+0x194> @ imm = #-0x2
;                 }
 8058bec: e020         	b	0x8058c30 <vTaskGenericNotifyGiveFromISR+0x1d8> @ imm = #0x40
;                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8058bee: e7ff         	b	0x8058bf0 <vTaskGenericNotifyGiveFromISR+0x198> @ imm = #-0x2
 8058bf0: f240 1138    	movw	r1, #0x138
 8058bf4: f2c2 0100    	movt	r1, #0x2000
 8058bf8: 6848         	ldr	r0, [r1, #0x4]
 8058bfa: 9001         	str	r0, [sp, #0x4]
 8058bfc: 9801         	ldr	r0, [sp, #0x4]
 8058bfe: 9a06         	ldr	r2, [sp, #0x18]
 8058c00: f8c2 0098    	str.w	r0, [r2, #0x98]
 8058c04: 9801         	ldr	r0, [sp, #0x4]
 8058c06: 6880         	ldr	r0, [r0, #0x8]
 8058c08: 9a06         	ldr	r2, [sp, #0x18]
 8058c0a: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8058c0e: 9806         	ldr	r0, [sp, #0x18]
 8058c10: 3094         	adds	r0, #0x94
 8058c12: 9a01         	ldr	r2, [sp, #0x4]
 8058c14: 6892         	ldr	r2, [r2, #0x8]
 8058c16: 6050         	str	r0, [r2, #0x4]
 8058c18: 9806         	ldr	r0, [sp, #0x18]
 8058c1a: 3094         	adds	r0, #0x94
 8058c1c: 9a01         	ldr	r2, [sp, #0x4]
 8058c1e: 6090         	str	r0, [r2, #0x8]
 8058c20: 9806         	ldr	r0, [sp, #0x18]
 8058c22: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 8058c26: 6808         	ldr	r0, [r1]
 8058c28: 3001         	adds	r0, #0x1
 8058c2a: 6008         	str	r0, [r1]
 8058c2c: e7ff         	b	0x8058c2e <vTaskGenericNotifyGiveFromISR+0x1d6> @ imm = #-0x2
 8058c2e: e7ff         	b	0x8058c30 <vTaskGenericNotifyGiveFromISR+0x1d8> @ imm = #-0x2
;                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8058c30: 9806         	ldr	r0, [sp, #0x18]
 8058c32: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8058c36: f240 1100    	movw	r1, #0x100
 8058c3a: f2c2 0100    	movt	r1, #0x2000
 8058c3e: 6809         	ldr	r1, [r1]
 8058c40: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8058c44: 4288         	cmp	r0, r1
 8058c46: d90e         	bls	0x8058c66 <vTaskGenericNotifyGiveFromISR+0x20e> @ imm = #0x1c
 8058c48: e7ff         	b	0x8058c4a <vTaskGenericNotifyGiveFromISR+0x1f2> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 8058c4a: 9807         	ldr	r0, [sp, #0x1c]
 8058c4c: b120         	cbz	r0, 0x8058c58 <vTaskGenericNotifyGiveFromISR+0x200> @ imm = #0x8
 8058c4e: e7ff         	b	0x8058c50 <vTaskGenericNotifyGiveFromISR+0x1f8> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 8058c50: 9907         	ldr	r1, [sp, #0x1c]
 8058c52: 2001         	movs	r0, #0x1
 8058c54: 6008         	str	r0, [r1]
;                         }
 8058c56: e7ff         	b	0x8058c58 <vTaskGenericNotifyGiveFromISR+0x200> @ imm = #-0x2
;                         xYieldPendings[ 0 ] = pdTRUE;
 8058c58: f240 21a4    	movw	r1, #0x2a4
 8058c5c: f2c2 0100    	movt	r1, #0x2000
 8058c60: 2001         	movs	r0, #0x1
 8058c62: 6008         	str	r0, [r1]
;                     }
 8058c64: e000         	b	0x8058c68 <vTaskGenericNotifyGiveFromISR+0x210> @ imm = #0x0
 8058c66: e7ff         	b	0x8058c68 <vTaskGenericNotifyGiveFromISR+0x210> @ imm = #-0x2
;             }
 8058c68: e7ff         	b	0x8058c6a <vTaskGenericNotifyGiveFromISR+0x212> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8058c6a: 9804         	ldr	r0, [sp, #0x10]
 8058c6c: 4904         	ldr	r1, [pc, #0x10]         @ 0x8058c80 <vTaskGenericNotifyGiveFromISR+0x228>
 8058c6e: 4788         	blx	r1
;     }
 8058c70: 4804         	ldr	r0, [pc, #0x10]         @ 0x8058c84 <vTaskGenericNotifyGiveFromISR+0x22c>
 8058c72: 4780         	blx	r0
 8058c74: b00a         	add	sp, #0x28
 8058c76: bdd0         	pop	{r4, r6, r7, pc}

08058c78 <$d.123>:
 8058c78: 95 21 06 08  	.word	0x08062195
 8058c7c: 55 ec 05 08  	.word	0x0805ec55
 8058c80: 85 ec 05 08  	.word	0x0805ec85
 8058c84: 21 05 06 08  	.word	0x08060521
 8058c88: 55 ec 05 08  	.word	0x0805ec55
 8058c8c: 55 ec 05 08  	.word	0x0805ec55
 8058c90: 55 ec 05 08  	.word	0x0805ec55

08058c94 <xTaskGenericNotifyStateClear>:
;     {
 8058c94: b580         	push	{r7, lr}
 8058c96: 466f         	mov	r7, sp
 8058c98: b086         	sub	sp, #0x18
 8058c9a: f643 5340    	movw	r3, #0x3d40
 8058c9e: f2c2 0300    	movt	r3, #0x2000
 8058ca2: 681a         	ldr	r2, [r3]
 8058ca4: f642 5c40    	movw	r12, #0x2d40
 8058ca8: f2c2 0c00    	movt	r12, #0x2000
 8058cac: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8058cb0: 3201         	adds	r2, #0x1
 8058cb2: 601a         	str	r2, [r3]
 8058cb4: 9005         	str	r0, [sp, #0x14]
 8058cb6: 9104         	str	r1, [sp, #0x10]
;         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8058cb8: 9804         	ldr	r0, [sp, #0x10]
 8058cba: b120         	cbz	r0, 0x8058cc6 <xTaskGenericNotifyStateClear+0x32> @ imm = #0x8
 8058cbc: e7ff         	b	0x8058cbe <xTaskGenericNotifyStateClear+0x2a> @ imm = #-0x2
 8058cbe: 481c         	ldr	r0, [pc, #0x70]         @ 0x8058d30 <xTaskGenericNotifyStateClear+0x9c>
 8058cc0: 4780         	blx	r0
 8058cc2: e7ff         	b	0x8058cc4 <xTaskGenericNotifyStateClear+0x30> @ imm = #-0x2
 8058cc4: e7fe         	b	0x8058cc4 <xTaskGenericNotifyStateClear+0x30> @ imm = #-0x4
;         pxTCB = prvGetTCBFromHandle( xTask );
 8058cc6: 9805         	ldr	r0, [sp, #0x14]
 8058cc8: b938         	cbnz	r0, 0x8058cda <xTaskGenericNotifyStateClear+0x46> @ imm = #0xe
 8058cca: e7ff         	b	0x8058ccc <xTaskGenericNotifyStateClear+0x38> @ imm = #-0x2
 8058ccc: f240 1000    	movw	r0, #0x100
 8058cd0: f2c2 0000    	movt	r0, #0x2000
 8058cd4: 6800         	ldr	r0, [r0]
 8058cd6: 9001         	str	r0, [sp, #0x4]
 8058cd8: e002         	b	0x8058ce0 <xTaskGenericNotifyStateClear+0x4c> @ imm = #0x4
 8058cda: 9805         	ldr	r0, [sp, #0x14]
 8058cdc: 9001         	str	r0, [sp, #0x4]
 8058cde: e7ff         	b	0x8058ce0 <xTaskGenericNotifyStateClear+0x4c> @ imm = #-0x2
 8058ce0: 9801         	ldr	r0, [sp, #0x4]
 8058ce2: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 8058ce4: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8058d24 <xTaskGenericNotifyStateClear+0x90>
 8058ce6: 4780         	blx	r0
;             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8058ce8: 9803         	ldr	r0, [sp, #0xc]
 8058cea: 9904         	ldr	r1, [sp, #0x10]
 8058cec: 4408         	add	r0, r1
 8058cee: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8058cf2: 2802         	cmp	r0, #0x2
 8058cf4: d109         	bne	0x8058d0a <xTaskGenericNotifyStateClear+0x76> @ imm = #0x12
 8058cf6: e7ff         	b	0x8058cf8 <xTaskGenericNotifyStateClear+0x64> @ imm = #-0x2
;                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8058cf8: 9803         	ldr	r0, [sp, #0xc]
 8058cfa: 9904         	ldr	r1, [sp, #0x10]
 8058cfc: 4401         	add	r1, r0
 8058cfe: 2000         	movs	r0, #0x0
 8058d00: f881 00d4    	strb.w	r0, [r1, #0xd4]
 8058d04: 2001         	movs	r0, #0x1
;                 xReturn = pdPASS;
 8058d06: 9002         	str	r0, [sp, #0x8]
;             }
 8058d08: e002         	b	0x8058d10 <xTaskGenericNotifyStateClear+0x7c> @ imm = #0x4
 8058d0a: 2000         	movs	r0, #0x0
;                 xReturn = pdFAIL;
 8058d0c: 9002         	str	r0, [sp, #0x8]
 8058d0e: e7ff         	b	0x8058d10 <xTaskGenericNotifyStateClear+0x7c> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058d10: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058d28 <xTaskGenericNotifyStateClear+0x94>
 8058d12: 4780         	blx	r0
;         return xReturn;
 8058d14: 9802         	ldr	r0, [sp, #0x8]
 8058d16: 9000         	str	r0, [sp]
 8058d18: 4804         	ldr	r0, [pc, #0x10]         @ 0x8058d2c <xTaskGenericNotifyStateClear+0x98>
 8058d1a: 4780         	blx	r0
 8058d1c: 9800         	ldr	r0, [sp]
 8058d1e: b006         	add	sp, #0x18
 8058d20: bd80         	pop	{r7, pc}
 8058d22: bf00         	nop

08058d24 <$d.125>:
 8058d24: 05 e1 05 08  	.word	0x0805e105
 8058d28: 4d e1 05 08  	.word	0x0805e14d
 8058d2c: 21 05 06 08  	.word	0x08060521
 8058d30: 55 ec 05 08  	.word	0x0805ec55

08058d34 <ulTaskGenericNotifyValueClear>:
;     {
 8058d34: b5d0         	push	{r4, r6, r7, lr}
 8058d36: af02         	add	r7, sp, #0x8
 8058d38: b088         	sub	sp, #0x20
 8058d3a: f643 5c40    	movw	r12, #0x3d40
 8058d3e: f2c2 0c00    	movt	r12, #0x2000
 8058d42: f8dc 3000    	ldr.w	r3, [r12]
 8058d46: f642 5440    	movw	r4, #0x2d40
 8058d4a: f2c2 0400    	movt	r4, #0x2000
 8058d4e: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8058d52: 3301         	adds	r3, #0x1
 8058d54: f8cc 3000    	str.w	r3, [r12]
 8058d58: 9007         	str	r0, [sp, #0x1c]
 8058d5a: 9106         	str	r1, [sp, #0x18]
 8058d5c: 9205         	str	r2, [sp, #0x14]
;         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8058d5e: 9806         	ldr	r0, [sp, #0x18]
 8058d60: b120         	cbz	r0, 0x8058d6c <ulTaskGenericNotifyValueClear+0x38> @ imm = #0x8
 8058d62: e7ff         	b	0x8058d64 <ulTaskGenericNotifyValueClear+0x30> @ imm = #-0x2
 8058d64: 481a         	ldr	r0, [pc, #0x68]         @ 0x8058dd0 <ulTaskGenericNotifyValueClear+0x9c>
 8058d66: 4780         	blx	r0
 8058d68: e7ff         	b	0x8058d6a <ulTaskGenericNotifyValueClear+0x36> @ imm = #-0x2
 8058d6a: e7fe         	b	0x8058d6a <ulTaskGenericNotifyValueClear+0x36> @ imm = #-0x4
;         pxTCB = prvGetTCBFromHandle( xTask );
 8058d6c: 9807         	ldr	r0, [sp, #0x1c]
 8058d6e: b938         	cbnz	r0, 0x8058d80 <ulTaskGenericNotifyValueClear+0x4c> @ imm = #0xe
 8058d70: e7ff         	b	0x8058d72 <ulTaskGenericNotifyValueClear+0x3e> @ imm = #-0x2
 8058d72: f240 1000    	movw	r0, #0x100
 8058d76: f2c2 0000    	movt	r0, #0x2000
 8058d7a: 6800         	ldr	r0, [r0]
 8058d7c: 9002         	str	r0, [sp, #0x8]
 8058d7e: e002         	b	0x8058d86 <ulTaskGenericNotifyValueClear+0x52> @ imm = #0x4
 8058d80: 9807         	ldr	r0, [sp, #0x1c]
 8058d82: 9002         	str	r0, [sp, #0x8]
 8058d84: e7ff         	b	0x8058d86 <ulTaskGenericNotifyValueClear+0x52> @ imm = #-0x2
 8058d86: 9802         	ldr	r0, [sp, #0x8]
 8058d88: 9004         	str	r0, [sp, #0x10]
;         taskENTER_CRITICAL();
 8058d8a: 480e         	ldr	r0, [pc, #0x38]         @ 0x8058dc4 <ulTaskGenericNotifyValueClear+0x90>
 8058d8c: 4780         	blx	r0
;             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8058d8e: 9804         	ldr	r0, [sp, #0x10]
 8058d90: 9906         	ldr	r1, [sp, #0x18]
 8058d92: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8058d96: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8058d9a: 9003         	str	r0, [sp, #0xc]
;             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8058d9c: 9a05         	ldr	r2, [sp, #0x14]
 8058d9e: 9804         	ldr	r0, [sp, #0x10]
 8058da0: 9906         	ldr	r1, [sp, #0x18]
 8058da2: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8058da6: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8058daa: 4390         	bics	r0, r2
 8058dac: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;         taskEXIT_CRITICAL();
 8058db0: 4805         	ldr	r0, [pc, #0x14]         @ 0x8058dc8 <ulTaskGenericNotifyValueClear+0x94>
 8058db2: 4780         	blx	r0
;         return ulReturn;
 8058db4: 9803         	ldr	r0, [sp, #0xc]
 8058db6: 9001         	str	r0, [sp, #0x4]
 8058db8: 4804         	ldr	r0, [pc, #0x10]         @ 0x8058dcc <ulTaskGenericNotifyValueClear+0x98>
 8058dba: 4780         	blx	r0
 8058dbc: 9801         	ldr	r0, [sp, #0x4]
 8058dbe: b008         	add	sp, #0x20
 8058dc0: bdd0         	pop	{r4, r6, r7, pc}
 8058dc2: bf00         	nop

08058dc4 <$d.127>:
 8058dc4: 05 e1 05 08  	.word	0x0805e105
 8058dc8: 4d e1 05 08  	.word	0x0805e14d
 8058dcc: 21 05 06 08  	.word	0x08060521
 8058dd0: 55 ec 05 08  	.word	0x0805ec55

08058dd4 <xTaskGetMPUSettings>:
;     {
 8058dd4: b580         	push	{r7, lr}
 8058dd6: 466f         	mov	r7, sp
 8058dd8: b084         	sub	sp, #0x10
 8058dda: f643 5240    	movw	r2, #0x3d40
 8058dde: f2c2 0200    	movt	r2, #0x2000
 8058de2: 6811         	ldr	r1, [r2]
 8058de4: f642 5340    	movw	r3, #0x2d40
 8058de8: f2c2 0300    	movt	r3, #0x2000
 8058dec: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8058df0: 3101         	adds	r1, #0x1
 8058df2: 6011         	str	r1, [r2]
 8058df4: 9003         	str	r0, [sp, #0xc]
;         pxTCB = prvGetTCBFromHandle( xTask );
 8058df6: 9803         	ldr	r0, [sp, #0xc]
 8058df8: b938         	cbnz	r0, 0x8058e0a <xTaskGetMPUSettings+0x36> @ imm = #0xe
 8058dfa: e7ff         	b	0x8058dfc <xTaskGetMPUSettings+0x28> @ imm = #-0x2
 8058dfc: f240 1000    	movw	r0, #0x100
 8058e00: f2c2 0000    	movt	r0, #0x2000
 8058e04: 6800         	ldr	r0, [r0]
 8058e06: 9001         	str	r0, [sp, #0x4]
 8058e08: e002         	b	0x8058e10 <xTaskGetMPUSettings+0x3c> @ imm = #0x4
 8058e0a: 9803         	ldr	r0, [sp, #0xc]
 8058e0c: 9001         	str	r0, [sp, #0x4]
 8058e0e: e7ff         	b	0x8058e10 <xTaskGetMPUSettings+0x3c> @ imm = #-0x2
 8058e10: 9801         	ldr	r0, [sp, #0x4]
 8058e12: 9002         	str	r0, [sp, #0x8]
;         return &( pxTCB->xMPUSettings );
 8058e14: 9802         	ldr	r0, [sp, #0x8]
 8058e16: 3004         	adds	r0, #0x4
 8058e18: 9000         	str	r0, [sp]
 8058e1a: 4802         	ldr	r0, [pc, #0x8]          @ 0x8058e24 <xTaskGetMPUSettings+0x50>
 8058e1c: 4780         	blx	r0
 8058e1e: 9800         	ldr	r0, [sp]
 8058e20: b004         	add	sp, #0x10
 8058e22: bd80         	pop	{r7, pc}

08058e24 <$d.129>:
 8058e24: 21 05 06 08  	.word	0x08060521

08058e28 <prvInitialiseNewTask>:
; {
 8058e28: b5b0         	push	{r4, r5, r7, lr}
 8058e2a: af02         	add	r7, sp, #0x8
 8058e2c: b08a         	sub	sp, #0x28
 8058e2e: 4674         	mov	r4, lr
 8058e30: f8d7 c014    	ldr.w	r12, [r7, #0x14]
 8058e34: f8d7 c010    	ldr.w	r12, [r7, #0x10]
 8058e38: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8058e3c: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8058e40: f643 5e40    	movw	lr, #0x3d40
 8058e44: f2c2 0e00    	movt	lr, #0x2000
 8058e48: f8de c000    	ldr.w	r12, [lr]
 8058e4c: f642 5540    	movw	r5, #0x2d40
 8058e50: f2c2 0500    	movt	r5, #0x2000
 8058e54: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 8058e58: f10c 0c01    	add.w	r12, r12, #0x1
 8058e5c: f8ce c000    	str.w	r12, [lr]
 8058e60: 9009         	str	r0, [sp, #0x24]
 8058e62: 9108         	str	r1, [sp, #0x20]
 8058e64: 9207         	str	r2, [sp, #0x1c]
 8058e66: 9306         	str	r3, [sp, #0x18]
;         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 8058e68: 7af8         	ldrb	r0, [r7, #0xb]
 8058e6a: 0600         	lsls	r0, r0, #0x18
 8058e6c: 2800         	cmp	r0, #0x0
 8058e6e: d503         	bpl	0x8058e78 <prvInitialiseNewTask+0x50> @ imm = #0x6
 8058e70: e7ff         	b	0x8058e72 <prvInitialiseNewTask+0x4a> @ imm = #-0x2
 8058e72: 2001         	movs	r0, #0x1
;             xRunPrivileged = pdTRUE;
 8058e74: 9003         	str	r0, [sp, #0xc]
;         }
 8058e76: e002         	b	0x8058e7e <prvInitialiseNewTask+0x56> @ imm = #0x4
 8058e78: 2000         	movs	r0, #0x0
;             xRunPrivileged = pdFALSE;
 8058e7a: 9003         	str	r0, [sp, #0xc]
 8058e7c: e7ff         	b	0x8058e7e <prvInitialiseNewTask+0x56> @ imm = #-0x2
;         uxPriority &= ~portPRIVILEGE_BIT;
 8058e7e: 68b8         	ldr	r0, [r7, #0x8]
 8058e80: f020 4000    	bic	r0, r0, #0x80000000
 8058e84: 60b8         	str	r0, [r7, #0x8]
;         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8058e86: 6938         	ldr	r0, [r7, #0x10]
 8058e88: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8058e8c: 9907         	ldr	r1, [sp, #0x1c]
 8058e8e: 008a         	lsls	r2, r1, #0x2
 8058e90: 4b48         	ldr	r3, [pc, #0x120]        @ 0x8058fb4 <prvInitialiseNewTask+0x18c>
 8058e92: 21a5         	movs	r1, #0xa5
 8058e94: 4798         	blx	r3
;         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8058e96: 6938         	ldr	r0, [r7, #0x10]
 8058e98: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8058e9c: 9907         	ldr	r1, [sp, #0x1c]
 8058e9e: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8058ea2: 3804         	subs	r0, #0x4
 8058ea4: 9005         	str	r0, [sp, #0x14]
;         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8058ea6: 9805         	ldr	r0, [sp, #0x14]
 8058ea8: f020 0007    	bic	r0, r0, #0x7
 8058eac: 9005         	str	r0, [sp, #0x14]
;         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8058eae: f89d 0014    	ldrb.w	r0, [sp, #0x14]
 8058eb2: 0740         	lsls	r0, r0, #0x1d
 8058eb4: b120         	cbz	r0, 0x8058ec0 <prvInitialiseNewTask+0x98> @ imm = #0x8
 8058eb6: e7ff         	b	0x8058eb8 <prvInitialiseNewTask+0x90> @ imm = #-0x2
 8058eb8: 4845         	ldr	r0, [pc, #0x114]        @ 0x8058fd0 <prvInitialiseNewTask+0x1a8>
 8058eba: 4780         	blx	r0
 8058ebc: e7ff         	b	0x8058ebe <prvInitialiseNewTask+0x96> @ imm = #-0x2
 8058ebe: e7fe         	b	0x8058ebe <prvInitialiseNewTask+0x96> @ imm = #-0x4
;     if( pcName != NULL )
 8058ec0: 9808         	ldr	r0, [sp, #0x20]
 8058ec2: b1f8         	cbz	r0, 0x8058f04 <prvInitialiseNewTask+0xdc> @ imm = #0x3e
 8058ec4: e7ff         	b	0x8058ec6 <prvInitialiseNewTask+0x9e> @ imm = #-0x2
 8058ec6: 2000         	movs	r0, #0x0
;         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8058ec8: 9004         	str	r0, [sp, #0x10]
 8058eca: e7ff         	b	0x8058ecc <prvInitialiseNewTask+0xa4> @ imm = #-0x2
 8058ecc: 9804         	ldr	r0, [sp, #0x10]
 8058ece: 280f         	cmp	r0, #0xf
 8058ed0: d813         	bhi	0x8058efa <prvInitialiseNewTask+0xd2> @ imm = #0x26
 8058ed2: e7ff         	b	0x8058ed4 <prvInitialiseNewTask+0xac> @ imm = #-0x2
;             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8058ed4: 9808         	ldr	r0, [sp, #0x20]
 8058ed6: 9a04         	ldr	r2, [sp, #0x10]
 8058ed8: 5c80         	ldrb	r0, [r0, r2]
 8058eda: 6939         	ldr	r1, [r7, #0x10]
 8058edc: 4411         	add	r1, r2
 8058ede: f881 00b0    	strb.w	r0, [r1, #0xb0]
;             if( pcName[ x ] == ( char ) 0x00 )
 8058ee2: 9808         	ldr	r0, [sp, #0x20]
 8058ee4: 9904         	ldr	r1, [sp, #0x10]
 8058ee6: 5c40         	ldrb	r0, [r0, r1]
 8058ee8: b908         	cbnz	r0, 0x8058eee <prvInitialiseNewTask+0xc6> @ imm = #0x2
 8058eea: e7ff         	b	0x8058eec <prvInitialiseNewTask+0xc4> @ imm = #-0x2
;                 break;
 8058eec: e005         	b	0x8058efa <prvInitialiseNewTask+0xd2> @ imm = #0xa
 8058eee: e7ff         	b	0x8058ef0 <prvInitialiseNewTask+0xc8> @ imm = #-0x2
;         }
 8058ef0: e7ff         	b	0x8058ef2 <prvInitialiseNewTask+0xca> @ imm = #-0x2
;         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8058ef2: 9804         	ldr	r0, [sp, #0x10]
 8058ef4: 3001         	adds	r0, #0x1
 8058ef6: 9004         	str	r0, [sp, #0x10]
 8058ef8: e7e8         	b	0x8058ecc <prvInitialiseNewTask+0xa4> @ imm = #-0x30
;         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8058efa: 6939         	ldr	r1, [r7, #0x10]
 8058efc: 2000         	movs	r0, #0x0
 8058efe: f881 00bf    	strb.w	r0, [r1, #0xbf]
;     }
 8058f02: e000         	b	0x8058f06 <prvInitialiseNewTask+0xde> @ imm = #0x0
 8058f04: e7ff         	b	0x8058f06 <prvInitialiseNewTask+0xde> @ imm = #-0x2
;     configASSERT( uxPriority < configMAX_PRIORITIES );
 8058f06: 68b8         	ldr	r0, [r7, #0x8]
 8058f08: 2810         	cmp	r0, #0x10
 8058f0a: d304         	blo	0x8058f16 <prvInitialiseNewTask+0xee> @ imm = #0x8
 8058f0c: e7ff         	b	0x8058f0e <prvInitialiseNewTask+0xe6> @ imm = #-0x2
 8058f0e: 482f         	ldr	r0, [pc, #0xbc]         @ 0x8058fcc <prvInitialiseNewTask+0x1a4>
 8058f10: 4780         	blx	r0
 8058f12: e7ff         	b	0x8058f14 <prvInitialiseNewTask+0xec> @ imm = #-0x2
 8058f14: e7fe         	b	0x8058f14 <prvInitialiseNewTask+0xec> @ imm = #-0x4
;     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8058f16: 68b8         	ldr	r0, [r7, #0x8]
 8058f18: 2810         	cmp	r0, #0x10
 8058f1a: d303         	blo	0x8058f24 <prvInitialiseNewTask+0xfc> @ imm = #0x6
 8058f1c: e7ff         	b	0x8058f1e <prvInitialiseNewTask+0xf6> @ imm = #-0x2
 8058f1e: 200f         	movs	r0, #0xf
;         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8058f20: 60b8         	str	r0, [r7, #0x8]
;     }
 8058f22: e000         	b	0x8058f26 <prvInitialiseNewTask+0xfe> @ imm = #0x0
 8058f24: e7ff         	b	0x8058f26 <prvInitialiseNewTask+0xfe> @ imm = #-0x2
;     pxNewTCB->uxPriority = uxPriority;
 8058f26: 68b8         	ldr	r0, [r7, #0x8]
 8058f28: 6939         	ldr	r1, [r7, #0x10]
 8058f2a: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;         pxNewTCB->uxBasePriority = uxPriority;
 8058f2e: 68b8         	ldr	r0, [r7, #0x8]
 8058f30: 6939         	ldr	r1, [r7, #0x10]
 8058f32: f8c1 00c8    	str.w	r0, [r1, #0xc8]
;     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8058f36: 6938         	ldr	r0, [r7, #0x10]
 8058f38: 3080         	adds	r0, #0x80
 8058f3a: 491f         	ldr	r1, [pc, #0x7c]         @ 0x8058fb8 <prvInitialiseNewTask+0x190>
 8058f3c: 4788         	blx	r1
;     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8058f3e: 6938         	ldr	r0, [r7, #0x10]
 8058f40: 3094         	adds	r0, #0x94
 8058f42: 491e         	ldr	r1, [pc, #0x78]         @ 0x8058fbc <prvInitialiseNewTask+0x194>
 8058f44: 4788         	blx	r1
;     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8058f46: 6938         	ldr	r0, [r7, #0x10]
 8058f48: f8c0 008c    	str.w	r0, [r0, #0x8c]
;     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8058f4c: 68b8         	ldr	r0, [r7, #0x8]
 8058f4e: f1c0 0010    	rsb.w	r0, r0, #0x10
 8058f52: 6939         	ldr	r1, [r7, #0x10]
 8058f54: f8c1 0094    	str.w	r0, [r1, #0x94]
;     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8058f58: 6938         	ldr	r0, [r7, #0x10]
 8058f5a: f8c0 00a0    	str.w	r0, [r0, #0xa0]
;         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 8058f5e: 693a         	ldr	r2, [r7, #0x10]
 8058f60: 1d10         	adds	r0, r2, #0x4
 8058f62: 6979         	ldr	r1, [r7, #0x14]
 8058f64: f8d2 20ac    	ldr.w	r2, [r2, #0xac]
 8058f68: 9b07         	ldr	r3, [sp, #0x1c]
 8058f6a: f8df c054    	ldr.w	r12, [pc, #0x54]        @ 0x8058fc0 <prvInitialiseNewTask+0x198>
 8058f6e: 47e0         	blx	r12
;                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters, xRunPrivileged, &( pxNewTCB->xMPUSettings ) );
 8058f70: 9805         	ldr	r0, [sp, #0x14]
 8058f72: f8d7 e010    	ldr.w	lr, [r7, #0x10]
 8058f76: f8de 10ac    	ldr.w	r1, [lr, #0xac]
 8058f7a: 9a09         	ldr	r2, [sp, #0x24]
 8058f7c: 9b06         	ldr	r3, [sp, #0x18]
 8058f7e: f8dd c00c    	ldr.w	r12, [sp, #0xc]
 8058f82: f10e 0404    	add.w	r4, lr, #0x4
 8058f86: 46ee         	mov	lr, sp
 8058f88: f8ce 4004    	str.w	r4, [lr, #0x4]
 8058f8c: f8ce c000    	str.w	r12, [lr]
 8058f90: f8df c030    	ldr.w	r12, [pc, #0x30]        @ 0x8058fc4 <prvInitialiseNewTask+0x19c>
 8058f94: 47e0         	blx	r12
 8058f96: 6939         	ldr	r1, [r7, #0x10]
 8058f98: 6008         	str	r0, [r1]
;     if( pxCreatedTask != NULL )
 8058f9a: 68f8         	ldr	r0, [r7, #0xc]
 8058f9c: b120         	cbz	r0, 0x8058fa8 <prvInitialiseNewTask+0x180> @ imm = #0x8
 8058f9e: e7ff         	b	0x8058fa0 <prvInitialiseNewTask+0x178> @ imm = #-0x2
;         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8058fa0: 6938         	ldr	r0, [r7, #0x10]
 8058fa2: 68f9         	ldr	r1, [r7, #0xc]
 8058fa4: 6008         	str	r0, [r1]
;     }
 8058fa6: e000         	b	0x8058faa <prvInitialiseNewTask+0x182> @ imm = #0x0
 8058fa8: e7ff         	b	0x8058faa <prvInitialiseNewTask+0x182> @ imm = #-0x2
; }
 8058faa: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8058fc8 <prvInitialiseNewTask+0x1a0>
 8058fac: 4780         	blx	r0
 8058fae: b00a         	add	sp, #0x28
 8058fb0: bdb0         	pop	{r4, r5, r7, pc}
 8058fb2: bf00         	nop

08058fb4 <$d.131>:
 8058fb4: 75 23 06 08  	.word	0x08062375
 8058fb8: a5 b0 05 08  	.word	0x0805b0a5
 8058fbc: a5 b0 05 08  	.word	0x0805b0a5
 8058fc0: e5 e7 05 08  	.word	0x0805e7e5
 8058fc4: 0d e3 05 08  	.word	0x0805e30d
 8058fc8: 21 05 06 08  	.word	0x08060521
 8058fcc: 55 ec 05 08  	.word	0x0805ec55
 8058fd0: 55 ec 05 08  	.word	0x0805ec55

08058fd4 <prvInitialiseTaskLists>:
; {
 8058fd4: b580         	push	{r7, lr}
 8058fd6: 466f         	mov	r7, sp
 8058fd8: b084         	sub	sp, #0x10
 8058fda: f643 5140    	movw	r1, #0x3d40
 8058fde: f2c2 0100    	movt	r1, #0x2000
 8058fe2: 6808         	ldr	r0, [r1]
 8058fe4: f642 5240    	movw	r2, #0x2d40
 8058fe8: f2c2 0200    	movt	r2, #0x2000
 8058fec: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8058ff0: 3001         	adds	r0, #0x1
 8058ff2: 6008         	str	r0, [r1]
 8058ff4: 2000         	movs	r0, #0x0
;     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8058ff6: 9003         	str	r0, [sp, #0xc]
 8058ff8: e7ff         	b	0x8058ffa <prvInitialiseTaskLists+0x26> @ imm = #-0x2
 8058ffa: 9803         	ldr	r0, [sp, #0xc]
 8058ffc: 280f         	cmp	r0, #0xf
 8058ffe: d810         	bhi	0x8059022 <prvInitialiseTaskLists+0x4e> @ imm = #0x20
 8059000: e7ff         	b	0x8059002 <prvInitialiseTaskLists+0x2e> @ imm = #-0x2
;         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8059002: 9803         	ldr	r0, [sp, #0xc]
 8059004: eb00 0180    	add.w	r1, r0, r0, lsl #2
 8059008: f240 1060    	movw	r0, #0x160
 805900c: f2c2 0000    	movt	r0, #0x2000
 8059010: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8059014: 4921         	ldr	r1, [pc, #0x84]         @ 0x805909c <prvInitialiseTaskLists+0xc8>
 8059016: 4788         	blx	r1
;     }
 8059018: e7ff         	b	0x805901a <prvInitialiseTaskLists+0x46> @ imm = #-0x2
;     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 805901a: 9803         	ldr	r0, [sp, #0xc]
 805901c: 3001         	adds	r0, #0x1
 805901e: 9003         	str	r0, [sp, #0xc]
 8059020: e7eb         	b	0x8058ffa <prvInitialiseTaskLists+0x26> @ imm = #-0x2a
;     vListInitialise( &xDelayedTaskList1 );
 8059022: f240 20b8    	movw	r0, #0x2b8
 8059026: f2c2 0000    	movt	r0, #0x2000
 805902a: 9001         	str	r0, [sp, #0x4]
 805902c: 4915         	ldr	r1, [pc, #0x54]         @ 0x8059084 <prvInitialiseTaskLists+0xb0>
 805902e: 4788         	blx	r1
;     vListInitialise( &xDelayedTaskList2 );
 8059030: f240 20cc    	movw	r0, #0x2cc
 8059034: f2c2 0000    	movt	r0, #0x2000
 8059038: 9002         	str	r0, [sp, #0x8]
 805903a: 4913         	ldr	r1, [pc, #0x4c]         @ 0x8059088 <prvInitialiseTaskLists+0xb4>
 805903c: 4788         	blx	r1
;     vListInitialise( &xPendingReadyList );
 805903e: f240 1038    	movw	r0, #0x138
 8059042: f2c2 0000    	movt	r0, #0x2000
 8059046: 4911         	ldr	r1, [pc, #0x44]         @ 0x805908c <prvInitialiseTaskLists+0xb8>
 8059048: 4788         	blx	r1
;         vListInitialise( &xTasksWaitingTermination );
 805904a: f240 1008    	movw	r0, #0x108
 805904e: f2c2 0000    	movt	r0, #0x2000
 8059052: 490f         	ldr	r1, [pc, #0x3c]         @ 0x8059090 <prvInitialiseTaskLists+0xbc>
 8059054: 4788         	blx	r1
;         vListInitialise( &xSuspendedTaskList );
 8059056: f240 104c    	movw	r0, #0x14c
 805905a: f2c2 0000    	movt	r0, #0x2000
 805905e: 490d         	ldr	r1, [pc, #0x34]         @ 0x8059094 <prvInitialiseTaskLists+0xc0>
 8059060: 4788         	blx	r1
 8059062: 9901         	ldr	r1, [sp, #0x4]
 8059064: 9802         	ldr	r0, [sp, #0x8]
;     pxDelayedTaskList = &xDelayedTaskList1;
 8059066: f240 1230    	movw	r2, #0x130
 805906a: f2c2 0200    	movt	r2, #0x2000
 805906e: 6011         	str	r1, [r2]
;     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8059070: f240 1134    	movw	r1, #0x134
 8059074: f2c2 0100    	movt	r1, #0x2000
 8059078: 6008         	str	r0, [r1]
; }
 805907a: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8059098 <prvInitialiseTaskLists+0xc4>
 805907c: 4780         	blx	r0
 805907e: b004         	add	sp, #0x10
 8059080: bd80         	pop	{r7, pc}
 8059082: bf00         	nop

08059084 <$d.133>:
 8059084: 51 b0 05 08  	.word	0x0805b051
 8059088: 51 b0 05 08  	.word	0x0805b051
 805908c: 51 b0 05 08  	.word	0x0805b051
 8059090: 51 b0 05 08  	.word	0x0805b051
 8059094: 51 b0 05 08  	.word	0x0805b051
 8059098: 21 05 06 08  	.word	0x08060521
 805909c: 51 b0 05 08  	.word	0x0805b051

080590a0 <prvIdleTask>:
; {
 80590a0: b580         	push	{r7, lr}
 80590a2: 466f         	mov	r7, sp
 80590a4: b082         	sub	sp, #0x8
 80590a6: f643 5240    	movw	r2, #0x3d40
 80590aa: f2c2 0200    	movt	r2, #0x2000
 80590ae: 6811         	ldr	r1, [r2]
 80590b0: f642 5340    	movw	r3, #0x2d40
 80590b4: f2c2 0300    	movt	r3, #0x2000
 80590b8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80590bc: 3101         	adds	r1, #0x1
 80590be: 6011         	str	r1, [r2]
 80590c0: 9001         	str	r0, [sp, #0x4]
;     for( ; configCONTROL_INFINITE_LOOP(); )
 80590c2: e7ff         	b	0x80590c4 <prvIdleTask+0x24> @ imm = #-0x2
;         prvCheckTasksWaitingTermination();
 80590c4: 4806         	ldr	r0, [pc, #0x18]         @ 0x80590e0 <prvIdleTask+0x40>
 80590c6: 4780         	blx	r0
;             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80590c8: f240 1060    	movw	r0, #0x160
 80590cc: f2c2 0000    	movt	r0, #0x2000
 80590d0: 6800         	ldr	r0, [r0]
 80590d2: 2802         	cmp	r0, #0x2
 80590d4: d302         	blo	0x80590dc <prvIdleTask+0x3c> @ imm = #0x4
 80590d6: e7ff         	b	0x80590d8 <prvIdleTask+0x38> @ imm = #-0x2
;                 taskYIELD();
 80590d8: df07         	svc	#0x7
;             }
 80590da: e000         	b	0x80590de <prvIdleTask+0x3e> @ imm = #0x0
 80590dc: e7ff         	b	0x80590de <prvIdleTask+0x3e> @ imm = #-0x2
;     for( ; configCONTROL_INFINITE_LOOP(); )
 80590de: e7f1         	b	0x80590c4 <prvIdleTask+0x24> @ imm = #-0x1e

080590e0 <$d.135>:
 80590e0: e5 90 05 08  	.word	0x080590e5

080590e4 <prvCheckTasksWaitingTermination>:
; {
 80590e4: b580         	push	{r7, lr}
 80590e6: 466f         	mov	r7, sp
 80590e8: b082         	sub	sp, #0x8
 80590ea: f643 5140    	movw	r1, #0x3d40
 80590ee: f2c2 0100    	movt	r1, #0x2000
 80590f2: 6808         	ldr	r0, [r1]
 80590f4: f642 5240    	movw	r2, #0x2d40
 80590f8: f2c2 0200    	movt	r2, #0x2000
 80590fc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8059100: 3001         	adds	r0, #0x1
 8059102: 6008         	str	r0, [r1]
;         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8059104: e7ff         	b	0x8059106 <prvCheckTasksWaitingTermination+0x22> @ imm = #-0x2
 8059106: f240 101c    	movw	r0, #0x11c
 805910a: f2c2 0000    	movt	r0, #0x2000
 805910e: 6800         	ldr	r0, [r0]
 8059110: b308         	cbz	r0, 0x8059156 <prvCheckTasksWaitingTermination+0x72> @ imm = #0x42
 8059112: e7ff         	b	0x8059114 <prvCheckTasksWaitingTermination+0x30> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 8059114: 4813         	ldr	r0, [pc, #0x4c]         @ 0x8059164 <prvCheckTasksWaitingTermination+0x80>
 8059116: 4780         	blx	r0
;                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8059118: f240 1008    	movw	r0, #0x108
 805911c: f2c2 0000    	movt	r0, #0x2000
 8059120: 68c0         	ldr	r0, [r0, #0xc]
 8059122: 68c0         	ldr	r0, [r0, #0xc]
 8059124: 9001         	str	r0, [sp, #0x4]
;                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8059126: 9801         	ldr	r0, [sp, #0x4]
 8059128: 3080         	adds	r0, #0x80
 805912a: 490f         	ldr	r1, [pc, #0x3c]         @ 0x8059168 <prvCheckTasksWaitingTermination+0x84>
 805912c: 4788         	blx	r1
;                         --uxCurrentNumberOfTasks;
 805912e: f240 1120    	movw	r1, #0x120
 8059132: f2c2 0100    	movt	r1, #0x2000
 8059136: 6808         	ldr	r0, [r1]
 8059138: 3801         	subs	r0, #0x1
 805913a: 6008         	str	r0, [r1]
;                         --uxDeletedTasksWaitingCleanUp;
 805913c: f240 111c    	movw	r1, #0x11c
 8059140: f2c2 0100    	movt	r1, #0x2000
 8059144: 6808         	ldr	r0, [r1]
 8059146: 3801         	subs	r0, #0x1
 8059148: 6008         	str	r0, [r1]
;                 taskEXIT_CRITICAL();
 805914a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805916c <prvCheckTasksWaitingTermination+0x88>
 805914c: 4780         	blx	r0
;                 prvDeleteTCB( pxTCB );
 805914e: 9801         	ldr	r0, [sp, #0x4]
 8059150: 4907         	ldr	r1, [pc, #0x1c]         @ 0x8059170 <prvCheckTasksWaitingTermination+0x8c>
 8059152: 4788         	blx	r1
;         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8059154: e7d7         	b	0x8059106 <prvCheckTasksWaitingTermination+0x22> @ imm = #-0x52
; }
 8059156: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059160 <prvCheckTasksWaitingTermination+0x7c>
 8059158: 4780         	blx	r0
 805915a: b002         	add	sp, #0x8
 805915c: bd80         	pop	{r7, pc}
 805915e: bf00         	nop

08059160 <$d.137>:
 8059160: 21 05 06 08  	.word	0x08060521
 8059164: 05 e1 05 08  	.word	0x0805e105
 8059168: c9 b1 05 08  	.word	0x0805b1c9
 805916c: 4d e1 05 08  	.word	0x0805e14d
 8059170: 11 58 05 08  	.word	0x08055811

08059174 <xTimerCreateTimerTask>:
;     {
 8059174: b580         	push	{r7, lr}
 8059176: 466f         	mov	r7, sp
 8059178: b084         	sub	sp, #0x10
 805917a: f643 5140    	movw	r1, #0x3d40
 805917e: f2c2 0100    	movt	r1, #0x2000
 8059182: 6808         	ldr	r0, [r1]
 8059184: f642 5240    	movw	r2, #0x2d40
 8059188: f2c2 0200    	movt	r2, #0x2000
 805918c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8059190: 3001         	adds	r0, #0x1
 8059192: 6008         	str	r0, [r1]
 8059194: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 8059196: 9003         	str	r0, [sp, #0xc]
;         prvCheckForValidListAndQueue();
 8059198: 4818         	ldr	r0, [pc, #0x60]         @ 0x80591fc <xTimerCreateTimerTask+0x88>
 805919a: 4780         	blx	r0
;         if( xTimerQueue != NULL )
 805919c: f240 20e0    	movw	r0, #0x2e0
 80591a0: f2c2 0000    	movt	r0, #0x2000
 80591a4: 6800         	ldr	r0, [r0]
 80591a6: b1d0         	cbz	r0, 0x80591de <xTimerCreateTimerTask+0x6a> @ imm = #0x34
 80591a8: e7ff         	b	0x80591aa <xTimerCreateTimerTask+0x36> @ imm = #-0x2
;                     xReturn = xTaskCreate( prvTimerTask,
 80591aa: f240 20e4    	movw	r0, #0x2e4
 80591ae: f2c2 0000    	movt	r0, #0x2000
 80591b2: 4669         	mov	r1, sp
 80591b4: 6048         	str	r0, [r1, #0x4]
 80591b6: 2002         	movs	r0, #0x2
 80591b8: f2c8 0000    	movt	r0, #0x8000
 80591bc: 6008         	str	r0, [r1]
 80591be: f249 20d5    	movw	r0, #0x92d5
 80591c2: f6c0 0005    	movt	r0, #0x805
 80591c6: f24a 01bd    	movw	r1, #0xa0bd
 80591ca: f6c0 0106    	movt	r1, #0x806
 80591ce: f8df c030    	ldr.w	r12, [pc, #0x30]        @ 0x8059200 <xTimerCreateTimerTask+0x8c>
 80591d2: f44f 7280    	mov.w	r2, #0x100
 80591d6: 2300         	movs	r3, #0x0
 80591d8: 47e0         	blx	r12
 80591da: 9003         	str	r0, [sp, #0xc]
;         }
 80591dc: e000         	b	0x80591e0 <xTimerCreateTimerTask+0x6c> @ imm = #0x0
 80591de: e7ff         	b	0x80591e0 <xTimerCreateTimerTask+0x6c> @ imm = #-0x2
;         configASSERT( xReturn );
 80591e0: 9803         	ldr	r0, [sp, #0xc]
 80591e2: b920         	cbnz	r0, 0x80591ee <xTimerCreateTimerTask+0x7a> @ imm = #0x8
 80591e4: e7ff         	b	0x80591e6 <xTimerCreateTimerTask+0x72> @ imm = #-0x2
 80591e6: 4808         	ldr	r0, [pc, #0x20]         @ 0x8059208 <xTimerCreateTimerTask+0x94>
 80591e8: 4780         	blx	r0
 80591ea: e7ff         	b	0x80591ec <xTimerCreateTimerTask+0x78> @ imm = #-0x2
 80591ec: e7fe         	b	0x80591ec <xTimerCreateTimerTask+0x78> @ imm = #-0x4
;         return xReturn;
 80591ee: 9803         	ldr	r0, [sp, #0xc]
 80591f0: 9002         	str	r0, [sp, #0x8]
 80591f2: 4804         	ldr	r0, [pc, #0x10]         @ 0x8059204 <xTimerCreateTimerTask+0x90>
 80591f4: 4780         	blx	r0
 80591f6: 9802         	ldr	r0, [sp, #0x8]
 80591f8: b004         	add	sp, #0x10
 80591fa: bd80         	pop	{r7, pc}

080591fc <$d.1>:
 80591fc: 0d 92 05 08  	.word	0x0805920d
 8059200: e5 54 05 08  	.word	0x080554e5
 8059204: 21 05 06 08  	.word	0x08060521
 8059208: 55 ec 05 08  	.word	0x0805ec55

0805920c <prvCheckForValidListAndQueue>:
;     {
 805920c: b580         	push	{r7, lr}
 805920e: 466f         	mov	r7, sp
 8059210: b082         	sub	sp, #0x8
;         taskENTER_CRITICAL();
 8059212: f643 5140    	movw	r1, #0x3d40
 8059216: f2c2 0100    	movt	r1, #0x2000
 805921a: 6808         	ldr	r0, [r1]
 805921c: f642 5240    	movw	r2, #0x2d40
 8059220: f2c2 0200    	movt	r2, #0x2000
 8059224: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8059228: 3001         	adds	r0, #0x1
 805922a: 6008         	str	r0, [r1]
 805922c: 4822         	ldr	r0, [pc, #0x88]         @ 0x80592b8 <prvCheckForValidListAndQueue+0xac>
 805922e: 4780         	blx	r0
;             if( xTimerQueue == NULL )
 8059230: f240 20e0    	movw	r0, #0x2e0
 8059234: f2c2 0000    	movt	r0, #0x2000
 8059238: 6800         	ldr	r0, [r0]
 805923a: bbb0         	cbnz	r0, 0x80592aa <prvCheckForValidListAndQueue+0x9e> @ imm = #0x6c
 805923c: e7ff         	b	0x805923e <prvCheckForValidListAndQueue+0x32> @ imm = #-0x2
;                 vListInitialise( &xActiveTimerList1 );
 805923e: f240 20f4    	movw	r0, #0x2f4
 8059242: f2c2 0000    	movt	r0, #0x2000
 8059246: 9000         	str	r0, [sp]
 8059248: 491c         	ldr	r1, [pc, #0x70]         @ 0x80592bc <prvCheckForValidListAndQueue+0xb0>
 805924a: 4788         	blx	r1
;                 vListInitialise( &xActiveTimerList2 );
 805924c: f240 3008    	movw	r0, #0x308
 8059250: f2c2 0000    	movt	r0, #0x2000
 8059254: 9001         	str	r0, [sp, #0x4]
 8059256: 491a         	ldr	r1, [pc, #0x68]         @ 0x80592c0 <prvCheckForValidListAndQueue+0xb4>
 8059258: 4788         	blx	r1
 805925a: 9900         	ldr	r1, [sp]
 805925c: 9801         	ldr	r0, [sp, #0x4]
;                 pxCurrentTimerList = &xActiveTimerList1;
 805925e: f240 22e8    	movw	r2, #0x2e8
 8059262: f2c2 0200    	movt	r2, #0x2000
 8059266: 6011         	str	r1, [r2]
;                 pxOverflowTimerList = &xActiveTimerList2;
 8059268: f240 21ec    	movw	r1, #0x2ec
 805926c: f2c2 0100    	movt	r1, #0x2000
 8059270: 6008         	str	r0, [r1]
;                     xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8059272: 4b14         	ldr	r3, [pc, #0x50]         @ 0x80592c4 <prvCheckForValidListAndQueue+0xb8>
 8059274: 200a         	movs	r0, #0xa
 8059276: 2110         	movs	r1, #0x10
 8059278: 2200         	movs	r2, #0x0
 805927a: 4798         	blx	r3
 805927c: 4601         	mov	r1, r0
 805927e: f240 20e0    	movw	r0, #0x2e0
 8059282: f2c2 0000    	movt	r0, #0x2000
 8059286: 6001         	str	r1, [r0]
;                     if( xTimerQueue != NULL )
 8059288: 6800         	ldr	r0, [r0]
 805928a: b160         	cbz	r0, 0x80592a6 <prvCheckForValidListAndQueue+0x9a> @ imm = #0x18
 805928c: e7ff         	b	0x805928e <prvCheckForValidListAndQueue+0x82> @ imm = #-0x2
;                         vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 805928e: f240 20e0    	movw	r0, #0x2e0
 8059292: f2c2 0000    	movt	r0, #0x2000
 8059296: 6800         	ldr	r0, [r0]
 8059298: f24a 01c5    	movw	r1, #0xa0c5
 805929c: f6c0 0106    	movt	r1, #0x806
 80592a0: 4a09         	ldr	r2, [pc, #0x24]         @ 0x80592c8 <prvCheckForValidListAndQueue+0xbc>
 80592a2: 4790         	blx	r2
;                     }
 80592a4: e000         	b	0x80592a8 <prvCheckForValidListAndQueue+0x9c> @ imm = #0x0
 80592a6: e7ff         	b	0x80592a8 <prvCheckForValidListAndQueue+0x9c> @ imm = #-0x2
;             }
 80592a8: e000         	b	0x80592ac <prvCheckForValidListAndQueue+0xa0> @ imm = #0x0
 80592aa: e7ff         	b	0x80592ac <prvCheckForValidListAndQueue+0xa0> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 80592ac: 4807         	ldr	r0, [pc, #0x1c]         @ 0x80592cc <prvCheckForValidListAndQueue+0xc0>
 80592ae: 4780         	blx	r0
;     }
 80592b0: 4807         	ldr	r0, [pc, #0x1c]         @ 0x80592d0 <prvCheckForValidListAndQueue+0xc4>
 80592b2: 4780         	blx	r0
 80592b4: b002         	add	sp, #0x8
 80592b6: bd80         	pop	{r7, pc}

080592b8 <$d.3>:
 80592b8: 05 e1 05 08  	.word	0x0805e105
 80592bc: 51 b0 05 08  	.word	0x0805b051
 80592c0: 51 b0 05 08  	.word	0x0805b051
 80592c4: 61 b3 05 08  	.word	0x0805b361
 80592c8: 21 cd 05 08  	.word	0x0805cd21
 80592cc: 4d e1 05 08  	.word	0x0805e14d
 80592d0: 21 05 06 08  	.word	0x08060521

080592d4 <prvTimerTask>:
;     {
 80592d4: b580         	push	{r7, lr}
 80592d6: 466f         	mov	r7, sp
 80592d8: b084         	sub	sp, #0x10
 80592da: f643 5240    	movw	r2, #0x3d40
 80592de: f2c2 0200    	movt	r2, #0x2000
 80592e2: 6811         	ldr	r1, [r2]
 80592e4: f642 5340    	movw	r3, #0x2d40
 80592e8: f2c2 0300    	movt	r3, #0x2000
 80592ec: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80592f0: 3101         	adds	r1, #0x1
 80592f2: 6011         	str	r1, [r2]
 80592f4: 9003         	str	r0, [sp, #0xc]
;         for( ; configCONTROL_INFINITE_LOOP(); )
 80592f6: e7ff         	b	0x80592f8 <prvTimerTask+0x24> @ imm = #-0x2
;             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80592f8: 4905         	ldr	r1, [pc, #0x14]         @ 0x8059310 <prvTimerTask+0x3c>
 80592fa: a801         	add	r0, sp, #0x4
 80592fc: 4788         	blx	r1
 80592fe: 9002         	str	r0, [sp, #0x8]
;             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8059300: 9802         	ldr	r0, [sp, #0x8]
 8059302: 9901         	ldr	r1, [sp, #0x4]
 8059304: 4a03         	ldr	r2, [pc, #0xc]          @ 0x8059314 <prvTimerTask+0x40>
 8059306: 4790         	blx	r2
;             prvProcessReceivedCommands();
 8059308: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059318 <prvTimerTask+0x44>
 805930a: 4780         	blx	r0
;         for( ; configCONTROL_INFINITE_LOOP(); )
 805930c: e7f4         	b	0x80592f8 <prvTimerTask+0x24> @ imm = #-0x18
 805930e: bf00         	nop

08059310 <$d.5>:
 8059310: d9 9a 05 08  	.word	0x08059ad9
 8059314: 45 9b 05 08  	.word	0x08059b45
 8059318: 11 9c 05 08  	.word	0x08059c11

0805931c <xTimerCreate>:
;         {
 805931c: b5b0         	push	{r4, r5, r7, lr}
 805931e: af02         	add	r7, sp, #0x8
 8059320: b088         	sub	sp, #0x20
 8059322: 4674         	mov	r4, lr
 8059324: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8059328: f643 5e40    	movw	lr, #0x3d40
 805932c: f2c2 0e00    	movt	lr, #0x2000
 8059330: f8de c000    	ldr.w	r12, [lr]
 8059334: f642 5540    	movw	r5, #0x2d40
 8059338: f2c2 0500    	movt	r5, #0x2000
 805933c: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 8059340: f10c 0c01    	add.w	r12, r12, #0x1
 8059344: f8ce c000    	str.w	r12, [lr]
 8059348: 9007         	str	r0, [sp, #0x1c]
 805934a: 9106         	str	r1, [sp, #0x18]
 805934c: 9205         	str	r2, [sp, #0x14]
 805934e: 9304         	str	r3, [sp, #0x10]
;             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's name. */
 8059350: 4910         	ldr	r1, [pc, #0x40]         @ 0x8059394 <xTimerCreate+0x78>
 8059352: 202c         	movs	r0, #0x2c
 8059354: 4788         	blx	r1
 8059356: 9003         	str	r0, [sp, #0xc]
;             if( pxNewTimer != NULL )
 8059358: 9803         	ldr	r0, [sp, #0xc]
 805935a: b1a0         	cbz	r0, 0x8059386 <xTimerCreate+0x6a> @ imm = #0x28
 805935c: e7ff         	b	0x805935e <xTimerCreate+0x42> @ imm = #-0x2
;                 pxNewTimer->ucStatus = 0x00;
 805935e: 9903         	ldr	r1, [sp, #0xc]
 8059360: 2000         	movs	r0, #0x0
 8059362: f881 0028    	strb.w	r0, [r1, #0x28]
;                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8059366: 9807         	ldr	r0, [sp, #0x1c]
 8059368: 9906         	ldr	r1, [sp, #0x18]
 805936a: 9a05         	ldr	r2, [sp, #0x14]
 805936c: 9b04         	ldr	r3, [sp, #0x10]
 805936e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8059372: 9c03         	ldr	r4, [sp, #0xc]
 8059374: 46ee         	mov	lr, sp
 8059376: f8ce 4004    	str.w	r4, [lr, #0x4]
 805937a: f8ce c000    	str.w	r12, [lr]
 805937e: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x8059398 <xTimerCreate+0x7c>
 8059382: 47e0         	blx	r12
;             }
 8059384: e7ff         	b	0x8059386 <xTimerCreate+0x6a> @ imm = #-0x2
;             return pxNewTimer;
 8059386: 9803         	ldr	r0, [sp, #0xc]
 8059388: 9002         	str	r0, [sp, #0x8]
 805938a: 4804         	ldr	r0, [pc, #0x10]         @ 0x805939c <xTimerCreate+0x80>
 805938c: 4780         	blx	r0
 805938e: 9802         	ldr	r0, [sp, #0x8]
 8059390: b008         	add	sp, #0x20
 8059392: bdb0         	pop	{r4, r5, r7, pc}

08059394 <$d.7>:
 8059394: 75 a0 05 08  	.word	0x0805a075
 8059398: a1 93 05 08  	.word	0x080593a1
 805939c: 21 05 06 08  	.word	0x08060521

080593a0 <prvInitialiseNewTimer>:
;     {
 80593a0: b5b0         	push	{r4, r5, r7, lr}
 80593a2: af02         	add	r7, sp, #0x8
 80593a4: b084         	sub	sp, #0x10
 80593a6: 4674         	mov	r4, lr
 80593a8: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80593ac: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80593b0: f643 5e40    	movw	lr, #0x3d40
 80593b4: f2c2 0e00    	movt	lr, #0x2000
 80593b8: f8de c000    	ldr.w	r12, [lr]
 80593bc: f642 5540    	movw	r5, #0x2d40
 80593c0: f2c2 0500    	movt	r5, #0x2000
 80593c4: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 80593c8: f10c 0c01    	add.w	r12, r12, #0x1
 80593cc: f8ce c000    	str.w	r12, [lr]
 80593d0: 9003         	str	r0, [sp, #0xc]
 80593d2: 9102         	str	r1, [sp, #0x8]
 80593d4: 9201         	str	r2, [sp, #0x4]
 80593d6: 9300         	str	r3, [sp]
;         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80593d8: 9802         	ldr	r0, [sp, #0x8]
 80593da: b920         	cbnz	r0, 0x80593e6 <prvInitialiseNewTimer+0x46> @ imm = #0x8
 80593dc: e7ff         	b	0x80593de <prvInitialiseNewTimer+0x3e> @ imm = #-0x2
 80593de: 4815         	ldr	r0, [pc, #0x54]         @ 0x8059434 <prvInitialiseNewTimer+0x94>
 80593e0: 4780         	blx	r0
 80593e2: e7ff         	b	0x80593e4 <prvInitialiseNewTimer+0x44> @ imm = #-0x2
 80593e4: e7fe         	b	0x80593e4 <prvInitialiseNewTimer+0x44> @ imm = #-0x4
;         prvCheckForValidListAndQueue();
 80593e6: 4810         	ldr	r0, [pc, #0x40]         @ 0x8059428 <prvInitialiseNewTimer+0x88>
 80593e8: 4780         	blx	r0
;         pxNewTimer->pcTimerName = pcTimerName;
 80593ea: 9803         	ldr	r0, [sp, #0xc]
 80593ec: 68f9         	ldr	r1, [r7, #0xc]
 80593ee: 6008         	str	r0, [r1]
;         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80593f0: 9802         	ldr	r0, [sp, #0x8]
 80593f2: 68f9         	ldr	r1, [r7, #0xc]
 80593f4: 6188         	str	r0, [r1, #0x18]
;         pxNewTimer->pvTimerID = pvTimerID;
 80593f6: 9800         	ldr	r0, [sp]
 80593f8: 68f9         	ldr	r1, [r7, #0xc]
 80593fa: 61c8         	str	r0, [r1, #0x1c]
;         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80593fc: 68b8         	ldr	r0, [r7, #0x8]
 80593fe: 68f9         	ldr	r1, [r7, #0xc]
 8059400: 6208         	str	r0, [r1, #0x20]
;         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8059402: 68f8         	ldr	r0, [r7, #0xc]
 8059404: 3004         	adds	r0, #0x4
 8059406: 4909         	ldr	r1, [pc, #0x24]         @ 0x805942c <prvInitialiseNewTimer+0x8c>
 8059408: 4788         	blx	r1
;         if( xAutoReload != pdFALSE )
 805940a: 9801         	ldr	r0, [sp, #0x4]
 805940c: b140         	cbz	r0, 0x8059420 <prvInitialiseNewTimer+0x80> @ imm = #0x10
 805940e: e7ff         	b	0x8059410 <prvInitialiseNewTimer+0x70> @ imm = #-0x2
;             pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8059410: 68f9         	ldr	r1, [r7, #0xc]
 8059412: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8059416: f040 0004    	orr	r0, r0, #0x4
 805941a: f881 0028    	strb.w	r0, [r1, #0x28]
;         }
 805941e: e7ff         	b	0x8059420 <prvInitialiseNewTimer+0x80> @ imm = #-0x2
;     }
 8059420: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059430 <prvInitialiseNewTimer+0x90>
 8059422: 4780         	blx	r0
 8059424: b004         	add	sp, #0x10
 8059426: bdb0         	pop	{r4, r5, r7, pc}

08059428 <$d.9>:
 8059428: 0d 92 05 08  	.word	0x0805920d
 805942c: a5 b0 05 08  	.word	0x0805b0a5
 8059430: 21 05 06 08  	.word	0x08060521
 8059434: 55 ec 05 08  	.word	0x0805ec55

08059438 <xTimerGenericCommandFromTask>:
;     {
 8059438: b5b0         	push	{r4, r5, r7, lr}
 805943a: af02         	add	r7, sp, #0x8
 805943c: b08a         	sub	sp, #0x28
 805943e: 4674         	mov	r4, lr
 8059440: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8059444: f643 5e40    	movw	lr, #0x3d40
 8059448: f2c2 0e00    	movt	lr, #0x2000
 805944c: f8de c000    	ldr.w	r12, [lr]
 8059450: f642 5540    	movw	r5, #0x2d40
 8059454: f2c2 0500    	movt	r5, #0x2000
 8059458: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805945c: f10c 0c01    	add.w	r12, r12, #0x1
 8059460: f8ce c000    	str.w	r12, [lr]
 8059464: 9009         	str	r0, [sp, #0x24]
 8059466: 9108         	str	r1, [sp, #0x20]
 8059468: 9207         	str	r2, [sp, #0x1c]
 805946a: 9306         	str	r3, [sp, #0x18]
 805946c: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 805946e: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTimer );
 8059470: 9809         	ldr	r0, [sp, #0x24]
 8059472: b920         	cbnz	r0, 0x805947e <xTimerGenericCommandFromTask+0x46> @ imm = #0x8
 8059474: e7ff         	b	0x8059476 <xTimerGenericCommandFromTask+0x3e> @ imm = #-0x2
 8059476: 4828         	ldr	r0, [pc, #0xa0]         @ 0x8059518 <xTimerGenericCommandFromTask+0xe0>
 8059478: 4780         	blx	r0
 805947a: e7ff         	b	0x805947c <xTimerGenericCommandFromTask+0x44> @ imm = #-0x2
 805947c: e7fe         	b	0x805947c <xTimerGenericCommandFromTask+0x44> @ imm = #-0x4
;         if( xTimerQueue != NULL )
 805947e: f240 20e0    	movw	r0, #0x2e0
 8059482: f2c2 0000    	movt	r0, #0x2000
 8059486: 6800         	ldr	r0, [r0]
 8059488: b398         	cbz	r0, 0x80594f2 <xTimerGenericCommandFromTask+0xba> @ imm = #0x66
 805948a: e7ff         	b	0x805948c <xTimerGenericCommandFromTask+0x54> @ imm = #-0x2
;             xMessage.xMessageID = xCommandID;
 805948c: 9808         	ldr	r0, [sp, #0x20]
 805948e: 9001         	str	r0, [sp, #0x4]
;             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8059490: 9807         	ldr	r0, [sp, #0x1c]
 8059492: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xTimerParameters.pxTimer = xTimer;
 8059494: 9809         	ldr	r0, [sp, #0x24]
 8059496: 9003         	str	r0, [sp, #0xc]
;             configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8059498: 9808         	ldr	r0, [sp, #0x20]
 805949a: 2806         	cmp	r0, #0x6
 805949c: db04         	blt	0x80594a8 <xTimerGenericCommandFromTask+0x70> @ imm = #0x8
 805949e: e7ff         	b	0x80594a0 <xTimerGenericCommandFromTask+0x68> @ imm = #-0x2
 80594a0: 481c         	ldr	r0, [pc, #0x70]         @ 0x8059514 <xTimerGenericCommandFromTask+0xdc>
 80594a2: 4780         	blx	r0
 80594a4: e7ff         	b	0x80594a6 <xTimerGenericCommandFromTask+0x6e> @ imm = #-0x2
 80594a6: e7fe         	b	0x80594a6 <xTimerGenericCommandFromTask+0x6e> @ imm = #-0x4
;             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80594a8: 9808         	ldr	r0, [sp, #0x20]
 80594aa: 2805         	cmp	r0, #0x5
 80594ac: dc20         	bgt	0x80594f0 <xTimerGenericCommandFromTask+0xb8> @ imm = #0x40
 80594ae: e7ff         	b	0x80594b0 <xTimerGenericCommandFromTask+0x78> @ imm = #-0x2
;                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80594b0: 4814         	ldr	r0, [pc, #0x50]         @ 0x8059504 <xTimerGenericCommandFromTask+0xcc>
 80594b2: 4780         	blx	r0
 80594b4: 2802         	cmp	r0, #0x2
 80594b6: d10d         	bne	0x80594d4 <xTimerGenericCommandFromTask+0x9c> @ imm = #0x1a
 80594b8: e7ff         	b	0x80594ba <xTimerGenericCommandFromTask+0x82> @ imm = #-0x2
;                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80594ba: f240 20e0    	movw	r0, #0x2e0
 80594be: f2c2 0000    	movt	r0, #0x2000
 80594c2: 6800         	ldr	r0, [r0]
 80594c4: 68ba         	ldr	r2, [r7, #0x8]
 80594c6: f8df c044    	ldr.w	r12, [pc, #0x44]        @ 0x805950c <xTimerGenericCommandFromTask+0xd4>
 80594ca: a901         	add	r1, sp, #0x4
 80594cc: 2300         	movs	r3, #0x0
 80594ce: 47e0         	blx	r12
 80594d0: 9005         	str	r0, [sp, #0x14]
;                 }
 80594d2: e00c         	b	0x80594ee <xTimerGenericCommandFromTask+0xb6> @ imm = #0x18
;                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80594d4: f240 20e0    	movw	r0, #0x2e0
 80594d8: f2c2 0000    	movt	r0, #0x2000
 80594dc: 6800         	ldr	r0, [r0]
 80594de: f8df c028    	ldr.w	r12, [pc, #0x28]        @ 0x8059508 <xTimerGenericCommandFromTask+0xd0>
 80594e2: a901         	add	r1, sp, #0x4
 80594e4: 2300         	movs	r3, #0x0
 80594e6: 461a         	mov	r2, r3
 80594e8: 47e0         	blx	r12
 80594ea: 9005         	str	r0, [sp, #0x14]
 80594ec: e7ff         	b	0x80594ee <xTimerGenericCommandFromTask+0xb6> @ imm = #-0x2
;             }
 80594ee: e7ff         	b	0x80594f0 <xTimerGenericCommandFromTask+0xb8> @ imm = #-0x2
;         }
 80594f0: e000         	b	0x80594f4 <xTimerGenericCommandFromTask+0xbc> @ imm = #0x0
 80594f2: e7ff         	b	0x80594f4 <xTimerGenericCommandFromTask+0xbc> @ imm = #-0x2
;         return xReturn;
 80594f4: 9805         	ldr	r0, [sp, #0x14]
 80594f6: 9000         	str	r0, [sp]
 80594f8: 4805         	ldr	r0, [pc, #0x14]         @ 0x8059510 <xTimerGenericCommandFromTask+0xd8>
 80594fa: 4780         	blx	r0
 80594fc: 9800         	ldr	r0, [sp]
 80594fe: b00a         	add	sp, #0x28
 8059500: bdb0         	pop	{r4, r5, r7, pc}
 8059502: bf00         	nop

08059504 <$d.11>:
 8059504: fd 7b 05 08  	.word	0x08057bfd
 8059508: b1 b6 05 08  	.word	0x0805b6b1
 805950c: b1 b6 05 08  	.word	0x0805b6b1
 8059510: 21 05 06 08  	.word	0x08060521
 8059514: 55 ec 05 08  	.word	0x0805ec55
 8059518: 55 ec 05 08  	.word	0x0805ec55

0805951c <xTimerGenericCommandFromISR>:
;     {
 805951c: b5b0         	push	{r4, r5, r7, lr}
 805951e: af02         	add	r7, sp, #0x8
 8059520: b08a         	sub	sp, #0x28
 8059522: 4674         	mov	r4, lr
 8059524: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8059528: f643 5e40    	movw	lr, #0x3d40
 805952c: f2c2 0e00    	movt	lr, #0x2000
 8059530: f8de c000    	ldr.w	r12, [lr]
 8059534: f642 5540    	movw	r5, #0x2d40
 8059538: f2c2 0500    	movt	r5, #0x2000
 805953c: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 8059540: f10c 0c01    	add.w	r12, r12, #0x1
 8059544: f8ce c000    	str.w	r12, [lr]
 8059548: 9009         	str	r0, [sp, #0x24]
 805954a: 9108         	str	r1, [sp, #0x20]
 805954c: 9207         	str	r2, [sp, #0x1c]
 805954e: 9306         	str	r3, [sp, #0x18]
 8059550: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 8059552: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTimer );
 8059554: 9809         	ldr	r0, [sp, #0x24]
 8059556: b920         	cbnz	r0, 0x8059562 <xTimerGenericCommandFromISR+0x46> @ imm = #0x8
 8059558: e7ff         	b	0x805955a <xTimerGenericCommandFromISR+0x3e> @ imm = #-0x2
 805955a: 481c         	ldr	r0, [pc, #0x70]         @ 0x80595cc <xTimerGenericCommandFromISR+0xb0>
 805955c: 4780         	blx	r0
 805955e: e7ff         	b	0x8059560 <xTimerGenericCommandFromISR+0x44> @ imm = #-0x2
 8059560: e7fe         	b	0x8059560 <xTimerGenericCommandFromISR+0x44> @ imm = #-0x4
;         if( xTimerQueue != NULL )
 8059562: f240 20e0    	movw	r0, #0x2e0
 8059566: f2c2 0000    	movt	r0, #0x2000
 805956a: 6800         	ldr	r0, [r0]
 805956c: b300         	cbz	r0, 0x80595b0 <xTimerGenericCommandFromISR+0x94> @ imm = #0x40
 805956e: e7ff         	b	0x8059570 <xTimerGenericCommandFromISR+0x54> @ imm = #-0x2
;             xMessage.xMessageID = xCommandID;
 8059570: 9808         	ldr	r0, [sp, #0x20]
 8059572: 9001         	str	r0, [sp, #0x4]
;             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8059574: 9807         	ldr	r0, [sp, #0x1c]
 8059576: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xTimerParameters.pxTimer = xTimer;
 8059578: 9809         	ldr	r0, [sp, #0x24]
 805957a: 9003         	str	r0, [sp, #0xc]
;             configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );
 805957c: 9808         	ldr	r0, [sp, #0x20]
 805957e: 2805         	cmp	r0, #0x5
 8059580: dc04         	bgt	0x805958c <xTimerGenericCommandFromISR+0x70> @ imm = #0x8
 8059582: e7ff         	b	0x8059584 <xTimerGenericCommandFromISR+0x68> @ imm = #-0x2
 8059584: 4810         	ldr	r0, [pc, #0x40]         @ 0x80595c8 <xTimerGenericCommandFromISR+0xac>
 8059586: 4780         	blx	r0
 8059588: e7ff         	b	0x805958a <xTimerGenericCommandFromISR+0x6e> @ imm = #-0x2
 805958a: e7fe         	b	0x805958a <xTimerGenericCommandFromISR+0x6e> @ imm = #-0x4
;             if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
 805958c: 9808         	ldr	r0, [sp, #0x20]
 805958e: 2806         	cmp	r0, #0x6
 8059590: db0d         	blt	0x80595ae <xTimerGenericCommandFromISR+0x92> @ imm = #0x1a
 8059592: e7ff         	b	0x8059594 <xTimerGenericCommandFromISR+0x78> @ imm = #-0x2
;                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8059594: f240 20e0    	movw	r0, #0x2e0
 8059598: f2c2 0000    	movt	r0, #0x2000
 805959c: 6800         	ldr	r0, [r0]
 805959e: 9a06         	ldr	r2, [sp, #0x18]
 80595a0: f8df c01c    	ldr.w	r12, [pc, #0x1c]        @ 0x80595c0 <xTimerGenericCommandFromISR+0xa4>
 80595a4: a901         	add	r1, sp, #0x4
 80595a6: 2300         	movs	r3, #0x0
 80595a8: 47e0         	blx	r12
 80595aa: 9005         	str	r0, [sp, #0x14]
;             }
 80595ac: e7ff         	b	0x80595ae <xTimerGenericCommandFromISR+0x92> @ imm = #-0x2
;         }
 80595ae: e000         	b	0x80595b2 <xTimerGenericCommandFromISR+0x96> @ imm = #0x0
 80595b0: e7ff         	b	0x80595b2 <xTimerGenericCommandFromISR+0x96> @ imm = #-0x2
;         return xReturn;
 80595b2: 9805         	ldr	r0, [sp, #0x14]
 80595b4: 9000         	str	r0, [sp]
 80595b6: 4803         	ldr	r0, [pc, #0xc]          @ 0x80595c4 <xTimerGenericCommandFromISR+0xa8>
 80595b8: 4780         	blx	r0
 80595ba: 9800         	ldr	r0, [sp]
 80595bc: b00a         	add	sp, #0x28
 80595be: bdb0         	pop	{r4, r5, r7, pc}

080595c0 <$d.13>:
 80595c0: e9 be 05 08  	.word	0x0805bee9
 80595c4: 21 05 06 08  	.word	0x08060521
 80595c8: 55 ec 05 08  	.word	0x0805ec55
 80595cc: 55 ec 05 08  	.word	0x0805ec55

080595d0 <xTimerGetTimerDaemonTaskHandle>:
;     {
 80595d0: b580         	push	{r7, lr}
 80595d2: 466f         	mov	r7, sp
 80595d4: b082         	sub	sp, #0x8
;         configASSERT( ( xTimerTaskHandle != NULL ) );
 80595d6: f643 5140    	movw	r1, #0x3d40
 80595da: f2c2 0100    	movt	r1, #0x2000
 80595de: 6808         	ldr	r0, [r1]
 80595e0: f642 5240    	movw	r2, #0x2d40
 80595e4: f2c2 0200    	movt	r2, #0x2000
 80595e8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80595ec: 3001         	adds	r0, #0x1
 80595ee: 6008         	str	r0, [r1]
 80595f0: f240 20e4    	movw	r0, #0x2e4
 80595f4: f2c2 0000    	movt	r0, #0x2000
 80595f8: 6800         	ldr	r0, [r0]
 80595fa: b920         	cbnz	r0, 0x8059606 <xTimerGetTimerDaemonTaskHandle+0x36> @ imm = #0x8
 80595fc: e7ff         	b	0x80595fe <xTimerGetTimerDaemonTaskHandle+0x2e> @ imm = #-0x2
 80595fe: 4808         	ldr	r0, [pc, #0x20]         @ 0x8059620 <xTimerGetTimerDaemonTaskHandle+0x50>
 8059600: 4780         	blx	r0
 8059602: e7ff         	b	0x8059604 <xTimerGetTimerDaemonTaskHandle+0x34> @ imm = #-0x2
 8059604: e7fe         	b	0x8059604 <xTimerGetTimerDaemonTaskHandle+0x34> @ imm = #-0x4
;         return xTimerTaskHandle;
 8059606: f240 20e4    	movw	r0, #0x2e4
 805960a: f2c2 0000    	movt	r0, #0x2000
 805960e: 6800         	ldr	r0, [r0]
 8059610: 9001         	str	r0, [sp, #0x4]
 8059612: 4802         	ldr	r0, [pc, #0x8]          @ 0x805961c <xTimerGetTimerDaemonTaskHandle+0x4c>
 8059614: 4780         	blx	r0
 8059616: 9801         	ldr	r0, [sp, #0x4]
 8059618: b002         	add	sp, #0x8
 805961a: bd80         	pop	{r7, pc}

0805961c <$d.15>:
 805961c: 21 05 06 08  	.word	0x08060521
 8059620: 55 ec 05 08  	.word	0x0805ec55

08059624 <xTimerGetPeriod>:
;     {
 8059624: b580         	push	{r7, lr}
 8059626: 466f         	mov	r7, sp
 8059628: b084         	sub	sp, #0x10
 805962a: f643 5240    	movw	r2, #0x3d40
 805962e: f2c2 0200    	movt	r2, #0x2000
 8059632: 6811         	ldr	r1, [r2]
 8059634: f642 5340    	movw	r3, #0x2d40
 8059638: f2c2 0300    	movt	r3, #0x2000
 805963c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8059640: 3101         	adds	r1, #0x1
 8059642: 6011         	str	r1, [r2]
 8059644: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 8059646: 9803         	ldr	r0, [sp, #0xc]
 8059648: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 805964a: 9803         	ldr	r0, [sp, #0xc]
 805964c: b920         	cbnz	r0, 0x8059658 <xTimerGetPeriod+0x34> @ imm = #0x8
 805964e: e7ff         	b	0x8059650 <xTimerGetPeriod+0x2c> @ imm = #-0x2
 8059650: 4806         	ldr	r0, [pc, #0x18]         @ 0x805966c <xTimerGetPeriod+0x48>
 8059652: 4780         	blx	r0
 8059654: e7ff         	b	0x8059656 <xTimerGetPeriod+0x32> @ imm = #-0x2
 8059656: e7fe         	b	0x8059656 <xTimerGetPeriod+0x32> @ imm = #-0x4
;         return pxTimer->xTimerPeriodInTicks;
 8059658: 9802         	ldr	r0, [sp, #0x8]
 805965a: 6980         	ldr	r0, [r0, #0x18]
 805965c: 9001         	str	r0, [sp, #0x4]
 805965e: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059668 <xTimerGetPeriod+0x44>
 8059660: 4780         	blx	r0
 8059662: 9801         	ldr	r0, [sp, #0x4]
 8059664: b004         	add	sp, #0x10
 8059666: bd80         	pop	{r7, pc}

08059668 <$d.17>:
 8059668: 21 05 06 08  	.word	0x08060521
 805966c: 55 ec 05 08  	.word	0x0805ec55

08059670 <vTimerSetReloadMode>:
;     {
 8059670: b580         	push	{r7, lr}
 8059672: 466f         	mov	r7, sp
 8059674: b084         	sub	sp, #0x10
 8059676: f643 5340    	movw	r3, #0x3d40
 805967a: f2c2 0300    	movt	r3, #0x2000
 805967e: 681a         	ldr	r2, [r3]
 8059680: f642 5c40    	movw	r12, #0x2d40
 8059684: f2c2 0c00    	movt	r12, #0x2000
 8059688: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805968c: 3201         	adds	r2, #0x1
 805968e: 601a         	str	r2, [r3]
 8059690: 9003         	str	r0, [sp, #0xc]
 8059692: 9102         	str	r1, [sp, #0x8]
;         Timer_t * pxTimer = xTimer;
 8059694: 9803         	ldr	r0, [sp, #0xc]
 8059696: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 8059698: 9803         	ldr	r0, [sp, #0xc]
 805969a: b920         	cbnz	r0, 0x80596a6 <vTimerSetReloadMode+0x36> @ imm = #0x8
 805969c: e7ff         	b	0x805969e <vTimerSetReloadMode+0x2e> @ imm = #-0x2
 805969e: 4812         	ldr	r0, [pc, #0x48]         @ 0x80596e8 <vTimerSetReloadMode+0x78>
 80596a0: 4780         	blx	r0
 80596a2: e7ff         	b	0x80596a4 <vTimerSetReloadMode+0x34> @ imm = #-0x2
 80596a4: e7fe         	b	0x80596a4 <vTimerSetReloadMode+0x34> @ imm = #-0x4
;         taskENTER_CRITICAL();
 80596a6: 480d         	ldr	r0, [pc, #0x34]         @ 0x80596dc <vTimerSetReloadMode+0x6c>
 80596a8: 4780         	blx	r0
;             if( xAutoReload != pdFALSE )
 80596aa: 9802         	ldr	r0, [sp, #0x8]
 80596ac: b140         	cbz	r0, 0x80596c0 <vTimerSetReloadMode+0x50> @ imm = #0x10
 80596ae: e7ff         	b	0x80596b0 <vTimerSetReloadMode+0x40> @ imm = #-0x2
;                 pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 80596b0: 9901         	ldr	r1, [sp, #0x4]
 80596b2: f891 0028    	ldrb.w	r0, [r1, #0x28]
 80596b6: f040 0004    	orr	r0, r0, #0x4
 80596ba: f881 0028    	strb.w	r0, [r1, #0x28]
;             }
 80596be: e007         	b	0x80596d0 <vTimerSetReloadMode+0x60> @ imm = #0xe
;                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 80596c0: 9901         	ldr	r1, [sp, #0x4]
 80596c2: f891 0028    	ldrb.w	r0, [r1, #0x28]
 80596c6: f000 00fb    	and	r0, r0, #0xfb
 80596ca: f881 0028    	strb.w	r0, [r1, #0x28]
 80596ce: e7ff         	b	0x80596d0 <vTimerSetReloadMode+0x60> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 80596d0: 4803         	ldr	r0, [pc, #0xc]          @ 0x80596e0 <vTimerSetReloadMode+0x70>
 80596d2: 4780         	blx	r0
;     }
 80596d4: 4803         	ldr	r0, [pc, #0xc]          @ 0x80596e4 <vTimerSetReloadMode+0x74>
 80596d6: 4780         	blx	r0
 80596d8: b004         	add	sp, #0x10
 80596da: bd80         	pop	{r7, pc}

080596dc <$d.19>:
 80596dc: 05 e1 05 08  	.word	0x0805e105
 80596e0: 4d e1 05 08  	.word	0x0805e14d
 80596e4: 21 05 06 08  	.word	0x08060521
 80596e8: 55 ec 05 08  	.word	0x0805ec55

080596ec <xTimerGetReloadMode>:
;     {
 80596ec: b580         	push	{r7, lr}
 80596ee: 466f         	mov	r7, sp
 80596f0: b084         	sub	sp, #0x10
 80596f2: f643 5240    	movw	r2, #0x3d40
 80596f6: f2c2 0200    	movt	r2, #0x2000
 80596fa: 6811         	ldr	r1, [r2]
 80596fc: f642 5340    	movw	r3, #0x2d40
 8059700: f2c2 0300    	movt	r3, #0x2000
 8059704: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8059708: 3101         	adds	r1, #0x1
 805970a: 6011         	str	r1, [r2]
 805970c: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 805970e: 9803         	ldr	r0, [sp, #0xc]
 8059710: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 8059712: 9803         	ldr	r0, [sp, #0xc]
 8059714: b920         	cbnz	r0, 0x8059720 <xTimerGetReloadMode+0x34> @ imm = #0x8
 8059716: e7ff         	b	0x8059718 <xTimerGetReloadMode+0x2c> @ imm = #-0x2
 8059718: 4810         	ldr	r0, [pc, #0x40]         @ 0x805975c <xTimerGetReloadMode+0x70>
 805971a: 4780         	blx	r0
 805971c: e7ff         	b	0x805971e <xTimerGetReloadMode+0x32> @ imm = #-0x2
 805971e: e7fe         	b	0x805971e <xTimerGetReloadMode+0x32> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8059720: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8059750 <xTimerGetReloadMode+0x64>
 8059722: 4780         	blx	r0
;             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 8059724: 9802         	ldr	r0, [sp, #0x8]
 8059726: f890 0028    	ldrb.w	r0, [r0, #0x28]
 805972a: 0740         	lsls	r0, r0, #0x1d
 805972c: 2800         	cmp	r0, #0x0
 805972e: d403         	bmi	0x8059738 <xTimerGetReloadMode+0x4c> @ imm = #0x6
 8059730: e7ff         	b	0x8059732 <xTimerGetReloadMode+0x46> @ imm = #-0x2
 8059732: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 8059734: 9001         	str	r0, [sp, #0x4]
;             }
 8059736: e002         	b	0x805973e <xTimerGetReloadMode+0x52> @ imm = #0x4
 8059738: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 805973a: 9001         	str	r0, [sp, #0x4]
 805973c: e7ff         	b	0x805973e <xTimerGetReloadMode+0x52> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805973e: 4805         	ldr	r0, [pc, #0x14]         @ 0x8059754 <xTimerGetReloadMode+0x68>
 8059740: 4780         	blx	r0
;         return xReturn;
 8059742: 9801         	ldr	r0, [sp, #0x4]
 8059744: 9000         	str	r0, [sp]
 8059746: 4804         	ldr	r0, [pc, #0x10]         @ 0x8059758 <xTimerGetReloadMode+0x6c>
 8059748: 4780         	blx	r0
 805974a: 9800         	ldr	r0, [sp]
 805974c: b004         	add	sp, #0x10
 805974e: bd80         	pop	{r7, pc}

08059750 <$d.21>:
 8059750: 05 e1 05 08  	.word	0x0805e105
 8059754: 4d e1 05 08  	.word	0x0805e14d
 8059758: 21 05 06 08  	.word	0x08060521
 805975c: 55 ec 05 08  	.word	0x0805ec55

08059760 <uxTimerGetReloadMode>:
;     {
 8059760: b580         	push	{r7, lr}
 8059762: 466f         	mov	r7, sp
 8059764: b084         	sub	sp, #0x10
 8059766: f643 5240    	movw	r2, #0x3d40
 805976a: f2c2 0200    	movt	r2, #0x2000
 805976e: 6811         	ldr	r1, [r2]
 8059770: f642 5340    	movw	r3, #0x2d40
 8059774: f2c2 0300    	movt	r3, #0x2000
 8059778: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805977c: 3101         	adds	r1, #0x1
 805977e: 6011         	str	r1, [r2]
 8059780: 9003         	str	r0, [sp, #0xc]
;         uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 8059782: 9803         	ldr	r0, [sp, #0xc]
 8059784: 4904         	ldr	r1, [pc, #0x10]         @ 0x8059798 <uxTimerGetReloadMode+0x38>
 8059786: 4788         	blx	r1
 8059788: 9002         	str	r0, [sp, #0x8]
;         return uxReturn;
 805978a: 9802         	ldr	r0, [sp, #0x8]
 805978c: 9001         	str	r0, [sp, #0x4]
 805978e: 4803         	ldr	r0, [pc, #0xc]          @ 0x805979c <uxTimerGetReloadMode+0x3c>
 8059790: 4780         	blx	r0
 8059792: 9801         	ldr	r0, [sp, #0x4]
 8059794: b004         	add	sp, #0x10
 8059796: bd80         	pop	{r7, pc}

08059798 <$d.23>:
 8059798: ed 96 05 08  	.word	0x080596ed
 805979c: 21 05 06 08  	.word	0x08060521

080597a0 <xTimerGetExpiryTime>:
;     {
 80597a0: b580         	push	{r7, lr}
 80597a2: 466f         	mov	r7, sp
 80597a4: b084         	sub	sp, #0x10
 80597a6: f643 5240    	movw	r2, #0x3d40
 80597aa: f2c2 0200    	movt	r2, #0x2000
 80597ae: 6811         	ldr	r1, [r2]
 80597b0: f642 5340    	movw	r3, #0x2d40
 80597b4: f2c2 0300    	movt	r3, #0x2000
 80597b8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80597bc: 3101         	adds	r1, #0x1
 80597be: 6011         	str	r1, [r2]
 80597c0: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 80597c2: 9803         	ldr	r0, [sp, #0xc]
 80597c4: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 80597c6: 9803         	ldr	r0, [sp, #0xc]
 80597c8: b920         	cbnz	r0, 0x80597d4 <xTimerGetExpiryTime+0x34> @ imm = #0x8
 80597ca: e7ff         	b	0x80597cc <xTimerGetExpiryTime+0x2c> @ imm = #-0x2
 80597cc: 4807         	ldr	r0, [pc, #0x1c]         @ 0x80597ec <xTimerGetExpiryTime+0x4c>
 80597ce: 4780         	blx	r0
 80597d0: e7ff         	b	0x80597d2 <xTimerGetExpiryTime+0x32> @ imm = #-0x2
 80597d2: e7fe         	b	0x80597d2 <xTimerGetExpiryTime+0x32> @ imm = #-0x4
;         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 80597d4: 9802         	ldr	r0, [sp, #0x8]
 80597d6: 6840         	ldr	r0, [r0, #0x4]
 80597d8: 9001         	str	r0, [sp, #0x4]
;         return xReturn;
 80597da: 9801         	ldr	r0, [sp, #0x4]
 80597dc: 9000         	str	r0, [sp]
 80597de: 4802         	ldr	r0, [pc, #0x8]          @ 0x80597e8 <xTimerGetExpiryTime+0x48>
 80597e0: 4780         	blx	r0
 80597e2: 9800         	ldr	r0, [sp]
 80597e4: b004         	add	sp, #0x10
 80597e6: bd80         	pop	{r7, pc}

080597e8 <$d.25>:
 80597e8: 21 05 06 08  	.word	0x08060521
 80597ec: 55 ec 05 08  	.word	0x0805ec55

080597f0 <pcTimerGetName>:
;     {
 80597f0: b580         	push	{r7, lr}
 80597f2: 466f         	mov	r7, sp
 80597f4: b084         	sub	sp, #0x10
 80597f6: f643 5240    	movw	r2, #0x3d40
 80597fa: f2c2 0200    	movt	r2, #0x2000
 80597fe: 6811         	ldr	r1, [r2]
 8059800: f642 5340    	movw	r3, #0x2d40
 8059804: f2c2 0300    	movt	r3, #0x2000
 8059808: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805980c: 3101         	adds	r1, #0x1
 805980e: 6011         	str	r1, [r2]
 8059810: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 8059812: 9803         	ldr	r0, [sp, #0xc]
 8059814: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 8059816: 9803         	ldr	r0, [sp, #0xc]
 8059818: b920         	cbnz	r0, 0x8059824 <pcTimerGetName+0x34> @ imm = #0x8
 805981a: e7ff         	b	0x805981c <pcTimerGetName+0x2c> @ imm = #-0x2
 805981c: 4806         	ldr	r0, [pc, #0x18]         @ 0x8059838 <pcTimerGetName+0x48>
 805981e: 4780         	blx	r0
 8059820: e7ff         	b	0x8059822 <pcTimerGetName+0x32> @ imm = #-0x2
 8059822: e7fe         	b	0x8059822 <pcTimerGetName+0x32> @ imm = #-0x4
;         return pxTimer->pcTimerName;
 8059824: 9802         	ldr	r0, [sp, #0x8]
 8059826: 6800         	ldr	r0, [r0]
 8059828: 9001         	str	r0, [sp, #0x4]
 805982a: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059834 <pcTimerGetName+0x44>
 805982c: 4780         	blx	r0
 805982e: 9801         	ldr	r0, [sp, #0x4]
 8059830: b004         	add	sp, #0x10
 8059832: bd80         	pop	{r7, pc}

08059834 <$d.27>:
 8059834: 21 05 06 08  	.word	0x08060521
 8059838: 55 ec 05 08  	.word	0x0805ec55

0805983c <xTimerIsTimerActive>:
;     {
 805983c: b580         	push	{r7, lr}
 805983e: 466f         	mov	r7, sp
 8059840: b084         	sub	sp, #0x10
 8059842: f643 5240    	movw	r2, #0x3d40
 8059846: f2c2 0200    	movt	r2, #0x2000
 805984a: 6811         	ldr	r1, [r2]
 805984c: f642 5340    	movw	r3, #0x2d40
 8059850: f2c2 0300    	movt	r3, #0x2000
 8059854: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8059858: 3101         	adds	r1, #0x1
 805985a: 6011         	str	r1, [r2]
 805985c: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 805985e: 9803         	ldr	r0, [sp, #0xc]
 8059860: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 8059862: 9803         	ldr	r0, [sp, #0xc]
 8059864: b920         	cbnz	r0, 0x8059870 <xTimerIsTimerActive+0x34> @ imm = #0x8
 8059866: e7ff         	b	0x8059868 <xTimerIsTimerActive+0x2c> @ imm = #-0x2
 8059868: 4810         	ldr	r0, [pc, #0x40]         @ 0x80598ac <xTimerIsTimerActive+0x70>
 805986a: 4780         	blx	r0
 805986c: e7ff         	b	0x805986e <xTimerIsTimerActive+0x32> @ imm = #-0x2
 805986e: e7fe         	b	0x805986e <xTimerIsTimerActive+0x32> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8059870: 480b         	ldr	r0, [pc, #0x2c]         @ 0x80598a0 <xTimerIsTimerActive+0x64>
 8059872: 4780         	blx	r0
;             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8059874: 9801         	ldr	r0, [sp, #0x4]
 8059876: f890 0028    	ldrb.w	r0, [r0, #0x28]
 805987a: 07c0         	lsls	r0, r0, #0x1f
 805987c: b918         	cbnz	r0, 0x8059886 <xTimerIsTimerActive+0x4a> @ imm = #0x6
 805987e: e7ff         	b	0x8059880 <xTimerIsTimerActive+0x44> @ imm = #-0x2
 8059880: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 8059882: 9002         	str	r0, [sp, #0x8]
;             }
 8059884: e002         	b	0x805988c <xTimerIsTimerActive+0x50> @ imm = #0x4
 8059886: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 8059888: 9002         	str	r0, [sp, #0x8]
 805988a: e7ff         	b	0x805988c <xTimerIsTimerActive+0x50> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805988c: 4805         	ldr	r0, [pc, #0x14]         @ 0x80598a4 <xTimerIsTimerActive+0x68>
 805988e: 4780         	blx	r0
;         return xReturn;
 8059890: 9802         	ldr	r0, [sp, #0x8]
 8059892: 9000         	str	r0, [sp]
 8059894: 4804         	ldr	r0, [pc, #0x10]         @ 0x80598a8 <xTimerIsTimerActive+0x6c>
 8059896: 4780         	blx	r0
 8059898: 9800         	ldr	r0, [sp]
 805989a: b004         	add	sp, #0x10
 805989c: bd80         	pop	{r7, pc}
 805989e: bf00         	nop

080598a0 <$d.29>:
 80598a0: 05 e1 05 08  	.word	0x0805e105
 80598a4: 4d e1 05 08  	.word	0x0805e14d
 80598a8: 21 05 06 08  	.word	0x08060521
 80598ac: 55 ec 05 08  	.word	0x0805ec55

080598b0 <pvTimerGetTimerID>:
;     {
 80598b0: b580         	push	{r7, lr}
 80598b2: 466f         	mov	r7, sp
 80598b4: b084         	sub	sp, #0x10
 80598b6: f643 5240    	movw	r2, #0x3d40
 80598ba: f2c2 0200    	movt	r2, #0x2000
 80598be: 6811         	ldr	r1, [r2]
 80598c0: f642 5340    	movw	r3, #0x2d40
 80598c4: f2c2 0300    	movt	r3, #0x2000
 80598c8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80598cc: 3101         	adds	r1, #0x1
 80598ce: 6011         	str	r1, [r2]
 80598d0: 9003         	str	r0, [sp, #0xc]
;         Timer_t * const pxTimer = xTimer;
 80598d2: 9803         	ldr	r0, [sp, #0xc]
 80598d4: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 80598d6: 9803         	ldr	r0, [sp, #0xc]
 80598d8: b920         	cbnz	r0, 0x80598e4 <pvTimerGetTimerID+0x34> @ imm = #0x8
 80598da: e7ff         	b	0x80598dc <pvTimerGetTimerID+0x2c> @ imm = #-0x2
 80598dc: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805990c <pvTimerGetTimerID+0x5c>
 80598de: 4780         	blx	r0
 80598e0: e7ff         	b	0x80598e2 <pvTimerGetTimerID+0x32> @ imm = #-0x2
 80598e2: e7fe         	b	0x80598e2 <pvTimerGetTimerID+0x32> @ imm = #-0x4
;         taskENTER_CRITICAL();
 80598e4: 4806         	ldr	r0, [pc, #0x18]         @ 0x8059900 <pvTimerGetTimerID+0x50>
 80598e6: 4780         	blx	r0
;             pvReturn = pxTimer->pvTimerID;
 80598e8: 9802         	ldr	r0, [sp, #0x8]
 80598ea: 69c0         	ldr	r0, [r0, #0x1c]
 80598ec: 9001         	str	r0, [sp, #0x4]
;         taskEXIT_CRITICAL();
 80598ee: 4805         	ldr	r0, [pc, #0x14]         @ 0x8059904 <pvTimerGetTimerID+0x54>
 80598f0: 4780         	blx	r0
;         return pvReturn;
 80598f2: 9801         	ldr	r0, [sp, #0x4]
 80598f4: 9000         	str	r0, [sp]
 80598f6: 4804         	ldr	r0, [pc, #0x10]         @ 0x8059908 <pvTimerGetTimerID+0x58>
 80598f8: 4780         	blx	r0
 80598fa: 9800         	ldr	r0, [sp]
 80598fc: b004         	add	sp, #0x10
 80598fe: bd80         	pop	{r7, pc}

08059900 <$d.31>:
 8059900: 05 e1 05 08  	.word	0x0805e105
 8059904: 4d e1 05 08  	.word	0x0805e14d
 8059908: 21 05 06 08  	.word	0x08060521
 805990c: 55 ec 05 08  	.word	0x0805ec55

08059910 <vTimerSetTimerID>:
;     {
 8059910: b580         	push	{r7, lr}
 8059912: 466f         	mov	r7, sp
 8059914: b084         	sub	sp, #0x10
 8059916: f643 5340    	movw	r3, #0x3d40
 805991a: f2c2 0300    	movt	r3, #0x2000
 805991e: 681a         	ldr	r2, [r3]
 8059920: f642 5c40    	movw	r12, #0x2d40
 8059924: f2c2 0c00    	movt	r12, #0x2000
 8059928: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805992c: 3201         	adds	r2, #0x1
 805992e: 601a         	str	r2, [r3]
 8059930: 9003         	str	r0, [sp, #0xc]
 8059932: 9102         	str	r1, [sp, #0x8]
;         Timer_t * const pxTimer = xTimer;
 8059934: 9803         	ldr	r0, [sp, #0xc]
 8059936: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 8059938: 9803         	ldr	r0, [sp, #0xc]
 805993a: b920         	cbnz	r0, 0x8059946 <vTimerSetTimerID+0x36> @ imm = #0x8
 805993c: e7ff         	b	0x805993e <vTimerSetTimerID+0x2e> @ imm = #-0x2
 805993e: 480a         	ldr	r0, [pc, #0x28]         @ 0x8059968 <vTimerSetTimerID+0x58>
 8059940: 4780         	blx	r0
 8059942: e7ff         	b	0x8059944 <vTimerSetTimerID+0x34> @ imm = #-0x2
 8059944: e7fe         	b	0x8059944 <vTimerSetTimerID+0x34> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8059946: 4805         	ldr	r0, [pc, #0x14]         @ 0x805995c <vTimerSetTimerID+0x4c>
 8059948: 4780         	blx	r0
;             pxTimer->pvTimerID = pvNewID;
 805994a: 9802         	ldr	r0, [sp, #0x8]
 805994c: 9901         	ldr	r1, [sp, #0x4]
 805994e: 61c8         	str	r0, [r1, #0x1c]
;         taskEXIT_CRITICAL();
 8059950: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059960 <vTimerSetTimerID+0x50>
 8059952: 4780         	blx	r0
;     }
 8059954: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059964 <vTimerSetTimerID+0x54>
 8059956: 4780         	blx	r0
 8059958: b004         	add	sp, #0x10
 805995a: bd80         	pop	{r7, pc}

0805995c <$d.33>:
 805995c: 05 e1 05 08  	.word	0x0805e105
 8059960: 4d e1 05 08  	.word	0x0805e14d
 8059964: 21 05 06 08  	.word	0x08060521
 8059968: 55 ec 05 08  	.word	0x0805ec55

0805996c <xTimerPendFunctionCallFromISR>:
;         {
 805996c: b5b0         	push	{r4, r5, r7, lr}
 805996e: af02         	add	r7, sp, #0x8
 8059970: b08a         	sub	sp, #0x28
 8059972: 4674         	mov	r4, lr
 8059974: f643 5e40    	movw	lr, #0x3d40
 8059978: f2c2 0e00    	movt	lr, #0x2000
 805997c: f8de c000    	ldr.w	r12, [lr]
 8059980: f642 5540    	movw	r5, #0x2d40
 8059984: f2c2 0500    	movt	r5, #0x2000
 8059988: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805998c: f10c 0c01    	add.w	r12, r12, #0x1
 8059990: f8ce c000    	str.w	r12, [lr]
 8059994: 9009         	str	r0, [sp, #0x24]
 8059996: 9108         	str	r1, [sp, #0x20]
 8059998: 9207         	str	r2, [sp, #0x1c]
 805999a: 9306         	str	r3, [sp, #0x18]
 805999c: f06f 0001    	mvn	r0, #0x1
;             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80599a0: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80599a2: 9809         	ldr	r0, [sp, #0x24]
 80599a4: 9003         	str	r0, [sp, #0xc]
;             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80599a6: 9808         	ldr	r0, [sp, #0x20]
 80599a8: 9004         	str	r0, [sp, #0x10]
;             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80599aa: 9807         	ldr	r0, [sp, #0x1c]
 80599ac: 9005         	str	r0, [sp, #0x14]
;             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80599ae: f240 20e0    	movw	r0, #0x2e0
 80599b2: f2c2 0000    	movt	r0, #0x2000
 80599b6: 6800         	ldr	r0, [r0]
 80599b8: 9a06         	ldr	r2, [sp, #0x18]
 80599ba: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x80599d4 <xTimerPendFunctionCallFromISR+0x68>
 80599be: a902         	add	r1, sp, #0x8
 80599c0: 2300         	movs	r3, #0x0
 80599c2: 47e0         	blx	r12
 80599c4: 9001         	str	r0, [sp, #0x4]
;             return xReturn;
 80599c6: 9801         	ldr	r0, [sp, #0x4]
 80599c8: 9000         	str	r0, [sp]
 80599ca: 4803         	ldr	r0, [pc, #0xc]          @ 0x80599d8 <xTimerPendFunctionCallFromISR+0x6c>
 80599cc: 4780         	blx	r0
 80599ce: 9800         	ldr	r0, [sp]
 80599d0: b00a         	add	sp, #0x28
 80599d2: bdb0         	pop	{r4, r5, r7, pc}

080599d4 <$d.35>:
 80599d4: e9 be 05 08  	.word	0x0805bee9
 80599d8: 21 05 06 08  	.word	0x08060521

080599dc <xTimerPendFunctionCall>:
;         {
 80599dc: b5b0         	push	{r4, r5, r7, lr}
 80599de: af02         	add	r7, sp, #0x8
 80599e0: b08a         	sub	sp, #0x28
 80599e2: 4674         	mov	r4, lr
 80599e4: f643 5e40    	movw	lr, #0x3d40
 80599e8: f2c2 0e00    	movt	lr, #0x2000
 80599ec: f8de c000    	ldr.w	r12, [lr]
 80599f0: f642 5540    	movw	r5, #0x2d40
 80599f4: f2c2 0500    	movt	r5, #0x2000
 80599f8: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 80599fc: f10c 0c01    	add.w	r12, r12, #0x1
 8059a00: f8ce c000    	str.w	r12, [lr]
 8059a04: 9009         	str	r0, [sp, #0x24]
 8059a06: 9108         	str	r1, [sp, #0x20]
 8059a08: 9207         	str	r2, [sp, #0x1c]
 8059a0a: 9306         	str	r3, [sp, #0x18]
;             configASSERT( xTimerQueue );
 8059a0c: f240 20e0    	movw	r0, #0x2e0
 8059a10: f2c2 0000    	movt	r0, #0x2000
 8059a14: 6800         	ldr	r0, [r0]
 8059a16: b920         	cbnz	r0, 0x8059a22 <xTimerPendFunctionCall+0x46> @ imm = #0x8
 8059a18: e7ff         	b	0x8059a1a <xTimerPendFunctionCall+0x3e> @ imm = #-0x2
 8059a1a: 4812         	ldr	r0, [pc, #0x48]         @ 0x8059a64 <xTimerPendFunctionCall+0x88>
 8059a1c: 4780         	blx	r0
 8059a1e: e7ff         	b	0x8059a20 <xTimerPendFunctionCall+0x44> @ imm = #-0x2
 8059a20: e7fe         	b	0x8059a20 <xTimerPendFunctionCall+0x44> @ imm = #-0x4
 8059a22: f04f 30ff    	mov.w	r0, #0xffffffff
;             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 8059a26: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8059a28: 9809         	ldr	r0, [sp, #0x24]
 8059a2a: 9003         	str	r0, [sp, #0xc]
;             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8059a2c: 9808         	ldr	r0, [sp, #0x20]
 8059a2e: 9004         	str	r0, [sp, #0x10]
;             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8059a30: 9807         	ldr	r0, [sp, #0x1c]
 8059a32: 9005         	str	r0, [sp, #0x14]
;             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8059a34: f240 20e0    	movw	r0, #0x2e0
 8059a38: f2c2 0000    	movt	r0, #0x2000
 8059a3c: 6800         	ldr	r0, [r0]
 8059a3e: 9a06         	ldr	r2, [sp, #0x18]
 8059a40: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x8059a5c <xTimerPendFunctionCall+0x80>
 8059a44: a902         	add	r1, sp, #0x8
 8059a46: 2300         	movs	r3, #0x0
 8059a48: 47e0         	blx	r12
 8059a4a: 9001         	str	r0, [sp, #0x4]
;             return xReturn;
 8059a4c: 9801         	ldr	r0, [sp, #0x4]
 8059a4e: 9000         	str	r0, [sp]
 8059a50: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059a60 <xTimerPendFunctionCall+0x84>
 8059a52: 4780         	blx	r0
 8059a54: 9800         	ldr	r0, [sp]
 8059a56: b00a         	add	sp, #0x28
 8059a58: bdb0         	pop	{r4, r5, r7, pc}
 8059a5a: bf00         	nop

08059a5c <$d.37>:
 8059a5c: b1 b6 05 08  	.word	0x0805b6b1
 8059a60: 21 05 06 08  	.word	0x08060521
 8059a64: 55 ec 05 08  	.word	0x0805ec55

08059a68 <uxTimerGetTimerNumber>:
;         {
 8059a68: b580         	push	{r7, lr}
 8059a6a: 466f         	mov	r7, sp
 8059a6c: b082         	sub	sp, #0x8
 8059a6e: f643 5240    	movw	r2, #0x3d40
 8059a72: f2c2 0200    	movt	r2, #0x2000
 8059a76: 6811         	ldr	r1, [r2]
 8059a78: f642 5340    	movw	r3, #0x2d40
 8059a7c: f2c2 0300    	movt	r3, #0x2000
 8059a80: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8059a84: 3101         	adds	r1, #0x1
 8059a86: 6011         	str	r1, [r2]
 8059a88: 9001         	str	r0, [sp, #0x4]
;             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8059a8a: 9801         	ldr	r0, [sp, #0x4]
 8059a8c: 6a40         	ldr	r0, [r0, #0x24]
 8059a8e: 9000         	str	r0, [sp]
 8059a90: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059a9c <uxTimerGetTimerNumber+0x34>
 8059a92: 4780         	blx	r0
 8059a94: 9800         	ldr	r0, [sp]
 8059a96: b002         	add	sp, #0x8
 8059a98: bd80         	pop	{r7, pc}
 8059a9a: bf00         	nop

08059a9c <$d.39>:
 8059a9c: 21 05 06 08  	.word	0x08060521

08059aa0 <vTimerSetTimerNumber>:
;         {
 8059aa0: b580         	push	{r7, lr}
 8059aa2: 466f         	mov	r7, sp
 8059aa4: b082         	sub	sp, #0x8
 8059aa6: f643 5340    	movw	r3, #0x3d40
 8059aaa: f2c2 0300    	movt	r3, #0x2000
 8059aae: 681a         	ldr	r2, [r3]
 8059ab0: f642 5c40    	movw	r12, #0x2d40
 8059ab4: f2c2 0c00    	movt	r12, #0x2000
 8059ab8: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8059abc: 3201         	adds	r2, #0x1
 8059abe: 601a         	str	r2, [r3]
 8059ac0: 9001         	str	r0, [sp, #0x4]
 8059ac2: 9100         	str	r1, [sp]
;             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 8059ac4: 9800         	ldr	r0, [sp]
 8059ac6: 9901         	ldr	r1, [sp, #0x4]
 8059ac8: 6248         	str	r0, [r1, #0x24]
;         }
 8059aca: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059ad4 <vTimerSetTimerNumber+0x34>
 8059acc: 4780         	blx	r0
 8059ace: b002         	add	sp, #0x8
 8059ad0: bd80         	pop	{r7, pc}
 8059ad2: bf00         	nop

08059ad4 <$d.41>:
 8059ad4: 21 05 06 08  	.word	0x08060521

08059ad8 <prvGetNextExpireTime>:
;     {
 8059ad8: b580         	push	{r7, lr}
 8059ada: 466f         	mov	r7, sp
 8059adc: b084         	sub	sp, #0x10
 8059ade: f643 5240    	movw	r2, #0x3d40
 8059ae2: f2c2 0200    	movt	r2, #0x2000
 8059ae6: 6811         	ldr	r1, [r2]
 8059ae8: f642 5340    	movw	r3, #0x2d40
 8059aec: f2c2 0300    	movt	r3, #0x2000
 8059af0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8059af4: 3101         	adds	r1, #0x1
 8059af6: 6011         	str	r1, [r2]
 8059af8: 9003         	str	r0, [sp, #0xc]
;         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8059afa: f240 20e8    	movw	r0, #0x2e8
 8059afe: f2c2 0000    	movt	r0, #0x2000
 8059b02: 6800         	ldr	r0, [r0]
 8059b04: 6800         	ldr	r0, [r0]
 8059b06: fab0 f080    	clz	r0, r0
 8059b0a: 0940         	lsrs	r0, r0, #0x5
 8059b0c: 9903         	ldr	r1, [sp, #0xc]
 8059b0e: 6008         	str	r0, [r1]
;         if( *pxListWasEmpty == pdFALSE )
 8059b10: 9803         	ldr	r0, [sp, #0xc]
 8059b12: 6800         	ldr	r0, [r0]
 8059b14: b948         	cbnz	r0, 0x8059b2a <prvGetNextExpireTime+0x52> @ imm = #0x12
 8059b16: e7ff         	b	0x8059b18 <prvGetNextExpireTime+0x40> @ imm = #-0x2
;             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8059b18: f240 20e8    	movw	r0, #0x2e8
 8059b1c: f2c2 0000    	movt	r0, #0x2000
 8059b20: 6800         	ldr	r0, [r0]
 8059b22: 68c0         	ldr	r0, [r0, #0xc]
 8059b24: 6800         	ldr	r0, [r0]
 8059b26: 9002         	str	r0, [sp, #0x8]
;         }
 8059b28: e002         	b	0x8059b30 <prvGetNextExpireTime+0x58> @ imm = #0x4
 8059b2a: 2000         	movs	r0, #0x0
;             xNextExpireTime = ( TickType_t ) 0U;
 8059b2c: 9002         	str	r0, [sp, #0x8]
 8059b2e: e7ff         	b	0x8059b30 <prvGetNextExpireTime+0x58> @ imm = #-0x2
;         return xNextExpireTime;
 8059b30: 9802         	ldr	r0, [sp, #0x8]
 8059b32: 9001         	str	r0, [sp, #0x4]
 8059b34: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059b40 <prvGetNextExpireTime+0x68>
 8059b36: 4780         	blx	r0
 8059b38: 9801         	ldr	r0, [sp, #0x4]
 8059b3a: b004         	add	sp, #0x10
 8059b3c: bd80         	pop	{r7, pc}
 8059b3e: bf00         	nop

08059b40 <$d.43>:
 8059b40: 21 05 06 08  	.word	0x08060521

08059b44 <prvProcessTimerOrBlockTask>:
;     {
 8059b44: b580         	push	{r7, lr}
 8059b46: 466f         	mov	r7, sp
 8059b48: b084         	sub	sp, #0x10
 8059b4a: f643 5340    	movw	r3, #0x3d40
 8059b4e: f2c2 0300    	movt	r3, #0x2000
 8059b52: 681a         	ldr	r2, [r3]
 8059b54: f642 5c40    	movw	r12, #0x2d40
 8059b58: f2c2 0c00    	movt	r12, #0x2000
 8059b5c: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8059b60: 3201         	adds	r2, #0x1
 8059b62: 601a         	str	r2, [r3]
 8059b64: 9003         	str	r0, [sp, #0xc]
 8059b66: 9102         	str	r1, [sp, #0x8]
;         vTaskSuspendAll();
 8059b68: 4820         	ldr	r0, [pc, #0x80]         @ 0x8059bec <prvProcessTimerOrBlockTask+0xa8>
 8059b6a: 4780         	blx	r0
;             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8059b6c: 4920         	ldr	r1, [pc, #0x80]         @ 0x8059bf0 <prvProcessTimerOrBlockTask+0xac>
 8059b6e: 4668         	mov	r0, sp
 8059b70: 4788         	blx	r1
 8059b72: 9001         	str	r0, [sp, #0x4]
;             if( xTimerListsWereSwitched == pdFALSE )
 8059b74: 9800         	ldr	r0, [sp]
 8059b76: bb90         	cbnz	r0, 0x8059bde <prvProcessTimerOrBlockTask+0x9a> @ imm = #0x64
 8059b78: e7ff         	b	0x8059b7a <prvProcessTimerOrBlockTask+0x36> @ imm = #-0x2
;                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8059b7a: 9802         	ldr	r0, [sp, #0x8]
 8059b7c: b960         	cbnz	r0, 0x8059b98 <prvProcessTimerOrBlockTask+0x54> @ imm = #0x18
 8059b7e: e7ff         	b	0x8059b80 <prvProcessTimerOrBlockTask+0x3c> @ imm = #-0x2
 8059b80: 9803         	ldr	r0, [sp, #0xc]
 8059b82: 9901         	ldr	r1, [sp, #0x4]
 8059b84: 4288         	cmp	r0, r1
 8059b86: d807         	bhi	0x8059b98 <prvProcessTimerOrBlockTask+0x54> @ imm = #0xe
 8059b88: e7ff         	b	0x8059b8a <prvProcessTimerOrBlockTask+0x46> @ imm = #-0x2
;                     ( void ) xTaskResumeAll();
 8059b8a: 481e         	ldr	r0, [pc, #0x78]         @ 0x8059c04 <prvProcessTimerOrBlockTask+0xc0>
 8059b8c: 4780         	blx	r0
;                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8059b8e: 9803         	ldr	r0, [sp, #0xc]
 8059b90: 9901         	ldr	r1, [sp, #0x4]
 8059b92: 4a1d         	ldr	r2, [pc, #0x74]         @ 0x8059c08 <prvProcessTimerOrBlockTask+0xc4>
 8059b94: 4790         	blx	r2
;                 }
 8059b96: e021         	b	0x8059bdc <prvProcessTimerOrBlockTask+0x98> @ imm = #0x42
;                     if( xListWasEmpty != pdFALSE )
 8059b98: 9802         	ldr	r0, [sp, #0x8]
 8059b9a: b158         	cbz	r0, 0x8059bb4 <prvProcessTimerOrBlockTask+0x70> @ imm = #0x16
 8059b9c: e7ff         	b	0x8059b9e <prvProcessTimerOrBlockTask+0x5a> @ imm = #-0x2
;                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8059b9e: f240 20ec    	movw	r0, #0x2ec
 8059ba2: f2c2 0000    	movt	r0, #0x2000
 8059ba6: 6800         	ldr	r0, [r0]
 8059ba8: 6800         	ldr	r0, [r0]
 8059baa: fab0 f080    	clz	r0, r0
 8059bae: 0940         	lsrs	r0, r0, #0x5
 8059bb0: 9002         	str	r0, [sp, #0x8]
;                     }
 8059bb2: e7ff         	b	0x8059bb4 <prvProcessTimerOrBlockTask+0x70> @ imm = #-0x2
;                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8059bb4: f240 20e0    	movw	r0, #0x2e0
 8059bb8: f2c2 0000    	movt	r0, #0x2000
 8059bbc: 6800         	ldr	r0, [r0]
 8059bbe: 9903         	ldr	r1, [sp, #0xc]
 8059bc0: 9a01         	ldr	r2, [sp, #0x4]
 8059bc2: 1a89         	subs	r1, r1, r2
 8059bc4: 9a02         	ldr	r2, [sp, #0x8]
 8059bc6: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x8059bf8 <prvProcessTimerOrBlockTask+0xb4>
 8059bc8: 4798         	blx	r3
;                     if( xTaskResumeAll() == pdFALSE )
 8059bca: 480c         	ldr	r0, [pc, #0x30]         @ 0x8059bfc <prvProcessTimerOrBlockTask+0xb8>
 8059bcc: 4780         	blx	r0
 8059bce: b918         	cbnz	r0, 0x8059bd8 <prvProcessTimerOrBlockTask+0x94> @ imm = #0x6
 8059bd0: e7ff         	b	0x8059bd2 <prvProcessTimerOrBlockTask+0x8e> @ imm = #-0x2
;                         taskYIELD_WITHIN_API();
 8059bd2: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8059c00 <prvProcessTimerOrBlockTask+0xbc>
 8059bd4: 4780         	blx	r0
;                     }
 8059bd6: e000         	b	0x8059bda <prvProcessTimerOrBlockTask+0x96> @ imm = #0x0
 8059bd8: e7ff         	b	0x8059bda <prvProcessTimerOrBlockTask+0x96> @ imm = #-0x2
 8059bda: e7ff         	b	0x8059bdc <prvProcessTimerOrBlockTask+0x98> @ imm = #-0x2
;             }
 8059bdc: e002         	b	0x8059be4 <prvProcessTimerOrBlockTask+0xa0> @ imm = #0x4
;                 ( void ) xTaskResumeAll();
 8059bde: 4805         	ldr	r0, [pc, #0x14]         @ 0x8059bf4 <prvProcessTimerOrBlockTask+0xb0>
 8059be0: 4780         	blx	r0
 8059be2: e7ff         	b	0x8059be4 <prvProcessTimerOrBlockTask+0xa0> @ imm = #-0x2
;     }
 8059be4: 4809         	ldr	r0, [pc, #0x24]         @ 0x8059c0c <prvProcessTimerOrBlockTask+0xc8>
 8059be6: 4780         	blx	r0
 8059be8: b004         	add	sp, #0x10
 8059bea: bd80         	pop	{r7, pc}

08059bec <$d.45>:
 8059bec: b9 59 05 08  	.word	0x080559b9
 8059bf0: e1 9d 05 08  	.word	0x08059de1
 8059bf4: 29 5b 05 08  	.word	0x08055b29
 8059bf8: 85 ce 05 08  	.word	0x0805ce85
 8059bfc: 29 5b 05 08  	.word	0x08055b29
 8059c00: c5 e0 05 08  	.word	0x0805e0c5
 8059c04: 29 5b 05 08  	.word	0x08055b29
 8059c08: 55 9e 05 08  	.word	0x08059e55
 8059c0c: 21 05 06 08  	.word	0x08060521

08059c10 <prvProcessReceivedCommands>:
;     {
 8059c10: b580         	push	{r7, lr}
 8059c12: 466f         	mov	r7, sp
 8059c14: b08a         	sub	sp, #0x28
 8059c16: f643 5140    	movw	r1, #0x3d40
 8059c1a: f2c2 0100    	movt	r1, #0x2000
 8059c1e: 6808         	ldr	r0, [r1]
 8059c20: f642 5240    	movw	r2, #0x2d40
 8059c24: f2c2 0200    	movt	r2, #0x2000
 8059c28: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8059c2c: 3001         	adds	r0, #0x1
 8059c2e: 6008         	str	r0, [r1]
;         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8059c30: e7ff         	b	0x8059c32 <prvProcessReceivedCommands+0x22> @ imm = #-0x2
 8059c32: f240 20e0    	movw	r0, #0x2e0
 8059c36: f2c2 0000    	movt	r0, #0x2000
 8059c3a: 6800         	ldr	r0, [r0]
 8059c3c: 4b5e         	ldr	r3, [pc, #0x178]        @ 0x8059db8 <prvProcessReceivedCommands+0x1a8>
 8059c3e: a906         	add	r1, sp, #0x18
 8059c40: 2200         	movs	r2, #0x0
 8059c42: 4798         	blx	r3
 8059c44: 2800         	cmp	r0, #0x0
 8059c46: f000 80b3    	beq.w	0x8059db0 <prvProcessReceivedCommands+0x1a0> @ imm = #0x166
 8059c4a: e7ff         	b	0x8059c4c <prvProcessReceivedCommands+0x3c> @ imm = #-0x2
;                 if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8059c4c: 9806         	ldr	r0, [sp, #0x18]
 8059c4e: f1b0 3fff    	cmp.w	r0, #0xffffffff
 8059c52: dc10         	bgt	0x8059c76 <prvProcessReceivedCommands+0x66> @ imm = #0x20
 8059c54: e7ff         	b	0x8059c56 <prvProcessReceivedCommands+0x46> @ imm = #-0x2
 8059c56: a806         	add	r0, sp, #0x18
;                     const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8059c58: 3004         	adds	r0, #0x4
 8059c5a: 9002         	str	r0, [sp, #0x8]
;                     configASSERT( pxCallback );
 8059c5c: 9802         	ldr	r0, [sp, #0x8]
 8059c5e: b920         	cbnz	r0, 0x8059c6a <prvProcessReceivedCommands+0x5a> @ imm = #0x8
 8059c60: e7ff         	b	0x8059c62 <prvProcessReceivedCommands+0x52> @ imm = #-0x2
 8059c62: 485e         	ldr	r0, [pc, #0x178]        @ 0x8059ddc <prvProcessReceivedCommands+0x1cc>
 8059c64: 4780         	blx	r0
 8059c66: e7ff         	b	0x8059c68 <prvProcessReceivedCommands+0x58> @ imm = #-0x2
 8059c68: e7fe         	b	0x8059c68 <prvProcessReceivedCommands+0x58> @ imm = #-0x4
;                     pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8059c6a: 9902         	ldr	r1, [sp, #0x8]
 8059c6c: 680a         	ldr	r2, [r1]
 8059c6e: 6848         	ldr	r0, [r1, #0x4]
 8059c70: 6889         	ldr	r1, [r1, #0x8]
 8059c72: 4790         	blx	r2
;                 }
 8059c74: e000         	b	0x8059c78 <prvProcessReceivedCommands+0x68> @ imm = #0x0
 8059c76: e7ff         	b	0x8059c78 <prvProcessReceivedCommands+0x68> @ imm = #-0x2
;             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8059c78: 9806         	ldr	r0, [sp, #0x18]
 8059c7a: 2800         	cmp	r0, #0x0
 8059c7c: f100 8097    	bmi.w	0x8059dae <prvProcessReceivedCommands+0x19e> @ imm = #0x12e
 8059c80: e7ff         	b	0x8059c82 <prvProcessReceivedCommands+0x72> @ imm = #-0x2
;                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8059c82: 9808         	ldr	r0, [sp, #0x20]
 8059c84: 9005         	str	r0, [sp, #0x14]
;                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8059c86: 9805         	ldr	r0, [sp, #0x14]
 8059c88: 6940         	ldr	r0, [r0, #0x14]
 8059c8a: b128         	cbz	r0, 0x8059c98 <prvProcessReceivedCommands+0x88> @ imm = #0xa
 8059c8c: e7ff         	b	0x8059c8e <prvProcessReceivedCommands+0x7e> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8059c8e: 9805         	ldr	r0, [sp, #0x14]
 8059c90: 3004         	adds	r0, #0x4
 8059c92: 494b         	ldr	r1, [pc, #0x12c]        @ 0x8059dc0 <prvProcessReceivedCommands+0x1b0>
 8059c94: 4788         	blx	r1
;                 }
 8059c96: e000         	b	0x8059c9a <prvProcessReceivedCommands+0x8a> @ imm = #0x0
 8059c98: e7ff         	b	0x8059c9a <prvProcessReceivedCommands+0x8a> @ imm = #-0x2
;                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8059c9a: 494a         	ldr	r1, [pc, #0x128]        @ 0x8059dc4 <prvProcessReceivedCommands+0x1b4>
 8059c9c: a804         	add	r0, sp, #0x10
 8059c9e: 4788         	blx	r1
 8059ca0: 9003         	str	r0, [sp, #0xc]
;                 switch( xMessage.xMessageID )
 8059ca2: 9806         	ldr	r0, [sp, #0x18]
 8059ca4: 9001         	str	r0, [sp, #0x4]
 8059ca6: 3801         	subs	r0, #0x1
 8059ca8: 2802         	cmp	r0, #0x2
 8059caa: d319         	blo	0x8059ce0 <prvProcessReceivedCommands+0xd0> @ imm = #0x32
 8059cac: e7ff         	b	0x8059cae <prvProcessReceivedCommands+0x9e> @ imm = #-0x2
 8059cae: 9801         	ldr	r0, [sp, #0x4]
 8059cb0: 2803         	cmp	r0, #0x3
 8059cb2: d043         	beq	0x8059d3c <prvProcessReceivedCommands+0x12c> @ imm = #0x86
 8059cb4: e7ff         	b	0x8059cb6 <prvProcessReceivedCommands+0xa6> @ imm = #-0x2
 8059cb6: 9801         	ldr	r0, [sp, #0x4]
 8059cb8: 2804         	cmp	r0, #0x4
 8059cba: d047         	beq	0x8059d4c <prvProcessReceivedCommands+0x13c> @ imm = #0x8e
 8059cbc: e7ff         	b	0x8059cbe <prvProcessReceivedCommands+0xae> @ imm = #-0x2
 8059cbe: 9801         	ldr	r0, [sp, #0x4]
 8059cc0: 2805         	cmp	r0, #0x5
 8059cc2: d05e         	beq	0x8059d82 <prvProcessReceivedCommands+0x172> @ imm = #0xbc
 8059cc4: e7ff         	b	0x8059cc6 <prvProcessReceivedCommands+0xb6> @ imm = #-0x2
 8059cc6: 9801         	ldr	r0, [sp, #0x4]
 8059cc8: 3806         	subs	r0, #0x6
 8059cca: 2802         	cmp	r0, #0x2
 8059ccc: d308         	blo	0x8059ce0 <prvProcessReceivedCommands+0xd0> @ imm = #0x10
 8059cce: e7ff         	b	0x8059cd0 <prvProcessReceivedCommands+0xc0> @ imm = #-0x2
 8059cd0: 9801         	ldr	r0, [sp, #0x4]
 8059cd2: 2808         	cmp	r0, #0x8
 8059cd4: d032         	beq	0x8059d3c <prvProcessReceivedCommands+0x12c> @ imm = #0x64
 8059cd6: e7ff         	b	0x8059cd8 <prvProcessReceivedCommands+0xc8> @ imm = #-0x2
 8059cd8: 9801         	ldr	r0, [sp, #0x4]
 8059cda: 2809         	cmp	r0, #0x9
 8059cdc: d036         	beq	0x8059d4c <prvProcessReceivedCommands+0x13c> @ imm = #0x6c
 8059cde: e064         	b	0x8059daa <prvProcessReceivedCommands+0x19a> @ imm = #0xc8
;                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8059ce0: 9905         	ldr	r1, [sp, #0x14]
 8059ce2: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8059ce6: f040 0001    	orr	r0, r0, #0x1
 8059cea: f881 0028    	strb.w	r0, [r1, #0x28]
;                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8059cee: 9805         	ldr	r0, [sp, #0x14]
 8059cf0: 9b07         	ldr	r3, [sp, #0x1c]
 8059cf2: 6981         	ldr	r1, [r0, #0x18]
 8059cf4: 4419         	add	r1, r3
 8059cf6: 9a03         	ldr	r2, [sp, #0xc]
 8059cf8: f8df c0d8    	ldr.w	r12, [pc, #0xd8]        @ 0x8059dd4 <prvProcessReceivedCommands+0x1c4>
 8059cfc: 47e0         	blx	r12
 8059cfe: b1d8         	cbz	r0, 0x8059d38 <prvProcessReceivedCommands+0x128> @ imm = #0x36
 8059d00: e7ff         	b	0x8059d02 <prvProcessReceivedCommands+0xf2> @ imm = #-0x2
;                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8059d02: 9805         	ldr	r0, [sp, #0x14]
 8059d04: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8059d08: 0740         	lsls	r0, r0, #0x1d
 8059d0a: 2800         	cmp	r0, #0x0
 8059d0c: d508         	bpl	0x8059d20 <prvProcessReceivedCommands+0x110> @ imm = #0x10
 8059d0e: e7ff         	b	0x8059d10 <prvProcessReceivedCommands+0x100> @ imm = #-0x2
;                                 prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8059d10: 9805         	ldr	r0, [sp, #0x14]
 8059d12: 9907         	ldr	r1, [sp, #0x1c]
 8059d14: 6982         	ldr	r2, [r0, #0x18]
 8059d16: 4411         	add	r1, r2
 8059d18: 9a03         	ldr	r2, [sp, #0xc]
 8059d1a: 4b2f         	ldr	r3, [pc, #0xbc]         @ 0x8059dd8 <prvProcessReceivedCommands+0x1c8>
 8059d1c: 4798         	blx	r3
;                             }
 8059d1e: e007         	b	0x8059d30 <prvProcessReceivedCommands+0x120> @ imm = #0xe
;                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8059d20: 9905         	ldr	r1, [sp, #0x14]
 8059d22: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8059d26: f000 00fe    	and	r0, r0, #0xfe
 8059d2a: f881 0028    	strb.w	r0, [r1, #0x28]
 8059d2e: e7ff         	b	0x8059d30 <prvProcessReceivedCommands+0x120> @ imm = #-0x2
;                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8059d30: 9805         	ldr	r0, [sp, #0x14]
 8059d32: 6a01         	ldr	r1, [r0, #0x20]
 8059d34: 4788         	blx	r1
;                         }
 8059d36: e000         	b	0x8059d3a <prvProcessReceivedCommands+0x12a> @ imm = #0x0
 8059d38: e7ff         	b	0x8059d3a <prvProcessReceivedCommands+0x12a> @ imm = #-0x2
;                         break;
 8059d3a: e037         	b	0x8059dac <prvProcessReceivedCommands+0x19c> @ imm = #0x6e
;                         pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8059d3c: 9905         	ldr	r1, [sp, #0x14]
 8059d3e: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8059d42: f000 00fe    	and	r0, r0, #0xfe
 8059d46: f881 0028    	strb.w	r0, [r1, #0x28]
;                         break;
 8059d4a: e02f         	b	0x8059dac <prvProcessReceivedCommands+0x19c> @ imm = #0x5e
;                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8059d4c: 9905         	ldr	r1, [sp, #0x14]
 8059d4e: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8059d52: f040 0001    	orr	r0, r0, #0x1
 8059d56: f881 0028    	strb.w	r0, [r1, #0x28]
;                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8059d5a: 9807         	ldr	r0, [sp, #0x1c]
 8059d5c: 9905         	ldr	r1, [sp, #0x14]
 8059d5e: 6188         	str	r0, [r1, #0x18]
;                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8059d60: 9805         	ldr	r0, [sp, #0x14]
 8059d62: 6980         	ldr	r0, [r0, #0x18]
 8059d64: b920         	cbnz	r0, 0x8059d70 <prvProcessReceivedCommands+0x160> @ imm = #0x8
 8059d66: e7ff         	b	0x8059d68 <prvProcessReceivedCommands+0x158> @ imm = #-0x2
 8059d68: 4819         	ldr	r0, [pc, #0x64]         @ 0x8059dd0 <prvProcessReceivedCommands+0x1c0>
 8059d6a: 4780         	blx	r0
 8059d6c: e7ff         	b	0x8059d6e <prvProcessReceivedCommands+0x15e> @ imm = #-0x2
 8059d6e: e7fe         	b	0x8059d6e <prvProcessReceivedCommands+0x15e> @ imm = #-0x4
;                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8059d70: 9805         	ldr	r0, [sp, #0x14]
 8059d72: 9b03         	ldr	r3, [sp, #0xc]
 8059d74: 6981         	ldr	r1, [r0, #0x18]
 8059d76: 4419         	add	r1, r3
 8059d78: f8df c050    	ldr.w	r12, [pc, #0x50]        @ 0x8059dcc <prvProcessReceivedCommands+0x1bc>
 8059d7c: 461a         	mov	r2, r3
 8059d7e: 47e0         	blx	r12
;                         break;
 8059d80: e014         	b	0x8059dac <prvProcessReceivedCommands+0x19c> @ imm = #0x28
;                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8059d82: 9805         	ldr	r0, [sp, #0x14]
 8059d84: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8059d88: 0780         	lsls	r0, r0, #0x1e
 8059d8a: 2800         	cmp	r0, #0x0
 8059d8c: d404         	bmi	0x8059d98 <prvProcessReceivedCommands+0x188> @ imm = #0x8
 8059d8e: e7ff         	b	0x8059d90 <prvProcessReceivedCommands+0x180> @ imm = #-0x2
;                                 vPortFree( pxTimer );
 8059d90: 9805         	ldr	r0, [sp, #0x14]
 8059d92: 490d         	ldr	r1, [pc, #0x34]         @ 0x8059dc8 <prvProcessReceivedCommands+0x1b8>
 8059d94: 4788         	blx	r1
;                             }
 8059d96: e007         	b	0x8059da8 <prvProcessReceivedCommands+0x198> @ imm = #0xe
;                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8059d98: 9905         	ldr	r1, [sp, #0x14]
 8059d9a: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8059d9e: f000 00fe    	and	r0, r0, #0xfe
 8059da2: f881 0028    	strb.w	r0, [r1, #0x28]
 8059da6: e7ff         	b	0x8059da8 <prvProcessReceivedCommands+0x198> @ imm = #-0x2
;                         break;
 8059da8: e000         	b	0x8059dac <prvProcessReceivedCommands+0x19c> @ imm = #0x0
;                         break;
 8059daa: e7ff         	b	0x8059dac <prvProcessReceivedCommands+0x19c> @ imm = #-0x2
;             }
 8059dac: e7ff         	b	0x8059dae <prvProcessReceivedCommands+0x19e> @ imm = #-0x2
;         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8059dae: e740         	b	0x8059c32 <prvProcessReceivedCommands+0x22> @ imm = #-0x180
;     }
 8059db0: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059dbc <prvProcessReceivedCommands+0x1ac>
 8059db2: 4780         	blx	r0
 8059db4: b00a         	add	sp, #0x28
 8059db6: bd80         	pop	{r7, pc}

08059db8 <$d.47>:
 8059db8: cd c1 05 08  	.word	0x0805c1cd
 8059dbc: 21 05 06 08  	.word	0x08060521
 8059dc0: c9 b1 05 08  	.word	0x0805b1c9
 8059dc4: e1 9d 05 08  	.word	0x08059de1
 8059dc8: 41 a4 05 08  	.word	0x0805a441
 8059dcc: b5 9f 05 08  	.word	0x08059fb5
 8059dd0: 55 ec 05 08  	.word	0x0805ec55
 8059dd4: b5 9f 05 08  	.word	0x08059fb5
 8059dd8: 51 9f 05 08  	.word	0x08059f51
 8059ddc: 55 ec 05 08  	.word	0x0805ec55

08059de0 <prvSampleTimeNow>:
;     {
 8059de0: b580         	push	{r7, lr}
 8059de2: 466f         	mov	r7, sp
 8059de4: b084         	sub	sp, #0x10
 8059de6: f643 5240    	movw	r2, #0x3d40
 8059dea: f2c2 0200    	movt	r2, #0x2000
 8059dee: 6811         	ldr	r1, [r2]
 8059df0: f642 5340    	movw	r3, #0x2d40
 8059df4: f2c2 0300    	movt	r3, #0x2000
 8059df8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8059dfc: 3101         	adds	r1, #0x1
 8059dfe: 6011         	str	r1, [r2]
 8059e00: 9003         	str	r0, [sp, #0xc]
;         xTimeNow = xTaskGetTickCount();
 8059e02: 4811         	ldr	r0, [pc, #0x44]         @ 0x8059e48 <prvSampleTimeNow+0x68>
 8059e04: 4780         	blx	r0
 8059e06: 9002         	str	r0, [sp, #0x8]
;         if( xTimeNow < xLastTime )
 8059e08: 9802         	ldr	r0, [sp, #0x8]
 8059e0a: f240 21f0    	movw	r1, #0x2f0
 8059e0e: f2c2 0100    	movt	r1, #0x2000
 8059e12: 6809         	ldr	r1, [r1]
 8059e14: 4288         	cmp	r0, r1
 8059e16: d206         	bhs	0x8059e26 <prvSampleTimeNow+0x46> @ imm = #0xc
 8059e18: e7ff         	b	0x8059e1a <prvSampleTimeNow+0x3a> @ imm = #-0x2
;             prvSwitchTimerLists();
 8059e1a: 480c         	ldr	r0, [pc, #0x30]         @ 0x8059e4c <prvSampleTimeNow+0x6c>
 8059e1c: 4780         	blx	r0
;             *pxTimerListsWereSwitched = pdTRUE;
 8059e1e: 9903         	ldr	r1, [sp, #0xc]
 8059e20: 2001         	movs	r0, #0x1
 8059e22: 6008         	str	r0, [r1]
;         }
 8059e24: e003         	b	0x8059e2e <prvSampleTimeNow+0x4e> @ imm = #0x6
;             *pxTimerListsWereSwitched = pdFALSE;
 8059e26: 9903         	ldr	r1, [sp, #0xc]
 8059e28: 2000         	movs	r0, #0x0
 8059e2a: 6008         	str	r0, [r1]
 8059e2c: e7ff         	b	0x8059e2e <prvSampleTimeNow+0x4e> @ imm = #-0x2
;         xLastTime = xTimeNow;
 8059e2e: 9802         	ldr	r0, [sp, #0x8]
 8059e30: f240 21f0    	movw	r1, #0x2f0
 8059e34: f2c2 0100    	movt	r1, #0x2000
 8059e38: 6008         	str	r0, [r1]
;         return xTimeNow;
 8059e3a: 9802         	ldr	r0, [sp, #0x8]
 8059e3c: 9001         	str	r0, [sp, #0x4]
 8059e3e: 4804         	ldr	r0, [pc, #0x10]         @ 0x8059e50 <prvSampleTimeNow+0x70>
 8059e40: 4780         	blx	r0
 8059e42: 9801         	ldr	r0, [sp, #0x4]
 8059e44: b004         	add	sp, #0x10
 8059e46: bd80         	pop	{r7, pc}

08059e48 <$d.49>:
 8059e48: 49 6d 05 08  	.word	0x08056d49
 8059e4c: d5 9e 05 08  	.word	0x08059ed5
 8059e50: 21 05 06 08  	.word	0x08060521

08059e54 <prvProcessExpiredTimer>:
;     {
 8059e54: b580         	push	{r7, lr}
 8059e56: 466f         	mov	r7, sp
 8059e58: b084         	sub	sp, #0x10
 8059e5a: f643 5340    	movw	r3, #0x3d40
 8059e5e: f2c2 0300    	movt	r3, #0x2000
 8059e62: 681a         	ldr	r2, [r3]
 8059e64: f642 5c40    	movw	r12, #0x2d40
 8059e68: f2c2 0c00    	movt	r12, #0x2000
 8059e6c: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8059e70: 3201         	adds	r2, #0x1
 8059e72: 601a         	str	r2, [r3]
 8059e74: 9003         	str	r0, [sp, #0xc]
 8059e76: 9102         	str	r1, [sp, #0x8]
;         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8059e78: f240 20e8    	movw	r0, #0x2e8
 8059e7c: f2c2 0000    	movt	r0, #0x2000
 8059e80: 6800         	ldr	r0, [r0]
 8059e82: 68c0         	ldr	r0, [r0, #0xc]
 8059e84: 68c0         	ldr	r0, [r0, #0xc]
 8059e86: 9001         	str	r0, [sp, #0x4]
;         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8059e88: 9801         	ldr	r0, [sp, #0x4]
 8059e8a: 3004         	adds	r0, #0x4
 8059e8c: 490e         	ldr	r1, [pc, #0x38]         @ 0x8059ec8 <prvProcessExpiredTimer+0x74>
 8059e8e: 4788         	blx	r1
;         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8059e90: 9801         	ldr	r0, [sp, #0x4]
 8059e92: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8059e96: 0740         	lsls	r0, r0, #0x1d
 8059e98: 2800         	cmp	r0, #0x0
 8059e9a: d506         	bpl	0x8059eaa <prvProcessExpiredTimer+0x56> @ imm = #0xc
 8059e9c: e7ff         	b	0x8059e9e <prvProcessExpiredTimer+0x4a> @ imm = #-0x2
;             prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8059e9e: 9801         	ldr	r0, [sp, #0x4]
 8059ea0: 9903         	ldr	r1, [sp, #0xc]
 8059ea2: 9a02         	ldr	r2, [sp, #0x8]
 8059ea4: 4b09         	ldr	r3, [pc, #0x24]         @ 0x8059ecc <prvProcessExpiredTimer+0x78>
 8059ea6: 4798         	blx	r3
;         }
 8059ea8: e007         	b	0x8059eba <prvProcessExpiredTimer+0x66> @ imm = #0xe
;             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8059eaa: 9901         	ldr	r1, [sp, #0x4]
 8059eac: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8059eb0: f000 00fe    	and	r0, r0, #0xfe
 8059eb4: f881 0028    	strb.w	r0, [r1, #0x28]
 8059eb8: e7ff         	b	0x8059eba <prvProcessExpiredTimer+0x66> @ imm = #-0x2
;         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8059eba: 9801         	ldr	r0, [sp, #0x4]
 8059ebc: 6a01         	ldr	r1, [r0, #0x20]
 8059ebe: 4788         	blx	r1
;     }
 8059ec0: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059ed0 <prvProcessExpiredTimer+0x7c>
 8059ec2: 4780         	blx	r0
 8059ec4: b004         	add	sp, #0x10
 8059ec6: bd80         	pop	{r7, pc}

08059ec8 <$d.51>:
 8059ec8: c9 b1 05 08  	.word	0x0805b1c9
 8059ecc: 51 9f 05 08  	.word	0x08059f51
 8059ed0: 21 05 06 08  	.word	0x08060521

08059ed4 <prvSwitchTimerLists>:
;     {
 8059ed4: b580         	push	{r7, lr}
 8059ed6: 466f         	mov	r7, sp
 8059ed8: b082         	sub	sp, #0x8
 8059eda: f643 5140    	movw	r1, #0x3d40
 8059ede: f2c2 0100    	movt	r1, #0x2000
 8059ee2: 6808         	ldr	r0, [r1]
 8059ee4: f642 5240    	movw	r2, #0x2d40
 8059ee8: f2c2 0200    	movt	r2, #0x2000
 8059eec: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8059ef0: 3001         	adds	r0, #0x1
 8059ef2: 6008         	str	r0, [r1]
;         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8059ef4: e7ff         	b	0x8059ef6 <prvSwitchTimerLists+0x22> @ imm = #-0x2
 8059ef6: f240 20e8    	movw	r0, #0x2e8
 8059efa: f2c2 0000    	movt	r0, #0x2000
 8059efe: 6800         	ldr	r0, [r0]
 8059f00: 6800         	ldr	r0, [r0]
 8059f02: b170         	cbz	r0, 0x8059f22 <prvSwitchTimerLists+0x4e> @ imm = #0x1c
 8059f04: e7ff         	b	0x8059f06 <prvSwitchTimerLists+0x32> @ imm = #-0x2
;             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8059f06: f240 20e8    	movw	r0, #0x2e8
 8059f0a: f2c2 0000    	movt	r0, #0x2000
 8059f0e: 6800         	ldr	r0, [r0]
 8059f10: 68c0         	ldr	r0, [r0, #0xc]
 8059f12: 6800         	ldr	r0, [r0]
 8059f14: 9001         	str	r0, [sp, #0x4]
;             prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8059f16: 9801         	ldr	r0, [sp, #0x4]
 8059f18: 4a0c         	ldr	r2, [pc, #0x30]         @ 0x8059f4c <prvSwitchTimerLists+0x78>
 8059f1a: f04f 31ff    	mov.w	r1, #0xffffffff
 8059f1e: 4790         	blx	r2
;         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8059f20: e7e9         	b	0x8059ef6 <prvSwitchTimerLists+0x22> @ imm = #-0x2e
;         pxTemp = pxCurrentTimerList;
 8059f22: f240 22e8    	movw	r2, #0x2e8
 8059f26: f2c2 0200    	movt	r2, #0x2000
 8059f2a: 6810         	ldr	r0, [r2]
 8059f2c: 9000         	str	r0, [sp]
;         pxCurrentTimerList = pxOverflowTimerList;
 8059f2e: f240 21ec    	movw	r1, #0x2ec
 8059f32: f2c2 0100    	movt	r1, #0x2000
 8059f36: 6808         	ldr	r0, [r1]
 8059f38: 6010         	str	r0, [r2]
;         pxOverflowTimerList = pxTemp;
 8059f3a: 9800         	ldr	r0, [sp]
 8059f3c: 6008         	str	r0, [r1]
;     }
 8059f3e: 4802         	ldr	r0, [pc, #0x8]          @ 0x8059f48 <prvSwitchTimerLists+0x74>
 8059f40: 4780         	blx	r0
 8059f42: b002         	add	sp, #0x8
 8059f44: bd80         	pop	{r7, pc}
 8059f46: bf00         	nop

08059f48 <$d.53>:
 8059f48: 21 05 06 08  	.word	0x08060521
 8059f4c: 55 9e 05 08  	.word	0x08059e55

08059f50 <prvReloadTimer>:
;     {
 8059f50: b5d0         	push	{r4, r6, r7, lr}
 8059f52: af02         	add	r7, sp, #0x8
 8059f54: b084         	sub	sp, #0x10
 8059f56: f643 5c40    	movw	r12, #0x3d40
 8059f5a: f2c2 0c00    	movt	r12, #0x2000
 8059f5e: f8dc 3000    	ldr.w	r3, [r12]
 8059f62: f642 5440    	movw	r4, #0x2d40
 8059f66: f2c2 0400    	movt	r4, #0x2000
 8059f6a: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8059f6e: 3301         	adds	r3, #0x1
 8059f70: f8cc 3000    	str.w	r3, [r12]
 8059f74: 9003         	str	r0, [sp, #0xc]
 8059f76: 9102         	str	r1, [sp, #0x8]
 8059f78: 9201         	str	r2, [sp, #0x4]
;         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8059f7a: e7ff         	b	0x8059f7c <prvReloadTimer+0x2c> @ imm = #-0x2
 8059f7c: 9803         	ldr	r0, [sp, #0xc]
 8059f7e: 9b02         	ldr	r3, [sp, #0x8]
 8059f80: 6981         	ldr	r1, [r0, #0x18]
 8059f82: 4419         	add	r1, r3
 8059f84: 9a01         	ldr	r2, [sp, #0x4]
 8059f86: f8df c024    	ldr.w	r12, [pc, #0x24]        @ 0x8059fac <prvReloadTimer+0x5c>
 8059f8a: 47e0         	blx	r12
 8059f8c: b148         	cbz	r0, 0x8059fa2 <prvReloadTimer+0x52> @ imm = #0x12
 8059f8e: e7ff         	b	0x8059f90 <prvReloadTimer+0x40> @ imm = #-0x2
;             xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8059f90: 9803         	ldr	r0, [sp, #0xc]
 8059f92: 6981         	ldr	r1, [r0, #0x18]
 8059f94: 9802         	ldr	r0, [sp, #0x8]
 8059f96: 4408         	add	r0, r1
 8059f98: 9002         	str	r0, [sp, #0x8]
;             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8059f9a: 9803         	ldr	r0, [sp, #0xc]
 8059f9c: 6a01         	ldr	r1, [r0, #0x20]
 8059f9e: 4788         	blx	r1
;         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8059fa0: e7ec         	b	0x8059f7c <prvReloadTimer+0x2c> @ imm = #-0x28
;     }
 8059fa2: 4803         	ldr	r0, [pc, #0xc]          @ 0x8059fb0 <prvReloadTimer+0x60>
 8059fa4: 4780         	blx	r0
 8059fa6: b004         	add	sp, #0x10
 8059fa8: bdd0         	pop	{r4, r6, r7, pc}
 8059faa: bf00         	nop

08059fac <$d.55>:
 8059fac: b5 9f 05 08  	.word	0x08059fb5
 8059fb0: 21 05 06 08  	.word	0x08060521

08059fb4 <prvInsertTimerInActiveList>:
;     {
 8059fb4: b5b0         	push	{r4, r5, r7, lr}
 8059fb6: af02         	add	r7, sp, #0x8
 8059fb8: b086         	sub	sp, #0x18
 8059fba: 4674         	mov	r4, lr
 8059fbc: f643 5e40    	movw	lr, #0x3d40
 8059fc0: f2c2 0e00    	movt	lr, #0x2000
 8059fc4: f8de c000    	ldr.w	r12, [lr]
 8059fc8: f642 5540    	movw	r5, #0x2d40
 8059fcc: f2c2 0500    	movt	r5, #0x2000
 8059fd0: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 8059fd4: f10c 0c01    	add.w	r12, r12, #0x1
 8059fd8: f8ce c000    	str.w	r12, [lr]
 8059fdc: 9005         	str	r0, [sp, #0x14]
 8059fde: 9104         	str	r1, [sp, #0x10]
 8059fe0: 9203         	str	r2, [sp, #0xc]
 8059fe2: 9302         	str	r3, [sp, #0x8]
 8059fe4: 2000         	movs	r0, #0x0
;         BaseType_t xProcessTimerNow = pdFALSE;
 8059fe6: 9001         	str	r0, [sp, #0x4]
;         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8059fe8: 9804         	ldr	r0, [sp, #0x10]
 8059fea: 9905         	ldr	r1, [sp, #0x14]
 8059fec: 6048         	str	r0, [r1, #0x4]
;         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8059fee: 9805         	ldr	r0, [sp, #0x14]
 8059ff0: 6100         	str	r0, [r0, #0x10]
;         if( xNextExpiryTime <= xTimeNow )
 8059ff2: 9804         	ldr	r0, [sp, #0x10]
 8059ff4: 9903         	ldr	r1, [sp, #0xc]
 8059ff6: 4288         	cmp	r0, r1
 8059ff8: d816         	bhi	0x805a028 <prvInsertTimerInActiveList+0x74> @ imm = #0x2c
 8059ffa: e7ff         	b	0x8059ffc <prvInsertTimerInActiveList+0x48> @ imm = #-0x2
;             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8059ffc: 9803         	ldr	r0, [sp, #0xc]
 8059ffe: 9902         	ldr	r1, [sp, #0x8]
 805a000: 1a40         	subs	r0, r0, r1
 805a002: 9905         	ldr	r1, [sp, #0x14]
 805a004: 6989         	ldr	r1, [r1, #0x18]
 805a006: 4288         	cmp	r0, r1
 805a008: d303         	blo	0x805a012 <prvInsertTimerInActiveList+0x5e> @ imm = #0x6
 805a00a: e7ff         	b	0x805a00c <prvInsertTimerInActiveList+0x58> @ imm = #-0x2
 805a00c: 2001         	movs	r0, #0x1
;                 xProcessTimerNow = pdTRUE;
 805a00e: 9001         	str	r0, [sp, #0x4]
;             }
 805a010: e009         	b	0x805a026 <prvInsertTimerInActiveList+0x72> @ imm = #0x12
;                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 805a012: f240 20ec    	movw	r0, #0x2ec
 805a016: f2c2 0000    	movt	r0, #0x2000
 805a01a: 6800         	ldr	r0, [r0]
 805a01c: 9905         	ldr	r1, [sp, #0x14]
 805a01e: 3104         	adds	r1, #0x4
 805a020: 4a12         	ldr	r2, [pc, #0x48]         @ 0x805a06c <prvInsertTimerInActiveList+0xb8>
 805a022: 4790         	blx	r2
 805a024: e7ff         	b	0x805a026 <prvInsertTimerInActiveList+0x72> @ imm = #-0x2
;         }
 805a026: e017         	b	0x805a058 <prvInsertTimerInActiveList+0xa4> @ imm = #0x2e
;             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 805a028: 9803         	ldr	r0, [sp, #0xc]
 805a02a: 9902         	ldr	r1, [sp, #0x8]
 805a02c: 4288         	cmp	r0, r1
 805a02e: d208         	bhs	0x805a042 <prvInsertTimerInActiveList+0x8e> @ imm = #0x10
 805a030: e7ff         	b	0x805a032 <prvInsertTimerInActiveList+0x7e> @ imm = #-0x2
 805a032: 9804         	ldr	r0, [sp, #0x10]
 805a034: 9902         	ldr	r1, [sp, #0x8]
 805a036: 4288         	cmp	r0, r1
 805a038: d303         	blo	0x805a042 <prvInsertTimerInActiveList+0x8e> @ imm = #0x6
 805a03a: e7ff         	b	0x805a03c <prvInsertTimerInActiveList+0x88> @ imm = #-0x2
 805a03c: 2001         	movs	r0, #0x1
;                 xProcessTimerNow = pdTRUE;
 805a03e: 9001         	str	r0, [sp, #0x4]
;             }
 805a040: e009         	b	0x805a056 <prvInsertTimerInActiveList+0xa2> @ imm = #0x12
;                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 805a042: f240 20e8    	movw	r0, #0x2e8
 805a046: f2c2 0000    	movt	r0, #0x2000
 805a04a: 6800         	ldr	r0, [r0]
 805a04c: 9905         	ldr	r1, [sp, #0x14]
 805a04e: 3104         	adds	r1, #0x4
 805a050: 4a05         	ldr	r2, [pc, #0x14]         @ 0x805a068 <prvInsertTimerInActiveList+0xb4>
 805a052: 4790         	blx	r2
 805a054: e7ff         	b	0x805a056 <prvInsertTimerInActiveList+0xa2> @ imm = #-0x2
 805a056: e7ff         	b	0x805a058 <prvInsertTimerInActiveList+0xa4> @ imm = #-0x2
;         return xProcessTimerNow;
 805a058: 9801         	ldr	r0, [sp, #0x4]
 805a05a: 9000         	str	r0, [sp]
 805a05c: 4804         	ldr	r0, [pc, #0x10]         @ 0x805a070 <prvInsertTimerInActiveList+0xbc>
 805a05e: 4780         	blx	r0
 805a060: 9800         	ldr	r0, [sp]
 805a062: b006         	add	sp, #0x18
 805a064: bdb0         	pop	{r4, r5, r7, pc}
 805a066: bf00         	nop

0805a068 <$d.57>:
 805a068: 39 b1 05 08  	.word	0x0805b139
 805a06c: 39 b1 05 08  	.word	0x0805b139
 805a070: 21 05 06 08  	.word	0x08060521

0805a074 <pvPortMalloc>:
; {
 805a074: b580         	push	{r7, lr}
 805a076: 466f         	mov	r7, sp
 805a078: b08c         	sub	sp, #0x30
 805a07a: f643 5240    	movw	r2, #0x3d40
 805a07e: f2c2 0200    	movt	r2, #0x2000
 805a082: 6811         	ldr	r1, [r2]
 805a084: f642 5340    	movw	r3, #0x2d40
 805a088: f2c2 0300    	movt	r3, #0x2000
 805a08c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805a090: 3101         	adds	r1, #0x1
 805a092: 6011         	str	r1, [r2]
 805a094: 900b         	str	r0, [sp, #0x2c]
 805a096: 2000         	movs	r0, #0x0
;     void * pvReturn = NULL;
 805a098: 9007         	str	r0, [sp, #0x1c]
;     if( xWantedSize > 0 )
 805a09a: 980b         	ldr	r0, [sp, #0x2c]
 805a09c: b340         	cbz	r0, 0x805a0f0 <pvPortMalloc+0x7c> @ imm = #0x50
 805a09e: e7ff         	b	0x805a0a0 <pvPortMalloc+0x2c> @ imm = #-0x2
;         if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 805a0a0: 980b         	ldr	r0, [sp, #0x2c]
 805a0a2: f110 0f09    	cmn.w	r0, #0x9
 805a0a6: d81f         	bhi	0x805a0e8 <pvPortMalloc+0x74> @ imm = #0x3e
 805a0a8: e7ff         	b	0x805a0aa <pvPortMalloc+0x36> @ imm = #-0x2
;             xWantedSize += xHeapStructSize;
 805a0aa: 980b         	ldr	r0, [sp, #0x2c]
 805a0ac: 3008         	adds	r0, #0x8
 805a0ae: 900b         	str	r0, [sp, #0x2c]
;             if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 805a0b0: f89d 002c    	ldrb.w	r0, [sp, #0x2c]
 805a0b4: 0740         	lsls	r0, r0, #0x1d
 805a0b6: b1a8         	cbz	r0, 0x805a0e4 <pvPortMalloc+0x70> @ imm = #0x2a
 805a0b8: e7ff         	b	0x805a0ba <pvPortMalloc+0x46> @ imm = #-0x2
;                 xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 805a0ba: 980b         	ldr	r0, [sp, #0x2c]
 805a0bc: f000 0007    	and	r0, r0, #0x7
 805a0c0: f1c0 0008    	rsb.w	r0, r0, #0x8
 805a0c4: 9006         	str	r0, [sp, #0x18]
;                 if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 805a0c6: 980b         	ldr	r0, [sp, #0x2c]
 805a0c8: 9906         	ldr	r1, [sp, #0x18]
 805a0ca: 43c9         	mvns	r1, r1
 805a0cc: 4288         	cmp	r0, r1
 805a0ce: d805         	bhi	0x805a0dc <pvPortMalloc+0x68> @ imm = #0xa
 805a0d0: e7ff         	b	0x805a0d2 <pvPortMalloc+0x5e> @ imm = #-0x2
;                     xWantedSize += xAdditionalRequiredSize;
 805a0d2: 9906         	ldr	r1, [sp, #0x18]
 805a0d4: 980b         	ldr	r0, [sp, #0x2c]
 805a0d6: 4408         	add	r0, r1
 805a0d8: 900b         	str	r0, [sp, #0x2c]
;                 }
 805a0da: e002         	b	0x805a0e2 <pvPortMalloc+0x6e> @ imm = #0x4
 805a0dc: 2000         	movs	r0, #0x0
;                     xWantedSize = 0;
 805a0de: 900b         	str	r0, [sp, #0x2c]
 805a0e0: e7ff         	b	0x805a0e2 <pvPortMalloc+0x6e> @ imm = #-0x2
;             }
 805a0e2: e000         	b	0x805a0e6 <pvPortMalloc+0x72> @ imm = #0x0
 805a0e4: e7ff         	b	0x805a0e6 <pvPortMalloc+0x72> @ imm = #-0x2
;         }
 805a0e6: e002         	b	0x805a0ee <pvPortMalloc+0x7a> @ imm = #0x4
 805a0e8: 2000         	movs	r0, #0x0
;             xWantedSize = 0;
 805a0ea: 900b         	str	r0, [sp, #0x2c]
 805a0ec: e7ff         	b	0x805a0ee <pvPortMalloc+0x7a> @ imm = #-0x2
;     }
 805a0ee: e000         	b	0x805a0f2 <pvPortMalloc+0x7e> @ imm = #0x0
 805a0f0: e7ff         	b	0x805a0f2 <pvPortMalloc+0x7e> @ imm = #-0x2
;     vTaskSuspendAll();
 805a0f2: 4895         	ldr	r0, [pc, #0x254]        @ 0x805a348 <pvPortMalloc+0x2d4>
 805a0f4: 4780         	blx	r0
;         if( pxEnd == NULL )
 805a0f6: f240 301c    	movw	r0, #0x31c
 805a0fa: f2c2 0000    	movt	r0, #0x2000
 805a0fe: 6800         	ldr	r0, [r0]
 805a100: b918         	cbnz	r0, 0x805a10a <pvPortMalloc+0x96> @ imm = #0x6
 805a102: e7ff         	b	0x805a104 <pvPortMalloc+0x90> @ imm = #-0x2
;             prvHeapInit();
 805a104: 4891         	ldr	r0, [pc, #0x244]        @ 0x805a34c <pvPortMalloc+0x2d8>
 805a106: 4780         	blx	r0
;         }
 805a108: e000         	b	0x805a10c <pvPortMalloc+0x98> @ imm = #0x0
 805a10a: e7ff         	b	0x805a10c <pvPortMalloc+0x98> @ imm = #-0x2
;         if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 805a10c: f89d 002f    	ldrb.w	r0, [sp, #0x2f]
 805a110: 0600         	lsls	r0, r0, #0x18
 805a112: 2800         	cmp	r0, #0x0
 805a114: f100 8105    	bmi.w	0x805a322 <pvPortMalloc+0x2ae> @ imm = #0x20a
 805a118: e7ff         	b	0x805a11a <pvPortMalloc+0xa6> @ imm = #-0x2
;             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 805a11a: 980b         	ldr	r0, [sp, #0x2c]
 805a11c: 2800         	cmp	r0, #0x0
 805a11e: f000 80fe    	beq.w	0x805a31e <pvPortMalloc+0x2aa> @ imm = #0x1fc
 805a122: e7ff         	b	0x805a124 <pvPortMalloc+0xb0> @ imm = #-0x2
 805a124: 980b         	ldr	r0, [sp, #0x2c]
 805a126: f240 3120    	movw	r1, #0x320
 805a12a: f2c2 0100    	movt	r1, #0x2000
 805a12e: 6809         	ldr	r1, [r1]
 805a130: 4288         	cmp	r0, r1
 805a132: f200 80f4    	bhi.w	0x805a31e <pvPortMalloc+0x2aa> @ imm = #0x1e8
 805a136: e7ff         	b	0x805a138 <pvPortMalloc+0xc4> @ imm = #-0x2
;                 pxPreviousBlock = &xStart;
 805a138: f240 3024    	movw	r0, #0x324
 805a13c: f2c2 0000    	movt	r0, #0x2000
 805a140: 9009         	str	r0, [sp, #0x24]
;                 pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 805a142: 6800         	ldr	r0, [r0]
 805a144: 900a         	str	r0, [sp, #0x28]
;                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 805a146: 990a         	ldr	r1, [sp, #0x28]
 805a148: 2000         	movs	r0, #0x0
 805a14a: f240 322c    	movw	r2, #0x32c
 805a14e: f2c2 0200    	movt	r2, #0x2000
 805a152: 4291         	cmp	r1, r2
 805a154: 9005         	str	r0, [sp, #0x14]
 805a156: d30e         	blo	0x805a176 <pvPortMalloc+0x102> @ imm = #0x1c
 805a158: e7ff         	b	0x805a15a <pvPortMalloc+0xe6> @ imm = #-0x2
 805a15a: 990a         	ldr	r1, [sp, #0x28]
 805a15c: f240 302c    	movw	r0, #0x32c
 805a160: f2c2 0000    	movt	r0, #0x2000
 805a164: f641 72ff    	movw	r2, #0x1fff
 805a168: 4402         	add	r2, r0
 805a16a: 2000         	movs	r0, #0x0
 805a16c: 4291         	cmp	r1, r2
 805a16e: bf98         	it	ls
 805a170: 2001         	movls	r0, #0x1
 805a172: 9005         	str	r0, [sp, #0x14]
 805a174: e7ff         	b	0x805a176 <pvPortMalloc+0x102> @ imm = #-0x2
 805a176: 9805         	ldr	r0, [sp, #0x14]
;                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 805a178: 07c0         	lsls	r0, r0, #0x1f
 805a17a: b920         	cbnz	r0, 0x805a186 <pvPortMalloc+0x112> @ imm = #0x8
 805a17c: e7ff         	b	0x805a17e <pvPortMalloc+0x10a> @ imm = #-0x2
 805a17e: 487b         	ldr	r0, [pc, #0x1ec]        @ 0x805a36c <pvPortMalloc+0x2f8>
 805a180: 4780         	blx	r0
 805a182: e7ff         	b	0x805a184 <pvPortMalloc+0x110> @ imm = #-0x2
 805a184: e7fe         	b	0x805a184 <pvPortMalloc+0x110> @ imm = #-0x4
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 805a186: e7ff         	b	0x805a188 <pvPortMalloc+0x114> @ imm = #-0x2
 805a188: 980a         	ldr	r0, [sp, #0x28]
 805a18a: 6841         	ldr	r1, [r0, #0x4]
 805a18c: 9a0b         	ldr	r2, [sp, #0x2c]
 805a18e: 2000         	movs	r0, #0x0
 805a190: 4291         	cmp	r1, r2
 805a192: 9004         	str	r0, [sp, #0x10]
 805a194: d207         	bhs	0x805a1a6 <pvPortMalloc+0x132> @ imm = #0xe
 805a196: e7ff         	b	0x805a198 <pvPortMalloc+0x124> @ imm = #-0x2
 805a198: 980a         	ldr	r0, [sp, #0x28]
 805a19a: 6800         	ldr	r0, [r0]
 805a19c: 2800         	cmp	r0, #0x0
 805a19e: bf18         	it	ne
 805a1a0: 2001         	movne	r0, #0x1
 805a1a2: 9004         	str	r0, [sp, #0x10]
 805a1a4: e7ff         	b	0x805a1a6 <pvPortMalloc+0x132> @ imm = #-0x2
 805a1a6: 9804         	ldr	r0, [sp, #0x10]
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 805a1a8: 07c0         	lsls	r0, r0, #0x1f
 805a1aa: b330         	cbz	r0, 0x805a1fa <pvPortMalloc+0x186> @ imm = #0x4c
 805a1ac: e7ff         	b	0x805a1ae <pvPortMalloc+0x13a> @ imm = #-0x2
;                     pxPreviousBlock = pxBlock;
 805a1ae: 980a         	ldr	r0, [sp, #0x28]
 805a1b0: 9009         	str	r0, [sp, #0x24]
;                     pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 805a1b2: 980a         	ldr	r0, [sp, #0x28]
 805a1b4: 6800         	ldr	r0, [r0]
 805a1b6: 900a         	str	r0, [sp, #0x28]
;                     heapVALIDATE_BLOCK_POINTER( pxBlock );
 805a1b8: 990a         	ldr	r1, [sp, #0x28]
 805a1ba: 2000         	movs	r0, #0x0
 805a1bc: f240 322c    	movw	r2, #0x32c
 805a1c0: f2c2 0200    	movt	r2, #0x2000
 805a1c4: 4291         	cmp	r1, r2
 805a1c6: 9003         	str	r0, [sp, #0xc]
 805a1c8: d30e         	blo	0x805a1e8 <pvPortMalloc+0x174> @ imm = #0x1c
 805a1ca: e7ff         	b	0x805a1cc <pvPortMalloc+0x158> @ imm = #-0x2
 805a1cc: 990a         	ldr	r1, [sp, #0x28]
 805a1ce: f240 302c    	movw	r0, #0x32c
 805a1d2: f2c2 0000    	movt	r0, #0x2000
 805a1d6: f641 72ff    	movw	r2, #0x1fff
 805a1da: 4402         	add	r2, r0
 805a1dc: 2000         	movs	r0, #0x0
 805a1de: 4291         	cmp	r1, r2
 805a1e0: bf98         	it	ls
 805a1e2: 2001         	movls	r0, #0x1
 805a1e4: 9003         	str	r0, [sp, #0xc]
 805a1e6: e7ff         	b	0x805a1e8 <pvPortMalloc+0x174> @ imm = #-0x2
 805a1e8: 9803         	ldr	r0, [sp, #0xc]
;                     heapVALIDATE_BLOCK_POINTER( pxBlock );
 805a1ea: 07c0         	lsls	r0, r0, #0x1f
 805a1ec: b920         	cbnz	r0, 0x805a1f8 <pvPortMalloc+0x184> @ imm = #0x8
 805a1ee: e7ff         	b	0x805a1f0 <pvPortMalloc+0x17c> @ imm = #-0x2
 805a1f0: 485d         	ldr	r0, [pc, #0x174]        @ 0x805a368 <pvPortMalloc+0x2f4>
 805a1f2: 4780         	blx	r0
 805a1f4: e7ff         	b	0x805a1f6 <pvPortMalloc+0x182> @ imm = #-0x2
 805a1f6: e7fe         	b	0x805a1f6 <pvPortMalloc+0x182> @ imm = #-0x4
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 805a1f8: e7c6         	b	0x805a188 <pvPortMalloc+0x114> @ imm = #-0x74
;                 if( pxBlock != pxEnd )
 805a1fa: 980a         	ldr	r0, [sp, #0x28]
 805a1fc: f240 311c    	movw	r1, #0x31c
 805a200: f2c2 0100    	movt	r1, #0x2000
 805a204: 6809         	ldr	r1, [r1]
 805a206: 4288         	cmp	r0, r1
 805a208: f000 8087    	beq.w	0x805a31a <pvPortMalloc+0x2a6> @ imm = #0x10e
 805a20c: e7ff         	b	0x805a20e <pvPortMalloc+0x19a> @ imm = #-0x2
;                     pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 805a20e: 9809         	ldr	r0, [sp, #0x24]
 805a210: 6800         	ldr	r0, [r0]
 805a212: 3008         	adds	r0, #0x8
 805a214: 9007         	str	r0, [sp, #0x1c]
;                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 805a216: 9907         	ldr	r1, [sp, #0x1c]
 805a218: 2000         	movs	r0, #0x0
 805a21a: f240 322c    	movw	r2, #0x32c
 805a21e: f2c2 0200    	movt	r2, #0x2000
 805a222: 4291         	cmp	r1, r2
 805a224: 9002         	str	r0, [sp, #0x8]
 805a226: d30e         	blo	0x805a246 <pvPortMalloc+0x1d2> @ imm = #0x1c
 805a228: e7ff         	b	0x805a22a <pvPortMalloc+0x1b6> @ imm = #-0x2
 805a22a: 9907         	ldr	r1, [sp, #0x1c]
 805a22c: f240 302c    	movw	r0, #0x32c
 805a230: f2c2 0000    	movt	r0, #0x2000
 805a234: f641 72ff    	movw	r2, #0x1fff
 805a238: 4402         	add	r2, r0
 805a23a: 2000         	movs	r0, #0x0
 805a23c: 4291         	cmp	r1, r2
 805a23e: bf98         	it	ls
 805a240: 2001         	movls	r0, #0x1
 805a242: 9002         	str	r0, [sp, #0x8]
 805a244: e7ff         	b	0x805a246 <pvPortMalloc+0x1d2> @ imm = #-0x2
 805a246: 9802         	ldr	r0, [sp, #0x8]
;                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 805a248: 07c0         	lsls	r0, r0, #0x1f
 805a24a: b920         	cbnz	r0, 0x805a256 <pvPortMalloc+0x1e2> @ imm = #0x8
 805a24c: e7ff         	b	0x805a24e <pvPortMalloc+0x1da> @ imm = #-0x2
 805a24e: 4845         	ldr	r0, [pc, #0x114]        @ 0x805a364 <pvPortMalloc+0x2f0>
 805a250: 4780         	blx	r0
 805a252: e7ff         	b	0x805a254 <pvPortMalloc+0x1e0> @ imm = #-0x2
 805a254: e7fe         	b	0x805a254 <pvPortMalloc+0x1e0> @ imm = #-0x4
;                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 805a256: 980a         	ldr	r0, [sp, #0x28]
 805a258: 6800         	ldr	r0, [r0]
 805a25a: 9909         	ldr	r1, [sp, #0x24]
 805a25c: 6008         	str	r0, [r1]
;                     configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 805a25e: 980a         	ldr	r0, [sp, #0x28]
 805a260: 6840         	ldr	r0, [r0, #0x4]
 805a262: 990b         	ldr	r1, [sp, #0x2c]
 805a264: 4288         	cmp	r0, r1
 805a266: d204         	bhs	0x805a272 <pvPortMalloc+0x1fe> @ imm = #0x8
 805a268: e7ff         	b	0x805a26a <pvPortMalloc+0x1f6> @ imm = #-0x2
 805a26a: 483d         	ldr	r0, [pc, #0xf4]         @ 0x805a360 <pvPortMalloc+0x2ec>
 805a26c: 4780         	blx	r0
 805a26e: e7ff         	b	0x805a270 <pvPortMalloc+0x1fc> @ imm = #-0x2
 805a270: e7fe         	b	0x805a270 <pvPortMalloc+0x1fc> @ imm = #-0x4
;                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 805a272: 980a         	ldr	r0, [sp, #0x28]
 805a274: 6840         	ldr	r0, [r0, #0x4]
 805a276: 990b         	ldr	r1, [sp, #0x2c]
 805a278: 1a40         	subs	r0, r0, r1
 805a27a: 2811         	cmp	r0, #0x11
 805a27c: d31e         	blo	0x805a2bc <pvPortMalloc+0x248> @ imm = #0x3c
 805a27e: e7ff         	b	0x805a280 <pvPortMalloc+0x20c> @ imm = #-0x2
;                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 805a280: 980a         	ldr	r0, [sp, #0x28]
 805a282: 990b         	ldr	r1, [sp, #0x2c]
 805a284: 4408         	add	r0, r1
 805a286: 9008         	str	r0, [sp, #0x20]
;                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 805a288: f89d 0020    	ldrb.w	r0, [sp, #0x20]
 805a28c: 0740         	lsls	r0, r0, #0x1d
 805a28e: b120         	cbz	r0, 0x805a29a <pvPortMalloc+0x226> @ imm = #0x8
 805a290: e7ff         	b	0x805a292 <pvPortMalloc+0x21e> @ imm = #-0x2
 805a292: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805a35c <pvPortMalloc+0x2e8>
 805a294: 4780         	blx	r0
 805a296: e7ff         	b	0x805a298 <pvPortMalloc+0x224> @ imm = #-0x2
 805a298: e7fe         	b	0x805a298 <pvPortMalloc+0x224> @ imm = #-0x4
;                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 805a29a: 980a         	ldr	r0, [sp, #0x28]
 805a29c: 6840         	ldr	r0, [r0, #0x4]
 805a29e: 990b         	ldr	r1, [sp, #0x2c]
 805a2a0: 1a40         	subs	r0, r0, r1
 805a2a2: 9908         	ldr	r1, [sp, #0x20]
 805a2a4: 6048         	str	r0, [r1, #0x4]
;                         pxBlock->xBlockSize = xWantedSize;
 805a2a6: 980b         	ldr	r0, [sp, #0x2c]
 805a2a8: 990a         	ldr	r1, [sp, #0x28]
 805a2aa: 6048         	str	r0, [r1, #0x4]
;                         pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 805a2ac: 9809         	ldr	r0, [sp, #0x24]
 805a2ae: 6800         	ldr	r0, [r0]
 805a2b0: 9908         	ldr	r1, [sp, #0x20]
 805a2b2: 6008         	str	r0, [r1]
;                         pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 805a2b4: 9808         	ldr	r0, [sp, #0x20]
 805a2b6: 9909         	ldr	r1, [sp, #0x24]
 805a2b8: 6008         	str	r0, [r1]
;                     }
 805a2ba: e000         	b	0x805a2be <pvPortMalloc+0x24a> @ imm = #0x0
 805a2bc: e7ff         	b	0x805a2be <pvPortMalloc+0x24a> @ imm = #-0x2
;                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 805a2be: 980a         	ldr	r0, [sp, #0x28]
 805a2c0: 6842         	ldr	r2, [r0, #0x4]
 805a2c2: f240 3020    	movw	r0, #0x320
 805a2c6: f2c2 0000    	movt	r0, #0x2000
 805a2ca: 6801         	ldr	r1, [r0]
 805a2cc: 1a89         	subs	r1, r1, r2
 805a2ce: 6001         	str	r1, [r0]
;                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 805a2d0: 6800         	ldr	r0, [r0]
 805a2d2: f242 312c    	movw	r1, #0x232c
 805a2d6: f2c2 0100    	movt	r1, #0x2000
 805a2da: 6809         	ldr	r1, [r1]
 805a2dc: 4288         	cmp	r0, r1
 805a2de: d20b         	bhs	0x805a2f8 <pvPortMalloc+0x284> @ imm = #0x16
 805a2e0: e7ff         	b	0x805a2e2 <pvPortMalloc+0x26e> @ imm = #-0x2
;                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 805a2e2: f240 3020    	movw	r0, #0x320
 805a2e6: f2c2 0000    	movt	r0, #0x2000
 805a2ea: 6800         	ldr	r0, [r0]
 805a2ec: f242 312c    	movw	r1, #0x232c
 805a2f0: f2c2 0100    	movt	r1, #0x2000
 805a2f4: 6008         	str	r0, [r1]
;                     }
 805a2f6: e000         	b	0x805a2fa <pvPortMalloc+0x286> @ imm = #0x0
 805a2f8: e7ff         	b	0x805a2fa <pvPortMalloc+0x286> @ imm = #-0x2
;                     heapALLOCATE_BLOCK( pxBlock );
 805a2fa: 990a         	ldr	r1, [sp, #0x28]
 805a2fc: 6848         	ldr	r0, [r1, #0x4]
 805a2fe: f040 4000    	orr	r0, r0, #0x80000000
 805a302: 6048         	str	r0, [r1, #0x4]
;                     pxBlock->pxNextFreeBlock = NULL;
 805a304: 990a         	ldr	r1, [sp, #0x28]
 805a306: 2000         	movs	r0, #0x0
 805a308: 6008         	str	r0, [r1]
;                     xNumberOfSuccessfulAllocations++;
 805a30a: f242 3130    	movw	r1, #0x2330
 805a30e: f2c2 0100    	movt	r1, #0x2000
 805a312: 6808         	ldr	r0, [r1]
 805a314: 3001         	adds	r0, #0x1
 805a316: 6008         	str	r0, [r1]
;                 }
 805a318: e000         	b	0x805a31c <pvPortMalloc+0x2a8> @ imm = #0x0
 805a31a: e7ff         	b	0x805a31c <pvPortMalloc+0x2a8> @ imm = #-0x2
;             }
 805a31c: e000         	b	0x805a320 <pvPortMalloc+0x2ac> @ imm = #0x0
 805a31e: e7ff         	b	0x805a320 <pvPortMalloc+0x2ac> @ imm = #-0x2
;         }
 805a320: e000         	b	0x805a324 <pvPortMalloc+0x2b0> @ imm = #0x0
 805a322: e7ff         	b	0x805a324 <pvPortMalloc+0x2b0> @ imm = #-0x2
;     ( void ) xTaskResumeAll();
 805a324: 480a         	ldr	r0, [pc, #0x28]         @ 0x805a350 <pvPortMalloc+0x2dc>
 805a326: 4780         	blx	r0
;     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 805a328: f89d 001c    	ldrb.w	r0, [sp, #0x1c]
 805a32c: 0740         	lsls	r0, r0, #0x1d
 805a32e: b120         	cbz	r0, 0x805a33a <pvPortMalloc+0x2c6> @ imm = #0x8
 805a330: e7ff         	b	0x805a332 <pvPortMalloc+0x2be> @ imm = #-0x2
 805a332: 4809         	ldr	r0, [pc, #0x24]         @ 0x805a358 <pvPortMalloc+0x2e4>
 805a334: 4780         	blx	r0
 805a336: e7ff         	b	0x805a338 <pvPortMalloc+0x2c4> @ imm = #-0x2
 805a338: e7fe         	b	0x805a338 <pvPortMalloc+0x2c4> @ imm = #-0x4
;     return pvReturn;
 805a33a: 9807         	ldr	r0, [sp, #0x1c]
 805a33c: 9001         	str	r0, [sp, #0x4]
 805a33e: 4805         	ldr	r0, [pc, #0x14]         @ 0x805a354 <pvPortMalloc+0x2e0>
 805a340: 4780         	blx	r0
 805a342: 9801         	ldr	r0, [sp, #0x4]
 805a344: b00c         	add	sp, #0x30
 805a346: bd80         	pop	{r7, pc}

0805a348 <$d.1>:
 805a348: b9 59 05 08  	.word	0x080559b9
 805a34c: 71 a3 05 08  	.word	0x0805a371
 805a350: 29 5b 05 08  	.word	0x08055b29
 805a354: 21 05 06 08  	.word	0x08060521
 805a358: 55 ec 05 08  	.word	0x0805ec55
 805a35c: 55 ec 05 08  	.word	0x0805ec55
 805a360: 55 ec 05 08  	.word	0x0805ec55
 805a364: 55 ec 05 08  	.word	0x0805ec55
 805a368: 55 ec 05 08  	.word	0x0805ec55
 805a36c: 55 ec 05 08  	.word	0x0805ec55

0805a370 <prvHeapInit>:
; {
 805a370: b580         	push	{r7, lr}
 805a372: 466f         	mov	r7, sp
 805a374: b084         	sub	sp, #0x10
 805a376: f643 5140    	movw	r1, #0x3d40
 805a37a: f2c2 0100    	movt	r1, #0x2000
 805a37e: 6808         	ldr	r0, [r1]
 805a380: f642 5240    	movw	r2, #0x2d40
 805a384: f2c2 0200    	movt	r2, #0x2000
 805a388: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805a38c: 3001         	adds	r0, #0x1
 805a38e: 6008         	str	r0, [r1]
 805a390: f44f 5000    	mov.w	r0, #0x2000
;     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 805a394: 9000         	str	r0, [sp]
;     uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 805a396: f240 302c    	movw	r0, #0x32c
 805a39a: f2c2 0000    	movt	r0, #0x2000
 805a39e: 9002         	str	r0, [sp, #0x8]
;     if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 805a3a0: f89d 0008    	ldrb.w	r0, [sp, #0x8]
 805a3a4: 0740         	lsls	r0, r0, #0x1d
 805a3a6: b188         	cbz	r0, 0x805a3cc <prvHeapInit+0x5c> @ imm = #0x22
 805a3a8: e7ff         	b	0x805a3aa <prvHeapInit+0x3a> @ imm = #-0x2
;         uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 805a3aa: 9802         	ldr	r0, [sp, #0x8]
 805a3ac: 3007         	adds	r0, #0x7
 805a3ae: 9002         	str	r0, [sp, #0x8]
;         uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 805a3b0: 9802         	ldr	r0, [sp, #0x8]
 805a3b2: f020 0007    	bic	r0, r0, #0x7
 805a3b6: 9002         	str	r0, [sp, #0x8]
;         xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 805a3b8: 9a02         	ldr	r2, [sp, #0x8]
 805a3ba: f240 312c    	movw	r1, #0x32c
 805a3be: f2c2 0100    	movt	r1, #0x2000
 805a3c2: 9800         	ldr	r0, [sp]
 805a3c4: 1a89         	subs	r1, r1, r2
 805a3c6: 4408         	add	r0, r1
 805a3c8: 9000         	str	r0, [sp]
;     }
 805a3ca: e7ff         	b	0x805a3cc <prvHeapInit+0x5c> @ imm = #-0x2
;     xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 805a3cc: 9902         	ldr	r1, [sp, #0x8]
 805a3ce: f240 3024    	movw	r0, #0x324
 805a3d2: f2c2 0000    	movt	r0, #0x2000
 805a3d6: 6001         	str	r1, [r0]
 805a3d8: 2100         	movs	r1, #0x0
;     xStart.xBlockSize = ( size_t ) 0;
 805a3da: 6041         	str	r1, [r0, #0x4]
;     uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 805a3dc: 9802         	ldr	r0, [sp, #0x8]
 805a3de: 9a00         	ldr	r2, [sp]
 805a3e0: 4410         	add	r0, r2
 805a3e2: 9001         	str	r0, [sp, #0x4]
;     uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 805a3e4: 9801         	ldr	r0, [sp, #0x4]
 805a3e6: 3808         	subs	r0, #0x8
 805a3e8: 9001         	str	r0, [sp, #0x4]
;     uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 805a3ea: 9801         	ldr	r0, [sp, #0x4]
 805a3ec: f020 0007    	bic	r0, r0, #0x7
 805a3f0: 9001         	str	r0, [sp, #0x4]
;     pxEnd = ( BlockLink_t * ) uxEndAddress;
 805a3f2: 9a01         	ldr	r2, [sp, #0x4]
 805a3f4: f240 301c    	movw	r0, #0x31c
 805a3f8: f2c2 0000    	movt	r0, #0x2000
 805a3fc: 6002         	str	r2, [r0]
;     pxEnd->xBlockSize = 0;
 805a3fe: 6802         	ldr	r2, [r0]
 805a400: 6051         	str	r1, [r2, #0x4]
;     pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 805a402: 6802         	ldr	r2, [r0]
 805a404: 6011         	str	r1, [r2]
;     pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 805a406: 9902         	ldr	r1, [sp, #0x8]
 805a408: 9103         	str	r1, [sp, #0xc]
;     pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 805a40a: 9901         	ldr	r1, [sp, #0x4]
 805a40c: 9a03         	ldr	r2, [sp, #0xc]
 805a40e: 1a89         	subs	r1, r1, r2
 805a410: 6051         	str	r1, [r2, #0x4]
;     pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 805a412: 6800         	ldr	r0, [r0]
 805a414: 9903         	ldr	r1, [sp, #0xc]
 805a416: 6008         	str	r0, [r1]
;     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 805a418: 9803         	ldr	r0, [sp, #0xc]
 805a41a: 6840         	ldr	r0, [r0, #0x4]
 805a41c: f242 312c    	movw	r1, #0x232c
 805a420: f2c2 0100    	movt	r1, #0x2000
 805a424: 6008         	str	r0, [r1]
;     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 805a426: 9803         	ldr	r0, [sp, #0xc]
 805a428: 6840         	ldr	r0, [r0, #0x4]
 805a42a: f240 3120    	movw	r1, #0x320
 805a42e: f2c2 0100    	movt	r1, #0x2000
 805a432: 6008         	str	r0, [r1]
; }
 805a434: 4801         	ldr	r0, [pc, #0x4]          @ 0x805a43c <prvHeapInit+0xcc>
 805a436: 4780         	blx	r0
 805a438: b004         	add	sp, #0x10
 805a43a: bd80         	pop	{r7, pc}

0805a43c <$d.3>:
 805a43c: 21 05 06 08  	.word	0x08060521

0805a440 <vPortFree>:
; {
 805a440: b580         	push	{r7, lr}
 805a442: 466f         	mov	r7, sp
 805a444: b084         	sub	sp, #0x10
 805a446: f643 5240    	movw	r2, #0x3d40
 805a44a: f2c2 0200    	movt	r2, #0x2000
 805a44e: 6811         	ldr	r1, [r2]
 805a450: f642 5340    	movw	r3, #0x2d40
 805a454: f2c2 0300    	movt	r3, #0x2000
 805a458: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805a45c: 3101         	adds	r1, #0x1
 805a45e: 6011         	str	r1, [r2]
 805a460: 9003         	str	r0, [sp, #0xc]
;     uint8_t * puc = ( uint8_t * ) pv;
 805a462: 9803         	ldr	r0, [sp, #0xc]
 805a464: 9002         	str	r0, [sp, #0x8]
;     if( pv != NULL )
 805a466: 9803         	ldr	r0, [sp, #0xc]
 805a468: 2800         	cmp	r0, #0x0
 805a46a: d064         	beq	0x805a536 <vPortFree+0xf6> @ imm = #0xc8
 805a46c: e7ff         	b	0x805a46e <vPortFree+0x2e> @ imm = #-0x2
;         puc -= xHeapStructSize;
 805a46e: 9802         	ldr	r0, [sp, #0x8]
 805a470: 3808         	subs	r0, #0x8
 805a472: 9002         	str	r0, [sp, #0x8]
;         pxLink = ( void * ) puc;
 805a474: 9802         	ldr	r0, [sp, #0x8]
 805a476: 9001         	str	r0, [sp, #0x4]
;         heapVALIDATE_BLOCK_POINTER( pxLink );
 805a478: 9901         	ldr	r1, [sp, #0x4]
 805a47a: 2000         	movs	r0, #0x0
 805a47c: f240 322c    	movw	r2, #0x32c
 805a480: f2c2 0200    	movt	r2, #0x2000
 805a484: 4291         	cmp	r1, r2
 805a486: 9000         	str	r0, [sp]
 805a488: d30e         	blo	0x805a4a8 <vPortFree+0x68> @ imm = #0x1c
 805a48a: e7ff         	b	0x805a48c <vPortFree+0x4c> @ imm = #-0x2
 805a48c: 9901         	ldr	r1, [sp, #0x4]
 805a48e: f240 302c    	movw	r0, #0x32c
 805a492: f2c2 0000    	movt	r0, #0x2000
 805a496: f641 72ff    	movw	r2, #0x1fff
 805a49a: 4402         	add	r2, r0
 805a49c: 2000         	movs	r0, #0x0
 805a49e: 4291         	cmp	r1, r2
 805a4a0: bf98         	it	ls
 805a4a2: 2001         	movls	r0, #0x1
 805a4a4: 9000         	str	r0, [sp]
 805a4a6: e7ff         	b	0x805a4a8 <vPortFree+0x68> @ imm = #-0x2
 805a4a8: 9800         	ldr	r0, [sp]
;         heapVALIDATE_BLOCK_POINTER( pxLink );
 805a4aa: 07c0         	lsls	r0, r0, #0x1f
 805a4ac: b920         	cbnz	r0, 0x805a4b8 <vPortFree+0x78> @ imm = #0x8
 805a4ae: e7ff         	b	0x805a4b0 <vPortFree+0x70> @ imm = #-0x2
 805a4b0: 4829         	ldr	r0, [pc, #0xa4]         @ 0x805a558 <vPortFree+0x118>
 805a4b2: 4780         	blx	r0
 805a4b4: e7ff         	b	0x805a4b6 <vPortFree+0x76> @ imm = #-0x2
 805a4b6: e7fe         	b	0x805a4b6 <vPortFree+0x76> @ imm = #-0x4
;         configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 805a4b8: 9801         	ldr	r0, [sp, #0x4]
 805a4ba: 79c1         	ldrb	r1, [r0, #0x7]
 805a4bc: 2000         	movs	r0, #0x0
 805a4be: ebb0 1fd1    	cmp.w	r0, r1, lsr #7
 805a4c2: d104         	bne	0x805a4ce <vPortFree+0x8e> @ imm = #0x8
 805a4c4: e7ff         	b	0x805a4c6 <vPortFree+0x86> @ imm = #-0x2
 805a4c6: 4823         	ldr	r0, [pc, #0x8c]         @ 0x805a554 <vPortFree+0x114>
 805a4c8: 4780         	blx	r0
 805a4ca: e7ff         	b	0x805a4cc <vPortFree+0x8c> @ imm = #-0x2
 805a4cc: e7fe         	b	0x805a4cc <vPortFree+0x8c> @ imm = #-0x4
;         configASSERT( pxLink->pxNextFreeBlock == NULL );
 805a4ce: 9801         	ldr	r0, [sp, #0x4]
 805a4d0: 6800         	ldr	r0, [r0]
 805a4d2: b120         	cbz	r0, 0x805a4de <vPortFree+0x9e> @ imm = #0x8
 805a4d4: e7ff         	b	0x805a4d6 <vPortFree+0x96> @ imm = #-0x2
 805a4d6: 481e         	ldr	r0, [pc, #0x78]         @ 0x805a550 <vPortFree+0x110>
 805a4d8: 4780         	blx	r0
 805a4da: e7ff         	b	0x805a4dc <vPortFree+0x9c> @ imm = #-0x2
 805a4dc: e7fe         	b	0x805a4dc <vPortFree+0x9c> @ imm = #-0x4
;         if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 805a4de: 9801         	ldr	r0, [sp, #0x4]
 805a4e0: 79c1         	ldrb	r1, [r0, #0x7]
 805a4e2: 2000         	movs	r0, #0x0
 805a4e4: ebb0 1fd1    	cmp.w	r0, r1, lsr #7
 805a4e8: d023         	beq	0x805a532 <vPortFree+0xf2> @ imm = #0x46
 805a4ea: e7ff         	b	0x805a4ec <vPortFree+0xac> @ imm = #-0x2
;             if( pxLink->pxNextFreeBlock == NULL )
 805a4ec: 9801         	ldr	r0, [sp, #0x4]
 805a4ee: 6800         	ldr	r0, [r0]
 805a4f0: b9e8         	cbnz	r0, 0x805a52e <vPortFree+0xee> @ imm = #0x3a
 805a4f2: e7ff         	b	0x805a4f4 <vPortFree+0xb4> @ imm = #-0x2
;                 heapFREE_BLOCK( pxLink );
 805a4f4: 9901         	ldr	r1, [sp, #0x4]
 805a4f6: 6848         	ldr	r0, [r1, #0x4]
 805a4f8: f020 4000    	bic	r0, r0, #0x80000000
 805a4fc: 6048         	str	r0, [r1, #0x4]
;                 vTaskSuspendAll();
 805a4fe: 4810         	ldr	r0, [pc, #0x40]         @ 0x805a540 <vPortFree+0x100>
 805a500: 4780         	blx	r0
;                     xFreeBytesRemaining += pxLink->xBlockSize;
 805a502: 9801         	ldr	r0, [sp, #0x4]
 805a504: 6842         	ldr	r2, [r0, #0x4]
 805a506: f240 3120    	movw	r1, #0x320
 805a50a: f2c2 0100    	movt	r1, #0x2000
 805a50e: 6808         	ldr	r0, [r1]
 805a510: 4410         	add	r0, r2
 805a512: 6008         	str	r0, [r1]
;                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 805a514: 9801         	ldr	r0, [sp, #0x4]
 805a516: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805a544 <vPortFree+0x104>
 805a518: 4788         	blx	r1
;                     xNumberOfSuccessfulFrees++;
 805a51a: f242 3134    	movw	r1, #0x2334
 805a51e: f2c2 0100    	movt	r1, #0x2000
 805a522: 6808         	ldr	r0, [r1]
 805a524: 3001         	adds	r0, #0x1
 805a526: 6008         	str	r0, [r1]
;                 ( void ) xTaskResumeAll();
 805a528: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805a548 <vPortFree+0x108>
 805a52a: 4780         	blx	r0
;             }
 805a52c: e000         	b	0x805a530 <vPortFree+0xf0> @ imm = #0x0
 805a52e: e7ff         	b	0x805a530 <vPortFree+0xf0> @ imm = #-0x2
;         }
 805a530: e000         	b	0x805a534 <vPortFree+0xf4> @ imm = #0x0
 805a532: e7ff         	b	0x805a534 <vPortFree+0xf4> @ imm = #-0x2
;     }
 805a534: e7ff         	b	0x805a536 <vPortFree+0xf6> @ imm = #-0x2
; }
 805a536: 4805         	ldr	r0, [pc, #0x14]         @ 0x805a54c <vPortFree+0x10c>
 805a538: 4780         	blx	r0
 805a53a: b004         	add	sp, #0x10
 805a53c: bd80         	pop	{r7, pc}
 805a53e: bf00         	nop

0805a540 <$d.5>:
 805a540: b9 59 05 08  	.word	0x080559b9
 805a544: 5d a5 05 08  	.word	0x0805a55d
 805a548: 29 5b 05 08  	.word	0x08055b29
 805a54c: 21 05 06 08  	.word	0x08060521
 805a550: 55 ec 05 08  	.word	0x0805ec55
 805a554: 55 ec 05 08  	.word	0x0805ec55
 805a558: 55 ec 05 08  	.word	0x0805ec55

0805a55c <prvInsertBlockIntoFreeList>:
; {
 805a55c: b580         	push	{r7, lr}
 805a55e: 466f         	mov	r7, sp
 805a560: b084         	sub	sp, #0x10
 805a562: f643 5240    	movw	r2, #0x3d40
 805a566: f2c2 0200    	movt	r2, #0x2000
 805a56a: 6811         	ldr	r1, [r2]
 805a56c: f642 5340    	movw	r3, #0x2d40
 805a570: f2c2 0300    	movt	r3, #0x2000
 805a574: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805a578: 3101         	adds	r1, #0x1
 805a57a: 6011         	str	r1, [r2]
 805a57c: 9003         	str	r0, [sp, #0xc]
;     for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 805a57e: f240 3024    	movw	r0, #0x324
 805a582: f2c2 0000    	movt	r0, #0x2000
 805a586: 9002         	str	r0, [sp, #0x8]
 805a588: e7ff         	b	0x805a58a <prvInsertBlockIntoFreeList+0x2e> @ imm = #-0x2
 805a58a: 9802         	ldr	r0, [sp, #0x8]
 805a58c: 6800         	ldr	r0, [r0]
 805a58e: 9903         	ldr	r1, [sp, #0xc]
 805a590: 4288         	cmp	r0, r1
 805a592: d205         	bhs	0x805a5a0 <prvInsertBlockIntoFreeList+0x44> @ imm = #0xa
 805a594: e7ff         	b	0x805a596 <prvInsertBlockIntoFreeList+0x3a> @ imm = #-0x2
;     }
 805a596: e7ff         	b	0x805a598 <prvInsertBlockIntoFreeList+0x3c> @ imm = #-0x2
;     for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 805a598: 9802         	ldr	r0, [sp, #0x8]
 805a59a: 6800         	ldr	r0, [r0]
 805a59c: 9002         	str	r0, [sp, #0x8]
 805a59e: e7f4         	b	0x805a58a <prvInsertBlockIntoFreeList+0x2e> @ imm = #-0x18
;     if( pxIterator != &xStart )
 805a5a0: 9802         	ldr	r0, [sp, #0x8]
 805a5a2: f240 3124    	movw	r1, #0x324
 805a5a6: f2c2 0100    	movt	r1, #0x2000
 805a5aa: 4288         	cmp	r0, r1
 805a5ac: d021         	beq	0x805a5f2 <prvInsertBlockIntoFreeList+0x96> @ imm = #0x42
 805a5ae: e7ff         	b	0x805a5b0 <prvInsertBlockIntoFreeList+0x54> @ imm = #-0x2
;         heapVALIDATE_BLOCK_POINTER( pxIterator );
 805a5b0: 9902         	ldr	r1, [sp, #0x8]
 805a5b2: 2000         	movs	r0, #0x0
 805a5b4: f240 322c    	movw	r2, #0x32c
 805a5b8: f2c2 0200    	movt	r2, #0x2000
 805a5bc: 4291         	cmp	r1, r2
 805a5be: 9000         	str	r0, [sp]
 805a5c0: d30e         	blo	0x805a5e0 <prvInsertBlockIntoFreeList+0x84> @ imm = #0x1c
 805a5c2: e7ff         	b	0x805a5c4 <prvInsertBlockIntoFreeList+0x68> @ imm = #-0x2
 805a5c4: 9902         	ldr	r1, [sp, #0x8]
 805a5c6: f240 302c    	movw	r0, #0x32c
 805a5ca: f2c2 0000    	movt	r0, #0x2000
 805a5ce: f641 72ff    	movw	r2, #0x1fff
 805a5d2: 4402         	add	r2, r0
 805a5d4: 2000         	movs	r0, #0x0
 805a5d6: 4291         	cmp	r1, r2
 805a5d8: bf98         	it	ls
 805a5da: 2001         	movls	r0, #0x1
 805a5dc: 9000         	str	r0, [sp]
 805a5de: e7ff         	b	0x805a5e0 <prvInsertBlockIntoFreeList+0x84> @ imm = #-0x2
 805a5e0: 9800         	ldr	r0, [sp]
;         heapVALIDATE_BLOCK_POINTER( pxIterator );
 805a5e2: 07c0         	lsls	r0, r0, #0x1f
 805a5e4: b920         	cbnz	r0, 0x805a5f0 <prvInsertBlockIntoFreeList+0x94> @ imm = #0x8
 805a5e6: e7ff         	b	0x805a5e8 <prvInsertBlockIntoFreeList+0x8c> @ imm = #-0x2
 805a5e8: 482c         	ldr	r0, [pc, #0xb0]         @ 0x805a69c <prvInsertBlockIntoFreeList+0x140>
 805a5ea: 4780         	blx	r0
 805a5ec: e7ff         	b	0x805a5ee <prvInsertBlockIntoFreeList+0x92> @ imm = #-0x2
 805a5ee: e7fe         	b	0x805a5ee <prvInsertBlockIntoFreeList+0x92> @ imm = #-0x4
;     }
 805a5f0: e7ff         	b	0x805a5f2 <prvInsertBlockIntoFreeList+0x96> @ imm = #-0x2
;     puc = ( uint8_t * ) pxIterator;
 805a5f2: 9802         	ldr	r0, [sp, #0x8]
 805a5f4: 9001         	str	r0, [sp, #0x4]
;     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 805a5f6: 9801         	ldr	r0, [sp, #0x4]
 805a5f8: 9902         	ldr	r1, [sp, #0x8]
 805a5fa: 6849         	ldr	r1, [r1, #0x4]
 805a5fc: 4408         	add	r0, r1
 805a5fe: 9903         	ldr	r1, [sp, #0xc]
 805a600: 4288         	cmp	r0, r1
 805a602: d109         	bne	0x805a618 <prvInsertBlockIntoFreeList+0xbc> @ imm = #0x12
 805a604: e7ff         	b	0x805a606 <prvInsertBlockIntoFreeList+0xaa> @ imm = #-0x2
;         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 805a606: 9803         	ldr	r0, [sp, #0xc]
 805a608: 6842         	ldr	r2, [r0, #0x4]
 805a60a: 9902         	ldr	r1, [sp, #0x8]
 805a60c: 6848         	ldr	r0, [r1, #0x4]
 805a60e: 4410         	add	r0, r2
 805a610: 6048         	str	r0, [r1, #0x4]
;         pxBlockToInsert = pxIterator;
 805a612: 9802         	ldr	r0, [sp, #0x8]
 805a614: 9003         	str	r0, [sp, #0xc]
;     }
 805a616: e000         	b	0x805a61a <prvInsertBlockIntoFreeList+0xbe> @ imm = #0x0
 805a618: e7ff         	b	0x805a61a <prvInsertBlockIntoFreeList+0xbe> @ imm = #-0x2
;     puc = ( uint8_t * ) pxBlockToInsert;
 805a61a: 9803         	ldr	r0, [sp, #0xc]
 805a61c: 9001         	str	r0, [sp, #0x4]
;     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 805a61e: 9801         	ldr	r0, [sp, #0x4]
 805a620: 9903         	ldr	r1, [sp, #0xc]
 805a622: 6849         	ldr	r1, [r1, #0x4]
 805a624: 4408         	add	r0, r1
 805a626: 9902         	ldr	r1, [sp, #0x8]
 805a628: 6809         	ldr	r1, [r1]
 805a62a: 4288         	cmp	r0, r1
 805a62c: d120         	bne	0x805a670 <prvInsertBlockIntoFreeList+0x114> @ imm = #0x40
 805a62e: e7ff         	b	0x805a630 <prvInsertBlockIntoFreeList+0xd4> @ imm = #-0x2
;         if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 805a630: 9802         	ldr	r0, [sp, #0x8]
 805a632: 6800         	ldr	r0, [r0]
 805a634: f240 311c    	movw	r1, #0x31c
 805a638: f2c2 0100    	movt	r1, #0x2000
 805a63c: 6809         	ldr	r1, [r1]
 805a63e: 4288         	cmp	r0, r1
 805a640: d00d         	beq	0x805a65e <prvInsertBlockIntoFreeList+0x102> @ imm = #0x1a
 805a642: e7ff         	b	0x805a644 <prvInsertBlockIntoFreeList+0xe8> @ imm = #-0x2
;             pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 805a644: 9802         	ldr	r0, [sp, #0x8]
 805a646: 6800         	ldr	r0, [r0]
 805a648: 6842         	ldr	r2, [r0, #0x4]
 805a64a: 9903         	ldr	r1, [sp, #0xc]
 805a64c: 6848         	ldr	r0, [r1, #0x4]
 805a64e: 4410         	add	r0, r2
 805a650: 6048         	str	r0, [r1, #0x4]
;             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 805a652: 9802         	ldr	r0, [sp, #0x8]
 805a654: 6800         	ldr	r0, [r0]
 805a656: 6800         	ldr	r0, [r0]
 805a658: 9903         	ldr	r1, [sp, #0xc]
 805a65a: 6008         	str	r0, [r1]
;         }
 805a65c: e007         	b	0x805a66e <prvInsertBlockIntoFreeList+0x112> @ imm = #0xe
;             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 805a65e: f240 301c    	movw	r0, #0x31c
 805a662: f2c2 0000    	movt	r0, #0x2000
 805a666: 6800         	ldr	r0, [r0]
 805a668: 9903         	ldr	r1, [sp, #0xc]
 805a66a: 6008         	str	r0, [r1]
 805a66c: e7ff         	b	0x805a66e <prvInsertBlockIntoFreeList+0x112> @ imm = #-0x2
;     }
 805a66e: e004         	b	0x805a67a <prvInsertBlockIntoFreeList+0x11e> @ imm = #0x8
;         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 805a670: 9802         	ldr	r0, [sp, #0x8]
 805a672: 6800         	ldr	r0, [r0]
 805a674: 9903         	ldr	r1, [sp, #0xc]
 805a676: 6008         	str	r0, [r1]
 805a678: e7ff         	b	0x805a67a <prvInsertBlockIntoFreeList+0x11e> @ imm = #-0x2
;     if( pxIterator != pxBlockToInsert )
 805a67a: 9802         	ldr	r0, [sp, #0x8]
 805a67c: 9903         	ldr	r1, [sp, #0xc]
 805a67e: 4288         	cmp	r0, r1
 805a680: d004         	beq	0x805a68c <prvInsertBlockIntoFreeList+0x130> @ imm = #0x8
 805a682: e7ff         	b	0x805a684 <prvInsertBlockIntoFreeList+0x128> @ imm = #-0x2
;         pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 805a684: 9803         	ldr	r0, [sp, #0xc]
 805a686: 9902         	ldr	r1, [sp, #0x8]
 805a688: 6008         	str	r0, [r1]
;     }
 805a68a: e000         	b	0x805a68e <prvInsertBlockIntoFreeList+0x132> @ imm = #0x0
 805a68c: e7ff         	b	0x805a68e <prvInsertBlockIntoFreeList+0x132> @ imm = #-0x2
; }
 805a68e: 4802         	ldr	r0, [pc, #0x8]          @ 0x805a698 <prvInsertBlockIntoFreeList+0x13c>
 805a690: 4780         	blx	r0
 805a692: b004         	add	sp, #0x10
 805a694: bd80         	pop	{r7, pc}
 805a696: bf00         	nop

0805a698 <$d.7>:
 805a698: 21 05 06 08  	.word	0x08060521
 805a69c: 55 ec 05 08  	.word	0x0805ec55

0805a6a0 <xPortGetFreeHeapSize>:
; {
 805a6a0: b580         	push	{r7, lr}
 805a6a2: 466f         	mov	r7, sp
 805a6a4: b082         	sub	sp, #0x8
;     return xFreeBytesRemaining;
 805a6a6: f643 5140    	movw	r1, #0x3d40
 805a6aa: f2c2 0100    	movt	r1, #0x2000
 805a6ae: 6808         	ldr	r0, [r1]
 805a6b0: f642 5240    	movw	r2, #0x2d40
 805a6b4: f2c2 0200    	movt	r2, #0x2000
 805a6b8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805a6bc: 3001         	adds	r0, #0x1
 805a6be: 6008         	str	r0, [r1]
 805a6c0: f240 3020    	movw	r0, #0x320
 805a6c4: f2c2 0000    	movt	r0, #0x2000
 805a6c8: 6800         	ldr	r0, [r0]
 805a6ca: 9001         	str	r0, [sp, #0x4]
 805a6cc: 4802         	ldr	r0, [pc, #0x8]          @ 0x805a6d8 <xPortGetFreeHeapSize+0x38>
 805a6ce: 4780         	blx	r0
 805a6d0: 9801         	ldr	r0, [sp, #0x4]
 805a6d2: b002         	add	sp, #0x8
 805a6d4: bd80         	pop	{r7, pc}
 805a6d6: bf00         	nop

0805a6d8 <$d.9>:
 805a6d8: 21 05 06 08  	.word	0x08060521

0805a6dc <xPortGetMinimumEverFreeHeapSize>:
; {
 805a6dc: b580         	push	{r7, lr}
 805a6de: 466f         	mov	r7, sp
 805a6e0: b082         	sub	sp, #0x8
;     return xMinimumEverFreeBytesRemaining;
 805a6e2: f643 5140    	movw	r1, #0x3d40
 805a6e6: f2c2 0100    	movt	r1, #0x2000
 805a6ea: 6808         	ldr	r0, [r1]
 805a6ec: f642 5240    	movw	r2, #0x2d40
 805a6f0: f2c2 0200    	movt	r2, #0x2000
 805a6f4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805a6f8: 3001         	adds	r0, #0x1
 805a6fa: 6008         	str	r0, [r1]
 805a6fc: f242 302c    	movw	r0, #0x232c
 805a700: f2c2 0000    	movt	r0, #0x2000
 805a704: 6800         	ldr	r0, [r0]
 805a706: 9001         	str	r0, [sp, #0x4]
 805a708: 4802         	ldr	r0, [pc, #0x8]          @ 0x805a714 <xPortGetMinimumEverFreeHeapSize+0x38>
 805a70a: 4780         	blx	r0
 805a70c: 9801         	ldr	r0, [sp, #0x4]
 805a70e: b002         	add	sp, #0x8
 805a710: bd80         	pop	{r7, pc}
 805a712: bf00         	nop

0805a714 <$d.11>:
 805a714: 21 05 06 08  	.word	0x08060521

0805a718 <vPortInitialiseBlocks>:
; {
 805a718: b580         	push	{r7, lr}
 805a71a: 466f         	mov	r7, sp
; }
 805a71c: f643 5140    	movw	r1, #0x3d40
 805a720: f2c2 0100    	movt	r1, #0x2000
 805a724: 6808         	ldr	r0, [r1]
 805a726: f642 5240    	movw	r2, #0x2d40
 805a72a: f2c2 0200    	movt	r2, #0x2000
 805a72e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805a732: 3001         	adds	r0, #0x1
 805a734: 6008         	str	r0, [r1]
 805a736: 4801         	ldr	r0, [pc, #0x4]          @ 0x805a73c <vPortInitialiseBlocks+0x24>
 805a738: 4780         	blx	r0
 805a73a: bd80         	pop	{r7, pc}

0805a73c <$d.13>:
 805a73c: 21 05 06 08  	.word	0x08060521

0805a740 <pvPortCalloc>:
; {
 805a740: b580         	push	{r7, lr}
 805a742: 466f         	mov	r7, sp
 805a744: b086         	sub	sp, #0x18
 805a746: f643 5340    	movw	r3, #0x3d40
 805a74a: f2c2 0300    	movt	r3, #0x2000
 805a74e: 681a         	ldr	r2, [r3]
 805a750: f642 5c40    	movw	r12, #0x2d40
 805a754: f2c2 0c00    	movt	r12, #0x2000
 805a758: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805a75c: 3201         	adds	r2, #0x1
 805a75e: 601a         	str	r2, [r3]
 805a760: 9005         	str	r0, [sp, #0x14]
 805a762: 9104         	str	r1, [sp, #0x10]
 805a764: 2000         	movs	r0, #0x0
;     void * pv = NULL;
 805a766: 9003         	str	r0, [sp, #0xc]
;     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 805a768: 9905         	ldr	r1, [sp, #0x14]
 805a76a: 9002         	str	r0, [sp, #0x8]
 805a76c: b161         	cbz	r1, 0x805a788 <pvPortCalloc+0x48> @ imm = #0x18
 805a76e: e7ff         	b	0x805a770 <pvPortCalloc+0x30> @ imm = #-0x2
 805a770: 9904         	ldr	r1, [sp, #0x10]
 805a772: 9a05         	ldr	r2, [sp, #0x14]
 805a774: f04f 30ff    	mov.w	r0, #0xffffffff
 805a778: fbb0 f2f2    	udiv	r2, r0, r2
 805a77c: 2000         	movs	r0, #0x0
 805a77e: 4291         	cmp	r1, r2
 805a780: bf88         	it	hi
 805a782: 2001         	movhi	r0, #0x1
 805a784: 9002         	str	r0, [sp, #0x8]
 805a786: e7ff         	b	0x805a788 <pvPortCalloc+0x48> @ imm = #-0x2
 805a788: 9802         	ldr	r0, [sp, #0x8]
;     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 805a78a: 07c0         	lsls	r0, r0, #0x1f
 805a78c: b990         	cbnz	r0, 0x805a7b4 <pvPortCalloc+0x74> @ imm = #0x24
 805a78e: e7ff         	b	0x805a790 <pvPortCalloc+0x50> @ imm = #-0x2
;         pv = pvPortMalloc( xNum * xSize );
 805a790: 9805         	ldr	r0, [sp, #0x14]
 805a792: 9904         	ldr	r1, [sp, #0x10]
 805a794: 4348         	muls	r0, r1, r0
 805a796: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805a7c4 <pvPortCalloc+0x84>
 805a798: 4788         	blx	r1
 805a79a: 9003         	str	r0, [sp, #0xc]
;         if( pv != NULL )
 805a79c: 9803         	ldr	r0, [sp, #0xc]
 805a79e: b140         	cbz	r0, 0x805a7b2 <pvPortCalloc+0x72> @ imm = #0x10
 805a7a0: e7ff         	b	0x805a7a2 <pvPortCalloc+0x62> @ imm = #-0x2
;             ( void ) memset( pv, 0, xNum * xSize );
 805a7a2: 9803         	ldr	r0, [sp, #0xc]
 805a7a4: 9905         	ldr	r1, [sp, #0x14]
 805a7a6: 9a04         	ldr	r2, [sp, #0x10]
 805a7a8: 434a         	muls	r2, r1, r2
 805a7aa: 4b07         	ldr	r3, [pc, #0x1c]         @ 0x805a7c8 <pvPortCalloc+0x88>
 805a7ac: 2100         	movs	r1, #0x0
 805a7ae: 4798         	blx	r3
;         }
 805a7b0: e7ff         	b	0x805a7b2 <pvPortCalloc+0x72> @ imm = #-0x2
;     }
 805a7b2: e7ff         	b	0x805a7b4 <pvPortCalloc+0x74> @ imm = #-0x2
;     return pv;
 805a7b4: 9803         	ldr	r0, [sp, #0xc]
 805a7b6: 9001         	str	r0, [sp, #0x4]
 805a7b8: 4804         	ldr	r0, [pc, #0x10]         @ 0x805a7cc <pvPortCalloc+0x8c>
 805a7ba: 4780         	blx	r0
 805a7bc: 9801         	ldr	r0, [sp, #0x4]
 805a7be: b006         	add	sp, #0x18
 805a7c0: bd80         	pop	{r7, pc}
 805a7c2: bf00         	nop

0805a7c4 <$d.15>:
 805a7c4: 75 a0 05 08  	.word	0x0805a075
 805a7c8: 75 23 06 08  	.word	0x08062375
 805a7cc: 21 05 06 08  	.word	0x08060521

0805a7d0 <xEventGroupCreate>:
;     {
 805a7d0: b580         	push	{r7, lr}
 805a7d2: 466f         	mov	r7, sp
 805a7d4: b082         	sub	sp, #0x8
 805a7d6: f643 5140    	movw	r1, #0x3d40
 805a7da: f2c2 0100    	movt	r1, #0x2000
 805a7de: 6808         	ldr	r0, [r1]
 805a7e0: f642 5240    	movw	r2, #0x2d40
 805a7e4: f2c2 0200    	movt	r2, #0x2000
 805a7e8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805a7ec: 3001         	adds	r0, #0x1
 805a7ee: 6008         	str	r0, [r1]
;         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 805a7f0: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805a820 <xEventGroupCreate+0x50>
 805a7f2: 201c         	movs	r0, #0x1c
 805a7f4: 4788         	blx	r1
 805a7f6: 9001         	str	r0, [sp, #0x4]
;         if( pxEventBits != NULL )
 805a7f8: 9801         	ldr	r0, [sp, #0x4]
 805a7fa: b140         	cbz	r0, 0x805a80e <xEventGroupCreate+0x3e> @ imm = #0x10
 805a7fc: e7ff         	b	0x805a7fe <xEventGroupCreate+0x2e> @ imm = #-0x2
;             pxEventBits->uxEventBits = 0;
 805a7fe: 9901         	ldr	r1, [sp, #0x4]
 805a800: 2000         	movs	r0, #0x0
 805a802: 6008         	str	r0, [r1]
;             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 805a804: 9801         	ldr	r0, [sp, #0x4]
 805a806: 3004         	adds	r0, #0x4
 805a808: 4906         	ldr	r1, [pc, #0x18]         @ 0x805a824 <xEventGroupCreate+0x54>
 805a80a: 4788         	blx	r1
;         }
 805a80c: e000         	b	0x805a810 <xEventGroupCreate+0x40> @ imm = #0x0
 805a80e: e7ff         	b	0x805a810 <xEventGroupCreate+0x40> @ imm = #-0x2
;         return pxEventBits;
 805a810: 9801         	ldr	r0, [sp, #0x4]
 805a812: 9000         	str	r0, [sp]
 805a814: 4804         	ldr	r0, [pc, #0x10]         @ 0x805a828 <xEventGroupCreate+0x58>
 805a816: 4780         	blx	r0
 805a818: 9800         	ldr	r0, [sp]
 805a81a: b002         	add	sp, #0x8
 805a81c: bd80         	pop	{r7, pc}
 805a81e: bf00         	nop

0805a820 <$d.1>:
 805a820: 75 a0 05 08  	.word	0x0805a075
 805a824: 51 b0 05 08  	.word	0x0805b051
 805a828: 21 05 06 08  	.word	0x08060521

0805a82c <xEventGroupSync>:
; {
 805a82c: b5b0         	push	{r4, r5, r7, lr}
 805a82e: af02         	add	r7, sp, #0x8
 805a830: b08c         	sub	sp, #0x30
 805a832: 4674         	mov	r4, lr
 805a834: f643 5e40    	movw	lr, #0x3d40
 805a838: f2c2 0e00    	movt	lr, #0x2000
 805a83c: f8de c000    	ldr.w	r12, [lr]
 805a840: f642 5540    	movw	r5, #0x2d40
 805a844: f2c2 0500    	movt	r5, #0x2000
 805a848: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805a84c: f10c 0c01    	add.w	r12, r12, #0x1
 805a850: f8ce c000    	str.w	r12, [lr]
 805a854: 900b         	str	r0, [sp, #0x2c]
 805a856: 910a         	str	r1, [sp, #0x28]
 805a858: 9209         	str	r2, [sp, #0x24]
 805a85a: 9308         	str	r3, [sp, #0x20]
;     EventGroup_t * pxEventBits = xEventGroup;
 805a85c: 980b         	ldr	r0, [sp, #0x2c]
 805a85e: 9005         	str	r0, [sp, #0x14]
 805a860: 2000         	movs	r0, #0x0
;     BaseType_t xTimeoutOccurred = pdFALSE;
 805a862: 9003         	str	r0, [sp, #0xc]
;     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 805a864: f89d 0027    	ldrb.w	r0, [sp, #0x27]
 805a868: b120         	cbz	r0, 0x805a874 <xEventGroupSync+0x48> @ imm = #0x8
 805a86a: e7ff         	b	0x805a86c <xEventGroupSync+0x40> @ imm = #-0x2
 805a86c: 4851         	ldr	r0, [pc, #0x144]        @ 0x805a9b4 <xEventGroupSync+0x188>
 805a86e: 4780         	blx	r0
 805a870: e7ff         	b	0x805a872 <xEventGroupSync+0x46> @ imm = #-0x2
 805a872: e7fe         	b	0x805a872 <xEventGroupSync+0x46> @ imm = #-0x4
;     configASSERT( uxBitsToWaitFor != 0 );
 805a874: 9809         	ldr	r0, [sp, #0x24]
 805a876: b920         	cbnz	r0, 0x805a882 <xEventGroupSync+0x56> @ imm = #0x8
 805a878: e7ff         	b	0x805a87a <xEventGroupSync+0x4e> @ imm = #-0x2
 805a87a: 484d         	ldr	r0, [pc, #0x134]        @ 0x805a9b0 <xEventGroupSync+0x184>
 805a87c: 4780         	blx	r0
 805a87e: e7ff         	b	0x805a880 <xEventGroupSync+0x54> @ imm = #-0x2
 805a880: e7fe         	b	0x805a880 <xEventGroupSync+0x54> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a882: 4840         	ldr	r0, [pc, #0x100]        @ 0x805a984 <xEventGroupSync+0x158>
 805a884: 4780         	blx	r0
 805a886: 4601         	mov	r1, r0
 805a888: 2000         	movs	r0, #0x0
 805a88a: 9002         	str	r0, [sp, #0x8]
 805a88c: b931         	cbnz	r1, 0x805a89c <xEventGroupSync+0x70> @ imm = #0xc
 805a88e: e7ff         	b	0x805a890 <xEventGroupSync+0x64> @ imm = #-0x2
 805a890: 9808         	ldr	r0, [sp, #0x20]
 805a892: 2800         	cmp	r0, #0x0
 805a894: bf18         	it	ne
 805a896: 2001         	movne	r0, #0x1
 805a898: 9002         	str	r0, [sp, #0x8]
 805a89a: e7ff         	b	0x805a89c <xEventGroupSync+0x70> @ imm = #-0x2
 805a89c: 9802         	ldr	r0, [sp, #0x8]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a89e: 07c0         	lsls	r0, r0, #0x1f
 805a8a0: b120         	cbz	r0, 0x805a8ac <xEventGroupSync+0x80> @ imm = #0x8
 805a8a2: e7ff         	b	0x805a8a4 <xEventGroupSync+0x78> @ imm = #-0x2
 805a8a4: 4841         	ldr	r0, [pc, #0x104]        @ 0x805a9ac <xEventGroupSync+0x180>
 805a8a6: 4780         	blx	r0
 805a8a8: e7ff         	b	0x805a8aa <xEventGroupSync+0x7e> @ imm = #-0x2
 805a8aa: e7fe         	b	0x805a8aa <xEventGroupSync+0x7e> @ imm = #-0x4
;     vTaskSuspendAll();
 805a8ac: 4836         	ldr	r0, [pc, #0xd8]         @ 0x805a988 <xEventGroupSync+0x15c>
 805a8ae: 4780         	blx	r0
;         uxOriginalBitValue = pxEventBits->uxEventBits;
 805a8b0: 9805         	ldr	r0, [sp, #0x14]
 805a8b2: 6800         	ldr	r0, [r0]
 805a8b4: 9007         	str	r0, [sp, #0x1c]
;         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 805a8b6: 980b         	ldr	r0, [sp, #0x2c]
 805a8b8: 990a         	ldr	r1, [sp, #0x28]
 805a8ba: 4a34         	ldr	r2, [pc, #0xd0]         @ 0x805a98c <xEventGroupSync+0x160>
 805a8bc: 4790         	blx	r2
;         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 805a8be: 9807         	ldr	r0, [sp, #0x1c]
 805a8c0: 990a         	ldr	r1, [sp, #0x28]
 805a8c2: 4308         	orrs	r0, r1
 805a8c4: 9909         	ldr	r1, [sp, #0x24]
 805a8c6: 4008         	ands	r0, r1
 805a8c8: 4288         	cmp	r0, r1
 805a8ca: d10c         	bne	0x805a8e6 <xEventGroupSync+0xba> @ imm = #0x18
 805a8cc: e7ff         	b	0x805a8ce <xEventGroupSync+0xa2> @ imm = #-0x2
;             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 805a8ce: 9807         	ldr	r0, [sp, #0x1c]
 805a8d0: 990a         	ldr	r1, [sp, #0x28]
 805a8d2: 4308         	orrs	r0, r1
 805a8d4: 9006         	str	r0, [sp, #0x18]
;             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 805a8d6: 9a09         	ldr	r2, [sp, #0x24]
 805a8d8: 9905         	ldr	r1, [sp, #0x14]
 805a8da: 6808         	ldr	r0, [r1]
 805a8dc: 4390         	bics	r0, r2
 805a8de: 6008         	str	r0, [r1]
 805a8e0: 2000         	movs	r0, #0x0
;             xTicksToWait = 0;
 805a8e2: 9008         	str	r0, [sp, #0x20]
;         }
 805a8e4: e014         	b	0x805a910 <xEventGroupSync+0xe4> @ imm = #0x28
;             if( xTicksToWait != ( TickType_t ) 0 )
 805a8e6: 9808         	ldr	r0, [sp, #0x20]
 805a8e8: b158         	cbz	r0, 0x805a902 <xEventGroupSync+0xd6> @ imm = #0x16
 805a8ea: e7ff         	b	0x805a8ec <xEventGroupSync+0xc0> @ imm = #-0x2
;                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 805a8ec: 9805         	ldr	r0, [sp, #0x14]
 805a8ee: 3004         	adds	r0, #0x4
 805a8f0: 9909         	ldr	r1, [sp, #0x24]
 805a8f2: f041 61a0    	orr	r1, r1, #0x5000000
 805a8f6: 9a08         	ldr	r2, [sp, #0x20]
 805a8f8: 4b25         	ldr	r3, [pc, #0x94]         @ 0x805a990 <xEventGroupSync+0x164>
 805a8fa: 4798         	blx	r3
 805a8fc: 2000         	movs	r0, #0x0
;                 uxReturn = 0;
 805a8fe: 9006         	str	r0, [sp, #0x18]
;             }
 805a900: e005         	b	0x805a90e <xEventGroupSync+0xe2> @ imm = #0xa
;                 uxReturn = pxEventBits->uxEventBits;
 805a902: 9805         	ldr	r0, [sp, #0x14]
 805a904: 6800         	ldr	r0, [r0]
 805a906: 9006         	str	r0, [sp, #0x18]
 805a908: 2001         	movs	r0, #0x1
;                 xTimeoutOccurred = pdTRUE;
 805a90a: 9003         	str	r0, [sp, #0xc]
 805a90c: e7ff         	b	0x805a90e <xEventGroupSync+0xe2> @ imm = #-0x2
 805a90e: e7ff         	b	0x805a910 <xEventGroupSync+0xe4> @ imm = #-0x2
;     xAlreadyYielded = xTaskResumeAll();
 805a910: 4820         	ldr	r0, [pc, #0x80]         @ 0x805a994 <xEventGroupSync+0x168>
 805a912: 4780         	blx	r0
 805a914: 9004         	str	r0, [sp, #0x10]
;     if( xTicksToWait != ( TickType_t ) 0 )
 805a916: 9808         	ldr	r0, [sp, #0x20]
 805a918: b368         	cbz	r0, 0x805a976 <xEventGroupSync+0x14a> @ imm = #0x5a
 805a91a: e7ff         	b	0x805a91c <xEventGroupSync+0xf0> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 805a91c: 9804         	ldr	r0, [sp, #0x10]
 805a91e: b918         	cbnz	r0, 0x805a928 <xEventGroupSync+0xfc> @ imm = #0x6
 805a920: e7ff         	b	0x805a922 <xEventGroupSync+0xf6> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 805a922: 481d         	ldr	r0, [pc, #0x74]         @ 0x805a998 <xEventGroupSync+0x16c>
 805a924: 4780         	blx	r0
;         }
 805a926: e000         	b	0x805a92a <xEventGroupSync+0xfe> @ imm = #0x0
 805a928: e7ff         	b	0x805a92a <xEventGroupSync+0xfe> @ imm = #-0x2
;         uxReturn = uxTaskResetEventItemValue();
 805a92a: 481c         	ldr	r0, [pc, #0x70]         @ 0x805a99c <xEventGroupSync+0x170>
 805a92c: 4780         	blx	r0
 805a92e: 9006         	str	r0, [sp, #0x18]
;         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 805a930: f89d 001b    	ldrb.w	r0, [sp, #0x1b]
 805a934: 0780         	lsls	r0, r0, #0x1e
 805a936: 2800         	cmp	r0, #0x0
 805a938: d417         	bmi	0x805a96a <xEventGroupSync+0x13e> @ imm = #0x2e
 805a93a: e7ff         	b	0x805a93c <xEventGroupSync+0x110> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805a93c: 4818         	ldr	r0, [pc, #0x60]         @ 0x805a9a0 <xEventGroupSync+0x174>
 805a93e: 4780         	blx	r0
;                 uxReturn = pxEventBits->uxEventBits;
 805a940: 9805         	ldr	r0, [sp, #0x14]
 805a942: 6800         	ldr	r0, [r0]
 805a944: 9006         	str	r0, [sp, #0x18]
;                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 805a946: 9806         	ldr	r0, [sp, #0x18]
 805a948: 9909         	ldr	r1, [sp, #0x24]
 805a94a: 4008         	ands	r0, r1
 805a94c: 4288         	cmp	r0, r1
 805a94e: d106         	bne	0x805a95e <xEventGroupSync+0x132> @ imm = #0xc
 805a950: e7ff         	b	0x805a952 <xEventGroupSync+0x126> @ imm = #-0x2
;                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 805a952: 9a09         	ldr	r2, [sp, #0x24]
 805a954: 9905         	ldr	r1, [sp, #0x14]
 805a956: 6808         	ldr	r0, [r1]
 805a958: 4390         	bics	r0, r2
 805a95a: 6008         	str	r0, [r1]
;                 }
 805a95c: e000         	b	0x805a960 <xEventGroupSync+0x134> @ imm = #0x0
 805a95e: e7ff         	b	0x805a960 <xEventGroupSync+0x134> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 805a960: 4810         	ldr	r0, [pc, #0x40]         @ 0x805a9a4 <xEventGroupSync+0x178>
 805a962: 4780         	blx	r0
 805a964: 2001         	movs	r0, #0x1
;             xTimeoutOccurred = pdTRUE;
 805a966: 9003         	str	r0, [sp, #0xc]
;         }
 805a968: e000         	b	0x805a96c <xEventGroupSync+0x140> @ imm = #0x0
 805a96a: e7ff         	b	0x805a96c <xEventGroupSync+0x140> @ imm = #-0x2
;         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 805a96c: 9806         	ldr	r0, [sp, #0x18]
 805a96e: f020 407f    	bic	r0, r0, #0xff000000
 805a972: 9006         	str	r0, [sp, #0x18]
;     }
 805a974: e7ff         	b	0x805a976 <xEventGroupSync+0x14a> @ imm = #-0x2
;     return uxReturn;
 805a976: 9806         	ldr	r0, [sp, #0x18]
 805a978: 9001         	str	r0, [sp, #0x4]
 805a97a: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805a9a8 <xEventGroupSync+0x17c>
 805a97c: 4780         	blx	r0
 805a97e: 9801         	ldr	r0, [sp, #0x4]
 805a980: b00c         	add	sp, #0x30
 805a982: bdb0         	pop	{r4, r5, r7, pc}

0805a984 <$d.3>:
 805a984: fd 7b 05 08  	.word	0x08057bfd
 805a988: b9 59 05 08  	.word	0x080559b9
 805a98c: b9 a9 05 08  	.word	0x0805a9b9
 805a990: 9d 71 05 08  	.word	0x0805719d
 805a994: 29 5b 05 08  	.word	0x08055b29
 805a998: c5 e0 05 08  	.word	0x0805e0c5
 805a99c: 49 81 05 08  	.word	0x08058149
 805a9a0: 05 e1 05 08  	.word	0x0805e105
 805a9a4: 4d e1 05 08  	.word	0x0805e14d
 805a9a8: 21 05 06 08  	.word	0x08060521
 805a9ac: 55 ec 05 08  	.word	0x0805ec55
 805a9b0: 55 ec 05 08  	.word	0x0805ec55
 805a9b4: 55 ec 05 08  	.word	0x0805ec55

0805a9b8 <xEventGroupSetBits>:
; {
 805a9b8: b580         	push	{r7, lr}
 805a9ba: 466f         	mov	r7, sp
 805a9bc: b08c         	sub	sp, #0x30
 805a9be: f643 5340    	movw	r3, #0x3d40
 805a9c2: f2c2 0300    	movt	r3, #0x2000
 805a9c6: 681a         	ldr	r2, [r3]
 805a9c8: f642 5c40    	movw	r12, #0x2d40
 805a9cc: f2c2 0c00    	movt	r12, #0x2000
 805a9d0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805a9d4: 3201         	adds	r2, #0x1
 805a9d6: 601a         	str	r2, [r3]
 805a9d8: 900b         	str	r0, [sp, #0x2c]
 805a9da: 910a         	str	r1, [sp, #0x28]
 805a9dc: 2000         	movs	r0, #0x0
;     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 805a9de: 9005         	str	r0, [sp, #0x14]
;     EventGroup_t * pxEventBits = xEventGroup;
 805a9e0: 990b         	ldr	r1, [sp, #0x2c]
 805a9e2: 9102         	str	r1, [sp, #0x8]
;     BaseType_t xMatchFound = pdFALSE;
 805a9e4: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xEventGroup );
 805a9e6: 980b         	ldr	r0, [sp, #0x2c]
 805a9e8: b920         	cbnz	r0, 0x805a9f4 <xEventGroupSetBits+0x3c> @ imm = #0x8
 805a9ea: e7ff         	b	0x805a9ec <xEventGroupSetBits+0x34> @ imm = #-0x2
 805a9ec: 4840         	ldr	r0, [pc, #0x100]        @ 0x805aaf0 <xEventGroupSetBits+0x138>
 805a9ee: 4780         	blx	r0
 805a9f0: e7ff         	b	0x805a9f2 <xEventGroupSetBits+0x3a> @ imm = #-0x2
 805a9f2: e7fe         	b	0x805a9f2 <xEventGroupSetBits+0x3a> @ imm = #-0x4
;     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 805a9f4: f89d 002b    	ldrb.w	r0, [sp, #0x2b]
 805a9f8: b120         	cbz	r0, 0x805aa04 <xEventGroupSetBits+0x4c> @ imm = #0x8
 805a9fa: e7ff         	b	0x805a9fc <xEventGroupSetBits+0x44> @ imm = #-0x2
 805a9fc: 483b         	ldr	r0, [pc, #0xec]         @ 0x805aaec <xEventGroupSetBits+0x134>
 805a9fe: 4780         	blx	r0
 805aa00: e7ff         	b	0x805aa02 <xEventGroupSetBits+0x4a> @ imm = #-0x2
 805aa02: e7fe         	b	0x805aa02 <xEventGroupSetBits+0x4a> @ imm = #-0x4
;     pxList = &( pxEventBits->xTasksWaitingForBits );
 805aa04: 9802         	ldr	r0, [sp, #0x8]
 805aa06: 3004         	adds	r0, #0x4
 805aa08: 9006         	str	r0, [sp, #0x18]
;     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 805aa0a: 9806         	ldr	r0, [sp, #0x18]
 805aa0c: 3008         	adds	r0, #0x8
 805aa0e: 9007         	str	r0, [sp, #0x1c]
;     vTaskSuspendAll();
 805aa10: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805aadc <xEventGroupSetBits+0x124>
 805aa12: 4780         	blx	r0
;         pxListItem = listGET_HEAD_ENTRY( pxList );
 805aa14: 9806         	ldr	r0, [sp, #0x18]
 805aa16: 68c0         	ldr	r0, [r0, #0xc]
 805aa18: 9009         	str	r0, [sp, #0x24]
;         pxEventBits->uxEventBits |= uxBitsToSet;
 805aa1a: 9a0a         	ldr	r2, [sp, #0x28]
 805aa1c: 9902         	ldr	r1, [sp, #0x8]
 805aa1e: 6808         	ldr	r0, [r1]
 805aa20: 4310         	orrs	r0, r2
 805aa22: 6008         	str	r0, [r1]
;         while( pxListItem != pxListEnd )
 805aa24: e7ff         	b	0x805aa26 <xEventGroupSetBits+0x6e> @ imm = #-0x2
 805aa26: 9809         	ldr	r0, [sp, #0x24]
 805aa28: 9907         	ldr	r1, [sp, #0x1c]
 805aa2a: 4288         	cmp	r0, r1
 805aa2c: d046         	beq	0x805aabc <xEventGroupSetBits+0x104> @ imm = #0x8c
 805aa2e: e7ff         	b	0x805aa30 <xEventGroupSetBits+0x78> @ imm = #-0x2
;             pxNext = listGET_NEXT( pxListItem );
 805aa30: 9809         	ldr	r0, [sp, #0x24]
 805aa32: 6840         	ldr	r0, [r0, #0x4]
 805aa34: 9008         	str	r0, [sp, #0x20]
;             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 805aa36: 9809         	ldr	r0, [sp, #0x24]
 805aa38: 6800         	ldr	r0, [r0]
 805aa3a: 9004         	str	r0, [sp, #0x10]
 805aa3c: 2000         	movs	r0, #0x0
;             xMatchFound = pdFALSE;
 805aa3e: 9001         	str	r0, [sp, #0x4]
;             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 805aa40: f89d 0013    	ldrb.w	r0, [sp, #0x13]
 805aa44: 0600         	lsls	r0, r0, #0x18
 805aa46: 9003         	str	r0, [sp, #0xc]
;             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 805aa48: 9804         	ldr	r0, [sp, #0x10]
 805aa4a: f020 407f    	bic	r0, r0, #0xff000000
 805aa4e: 9004         	str	r0, [sp, #0x10]
;             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 805aa50: f89d 000f    	ldrb.w	r0, [sp, #0xf]
 805aa54: 0740         	lsls	r0, r0, #0x1d
 805aa56: 2800         	cmp	r0, #0x0
 805aa58: d40b         	bmi	0x805aa72 <xEventGroupSetBits+0xba> @ imm = #0x16
 805aa5a: e7ff         	b	0x805aa5c <xEventGroupSetBits+0xa4> @ imm = #-0x2
;                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 805aa5c: 9804         	ldr	r0, [sp, #0x10]
 805aa5e: 9902         	ldr	r1, [sp, #0x8]
 805aa60: 6809         	ldr	r1, [r1]
 805aa62: 4208         	tst	r0, r1
 805aa64: d003         	beq	0x805aa6e <xEventGroupSetBits+0xb6> @ imm = #0x6
 805aa66: e7ff         	b	0x805aa68 <xEventGroupSetBits+0xb0> @ imm = #-0x2
 805aa68: 2001         	movs	r0, #0x1
;                     xMatchFound = pdTRUE;
 805aa6a: 9001         	str	r0, [sp, #0x4]
;                 }
 805aa6c: e000         	b	0x805aa70 <xEventGroupSetBits+0xb8> @ imm = #0x0
 805aa6e: e7ff         	b	0x805aa70 <xEventGroupSetBits+0xb8> @ imm = #-0x2
;             }
 805aa70: e00b         	b	0x805aa8a <xEventGroupSetBits+0xd2> @ imm = #0x16
;             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 805aa72: 9904         	ldr	r1, [sp, #0x10]
 805aa74: 9802         	ldr	r0, [sp, #0x8]
 805aa76: 6800         	ldr	r0, [r0]
 805aa78: 4008         	ands	r0, r1
 805aa7a: 4288         	cmp	r0, r1
 805aa7c: d103         	bne	0x805aa86 <xEventGroupSetBits+0xce> @ imm = #0x6
 805aa7e: e7ff         	b	0x805aa80 <xEventGroupSetBits+0xc8> @ imm = #-0x2
 805aa80: 2001         	movs	r0, #0x1
;                 xMatchFound = pdTRUE;
 805aa82: 9001         	str	r0, [sp, #0x4]
;             }
 805aa84: e000         	b	0x805aa88 <xEventGroupSetBits+0xd0> @ imm = #0x0
 805aa86: e7ff         	b	0x805aa88 <xEventGroupSetBits+0xd0> @ imm = #-0x2
 805aa88: e7ff         	b	0x805aa8a <xEventGroupSetBits+0xd2> @ imm = #-0x2
;             if( xMatchFound != pdFALSE )
 805aa8a: 9801         	ldr	r0, [sp, #0x4]
 805aa8c: b198         	cbz	r0, 0x805aab6 <xEventGroupSetBits+0xfe> @ imm = #0x26
 805aa8e: e7ff         	b	0x805aa90 <xEventGroupSetBits+0xd8> @ imm = #-0x2
;                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 805aa90: f89d 000f    	ldrb.w	r0, [sp, #0xf]
 805aa94: 07c0         	lsls	r0, r0, #0x1f
 805aa96: b128         	cbz	r0, 0x805aaa4 <xEventGroupSetBits+0xec> @ imm = #0xa
 805aa98: e7ff         	b	0x805aa9a <xEventGroupSetBits+0xe2> @ imm = #-0x2
;                     uxBitsToClear |= uxBitsWaitedFor;
 805aa9a: 9904         	ldr	r1, [sp, #0x10]
 805aa9c: 9805         	ldr	r0, [sp, #0x14]
 805aa9e: 4308         	orrs	r0, r1
 805aaa0: 9005         	str	r0, [sp, #0x14]
;                 }
 805aaa2: e000         	b	0x805aaa6 <xEventGroupSetBits+0xee> @ imm = #0x0
 805aaa4: e7ff         	b	0x805aaa6 <xEventGroupSetBits+0xee> @ imm = #-0x2
;                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 805aaa6: 9809         	ldr	r0, [sp, #0x24]
 805aaa8: 9902         	ldr	r1, [sp, #0x8]
 805aaaa: 6809         	ldr	r1, [r1]
 805aaac: f041 7100    	orr	r1, r1, #0x2000000
 805aab0: 4a0d         	ldr	r2, [pc, #0x34]         @ 0x805aae8 <xEventGroupSetBits+0x130>
 805aab2: 4790         	blx	r2
;             }
 805aab4: e7ff         	b	0x805aab6 <xEventGroupSetBits+0xfe> @ imm = #-0x2
;             pxListItem = pxNext;
 805aab6: 9808         	ldr	r0, [sp, #0x20]
 805aab8: 9009         	str	r0, [sp, #0x24]
;         while( pxListItem != pxListEnd )
 805aaba: e7b4         	b	0x805aa26 <xEventGroupSetBits+0x6e> @ imm = #-0x98
;         pxEventBits->uxEventBits &= ~uxBitsToClear;
 805aabc: 9a05         	ldr	r2, [sp, #0x14]
 805aabe: 9902         	ldr	r1, [sp, #0x8]
 805aac0: 6808         	ldr	r0, [r1]
 805aac2: 4390         	bics	r0, r2
 805aac4: 6008         	str	r0, [r1]
;     ( void ) xTaskResumeAll();
 805aac6: 4806         	ldr	r0, [pc, #0x18]         @ 0x805aae0 <xEventGroupSetBits+0x128>
 805aac8: 4780         	blx	r0
;     return pxEventBits->uxEventBits;
 805aaca: 9802         	ldr	r0, [sp, #0x8]
 805aacc: 6800         	ldr	r0, [r0]
 805aace: 9000         	str	r0, [sp]
 805aad0: 4804         	ldr	r0, [pc, #0x10]         @ 0x805aae4 <xEventGroupSetBits+0x12c>
 805aad2: 4780         	blx	r0
 805aad4: 9800         	ldr	r0, [sp]
 805aad6: b00c         	add	sp, #0x30
 805aad8: bd80         	pop	{r7, pc}
 805aada: bf00         	nop

0805aadc <$d.5>:
 805aadc: b9 59 05 08  	.word	0x080559b9
 805aae0: 29 5b 05 08  	.word	0x08055b29
 805aae4: 21 05 06 08  	.word	0x08060521
 805aae8: 15 75 05 08  	.word	0x08057515
 805aaec: 55 ec 05 08  	.word	0x0805ec55
 805aaf0: 55 ec 05 08  	.word	0x0805ec55

0805aaf4 <xEventGroupWaitBits>:
; {
 805aaf4: b5b0         	push	{r4, r5, r7, lr}
 805aaf6: af02         	add	r7, sp, #0x8
 805aaf8: b08e         	sub	sp, #0x38
 805aafa: 4674         	mov	r4, lr
 805aafc: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805ab00: f643 5e40    	movw	lr, #0x3d40
 805ab04: f2c2 0e00    	movt	lr, #0x2000
 805ab08: f8de c000    	ldr.w	r12, [lr]
 805ab0c: f642 5540    	movw	r5, #0x2d40
 805ab10: f2c2 0500    	movt	r5, #0x2000
 805ab14: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805ab18: f10c 0c01    	add.w	r12, r12, #0x1
 805ab1c: f8ce c000    	str.w	r12, [lr]
 805ab20: 900d         	str	r0, [sp, #0x34]
 805ab22: 910c         	str	r1, [sp, #0x30]
 805ab24: 920b         	str	r2, [sp, #0x2c]
 805ab26: 930a         	str	r3, [sp, #0x28]
;     EventGroup_t * pxEventBits = xEventGroup;
 805ab28: 980d         	ldr	r0, [sp, #0x34]
 805ab2a: 9009         	str	r0, [sp, #0x24]
 805ab2c: 2000         	movs	r0, #0x0
;     EventBits_t uxReturn, uxControlBits = 0;
 805ab2e: 9007         	str	r0, [sp, #0x1c]
;     BaseType_t xTimeoutOccurred = pdFALSE;
 805ab30: 9004         	str	r0, [sp, #0x10]
;     configASSERT( xEventGroup );
 805ab32: 980d         	ldr	r0, [sp, #0x34]
 805ab34: b920         	cbnz	r0, 0x805ab40 <xEventGroupWaitBits+0x4c> @ imm = #0x8
 805ab36: e7ff         	b	0x805ab38 <xEventGroupWaitBits+0x44> @ imm = #-0x2
 805ab38: 4863         	ldr	r0, [pc, #0x18c]        @ 0x805acc8 <xEventGroupWaitBits+0x1d4>
 805ab3a: 4780         	blx	r0
 805ab3c: e7ff         	b	0x805ab3e <xEventGroupWaitBits+0x4a> @ imm = #-0x2
 805ab3e: e7fe         	b	0x805ab3e <xEventGroupWaitBits+0x4a> @ imm = #-0x4
;     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 805ab40: f89d 0033    	ldrb.w	r0, [sp, #0x33]
 805ab44: b120         	cbz	r0, 0x805ab50 <xEventGroupWaitBits+0x5c> @ imm = #0x8
 805ab46: e7ff         	b	0x805ab48 <xEventGroupWaitBits+0x54> @ imm = #-0x2
 805ab48: 485e         	ldr	r0, [pc, #0x178]        @ 0x805acc4 <xEventGroupWaitBits+0x1d0>
 805ab4a: 4780         	blx	r0
 805ab4c: e7ff         	b	0x805ab4e <xEventGroupWaitBits+0x5a> @ imm = #-0x2
 805ab4e: e7fe         	b	0x805ab4e <xEventGroupWaitBits+0x5a> @ imm = #-0x4
;     configASSERT( uxBitsToWaitFor != 0 );
 805ab50: 980c         	ldr	r0, [sp, #0x30]
 805ab52: b920         	cbnz	r0, 0x805ab5e <xEventGroupWaitBits+0x6a> @ imm = #0x8
 805ab54: e7ff         	b	0x805ab56 <xEventGroupWaitBits+0x62> @ imm = #-0x2
 805ab56: 485a         	ldr	r0, [pc, #0x168]        @ 0x805acc0 <xEventGroupWaitBits+0x1cc>
 805ab58: 4780         	blx	r0
 805ab5a: e7ff         	b	0x805ab5c <xEventGroupWaitBits+0x68> @ imm = #-0x2
 805ab5c: e7fe         	b	0x805ab5c <xEventGroupWaitBits+0x68> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805ab5e: 484c         	ldr	r0, [pc, #0x130]        @ 0x805ac90 <xEventGroupWaitBits+0x19c>
 805ab60: 4780         	blx	r0
 805ab62: 4601         	mov	r1, r0
 805ab64: 2000         	movs	r0, #0x0
 805ab66: 9002         	str	r0, [sp, #0x8]
 805ab68: b931         	cbnz	r1, 0x805ab78 <xEventGroupWaitBits+0x84> @ imm = #0xc
 805ab6a: e7ff         	b	0x805ab6c <xEventGroupWaitBits+0x78> @ imm = #-0x2
 805ab6c: 68b8         	ldr	r0, [r7, #0x8]
 805ab6e: 2800         	cmp	r0, #0x0
 805ab70: bf18         	it	ne
 805ab72: 2001         	movne	r0, #0x1
 805ab74: 9002         	str	r0, [sp, #0x8]
 805ab76: e7ff         	b	0x805ab78 <xEventGroupWaitBits+0x84> @ imm = #-0x2
 805ab78: 9802         	ldr	r0, [sp, #0x8]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805ab7a: 07c0         	lsls	r0, r0, #0x1f
 805ab7c: b120         	cbz	r0, 0x805ab88 <xEventGroupWaitBits+0x94> @ imm = #0x8
 805ab7e: e7ff         	b	0x805ab80 <xEventGroupWaitBits+0x8c> @ imm = #-0x2
 805ab80: 484e         	ldr	r0, [pc, #0x138]        @ 0x805acbc <xEventGroupWaitBits+0x1c8>
 805ab82: 4780         	blx	r0
 805ab84: e7ff         	b	0x805ab86 <xEventGroupWaitBits+0x92> @ imm = #-0x2
 805ab86: e7fe         	b	0x805ab86 <xEventGroupWaitBits+0x92> @ imm = #-0x4
;     vTaskSuspendAll();
 805ab88: 4842         	ldr	r0, [pc, #0x108]        @ 0x805ac94 <xEventGroupWaitBits+0x1a0>
 805ab8a: 4780         	blx	r0
;         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 805ab8c: 9809         	ldr	r0, [sp, #0x24]
 805ab8e: 6800         	ldr	r0, [r0]
 805ab90: 9003         	str	r0, [sp, #0xc]
;         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 805ab92: 9803         	ldr	r0, [sp, #0xc]
 805ab94: 990c         	ldr	r1, [sp, #0x30]
 805ab96: 9a0a         	ldr	r2, [sp, #0x28]
 805ab98: 4b3f         	ldr	r3, [pc, #0xfc]         @ 0x805ac98 <xEventGroupWaitBits+0x1a4>
 805ab9a: 4798         	blx	r3
 805ab9c: 9006         	str	r0, [sp, #0x18]
;         if( xWaitConditionMet != pdFALSE )
 805ab9e: 9806         	ldr	r0, [sp, #0x18]
 805aba0: b178         	cbz	r0, 0x805abc2 <xEventGroupWaitBits+0xce> @ imm = #0x1e
 805aba2: e7ff         	b	0x805aba4 <xEventGroupWaitBits+0xb0> @ imm = #-0x2
;             uxReturn = uxCurrentEventBits;
 805aba4: 9803         	ldr	r0, [sp, #0xc]
 805aba6: 9008         	str	r0, [sp, #0x20]
 805aba8: 2000         	movs	r0, #0x0
;             xTicksToWait = ( TickType_t ) 0;
 805abaa: 60b8         	str	r0, [r7, #0x8]
;             if( xClearOnExit != pdFALSE )
 805abac: 980b         	ldr	r0, [sp, #0x2c]
 805abae: b130         	cbz	r0, 0x805abbe <xEventGroupWaitBits+0xca> @ imm = #0xc
 805abb0: e7ff         	b	0x805abb2 <xEventGroupWaitBits+0xbe> @ imm = #-0x2
;                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 805abb2: 9a0c         	ldr	r2, [sp, #0x30]
 805abb4: 9909         	ldr	r1, [sp, #0x24]
 805abb6: 6808         	ldr	r0, [r1]
 805abb8: 4390         	bics	r0, r2
 805abba: 6008         	str	r0, [r1]
;             }
 805abbc: e000         	b	0x805abc0 <xEventGroupWaitBits+0xcc> @ imm = #0x0
 805abbe: e7ff         	b	0x805abc0 <xEventGroupWaitBits+0xcc> @ imm = #-0x2
;         }
 805abc0: e025         	b	0x805ac0e <xEventGroupWaitBits+0x11a> @ imm = #0x4a
;         else if( xTicksToWait == ( TickType_t ) 0 )
 805abc2: 68b8         	ldr	r0, [r7, #0x8]
 805abc4: b928         	cbnz	r0, 0x805abd2 <xEventGroupWaitBits+0xde> @ imm = #0xa
 805abc6: e7ff         	b	0x805abc8 <xEventGroupWaitBits+0xd4> @ imm = #-0x2
;             uxReturn = uxCurrentEventBits;
 805abc8: 9803         	ldr	r0, [sp, #0xc]
 805abca: 9008         	str	r0, [sp, #0x20]
 805abcc: 2001         	movs	r0, #0x1
;             xTimeoutOccurred = pdTRUE;
 805abce: 9004         	str	r0, [sp, #0x10]
;         }
 805abd0: e01c         	b	0x805ac0c <xEventGroupWaitBits+0x118> @ imm = #0x38
;             if( xClearOnExit != pdFALSE )
 805abd2: 980b         	ldr	r0, [sp, #0x2c]
 805abd4: b128         	cbz	r0, 0x805abe2 <xEventGroupWaitBits+0xee> @ imm = #0xa
 805abd6: e7ff         	b	0x805abd8 <xEventGroupWaitBits+0xe4> @ imm = #-0x2
;                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 805abd8: 9807         	ldr	r0, [sp, #0x1c]
 805abda: f040 7080    	orr	r0, r0, #0x1000000
 805abde: 9007         	str	r0, [sp, #0x1c]
;             }
 805abe0: e000         	b	0x805abe4 <xEventGroupWaitBits+0xf0> @ imm = #0x0
 805abe2: e7ff         	b	0x805abe4 <xEventGroupWaitBits+0xf0> @ imm = #-0x2
;             if( xWaitForAllBits != pdFALSE )
 805abe4: 980a         	ldr	r0, [sp, #0x28]
 805abe6: b128         	cbz	r0, 0x805abf4 <xEventGroupWaitBits+0x100> @ imm = #0xa
 805abe8: e7ff         	b	0x805abea <xEventGroupWaitBits+0xf6> @ imm = #-0x2
;                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 805abea: 9807         	ldr	r0, [sp, #0x1c]
 805abec: f040 6080    	orr	r0, r0, #0x4000000
 805abf0: 9007         	str	r0, [sp, #0x1c]
;             }
 805abf2: e000         	b	0x805abf6 <xEventGroupWaitBits+0x102> @ imm = #0x0
 805abf4: e7ff         	b	0x805abf6 <xEventGroupWaitBits+0x102> @ imm = #-0x2
;             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 805abf6: 9809         	ldr	r0, [sp, #0x24]
 805abf8: 3004         	adds	r0, #0x4
 805abfa: 990c         	ldr	r1, [sp, #0x30]
 805abfc: 9a07         	ldr	r2, [sp, #0x1c]
 805abfe: 4311         	orrs	r1, r2
 805ac00: 68ba         	ldr	r2, [r7, #0x8]
 805ac02: 4b26         	ldr	r3, [pc, #0x98]         @ 0x805ac9c <xEventGroupWaitBits+0x1a8>
 805ac04: 4798         	blx	r3
 805ac06: 2000         	movs	r0, #0x0
;             uxReturn = 0;
 805ac08: 9008         	str	r0, [sp, #0x20]
 805ac0a: e7ff         	b	0x805ac0c <xEventGroupWaitBits+0x118> @ imm = #-0x2
 805ac0c: e7ff         	b	0x805ac0e <xEventGroupWaitBits+0x11a> @ imm = #-0x2
;     xAlreadyYielded = xTaskResumeAll();
 805ac0e: 4824         	ldr	r0, [pc, #0x90]         @ 0x805aca0 <xEventGroupWaitBits+0x1ac>
 805ac10: 4780         	blx	r0
 805ac12: 9005         	str	r0, [sp, #0x14]
;     if( xTicksToWait != ( TickType_t ) 0 )
 805ac14: 68b8         	ldr	r0, [r7, #0x8]
 805ac16: b398         	cbz	r0, 0x805ac80 <xEventGroupWaitBits+0x18c> @ imm = #0x66
 805ac18: e7ff         	b	0x805ac1a <xEventGroupWaitBits+0x126> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 805ac1a: 9805         	ldr	r0, [sp, #0x14]
 805ac1c: b918         	cbnz	r0, 0x805ac26 <xEventGroupWaitBits+0x132> @ imm = #0x6
 805ac1e: e7ff         	b	0x805ac20 <xEventGroupWaitBits+0x12c> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 805ac20: 4820         	ldr	r0, [pc, #0x80]         @ 0x805aca4 <xEventGroupWaitBits+0x1b0>
 805ac22: 4780         	blx	r0
;         }
 805ac24: e000         	b	0x805ac28 <xEventGroupWaitBits+0x134> @ imm = #0x0
 805ac26: e7ff         	b	0x805ac28 <xEventGroupWaitBits+0x134> @ imm = #-0x2
;         uxReturn = uxTaskResetEventItemValue();
 805ac28: 481f         	ldr	r0, [pc, #0x7c]         @ 0x805aca8 <xEventGroupWaitBits+0x1b4>
 805ac2a: 4780         	blx	r0
 805ac2c: 9008         	str	r0, [sp, #0x20]
;         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 805ac2e: f89d 0023    	ldrb.w	r0, [sp, #0x23]
 805ac32: 0780         	lsls	r0, r0, #0x1e
 805ac34: 2800         	cmp	r0, #0x0
 805ac36: d41d         	bmi	0x805ac74 <xEventGroupWaitBits+0x180> @ imm = #0x3a
 805ac38: e7ff         	b	0x805ac3a <xEventGroupWaitBits+0x146> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805ac3a: 481c         	ldr	r0, [pc, #0x70]         @ 0x805acac <xEventGroupWaitBits+0x1b8>
 805ac3c: 4780         	blx	r0
;                 uxReturn = pxEventBits->uxEventBits;
 805ac3e: 9809         	ldr	r0, [sp, #0x24]
 805ac40: 6800         	ldr	r0, [r0]
 805ac42: 9008         	str	r0, [sp, #0x20]
;                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 805ac44: 9808         	ldr	r0, [sp, #0x20]
 805ac46: 990c         	ldr	r1, [sp, #0x30]
 805ac48: 9a0a         	ldr	r2, [sp, #0x28]
 805ac4a: 4b19         	ldr	r3, [pc, #0x64]         @ 0x805acb0 <xEventGroupWaitBits+0x1bc>
 805ac4c: 4798         	blx	r3
 805ac4e: b158         	cbz	r0, 0x805ac68 <xEventGroupWaitBits+0x174> @ imm = #0x16
 805ac50: e7ff         	b	0x805ac52 <xEventGroupWaitBits+0x15e> @ imm = #-0x2
;                     if( xClearOnExit != pdFALSE )
 805ac52: 980b         	ldr	r0, [sp, #0x2c]
 805ac54: b130         	cbz	r0, 0x805ac64 <xEventGroupWaitBits+0x170> @ imm = #0xc
 805ac56: e7ff         	b	0x805ac58 <xEventGroupWaitBits+0x164> @ imm = #-0x2
;                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 805ac58: 9a0c         	ldr	r2, [sp, #0x30]
 805ac5a: 9909         	ldr	r1, [sp, #0x24]
 805ac5c: 6808         	ldr	r0, [r1]
 805ac5e: 4390         	bics	r0, r2
 805ac60: 6008         	str	r0, [r1]
;                     }
 805ac62: e000         	b	0x805ac66 <xEventGroupWaitBits+0x172> @ imm = #0x0
 805ac64: e7ff         	b	0x805ac66 <xEventGroupWaitBits+0x172> @ imm = #-0x2
;                 }
 805ac66: e000         	b	0x805ac6a <xEventGroupWaitBits+0x176> @ imm = #0x0
 805ac68: e7ff         	b	0x805ac6a <xEventGroupWaitBits+0x176> @ imm = #-0x2
 805ac6a: 2001         	movs	r0, #0x1
;                 xTimeoutOccurred = pdTRUE;
 805ac6c: 9004         	str	r0, [sp, #0x10]
;             taskEXIT_CRITICAL();
 805ac6e: 4811         	ldr	r0, [pc, #0x44]         @ 0x805acb4 <xEventGroupWaitBits+0x1c0>
 805ac70: 4780         	blx	r0
;         }
 805ac72: e000         	b	0x805ac76 <xEventGroupWaitBits+0x182> @ imm = #0x0
 805ac74: e7ff         	b	0x805ac76 <xEventGroupWaitBits+0x182> @ imm = #-0x2
;         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 805ac76: 9808         	ldr	r0, [sp, #0x20]
 805ac78: f020 407f    	bic	r0, r0, #0xff000000
 805ac7c: 9008         	str	r0, [sp, #0x20]
;     }
 805ac7e: e7ff         	b	0x805ac80 <xEventGroupWaitBits+0x18c> @ imm = #-0x2
;     return uxReturn;
 805ac80: 9808         	ldr	r0, [sp, #0x20]
 805ac82: 9001         	str	r0, [sp, #0x4]
 805ac84: 480c         	ldr	r0, [pc, #0x30]         @ 0x805acb8 <xEventGroupWaitBits+0x1c4>
 805ac86: 4780         	blx	r0
 805ac88: 9801         	ldr	r0, [sp, #0x4]
 805ac8a: b00e         	add	sp, #0x38
 805ac8c: bdb0         	pop	{r4, r5, r7, pc}
 805ac8e: bf00         	nop

0805ac90 <$d.7>:
 805ac90: fd 7b 05 08  	.word	0x08057bfd
 805ac94: b9 59 05 08  	.word	0x080559b9
 805ac98: cd ac 05 08  	.word	0x0805accd
 805ac9c: 9d 71 05 08  	.word	0x0805719d
 805aca0: 29 5b 05 08  	.word	0x08055b29
 805aca4: c5 e0 05 08  	.word	0x0805e0c5
 805aca8: 49 81 05 08  	.word	0x08058149
 805acac: 05 e1 05 08  	.word	0x0805e105
 805acb0: cd ac 05 08  	.word	0x0805accd
 805acb4: 4d e1 05 08  	.word	0x0805e14d
 805acb8: 21 05 06 08  	.word	0x08060521
 805acbc: 55 ec 05 08  	.word	0x0805ec55
 805acc0: 55 ec 05 08  	.word	0x0805ec55
 805acc4: 55 ec 05 08  	.word	0x0805ec55
 805acc8: 55 ec 05 08  	.word	0x0805ec55

0805accc <prvTestWaitCondition>:
; {
 805accc: b5d0         	push	{r4, r6, r7, lr}
 805acce: af02         	add	r7, sp, #0x8
 805acd0: b086         	sub	sp, #0x18
 805acd2: f643 5c40    	movw	r12, #0x3d40
 805acd6: f2c2 0c00    	movt	r12, #0x2000
 805acda: f8dc 3000    	ldr.w	r3, [r12]
 805acde: f642 5440    	movw	r4, #0x2d40
 805ace2: f2c2 0400    	movt	r4, #0x2000
 805ace6: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805acea: 3301         	adds	r3, #0x1
 805acec: f8cc 3000    	str.w	r3, [r12]
 805acf0: 9005         	str	r0, [sp, #0x14]
 805acf2: 9104         	str	r1, [sp, #0x10]
 805acf4: 9203         	str	r2, [sp, #0xc]
 805acf6: 2000         	movs	r0, #0x0
;     BaseType_t xWaitConditionMet = pdFALSE;
 805acf8: 9002         	str	r0, [sp, #0x8]
;     if( xWaitForAllBits == pdFALSE )
 805acfa: 9803         	ldr	r0, [sp, #0xc]
 805acfc: b950         	cbnz	r0, 0x805ad14 <prvTestWaitCondition+0x48> @ imm = #0x14
 805acfe: e7ff         	b	0x805ad00 <prvTestWaitCondition+0x34> @ imm = #-0x2
;         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 805ad00: 9805         	ldr	r0, [sp, #0x14]
 805ad02: 9904         	ldr	r1, [sp, #0x10]
 805ad04: 4208         	tst	r0, r1
 805ad06: d003         	beq	0x805ad10 <prvTestWaitCondition+0x44> @ imm = #0x6
 805ad08: e7ff         	b	0x805ad0a <prvTestWaitCondition+0x3e> @ imm = #-0x2
 805ad0a: 2001         	movs	r0, #0x1
;             xWaitConditionMet = pdTRUE;
 805ad0c: 9002         	str	r0, [sp, #0x8]
;         }
 805ad0e: e000         	b	0x805ad12 <prvTestWaitCondition+0x46> @ imm = #0x0
 805ad10: e7ff         	b	0x805ad12 <prvTestWaitCondition+0x46> @ imm = #-0x2
;     }
 805ad12: e00a         	b	0x805ad2a <prvTestWaitCondition+0x5e> @ imm = #0x14
;         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 805ad14: 9805         	ldr	r0, [sp, #0x14]
 805ad16: 9904         	ldr	r1, [sp, #0x10]
 805ad18: 4008         	ands	r0, r1
 805ad1a: 4288         	cmp	r0, r1
 805ad1c: d103         	bne	0x805ad26 <prvTestWaitCondition+0x5a> @ imm = #0x6
 805ad1e: e7ff         	b	0x805ad20 <prvTestWaitCondition+0x54> @ imm = #-0x2
 805ad20: 2001         	movs	r0, #0x1
;             xWaitConditionMet = pdTRUE;
 805ad22: 9002         	str	r0, [sp, #0x8]
;         }
 805ad24: e000         	b	0x805ad28 <prvTestWaitCondition+0x5c> @ imm = #0x0
 805ad26: e7ff         	b	0x805ad28 <prvTestWaitCondition+0x5c> @ imm = #-0x2
 805ad28: e7ff         	b	0x805ad2a <prvTestWaitCondition+0x5e> @ imm = #-0x2
;     return xWaitConditionMet;
 805ad2a: 9802         	ldr	r0, [sp, #0x8]
 805ad2c: 9001         	str	r0, [sp, #0x4]
 805ad2e: 4802         	ldr	r0, [pc, #0x8]          @ 0x805ad38 <prvTestWaitCondition+0x6c>
 805ad30: 4780         	blx	r0
 805ad32: 9801         	ldr	r0, [sp, #0x4]
 805ad34: b006         	add	sp, #0x18
 805ad36: bdd0         	pop	{r4, r6, r7, pc}

0805ad38 <$d.9>:
 805ad38: 21 05 06 08  	.word	0x08060521

0805ad3c <xEventGroupClearBits>:
; {
 805ad3c: b580         	push	{r7, lr}
 805ad3e: 466f         	mov	r7, sp
 805ad40: b086         	sub	sp, #0x18
 805ad42: f643 5340    	movw	r3, #0x3d40
 805ad46: f2c2 0300    	movt	r3, #0x2000
 805ad4a: 681a         	ldr	r2, [r3]
 805ad4c: f642 5c40    	movw	r12, #0x2d40
 805ad50: f2c2 0c00    	movt	r12, #0x2000
 805ad54: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805ad58: 3201         	adds	r2, #0x1
 805ad5a: 601a         	str	r2, [r3]
 805ad5c: 9005         	str	r0, [sp, #0x14]
 805ad5e: 9104         	str	r1, [sp, #0x10]
;     EventGroup_t * pxEventBits = xEventGroup;
 805ad60: 9805         	ldr	r0, [sp, #0x14]
 805ad62: 9003         	str	r0, [sp, #0xc]
;     configASSERT( xEventGroup );
 805ad64: 9805         	ldr	r0, [sp, #0x14]
 805ad66: b920         	cbnz	r0, 0x805ad72 <xEventGroupClearBits+0x36> @ imm = #0x8
 805ad68: e7ff         	b	0x805ad6a <xEventGroupClearBits+0x2e> @ imm = #-0x2
 805ad6a: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805adb8 <xEventGroupClearBits+0x7c>
 805ad6c: 4780         	blx	r0
 805ad6e: e7ff         	b	0x805ad70 <xEventGroupClearBits+0x34> @ imm = #-0x2
 805ad70: e7fe         	b	0x805ad70 <xEventGroupClearBits+0x34> @ imm = #-0x4
;     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 805ad72: f89d 0013    	ldrb.w	r0, [sp, #0x13]
 805ad76: b120         	cbz	r0, 0x805ad82 <xEventGroupClearBits+0x46> @ imm = #0x8
 805ad78: e7ff         	b	0x805ad7a <xEventGroupClearBits+0x3e> @ imm = #-0x2
 805ad7a: 480e         	ldr	r0, [pc, #0x38]         @ 0x805adb4 <xEventGroupClearBits+0x78>
 805ad7c: 4780         	blx	r0
 805ad7e: e7ff         	b	0x805ad80 <xEventGroupClearBits+0x44> @ imm = #-0x2
 805ad80: e7fe         	b	0x805ad80 <xEventGroupClearBits+0x44> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805ad82: 4809         	ldr	r0, [pc, #0x24]         @ 0x805ada8 <xEventGroupClearBits+0x6c>
 805ad84: 4780         	blx	r0
;         uxReturn = pxEventBits->uxEventBits;
 805ad86: 9803         	ldr	r0, [sp, #0xc]
 805ad88: 6800         	ldr	r0, [r0]
 805ad8a: 9002         	str	r0, [sp, #0x8]
;         pxEventBits->uxEventBits &= ~uxBitsToClear;
 805ad8c: 9a04         	ldr	r2, [sp, #0x10]
 805ad8e: 9903         	ldr	r1, [sp, #0xc]
 805ad90: 6808         	ldr	r0, [r1]
 805ad92: 4390         	bics	r0, r2
 805ad94: 6008         	str	r0, [r1]
;     taskEXIT_CRITICAL();
 805ad96: 4805         	ldr	r0, [pc, #0x14]         @ 0x805adac <xEventGroupClearBits+0x70>
 805ad98: 4780         	blx	r0
;     return uxReturn;
 805ad9a: 9802         	ldr	r0, [sp, #0x8]
 805ad9c: 9001         	str	r0, [sp, #0x4]
 805ad9e: 4804         	ldr	r0, [pc, #0x10]         @ 0x805adb0 <xEventGroupClearBits+0x74>
 805ada0: 4780         	blx	r0
 805ada2: 9801         	ldr	r0, [sp, #0x4]
 805ada4: b006         	add	sp, #0x18
 805ada6: bd80         	pop	{r7, pc}

0805ada8 <$d.11>:
 805ada8: 05 e1 05 08  	.word	0x0805e105
 805adac: 4d e1 05 08  	.word	0x0805e14d
 805adb0: 21 05 06 08  	.word	0x08060521
 805adb4: 55 ec 05 08  	.word	0x0805ec55
 805adb8: 55 ec 05 08  	.word	0x0805ec55

0805adbc <xEventGroupClearBitsFromISR>:
;     {
 805adbc: b580         	push	{r7, lr}
 805adbe: 466f         	mov	r7, sp
 805adc0: b084         	sub	sp, #0x10
 805adc2: f643 5340    	movw	r3, #0x3d40
 805adc6: f2c2 0300    	movt	r3, #0x2000
 805adca: 681a         	ldr	r2, [r3]
 805adcc: f642 5c40    	movw	r12, #0x2d40
 805add0: f2c2 0c00    	movt	r12, #0x2000
 805add4: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805add8: 3201         	adds	r2, #0x1
 805adda: 601a         	str	r2, [r3]
 805addc: 9003         	str	r0, [sp, #0xc]
 805adde: 9102         	str	r1, [sp, #0x8]
;         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 805ade0: 9903         	ldr	r1, [sp, #0xc]
 805ade2: 9a02         	ldr	r2, [sp, #0x8]
 805ade4: f64a 600d    	movw	r0, #0xae0d
 805ade8: f6c0 0005    	movt	r0, #0x805
 805adec: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805ae04 <xEventGroupClearBitsFromISR+0x48>
 805adf0: 2300         	movs	r3, #0x0
 805adf2: 47e0         	blx	r12
 805adf4: 9001         	str	r0, [sp, #0x4]
;         return xReturn;
 805adf6: 9801         	ldr	r0, [sp, #0x4]
 805adf8: 9000         	str	r0, [sp]
 805adfa: 4803         	ldr	r0, [pc, #0xc]          @ 0x805ae08 <xEventGroupClearBitsFromISR+0x4c>
 805adfc: 4780         	blx	r0
 805adfe: 9800         	ldr	r0, [sp]
 805ae00: b004         	add	sp, #0x10
 805ae02: bd80         	pop	{r7, pc}

0805ae04 <$d.13>:
 805ae04: 6d 99 05 08  	.word	0x0805996d
 805ae08: 21 05 06 08  	.word	0x08060521

0805ae0c <vEventGroupClearBitsCallback>:
; {
 805ae0c: b580         	push	{r7, lr}
 805ae0e: 466f         	mov	r7, sp
 805ae10: b082         	sub	sp, #0x8
 805ae12: f643 5340    	movw	r3, #0x3d40
 805ae16: f2c2 0300    	movt	r3, #0x2000
 805ae1a: 681a         	ldr	r2, [r3]
 805ae1c: f642 5c40    	movw	r12, #0x2d40
 805ae20: f2c2 0c00    	movt	r12, #0x2000
 805ae24: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805ae28: 3201         	adds	r2, #0x1
 805ae2a: 601a         	str	r2, [r3]
 805ae2c: 9001         	str	r0, [sp, #0x4]
 805ae2e: 9100         	str	r1, [sp]
;     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 805ae30: 9801         	ldr	r0, [sp, #0x4]
 805ae32: 9900         	ldr	r1, [sp]
 805ae34: 4a02         	ldr	r2, [pc, #0x8]          @ 0x805ae40 <vEventGroupClearBitsCallback+0x34>
 805ae36: 4790         	blx	r2
; }
 805ae38: 4802         	ldr	r0, [pc, #0x8]          @ 0x805ae44 <vEventGroupClearBitsCallback+0x38>
 805ae3a: 4780         	blx	r0
 805ae3c: b002         	add	sp, #0x8
 805ae3e: bd80         	pop	{r7, pc}

0805ae40 <$d.15>:
 805ae40: 3d ad 05 08  	.word	0x0805ad3d
 805ae44: 21 05 06 08  	.word	0x08060521

0805ae48 <xEventGroupGetBitsFromISR>:
; {
 805ae48: b580         	push	{r7, lr}
 805ae4a: 466f         	mov	r7, sp
 805ae4c: b086         	sub	sp, #0x18
 805ae4e: f643 5240    	movw	r2, #0x3d40
 805ae52: f2c2 0200    	movt	r2, #0x2000
 805ae56: 6811         	ldr	r1, [r2]
 805ae58: f642 5340    	movw	r3, #0x2d40
 805ae5c: f2c2 0300    	movt	r3, #0x2000
 805ae60: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805ae64: 3101         	adds	r1, #0x1
 805ae66: 6011         	str	r1, [r2]
 805ae68: 9005         	str	r0, [sp, #0x14]
;     EventGroup_t const * const pxEventBits = xEventGroup;
 805ae6a: 9805         	ldr	r0, [sp, #0x14]
 805ae6c: 9003         	str	r0, [sp, #0xc]
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805ae6e: 4808         	ldr	r0, [pc, #0x20]         @ 0x805ae90 <xEventGroupGetBitsFromISR+0x48>
 805ae70: 4780         	blx	r0
 805ae72: 9004         	str	r0, [sp, #0x10]
;         uxReturn = pxEventBits->uxEventBits;
 805ae74: 9803         	ldr	r0, [sp, #0xc]
 805ae76: 6800         	ldr	r0, [r0]
 805ae78: 9002         	str	r0, [sp, #0x8]
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805ae7a: 9804         	ldr	r0, [sp, #0x10]
 805ae7c: 4905         	ldr	r1, [pc, #0x14]         @ 0x805ae94 <xEventGroupGetBitsFromISR+0x4c>
 805ae7e: 4788         	blx	r1
;     return uxReturn;
 805ae80: 9802         	ldr	r0, [sp, #0x8]
 805ae82: 9001         	str	r0, [sp, #0x4]
 805ae84: 4804         	ldr	r0, [pc, #0x10]         @ 0x805ae98 <xEventGroupGetBitsFromISR+0x50>
 805ae86: 4780         	blx	r0
 805ae88: 9801         	ldr	r0, [sp, #0x4]
 805ae8a: b006         	add	sp, #0x18
 805ae8c: bd80         	pop	{r7, pc}
 805ae8e: bf00         	nop

0805ae90 <$d.17>:
 805ae90: 55 ec 05 08  	.word	0x0805ec55
 805ae94: 85 ec 05 08  	.word	0x0805ec85
 805ae98: 21 05 06 08  	.word	0x08060521

0805ae9c <vEventGroupDelete>:
; {
 805ae9c: b580         	push	{r7, lr}
 805ae9e: 466f         	mov	r7, sp
 805aea0: b084         	sub	sp, #0x10
 805aea2: f643 5240    	movw	r2, #0x3d40
 805aea6: f2c2 0200    	movt	r2, #0x2000
 805aeaa: 6811         	ldr	r1, [r2]
 805aeac: f642 5340    	movw	r3, #0x2d40
 805aeb0: f2c2 0300    	movt	r3, #0x2000
 805aeb4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805aeb8: 3101         	adds	r1, #0x1
 805aeba: 6011         	str	r1, [r2]
 805aebc: 9003         	str	r0, [sp, #0xc]
;     EventGroup_t * pxEventBits = xEventGroup;
 805aebe: 9803         	ldr	r0, [sp, #0xc]
 805aec0: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxEventBits );
 805aec2: 9802         	ldr	r0, [sp, #0x8]
 805aec4: b920         	cbnz	r0, 0x805aed0 <vEventGroupDelete+0x34> @ imm = #0x8
 805aec6: e7ff         	b	0x805aec8 <vEventGroupDelete+0x2c> @ imm = #-0x2
 805aec8: 481a         	ldr	r0, [pc, #0x68]         @ 0x805af34 <vEventGroupDelete+0x98>
 805aeca: 4780         	blx	r0
 805aecc: e7ff         	b	0x805aece <vEventGroupDelete+0x32> @ imm = #-0x2
 805aece: e7fe         	b	0x805aece <vEventGroupDelete+0x32> @ imm = #-0x4
;     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 805aed0: 9802         	ldr	r0, [sp, #0x8]
 805aed2: 3004         	adds	r0, #0x4
 805aed4: 9001         	str	r0, [sp, #0x4]
;     vTaskSuspendAll();
 805aed6: 4811         	ldr	r0, [pc, #0x44]         @ 0x805af1c <vEventGroupDelete+0x80>
 805aed8: 4780         	blx	r0
;         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 805aeda: e7ff         	b	0x805aedc <vEventGroupDelete+0x40> @ imm = #-0x2
 805aedc: 9801         	ldr	r0, [sp, #0x4]
 805aede: 6800         	ldr	r0, [r0]
 805aee0: b190         	cbz	r0, 0x805af08 <vEventGroupDelete+0x6c> @ imm = #0x24
 805aee2: e7ff         	b	0x805aee4 <vEventGroupDelete+0x48> @ imm = #-0x2
;             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 805aee4: 9801         	ldr	r0, [sp, #0x4]
 805aee6: f100 0108    	add.w	r1, r0, #0x8
 805aeea: 68c0         	ldr	r0, [r0, #0xc]
 805aeec: 4288         	cmp	r0, r1
 805aeee: d104         	bne	0x805aefa <vEventGroupDelete+0x5e> @ imm = #0x8
 805aef0: e7ff         	b	0x805aef2 <vEventGroupDelete+0x56> @ imm = #-0x2
 805aef2: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805af30 <vEventGroupDelete+0x94>
 805aef4: 4780         	blx	r0
 805aef6: e7ff         	b	0x805aef8 <vEventGroupDelete+0x5c> @ imm = #-0x2
 805aef8: e7fe         	b	0x805aef8 <vEventGroupDelete+0x5c> @ imm = #-0x4
;             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 805aefa: 9801         	ldr	r0, [sp, #0x4]
 805aefc: 68c0         	ldr	r0, [r0, #0xc]
 805aefe: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805af2c <vEventGroupDelete+0x90>
 805af00: f04f 7100    	mov.w	r1, #0x2000000
 805af04: 4790         	blx	r2
;         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 805af06: e7e9         	b	0x805aedc <vEventGroupDelete+0x40> @ imm = #-0x2e
;     ( void ) xTaskResumeAll();
 805af08: 4805         	ldr	r0, [pc, #0x14]         @ 0x805af20 <vEventGroupDelete+0x84>
 805af0a: 4780         	blx	r0
;         vPortFree( pxEventBits );
 805af0c: 9802         	ldr	r0, [sp, #0x8]
 805af0e: 4905         	ldr	r1, [pc, #0x14]         @ 0x805af24 <vEventGroupDelete+0x88>
 805af10: 4788         	blx	r1
; }
 805af12: 4805         	ldr	r0, [pc, #0x14]         @ 0x805af28 <vEventGroupDelete+0x8c>
 805af14: 4780         	blx	r0
 805af16: b004         	add	sp, #0x10
 805af18: bd80         	pop	{r7, pc}
 805af1a: bf00         	nop

0805af1c <$d.19>:
 805af1c: b9 59 05 08  	.word	0x080559b9
 805af20: 29 5b 05 08  	.word	0x08055b29
 805af24: 41 a4 05 08  	.word	0x0805a441
 805af28: 21 05 06 08  	.word	0x08060521
 805af2c: 15 75 05 08  	.word	0x08057515
 805af30: 55 ec 05 08  	.word	0x0805ec55
 805af34: 55 ec 05 08  	.word	0x0805ec55

0805af38 <vEventGroupSetBitsCallback>:
; {
 805af38: b580         	push	{r7, lr}
 805af3a: 466f         	mov	r7, sp
 805af3c: b082         	sub	sp, #0x8
 805af3e: f643 5340    	movw	r3, #0x3d40
 805af42: f2c2 0300    	movt	r3, #0x2000
 805af46: 681a         	ldr	r2, [r3]
 805af48: f642 5c40    	movw	r12, #0x2d40
 805af4c: f2c2 0c00    	movt	r12, #0x2000
 805af50: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805af54: 3201         	adds	r2, #0x1
 805af56: 601a         	str	r2, [r3]
 805af58: 9001         	str	r0, [sp, #0x4]
 805af5a: 9100         	str	r1, [sp]
;     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 805af5c: 9801         	ldr	r0, [sp, #0x4]
 805af5e: 9900         	ldr	r1, [sp]
 805af60: 4a02         	ldr	r2, [pc, #0x8]          @ 0x805af6c <vEventGroupSetBitsCallback+0x34>
 805af62: 4790         	blx	r2
; }
 805af64: 4802         	ldr	r0, [pc, #0x8]          @ 0x805af70 <vEventGroupSetBitsCallback+0x38>
 805af66: 4780         	blx	r0
 805af68: b002         	add	sp, #0x8
 805af6a: bd80         	pop	{r7, pc}

0805af6c <$d.21>:
 805af6c: b9 a9 05 08  	.word	0x0805a9b9
 805af70: 21 05 06 08  	.word	0x08060521

0805af74 <xEventGroupSetBitsFromISR>:
;     {
 805af74: b5d0         	push	{r4, r6, r7, lr}
 805af76: af02         	add	r7, sp, #0x8
 805af78: b086         	sub	sp, #0x18
 805af7a: f643 5c40    	movw	r12, #0x3d40
 805af7e: f2c2 0c00    	movt	r12, #0x2000
 805af82: f8dc 3000    	ldr.w	r3, [r12]
 805af86: f642 5440    	movw	r4, #0x2d40
 805af8a: f2c2 0400    	movt	r4, #0x2000
 805af8e: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805af92: 3301         	adds	r3, #0x1
 805af94: f8cc 3000    	str.w	r3, [r12]
 805af98: 9005         	str	r0, [sp, #0x14]
 805af9a: 9104         	str	r1, [sp, #0x10]
 805af9c: 9203         	str	r2, [sp, #0xc]
;         xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 805af9e: 9905         	ldr	r1, [sp, #0x14]
 805afa0: 9a04         	ldr	r2, [sp, #0x10]
 805afa2: 9b03         	ldr	r3, [sp, #0xc]
 805afa4: f64a 7039    	movw	r0, #0xaf39
 805afa8: f6c0 0005    	movt	r0, #0x805
 805afac: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805afc4 <xEventGroupSetBitsFromISR+0x50>
 805afb0: 47e0         	blx	r12
 805afb2: 9002         	str	r0, [sp, #0x8]
;         return xReturn;
 805afb4: 9802         	ldr	r0, [sp, #0x8]
 805afb6: 9001         	str	r0, [sp, #0x4]
 805afb8: 4803         	ldr	r0, [pc, #0xc]          @ 0x805afc8 <xEventGroupSetBitsFromISR+0x54>
 805afba: 4780         	blx	r0
 805afbc: 9801         	ldr	r0, [sp, #0x4]
 805afbe: b006         	add	sp, #0x18
 805afc0: bdd0         	pop	{r4, r6, r7, pc}
 805afc2: bf00         	nop

0805afc4 <$d.23>:
 805afc4: 6d 99 05 08  	.word	0x0805996d
 805afc8: 21 05 06 08  	.word	0x08060521

0805afcc <uxEventGroupGetNumber>:
;     {
 805afcc: b580         	push	{r7, lr}
 805afce: 466f         	mov	r7, sp
 805afd0: b084         	sub	sp, #0x10
 805afd2: f643 5240    	movw	r2, #0x3d40
 805afd6: f2c2 0200    	movt	r2, #0x2000
 805afda: 6811         	ldr	r1, [r2]
 805afdc: f642 5340    	movw	r3, #0x2d40
 805afe0: f2c2 0300    	movt	r3, #0x2000
 805afe4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805afe8: 3101         	adds	r1, #0x1
 805afea: 6011         	str	r1, [r2]
 805afec: 9003         	str	r0, [sp, #0xc]
;         EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 805afee: 9803         	ldr	r0, [sp, #0xc]
 805aff0: 9001         	str	r0, [sp, #0x4]
;         if( xEventGroup == NULL )
 805aff2: 9803         	ldr	r0, [sp, #0xc]
 805aff4: b918         	cbnz	r0, 0x805affe <uxEventGroupGetNumber+0x32> @ imm = #0x6
 805aff6: e7ff         	b	0x805aff8 <uxEventGroupGetNumber+0x2c> @ imm = #-0x2
 805aff8: 2000         	movs	r0, #0x0
;             xReturn = 0;
 805affa: 9002         	str	r0, [sp, #0x8]
;         }
 805affc: e003         	b	0x805b006 <uxEventGroupGetNumber+0x3a> @ imm = #0x6
;             xReturn = pxEventBits->uxEventGroupNumber;
 805affe: 9801         	ldr	r0, [sp, #0x4]
 805b000: 6980         	ldr	r0, [r0, #0x18]
 805b002: 9002         	str	r0, [sp, #0x8]
 805b004: e7ff         	b	0x805b006 <uxEventGroupGetNumber+0x3a> @ imm = #-0x2
;         return xReturn;
 805b006: 9802         	ldr	r0, [sp, #0x8]
 805b008: 9000         	str	r0, [sp]
 805b00a: 4802         	ldr	r0, [pc, #0x8]          @ 0x805b014 <uxEventGroupGetNumber+0x48>
 805b00c: 4780         	blx	r0
 805b00e: 9800         	ldr	r0, [sp]
 805b010: b004         	add	sp, #0x10
 805b012: bd80         	pop	{r7, pc}

0805b014 <$d.25>:
 805b014: 21 05 06 08  	.word	0x08060521

0805b018 <vEventGroupSetNumber>:
;     {
 805b018: b580         	push	{r7, lr}
 805b01a: 466f         	mov	r7, sp
 805b01c: b082         	sub	sp, #0x8
 805b01e: f643 5340    	movw	r3, #0x3d40
 805b022: f2c2 0300    	movt	r3, #0x2000
 805b026: 681a         	ldr	r2, [r3]
 805b028: f642 5c40    	movw	r12, #0x2d40
 805b02c: f2c2 0c00    	movt	r12, #0x2000
 805b030: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805b034: 3201         	adds	r2, #0x1
 805b036: 601a         	str	r2, [r3]
 805b038: 9001         	str	r0, [sp, #0x4]
 805b03a: 9100         	str	r1, [sp]
;         ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 805b03c: 9800         	ldr	r0, [sp]
 805b03e: 9901         	ldr	r1, [sp, #0x4]
 805b040: 6188         	str	r0, [r1, #0x18]
;     }
 805b042: 4802         	ldr	r0, [pc, #0x8]          @ 0x805b04c <vEventGroupSetNumber+0x34>
 805b044: 4780         	blx	r0
 805b046: b002         	add	sp, #0x8
 805b048: bd80         	pop	{r7, pc}
 805b04a: bf00         	nop

0805b04c <$d.27>:
 805b04c: 21 05 06 08  	.word	0x08060521

0805b050 <vListInitialise>:
; {
 805b050: b580         	push	{r7, lr}
 805b052: 466f         	mov	r7, sp
 805b054: b082         	sub	sp, #0x8
 805b056: f643 5240    	movw	r2, #0x3d40
 805b05a: f2c2 0200    	movt	r2, #0x2000
 805b05e: 6811         	ldr	r1, [r2]
 805b060: f642 5340    	movw	r3, #0x2d40
 805b064: f2c2 0300    	movt	r3, #0x2000
 805b068: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b06c: 3101         	adds	r1, #0x1
 805b06e: 6011         	str	r1, [r2]
 805b070: 9001         	str	r0, [sp, #0x4]
;     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 805b072: 9901         	ldr	r1, [sp, #0x4]
 805b074: f101 0008    	add.w	r0, r1, #0x8
 805b078: 6048         	str	r0, [r1, #0x4]
;     pxList->xListEnd.xItemValue = portMAX_DELAY;
 805b07a: 9901         	ldr	r1, [sp, #0x4]
 805b07c: f04f 30ff    	mov.w	r0, #0xffffffff
 805b080: 6088         	str	r0, [r1, #0x8]
;     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 805b082: 9901         	ldr	r1, [sp, #0x4]
 805b084: f101 0008    	add.w	r0, r1, #0x8
 805b088: 60c8         	str	r0, [r1, #0xc]
;     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 805b08a: 9901         	ldr	r1, [sp, #0x4]
 805b08c: f101 0008    	add.w	r0, r1, #0x8
 805b090: 6108         	str	r0, [r1, #0x10]
;     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 805b092: 9901         	ldr	r1, [sp, #0x4]
 805b094: 2000         	movs	r0, #0x0
 805b096: 6008         	str	r0, [r1]
; }
 805b098: 4801         	ldr	r0, [pc, #0x4]          @ 0x805b0a0 <vListInitialise+0x50>
 805b09a: 4780         	blx	r0
 805b09c: b002         	add	sp, #0x8
 805b09e: bd80         	pop	{r7, pc}

0805b0a0 <$d.1>:
 805b0a0: 21 05 06 08  	.word	0x08060521

0805b0a4 <vListInitialiseItem>:
; {
 805b0a4: b580         	push	{r7, lr}
 805b0a6: 466f         	mov	r7, sp
 805b0a8: b082         	sub	sp, #0x8
 805b0aa: f643 5240    	movw	r2, #0x3d40
 805b0ae: f2c2 0200    	movt	r2, #0x2000
 805b0b2: 6811         	ldr	r1, [r2]
 805b0b4: f642 5340    	movw	r3, #0x2d40
 805b0b8: f2c2 0300    	movt	r3, #0x2000
 805b0bc: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b0c0: 3101         	adds	r1, #0x1
 805b0c2: 6011         	str	r1, [r2]
 805b0c4: 9001         	str	r0, [sp, #0x4]
;     pxItem->pxContainer = NULL;
 805b0c6: 9901         	ldr	r1, [sp, #0x4]
 805b0c8: 2000         	movs	r0, #0x0
 805b0ca: 6108         	str	r0, [r1, #0x10]
; }
 805b0cc: 4801         	ldr	r0, [pc, #0x4]          @ 0x805b0d4 <vListInitialiseItem+0x30>
 805b0ce: 4780         	blx	r0
 805b0d0: b002         	add	sp, #0x8
 805b0d2: bd80         	pop	{r7, pc}

0805b0d4 <$d.3>:
 805b0d4: 21 05 06 08  	.word	0x08060521

0805b0d8 <vListInsertEnd>:
; {
 805b0d8: b580         	push	{r7, lr}
 805b0da: 466f         	mov	r7, sp
 805b0dc: b084         	sub	sp, #0x10
 805b0de: f643 5340    	movw	r3, #0x3d40
 805b0e2: f2c2 0300    	movt	r3, #0x2000
 805b0e6: 681a         	ldr	r2, [r3]
 805b0e8: f642 5c40    	movw	r12, #0x2d40
 805b0ec: f2c2 0c00    	movt	r12, #0x2000
 805b0f0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805b0f4: 3201         	adds	r2, #0x1
 805b0f6: 601a         	str	r2, [r3]
 805b0f8: 9003         	str	r0, [sp, #0xc]
 805b0fa: 9102         	str	r1, [sp, #0x8]
;     ListItem_t * const pxIndex = pxList->pxIndex;
 805b0fc: 9803         	ldr	r0, [sp, #0xc]
 805b0fe: 6840         	ldr	r0, [r0, #0x4]
 805b100: 9001         	str	r0, [sp, #0x4]
;     pxNewListItem->pxNext = pxIndex;
 805b102: 9801         	ldr	r0, [sp, #0x4]
 805b104: 9902         	ldr	r1, [sp, #0x8]
 805b106: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 805b108: 9801         	ldr	r0, [sp, #0x4]
 805b10a: 6880         	ldr	r0, [r0, #0x8]
 805b10c: 9902         	ldr	r1, [sp, #0x8]
 805b10e: 6088         	str	r0, [r1, #0x8]
;     pxIndex->pxPrevious->pxNext = pxNewListItem;
 805b110: 9802         	ldr	r0, [sp, #0x8]
 805b112: 9901         	ldr	r1, [sp, #0x4]
 805b114: 6889         	ldr	r1, [r1, #0x8]
 805b116: 6048         	str	r0, [r1, #0x4]
;     pxIndex->pxPrevious = pxNewListItem;
 805b118: 9802         	ldr	r0, [sp, #0x8]
 805b11a: 9901         	ldr	r1, [sp, #0x4]
 805b11c: 6088         	str	r0, [r1, #0x8]
;     pxNewListItem->pxContainer = pxList;
 805b11e: 9803         	ldr	r0, [sp, #0xc]
 805b120: 9902         	ldr	r1, [sp, #0x8]
 805b122: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )++;
 805b124: 9903         	ldr	r1, [sp, #0xc]
 805b126: 6808         	ldr	r0, [r1]
 805b128: 3001         	adds	r0, #0x1
 805b12a: 6008         	str	r0, [r1]
; }
 805b12c: 4801         	ldr	r0, [pc, #0x4]          @ 0x805b134 <vListInsertEnd+0x5c>
 805b12e: 4780         	blx	r0
 805b130: b004         	add	sp, #0x10
 805b132: bd80         	pop	{r7, pc}

0805b134 <$d.5>:
 805b134: 21 05 06 08  	.word	0x08060521

0805b138 <vListInsert>:
; {
 805b138: b580         	push	{r7, lr}
 805b13a: 466f         	mov	r7, sp
 805b13c: b084         	sub	sp, #0x10
 805b13e: f643 5340    	movw	r3, #0x3d40
 805b142: f2c2 0300    	movt	r3, #0x2000
 805b146: 681a         	ldr	r2, [r3]
 805b148: f642 5c40    	movw	r12, #0x2d40
 805b14c: f2c2 0c00    	movt	r12, #0x2000
 805b150: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805b154: 3201         	adds	r2, #0x1
 805b156: 601a         	str	r2, [r3]
 805b158: 9003         	str	r0, [sp, #0xc]
 805b15a: 9102         	str	r1, [sp, #0x8]
;     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 805b15c: 9802         	ldr	r0, [sp, #0x8]
 805b15e: 6800         	ldr	r0, [r0]
 805b160: 9000         	str	r0, [sp]
;     if( xValueOfInsertion == portMAX_DELAY )
 805b162: 9800         	ldr	r0, [sp]
 805b164: 3001         	adds	r0, #0x1
 805b166: b920         	cbnz	r0, 0x805b172 <vListInsert+0x3a> @ imm = #0x8
 805b168: e7ff         	b	0x805b16a <vListInsert+0x32> @ imm = #-0x2
;         pxIterator = pxList->xListEnd.pxPrevious;
 805b16a: 9803         	ldr	r0, [sp, #0xc]
 805b16c: 6900         	ldr	r0, [r0, #0x10]
 805b16e: 9001         	str	r0, [sp, #0x4]
;     }
 805b170: e010         	b	0x805b194 <vListInsert+0x5c> @ imm = #0x20
;         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 805b172: 9803         	ldr	r0, [sp, #0xc]
 805b174: 3008         	adds	r0, #0x8
 805b176: 9001         	str	r0, [sp, #0x4]
 805b178: e7ff         	b	0x805b17a <vListInsert+0x42> @ imm = #-0x2
 805b17a: 9801         	ldr	r0, [sp, #0x4]
 805b17c: 6840         	ldr	r0, [r0, #0x4]
 805b17e: 6800         	ldr	r0, [r0]
 805b180: 9900         	ldr	r1, [sp]
 805b182: 4288         	cmp	r0, r1
 805b184: d805         	bhi	0x805b192 <vListInsert+0x5a> @ imm = #0xa
 805b186: e7ff         	b	0x805b188 <vListInsert+0x50> @ imm = #-0x2
;         }
 805b188: e7ff         	b	0x805b18a <vListInsert+0x52> @ imm = #-0x2
;         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 805b18a: 9801         	ldr	r0, [sp, #0x4]
 805b18c: 6840         	ldr	r0, [r0, #0x4]
 805b18e: 9001         	str	r0, [sp, #0x4]
 805b190: e7f3         	b	0x805b17a <vListInsert+0x42> @ imm = #-0x1a
 805b192: e7ff         	b	0x805b194 <vListInsert+0x5c> @ imm = #-0x2
;     pxNewListItem->pxNext = pxIterator->pxNext;
 805b194: 9801         	ldr	r0, [sp, #0x4]
 805b196: 6840         	ldr	r0, [r0, #0x4]
 805b198: 9902         	ldr	r1, [sp, #0x8]
 805b19a: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 805b19c: 9802         	ldr	r0, [sp, #0x8]
 805b19e: 6841         	ldr	r1, [r0, #0x4]
 805b1a0: 6088         	str	r0, [r1, #0x8]
;     pxNewListItem->pxPrevious = pxIterator;
 805b1a2: 9801         	ldr	r0, [sp, #0x4]
 805b1a4: 9902         	ldr	r1, [sp, #0x8]
 805b1a6: 6088         	str	r0, [r1, #0x8]
;     pxIterator->pxNext = pxNewListItem;
 805b1a8: 9802         	ldr	r0, [sp, #0x8]
 805b1aa: 9901         	ldr	r1, [sp, #0x4]
 805b1ac: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxContainer = pxList;
 805b1ae: 9803         	ldr	r0, [sp, #0xc]
 805b1b0: 9902         	ldr	r1, [sp, #0x8]
 805b1b2: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )++;
 805b1b4: 9903         	ldr	r1, [sp, #0xc]
 805b1b6: 6808         	ldr	r0, [r1]
 805b1b8: 3001         	adds	r0, #0x1
 805b1ba: 6008         	str	r0, [r1]
; }
 805b1bc: 4801         	ldr	r0, [pc, #0x4]          @ 0x805b1c4 <vListInsert+0x8c>
 805b1be: 4780         	blx	r0
 805b1c0: b004         	add	sp, #0x10
 805b1c2: bd80         	pop	{r7, pc}

0805b1c4 <$d.7>:
 805b1c4: 21 05 06 08  	.word	0x08060521

0805b1c8 <uxListRemove>:
; {
 805b1c8: b580         	push	{r7, lr}
 805b1ca: 466f         	mov	r7, sp
 805b1cc: b084         	sub	sp, #0x10
 805b1ce: f643 5240    	movw	r2, #0x3d40
 805b1d2: f2c2 0200    	movt	r2, #0x2000
 805b1d6: 6811         	ldr	r1, [r2]
 805b1d8: f642 5340    	movw	r3, #0x2d40
 805b1dc: f2c2 0300    	movt	r3, #0x2000
 805b1e0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b1e4: 3101         	adds	r1, #0x1
 805b1e6: 6011         	str	r1, [r2]
 805b1e8: 9003         	str	r0, [sp, #0xc]
;     List_t * const pxList = pxItemToRemove->pxContainer;
 805b1ea: 9803         	ldr	r0, [sp, #0xc]
 805b1ec: 6900         	ldr	r0, [r0, #0x10]
 805b1ee: 9002         	str	r0, [sp, #0x8]
;     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 805b1f0: 9803         	ldr	r0, [sp, #0xc]
 805b1f2: 6841         	ldr	r1, [r0, #0x4]
 805b1f4: 6880         	ldr	r0, [r0, #0x8]
 805b1f6: 6088         	str	r0, [r1, #0x8]
;     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 805b1f8: 9903         	ldr	r1, [sp, #0xc]
 805b1fa: 6848         	ldr	r0, [r1, #0x4]
 805b1fc: 6889         	ldr	r1, [r1, #0x8]
 805b1fe: 6048         	str	r0, [r1, #0x4]
;     if( pxList->pxIndex == pxItemToRemove )
 805b200: 9802         	ldr	r0, [sp, #0x8]
 805b202: 6840         	ldr	r0, [r0, #0x4]
 805b204: 9903         	ldr	r1, [sp, #0xc]
 805b206: 4288         	cmp	r0, r1
 805b208: d105         	bne	0x805b216 <uxListRemove+0x4e> @ imm = #0xa
 805b20a: e7ff         	b	0x805b20c <uxListRemove+0x44> @ imm = #-0x2
;         pxList->pxIndex = pxItemToRemove->pxPrevious;
 805b20c: 9803         	ldr	r0, [sp, #0xc]
 805b20e: 6880         	ldr	r0, [r0, #0x8]
 805b210: 9902         	ldr	r1, [sp, #0x8]
 805b212: 6048         	str	r0, [r1, #0x4]
;     }
 805b214: e000         	b	0x805b218 <uxListRemove+0x50> @ imm = #0x0
 805b216: e7ff         	b	0x805b218 <uxListRemove+0x50> @ imm = #-0x2
;     pxItemToRemove->pxContainer = NULL;
 805b218: 9903         	ldr	r1, [sp, #0xc]
 805b21a: 2000         	movs	r0, #0x0
 805b21c: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )--;
 805b21e: 9902         	ldr	r1, [sp, #0x8]
 805b220: 6808         	ldr	r0, [r1]
 805b222: 3801         	subs	r0, #0x1
 805b224: 6008         	str	r0, [r1]
;     return pxList->uxNumberOfItems;
 805b226: 9802         	ldr	r0, [sp, #0x8]
 805b228: 6800         	ldr	r0, [r0]
 805b22a: 9001         	str	r0, [sp, #0x4]
 805b22c: 4802         	ldr	r0, [pc, #0x8]          @ 0x805b238 <uxListRemove+0x70>
 805b22e: 4780         	blx	r0
 805b230: 9801         	ldr	r0, [sp, #0x4]
 805b232: b004         	add	sp, #0x10
 805b234: bd80         	pop	{r7, pc}
 805b236: bf00         	nop

0805b238 <$d.9>:
 805b238: 21 05 06 08  	.word	0x08060521

0805b23c <xQueueGenericReset>:
; {
 805b23c: b580         	push	{r7, lr}
 805b23e: 466f         	mov	r7, sp
 805b240: b086         	sub	sp, #0x18
 805b242: f643 5340    	movw	r3, #0x3d40
 805b246: f2c2 0300    	movt	r3, #0x2000
 805b24a: 681a         	ldr	r2, [r3]
 805b24c: f642 5c40    	movw	r12, #0x2d40
 805b250: f2c2 0c00    	movt	r12, #0x2000
 805b254: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805b258: 3201         	adds	r2, #0x1
 805b25a: 601a         	str	r2, [r3]
 805b25c: 9005         	str	r0, [sp, #0x14]
 805b25e: 9104         	str	r1, [sp, #0x10]
 805b260: 2001         	movs	r0, #0x1
;     BaseType_t xReturn = pdPASS;
 805b262: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805b264: 9805         	ldr	r0, [sp, #0x14]
 805b266: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxQueue );
 805b268: 9802         	ldr	r0, [sp, #0x8]
 805b26a: b920         	cbnz	r0, 0x805b276 <xQueueGenericReset+0x3a> @ imm = #0x8
 805b26c: e7ff         	b	0x805b26e <xQueueGenericReset+0x32> @ imm = #-0x2
 805b26e: 483b         	ldr	r0, [pc, #0xec]         @ 0x805b35c <xQueueGenericReset+0x120>
 805b270: 4780         	blx	r0
 805b272: e7ff         	b	0x805b274 <xQueueGenericReset+0x38> @ imm = #-0x2
 805b274: e7fe         	b	0x805b274 <xQueueGenericReset+0x38> @ imm = #-0x4
;     if( ( pxQueue != NULL ) &&
 805b276: 9802         	ldr	r0, [sp, #0x8]
 805b278: 2800         	cmp	r0, #0x0
 805b27a: d04d         	beq	0x805b318 <xQueueGenericReset+0xdc> @ imm = #0x9a
 805b27c: e7ff         	b	0x805b27e <xQueueGenericReset+0x42> @ imm = #-0x2
;         ( pxQueue->uxLength >= 1U ) &&
 805b27e: 9802         	ldr	r0, [sp, #0x8]
 805b280: 6bc0         	ldr	r0, [r0, #0x3c]
 805b282: 2800         	cmp	r0, #0x0
 805b284: d048         	beq	0x805b318 <xQueueGenericReset+0xdc> @ imm = #0x90
 805b286: e7ff         	b	0x805b288 <xQueueGenericReset+0x4c> @ imm = #-0x2
;         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 805b288: 9802         	ldr	r0, [sp, #0x8]
 805b28a: 6bc2         	ldr	r2, [r0, #0x3c]
 805b28c: 6c01         	ldr	r1, [r0, #0x40]
 805b28e: f04f 30ff    	mov.w	r0, #0xffffffff
 805b292: fbb0 f0f2    	udiv	r0, r0, r2
;     if( ( pxQueue != NULL ) &&
 805b296: 4288         	cmp	r0, r1
 805b298: d33e         	blo	0x805b318 <xQueueGenericReset+0xdc> @ imm = #0x7c
 805b29a: e7ff         	b	0x805b29c <xQueueGenericReset+0x60> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805b29c: 4827         	ldr	r0, [pc, #0x9c]         @ 0x805b33c <xQueueGenericReset+0x100>
 805b29e: 4780         	blx	r0
;             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 805b2a0: 9902         	ldr	r1, [sp, #0x8]
 805b2a2: 680b         	ldr	r3, [r1]
 805b2a4: 6bc8         	ldr	r0, [r1, #0x3c]
 805b2a6: 6c0a         	ldr	r2, [r1, #0x40]
 805b2a8: fb00 3002    	mla	r0, r0, r2, r3
 805b2ac: 6088         	str	r0, [r1, #0x8]
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 805b2ae: 9902         	ldr	r1, [sp, #0x8]
 805b2b0: 2000         	movs	r0, #0x0
 805b2b2: 6388         	str	r0, [r1, #0x38]
;             pxQueue->pcWriteTo = pxQueue->pcHead;
 805b2b4: 9902         	ldr	r1, [sp, #0x8]
 805b2b6: 6808         	ldr	r0, [r1]
 805b2b8: 6048         	str	r0, [r1, #0x4]
;             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 805b2ba: 9902         	ldr	r1, [sp, #0x8]
 805b2bc: 680b         	ldr	r3, [r1]
 805b2be: 6bc8         	ldr	r0, [r1, #0x3c]
 805b2c0: 6c0a         	ldr	r2, [r1, #0x40]
 805b2c2: 3801         	subs	r0, #0x1
 805b2c4: fb00 3002    	mla	r0, r0, r2, r3
 805b2c8: 60c8         	str	r0, [r1, #0xc]
;             pxQueue->cRxLock = queueUNLOCKED;
 805b2ca: 9902         	ldr	r1, [sp, #0x8]
 805b2cc: 20ff         	movs	r0, #0xff
 805b2ce: f881 0044    	strb.w	r0, [r1, #0x44]
;             pxQueue->cTxLock = queueUNLOCKED;
 805b2d2: 9902         	ldr	r1, [sp, #0x8]
 805b2d4: f881 0045    	strb.w	r0, [r1, #0x45]
;             if( xNewQueue == pdFALSE )
 805b2d8: 9804         	ldr	r0, [sp, #0x10]
 805b2da: b988         	cbnz	r0, 0x805b300 <xQueueGenericReset+0xc4> @ imm = #0x22
 805b2dc: e7ff         	b	0x805b2de <xQueueGenericReset+0xa2> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805b2de: 9802         	ldr	r0, [sp, #0x8]
 805b2e0: 6900         	ldr	r0, [r0, #0x10]
 805b2e2: b158         	cbz	r0, 0x805b2fc <xQueueGenericReset+0xc0> @ imm = #0x16
 805b2e4: e7ff         	b	0x805b2e6 <xQueueGenericReset+0xaa> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805b2e6: 9802         	ldr	r0, [sp, #0x8]
 805b2e8: 3010         	adds	r0, #0x10
 805b2ea: 4917         	ldr	r1, [pc, #0x5c]         @ 0x805b348 <xQueueGenericReset+0x10c>
 805b2ec: 4788         	blx	r1
 805b2ee: b118         	cbz	r0, 0x805b2f8 <xQueueGenericReset+0xbc> @ imm = #0x6
 805b2f0: e7ff         	b	0x805b2f2 <xQueueGenericReset+0xb6> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805b2f2: 4816         	ldr	r0, [pc, #0x58]         @ 0x805b34c <xQueueGenericReset+0x110>
 805b2f4: 4780         	blx	r0
;                     }
 805b2f6: e000         	b	0x805b2fa <xQueueGenericReset+0xbe> @ imm = #0x0
 805b2f8: e7ff         	b	0x805b2fa <xQueueGenericReset+0xbe> @ imm = #-0x2
;                 }
 805b2fa: e000         	b	0x805b2fe <xQueueGenericReset+0xc2> @ imm = #0x0
 805b2fc: e7ff         	b	0x805b2fe <xQueueGenericReset+0xc2> @ imm = #-0x2
;             }
 805b2fe: e008         	b	0x805b312 <xQueueGenericReset+0xd6> @ imm = #0x10
;                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 805b300: 9802         	ldr	r0, [sp, #0x8]
 805b302: 3010         	adds	r0, #0x10
 805b304: 490e         	ldr	r1, [pc, #0x38]         @ 0x805b340 <xQueueGenericReset+0x104>
 805b306: 4788         	blx	r1
;                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 805b308: 9802         	ldr	r0, [sp, #0x8]
 805b30a: 3024         	adds	r0, #0x24
 805b30c: 490d         	ldr	r1, [pc, #0x34]         @ 0x805b344 <xQueueGenericReset+0x108>
 805b30e: 4788         	blx	r1
 805b310: e7ff         	b	0x805b312 <xQueueGenericReset+0xd6> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805b312: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805b350 <xQueueGenericReset+0x114>
 805b314: 4780         	blx	r0
;     }
 805b316: e002         	b	0x805b31e <xQueueGenericReset+0xe2> @ imm = #0x4
 805b318: 2000         	movs	r0, #0x0
;         xReturn = pdFAIL;
 805b31a: 9003         	str	r0, [sp, #0xc]
 805b31c: e7ff         	b	0x805b31e <xQueueGenericReset+0xe2> @ imm = #-0x2
;     configASSERT( xReturn != pdFAIL );
 805b31e: 9803         	ldr	r0, [sp, #0xc]
 805b320: b920         	cbnz	r0, 0x805b32c <xQueueGenericReset+0xf0> @ imm = #0x8
 805b322: e7ff         	b	0x805b324 <xQueueGenericReset+0xe8> @ imm = #-0x2
 805b324: 480c         	ldr	r0, [pc, #0x30]         @ 0x805b358 <xQueueGenericReset+0x11c>
 805b326: 4780         	blx	r0
 805b328: e7ff         	b	0x805b32a <xQueueGenericReset+0xee> @ imm = #-0x2
 805b32a: e7fe         	b	0x805b32a <xQueueGenericReset+0xee> @ imm = #-0x4
;     return xReturn;
 805b32c: 9803         	ldr	r0, [sp, #0xc]
 805b32e: 9001         	str	r0, [sp, #0x4]
 805b330: 4808         	ldr	r0, [pc, #0x20]         @ 0x805b354 <xQueueGenericReset+0x118>
 805b332: 4780         	blx	r0
 805b334: 9801         	ldr	r0, [sp, #0x4]
 805b336: b006         	add	sp, #0x18
 805b338: bd80         	pop	{r7, pc}
 805b33a: bf00         	nop

0805b33c <$d.1>:
 805b33c: 05 e1 05 08  	.word	0x0805e105
 805b340: 51 b0 05 08  	.word	0x0805b051
 805b344: 51 b0 05 08  	.word	0x0805b051
 805b348: 0d 73 05 08  	.word	0x0805730d
 805b34c: c5 e0 05 08  	.word	0x0805e0c5
 805b350: 4d e1 05 08  	.word	0x0805e14d
 805b354: 21 05 06 08  	.word	0x08060521
 805b358: 55 ec 05 08  	.word	0x0805ec55
 805b35c: 55 ec 05 08  	.word	0x0805ec55

0805b360 <xQueueGenericCreate>:
;     {
 805b360: b5d0         	push	{r4, r6, r7, lr}
 805b362: af02         	add	r7, sp, #0x8
 805b364: b088         	sub	sp, #0x20
 805b366: f643 5c40    	movw	r12, #0x3d40
 805b36a: f2c2 0c00    	movt	r12, #0x2000
 805b36e: f8dc 3000    	ldr.w	r3, [r12]
 805b372: f642 5440    	movw	r4, #0x2d40
 805b376: f2c2 0400    	movt	r4, #0x2000
 805b37a: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805b37e: 3301         	adds	r3, #0x1
 805b380: f8cc 3000    	str.w	r3, [r12]
 805b384: 9007         	str	r0, [sp, #0x1c]
 805b386: 9106         	str	r1, [sp, #0x18]
 805b388: f807 2c11    	strb	r2, [r7, #-17]
 805b38c: 2000         	movs	r0, #0x0
;         Queue_t * pxNewQueue = NULL;
 805b38e: 9004         	str	r0, [sp, #0x10]
;         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 805b390: 9807         	ldr	r0, [sp, #0x1c]
 805b392: b388         	cbz	r0, 0x805b3f8 <xQueueGenericCreate+0x98> @ imm = #0x62
 805b394: e7ff         	b	0x805b396 <xQueueGenericCreate+0x36> @ imm = #-0x2
;             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 805b396: 9907         	ldr	r1, [sp, #0x1c]
 805b398: f04f 30ff    	mov.w	r0, #0xffffffff
 805b39c: fbb0 f0f1    	udiv	r0, r0, r1
 805b3a0: 9906         	ldr	r1, [sp, #0x18]
 805b3a2: 4288         	cmp	r0, r1
 805b3a4: d328         	blo	0x805b3f8 <xQueueGenericCreate+0x98> @ imm = #0x50
 805b3a6: e7ff         	b	0x805b3a8 <xQueueGenericCreate+0x48> @ imm = #-0x2
;             ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 805b3a8: 9807         	ldr	r0, [sp, #0x1c]
 805b3aa: 9906         	ldr	r1, [sp, #0x18]
 805b3ac: 4348         	muls	r0, r1, r0
;         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 805b3ae: f110 0f51    	cmn.w	r0, #0x51
 805b3b2: d821         	bhi	0x805b3f8 <xQueueGenericCreate+0x98> @ imm = #0x42
 805b3b4: e7ff         	b	0x805b3b6 <xQueueGenericCreate+0x56> @ imm = #-0x2
;             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805b3b6: 9807         	ldr	r0, [sp, #0x1c]
 805b3b8: 9906         	ldr	r1, [sp, #0x18]
 805b3ba: 4348         	muls	r0, r1, r0
 805b3bc: 9003         	str	r0, [sp, #0xc]
;             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 805b3be: 9803         	ldr	r0, [sp, #0xc]
 805b3c0: 3050         	adds	r0, #0x50
 805b3c2: 4916         	ldr	r1, [pc, #0x58]         @ 0x805b41c <xQueueGenericCreate+0xbc>
 805b3c4: 4788         	blx	r1
 805b3c6: 9004         	str	r0, [sp, #0x10]
;             if( pxNewQueue != NULL )
 805b3c8: 9804         	ldr	r0, [sp, #0x10]
 805b3ca: b198         	cbz	r0, 0x805b3f4 <xQueueGenericCreate+0x94> @ imm = #0x26
 805b3cc: e7ff         	b	0x805b3ce <xQueueGenericCreate+0x6e> @ imm = #-0x2
;                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 805b3ce: 9804         	ldr	r0, [sp, #0x10]
 805b3d0: 9002         	str	r0, [sp, #0x8]
;                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 805b3d2: 9802         	ldr	r0, [sp, #0x8]
 805b3d4: 3050         	adds	r0, #0x50
 805b3d6: 9002         	str	r0, [sp, #0x8]
;                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 805b3d8: 9807         	ldr	r0, [sp, #0x1c]
 805b3da: 9906         	ldr	r1, [sp, #0x18]
 805b3dc: 9a02         	ldr	r2, [sp, #0x8]
 805b3de: f817 3c11    	ldrb	r3, [r7, #-17]
 805b3e2: f8dd c010    	ldr.w	r12, [sp, #0x10]
 805b3e6: 46ee         	mov	lr, sp
 805b3e8: f8ce c000    	str.w	r12, [lr]
 805b3ec: f8df c030    	ldr.w	r12, [pc, #0x30]        @ 0x805b420 <xQueueGenericCreate+0xc0>
 805b3f0: 47e0         	blx	r12
;             }
 805b3f2: e000         	b	0x805b3f6 <xQueueGenericCreate+0x96> @ imm = #0x0
 805b3f4: e7ff         	b	0x805b3f6 <xQueueGenericCreate+0x96> @ imm = #-0x2
;         }
 805b3f6: e007         	b	0x805b408 <xQueueGenericCreate+0xa8> @ imm = #0xe
;             configASSERT( pxNewQueue );
 805b3f8: 9804         	ldr	r0, [sp, #0x10]
 805b3fa: b920         	cbnz	r0, 0x805b406 <xQueueGenericCreate+0xa6> @ imm = #0x8
 805b3fc: e7ff         	b	0x805b3fe <xQueueGenericCreate+0x9e> @ imm = #-0x2
 805b3fe: 4806         	ldr	r0, [pc, #0x18]         @ 0x805b418 <xQueueGenericCreate+0xb8>
 805b400: 4780         	blx	r0
 805b402: e7ff         	b	0x805b404 <xQueueGenericCreate+0xa4> @ imm = #-0x2
 805b404: e7fe         	b	0x805b404 <xQueueGenericCreate+0xa4> @ imm = #-0x4
 805b406: e7ff         	b	0x805b408 <xQueueGenericCreate+0xa8> @ imm = #-0x2
;         return pxNewQueue;
 805b408: 9804         	ldr	r0, [sp, #0x10]
 805b40a: 9001         	str	r0, [sp, #0x4]
 805b40c: 4805         	ldr	r0, [pc, #0x14]         @ 0x805b424 <xQueueGenericCreate+0xc4>
 805b40e: 4780         	blx	r0
 805b410: 9801         	ldr	r0, [sp, #0x4]
 805b412: b008         	add	sp, #0x20
 805b414: bdd0         	pop	{r4, r6, r7, pc}
 805b416: bf00         	nop

0805b418 <$d.3>:
 805b418: 55 ec 05 08  	.word	0x0805ec55
 805b41c: 75 a0 05 08  	.word	0x0805a075
 805b420: 29 b4 05 08  	.word	0x0805b429
 805b424: 21 05 06 08  	.word	0x08060521

0805b428 <prvInitialiseNewQueue>:
; {
 805b428: b5b0         	push	{r4, r5, r7, lr}
 805b42a: af02         	add	r7, sp, #0x8
 805b42c: b084         	sub	sp, #0x10
 805b42e: 4674         	mov	r4, lr
 805b430: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805b434: f643 5e40    	movw	lr, #0x3d40
 805b438: f2c2 0e00    	movt	lr, #0x2000
 805b43c: f8de c000    	ldr.w	r12, [lr]
 805b440: f642 5540    	movw	r5, #0x2d40
 805b444: f2c2 0500    	movt	r5, #0x2000
 805b448: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805b44c: f10c 0c01    	add.w	r12, r12, #0x1
 805b450: f8ce c000    	str.w	r12, [lr]
 805b454: 9003         	str	r0, [sp, #0xc]
 805b456: 9102         	str	r1, [sp, #0x8]
 805b458: 9201         	str	r2, [sp, #0x4]
 805b45a: f807 3c15    	strb	r3, [r7, #-21]
;     if( uxItemSize == ( UBaseType_t ) 0 )
 805b45e: 9802         	ldr	r0, [sp, #0x8]
 805b460: b918         	cbnz	r0, 0x805b46a <prvInitialiseNewQueue+0x42> @ imm = #0x6
 805b462: e7ff         	b	0x805b464 <prvInitialiseNewQueue+0x3c> @ imm = #-0x2
;         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 805b464: 68b8         	ldr	r0, [r7, #0x8]
 805b466: 6000         	str	r0, [r0]
;     }
 805b468: e003         	b	0x805b472 <prvInitialiseNewQueue+0x4a> @ imm = #0x6
;         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 805b46a: 9801         	ldr	r0, [sp, #0x4]
 805b46c: 68b9         	ldr	r1, [r7, #0x8]
 805b46e: 6008         	str	r0, [r1]
 805b470: e7ff         	b	0x805b472 <prvInitialiseNewQueue+0x4a> @ imm = #-0x2
;     pxNewQueue->uxLength = uxQueueLength;
 805b472: 9803         	ldr	r0, [sp, #0xc]
 805b474: 68b9         	ldr	r1, [r7, #0x8]
 805b476: 63c8         	str	r0, [r1, #0x3c]
;     pxNewQueue->uxItemSize = uxItemSize;
 805b478: 9802         	ldr	r0, [sp, #0x8]
 805b47a: 68b9         	ldr	r1, [r7, #0x8]
 805b47c: 6408         	str	r0, [r1, #0x40]
;     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 805b47e: 68b8         	ldr	r0, [r7, #0x8]
 805b480: 4a05         	ldr	r2, [pc, #0x14]         @ 0x805b498 <prvInitialiseNewQueue+0x70>
 805b482: 2101         	movs	r1, #0x1
 805b484: 4790         	blx	r2
;         pxNewQueue->ucQueueType = ucQueueType;
 805b486: f817 0c15    	ldrb	r0, [r7, #-21]
 805b48a: 68b9         	ldr	r1, [r7, #0x8]
 805b48c: f881 004c    	strb.w	r0, [r1, #0x4c]
; }
 805b490: 4802         	ldr	r0, [pc, #0x8]          @ 0x805b49c <prvInitialiseNewQueue+0x74>
 805b492: 4780         	blx	r0
 805b494: b004         	add	sp, #0x10
 805b496: bdb0         	pop	{r4, r5, r7, pc}

0805b498 <$d.5>:
 805b498: 3d b2 05 08  	.word	0x0805b23d
 805b49c: 21 05 06 08  	.word	0x08060521

0805b4a0 <xQueueCreateMutex>:
;     {
 805b4a0: b580         	push	{r7, lr}
 805b4a2: 466f         	mov	r7, sp
 805b4a4: b086         	sub	sp, #0x18
 805b4a6: f643 5240    	movw	r2, #0x3d40
 805b4aa: f2c2 0200    	movt	r2, #0x2000
 805b4ae: 6811         	ldr	r1, [r2]
 805b4b0: f642 5340    	movw	r3, #0x2d40
 805b4b4: f2c2 0300    	movt	r3, #0x2000
 805b4b8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b4bc: 3101         	adds	r1, #0x1
 805b4be: 6011         	str	r1, [r2]
 805b4c0: f807 0c01    	strb	r0, [r7, #-1]
 805b4c4: 2001         	movs	r0, #0x1
;         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 805b4c6: 9003         	str	r0, [sp, #0xc]
 805b4c8: 2100         	movs	r1, #0x0
 805b4ca: 9102         	str	r1, [sp, #0x8]
;         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 805b4cc: f817 2c01    	ldrb	r2, [r7, #-1]
 805b4d0: 4b06         	ldr	r3, [pc, #0x18]         @ 0x805b4ec <xQueueCreateMutex+0x4c>
 805b4d2: 4798         	blx	r3
 805b4d4: 9004         	str	r0, [sp, #0x10]
;         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 805b4d6: 9804         	ldr	r0, [sp, #0x10]
 805b4d8: 4905         	ldr	r1, [pc, #0x14]         @ 0x805b4f0 <xQueueCreateMutex+0x50>
 805b4da: 4788         	blx	r1
;         return xNewQueue;
 805b4dc: 9804         	ldr	r0, [sp, #0x10]
 805b4de: 9001         	str	r0, [sp, #0x4]
 805b4e0: 4804         	ldr	r0, [pc, #0x10]         @ 0x805b4f4 <xQueueCreateMutex+0x54>
 805b4e2: 4780         	blx	r0
 805b4e4: 9801         	ldr	r0, [sp, #0x4]
 805b4e6: b006         	add	sp, #0x18
 805b4e8: bd80         	pop	{r7, pc}
 805b4ea: bf00         	nop

0805b4ec <$d.7>:
 805b4ec: 61 b3 05 08  	.word	0x0805b361
 805b4f0: f9 b4 05 08  	.word	0x0805b4f9
 805b4f4: 21 05 06 08  	.word	0x08060521

0805b4f8 <prvInitialiseMutex>:
;     {
 805b4f8: b580         	push	{r7, lr}
 805b4fa: 466f         	mov	r7, sp
 805b4fc: b082         	sub	sp, #0x8
 805b4fe: f643 5240    	movw	r2, #0x3d40
 805b502: f2c2 0200    	movt	r2, #0x2000
 805b506: 6811         	ldr	r1, [r2]
 805b508: f642 5340    	movw	r3, #0x2d40
 805b50c: f2c2 0300    	movt	r3, #0x2000
 805b510: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b514: 3101         	adds	r1, #0x1
 805b516: 6011         	str	r1, [r2]
 805b518: 9001         	str	r0, [sp, #0x4]
;         if( pxNewQueue != NULL )
 805b51a: 9801         	ldr	r0, [sp, #0x4]
 805b51c: b170         	cbz	r0, 0x805b53c <prvInitialiseMutex+0x44> @ imm = #0x1c
 805b51e: e7ff         	b	0x805b520 <prvInitialiseMutex+0x28> @ imm = #-0x2
;             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 805b520: 9801         	ldr	r0, [sp, #0x4]
 805b522: 2300         	movs	r3, #0x0
 805b524: 6083         	str	r3, [r0, #0x8]
;             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 805b526: 9801         	ldr	r0, [sp, #0x4]
 805b528: 6003         	str	r3, [r0]
;             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 805b52a: 9801         	ldr	r0, [sp, #0x4]
 805b52c: 60c3         	str	r3, [r0, #0xc]
;             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 805b52e: 9801         	ldr	r0, [sp, #0x4]
 805b530: f8df c014    	ldr.w	r12, [pc, #0x14]        @ 0x805b548 <prvInitialiseMutex+0x50>
 805b534: 4619         	mov	r1, r3
 805b536: 461a         	mov	r2, r3
 805b538: 47e0         	blx	r12
;         }
 805b53a: e000         	b	0x805b53e <prvInitialiseMutex+0x46> @ imm = #0x0
 805b53c: e7ff         	b	0x805b53e <prvInitialiseMutex+0x46> @ imm = #-0x2
;     }
 805b53e: 4803         	ldr	r0, [pc, #0xc]          @ 0x805b54c <prvInitialiseMutex+0x54>
 805b540: 4780         	blx	r0
 805b542: b002         	add	sp, #0x8
 805b544: bd80         	pop	{r7, pc}
 805b546: bf00         	nop

0805b548 <$d.9>:
 805b548: b1 b6 05 08  	.word	0x0805b6b1
 805b54c: 21 05 06 08  	.word	0x08060521

0805b550 <xQueueGetMutexHolder>:
;     {
 805b550: b580         	push	{r7, lr}
 805b552: 466f         	mov	r7, sp
 805b554: b084         	sub	sp, #0x10
 805b556: f643 5240    	movw	r2, #0x3d40
 805b55a: f2c2 0200    	movt	r2, #0x2000
 805b55e: 6811         	ldr	r1, [r2]
 805b560: f642 5340    	movw	r3, #0x2d40
 805b564: f2c2 0300    	movt	r3, #0x2000
 805b568: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b56c: 3101         	adds	r1, #0x1
 805b56e: 6011         	str	r1, [r2]
 805b570: 9003         	str	r0, [sp, #0xc]
;         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 805b572: 9803         	ldr	r0, [sp, #0xc]
 805b574: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xSemaphore );
 805b576: 9803         	ldr	r0, [sp, #0xc]
 805b578: b920         	cbnz	r0, 0x805b584 <xQueueGetMutexHolder+0x34> @ imm = #0x8
 805b57a: e7ff         	b	0x805b57c <xQueueGetMutexHolder+0x2c> @ imm = #-0x2
 805b57c: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805b5bc <xQueueGetMutexHolder+0x6c>
 805b57e: 4780         	blx	r0
 805b580: e7ff         	b	0x805b582 <xQueueGetMutexHolder+0x32> @ imm = #-0x2
 805b582: e7fe         	b	0x805b582 <xQueueGetMutexHolder+0x32> @ imm = #-0x4
;         taskENTER_CRITICAL();
 805b584: 480a         	ldr	r0, [pc, #0x28]         @ 0x805b5b0 <xQueueGetMutexHolder+0x60>
 805b586: 4780         	blx	r0
;             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 805b588: 9801         	ldr	r0, [sp, #0x4]
 805b58a: 6800         	ldr	r0, [r0]
 805b58c: b920         	cbnz	r0, 0x805b598 <xQueueGetMutexHolder+0x48> @ imm = #0x8
 805b58e: e7ff         	b	0x805b590 <xQueueGetMutexHolder+0x40> @ imm = #-0x2
;                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 805b590: 9801         	ldr	r0, [sp, #0x4]
 805b592: 6880         	ldr	r0, [r0, #0x8]
 805b594: 9002         	str	r0, [sp, #0x8]
;             }
 805b596: e002         	b	0x805b59e <xQueueGetMutexHolder+0x4e> @ imm = #0x4
 805b598: 2000         	movs	r0, #0x0
;                 pxReturn = NULL;
 805b59a: 9002         	str	r0, [sp, #0x8]
 805b59c: e7ff         	b	0x805b59e <xQueueGetMutexHolder+0x4e> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805b59e: 4805         	ldr	r0, [pc, #0x14]         @ 0x805b5b4 <xQueueGetMutexHolder+0x64>
 805b5a0: 4780         	blx	r0
;         return pxReturn;
 805b5a2: 9802         	ldr	r0, [sp, #0x8]
 805b5a4: 9000         	str	r0, [sp]
 805b5a6: 4804         	ldr	r0, [pc, #0x10]         @ 0x805b5b8 <xQueueGetMutexHolder+0x68>
 805b5a8: 4780         	blx	r0
 805b5aa: 9800         	ldr	r0, [sp]
 805b5ac: b004         	add	sp, #0x10
 805b5ae: bd80         	pop	{r7, pc}

0805b5b0 <$d.11>:
 805b5b0: 05 e1 05 08  	.word	0x0805e105
 805b5b4: 4d e1 05 08  	.word	0x0805e14d
 805b5b8: 21 05 06 08  	.word	0x08060521
 805b5bc: 55 ec 05 08  	.word	0x0805ec55

0805b5c0 <xQueueGetMutexHolderFromISR>:
;     {
 805b5c0: b580         	push	{r7, lr}
 805b5c2: 466f         	mov	r7, sp
 805b5c4: b084         	sub	sp, #0x10
 805b5c6: f643 5240    	movw	r2, #0x3d40
 805b5ca: f2c2 0200    	movt	r2, #0x2000
 805b5ce: 6811         	ldr	r1, [r2]
 805b5d0: f642 5340    	movw	r3, #0x2d40
 805b5d4: f2c2 0300    	movt	r3, #0x2000
 805b5d8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b5dc: 3101         	adds	r1, #0x1
 805b5de: 6011         	str	r1, [r2]
 805b5e0: 9003         	str	r0, [sp, #0xc]
;         configASSERT( xSemaphore );
 805b5e2: 9803         	ldr	r0, [sp, #0xc]
 805b5e4: b920         	cbnz	r0, 0x805b5f0 <xQueueGetMutexHolderFromISR+0x30> @ imm = #0x8
 805b5e6: e7ff         	b	0x805b5e8 <xQueueGetMutexHolderFromISR+0x28> @ imm = #-0x2
 805b5e8: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805b618 <xQueueGetMutexHolderFromISR+0x58>
 805b5ea: 4780         	blx	r0
 805b5ec: e7ff         	b	0x805b5ee <xQueueGetMutexHolderFromISR+0x2e> @ imm = #-0x2
 805b5ee: e7fe         	b	0x805b5ee <xQueueGetMutexHolderFromISR+0x2e> @ imm = #-0x4
;         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 805b5f0: 9803         	ldr	r0, [sp, #0xc]
 805b5f2: 6800         	ldr	r0, [r0]
 805b5f4: b920         	cbnz	r0, 0x805b600 <xQueueGetMutexHolderFromISR+0x40> @ imm = #0x8
 805b5f6: e7ff         	b	0x805b5f8 <xQueueGetMutexHolderFromISR+0x38> @ imm = #-0x2
;             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 805b5f8: 9803         	ldr	r0, [sp, #0xc]
 805b5fa: 6880         	ldr	r0, [r0, #0x8]
 805b5fc: 9002         	str	r0, [sp, #0x8]
;         }
 805b5fe: e002         	b	0x805b606 <xQueueGetMutexHolderFromISR+0x46> @ imm = #0x4
 805b600: 2000         	movs	r0, #0x0
;             pxReturn = NULL;
 805b602: 9002         	str	r0, [sp, #0x8]
 805b604: e7ff         	b	0x805b606 <xQueueGetMutexHolderFromISR+0x46> @ imm = #-0x2
;         return pxReturn;
 805b606: 9802         	ldr	r0, [sp, #0x8]
 805b608: 9001         	str	r0, [sp, #0x4]
 805b60a: 4802         	ldr	r0, [pc, #0x8]          @ 0x805b614 <xQueueGetMutexHolderFromISR+0x54>
 805b60c: 4780         	blx	r0
 805b60e: 9801         	ldr	r0, [sp, #0x4]
 805b610: b004         	add	sp, #0x10
 805b612: bd80         	pop	{r7, pc}

0805b614 <$d.13>:
 805b614: 21 05 06 08  	.word	0x08060521
 805b618: 55 ec 05 08  	.word	0x0805ec55

0805b61c <xQueueGiveMutexRecursive>:
;     {
 805b61c: b580         	push	{r7, lr}
 805b61e: 466f         	mov	r7, sp
 805b620: b086         	sub	sp, #0x18
 805b622: f643 5240    	movw	r2, #0x3d40
 805b626: f2c2 0200    	movt	r2, #0x2000
 805b62a: 6811         	ldr	r1, [r2]
 805b62c: f642 5340    	movw	r3, #0x2d40
 805b630: f2c2 0300    	movt	r3, #0x2000
 805b634: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805b638: 3101         	adds	r1, #0x1
 805b63a: 6011         	str	r1, [r2]
 805b63c: 9005         	str	r0, [sp, #0x14]
;         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 805b63e: 9805         	ldr	r0, [sp, #0x14]
 805b640: 9003         	str	r0, [sp, #0xc]
;         configASSERT( pxMutex );
 805b642: 9803         	ldr	r0, [sp, #0xc]
 805b644: b920         	cbnz	r0, 0x805b650 <xQueueGiveMutexRecursive+0x34> @ imm = #0x8
 805b646: e7ff         	b	0x805b648 <xQueueGiveMutexRecursive+0x2c> @ imm = #-0x2
 805b648: 4818         	ldr	r0, [pc, #0x60]         @ 0x805b6ac <xQueueGiveMutexRecursive+0x90>
 805b64a: 4780         	blx	r0
 805b64c: e7ff         	b	0x805b64e <xQueueGiveMutexRecursive+0x32> @ imm = #-0x2
 805b64e: e7fe         	b	0x805b64e <xQueueGiveMutexRecursive+0x32> @ imm = #-0x4
;         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 805b650: 9803         	ldr	r0, [sp, #0xc]
 805b652: 6880         	ldr	r0, [r0, #0x8]
 805b654: 9002         	str	r0, [sp, #0x8]
 805b656: 4812         	ldr	r0, [pc, #0x48]         @ 0x805b6a0 <xQueueGiveMutexRecursive+0x84>
 805b658: 4780         	blx	r0
 805b65a: 4601         	mov	r1, r0
 805b65c: 9802         	ldr	r0, [sp, #0x8]
 805b65e: 4288         	cmp	r0, r1
 805b660: d114         	bne	0x805b68c <xQueueGiveMutexRecursive+0x70> @ imm = #0x28
 805b662: e7ff         	b	0x805b664 <xQueueGiveMutexRecursive+0x48> @ imm = #-0x2
;             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 805b664: 9903         	ldr	r1, [sp, #0xc]
 805b666: 68c8         	ldr	r0, [r1, #0xc]
 805b668: 3801         	subs	r0, #0x1
 805b66a: 60c8         	str	r0, [r1, #0xc]
;             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 805b66c: 9803         	ldr	r0, [sp, #0xc]
 805b66e: 68c0         	ldr	r0, [r0, #0xc]
 805b670: b940         	cbnz	r0, 0x805b684 <xQueueGiveMutexRecursive+0x68> @ imm = #0x10
 805b672: e7ff         	b	0x805b674 <xQueueGiveMutexRecursive+0x58> @ imm = #-0x2
;                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 805b674: 9803         	ldr	r0, [sp, #0xc]
 805b676: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805b6a4 <xQueueGiveMutexRecursive+0x88>
 805b67a: 2300         	movs	r3, #0x0
 805b67c: 4619         	mov	r1, r3
 805b67e: 461a         	mov	r2, r3
 805b680: 47e0         	blx	r12
;             }
 805b682: e000         	b	0x805b686 <xQueueGiveMutexRecursive+0x6a> @ imm = #0x0
 805b684: e7ff         	b	0x805b686 <xQueueGiveMutexRecursive+0x6a> @ imm = #-0x2
 805b686: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805b688: 9004         	str	r0, [sp, #0x10]
;         }
 805b68a: e002         	b	0x805b692 <xQueueGiveMutexRecursive+0x76> @ imm = #0x4
 805b68c: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805b68e: 9004         	str	r0, [sp, #0x10]
 805b690: e7ff         	b	0x805b692 <xQueueGiveMutexRecursive+0x76> @ imm = #-0x2
;         return xReturn;
 805b692: 9804         	ldr	r0, [sp, #0x10]
 805b694: 9001         	str	r0, [sp, #0x4]
 805b696: 4804         	ldr	r0, [pc, #0x10]         @ 0x805b6a8 <xQueueGiveMutexRecursive+0x8c>
 805b698: 4780         	blx	r0
 805b69a: 9801         	ldr	r0, [sp, #0x4]
 805b69c: b006         	add	sp, #0x18
 805b69e: bd80         	pop	{r7, pc}

0805b6a0 <$d.15>:
 805b6a0: bd 7b 05 08  	.word	0x08057bbd
 805b6a4: b1 b6 05 08  	.word	0x0805b6b1
 805b6a8: 21 05 06 08  	.word	0x08060521
 805b6ac: 55 ec 05 08  	.word	0x0805ec55

0805b6b0 <xQueueGenericSend>:
; {
 805b6b0: b5b0         	push	{r4, r5, r7, lr}
 805b6b2: af02         	add	r7, sp, #0x8
 805b6b4: b08e         	sub	sp, #0x38
 805b6b6: 4674         	mov	r4, lr
 805b6b8: f643 5e40    	movw	lr, #0x3d40
 805b6bc: f2c2 0e00    	movt	lr, #0x2000
 805b6c0: f8de c000    	ldr.w	r12, [lr]
 805b6c4: f642 5540    	movw	r5, #0x2d40
 805b6c8: f2c2 0500    	movt	r5, #0x2000
 805b6cc: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805b6d0: f10c 0c01    	add.w	r12, r12, #0x1
 805b6d4: f8ce c000    	str.w	r12, [lr]
 805b6d8: 900c         	str	r0, [sp, #0x30]
 805b6da: 910b         	str	r1, [sp, #0x2c]
 805b6dc: 920a         	str	r2, [sp, #0x28]
 805b6de: 9309         	str	r3, [sp, #0x24]
 805b6e0: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 805b6e2: 9008         	str	r0, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805b6e4: 980c         	ldr	r0, [sp, #0x30]
 805b6e6: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxQueue );
 805b6e8: 9804         	ldr	r0, [sp, #0x10]
 805b6ea: b920         	cbnz	r0, 0x805b6f6 <xQueueGenericSend+0x46> @ imm = #0x8
 805b6ec: e7ff         	b	0x805b6ee <xQueueGenericSend+0x3e> @ imm = #-0x2
 805b6ee: 4886         	ldr	r0, [pc, #0x218]        @ 0x805b908 <xQueueGenericSend+0x258>
 805b6f0: 4780         	blx	r0
 805b6f2: e7ff         	b	0x805b6f4 <xQueueGenericSend+0x44> @ imm = #-0x2
 805b6f4: e7fe         	b	0x805b6f4 <xQueueGenericSend+0x44> @ imm = #-0x4
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805b6f6: 990b         	ldr	r1, [sp, #0x2c]
 805b6f8: 2000         	movs	r0, #0x0
 805b6fa: 9003         	str	r0, [sp, #0xc]
 805b6fc: b939         	cbnz	r1, 0x805b70e <xQueueGenericSend+0x5e> @ imm = #0xe
 805b6fe: e7ff         	b	0x805b700 <xQueueGenericSend+0x50> @ imm = #-0x2
 805b700: 9804         	ldr	r0, [sp, #0x10]
 805b702: 6c00         	ldr	r0, [r0, #0x40]
 805b704: 2800         	cmp	r0, #0x0
 805b706: bf18         	it	ne
 805b708: 2001         	movne	r0, #0x1
 805b70a: 9003         	str	r0, [sp, #0xc]
 805b70c: e7ff         	b	0x805b70e <xQueueGenericSend+0x5e> @ imm = #-0x2
 805b70e: 9803         	ldr	r0, [sp, #0xc]
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805b710: 07c0         	lsls	r0, r0, #0x1f
 805b712: b120         	cbz	r0, 0x805b71e <xQueueGenericSend+0x6e> @ imm = #0x8
 805b714: e7ff         	b	0x805b716 <xQueueGenericSend+0x66> @ imm = #-0x2
 805b716: 487b         	ldr	r0, [pc, #0x1ec]        @ 0x805b904 <xQueueGenericSend+0x254>
 805b718: 4780         	blx	r0
 805b71a: e7ff         	b	0x805b71c <xQueueGenericSend+0x6c> @ imm = #-0x2
 805b71c: e7fe         	b	0x805b71c <xQueueGenericSend+0x6c> @ imm = #-0x4
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805b71e: 9909         	ldr	r1, [sp, #0x24]
 805b720: 2000         	movs	r0, #0x0
 805b722: 2902         	cmp	r1, #0x2
 805b724: 9002         	str	r0, [sp, #0x8]
 805b726: d107         	bne	0x805b738 <xQueueGenericSend+0x88> @ imm = #0xe
 805b728: e7ff         	b	0x805b72a <xQueueGenericSend+0x7a> @ imm = #-0x2
 805b72a: 9804         	ldr	r0, [sp, #0x10]
 805b72c: 6bc0         	ldr	r0, [r0, #0x3c]
 805b72e: 3801         	subs	r0, #0x1
 805b730: bf18         	it	ne
 805b732: 2001         	movne	r0, #0x1
 805b734: 9002         	str	r0, [sp, #0x8]
 805b736: e7ff         	b	0x805b738 <xQueueGenericSend+0x88> @ imm = #-0x2
 805b738: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805b73a: 07c0         	lsls	r0, r0, #0x1f
 805b73c: b120         	cbz	r0, 0x805b748 <xQueueGenericSend+0x98> @ imm = #0x8
 805b73e: e7ff         	b	0x805b740 <xQueueGenericSend+0x90> @ imm = #-0x2
 805b740: 486f         	ldr	r0, [pc, #0x1bc]        @ 0x805b900 <xQueueGenericSend+0x250>
 805b742: 4780         	blx	r0
 805b744: e7ff         	b	0x805b746 <xQueueGenericSend+0x96> @ imm = #-0x2
 805b746: e7fe         	b	0x805b746 <xQueueGenericSend+0x96> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805b748: 4854         	ldr	r0, [pc, #0x150]        @ 0x805b89c <xQueueGenericSend+0x1ec>
 805b74a: 4780         	blx	r0
 805b74c: 4601         	mov	r1, r0
 805b74e: 2000         	movs	r0, #0x0
 805b750: 9001         	str	r0, [sp, #0x4]
 805b752: b931         	cbnz	r1, 0x805b762 <xQueueGenericSend+0xb2> @ imm = #0xc
 805b754: e7ff         	b	0x805b756 <xQueueGenericSend+0xa6> @ imm = #-0x2
 805b756: 980a         	ldr	r0, [sp, #0x28]
 805b758: 2800         	cmp	r0, #0x0
 805b75a: bf18         	it	ne
 805b75c: 2001         	movne	r0, #0x1
 805b75e: 9001         	str	r0, [sp, #0x4]
 805b760: e7ff         	b	0x805b762 <xQueueGenericSend+0xb2> @ imm = #-0x2
 805b762: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805b764: 07c0         	lsls	r0, r0, #0x1f
 805b766: b120         	cbz	r0, 0x805b772 <xQueueGenericSend+0xc2> @ imm = #0x8
 805b768: e7ff         	b	0x805b76a <xQueueGenericSend+0xba> @ imm = #-0x2
 805b76a: 4864         	ldr	r0, [pc, #0x190]        @ 0x805b8fc <xQueueGenericSend+0x24c>
 805b76c: 4780         	blx	r0
 805b76e: e7ff         	b	0x805b770 <xQueueGenericSend+0xc0> @ imm = #-0x2
 805b770: e7fe         	b	0x805b770 <xQueueGenericSend+0xc0> @ imm = #-0x4
;     for( ; ; )
 805b772: e7ff         	b	0x805b774 <xQueueGenericSend+0xc4> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805b774: 484a         	ldr	r0, [pc, #0x128]        @ 0x805b8a0 <xQueueGenericSend+0x1f0>
 805b776: 4780         	blx	r0
;             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 805b778: 9804         	ldr	r0, [sp, #0x10]
 805b77a: 6b80         	ldr	r0, [r0, #0x38]
 805b77c: 9904         	ldr	r1, [sp, #0x10]
 805b77e: 6bc9         	ldr	r1, [r1, #0x3c]
 805b780: 4288         	cmp	r0, r1
 805b782: d304         	blo	0x805b78e <xQueueGenericSend+0xde> @ imm = #0x8
 805b784: e7ff         	b	0x805b786 <xQueueGenericSend+0xd6> @ imm = #-0x2
 805b786: 9809         	ldr	r0, [sp, #0x24]
 805b788: 2802         	cmp	r0, #0x2
 805b78a: d122         	bne	0x805b7d2 <xQueueGenericSend+0x122> @ imm = #0x44
 805b78c: e7ff         	b	0x805b78e <xQueueGenericSend+0xde> @ imm = #-0x2
;                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 805b78e: 9804         	ldr	r0, [sp, #0x10]
 805b790: 990b         	ldr	r1, [sp, #0x2c]
 805b792: 9a09         	ldr	r2, [sp, #0x24]
 805b794: 4b53         	ldr	r3, [pc, #0x14c]        @ 0x805b8e4 <xQueueGenericSend+0x234>
 805b796: 4798         	blx	r3
 805b798: 9007         	str	r0, [sp, #0x1c]
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805b79a: 9804         	ldr	r0, [sp, #0x10]
 805b79c: 6a40         	ldr	r0, [r0, #0x24]
 805b79e: b158         	cbz	r0, 0x805b7b8 <xQueueGenericSend+0x108> @ imm = #0x16
 805b7a0: e7ff         	b	0x805b7a2 <xQueueGenericSend+0xf2> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805b7a2: 9804         	ldr	r0, [sp, #0x10]
 805b7a4: 3024         	adds	r0, #0x24
 805b7a6: 4951         	ldr	r1, [pc, #0x144]        @ 0x805b8ec <xQueueGenericSend+0x23c>
 805b7a8: 4788         	blx	r1
 805b7aa: b118         	cbz	r0, 0x805b7b4 <xQueueGenericSend+0x104> @ imm = #0x6
 805b7ac: e7ff         	b	0x805b7ae <xQueueGenericSend+0xfe> @ imm = #-0x2
;                             queueYIELD_IF_USING_PREEMPTION();
 805b7ae: 4850         	ldr	r0, [pc, #0x140]        @ 0x805b8f0 <xQueueGenericSend+0x240>
 805b7b0: 4780         	blx	r0
;                         }
 805b7b2: e000         	b	0x805b7b6 <xQueueGenericSend+0x106> @ imm = #0x0
 805b7b4: e7ff         	b	0x805b7b6 <xQueueGenericSend+0x106> @ imm = #-0x2
;                     }
 805b7b6: e007         	b	0x805b7c8 <xQueueGenericSend+0x118> @ imm = #0xe
;                     else if( xYieldRequired != pdFALSE )
 805b7b8: 9807         	ldr	r0, [sp, #0x1c]
 805b7ba: b118         	cbz	r0, 0x805b7c4 <xQueueGenericSend+0x114> @ imm = #0x6
 805b7bc: e7ff         	b	0x805b7be <xQueueGenericSend+0x10e> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805b7be: 484a         	ldr	r0, [pc, #0x128]        @ 0x805b8e8 <xQueueGenericSend+0x238>
 805b7c0: 4780         	blx	r0
;                     }
 805b7c2: e000         	b	0x805b7c6 <xQueueGenericSend+0x116> @ imm = #0x0
 805b7c4: e7ff         	b	0x805b7c6 <xQueueGenericSend+0x116> @ imm = #-0x2
 805b7c6: e7ff         	b	0x805b7c8 <xQueueGenericSend+0x118> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805b7c8: 484a         	ldr	r0, [pc, #0x128]        @ 0x805b8f4 <xQueueGenericSend+0x244>
 805b7ca: 4780         	blx	r0
 805b7cc: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805b7ce: 900d         	str	r0, [sp, #0x34]
 805b7d0: e05c         	b	0x805b88c <xQueueGenericSend+0x1dc> @ imm = #0xb8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805b7d2: 980a         	ldr	r0, [sp, #0x28]
 805b7d4: b928         	cbnz	r0, 0x805b7e2 <xQueueGenericSend+0x132> @ imm = #0xa
 805b7d6: e7ff         	b	0x805b7d8 <xQueueGenericSend+0x128> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805b7d8: 4841         	ldr	r0, [pc, #0x104]        @ 0x805b8e0 <xQueueGenericSend+0x230>
 805b7da: 4780         	blx	r0
 805b7dc: 2000         	movs	r0, #0x0
;                     return errQUEUE_FULL;
 805b7de: 900d         	str	r0, [sp, #0x34]
 805b7e0: e054         	b	0x805b88c <xQueueGenericSend+0x1dc> @ imm = #0xa8
;                 else if( xEntryTimeSet == pdFALSE )
 805b7e2: 9808         	ldr	r0, [sp, #0x20]
 805b7e4: b930         	cbnz	r0, 0x805b7f4 <xQueueGenericSend+0x144> @ imm = #0xc
 805b7e6: e7ff         	b	0x805b7e8 <xQueueGenericSend+0x138> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805b7e8: 492e         	ldr	r1, [pc, #0xb8]         @ 0x805b8a4 <xQueueGenericSend+0x1f4>
 805b7ea: a805         	add	r0, sp, #0x14
 805b7ec: 4788         	blx	r1
 805b7ee: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805b7f0: 9008         	str	r0, [sp, #0x20]
;                 }
 805b7f2: e000         	b	0x805b7f6 <xQueueGenericSend+0x146> @ imm = #0x0
 805b7f4: e7ff         	b	0x805b7f6 <xQueueGenericSend+0x146> @ imm = #-0x2
 805b7f6: e7ff         	b	0x805b7f8 <xQueueGenericSend+0x148> @ imm = #-0x2
 805b7f8: e7ff         	b	0x805b7fa <xQueueGenericSend+0x14a> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805b7fa: 482b         	ldr	r0, [pc, #0xac]         @ 0x805b8a8 <xQueueGenericSend+0x1f8>
 805b7fc: 4780         	blx	r0
;         vTaskSuspendAll();
 805b7fe: 482b         	ldr	r0, [pc, #0xac]         @ 0x805b8ac <xQueueGenericSend+0x1fc>
 805b800: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805b802: 482b         	ldr	r0, [pc, #0xac]         @ 0x805b8b0 <xQueueGenericSend+0x200>
 805b804: 4780         	blx	r0
 805b806: 9804         	ldr	r0, [sp, #0x10]
 805b808: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805b80c: 3001         	adds	r0, #0x1
 805b80e: b928         	cbnz	r0, 0x805b81c <xQueueGenericSend+0x16c> @ imm = #0xa
 805b810: e7ff         	b	0x805b812 <xQueueGenericSend+0x162> @ imm = #-0x2
 805b812: 9904         	ldr	r1, [sp, #0x10]
 805b814: 2000         	movs	r0, #0x0
 805b816: f881 0044    	strb.w	r0, [r1, #0x44]
 805b81a: e7ff         	b	0x805b81c <xQueueGenericSend+0x16c> @ imm = #-0x2
 805b81c: 9804         	ldr	r0, [sp, #0x10]
 805b81e: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805b822: 3001         	adds	r0, #0x1
 805b824: b928         	cbnz	r0, 0x805b832 <xQueueGenericSend+0x182> @ imm = #0xa
 805b826: e7ff         	b	0x805b828 <xQueueGenericSend+0x178> @ imm = #-0x2
 805b828: 9904         	ldr	r1, [sp, #0x10]
 805b82a: 2000         	movs	r0, #0x0
 805b82c: f881 0045    	strb.w	r0, [r1, #0x45]
 805b830: e7ff         	b	0x805b832 <xQueueGenericSend+0x182> @ imm = #-0x2
 805b832: 4820         	ldr	r0, [pc, #0x80]         @ 0x805b8b4 <xQueueGenericSend+0x204>
 805b834: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805b836: 4a20         	ldr	r2, [pc, #0x80]         @ 0x805b8b8 <xQueueGenericSend+0x208>
 805b838: a805         	add	r0, sp, #0x14
 805b83a: a90a         	add	r1, sp, #0x28
 805b83c: 4790         	blx	r2
 805b83e: b9e0         	cbnz	r0, 0x805b87a <xQueueGenericSend+0x1ca> @ imm = #0x38
 805b840: e7ff         	b	0x805b842 <xQueueGenericSend+0x192> @ imm = #-0x2
;             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 805b842: 9804         	ldr	r0, [sp, #0x10]
 805b844: 491f         	ldr	r1, [pc, #0x7c]         @ 0x805b8c4 <xQueueGenericSend+0x214>
 805b846: 4788         	blx	r1
 805b848: b180         	cbz	r0, 0x805b86c <xQueueGenericSend+0x1bc> @ imm = #0x20
 805b84a: e7ff         	b	0x805b84c <xQueueGenericSend+0x19c> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 805b84c: 9804         	ldr	r0, [sp, #0x10]
 805b84e: 3010         	adds	r0, #0x10
 805b850: 990a         	ldr	r1, [sp, #0x28]
 805b852: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x805b8d0 <xQueueGenericSend+0x220>
 805b854: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805b856: 9804         	ldr	r0, [sp, #0x10]
 805b858: 491e         	ldr	r1, [pc, #0x78]         @ 0x805b8d4 <xQueueGenericSend+0x224>
 805b85a: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805b85c: 481e         	ldr	r0, [pc, #0x78]         @ 0x805b8d8 <xQueueGenericSend+0x228>
 805b85e: 4780         	blx	r0
 805b860: b918         	cbnz	r0, 0x805b86a <xQueueGenericSend+0x1ba> @ imm = #0x6
 805b862: e7ff         	b	0x805b864 <xQueueGenericSend+0x1b4> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805b864: 481d         	ldr	r0, [pc, #0x74]         @ 0x805b8dc <xQueueGenericSend+0x22c>
 805b866: 4780         	blx	r0
;                 }
 805b868: e7ff         	b	0x805b86a <xQueueGenericSend+0x1ba> @ imm = #-0x2
;             }
 805b86a: e005         	b	0x805b878 <xQueueGenericSend+0x1c8> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805b86c: 9804         	ldr	r0, [sp, #0x10]
 805b86e: 4916         	ldr	r1, [pc, #0x58]         @ 0x805b8c8 <xQueueGenericSend+0x218>
 805b870: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805b872: 4816         	ldr	r0, [pc, #0x58]         @ 0x805b8cc <xQueueGenericSend+0x21c>
 805b874: 4780         	blx	r0
 805b876: e7ff         	b	0x805b878 <xQueueGenericSend+0x1c8> @ imm = #-0x2
;         }
 805b878: e007         	b	0x805b88a <xQueueGenericSend+0x1da> @ imm = #0xe
;             prvUnlockQueue( pxQueue );
 805b87a: 9804         	ldr	r0, [sp, #0x10]
 805b87c: 490f         	ldr	r1, [pc, #0x3c]         @ 0x805b8bc <xQueueGenericSend+0x20c>
 805b87e: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805b880: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805b8c0 <xQueueGenericSend+0x210>
 805b882: 4780         	blx	r0
 805b884: 2000         	movs	r0, #0x0
;             return errQUEUE_FULL;
 805b886: 900d         	str	r0, [sp, #0x34]
 805b888: e000         	b	0x805b88c <xQueueGenericSend+0x1dc> @ imm = #0x0
;     for( ; ; )
 805b88a: e773         	b	0x805b774 <xQueueGenericSend+0xc4> @ imm = #-0x11a
; }
 805b88c: 980d         	ldr	r0, [sp, #0x34]
 805b88e: 9000         	str	r0, [sp]
 805b890: 4819         	ldr	r0, [pc, #0x64]         @ 0x805b8f8 <xQueueGenericSend+0x248>
 805b892: 4780         	blx	r0
 805b894: 9800         	ldr	r0, [sp]
 805b896: b00e         	add	sp, #0x38
 805b898: bdb0         	pop	{r4, r5, r7, pc}
 805b89a: bf00         	nop

0805b89c <$d.17>:
 805b89c: fd 7b 05 08  	.word	0x08057bfd
 805b8a0: 05 e1 05 08  	.word	0x0805e105
 805b8a4: 39 77 05 08  	.word	0x08057739
 805b8a8: 4d e1 05 08  	.word	0x0805e14d
 805b8ac: b9 59 05 08  	.word	0x080559b9
 805b8b0: 05 e1 05 08  	.word	0x0805e105
 805b8b4: 4d e1 05 08  	.word	0x0805e14d
 805b8b8: 85 77 05 08  	.word	0x08057785
 805b8bc: f5 bd 05 08  	.word	0x0805bdf5
 805b8c0: 29 5b 05 08  	.word	0x08055b29
 805b8c4: 95 bd 05 08  	.word	0x0805bd95
 805b8c8: f5 bd 05 08  	.word	0x0805bdf5
 805b8cc: 29 5b 05 08  	.word	0x08055b29
 805b8d0: 39 71 05 08  	.word	0x08057139
 805b8d4: f5 bd 05 08  	.word	0x0805bdf5
 805b8d8: 29 5b 05 08  	.word	0x08055b29
 805b8dc: c5 e0 05 08  	.word	0x0805e0c5
 805b8e0: 4d e1 05 08  	.word	0x0805e14d
 805b8e4: 91 bc 05 08  	.word	0x0805bc91
 805b8e8: c5 e0 05 08  	.word	0x0805e0c5
 805b8ec: 0d 73 05 08  	.word	0x0805730d
 805b8f0: c5 e0 05 08  	.word	0x0805e0c5
 805b8f4: 4d e1 05 08  	.word	0x0805e14d
 805b8f8: 21 05 06 08  	.word	0x08060521
 805b8fc: 55 ec 05 08  	.word	0x0805ec55
 805b900: 55 ec 05 08  	.word	0x0805ec55
 805b904: 55 ec 05 08  	.word	0x0805ec55
 805b908: 55 ec 05 08  	.word	0x0805ec55

0805b90c <xQueueTakeMutexRecursive>:
;     {
 805b90c: b580         	push	{r7, lr}
 805b90e: 466f         	mov	r7, sp
 805b910: b086         	sub	sp, #0x18
 805b912: f643 5340    	movw	r3, #0x3d40
 805b916: f2c2 0300    	movt	r3, #0x2000
 805b91a: 681a         	ldr	r2, [r3]
 805b91c: f642 5c40    	movw	r12, #0x2d40
 805b920: f2c2 0c00    	movt	r12, #0x2000
 805b924: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805b928: 3201         	adds	r2, #0x1
 805b92a: 601a         	str	r2, [r3]
 805b92c: 9005         	str	r0, [sp, #0x14]
 805b92e: 9104         	str	r1, [sp, #0x10]
;         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 805b930: 9805         	ldr	r0, [sp, #0x14]
 805b932: 9002         	str	r0, [sp, #0x8]
;         configASSERT( pxMutex );
 805b934: 9802         	ldr	r0, [sp, #0x8]
 805b936: b920         	cbnz	r0, 0x805b942 <xQueueTakeMutexRecursive+0x36> @ imm = #0x8
 805b938: e7ff         	b	0x805b93a <xQueueTakeMutexRecursive+0x2e> @ imm = #-0x2
 805b93a: 4818         	ldr	r0, [pc, #0x60]         @ 0x805b99c <xQueueTakeMutexRecursive+0x90>
 805b93c: 4780         	blx	r0
 805b93e: e7ff         	b	0x805b940 <xQueueTakeMutexRecursive+0x34> @ imm = #-0x2
 805b940: e7fe         	b	0x805b940 <xQueueTakeMutexRecursive+0x34> @ imm = #-0x4
;         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 805b942: 9802         	ldr	r0, [sp, #0x8]
 805b944: 6880         	ldr	r0, [r0, #0x8]
 805b946: 9001         	str	r0, [sp, #0x4]
 805b948: 4811         	ldr	r0, [pc, #0x44]         @ 0x805b990 <xQueueTakeMutexRecursive+0x84>
 805b94a: 4780         	blx	r0
 805b94c: 4601         	mov	r1, r0
 805b94e: 9801         	ldr	r0, [sp, #0x4]
 805b950: 4288         	cmp	r0, r1
 805b952: d107         	bne	0x805b964 <xQueueTakeMutexRecursive+0x58> @ imm = #0xe
 805b954: e7ff         	b	0x805b956 <xQueueTakeMutexRecursive+0x4a> @ imm = #-0x2
;             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 805b956: 9902         	ldr	r1, [sp, #0x8]
 805b958: 68c8         	ldr	r0, [r1, #0xc]
 805b95a: 3001         	adds	r0, #0x1
 805b95c: 60c8         	str	r0, [r1, #0xc]
 805b95e: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805b960: 9003         	str	r0, [sp, #0xc]
;         }
 805b962: e00e         	b	0x805b982 <xQueueTakeMutexRecursive+0x76> @ imm = #0x1c
;             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 805b964: 9802         	ldr	r0, [sp, #0x8]
 805b966: 9904         	ldr	r1, [sp, #0x10]
 805b968: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x805b994 <xQueueTakeMutexRecursive+0x88>
 805b96a: 4790         	blx	r2
 805b96c: 9003         	str	r0, [sp, #0xc]
;             if( xReturn != pdFAIL )
 805b96e: 9803         	ldr	r0, [sp, #0xc]
 805b970: b128         	cbz	r0, 0x805b97e <xQueueTakeMutexRecursive+0x72> @ imm = #0xa
 805b972: e7ff         	b	0x805b974 <xQueueTakeMutexRecursive+0x68> @ imm = #-0x2
;                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 805b974: 9902         	ldr	r1, [sp, #0x8]
 805b976: 68c8         	ldr	r0, [r1, #0xc]
 805b978: 3001         	adds	r0, #0x1
 805b97a: 60c8         	str	r0, [r1, #0xc]
;             }
 805b97c: e000         	b	0x805b980 <xQueueTakeMutexRecursive+0x74> @ imm = #0x0
 805b97e: e7ff         	b	0x805b980 <xQueueTakeMutexRecursive+0x74> @ imm = #-0x2
 805b980: e7ff         	b	0x805b982 <xQueueTakeMutexRecursive+0x76> @ imm = #-0x2
;         return xReturn;
 805b982: 9803         	ldr	r0, [sp, #0xc]
 805b984: 9000         	str	r0, [sp]
 805b986: 4804         	ldr	r0, [pc, #0x10]         @ 0x805b998 <xQueueTakeMutexRecursive+0x8c>
 805b988: 4780         	blx	r0
 805b98a: 9800         	ldr	r0, [sp]
 805b98c: b006         	add	sp, #0x18
 805b98e: bd80         	pop	{r7, pc}

0805b990 <$d.19>:
 805b990: bd 7b 05 08  	.word	0x08057bbd
 805b994: a1 b9 05 08  	.word	0x0805b9a1
 805b998: 21 05 06 08  	.word	0x08060521
 805b99c: 55 ec 05 08  	.word	0x0805ec55

0805b9a0 <xQueueSemaphoreTake>:
; {
 805b9a0: b580         	push	{r7, lr}
 805b9a2: 466f         	mov	r7, sp
 805b9a4: b08c         	sub	sp, #0x30
 805b9a6: f643 5340    	movw	r3, #0x3d40
 805b9aa: f2c2 0300    	movt	r3, #0x2000
 805b9ae: 681a         	ldr	r2, [r3]
 805b9b0: f642 5c40    	movw	r12, #0x2d40
 805b9b4: f2c2 0c00    	movt	r12, #0x2000
 805b9b8: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805b9bc: 3201         	adds	r2, #0x1
 805b9be: 601a         	str	r2, [r3]
 805b9c0: 900a         	str	r0, [sp, #0x28]
 805b9c2: 9109         	str	r1, [sp, #0x24]
 805b9c4: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805b9c6: 9008         	str	r0, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805b9c8: 990a         	ldr	r1, [sp, #0x28]
 805b9ca: 9105         	str	r1, [sp, #0x14]
;         BaseType_t xInheritanceOccurred = pdFALSE;
 805b9cc: 9004         	str	r0, [sp, #0x10]
;     configASSERT( ( pxQueue ) );
 805b9ce: 9805         	ldr	r0, [sp, #0x14]
 805b9d0: b920         	cbnz	r0, 0x805b9dc <xQueueSemaphoreTake+0x3c> @ imm = #0x8
 805b9d2: e7ff         	b	0x805b9d4 <xQueueSemaphoreTake+0x34> @ imm = #-0x2
 805b9d4: 488d         	ldr	r0, [pc, #0x234]        @ 0x805bc0c <xQueueSemaphoreTake+0x26c>
 805b9d6: 4780         	blx	r0
 805b9d8: e7ff         	b	0x805b9da <xQueueSemaphoreTake+0x3a> @ imm = #-0x2
 805b9da: e7fe         	b	0x805b9da <xQueueSemaphoreTake+0x3a> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize == 0 );
 805b9dc: 9805         	ldr	r0, [sp, #0x14]
 805b9de: 6c00         	ldr	r0, [r0, #0x40]
 805b9e0: b120         	cbz	r0, 0x805b9ec <xQueueSemaphoreTake+0x4c> @ imm = #0x8
 805b9e2: e7ff         	b	0x805b9e4 <xQueueSemaphoreTake+0x44> @ imm = #-0x2
 805b9e4: 4888         	ldr	r0, [pc, #0x220]        @ 0x805bc08 <xQueueSemaphoreTake+0x268>
 805b9e6: 4780         	blx	r0
 805b9e8: e7ff         	b	0x805b9ea <xQueueSemaphoreTake+0x4a> @ imm = #-0x2
 805b9ea: e7fe         	b	0x805b9ea <xQueueSemaphoreTake+0x4a> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805b9ec: 4866         	ldr	r0, [pc, #0x198]        @ 0x805bb88 <xQueueSemaphoreTake+0x1e8>
 805b9ee: 4780         	blx	r0
 805b9f0: 4601         	mov	r1, r0
 805b9f2: 2000         	movs	r0, #0x0
 805b9f4: 9001         	str	r0, [sp, #0x4]
 805b9f6: b931         	cbnz	r1, 0x805ba06 <xQueueSemaphoreTake+0x66> @ imm = #0xc
 805b9f8: e7ff         	b	0x805b9fa <xQueueSemaphoreTake+0x5a> @ imm = #-0x2
 805b9fa: 9809         	ldr	r0, [sp, #0x24]
 805b9fc: 2800         	cmp	r0, #0x0
 805b9fe: bf18         	it	ne
 805ba00: 2001         	movne	r0, #0x1
 805ba02: 9001         	str	r0, [sp, #0x4]
 805ba04: e7ff         	b	0x805ba06 <xQueueSemaphoreTake+0x66> @ imm = #-0x2
 805ba06: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805ba08: 07c0         	lsls	r0, r0, #0x1f
 805ba0a: b120         	cbz	r0, 0x805ba16 <xQueueSemaphoreTake+0x76> @ imm = #0x8
 805ba0c: e7ff         	b	0x805ba0e <xQueueSemaphoreTake+0x6e> @ imm = #-0x2
 805ba0e: 487d         	ldr	r0, [pc, #0x1f4]        @ 0x805bc04 <xQueueSemaphoreTake+0x264>
 805ba10: 4780         	blx	r0
 805ba12: e7ff         	b	0x805ba14 <xQueueSemaphoreTake+0x74> @ imm = #-0x2
 805ba14: e7fe         	b	0x805ba14 <xQueueSemaphoreTake+0x74> @ imm = #-0x4
;     for( ; ; )
 805ba16: e7ff         	b	0x805ba18 <xQueueSemaphoreTake+0x78> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805ba18: 485c         	ldr	r0, [pc, #0x170]        @ 0x805bb8c <xQueueSemaphoreTake+0x1ec>
 805ba1a: 4780         	blx	r0
;             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 805ba1c: 9805         	ldr	r0, [sp, #0x14]
 805ba1e: 6b80         	ldr	r0, [r0, #0x38]
 805ba20: 9003         	str	r0, [sp, #0xc]
;             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 805ba22: 9803         	ldr	r0, [sp, #0xc]
 805ba24: b318         	cbz	r0, 0x805ba6e <xQueueSemaphoreTake+0xce> @ imm = #0x46
 805ba26: e7ff         	b	0x805ba28 <xQueueSemaphoreTake+0x88> @ imm = #-0x2
;                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 805ba28: 9803         	ldr	r0, [sp, #0xc]
 805ba2a: 3801         	subs	r0, #0x1
 805ba2c: 9905         	ldr	r1, [sp, #0x14]
 805ba2e: 6388         	str	r0, [r1, #0x38]
;                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805ba30: 9805         	ldr	r0, [sp, #0x14]
 805ba32: 6800         	ldr	r0, [r0]
 805ba34: b928         	cbnz	r0, 0x805ba42 <xQueueSemaphoreTake+0xa2> @ imm = #0xa
 805ba36: e7ff         	b	0x805ba38 <xQueueSemaphoreTake+0x98> @ imm = #-0x2
;                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 805ba38: 486d         	ldr	r0, [pc, #0x1b4]        @ 0x805bbf0 <xQueueSemaphoreTake+0x250>
 805ba3a: 4780         	blx	r0
 805ba3c: 9905         	ldr	r1, [sp, #0x14]
 805ba3e: 6088         	str	r0, [r1, #0x8]
;                     }
 805ba40: e000         	b	0x805ba44 <xQueueSemaphoreTake+0xa4> @ imm = #0x0
 805ba42: e7ff         	b	0x805ba44 <xQueueSemaphoreTake+0xa4> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805ba44: 9805         	ldr	r0, [sp, #0x14]
 805ba46: 6900         	ldr	r0, [r0, #0x10]
 805ba48: b158         	cbz	r0, 0x805ba62 <xQueueSemaphoreTake+0xc2> @ imm = #0x16
 805ba4a: e7ff         	b	0x805ba4c <xQueueSemaphoreTake+0xac> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805ba4c: 9805         	ldr	r0, [sp, #0x14]
 805ba4e: 3010         	adds	r0, #0x10
 805ba50: 4968         	ldr	r1, [pc, #0x1a0]        @ 0x805bbf4 <xQueueSemaphoreTake+0x254>
 805ba52: 4788         	blx	r1
 805ba54: b118         	cbz	r0, 0x805ba5e <xQueueSemaphoreTake+0xbe> @ imm = #0x6
 805ba56: e7ff         	b	0x805ba58 <xQueueSemaphoreTake+0xb8> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805ba58: 4867         	ldr	r0, [pc, #0x19c]        @ 0x805bbf8 <xQueueSemaphoreTake+0x258>
 805ba5a: 4780         	blx	r0
;                     }
 805ba5c: e000         	b	0x805ba60 <xQueueSemaphoreTake+0xc0> @ imm = #0x0
 805ba5e: e7ff         	b	0x805ba60 <xQueueSemaphoreTake+0xc0> @ imm = #-0x2
;                 }
 805ba60: e000         	b	0x805ba64 <xQueueSemaphoreTake+0xc4> @ imm = #0x0
 805ba62: e7ff         	b	0x805ba64 <xQueueSemaphoreTake+0xc4> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805ba64: 4865         	ldr	r0, [pc, #0x194]        @ 0x805bbfc <xQueueSemaphoreTake+0x25c>
 805ba66: 4780         	blx	r0
 805ba68: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805ba6a: 900b         	str	r0, [sp, #0x2c]
 805ba6c: e084         	b	0x805bb78 <xQueueSemaphoreTake+0x1d8> @ imm = #0x108
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805ba6e: 9809         	ldr	r0, [sp, #0x24]
 805ba70: b928         	cbnz	r0, 0x805ba7e <xQueueSemaphoreTake+0xde> @ imm = #0xa
 805ba72: e7ff         	b	0x805ba74 <xQueueSemaphoreTake+0xd4> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805ba74: 485d         	ldr	r0, [pc, #0x174]        @ 0x805bbec <xQueueSemaphoreTake+0x24c>
 805ba76: 4780         	blx	r0
 805ba78: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805ba7a: 900b         	str	r0, [sp, #0x2c]
 805ba7c: e07c         	b	0x805bb78 <xQueueSemaphoreTake+0x1d8> @ imm = #0xf8
;                 else if( xEntryTimeSet == pdFALSE )
 805ba7e: 9808         	ldr	r0, [sp, #0x20]
 805ba80: b930         	cbnz	r0, 0x805ba90 <xQueueSemaphoreTake+0xf0> @ imm = #0xc
 805ba82: e7ff         	b	0x805ba84 <xQueueSemaphoreTake+0xe4> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805ba84: 4942         	ldr	r1, [pc, #0x108]        @ 0x805bb90 <xQueueSemaphoreTake+0x1f0>
 805ba86: a806         	add	r0, sp, #0x18
 805ba88: 4788         	blx	r1
 805ba8a: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805ba8c: 9008         	str	r0, [sp, #0x20]
;                 }
 805ba8e: e000         	b	0x805ba92 <xQueueSemaphoreTake+0xf2> @ imm = #0x0
 805ba90: e7ff         	b	0x805ba92 <xQueueSemaphoreTake+0xf2> @ imm = #-0x2
 805ba92: e7ff         	b	0x805ba94 <xQueueSemaphoreTake+0xf4> @ imm = #-0x2
 805ba94: e7ff         	b	0x805ba96 <xQueueSemaphoreTake+0xf6> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805ba96: 483f         	ldr	r0, [pc, #0xfc]         @ 0x805bb94 <xQueueSemaphoreTake+0x1f4>
 805ba98: 4780         	blx	r0
;         vTaskSuspendAll();
 805ba9a: 483f         	ldr	r0, [pc, #0xfc]         @ 0x805bb98 <xQueueSemaphoreTake+0x1f8>
 805ba9c: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805ba9e: 483f         	ldr	r0, [pc, #0xfc]         @ 0x805bb9c <xQueueSemaphoreTake+0x1fc>
 805baa0: 4780         	blx	r0
 805baa2: 9805         	ldr	r0, [sp, #0x14]
 805baa4: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805baa8: 3001         	adds	r0, #0x1
 805baaa: b928         	cbnz	r0, 0x805bab8 <xQueueSemaphoreTake+0x118> @ imm = #0xa
 805baac: e7ff         	b	0x805baae <xQueueSemaphoreTake+0x10e> @ imm = #-0x2
 805baae: 9905         	ldr	r1, [sp, #0x14]
 805bab0: 2000         	movs	r0, #0x0
 805bab2: f881 0044    	strb.w	r0, [r1, #0x44]
 805bab6: e7ff         	b	0x805bab8 <xQueueSemaphoreTake+0x118> @ imm = #-0x2
 805bab8: 9805         	ldr	r0, [sp, #0x14]
 805baba: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805babe: 3001         	adds	r0, #0x1
 805bac0: b928         	cbnz	r0, 0x805bace <xQueueSemaphoreTake+0x12e> @ imm = #0xa
 805bac2: e7ff         	b	0x805bac4 <xQueueSemaphoreTake+0x124> @ imm = #-0x2
 805bac4: 9905         	ldr	r1, [sp, #0x14]
 805bac6: 2000         	movs	r0, #0x0
 805bac8: f881 0045    	strb.w	r0, [r1, #0x45]
 805bacc: e7ff         	b	0x805bace <xQueueSemaphoreTake+0x12e> @ imm = #-0x2
 805bace: 4834         	ldr	r0, [pc, #0xd0]         @ 0x805bba0 <xQueueSemaphoreTake+0x200>
 805bad0: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805bad2: 4a34         	ldr	r2, [pc, #0xd0]         @ 0x805bba4 <xQueueSemaphoreTake+0x204>
 805bad4: a806         	add	r0, sp, #0x18
 805bad6: a909         	add	r1, sp, #0x24
 805bad8: 4790         	blx	r2
 805bada: bb60         	cbnz	r0, 0x805bb36 <xQueueSemaphoreTake+0x196> @ imm = #0x58
 805badc: e7ff         	b	0x805bade <xQueueSemaphoreTake+0x13e> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805bade: 9805         	ldr	r0, [sp, #0x14]
 805bae0: 4938         	ldr	r1, [pc, #0xe0]         @ 0x805bbc4 <xQueueSemaphoreTake+0x224>
 805bae2: 4788         	blx	r1
 805bae4: b300         	cbz	r0, 0x805bb28 <xQueueSemaphoreTake+0x188> @ imm = #0x40
 805bae6: e7ff         	b	0x805bae8 <xQueueSemaphoreTake+0x148> @ imm = #-0x2
;                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805bae8: 9805         	ldr	r0, [sp, #0x14]
 805baea: 6800         	ldr	r0, [r0]
 805baec: b950         	cbnz	r0, 0x805bb04 <xQueueSemaphoreTake+0x164> @ imm = #0x14
 805baee: e7ff         	b	0x805baf0 <xQueueSemaphoreTake+0x150> @ imm = #-0x2
;                         taskENTER_CRITICAL();
 805baf0: 4837         	ldr	r0, [pc, #0xdc]         @ 0x805bbd0 <xQueueSemaphoreTake+0x230>
 805baf2: 4780         	blx	r0
;                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 805baf4: 9805         	ldr	r0, [sp, #0x14]
 805baf6: 6880         	ldr	r0, [r0, #0x8]
 805baf8: 4936         	ldr	r1, [pc, #0xd8]         @ 0x805bbd4 <xQueueSemaphoreTake+0x234>
 805bafa: 4788         	blx	r1
 805bafc: 9004         	str	r0, [sp, #0x10]
;                         taskEXIT_CRITICAL();
 805bafe: 4836         	ldr	r0, [pc, #0xd8]         @ 0x805bbd8 <xQueueSemaphoreTake+0x238>
 805bb00: 4780         	blx	r0
;                     }
 805bb02: e000         	b	0x805bb06 <xQueueSemaphoreTake+0x166> @ imm = #0x0
 805bb04: e7ff         	b	0x805bb06 <xQueueSemaphoreTake+0x166> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805bb06: 9805         	ldr	r0, [sp, #0x14]
 805bb08: 3024         	adds	r0, #0x24
 805bb0a: 9909         	ldr	r1, [sp, #0x24]
 805bb0c: 4a33         	ldr	r2, [pc, #0xcc]         @ 0x805bbdc <xQueueSemaphoreTake+0x23c>
 805bb0e: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805bb10: 9805         	ldr	r0, [sp, #0x14]
 805bb12: 4933         	ldr	r1, [pc, #0xcc]         @ 0x805bbe0 <xQueueSemaphoreTake+0x240>
 805bb14: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805bb16: 4833         	ldr	r0, [pc, #0xcc]         @ 0x805bbe4 <xQueueSemaphoreTake+0x244>
 805bb18: 4780         	blx	r0
 805bb1a: b918         	cbnz	r0, 0x805bb24 <xQueueSemaphoreTake+0x184> @ imm = #0x6
 805bb1c: e7ff         	b	0x805bb1e <xQueueSemaphoreTake+0x17e> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805bb1e: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805bbe8 <xQueueSemaphoreTake+0x248>
 805bb20: 4780         	blx	r0
;                 }
 805bb22: e000         	b	0x805bb26 <xQueueSemaphoreTake+0x186> @ imm = #0x0
 805bb24: e7ff         	b	0x805bb26 <xQueueSemaphoreTake+0x186> @ imm = #-0x2
;             }
 805bb26: e005         	b	0x805bb34 <xQueueSemaphoreTake+0x194> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805bb28: 9805         	ldr	r0, [sp, #0x14]
 805bb2a: 4927         	ldr	r1, [pc, #0x9c]         @ 0x805bbc8 <xQueueSemaphoreTake+0x228>
 805bb2c: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805bb2e: 4827         	ldr	r0, [pc, #0x9c]         @ 0x805bbcc <xQueueSemaphoreTake+0x22c>
 805bb30: 4780         	blx	r0
 805bb32: e7ff         	b	0x805bb34 <xQueueSemaphoreTake+0x194> @ imm = #-0x2
;         }
 805bb34: e01f         	b	0x805bb76 <xQueueSemaphoreTake+0x1d6> @ imm = #0x3e
;             prvUnlockQueue( pxQueue );
 805bb36: 9805         	ldr	r0, [sp, #0x14]
 805bb38: 491b         	ldr	r1, [pc, #0x6c]         @ 0x805bba8 <xQueueSemaphoreTake+0x208>
 805bb3a: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805bb3c: 481b         	ldr	r0, [pc, #0x6c]         @ 0x805bbac <xQueueSemaphoreTake+0x20c>
 805bb3e: 4780         	blx	r0
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805bb40: 9805         	ldr	r0, [sp, #0x14]
 805bb42: 491b         	ldr	r1, [pc, #0x6c]         @ 0x805bbb0 <xQueueSemaphoreTake+0x210>
 805bb44: 4788         	blx	r1
 805bb46: b1a0         	cbz	r0, 0x805bb72 <xQueueSemaphoreTake+0x1d2> @ imm = #0x28
 805bb48: e7ff         	b	0x805bb4a <xQueueSemaphoreTake+0x1aa> @ imm = #-0x2
;                     if( xInheritanceOccurred != pdFALSE )
 805bb4a: 9804         	ldr	r0, [sp, #0x10]
 805bb4c: b170         	cbz	r0, 0x805bb6c <xQueueSemaphoreTake+0x1cc> @ imm = #0x1c
 805bb4e: e7ff         	b	0x805bb50 <xQueueSemaphoreTake+0x1b0> @ imm = #-0x2
;                         taskENTER_CRITICAL();
 805bb50: 4818         	ldr	r0, [pc, #0x60]         @ 0x805bbb4 <xQueueSemaphoreTake+0x214>
 805bb52: 4780         	blx	r0
;                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 805bb54: 9805         	ldr	r0, [sp, #0x14]
 805bb56: 4918         	ldr	r1, [pc, #0x60]         @ 0x805bbb8 <xQueueSemaphoreTake+0x218>
 805bb58: 4788         	blx	r1
 805bb5a: 9002         	str	r0, [sp, #0x8]
;                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 805bb5c: 9805         	ldr	r0, [sp, #0x14]
 805bb5e: 6880         	ldr	r0, [r0, #0x8]
 805bb60: 9902         	ldr	r1, [sp, #0x8]
 805bb62: 4a16         	ldr	r2, [pc, #0x58]         @ 0x805bbbc <xQueueSemaphoreTake+0x21c>
 805bb64: 4790         	blx	r2
;                         taskEXIT_CRITICAL();
 805bb66: 4816         	ldr	r0, [pc, #0x58]         @ 0x805bbc0 <xQueueSemaphoreTake+0x220>
 805bb68: 4780         	blx	r0
;                     }
 805bb6a: e7ff         	b	0x805bb6c <xQueueSemaphoreTake+0x1cc> @ imm = #-0x2
 805bb6c: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805bb6e: 900b         	str	r0, [sp, #0x2c]
 805bb70: e002         	b	0x805bb78 <xQueueSemaphoreTake+0x1d8> @ imm = #0x4
 805bb72: e7ff         	b	0x805bb74 <xQueueSemaphoreTake+0x1d4> @ imm = #-0x2
 805bb74: e7ff         	b	0x805bb76 <xQueueSemaphoreTake+0x1d6> @ imm = #-0x2
;     for( ; ; )
 805bb76: e74f         	b	0x805ba18 <xQueueSemaphoreTake+0x78> @ imm = #-0x162
; }
 805bb78: 980b         	ldr	r0, [sp, #0x2c]
 805bb7a: 9000         	str	r0, [sp]
 805bb7c: 4820         	ldr	r0, [pc, #0x80]         @ 0x805bc00 <xQueueSemaphoreTake+0x260>
 805bb7e: 4780         	blx	r0
 805bb80: 9800         	ldr	r0, [sp]
 805bb82: b00c         	add	sp, #0x30
 805bb84: bd80         	pop	{r7, pc}
 805bb86: bf00         	nop

0805bb88 <$d.21>:
 805bb88: fd 7b 05 08  	.word	0x08057bfd
 805bb8c: 05 e1 05 08  	.word	0x0805e105
 805bb90: 39 77 05 08  	.word	0x08057739
 805bb94: 4d e1 05 08  	.word	0x0805e14d
 805bb98: b9 59 05 08  	.word	0x080559b9
 805bb9c: 05 e1 05 08  	.word	0x0805e105
 805bba0: 4d e1 05 08  	.word	0x0805e14d
 805bba4: 85 77 05 08  	.word	0x08057785
 805bba8: f5 bd 05 08  	.word	0x0805bdf5
 805bbac: 29 5b 05 08  	.word	0x08055b29
 805bbb0: 5d c4 05 08  	.word	0x0805c45d
 805bbb4: 05 e1 05 08  	.word	0x0805e105
 805bbb8: b5 c4 05 08  	.word	0x0805c4b5
 805bbbc: 8d 7f 05 08  	.word	0x08057f8d
 805bbc0: 4d e1 05 08  	.word	0x0805e14d
 805bbc4: 5d c4 05 08  	.word	0x0805c45d
 805bbc8: f5 bd 05 08  	.word	0x0805bdf5
 805bbcc: 29 5b 05 08  	.word	0x08055b29
 805bbd0: 05 e1 05 08  	.word	0x0805e105
 805bbd4: 61 7c 05 08  	.word	0x08057c61
 805bbd8: 4d e1 05 08  	.word	0x0805e14d
 805bbdc: 39 71 05 08  	.word	0x08057139
 805bbe0: f5 bd 05 08  	.word	0x0805bdf5
 805bbe4: 29 5b 05 08  	.word	0x08055b29
 805bbe8: c5 e0 05 08  	.word	0x0805e0c5
 805bbec: 4d e1 05 08  	.word	0x0805e14d
 805bbf0: 9d 81 05 08  	.word	0x0805819d
 805bbf4: 0d 73 05 08  	.word	0x0805730d
 805bbf8: c5 e0 05 08  	.word	0x0805e0c5
 805bbfc: 4d e1 05 08  	.word	0x0805e14d
 805bc00: 21 05 06 08  	.word	0x08060521
 805bc04: 55 ec 05 08  	.word	0x0805ec55
 805bc08: 55 ec 05 08  	.word	0x0805ec55
 805bc0c: 55 ec 05 08  	.word	0x0805ec55

0805bc10 <xQueueCreateCountingSemaphore>:
;     {
 805bc10: b580         	push	{r7, lr}
 805bc12: 466f         	mov	r7, sp
 805bc14: b084         	sub	sp, #0x10
 805bc16: f643 5340    	movw	r3, #0x3d40
 805bc1a: f2c2 0300    	movt	r3, #0x2000
 805bc1e: 681a         	ldr	r2, [r3]
 805bc20: f642 5c40    	movw	r12, #0x2d40
 805bc24: f2c2 0c00    	movt	r12, #0x2000
 805bc28: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805bc2c: 3201         	adds	r2, #0x1
 805bc2e: 601a         	str	r2, [r3]
 805bc30: 9003         	str	r0, [sp, #0xc]
 805bc32: 9102         	str	r1, [sp, #0x8]
 805bc34: 2000         	movs	r0, #0x0
;         QueueHandle_t xHandle = NULL;
 805bc36: 9001         	str	r0, [sp, #0x4]
;         if( ( uxMaxCount != 0 ) &&
 805bc38: 9803         	ldr	r0, [sp, #0xc]
 805bc3a: b1a0         	cbz	r0, 0x805bc66 <xQueueCreateCountingSemaphore+0x56> @ imm = #0x28
 805bc3c: e7ff         	b	0x805bc3e <xQueueCreateCountingSemaphore+0x2e> @ imm = #-0x2
;             ( uxInitialCount <= uxMaxCount ) )
 805bc3e: 9802         	ldr	r0, [sp, #0x8]
 805bc40: 9903         	ldr	r1, [sp, #0xc]
;         if( ( uxMaxCount != 0 ) &&
 805bc42: 4288         	cmp	r0, r1
 805bc44: d80f         	bhi	0x805bc66 <xQueueCreateCountingSemaphore+0x56> @ imm = #0x1e
 805bc46: e7ff         	b	0x805bc48 <xQueueCreateCountingSemaphore+0x38> @ imm = #-0x2
;             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 805bc48: 9803         	ldr	r0, [sp, #0xc]
 805bc4a: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x805bc88 <xQueueCreateCountingSemaphore+0x78>
 805bc4c: 2100         	movs	r1, #0x0
 805bc4e: 2202         	movs	r2, #0x2
 805bc50: 4798         	blx	r3
 805bc52: 9001         	str	r0, [sp, #0x4]
;             if( xHandle != NULL )
 805bc54: 9801         	ldr	r0, [sp, #0x4]
 805bc56: b120         	cbz	r0, 0x805bc62 <xQueueCreateCountingSemaphore+0x52> @ imm = #0x8
 805bc58: e7ff         	b	0x805bc5a <xQueueCreateCountingSemaphore+0x4a> @ imm = #-0x2
;                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 805bc5a: 9802         	ldr	r0, [sp, #0x8]
 805bc5c: 9901         	ldr	r1, [sp, #0x4]
 805bc5e: 6388         	str	r0, [r1, #0x38]
;             }
 805bc60: e000         	b	0x805bc64 <xQueueCreateCountingSemaphore+0x54> @ imm = #0x0
 805bc62: e7ff         	b	0x805bc64 <xQueueCreateCountingSemaphore+0x54> @ imm = #-0x2
;         }
 805bc64: e007         	b	0x805bc76 <xQueueCreateCountingSemaphore+0x66> @ imm = #0xe
;             configASSERT( xHandle );
 805bc66: 9801         	ldr	r0, [sp, #0x4]
 805bc68: b920         	cbnz	r0, 0x805bc74 <xQueueCreateCountingSemaphore+0x64> @ imm = #0x8
 805bc6a: e7ff         	b	0x805bc6c <xQueueCreateCountingSemaphore+0x5c> @ imm = #-0x2
 805bc6c: 4805         	ldr	r0, [pc, #0x14]         @ 0x805bc84 <xQueueCreateCountingSemaphore+0x74>
 805bc6e: 4780         	blx	r0
 805bc70: e7ff         	b	0x805bc72 <xQueueCreateCountingSemaphore+0x62> @ imm = #-0x2
 805bc72: e7fe         	b	0x805bc72 <xQueueCreateCountingSemaphore+0x62> @ imm = #-0x4
 805bc74: e7ff         	b	0x805bc76 <xQueueCreateCountingSemaphore+0x66> @ imm = #-0x2
;         return xHandle;
 805bc76: 9801         	ldr	r0, [sp, #0x4]
 805bc78: 9000         	str	r0, [sp]
 805bc7a: 4804         	ldr	r0, [pc, #0x10]         @ 0x805bc8c <xQueueCreateCountingSemaphore+0x7c>
 805bc7c: 4780         	blx	r0
 805bc7e: 9800         	ldr	r0, [sp]
 805bc80: b004         	add	sp, #0x10
 805bc82: bd80         	pop	{r7, pc}

0805bc84 <$d.23>:
 805bc84: 55 ec 05 08  	.word	0x0805ec55
 805bc88: 61 b3 05 08  	.word	0x0805b361
 805bc8c: 21 05 06 08  	.word	0x08060521

0805bc90 <prvCopyDataToQueue>:
; {
 805bc90: b5d0         	push	{r4, r6, r7, lr}
 805bc92: af02         	add	r7, sp, #0x8
 805bc94: b086         	sub	sp, #0x18
 805bc96: f643 5c40    	movw	r12, #0x3d40
 805bc9a: f2c2 0c00    	movt	r12, #0x2000
 805bc9e: f8dc 3000    	ldr.w	r3, [r12]
 805bca2: f642 5440    	movw	r4, #0x2d40
 805bca6: f2c2 0400    	movt	r4, #0x2000
 805bcaa: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805bcae: 3301         	adds	r3, #0x1
 805bcb0: f8cc 3000    	str.w	r3, [r12]
 805bcb4: 9005         	str	r0, [sp, #0x14]
 805bcb6: 9104         	str	r1, [sp, #0x10]
 805bcb8: 9203         	str	r2, [sp, #0xc]
 805bcba: 2000         	movs	r0, #0x0
;     BaseType_t xReturn = pdFALSE;
 805bcbc: 9002         	str	r0, [sp, #0x8]
;     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805bcbe: 9805         	ldr	r0, [sp, #0x14]
 805bcc0: 6b80         	ldr	r0, [r0, #0x38]
 805bcc2: 9001         	str	r0, [sp, #0x4]
;     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 805bcc4: 9805         	ldr	r0, [sp, #0x14]
 805bcc6: 6c00         	ldr	r0, [r0, #0x40]
 805bcc8: b978         	cbnz	r0, 0x805bcea <prvCopyDataToQueue+0x5a> @ imm = #0x1e
 805bcca: e7ff         	b	0x805bccc <prvCopyDataToQueue+0x3c> @ imm = #-0x2
;             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805bccc: 9805         	ldr	r0, [sp, #0x14]
 805bcce: 6800         	ldr	r0, [r0]
 805bcd0: b948         	cbnz	r0, 0x805bce6 <prvCopyDataToQueue+0x56> @ imm = #0x12
 805bcd2: e7ff         	b	0x805bcd4 <prvCopyDataToQueue+0x44> @ imm = #-0x2
;                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 805bcd4: 9805         	ldr	r0, [sp, #0x14]
 805bcd6: 6880         	ldr	r0, [r0, #0x8]
 805bcd8: 492c         	ldr	r1, [pc, #0xb0]         @ 0x805bd8c <prvCopyDataToQueue+0xfc>
 805bcda: 4788         	blx	r1
 805bcdc: 9002         	str	r0, [sp, #0x8]
;                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 805bcde: 9905         	ldr	r1, [sp, #0x14]
 805bce0: 2000         	movs	r0, #0x0
 805bce2: 6088         	str	r0, [r1, #0x8]
;             }
 805bce4: e000         	b	0x805bce8 <prvCopyDataToQueue+0x58> @ imm = #0x0
 805bce6: e7ff         	b	0x805bce8 <prvCopyDataToQueue+0x58> @ imm = #-0x2
;     }
 805bce8: e041         	b	0x805bd6e <prvCopyDataToQueue+0xde> @ imm = #0x82
;     else if( xPosition == queueSEND_TO_BACK )
 805bcea: 9803         	ldr	r0, [sp, #0xc]
 805bcec: b9b8         	cbnz	r0, 0x805bd1e <prvCopyDataToQueue+0x8e> @ imm = #0x2e
 805bcee: e7ff         	b	0x805bcf0 <prvCopyDataToQueue+0x60> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 805bcf0: 9a05         	ldr	r2, [sp, #0x14]
 805bcf2: 9904         	ldr	r1, [sp, #0x10]
 805bcf4: 6850         	ldr	r0, [r2, #0x4]
 805bcf6: 6c12         	ldr	r2, [r2, #0x40]
 805bcf8: 4b23         	ldr	r3, [pc, #0x8c]         @ 0x805bd88 <prvCopyDataToQueue+0xf8>
 805bcfa: 4798         	blx	r3
;         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 805bcfc: 9905         	ldr	r1, [sp, #0x14]
 805bcfe: 6848         	ldr	r0, [r1, #0x4]
 805bd00: 6c0a         	ldr	r2, [r1, #0x40]
 805bd02: 4410         	add	r0, r2
 805bd04: 6048         	str	r0, [r1, #0x4]
;         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 805bd06: 9905         	ldr	r1, [sp, #0x14]
 805bd08: 6848         	ldr	r0, [r1, #0x4]
 805bd0a: 6889         	ldr	r1, [r1, #0x8]
 805bd0c: 4288         	cmp	r0, r1
 805bd0e: d304         	blo	0x805bd1a <prvCopyDataToQueue+0x8a> @ imm = #0x8
 805bd10: e7ff         	b	0x805bd12 <prvCopyDataToQueue+0x82> @ imm = #-0x2
;             pxQueue->pcWriteTo = pxQueue->pcHead;
 805bd12: 9905         	ldr	r1, [sp, #0x14]
 805bd14: 6808         	ldr	r0, [r1]
 805bd16: 6048         	str	r0, [r1, #0x4]
;         }
 805bd18: e000         	b	0x805bd1c <prvCopyDataToQueue+0x8c> @ imm = #0x0
 805bd1a: e7ff         	b	0x805bd1c <prvCopyDataToQueue+0x8c> @ imm = #-0x2
;     }
 805bd1c: e026         	b	0x805bd6c <prvCopyDataToQueue+0xdc> @ imm = #0x4c
;         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 805bd1e: 9a05         	ldr	r2, [sp, #0x14]
 805bd20: 9904         	ldr	r1, [sp, #0x10]
 805bd22: 68d0         	ldr	r0, [r2, #0xc]
 805bd24: 6c12         	ldr	r2, [r2, #0x40]
 805bd26: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x805bd84 <prvCopyDataToQueue+0xf4>
 805bd28: 4798         	blx	r3
;         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 805bd2a: 9905         	ldr	r1, [sp, #0x14]
 805bd2c: 68c8         	ldr	r0, [r1, #0xc]
 805bd2e: 6c0a         	ldr	r2, [r1, #0x40]
 805bd30: 1a80         	subs	r0, r0, r2
 805bd32: 60c8         	str	r0, [r1, #0xc]
;         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 805bd34: 9805         	ldr	r0, [sp, #0x14]
 805bd36: 6801         	ldr	r1, [r0]
 805bd38: 68c0         	ldr	r0, [r0, #0xc]
 805bd3a: 4288         	cmp	r0, r1
 805bd3c: d206         	bhs	0x805bd4c <prvCopyDataToQueue+0xbc> @ imm = #0xc
 805bd3e: e7ff         	b	0x805bd40 <prvCopyDataToQueue+0xb0> @ imm = #-0x2
;             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 805bd40: 9905         	ldr	r1, [sp, #0x14]
 805bd42: 6888         	ldr	r0, [r1, #0x8]
 805bd44: 6c0a         	ldr	r2, [r1, #0x40]
 805bd46: 1a80         	subs	r0, r0, r2
 805bd48: 60c8         	str	r0, [r1, #0xc]
;         }
 805bd4a: e000         	b	0x805bd4e <prvCopyDataToQueue+0xbe> @ imm = #0x0
 805bd4c: e7ff         	b	0x805bd4e <prvCopyDataToQueue+0xbe> @ imm = #-0x2
;         if( xPosition == queueOVERWRITE )
 805bd4e: 9803         	ldr	r0, [sp, #0xc]
 805bd50: 2802         	cmp	r0, #0x2
 805bd52: d109         	bne	0x805bd68 <prvCopyDataToQueue+0xd8> @ imm = #0x12
 805bd54: e7ff         	b	0x805bd56 <prvCopyDataToQueue+0xc6> @ imm = #-0x2
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805bd56: 9801         	ldr	r0, [sp, #0x4]
 805bd58: b120         	cbz	r0, 0x805bd64 <prvCopyDataToQueue+0xd4> @ imm = #0x8
 805bd5a: e7ff         	b	0x805bd5c <prvCopyDataToQueue+0xcc> @ imm = #-0x2
;                 --uxMessagesWaiting;
 805bd5c: 9801         	ldr	r0, [sp, #0x4]
 805bd5e: 3801         	subs	r0, #0x1
 805bd60: 9001         	str	r0, [sp, #0x4]
;             }
 805bd62: e000         	b	0x805bd66 <prvCopyDataToQueue+0xd6> @ imm = #0x0
 805bd64: e7ff         	b	0x805bd66 <prvCopyDataToQueue+0xd6> @ imm = #-0x2
;         }
 805bd66: e000         	b	0x805bd6a <prvCopyDataToQueue+0xda> @ imm = #0x0
 805bd68: e7ff         	b	0x805bd6a <prvCopyDataToQueue+0xda> @ imm = #-0x2
 805bd6a: e7ff         	b	0x805bd6c <prvCopyDataToQueue+0xdc> @ imm = #-0x2
 805bd6c: e7ff         	b	0x805bd6e <prvCopyDataToQueue+0xde> @ imm = #-0x2
;     pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 805bd6e: 9801         	ldr	r0, [sp, #0x4]
 805bd70: 3001         	adds	r0, #0x1
 805bd72: 9905         	ldr	r1, [sp, #0x14]
 805bd74: 6388         	str	r0, [r1, #0x38]
;     return xReturn;
 805bd76: 9802         	ldr	r0, [sp, #0x8]
 805bd78: 9000         	str	r0, [sp]
 805bd7a: 4805         	ldr	r0, [pc, #0x14]         @ 0x805bd90 <prvCopyDataToQueue+0x100>
 805bd7c: 4780         	blx	r0
 805bd7e: 9800         	ldr	r0, [sp]
 805bd80: b006         	add	sp, #0x18
 805bd82: bdd0         	pop	{r4, r6, r7, pc}

0805bd84 <$d.25>:
 805bd84: 89 22 06 08  	.word	0x08062289
 805bd88: 89 22 06 08  	.word	0x08062289
 805bd8c: 15 7e 05 08  	.word	0x08057e15
 805bd90: 21 05 06 08  	.word	0x08060521

0805bd94 <prvIsQueueFull>:
; {
 805bd94: b580         	push	{r7, lr}
 805bd96: 466f         	mov	r7, sp
 805bd98: b084         	sub	sp, #0x10
 805bd9a: f643 5240    	movw	r2, #0x3d40
 805bd9e: f2c2 0200    	movt	r2, #0x2000
 805bda2: 6811         	ldr	r1, [r2]
 805bda4: f642 5340    	movw	r3, #0x2d40
 805bda8: f2c2 0300    	movt	r3, #0x2000
 805bdac: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805bdb0: 3101         	adds	r1, #0x1
 805bdb2: 6011         	str	r1, [r2]
 805bdb4: 9003         	str	r0, [sp, #0xc]
;     taskENTER_CRITICAL();
 805bdb6: 480c         	ldr	r0, [pc, #0x30]         @ 0x805bde8 <prvIsQueueFull+0x54>
 805bdb8: 4780         	blx	r0
;         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 805bdba: 9803         	ldr	r0, [sp, #0xc]
 805bdbc: 6b80         	ldr	r0, [r0, #0x38]
 805bdbe: 9903         	ldr	r1, [sp, #0xc]
 805bdc0: 6bc9         	ldr	r1, [r1, #0x3c]
 805bdc2: 4288         	cmp	r0, r1
 805bdc4: d103         	bne	0x805bdce <prvIsQueueFull+0x3a> @ imm = #0x6
 805bdc6: e7ff         	b	0x805bdc8 <prvIsQueueFull+0x34> @ imm = #-0x2
 805bdc8: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805bdca: 9002         	str	r0, [sp, #0x8]
;         }
 805bdcc: e002         	b	0x805bdd4 <prvIsQueueFull+0x40> @ imm = #0x4
 805bdce: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805bdd0: 9002         	str	r0, [sp, #0x8]
 805bdd2: e7ff         	b	0x805bdd4 <prvIsQueueFull+0x40> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805bdd4: 4805         	ldr	r0, [pc, #0x14]         @ 0x805bdec <prvIsQueueFull+0x58>
 805bdd6: 4780         	blx	r0
;     return xReturn;
 805bdd8: 9802         	ldr	r0, [sp, #0x8]
 805bdda: 9001         	str	r0, [sp, #0x4]
 805bddc: 4804         	ldr	r0, [pc, #0x10]         @ 0x805bdf0 <prvIsQueueFull+0x5c>
 805bdde: 4780         	blx	r0
 805bde0: 9801         	ldr	r0, [sp, #0x4]
 805bde2: b004         	add	sp, #0x10
 805bde4: bd80         	pop	{r7, pc}
 805bde6: bf00         	nop

0805bde8 <$d.27>:
 805bde8: 05 e1 05 08  	.word	0x0805e105
 805bdec: 4d e1 05 08  	.word	0x0805e14d
 805bdf0: 21 05 06 08  	.word	0x08060521

0805bdf4 <prvUnlockQueue>:
; {
 805bdf4: b580         	push	{r7, lr}
 805bdf6: 466f         	mov	r7, sp
 805bdf8: b082         	sub	sp, #0x8
 805bdfa: f643 5240    	movw	r2, #0x3d40
 805bdfe: f2c2 0200    	movt	r2, #0x2000
 805be02: 6811         	ldr	r1, [r2]
 805be04: f642 5340    	movw	r3, #0x2d40
 805be08: f2c2 0300    	movt	r3, #0x2000
 805be0c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805be10: 3101         	adds	r1, #0x1
 805be12: 6011         	str	r1, [r2]
 805be14: 9001         	str	r0, [sp, #0x4]
;     taskENTER_CRITICAL();
 805be16: 482b         	ldr	r0, [pc, #0xac]         @ 0x805bec4 <prvUnlockQueue+0xd0>
 805be18: 4780         	blx	r0
;         int8_t cTxLock = pxQueue->cTxLock;
 805be1a: 9801         	ldr	r0, [sp, #0x4]
 805be1c: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805be20: f807 0c05    	strb	r0, [r7, #-5]
;         while( cTxLock > queueLOCKED_UNMODIFIED )
 805be24: e7ff         	b	0x805be26 <prvUnlockQueue+0x32> @ imm = #-0x2
 805be26: f917 0c05    	ldrsb	r0, [r7, #-5]
 805be2a: 2801         	cmp	r0, #0x1
 805be2c: db16         	blt	0x805be5c <prvUnlockQueue+0x68> @ imm = #0x2c
 805be2e: e7ff         	b	0x805be30 <prvUnlockQueue+0x3c> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805be30: 9801         	ldr	r0, [sp, #0x4]
 805be32: 6a40         	ldr	r0, [r0, #0x24]
 805be34: b158         	cbz	r0, 0x805be4e <prvUnlockQueue+0x5a> @ imm = #0x16
 805be36: e7ff         	b	0x805be38 <prvUnlockQueue+0x44> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805be38: 9801         	ldr	r0, [sp, #0x4]
 805be3a: 3024         	adds	r0, #0x24
 805be3c: 4928         	ldr	r1, [pc, #0xa0]         @ 0x805bee0 <prvUnlockQueue+0xec>
 805be3e: 4788         	blx	r1
 805be40: b118         	cbz	r0, 0x805be4a <prvUnlockQueue+0x56> @ imm = #0x6
 805be42: e7ff         	b	0x805be44 <prvUnlockQueue+0x50> @ imm = #-0x2
;                         vTaskMissedYield();
 805be44: 4827         	ldr	r0, [pc, #0x9c]         @ 0x805bee4 <prvUnlockQueue+0xf0>
 805be46: 4780         	blx	r0
;                     }
 805be48: e000         	b	0x805be4c <prvUnlockQueue+0x58> @ imm = #0x0
 805be4a: e7ff         	b	0x805be4c <prvUnlockQueue+0x58> @ imm = #-0x2
;                 }
 805be4c: e000         	b	0x805be50 <prvUnlockQueue+0x5c> @ imm = #0x0
;                     break;
 805be4e: e005         	b	0x805be5c <prvUnlockQueue+0x68> @ imm = #0xa
;             --cTxLock;
 805be50: f817 0c05    	ldrb	r0, [r7, #-5]
 805be54: 3801         	subs	r0, #0x1
 805be56: f807 0c05    	strb	r0, [r7, #-5]
;         while( cTxLock > queueLOCKED_UNMODIFIED )
 805be5a: e7e4         	b	0x805be26 <prvUnlockQueue+0x32> @ imm = #-0x38
;         pxQueue->cTxLock = queueUNLOCKED;
 805be5c: 9901         	ldr	r1, [sp, #0x4]
 805be5e: 20ff         	movs	r0, #0xff
 805be60: f881 0045    	strb.w	r0, [r1, #0x45]
;     taskEXIT_CRITICAL();
 805be64: 4818         	ldr	r0, [pc, #0x60]         @ 0x805bec8 <prvUnlockQueue+0xd4>
 805be66: 4780         	blx	r0
;     taskENTER_CRITICAL();
 805be68: 4818         	ldr	r0, [pc, #0x60]         @ 0x805becc <prvUnlockQueue+0xd8>
 805be6a: 4780         	blx	r0
;         int8_t cRxLock = pxQueue->cRxLock;
 805be6c: 9801         	ldr	r0, [sp, #0x4]
 805be6e: f890 0044    	ldrb.w	r0, [r0, #0x44]
 805be72: f807 0c06    	strb	r0, [r7, #-6]
;         while( cRxLock > queueLOCKED_UNMODIFIED )
 805be76: e7ff         	b	0x805be78 <prvUnlockQueue+0x84> @ imm = #-0x2
 805be78: f917 0c06    	ldrsb	r0, [r7, #-6]
 805be7c: 2801         	cmp	r0, #0x1
 805be7e: db16         	blt	0x805beae <prvUnlockQueue+0xba> @ imm = #0x2c
 805be80: e7ff         	b	0x805be82 <prvUnlockQueue+0x8e> @ imm = #-0x2
;             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805be82: 9801         	ldr	r0, [sp, #0x4]
 805be84: 6900         	ldr	r0, [r0, #0x10]
 805be86: b180         	cbz	r0, 0x805beaa <prvUnlockQueue+0xb6> @ imm = #0x20
 805be88: e7ff         	b	0x805be8a <prvUnlockQueue+0x96> @ imm = #-0x2
;                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805be8a: 9801         	ldr	r0, [sp, #0x4]
 805be8c: 3010         	adds	r0, #0x10
 805be8e: 4912         	ldr	r1, [pc, #0x48]         @ 0x805bed8 <prvUnlockQueue+0xe4>
 805be90: 4788         	blx	r1
 805be92: b118         	cbz	r0, 0x805be9c <prvUnlockQueue+0xa8> @ imm = #0x6
 805be94: e7ff         	b	0x805be96 <prvUnlockQueue+0xa2> @ imm = #-0x2
;                     vTaskMissedYield();
 805be96: 4811         	ldr	r0, [pc, #0x44]         @ 0x805bedc <prvUnlockQueue+0xe8>
 805be98: 4780         	blx	r0
;                 }
 805be9a: e000         	b	0x805be9e <prvUnlockQueue+0xaa> @ imm = #0x0
 805be9c: e7ff         	b	0x805be9e <prvUnlockQueue+0xaa> @ imm = #-0x2
;                 --cRxLock;
 805be9e: f817 0c06    	ldrb	r0, [r7, #-6]
 805bea2: 3801         	subs	r0, #0x1
 805bea4: f807 0c06    	strb	r0, [r7, #-6]
;             }
 805bea8: e000         	b	0x805beac <prvUnlockQueue+0xb8> @ imm = #0x0
;                 break;
 805beaa: e000         	b	0x805beae <prvUnlockQueue+0xba> @ imm = #0x0
;         while( cRxLock > queueLOCKED_UNMODIFIED )
 805beac: e7e4         	b	0x805be78 <prvUnlockQueue+0x84> @ imm = #-0x38
;         pxQueue->cRxLock = queueUNLOCKED;
 805beae: 9901         	ldr	r1, [sp, #0x4]
 805beb0: 20ff         	movs	r0, #0xff
 805beb2: f881 0044    	strb.w	r0, [r1, #0x44]
;     taskEXIT_CRITICAL();
 805beb6: 4806         	ldr	r0, [pc, #0x18]         @ 0x805bed0 <prvUnlockQueue+0xdc>
 805beb8: 4780         	blx	r0
; }
 805beba: 4806         	ldr	r0, [pc, #0x18]         @ 0x805bed4 <prvUnlockQueue+0xe0>
 805bebc: 4780         	blx	r0
 805bebe: b002         	add	sp, #0x8
 805bec0: bd80         	pop	{r7, pc}
 805bec2: bf00         	nop

0805bec4 <$d.29>:
 805bec4: 05 e1 05 08  	.word	0x0805e105
 805bec8: 4d e1 05 08  	.word	0x0805e14d
 805becc: 05 e1 05 08  	.word	0x0805e105
 805bed0: 4d e1 05 08  	.word	0x0805e14d
 805bed4: 21 05 06 08  	.word	0x08060521
 805bed8: 0d 73 05 08  	.word	0x0805730d
 805bedc: 79 78 05 08  	.word	0x08057879
 805bee0: 0d 73 05 08  	.word	0x0805730d
 805bee4: 79 78 05 08  	.word	0x08057879

0805bee8 <xQueueGenericSendFromISR>:
; {
 805bee8: b5b0         	push	{r4, r5, r7, lr}
 805beea: af02         	add	r7, sp, #0x8
 805beec: b08e         	sub	sp, #0x38
 805beee: 4674         	mov	r4, lr
 805bef0: f643 5e40    	movw	lr, #0x3d40
 805bef4: f2c2 0e00    	movt	lr, #0x2000
 805bef8: f8de c000    	ldr.w	r12, [lr]
 805befc: f642 5540    	movw	r5, #0x2d40
 805bf00: f2c2 0500    	movt	r5, #0x2000
 805bf04: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805bf08: f10c 0c01    	add.w	r12, r12, #0x1
 805bf0c: f8ce c000    	str.w	r12, [lr]
 805bf10: 900d         	str	r0, [sp, #0x34]
 805bf12: 910c         	str	r1, [sp, #0x30]
 805bf14: 920b         	str	r2, [sp, #0x2c]
 805bf16: 930a         	str	r3, [sp, #0x28]
;     Queue_t * const pxQueue = xQueue;
 805bf18: 980d         	ldr	r0, [sp, #0x34]
 805bf1a: 9007         	str	r0, [sp, #0x1c]
;     configASSERT( pxQueue );
 805bf1c: 9807         	ldr	r0, [sp, #0x1c]
 805bf1e: b920         	cbnz	r0, 0x805bf2a <xQueueGenericSendFromISR+0x42> @ imm = #0x8
 805bf20: e7ff         	b	0x805bf22 <xQueueGenericSendFromISR+0x3a> @ imm = #-0x2
 805bf22: 4853         	ldr	r0, [pc, #0x14c]        @ 0x805c070 <xQueueGenericSendFromISR+0x188>
 805bf24: 4780         	blx	r0
 805bf26: e7ff         	b	0x805bf28 <xQueueGenericSendFromISR+0x40> @ imm = #-0x2
 805bf28: e7fe         	b	0x805bf28 <xQueueGenericSendFromISR+0x40> @ imm = #-0x4
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805bf2a: 990c         	ldr	r1, [sp, #0x30]
 805bf2c: 2000         	movs	r0, #0x0
 805bf2e: 9003         	str	r0, [sp, #0xc]
 805bf30: b939         	cbnz	r1, 0x805bf42 <xQueueGenericSendFromISR+0x5a> @ imm = #0xe
 805bf32: e7ff         	b	0x805bf34 <xQueueGenericSendFromISR+0x4c> @ imm = #-0x2
 805bf34: 9807         	ldr	r0, [sp, #0x1c]
 805bf36: 6c00         	ldr	r0, [r0, #0x40]
 805bf38: 2800         	cmp	r0, #0x0
 805bf3a: bf18         	it	ne
 805bf3c: 2001         	movne	r0, #0x1
 805bf3e: 9003         	str	r0, [sp, #0xc]
 805bf40: e7ff         	b	0x805bf42 <xQueueGenericSendFromISR+0x5a> @ imm = #-0x2
 805bf42: 9803         	ldr	r0, [sp, #0xc]
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805bf44: 07c0         	lsls	r0, r0, #0x1f
 805bf46: b120         	cbz	r0, 0x805bf52 <xQueueGenericSendFromISR+0x6a> @ imm = #0x8
 805bf48: e7ff         	b	0x805bf4a <xQueueGenericSendFromISR+0x62> @ imm = #-0x2
 805bf4a: 4848         	ldr	r0, [pc, #0x120]        @ 0x805c06c <xQueueGenericSendFromISR+0x184>
 805bf4c: 4780         	blx	r0
 805bf4e: e7ff         	b	0x805bf50 <xQueueGenericSendFromISR+0x68> @ imm = #-0x2
 805bf50: e7fe         	b	0x805bf50 <xQueueGenericSendFromISR+0x68> @ imm = #-0x4
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805bf52: 990a         	ldr	r1, [sp, #0x28]
 805bf54: 2000         	movs	r0, #0x0
 805bf56: 2902         	cmp	r1, #0x2
 805bf58: 9002         	str	r0, [sp, #0x8]
 805bf5a: d107         	bne	0x805bf6c <xQueueGenericSendFromISR+0x84> @ imm = #0xe
 805bf5c: e7ff         	b	0x805bf5e <xQueueGenericSendFromISR+0x76> @ imm = #-0x2
 805bf5e: 9807         	ldr	r0, [sp, #0x1c]
 805bf60: 6bc0         	ldr	r0, [r0, #0x3c]
 805bf62: 3801         	subs	r0, #0x1
 805bf64: bf18         	it	ne
 805bf66: 2001         	movne	r0, #0x1
 805bf68: 9002         	str	r0, [sp, #0x8]
 805bf6a: e7ff         	b	0x805bf6c <xQueueGenericSendFromISR+0x84> @ imm = #-0x2
 805bf6c: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805bf6e: 07c0         	lsls	r0, r0, #0x1f
 805bf70: b120         	cbz	r0, 0x805bf7c <xQueueGenericSendFromISR+0x94> @ imm = #0x8
 805bf72: e7ff         	b	0x805bf74 <xQueueGenericSendFromISR+0x8c> @ imm = #-0x2
 805bf74: 483c         	ldr	r0, [pc, #0xf0]         @ 0x805c068 <xQueueGenericSendFromISR+0x180>
 805bf76: 4780         	blx	r0
 805bf78: e7ff         	b	0x805bf7a <xQueueGenericSendFromISR+0x92> @ imm = #-0x2
 805bf7a: e7fe         	b	0x805bf7a <xQueueGenericSendFromISR+0x92> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805bf7c: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805c048 <xQueueGenericSendFromISR+0x160>
 805bf7e: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805bf80: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805c04c <xQueueGenericSendFromISR+0x164>
 805bf82: 4780         	blx	r0
 805bf84: 9008         	str	r0, [sp, #0x20]
;         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 805bf86: 9807         	ldr	r0, [sp, #0x1c]
 805bf88: 6b80         	ldr	r0, [r0, #0x38]
 805bf8a: 9907         	ldr	r1, [sp, #0x1c]
 805bf8c: 6bc9         	ldr	r1, [r1, #0x3c]
 805bf8e: 4288         	cmp	r0, r1
 805bf90: d304         	blo	0x805bf9c <xQueueGenericSendFromISR+0xb4> @ imm = #0x8
 805bf92: e7ff         	b	0x805bf94 <xQueueGenericSendFromISR+0xac> @ imm = #-0x2
 805bf94: 980a         	ldr	r0, [sp, #0x28]
 805bf96: 2802         	cmp	r0, #0x2
 805bf98: d148         	bne	0x805c02c <xQueueGenericSendFromISR+0x144> @ imm = #0x90
 805bf9a: e7ff         	b	0x805bf9c <xQueueGenericSendFromISR+0xb4> @ imm = #-0x2
;             const int8_t cTxLock = pxQueue->cTxLock;
 805bf9c: 9807         	ldr	r0, [sp, #0x1c]
 805bf9e: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805bfa2: f807 0c25    	strb	r0, [r7, #-37]
;             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 805bfa6: 9807         	ldr	r0, [sp, #0x1c]
 805bfa8: 6b80         	ldr	r0, [r0, #0x38]
 805bfaa: 9005         	str	r0, [sp, #0x14]
;             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 805bfac: 9807         	ldr	r0, [sp, #0x1c]
 805bfae: 990c         	ldr	r1, [sp, #0x30]
 805bfb0: 9a0a         	ldr	r2, [sp, #0x28]
 805bfb2: 4b27         	ldr	r3, [pc, #0x9c]         @ 0x805c050 <xQueueGenericSendFromISR+0x168>
 805bfb4: 4798         	blx	r3
;             if( cTxLock == queueUNLOCKED )
 805bfb6: f917 0c25    	ldrsb	r0, [r7, #-37]
 805bfba: 3001         	adds	r0, #0x1
 805bfbc: b9b8         	cbnz	r0, 0x805bfee <xQueueGenericSendFromISR+0x106> @ imm = #0x2e
 805bfbe: e7ff         	b	0x805bfc0 <xQueueGenericSendFromISR+0xd8> @ imm = #-0x2
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805bfc0: 9807         	ldr	r0, [sp, #0x1c]
 805bfc2: 6a40         	ldr	r0, [r0, #0x24]
 805bfc4: b188         	cbz	r0, 0x805bfea <xQueueGenericSendFromISR+0x102> @ imm = #0x22
 805bfc6: e7ff         	b	0x805bfc8 <xQueueGenericSendFromISR+0xe0> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805bfc8: 9807         	ldr	r0, [sp, #0x1c]
 805bfca: 3024         	adds	r0, #0x24
 805bfcc: 4923         	ldr	r1, [pc, #0x8c]         @ 0x805c05c <xQueueGenericSendFromISR+0x174>
 805bfce: 4788         	blx	r1
 805bfd0: b148         	cbz	r0, 0x805bfe6 <xQueueGenericSendFromISR+0xfe> @ imm = #0x12
 805bfd2: e7ff         	b	0x805bfd4 <xQueueGenericSendFromISR+0xec> @ imm = #-0x2
;                             if( pxHigherPriorityTaskWoken != NULL )
 805bfd4: 980b         	ldr	r0, [sp, #0x2c]
 805bfd6: b120         	cbz	r0, 0x805bfe2 <xQueueGenericSendFromISR+0xfa> @ imm = #0x8
 805bfd8: e7ff         	b	0x805bfda <xQueueGenericSendFromISR+0xf2> @ imm = #-0x2
;                                 *pxHigherPriorityTaskWoken = pdTRUE;
 805bfda: 990b         	ldr	r1, [sp, #0x2c]
 805bfdc: 2001         	movs	r0, #0x1
 805bfde: 6008         	str	r0, [r1]
;                             }
 805bfe0: e000         	b	0x805bfe4 <xQueueGenericSendFromISR+0xfc> @ imm = #0x0
 805bfe2: e7ff         	b	0x805bfe4 <xQueueGenericSendFromISR+0xfc> @ imm = #-0x2
;                         }
 805bfe4: e000         	b	0x805bfe8 <xQueueGenericSendFromISR+0x100> @ imm = #0x0
 805bfe6: e7ff         	b	0x805bfe8 <xQueueGenericSendFromISR+0x100> @ imm = #-0x2
;                     }
 805bfe8: e000         	b	0x805bfec <xQueueGenericSendFromISR+0x104> @ imm = #0x0
 805bfea: e7ff         	b	0x805bfec <xQueueGenericSendFromISR+0x104> @ imm = #-0x2
;             }
 805bfec: e01b         	b	0x805c026 <xQueueGenericSendFromISR+0x13e> @ imm = #0x36
;                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 805bfee: e7ff         	b	0x805bff0 <xQueueGenericSendFromISR+0x108> @ imm = #-0x2
 805bff0: 4818         	ldr	r0, [pc, #0x60]         @ 0x805c054 <xQueueGenericSendFromISR+0x16c>
 805bff2: 4780         	blx	r0
 805bff4: 9004         	str	r0, [sp, #0x10]
 805bff6: f917 0c25    	ldrsb	r0, [r7, #-37]
 805bffa: 9904         	ldr	r1, [sp, #0x10]
 805bffc: 4288         	cmp	r0, r1
 805bffe: d210         	bhs	0x805c022 <xQueueGenericSendFromISR+0x13a> @ imm = #0x20
 805c000: e7ff         	b	0x805c002 <xQueueGenericSendFromISR+0x11a> @ imm = #-0x2
 805c002: f917 0c25    	ldrsb	r0, [r7, #-37]
 805c006: 287f         	cmp	r0, #0x7f
 805c008: d104         	bne	0x805c014 <xQueueGenericSendFromISR+0x12c> @ imm = #0x8
 805c00a: e7ff         	b	0x805c00c <xQueueGenericSendFromISR+0x124> @ imm = #-0x2
 805c00c: 4812         	ldr	r0, [pc, #0x48]         @ 0x805c058 <xQueueGenericSendFromISR+0x170>
 805c00e: 4780         	blx	r0
 805c010: e7ff         	b	0x805c012 <xQueueGenericSendFromISR+0x12a> @ imm = #-0x2
 805c012: e7fe         	b	0x805c012 <xQueueGenericSendFromISR+0x12a> @ imm = #-0x4
 805c014: f817 0c25    	ldrb	r0, [r7, #-37]
 805c018: 3001         	adds	r0, #0x1
 805c01a: 9907         	ldr	r1, [sp, #0x1c]
 805c01c: f881 0045    	strb.w	r0, [r1, #0x45]
 805c020: e7ff         	b	0x805c022 <xQueueGenericSendFromISR+0x13a> @ imm = #-0x2
 805c022: e7ff         	b	0x805c024 <xQueueGenericSendFromISR+0x13c> @ imm = #-0x2
 805c024: e7ff         	b	0x805c026 <xQueueGenericSendFromISR+0x13e> @ imm = #-0x2
 805c026: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805c028: 9009         	str	r0, [sp, #0x24]
;         }
 805c02a: e002         	b	0x805c032 <xQueueGenericSendFromISR+0x14a> @ imm = #0x4
 805c02c: 2000         	movs	r0, #0x0
;             xReturn = errQUEUE_FULL;
 805c02e: 9009         	str	r0, [sp, #0x24]
 805c030: e7ff         	b	0x805c032 <xQueueGenericSendFromISR+0x14a> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805c032: 9808         	ldr	r0, [sp, #0x20]
 805c034: 490a         	ldr	r1, [pc, #0x28]         @ 0x805c060 <xQueueGenericSendFromISR+0x178>
 805c036: 4788         	blx	r1
;     return xReturn;
 805c038: 9809         	ldr	r0, [sp, #0x24]
 805c03a: 9001         	str	r0, [sp, #0x4]
 805c03c: 4809         	ldr	r0, [pc, #0x24]         @ 0x805c064 <xQueueGenericSendFromISR+0x17c>
 805c03e: 4780         	blx	r0
 805c040: 9801         	ldr	r0, [sp, #0x4]
 805c042: b00e         	add	sp, #0x38
 805c044: bdb0         	pop	{r4, r5, r7, pc}
 805c046: bf00         	nop

0805c048 <$d.31>:
 805c048: 95 21 06 08  	.word	0x08062195
 805c04c: 55 ec 05 08  	.word	0x0805ec55
 805c050: 91 bc 05 08  	.word	0x0805bc91
 805c054: d5 6d 05 08  	.word	0x08056dd5
 805c058: 55 ec 05 08  	.word	0x0805ec55
 805c05c: 0d 73 05 08  	.word	0x0805730d
 805c060: 85 ec 05 08  	.word	0x0805ec85
 805c064: 21 05 06 08  	.word	0x08060521
 805c068: 55 ec 05 08  	.word	0x0805ec55
 805c06c: 55 ec 05 08  	.word	0x0805ec55
 805c070: 55 ec 05 08  	.word	0x0805ec55

0805c074 <xQueueGiveFromISR>:
; {
 805c074: b580         	push	{r7, lr}
 805c076: 466f         	mov	r7, sp
 805c078: b08a         	sub	sp, #0x28
 805c07a: f643 5340    	movw	r3, #0x3d40
 805c07e: f2c2 0300    	movt	r3, #0x2000
 805c082: 681a         	ldr	r2, [r3]
 805c084: f642 5c40    	movw	r12, #0x2d40
 805c088: f2c2 0c00    	movt	r12, #0x2000
 805c08c: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805c090: 3201         	adds	r2, #0x1
 805c092: 601a         	str	r2, [r3]
 805c094: 9009         	str	r0, [sp, #0x24]
 805c096: 9108         	str	r1, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805c098: 9809         	ldr	r0, [sp, #0x24]
 805c09a: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxQueue );
 805c09c: 9805         	ldr	r0, [sp, #0x14]
 805c09e: b920         	cbnz	r0, 0x805c0aa <xQueueGiveFromISR+0x36> @ imm = #0x8
 805c0a0: e7ff         	b	0x805c0a2 <xQueueGiveFromISR+0x2e> @ imm = #-0x2
 805c0a2: 4849         	ldr	r0, [pc, #0x124]        @ 0x805c1c8 <xQueueGiveFromISR+0x154>
 805c0a4: 4780         	blx	r0
 805c0a6: e7ff         	b	0x805c0a8 <xQueueGiveFromISR+0x34> @ imm = #-0x2
 805c0a8: e7fe         	b	0x805c0a8 <xQueueGiveFromISR+0x34> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize == 0 );
 805c0aa: 9805         	ldr	r0, [sp, #0x14]
 805c0ac: 6c00         	ldr	r0, [r0, #0x40]
 805c0ae: b120         	cbz	r0, 0x805c0ba <xQueueGiveFromISR+0x46> @ imm = #0x8
 805c0b0: e7ff         	b	0x805c0b2 <xQueueGiveFromISR+0x3e> @ imm = #-0x2
 805c0b2: 4844         	ldr	r0, [pc, #0x110]        @ 0x805c1c4 <xQueueGiveFromISR+0x150>
 805c0b4: 4780         	blx	r0
 805c0b6: e7ff         	b	0x805c0b8 <xQueueGiveFromISR+0x44> @ imm = #-0x2
 805c0b8: e7fe         	b	0x805c0b8 <xQueueGiveFromISR+0x44> @ imm = #-0x4
;     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 805c0ba: 9805         	ldr	r0, [sp, #0x14]
 805c0bc: 6801         	ldr	r1, [r0]
 805c0be: 2000         	movs	r0, #0x0
 805c0c0: 9001         	str	r0, [sp, #0x4]
 805c0c2: b939         	cbnz	r1, 0x805c0d4 <xQueueGiveFromISR+0x60> @ imm = #0xe
 805c0c4: e7ff         	b	0x805c0c6 <xQueueGiveFromISR+0x52> @ imm = #-0x2
 805c0c6: 9805         	ldr	r0, [sp, #0x14]
 805c0c8: 6880         	ldr	r0, [r0, #0x8]
 805c0ca: 2800         	cmp	r0, #0x0
 805c0cc: bf18         	it	ne
 805c0ce: 2001         	movne	r0, #0x1
 805c0d0: 9001         	str	r0, [sp, #0x4]
 805c0d2: e7ff         	b	0x805c0d4 <xQueueGiveFromISR+0x60> @ imm = #-0x2
 805c0d4: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 805c0d6: 07c0         	lsls	r0, r0, #0x1f
 805c0d8: b120         	cbz	r0, 0x805c0e4 <xQueueGiveFromISR+0x70> @ imm = #0x8
 805c0da: e7ff         	b	0x805c0dc <xQueueGiveFromISR+0x68> @ imm = #-0x2
 805c0dc: 4838         	ldr	r0, [pc, #0xe0]         @ 0x805c1c0 <xQueueGiveFromISR+0x14c>
 805c0de: 4780         	blx	r0
 805c0e0: e7ff         	b	0x805c0e2 <xQueueGiveFromISR+0x6e> @ imm = #-0x2
 805c0e2: e7fe         	b	0x805c0e2 <xQueueGiveFromISR+0x6e> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805c0e4: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c1a4 <xQueueGiveFromISR+0x130>
 805c0e6: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805c0e8: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c1a8 <xQueueGiveFromISR+0x134>
 805c0ea: 4780         	blx	r0
 805c0ec: 9006         	str	r0, [sp, #0x18]
;         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805c0ee: 9805         	ldr	r0, [sp, #0x14]
 805c0f0: 6b80         	ldr	r0, [r0, #0x38]
 805c0f2: 9004         	str	r0, [sp, #0x10]
;         if( uxMessagesWaiting < pxQueue->uxLength )
 805c0f4: 9804         	ldr	r0, [sp, #0x10]
 805c0f6: 9905         	ldr	r1, [sp, #0x14]
 805c0f8: 6bc9         	ldr	r1, [r1, #0x3c]
 805c0fa: 4288         	cmp	r0, r1
 805c0fc: d244         	bhs	0x805c188 <xQueueGiveFromISR+0x114> @ imm = #0x88
 805c0fe: e7ff         	b	0x805c100 <xQueueGiveFromISR+0x8c> @ imm = #-0x2
;             const int8_t cTxLock = pxQueue->cTxLock;
 805c100: 9805         	ldr	r0, [sp, #0x14]
 805c102: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805c106: f807 0c19    	strb	r0, [r7, #-25]
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 805c10a: 9804         	ldr	r0, [sp, #0x10]
 805c10c: 3001         	adds	r0, #0x1
 805c10e: 9905         	ldr	r1, [sp, #0x14]
 805c110: 6388         	str	r0, [r1, #0x38]
;             if( cTxLock == queueUNLOCKED )
 805c112: f917 0c19    	ldrsb	r0, [r7, #-25]
 805c116: 3001         	adds	r0, #0x1
 805c118: b9b8         	cbnz	r0, 0x805c14a <xQueueGiveFromISR+0xd6> @ imm = #0x2e
 805c11a: e7ff         	b	0x805c11c <xQueueGiveFromISR+0xa8> @ imm = #-0x2
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805c11c: 9805         	ldr	r0, [sp, #0x14]
 805c11e: 6a40         	ldr	r0, [r0, #0x24]
 805c120: b188         	cbz	r0, 0x805c146 <xQueueGiveFromISR+0xd2> @ imm = #0x22
 805c122: e7ff         	b	0x805c124 <xQueueGiveFromISR+0xb0> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805c124: 9805         	ldr	r0, [sp, #0x14]
 805c126: 3024         	adds	r0, #0x24
 805c128: 4922         	ldr	r1, [pc, #0x88]         @ 0x805c1b4 <xQueueGiveFromISR+0x140>
 805c12a: 4788         	blx	r1
 805c12c: b148         	cbz	r0, 0x805c142 <xQueueGiveFromISR+0xce> @ imm = #0x12
 805c12e: e7ff         	b	0x805c130 <xQueueGiveFromISR+0xbc> @ imm = #-0x2
;                             if( pxHigherPriorityTaskWoken != NULL )
 805c130: 9808         	ldr	r0, [sp, #0x20]
 805c132: b120         	cbz	r0, 0x805c13e <xQueueGiveFromISR+0xca> @ imm = #0x8
 805c134: e7ff         	b	0x805c136 <xQueueGiveFromISR+0xc2> @ imm = #-0x2
;                                 *pxHigherPriorityTaskWoken = pdTRUE;
 805c136: 9908         	ldr	r1, [sp, #0x20]
 805c138: 2001         	movs	r0, #0x1
 805c13a: 6008         	str	r0, [r1]
;                             }
 805c13c: e000         	b	0x805c140 <xQueueGiveFromISR+0xcc> @ imm = #0x0
 805c13e: e7ff         	b	0x805c140 <xQueueGiveFromISR+0xcc> @ imm = #-0x2
;                         }
 805c140: e000         	b	0x805c144 <xQueueGiveFromISR+0xd0> @ imm = #0x0
 805c142: e7ff         	b	0x805c144 <xQueueGiveFromISR+0xd0> @ imm = #-0x2
;                     }
 805c144: e000         	b	0x805c148 <xQueueGiveFromISR+0xd4> @ imm = #0x0
 805c146: e7ff         	b	0x805c148 <xQueueGiveFromISR+0xd4> @ imm = #-0x2
;             }
 805c148: e01b         	b	0x805c182 <xQueueGiveFromISR+0x10e> @ imm = #0x36
;                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 805c14a: e7ff         	b	0x805c14c <xQueueGiveFromISR+0xd8> @ imm = #-0x2
 805c14c: 4817         	ldr	r0, [pc, #0x5c]         @ 0x805c1ac <xQueueGiveFromISR+0x138>
 805c14e: 4780         	blx	r0
 805c150: 9002         	str	r0, [sp, #0x8]
 805c152: f917 0c19    	ldrsb	r0, [r7, #-25]
 805c156: 9902         	ldr	r1, [sp, #0x8]
 805c158: 4288         	cmp	r0, r1
 805c15a: d210         	bhs	0x805c17e <xQueueGiveFromISR+0x10a> @ imm = #0x20
 805c15c: e7ff         	b	0x805c15e <xQueueGiveFromISR+0xea> @ imm = #-0x2
 805c15e: f917 0c19    	ldrsb	r0, [r7, #-25]
 805c162: 287f         	cmp	r0, #0x7f
 805c164: d104         	bne	0x805c170 <xQueueGiveFromISR+0xfc> @ imm = #0x8
 805c166: e7ff         	b	0x805c168 <xQueueGiveFromISR+0xf4> @ imm = #-0x2
 805c168: 4811         	ldr	r0, [pc, #0x44]         @ 0x805c1b0 <xQueueGiveFromISR+0x13c>
 805c16a: 4780         	blx	r0
 805c16c: e7ff         	b	0x805c16e <xQueueGiveFromISR+0xfa> @ imm = #-0x2
 805c16e: e7fe         	b	0x805c16e <xQueueGiveFromISR+0xfa> @ imm = #-0x4
 805c170: f817 0c19    	ldrb	r0, [r7, #-25]
 805c174: 3001         	adds	r0, #0x1
 805c176: 9905         	ldr	r1, [sp, #0x14]
 805c178: f881 0045    	strb.w	r0, [r1, #0x45]
 805c17c: e7ff         	b	0x805c17e <xQueueGiveFromISR+0x10a> @ imm = #-0x2
 805c17e: e7ff         	b	0x805c180 <xQueueGiveFromISR+0x10c> @ imm = #-0x2
 805c180: e7ff         	b	0x805c182 <xQueueGiveFromISR+0x10e> @ imm = #-0x2
 805c182: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805c184: 9007         	str	r0, [sp, #0x1c]
;         }
 805c186: e002         	b	0x805c18e <xQueueGiveFromISR+0x11a> @ imm = #0x4
 805c188: 2000         	movs	r0, #0x0
;             xReturn = errQUEUE_FULL;
 805c18a: 9007         	str	r0, [sp, #0x1c]
 805c18c: e7ff         	b	0x805c18e <xQueueGiveFromISR+0x11a> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805c18e: 9806         	ldr	r0, [sp, #0x18]
 805c190: 4909         	ldr	r1, [pc, #0x24]         @ 0x805c1b8 <xQueueGiveFromISR+0x144>
 805c192: 4788         	blx	r1
;     return xReturn;
 805c194: 9807         	ldr	r0, [sp, #0x1c]
 805c196: 9000         	str	r0, [sp]
 805c198: 4808         	ldr	r0, [pc, #0x20]         @ 0x805c1bc <xQueueGiveFromISR+0x148>
 805c19a: 4780         	blx	r0
 805c19c: 9800         	ldr	r0, [sp]
 805c19e: b00a         	add	sp, #0x28
 805c1a0: bd80         	pop	{r7, pc}
 805c1a2: bf00         	nop

0805c1a4 <$d.33>:
 805c1a4: 95 21 06 08  	.word	0x08062195
 805c1a8: 55 ec 05 08  	.word	0x0805ec55
 805c1ac: d5 6d 05 08  	.word	0x08056dd5
 805c1b0: 55 ec 05 08  	.word	0x0805ec55
 805c1b4: 0d 73 05 08  	.word	0x0805730d
 805c1b8: 85 ec 05 08  	.word	0x0805ec85
 805c1bc: 21 05 06 08  	.word	0x08060521
 805c1c0: 55 ec 05 08  	.word	0x0805ec55
 805c1c4: 55 ec 05 08  	.word	0x0805ec55
 805c1c8: 55 ec 05 08  	.word	0x0805ec55

0805c1cc <xQueueReceive>:
; {
 805c1cc: b5d0         	push	{r4, r6, r7, lr}
 805c1ce: af02         	add	r7, sp, #0x8
 805c1d0: b08c         	sub	sp, #0x30
 805c1d2: f643 5c40    	movw	r12, #0x3d40
 805c1d6: f2c2 0c00    	movt	r12, #0x2000
 805c1da: f8dc 3000    	ldr.w	r3, [r12]
 805c1de: f642 5440    	movw	r4, #0x2d40
 805c1e2: f2c2 0400    	movt	r4, #0x2000
 805c1e6: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805c1ea: 3301         	adds	r3, #0x1
 805c1ec: f8cc 3000    	str.w	r3, [r12]
 805c1f0: 900a         	str	r0, [sp, #0x28]
 805c1f2: 9109         	str	r1, [sp, #0x24]
 805c1f4: 9208         	str	r2, [sp, #0x20]
 805c1f6: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805c1f8: 9007         	str	r0, [sp, #0x1c]
;     Queue_t * const pxQueue = xQueue;
 805c1fa: 980a         	ldr	r0, [sp, #0x28]
 805c1fc: 9004         	str	r0, [sp, #0x10]
;     configASSERT( ( pxQueue ) );
 805c1fe: 9804         	ldr	r0, [sp, #0x10]
 805c200: b920         	cbnz	r0, 0x805c20c <xQueueReceive+0x40> @ imm = #0x8
 805c202: e7ff         	b	0x805c204 <xQueueReceive+0x38> @ imm = #-0x2
 805c204: 4879         	ldr	r0, [pc, #0x1e4]        @ 0x805c3ec <xQueueReceive+0x220>
 805c206: 4780         	blx	r0
 805c208: e7ff         	b	0x805c20a <xQueueReceive+0x3e> @ imm = #-0x2
 805c20a: e7fe         	b	0x805c20a <xQueueReceive+0x3e> @ imm = #-0x4
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c20c: 9909         	ldr	r1, [sp, #0x24]
 805c20e: 2000         	movs	r0, #0x0
 805c210: 9002         	str	r0, [sp, #0x8]
 805c212: b939         	cbnz	r1, 0x805c224 <xQueueReceive+0x58> @ imm = #0xe
 805c214: e7ff         	b	0x805c216 <xQueueReceive+0x4a> @ imm = #-0x2
 805c216: 9804         	ldr	r0, [sp, #0x10]
 805c218: 6c00         	ldr	r0, [r0, #0x40]
 805c21a: 2800         	cmp	r0, #0x0
 805c21c: bf18         	it	ne
 805c21e: 2001         	movne	r0, #0x1
 805c220: 9002         	str	r0, [sp, #0x8]
 805c222: e7ff         	b	0x805c224 <xQueueReceive+0x58> @ imm = #-0x2
 805c224: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c226: 07c0         	lsls	r0, r0, #0x1f
 805c228: b120         	cbz	r0, 0x805c234 <xQueueReceive+0x68> @ imm = #0x8
 805c22a: e7ff         	b	0x805c22c <xQueueReceive+0x60> @ imm = #-0x2
 805c22c: 486e         	ldr	r0, [pc, #0x1b8]        @ 0x805c3e8 <xQueueReceive+0x21c>
 805c22e: 4780         	blx	r0
 805c230: e7ff         	b	0x805c232 <xQueueReceive+0x66> @ imm = #-0x2
 805c232: e7fe         	b	0x805c232 <xQueueReceive+0x66> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805c234: 4853         	ldr	r0, [pc, #0x14c]        @ 0x805c384 <xQueueReceive+0x1b8>
 805c236: 4780         	blx	r0
 805c238: 4601         	mov	r1, r0
 805c23a: 2000         	movs	r0, #0x0
 805c23c: 9001         	str	r0, [sp, #0x4]
 805c23e: b931         	cbnz	r1, 0x805c24e <xQueueReceive+0x82> @ imm = #0xc
 805c240: e7ff         	b	0x805c242 <xQueueReceive+0x76> @ imm = #-0x2
 805c242: 9808         	ldr	r0, [sp, #0x20]
 805c244: 2800         	cmp	r0, #0x0
 805c246: bf18         	it	ne
 805c248: 2001         	movne	r0, #0x1
 805c24a: 9001         	str	r0, [sp, #0x4]
 805c24c: e7ff         	b	0x805c24e <xQueueReceive+0x82> @ imm = #-0x2
 805c24e: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805c250: 07c0         	lsls	r0, r0, #0x1f
 805c252: b120         	cbz	r0, 0x805c25e <xQueueReceive+0x92> @ imm = #0x8
 805c254: e7ff         	b	0x805c256 <xQueueReceive+0x8a> @ imm = #-0x2
 805c256: 4863         	ldr	r0, [pc, #0x18c]        @ 0x805c3e4 <xQueueReceive+0x218>
 805c258: 4780         	blx	r0
 805c25a: e7ff         	b	0x805c25c <xQueueReceive+0x90> @ imm = #-0x2
 805c25c: e7fe         	b	0x805c25c <xQueueReceive+0x90> @ imm = #-0x4
;     for( ; ; )
 805c25e: e7ff         	b	0x805c260 <xQueueReceive+0x94> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805c260: 4849         	ldr	r0, [pc, #0x124]        @ 0x805c388 <xQueueReceive+0x1bc>
 805c262: 4780         	blx	r0
;             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805c264: 9804         	ldr	r0, [sp, #0x10]
 805c266: 6b80         	ldr	r0, [r0, #0x38]
 805c268: 9003         	str	r0, [sp, #0xc]
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805c26a: 9803         	ldr	r0, [sp, #0xc]
 805c26c: b1e8         	cbz	r0, 0x805c2aa <xQueueReceive+0xde> @ imm = #0x3a
 805c26e: e7ff         	b	0x805c270 <xQueueReceive+0xa4> @ imm = #-0x2
;                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 805c270: 9804         	ldr	r0, [sp, #0x10]
 805c272: 9909         	ldr	r1, [sp, #0x24]
 805c274: 4a56         	ldr	r2, [pc, #0x158]        @ 0x805c3d0 <xQueueReceive+0x204>
 805c276: 4790         	blx	r2
;                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 805c278: 9803         	ldr	r0, [sp, #0xc]
 805c27a: 3801         	subs	r0, #0x1
 805c27c: 9904         	ldr	r1, [sp, #0x10]
 805c27e: 6388         	str	r0, [r1, #0x38]
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805c280: 9804         	ldr	r0, [sp, #0x10]
 805c282: 6900         	ldr	r0, [r0, #0x10]
 805c284: b158         	cbz	r0, 0x805c29e <xQueueReceive+0xd2> @ imm = #0x16
 805c286: e7ff         	b	0x805c288 <xQueueReceive+0xbc> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805c288: 9804         	ldr	r0, [sp, #0x10]
 805c28a: 3010         	adds	r0, #0x10
 805c28c: 4951         	ldr	r1, [pc, #0x144]        @ 0x805c3d4 <xQueueReceive+0x208>
 805c28e: 4788         	blx	r1
 805c290: b118         	cbz	r0, 0x805c29a <xQueueReceive+0xce> @ imm = #0x6
 805c292: e7ff         	b	0x805c294 <xQueueReceive+0xc8> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805c294: 4850         	ldr	r0, [pc, #0x140]        @ 0x805c3d8 <xQueueReceive+0x20c>
 805c296: 4780         	blx	r0
;                     }
 805c298: e000         	b	0x805c29c <xQueueReceive+0xd0> @ imm = #0x0
 805c29a: e7ff         	b	0x805c29c <xQueueReceive+0xd0> @ imm = #-0x2
;                 }
 805c29c: e000         	b	0x805c2a0 <xQueueReceive+0xd4> @ imm = #0x0
 805c29e: e7ff         	b	0x805c2a0 <xQueueReceive+0xd4> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805c2a0: 484e         	ldr	r0, [pc, #0x138]        @ 0x805c3dc <xQueueReceive+0x210>
 805c2a2: 4780         	blx	r0
 805c2a4: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805c2a6: 900b         	str	r0, [sp, #0x2c]
 805c2a8: e064         	b	0x805c374 <xQueueReceive+0x1a8> @ imm = #0xc8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805c2aa: 9808         	ldr	r0, [sp, #0x20]
 805c2ac: b928         	cbnz	r0, 0x805c2ba <xQueueReceive+0xee> @ imm = #0xa
 805c2ae: e7ff         	b	0x805c2b0 <xQueueReceive+0xe4> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805c2b0: 4846         	ldr	r0, [pc, #0x118]        @ 0x805c3cc <xQueueReceive+0x200>
 805c2b2: 4780         	blx	r0
 805c2b4: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805c2b6: 900b         	str	r0, [sp, #0x2c]
 805c2b8: e05c         	b	0x805c374 <xQueueReceive+0x1a8> @ imm = #0xb8
;                 else if( xEntryTimeSet == pdFALSE )
 805c2ba: 9807         	ldr	r0, [sp, #0x1c]
 805c2bc: b930         	cbnz	r0, 0x805c2cc <xQueueReceive+0x100> @ imm = #0xc
 805c2be: e7ff         	b	0x805c2c0 <xQueueReceive+0xf4> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805c2c0: 4932         	ldr	r1, [pc, #0xc8]         @ 0x805c38c <xQueueReceive+0x1c0>
 805c2c2: a805         	add	r0, sp, #0x14
 805c2c4: 4788         	blx	r1
 805c2c6: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805c2c8: 9007         	str	r0, [sp, #0x1c]
;                 }
 805c2ca: e000         	b	0x805c2ce <xQueueReceive+0x102> @ imm = #0x0
 805c2cc: e7ff         	b	0x805c2ce <xQueueReceive+0x102> @ imm = #-0x2
 805c2ce: e7ff         	b	0x805c2d0 <xQueueReceive+0x104> @ imm = #-0x2
 805c2d0: e7ff         	b	0x805c2d2 <xQueueReceive+0x106> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805c2d2: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c390 <xQueueReceive+0x1c4>
 805c2d4: 4780         	blx	r0
;         vTaskSuspendAll();
 805c2d6: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c394 <xQueueReceive+0x1c8>
 805c2d8: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805c2da: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c398 <xQueueReceive+0x1cc>
 805c2dc: 4780         	blx	r0
 805c2de: 9804         	ldr	r0, [sp, #0x10]
 805c2e0: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805c2e4: 3001         	adds	r0, #0x1
 805c2e6: b928         	cbnz	r0, 0x805c2f4 <xQueueReceive+0x128> @ imm = #0xa
 805c2e8: e7ff         	b	0x805c2ea <xQueueReceive+0x11e> @ imm = #-0x2
 805c2ea: 9904         	ldr	r1, [sp, #0x10]
 805c2ec: 2000         	movs	r0, #0x0
 805c2ee: f881 0044    	strb.w	r0, [r1, #0x44]
 805c2f2: e7ff         	b	0x805c2f4 <xQueueReceive+0x128> @ imm = #-0x2
 805c2f4: 9804         	ldr	r0, [sp, #0x10]
 805c2f6: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805c2fa: 3001         	adds	r0, #0x1
 805c2fc: b928         	cbnz	r0, 0x805c30a <xQueueReceive+0x13e> @ imm = #0xa
 805c2fe: e7ff         	b	0x805c300 <xQueueReceive+0x134> @ imm = #-0x2
 805c300: 9904         	ldr	r1, [sp, #0x10]
 805c302: 2000         	movs	r0, #0x0
 805c304: f881 0045    	strb.w	r0, [r1, #0x45]
 805c308: e7ff         	b	0x805c30a <xQueueReceive+0x13e> @ imm = #-0x2
 805c30a: 4824         	ldr	r0, [pc, #0x90]         @ 0x805c39c <xQueueReceive+0x1d0>
 805c30c: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805c30e: 4a24         	ldr	r2, [pc, #0x90]         @ 0x805c3a0 <xQueueReceive+0x1d4>
 805c310: a805         	add	r0, sp, #0x14
 805c312: a908         	add	r1, sp, #0x20
 805c314: 4790         	blx	r2
 805c316: b9e8         	cbnz	r0, 0x805c354 <xQueueReceive+0x188> @ imm = #0x3a
 805c318: e7ff         	b	0x805c31a <xQueueReceive+0x14e> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805c31a: 9804         	ldr	r0, [sp, #0x10]
 805c31c: 4924         	ldr	r1, [pc, #0x90]         @ 0x805c3b0 <xQueueReceive+0x1e4>
 805c31e: 4788         	blx	r1
 805c320: b188         	cbz	r0, 0x805c346 <xQueueReceive+0x17a> @ imm = #0x22
 805c322: e7ff         	b	0x805c324 <xQueueReceive+0x158> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805c324: 9804         	ldr	r0, [sp, #0x10]
 805c326: 3024         	adds	r0, #0x24
 805c328: 9908         	ldr	r1, [sp, #0x20]
 805c32a: 4a24         	ldr	r2, [pc, #0x90]         @ 0x805c3bc <xQueueReceive+0x1f0>
 805c32c: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805c32e: 9804         	ldr	r0, [sp, #0x10]
 805c330: 4923         	ldr	r1, [pc, #0x8c]         @ 0x805c3c0 <xQueueReceive+0x1f4>
 805c332: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805c334: 4823         	ldr	r0, [pc, #0x8c]         @ 0x805c3c4 <xQueueReceive+0x1f8>
 805c336: 4780         	blx	r0
 805c338: b918         	cbnz	r0, 0x805c342 <xQueueReceive+0x176> @ imm = #0x6
 805c33a: e7ff         	b	0x805c33c <xQueueReceive+0x170> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805c33c: 4822         	ldr	r0, [pc, #0x88]         @ 0x805c3c8 <xQueueReceive+0x1fc>
 805c33e: 4780         	blx	r0
;                 }
 805c340: e000         	b	0x805c344 <xQueueReceive+0x178> @ imm = #0x0
 805c342: e7ff         	b	0x805c344 <xQueueReceive+0x178> @ imm = #-0x2
;             }
 805c344: e005         	b	0x805c352 <xQueueReceive+0x186> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805c346: 9804         	ldr	r0, [sp, #0x10]
 805c348: 491a         	ldr	r1, [pc, #0x68]         @ 0x805c3b4 <xQueueReceive+0x1e8>
 805c34a: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805c34c: 481a         	ldr	r0, [pc, #0x68]         @ 0x805c3b8 <xQueueReceive+0x1ec>
 805c34e: 4780         	blx	r0
 805c350: e7ff         	b	0x805c352 <xQueueReceive+0x186> @ imm = #-0x2
;         }
 805c352: e00e         	b	0x805c372 <xQueueReceive+0x1a6> @ imm = #0x1c
;             prvUnlockQueue( pxQueue );
 805c354: 9804         	ldr	r0, [sp, #0x10]
 805c356: 4913         	ldr	r1, [pc, #0x4c]         @ 0x805c3a4 <xQueueReceive+0x1d8>
 805c358: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805c35a: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805c3a8 <xQueueReceive+0x1dc>
 805c35c: 4780         	blx	r0
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805c35e: 9804         	ldr	r0, [sp, #0x10]
 805c360: 4912         	ldr	r1, [pc, #0x48]         @ 0x805c3ac <xQueueReceive+0x1e0>
 805c362: 4788         	blx	r1
 805c364: b118         	cbz	r0, 0x805c36e <xQueueReceive+0x1a2> @ imm = #0x6
 805c366: e7ff         	b	0x805c368 <xQueueReceive+0x19c> @ imm = #-0x2
 805c368: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805c36a: 900b         	str	r0, [sp, #0x2c]
 805c36c: e002         	b	0x805c374 <xQueueReceive+0x1a8> @ imm = #0x4
 805c36e: e7ff         	b	0x805c370 <xQueueReceive+0x1a4> @ imm = #-0x2
 805c370: e7ff         	b	0x805c372 <xQueueReceive+0x1a6> @ imm = #-0x2
;     for( ; ; )
 805c372: e775         	b	0x805c260 <xQueueReceive+0x94> @ imm = #-0x116
; }
 805c374: 980b         	ldr	r0, [sp, #0x2c]
 805c376: 9000         	str	r0, [sp]
 805c378: 4819         	ldr	r0, [pc, #0x64]         @ 0x805c3e0 <xQueueReceive+0x214>
 805c37a: 4780         	blx	r0
 805c37c: 9800         	ldr	r0, [sp]
 805c37e: b00c         	add	sp, #0x30
 805c380: bdd0         	pop	{r4, r6, r7, pc}
 805c382: bf00         	nop

0805c384 <$d.35>:
 805c384: fd 7b 05 08  	.word	0x08057bfd
 805c388: 05 e1 05 08  	.word	0x0805e105
 805c38c: 39 77 05 08  	.word	0x08057739
 805c390: 4d e1 05 08  	.word	0x0805e14d
 805c394: b9 59 05 08  	.word	0x080559b9
 805c398: 05 e1 05 08  	.word	0x0805e105
 805c39c: 4d e1 05 08  	.word	0x0805e14d
 805c3a0: 85 77 05 08  	.word	0x08057785
 805c3a4: f5 bd 05 08  	.word	0x0805bdf5
 805c3a8: 29 5b 05 08  	.word	0x08055b29
 805c3ac: 5d c4 05 08  	.word	0x0805c45d
 805c3b0: 5d c4 05 08  	.word	0x0805c45d
 805c3b4: f5 bd 05 08  	.word	0x0805bdf5
 805c3b8: 29 5b 05 08  	.word	0x08055b29
 805c3bc: 39 71 05 08  	.word	0x08057139
 805c3c0: f5 bd 05 08  	.word	0x0805bdf5
 805c3c4: 29 5b 05 08  	.word	0x08055b29
 805c3c8: c5 e0 05 08  	.word	0x0805e0c5
 805c3cc: 4d e1 05 08  	.word	0x0805e14d
 805c3d0: f1 c3 05 08  	.word	0x0805c3f1
 805c3d4: 0d 73 05 08  	.word	0x0805730d
 805c3d8: c5 e0 05 08  	.word	0x0805e0c5
 805c3dc: 4d e1 05 08  	.word	0x0805e14d
 805c3e0: 21 05 06 08  	.word	0x08060521
 805c3e4: 55 ec 05 08  	.word	0x0805ec55
 805c3e8: 55 ec 05 08  	.word	0x0805ec55
 805c3ec: 55 ec 05 08  	.word	0x0805ec55

0805c3f0 <prvCopyDataFromQueue>:
; {
 805c3f0: b580         	push	{r7, lr}
 805c3f2: 466f         	mov	r7, sp
 805c3f4: b082         	sub	sp, #0x8
 805c3f6: f643 5340    	movw	r3, #0x3d40
 805c3fa: f2c2 0300    	movt	r3, #0x2000
 805c3fe: 681a         	ldr	r2, [r3]
 805c400: f642 5c40    	movw	r12, #0x2d40
 805c404: f2c2 0c00    	movt	r12, #0x2000
 805c408: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805c40c: 3201         	adds	r2, #0x1
 805c40e: 601a         	str	r2, [r3]
 805c410: 9001         	str	r0, [sp, #0x4]
 805c412: 9100         	str	r1, [sp]
;     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 805c414: 9801         	ldr	r0, [sp, #0x4]
 805c416: 6c00         	ldr	r0, [r0, #0x40]
 805c418: b1b8         	cbz	r0, 0x805c44a <prvCopyDataFromQueue+0x5a> @ imm = #0x2e
 805c41a: e7ff         	b	0x805c41c <prvCopyDataFromQueue+0x2c> @ imm = #-0x2
;         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 805c41c: 9901         	ldr	r1, [sp, #0x4]
 805c41e: 68c8         	ldr	r0, [r1, #0xc]
 805c420: 6c0a         	ldr	r2, [r1, #0x40]
 805c422: 4410         	add	r0, r2
 805c424: 60c8         	str	r0, [r1, #0xc]
;         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 805c426: 9801         	ldr	r0, [sp, #0x4]
 805c428: 6881         	ldr	r1, [r0, #0x8]
 805c42a: 68c0         	ldr	r0, [r0, #0xc]
 805c42c: 4288         	cmp	r0, r1
 805c42e: d304         	blo	0x805c43a <prvCopyDataFromQueue+0x4a> @ imm = #0x8
 805c430: e7ff         	b	0x805c432 <prvCopyDataFromQueue+0x42> @ imm = #-0x2
;             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 805c432: 9901         	ldr	r1, [sp, #0x4]
 805c434: 6808         	ldr	r0, [r1]
 805c436: 60c8         	str	r0, [r1, #0xc]
;         }
 805c438: e000         	b	0x805c43c <prvCopyDataFromQueue+0x4c> @ imm = #0x0
 805c43a: e7ff         	b	0x805c43c <prvCopyDataFromQueue+0x4c> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 805c43c: 9800         	ldr	r0, [sp]
 805c43e: 9a01         	ldr	r2, [sp, #0x4]
 805c440: 68d1         	ldr	r1, [r2, #0xc]
 805c442: 6c12         	ldr	r2, [r2, #0x40]
 805c444: 4b03         	ldr	r3, [pc, #0xc]          @ 0x805c454 <prvCopyDataFromQueue+0x64>
 805c446: 4798         	blx	r3
;     }
 805c448: e7ff         	b	0x805c44a <prvCopyDataFromQueue+0x5a> @ imm = #-0x2
; }
 805c44a: 4803         	ldr	r0, [pc, #0xc]          @ 0x805c458 <prvCopyDataFromQueue+0x68>
 805c44c: 4780         	blx	r0
 805c44e: b002         	add	sp, #0x8
 805c450: bd80         	pop	{r7, pc}
 805c452: bf00         	nop

0805c454 <$d.37>:
 805c454: 89 22 06 08  	.word	0x08062289
 805c458: 21 05 06 08  	.word	0x08060521

0805c45c <prvIsQueueEmpty>:
; {
 805c45c: b580         	push	{r7, lr}
 805c45e: 466f         	mov	r7, sp
 805c460: b084         	sub	sp, #0x10
 805c462: f643 5240    	movw	r2, #0x3d40
 805c466: f2c2 0200    	movt	r2, #0x2000
 805c46a: 6811         	ldr	r1, [r2]
 805c46c: f642 5340    	movw	r3, #0x2d40
 805c470: f2c2 0300    	movt	r3, #0x2000
 805c474: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805c478: 3101         	adds	r1, #0x1
 805c47a: 6011         	str	r1, [r2]
 805c47c: 9003         	str	r0, [sp, #0xc]
;     taskENTER_CRITICAL();
 805c47e: 480a         	ldr	r0, [pc, #0x28]         @ 0x805c4a8 <prvIsQueueEmpty+0x4c>
 805c480: 4780         	blx	r0
;         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 805c482: 9803         	ldr	r0, [sp, #0xc]
 805c484: 6b80         	ldr	r0, [r0, #0x38]
 805c486: b918         	cbnz	r0, 0x805c490 <prvIsQueueEmpty+0x34> @ imm = #0x6
 805c488: e7ff         	b	0x805c48a <prvIsQueueEmpty+0x2e> @ imm = #-0x2
 805c48a: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805c48c: 9002         	str	r0, [sp, #0x8]
;         }
 805c48e: e002         	b	0x805c496 <prvIsQueueEmpty+0x3a> @ imm = #0x4
 805c490: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805c492: 9002         	str	r0, [sp, #0x8]
 805c494: e7ff         	b	0x805c496 <prvIsQueueEmpty+0x3a> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805c496: 4805         	ldr	r0, [pc, #0x14]         @ 0x805c4ac <prvIsQueueEmpty+0x50>
 805c498: 4780         	blx	r0
;     return xReturn;
 805c49a: 9802         	ldr	r0, [sp, #0x8]
 805c49c: 9001         	str	r0, [sp, #0x4]
 805c49e: 4804         	ldr	r0, [pc, #0x10]         @ 0x805c4b0 <prvIsQueueEmpty+0x54>
 805c4a0: 4780         	blx	r0
 805c4a2: 9801         	ldr	r0, [sp, #0x4]
 805c4a4: b004         	add	sp, #0x10
 805c4a6: bd80         	pop	{r7, pc}

0805c4a8 <$d.39>:
 805c4a8: 05 e1 05 08  	.word	0x0805e105
 805c4ac: 4d e1 05 08  	.word	0x0805e14d
 805c4b0: 21 05 06 08  	.word	0x08060521

0805c4b4 <prvGetDisinheritPriorityAfterTimeout>:
;     {
 805c4b4: b580         	push	{r7, lr}
 805c4b6: 466f         	mov	r7, sp
 805c4b8: b084         	sub	sp, #0x10
 805c4ba: f643 5240    	movw	r2, #0x3d40
 805c4be: f2c2 0200    	movt	r2, #0x2000
 805c4c2: 6811         	ldr	r1, [r2]
 805c4c4: f642 5340    	movw	r3, #0x2d40
 805c4c8: f2c2 0300    	movt	r3, #0x2000
 805c4cc: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805c4d0: 3101         	adds	r1, #0x1
 805c4d2: 6011         	str	r1, [r2]
 805c4d4: 9003         	str	r0, [sp, #0xc]
;         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 805c4d6: 9803         	ldr	r0, [sp, #0xc]
 805c4d8: 6a40         	ldr	r0, [r0, #0x24]
 805c4da: b138         	cbz	r0, 0x805c4ec <prvGetDisinheritPriorityAfterTimeout+0x38> @ imm = #0xe
 805c4dc: e7ff         	b	0x805c4de <prvGetDisinheritPriorityAfterTimeout+0x2a> @ imm = #-0x2
;             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 805c4de: 9803         	ldr	r0, [sp, #0xc]
 805c4e0: 6b00         	ldr	r0, [r0, #0x30]
 805c4e2: 6800         	ldr	r0, [r0]
 805c4e4: f1c0 0010    	rsb.w	r0, r0, #0x10
 805c4e8: 9002         	str	r0, [sp, #0x8]
;         }
 805c4ea: e002         	b	0x805c4f2 <prvGetDisinheritPriorityAfterTimeout+0x3e> @ imm = #0x4
 805c4ec: 2000         	movs	r0, #0x0
;             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 805c4ee: 9002         	str	r0, [sp, #0x8]
 805c4f0: e7ff         	b	0x805c4f2 <prvGetDisinheritPriorityAfterTimeout+0x3e> @ imm = #-0x2
;         return uxHighestPriorityOfWaitingTasks;
 805c4f2: 9802         	ldr	r0, [sp, #0x8]
 805c4f4: 9001         	str	r0, [sp, #0x4]
 805c4f6: 4802         	ldr	r0, [pc, #0x8]          @ 0x805c500 <prvGetDisinheritPriorityAfterTimeout+0x4c>
 805c4f8: 4780         	blx	r0
 805c4fa: 9801         	ldr	r0, [sp, #0x4]
 805c4fc: b004         	add	sp, #0x10
 805c4fe: bd80         	pop	{r7, pc}

0805c500 <$d.41>:
 805c500: 21 05 06 08  	.word	0x08060521

0805c504 <xQueuePeek>:
; {
 805c504: b5d0         	push	{r4, r6, r7, lr}
 805c506: af02         	add	r7, sp, #0x8
 805c508: b08e         	sub	sp, #0x38
 805c50a: f643 5c40    	movw	r12, #0x3d40
 805c50e: f2c2 0c00    	movt	r12, #0x2000
 805c512: f8dc 3000    	ldr.w	r3, [r12]
 805c516: f642 5440    	movw	r4, #0x2d40
 805c51a: f2c2 0400    	movt	r4, #0x2000
 805c51e: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805c522: 3301         	adds	r3, #0x1
 805c524: f8cc 3000    	str.w	r3, [r12]
 805c528: 900c         	str	r0, [sp, #0x30]
 805c52a: 910b         	str	r1, [sp, #0x2c]
 805c52c: 920a         	str	r2, [sp, #0x28]
 805c52e: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805c530: 9009         	str	r0, [sp, #0x24]
;     Queue_t * const pxQueue = xQueue;
 805c532: 980c         	ldr	r0, [sp, #0x30]
 805c534: 9005         	str	r0, [sp, #0x14]
;     configASSERT( ( pxQueue ) );
 805c536: 9805         	ldr	r0, [sp, #0x14]
 805c538: b920         	cbnz	r0, 0x805c544 <xQueuePeek+0x40> @ imm = #0x8
 805c53a: e7ff         	b	0x805c53c <xQueuePeek+0x38> @ imm = #-0x2
 805c53c: 487a         	ldr	r0, [pc, #0x1e8]        @ 0x805c728 <xQueuePeek+0x224>
 805c53e: 4780         	blx	r0
 805c540: e7ff         	b	0x805c542 <xQueuePeek+0x3e> @ imm = #-0x2
 805c542: e7fe         	b	0x805c542 <xQueuePeek+0x3e> @ imm = #-0x4
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c544: 990b         	ldr	r1, [sp, #0x2c]
 805c546: 2000         	movs	r0, #0x0
 805c548: 9003         	str	r0, [sp, #0xc]
 805c54a: b939         	cbnz	r1, 0x805c55c <xQueuePeek+0x58> @ imm = #0xe
 805c54c: e7ff         	b	0x805c54e <xQueuePeek+0x4a> @ imm = #-0x2
 805c54e: 9805         	ldr	r0, [sp, #0x14]
 805c550: 6c00         	ldr	r0, [r0, #0x40]
 805c552: 2800         	cmp	r0, #0x0
 805c554: bf18         	it	ne
 805c556: 2001         	movne	r0, #0x1
 805c558: 9003         	str	r0, [sp, #0xc]
 805c55a: e7ff         	b	0x805c55c <xQueuePeek+0x58> @ imm = #-0x2
 805c55c: 9803         	ldr	r0, [sp, #0xc]
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c55e: 07c0         	lsls	r0, r0, #0x1f
 805c560: b120         	cbz	r0, 0x805c56c <xQueuePeek+0x68> @ imm = #0x8
 805c562: e7ff         	b	0x805c564 <xQueuePeek+0x60> @ imm = #-0x2
 805c564: 486f         	ldr	r0, [pc, #0x1bc]        @ 0x805c724 <xQueuePeek+0x220>
 805c566: 4780         	blx	r0
 805c568: e7ff         	b	0x805c56a <xQueuePeek+0x66> @ imm = #-0x2
 805c56a: e7fe         	b	0x805c56a <xQueuePeek+0x66> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805c56c: 4854         	ldr	r0, [pc, #0x150]        @ 0x805c6c0 <xQueuePeek+0x1bc>
 805c56e: 4780         	blx	r0
 805c570: 4601         	mov	r1, r0
 805c572: 2000         	movs	r0, #0x0
 805c574: 9002         	str	r0, [sp, #0x8]
 805c576: b931         	cbnz	r1, 0x805c586 <xQueuePeek+0x82> @ imm = #0xc
 805c578: e7ff         	b	0x805c57a <xQueuePeek+0x76> @ imm = #-0x2
 805c57a: 980a         	ldr	r0, [sp, #0x28]
 805c57c: 2800         	cmp	r0, #0x0
 805c57e: bf18         	it	ne
 805c580: 2001         	movne	r0, #0x1
 805c582: 9002         	str	r0, [sp, #0x8]
 805c584: e7ff         	b	0x805c586 <xQueuePeek+0x82> @ imm = #-0x2
 805c586: 9802         	ldr	r0, [sp, #0x8]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805c588: 07c0         	lsls	r0, r0, #0x1f
 805c58a: b120         	cbz	r0, 0x805c596 <xQueuePeek+0x92> @ imm = #0x8
 805c58c: e7ff         	b	0x805c58e <xQueuePeek+0x8a> @ imm = #-0x2
 805c58e: 4864         	ldr	r0, [pc, #0x190]        @ 0x805c720 <xQueuePeek+0x21c>
 805c590: 4780         	blx	r0
 805c592: e7ff         	b	0x805c594 <xQueuePeek+0x90> @ imm = #-0x2
 805c594: e7fe         	b	0x805c594 <xQueuePeek+0x90> @ imm = #-0x4
;     for( ; ; )
 805c596: e7ff         	b	0x805c598 <xQueuePeek+0x94> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805c598: 484a         	ldr	r0, [pc, #0x128]        @ 0x805c6c4 <xQueuePeek+0x1c0>
 805c59a: 4780         	blx	r0
;             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805c59c: 9805         	ldr	r0, [sp, #0x14]
 805c59e: 6b80         	ldr	r0, [r0, #0x38]
 805c5a0: 9004         	str	r0, [sp, #0x10]
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805c5a2: 9804         	ldr	r0, [sp, #0x10]
 805c5a4: b1f8         	cbz	r0, 0x805c5e6 <xQueuePeek+0xe2> @ imm = #0x3e
 805c5a6: e7ff         	b	0x805c5a8 <xQueuePeek+0xa4> @ imm = #-0x2
;                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 805c5a8: 9805         	ldr	r0, [sp, #0x14]
 805c5aa: 68c0         	ldr	r0, [r0, #0xc]
 805c5ac: 9006         	str	r0, [sp, #0x18]
;                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 805c5ae: 9805         	ldr	r0, [sp, #0x14]
 805c5b0: 990b         	ldr	r1, [sp, #0x2c]
 805c5b2: 4a56         	ldr	r2, [pc, #0x158]        @ 0x805c70c <xQueuePeek+0x208>
 805c5b4: 4790         	blx	r2
;                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 805c5b6: 9806         	ldr	r0, [sp, #0x18]
 805c5b8: 9905         	ldr	r1, [sp, #0x14]
 805c5ba: 60c8         	str	r0, [r1, #0xc]
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805c5bc: 9805         	ldr	r0, [sp, #0x14]
 805c5be: 6a40         	ldr	r0, [r0, #0x24]
 805c5c0: b158         	cbz	r0, 0x805c5da <xQueuePeek+0xd6> @ imm = #0x16
 805c5c2: e7ff         	b	0x805c5c4 <xQueuePeek+0xc0> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805c5c4: 9805         	ldr	r0, [sp, #0x14]
 805c5c6: 3024         	adds	r0, #0x24
 805c5c8: 4951         	ldr	r1, [pc, #0x144]        @ 0x805c710 <xQueuePeek+0x20c>
 805c5ca: 4788         	blx	r1
 805c5cc: b118         	cbz	r0, 0x805c5d6 <xQueuePeek+0xd2> @ imm = #0x6
 805c5ce: e7ff         	b	0x805c5d0 <xQueuePeek+0xcc> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805c5d0: 4850         	ldr	r0, [pc, #0x140]        @ 0x805c714 <xQueuePeek+0x210>
 805c5d2: 4780         	blx	r0
;                     }
 805c5d4: e000         	b	0x805c5d8 <xQueuePeek+0xd4> @ imm = #0x0
 805c5d6: e7ff         	b	0x805c5d8 <xQueuePeek+0xd4> @ imm = #-0x2
;                 }
 805c5d8: e000         	b	0x805c5dc <xQueuePeek+0xd8> @ imm = #0x0
 805c5da: e7ff         	b	0x805c5dc <xQueuePeek+0xd8> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805c5dc: 484e         	ldr	r0, [pc, #0x138]        @ 0x805c718 <xQueuePeek+0x214>
 805c5de: 4780         	blx	r0
 805c5e0: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805c5e2: 900d         	str	r0, [sp, #0x34]
 805c5e4: e064         	b	0x805c6b0 <xQueuePeek+0x1ac> @ imm = #0xc8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805c5e6: 980a         	ldr	r0, [sp, #0x28]
 805c5e8: b928         	cbnz	r0, 0x805c5f6 <xQueuePeek+0xf2> @ imm = #0xa
 805c5ea: e7ff         	b	0x805c5ec <xQueuePeek+0xe8> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805c5ec: 4846         	ldr	r0, [pc, #0x118]        @ 0x805c708 <xQueuePeek+0x204>
 805c5ee: 4780         	blx	r0
 805c5f0: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805c5f2: 900d         	str	r0, [sp, #0x34]
 805c5f4: e05c         	b	0x805c6b0 <xQueuePeek+0x1ac> @ imm = #0xb8
;                 else if( xEntryTimeSet == pdFALSE )
 805c5f6: 9809         	ldr	r0, [sp, #0x24]
 805c5f8: b930         	cbnz	r0, 0x805c608 <xQueuePeek+0x104> @ imm = #0xc
 805c5fa: e7ff         	b	0x805c5fc <xQueuePeek+0xf8> @ imm = #-0x2
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805c5fc: 4932         	ldr	r1, [pc, #0xc8]         @ 0x805c6c8 <xQueuePeek+0x1c4>
 805c5fe: a807         	add	r0, sp, #0x1c
 805c600: 4788         	blx	r1
 805c602: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805c604: 9009         	str	r0, [sp, #0x24]
;                 }
 805c606: e000         	b	0x805c60a <xQueuePeek+0x106> @ imm = #0x0
 805c608: e7ff         	b	0x805c60a <xQueuePeek+0x106> @ imm = #-0x2
 805c60a: e7ff         	b	0x805c60c <xQueuePeek+0x108> @ imm = #-0x2
 805c60c: e7ff         	b	0x805c60e <xQueuePeek+0x10a> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805c60e: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c6cc <xQueuePeek+0x1c8>
 805c610: 4780         	blx	r0
;         vTaskSuspendAll();
 805c612: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c6d0 <xQueuePeek+0x1cc>
 805c614: 4780         	blx	r0
;         prvLockQueue( pxQueue );
 805c616: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805c6d4 <xQueuePeek+0x1d0>
 805c618: 4780         	blx	r0
 805c61a: 9805         	ldr	r0, [sp, #0x14]
 805c61c: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805c620: 3001         	adds	r0, #0x1
 805c622: b928         	cbnz	r0, 0x805c630 <xQueuePeek+0x12c> @ imm = #0xa
 805c624: e7ff         	b	0x805c626 <xQueuePeek+0x122> @ imm = #-0x2
 805c626: 9905         	ldr	r1, [sp, #0x14]
 805c628: 2000         	movs	r0, #0x0
 805c62a: f881 0044    	strb.w	r0, [r1, #0x44]
 805c62e: e7ff         	b	0x805c630 <xQueuePeek+0x12c> @ imm = #-0x2
 805c630: 9805         	ldr	r0, [sp, #0x14]
 805c632: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805c636: 3001         	adds	r0, #0x1
 805c638: b928         	cbnz	r0, 0x805c646 <xQueuePeek+0x142> @ imm = #0xa
 805c63a: e7ff         	b	0x805c63c <xQueuePeek+0x138> @ imm = #-0x2
 805c63c: 9905         	ldr	r1, [sp, #0x14]
 805c63e: 2000         	movs	r0, #0x0
 805c640: f881 0045    	strb.w	r0, [r1, #0x45]
 805c644: e7ff         	b	0x805c646 <xQueuePeek+0x142> @ imm = #-0x2
 805c646: 4824         	ldr	r0, [pc, #0x90]         @ 0x805c6d8 <xQueuePeek+0x1d4>
 805c648: 4780         	blx	r0
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805c64a: 4a24         	ldr	r2, [pc, #0x90]         @ 0x805c6dc <xQueuePeek+0x1d8>
 805c64c: a807         	add	r0, sp, #0x1c
 805c64e: a90a         	add	r1, sp, #0x28
 805c650: 4790         	blx	r2
 805c652: b9e8         	cbnz	r0, 0x805c690 <xQueuePeek+0x18c> @ imm = #0x3a
 805c654: e7ff         	b	0x805c656 <xQueuePeek+0x152> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805c656: 9805         	ldr	r0, [sp, #0x14]
 805c658: 4924         	ldr	r1, [pc, #0x90]         @ 0x805c6ec <xQueuePeek+0x1e8>
 805c65a: 4788         	blx	r1
 805c65c: b188         	cbz	r0, 0x805c682 <xQueuePeek+0x17e> @ imm = #0x22
 805c65e: e7ff         	b	0x805c660 <xQueuePeek+0x15c> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805c660: 9805         	ldr	r0, [sp, #0x14]
 805c662: 3024         	adds	r0, #0x24
 805c664: 990a         	ldr	r1, [sp, #0x28]
 805c666: 4a24         	ldr	r2, [pc, #0x90]         @ 0x805c6f8 <xQueuePeek+0x1f4>
 805c668: 4790         	blx	r2
;                 prvUnlockQueue( pxQueue );
 805c66a: 9805         	ldr	r0, [sp, #0x14]
 805c66c: 4923         	ldr	r1, [pc, #0x8c]         @ 0x805c6fc <xQueuePeek+0x1f8>
 805c66e: 4788         	blx	r1
;                 if( xTaskResumeAll() == pdFALSE )
 805c670: 4823         	ldr	r0, [pc, #0x8c]         @ 0x805c700 <xQueuePeek+0x1fc>
 805c672: 4780         	blx	r0
 805c674: b918         	cbnz	r0, 0x805c67e <xQueuePeek+0x17a> @ imm = #0x6
 805c676: e7ff         	b	0x805c678 <xQueuePeek+0x174> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805c678: 4822         	ldr	r0, [pc, #0x88]         @ 0x805c704 <xQueuePeek+0x200>
 805c67a: 4780         	blx	r0
;                 }
 805c67c: e000         	b	0x805c680 <xQueuePeek+0x17c> @ imm = #0x0
 805c67e: e7ff         	b	0x805c680 <xQueuePeek+0x17c> @ imm = #-0x2
;             }
 805c680: e005         	b	0x805c68e <xQueuePeek+0x18a> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805c682: 9805         	ldr	r0, [sp, #0x14]
 805c684: 491a         	ldr	r1, [pc, #0x68]         @ 0x805c6f0 <xQueuePeek+0x1ec>
 805c686: 4788         	blx	r1
;                 ( void ) xTaskResumeAll();
 805c688: 481a         	ldr	r0, [pc, #0x68]         @ 0x805c6f4 <xQueuePeek+0x1f0>
 805c68a: 4780         	blx	r0
 805c68c: e7ff         	b	0x805c68e <xQueuePeek+0x18a> @ imm = #-0x2
;         }
 805c68e: e00e         	b	0x805c6ae <xQueuePeek+0x1aa> @ imm = #0x1c
;             prvUnlockQueue( pxQueue );
 805c690: 9805         	ldr	r0, [sp, #0x14]
 805c692: 4913         	ldr	r1, [pc, #0x4c]         @ 0x805c6e0 <xQueuePeek+0x1dc>
 805c694: 4788         	blx	r1
;             ( void ) xTaskResumeAll();
 805c696: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805c6e4 <xQueuePeek+0x1e0>
 805c698: 4780         	blx	r0
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805c69a: 9805         	ldr	r0, [sp, #0x14]
 805c69c: 4912         	ldr	r1, [pc, #0x48]         @ 0x805c6e8 <xQueuePeek+0x1e4>
 805c69e: 4788         	blx	r1
 805c6a0: b118         	cbz	r0, 0x805c6aa <xQueuePeek+0x1a6> @ imm = #0x6
 805c6a2: e7ff         	b	0x805c6a4 <xQueuePeek+0x1a0> @ imm = #-0x2
 805c6a4: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805c6a6: 900d         	str	r0, [sp, #0x34]
 805c6a8: e002         	b	0x805c6b0 <xQueuePeek+0x1ac> @ imm = #0x4
 805c6aa: e7ff         	b	0x805c6ac <xQueuePeek+0x1a8> @ imm = #-0x2
 805c6ac: e7ff         	b	0x805c6ae <xQueuePeek+0x1aa> @ imm = #-0x2
;     for( ; ; )
 805c6ae: e773         	b	0x805c598 <xQueuePeek+0x94> @ imm = #-0x11a
; }
 805c6b0: 980d         	ldr	r0, [sp, #0x34]
 805c6b2: 9001         	str	r0, [sp, #0x4]
 805c6b4: 4819         	ldr	r0, [pc, #0x64]         @ 0x805c71c <xQueuePeek+0x218>
 805c6b6: 4780         	blx	r0
 805c6b8: 9801         	ldr	r0, [sp, #0x4]
 805c6ba: b00e         	add	sp, #0x38
 805c6bc: bdd0         	pop	{r4, r6, r7, pc}
 805c6be: bf00         	nop

0805c6c0 <$d.43>:
 805c6c0: fd 7b 05 08  	.word	0x08057bfd
 805c6c4: 05 e1 05 08  	.word	0x0805e105
 805c6c8: 39 77 05 08  	.word	0x08057739
 805c6cc: 4d e1 05 08  	.word	0x0805e14d
 805c6d0: b9 59 05 08  	.word	0x080559b9
 805c6d4: 05 e1 05 08  	.word	0x0805e105
 805c6d8: 4d e1 05 08  	.word	0x0805e14d
 805c6dc: 85 77 05 08  	.word	0x08057785
 805c6e0: f5 bd 05 08  	.word	0x0805bdf5
 805c6e4: 29 5b 05 08  	.word	0x08055b29
 805c6e8: 5d c4 05 08  	.word	0x0805c45d
 805c6ec: 5d c4 05 08  	.word	0x0805c45d
 805c6f0: f5 bd 05 08  	.word	0x0805bdf5
 805c6f4: 29 5b 05 08  	.word	0x08055b29
 805c6f8: 39 71 05 08  	.word	0x08057139
 805c6fc: f5 bd 05 08  	.word	0x0805bdf5
 805c700: 29 5b 05 08  	.word	0x08055b29
 805c704: c5 e0 05 08  	.word	0x0805e0c5
 805c708: 4d e1 05 08  	.word	0x0805e14d
 805c70c: f1 c3 05 08  	.word	0x0805c3f1
 805c710: 0d 73 05 08  	.word	0x0805730d
 805c714: c5 e0 05 08  	.word	0x0805e0c5
 805c718: 4d e1 05 08  	.word	0x0805e14d
 805c71c: 21 05 06 08  	.word	0x08060521
 805c720: 55 ec 05 08  	.word	0x0805ec55
 805c724: 55 ec 05 08  	.word	0x0805ec55
 805c728: 55 ec 05 08  	.word	0x0805ec55

0805c72c <xQueueReceiveFromISR>:
; {
 805c72c: b5d0         	push	{r4, r6, r7, lr}
 805c72e: af02         	add	r7, sp, #0x8
 805c730: b08c         	sub	sp, #0x30
 805c732: f643 5c40    	movw	r12, #0x3d40
 805c736: f2c2 0c00    	movt	r12, #0x2000
 805c73a: f8dc 3000    	ldr.w	r3, [r12]
 805c73e: f642 5440    	movw	r4, #0x2d40
 805c742: f2c2 0400    	movt	r4, #0x2000
 805c746: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805c74a: 3301         	adds	r3, #0x1
 805c74c: f8cc 3000    	str.w	r3, [r12]
 805c750: 900b         	str	r0, [sp, #0x2c]
 805c752: 910a         	str	r1, [sp, #0x28]
 805c754: 9209         	str	r2, [sp, #0x24]
;     Queue_t * const pxQueue = xQueue;
 805c756: 980b         	ldr	r0, [sp, #0x2c]
 805c758: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pxQueue );
 805c75a: 9806         	ldr	r0, [sp, #0x18]
 805c75c: b920         	cbnz	r0, 0x805c768 <xQueueReceiveFromISR+0x3c> @ imm = #0x8
 805c75e: e7ff         	b	0x805c760 <xQueueReceiveFromISR+0x34> @ imm = #-0x2
 805c760: 4845         	ldr	r0, [pc, #0x114]        @ 0x805c878 <xQueueReceiveFromISR+0x14c>
 805c762: 4780         	blx	r0
 805c764: e7ff         	b	0x805c766 <xQueueReceiveFromISR+0x3a> @ imm = #-0x2
 805c766: e7fe         	b	0x805c766 <xQueueReceiveFromISR+0x3a> @ imm = #-0x4
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c768: 990a         	ldr	r1, [sp, #0x28]
 805c76a: 2000         	movs	r0, #0x0
 805c76c: 9002         	str	r0, [sp, #0x8]
 805c76e: b939         	cbnz	r1, 0x805c780 <xQueueReceiveFromISR+0x54> @ imm = #0xe
 805c770: e7ff         	b	0x805c772 <xQueueReceiveFromISR+0x46> @ imm = #-0x2
 805c772: 9806         	ldr	r0, [sp, #0x18]
 805c774: 6c00         	ldr	r0, [r0, #0x40]
 805c776: 2800         	cmp	r0, #0x0
 805c778: bf18         	it	ne
 805c77a: 2001         	movne	r0, #0x1
 805c77c: 9002         	str	r0, [sp, #0x8]
 805c77e: e7ff         	b	0x805c780 <xQueueReceiveFromISR+0x54> @ imm = #-0x2
 805c780: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c782: 07c0         	lsls	r0, r0, #0x1f
 805c784: b120         	cbz	r0, 0x805c790 <xQueueReceiveFromISR+0x64> @ imm = #0x8
 805c786: e7ff         	b	0x805c788 <xQueueReceiveFromISR+0x5c> @ imm = #-0x2
 805c788: 483a         	ldr	r0, [pc, #0xe8]         @ 0x805c874 <xQueueReceiveFromISR+0x148>
 805c78a: 4780         	blx	r0
 805c78c: e7ff         	b	0x805c78e <xQueueReceiveFromISR+0x62> @ imm = #-0x2
 805c78e: e7fe         	b	0x805c78e <xQueueReceiveFromISR+0x62> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805c790: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805c854 <xQueueReceiveFromISR+0x128>
 805c792: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805c794: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805c858 <xQueueReceiveFromISR+0x12c>
 805c796: 4780         	blx	r0
 805c798: 9007         	str	r0, [sp, #0x1c]
;         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805c79a: 9806         	ldr	r0, [sp, #0x18]
 805c79c: 6b80         	ldr	r0, [r0, #0x38]
 805c79e: 9005         	str	r0, [sp, #0x14]
;         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805c7a0: 9805         	ldr	r0, [sp, #0x14]
 805c7a2: 2800         	cmp	r0, #0x0
 805c7a4: d048         	beq	0x805c838 <xQueueReceiveFromISR+0x10c> @ imm = #0x90
 805c7a6: e7ff         	b	0x805c7a8 <xQueueReceiveFromISR+0x7c> @ imm = #-0x2
;             const int8_t cRxLock = pxQueue->cRxLock;
 805c7a8: 9806         	ldr	r0, [sp, #0x18]
 805c7aa: f890 0044    	ldrb.w	r0, [r0, #0x44]
 805c7ae: f807 0c25    	strb	r0, [r7, #-37]
;             prvCopyDataFromQueue( pxQueue, pvBuffer );
 805c7b2: 9806         	ldr	r0, [sp, #0x18]
 805c7b4: 990a         	ldr	r1, [sp, #0x28]
 805c7b6: 4a29         	ldr	r2, [pc, #0xa4]         @ 0x805c85c <xQueueReceiveFromISR+0x130>
 805c7b8: 4790         	blx	r2
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 805c7ba: 9805         	ldr	r0, [sp, #0x14]
 805c7bc: 3801         	subs	r0, #0x1
 805c7be: 9906         	ldr	r1, [sp, #0x18]
 805c7c0: 6388         	str	r0, [r1, #0x38]
;             if( cRxLock == queueUNLOCKED )
 805c7c2: f917 0c25    	ldrsb	r0, [r7, #-37]
 805c7c6: 3001         	adds	r0, #0x1
 805c7c8: b9b8         	cbnz	r0, 0x805c7fa <xQueueReceiveFromISR+0xce> @ imm = #0x2e
 805c7ca: e7ff         	b	0x805c7cc <xQueueReceiveFromISR+0xa0> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805c7cc: 9806         	ldr	r0, [sp, #0x18]
 805c7ce: 6900         	ldr	r0, [r0, #0x10]
 805c7d0: b188         	cbz	r0, 0x805c7f6 <xQueueReceiveFromISR+0xca> @ imm = #0x22
 805c7d2: e7ff         	b	0x805c7d4 <xQueueReceiveFromISR+0xa8> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805c7d4: 9806         	ldr	r0, [sp, #0x18]
 805c7d6: 3010         	adds	r0, #0x10
 805c7d8: 4923         	ldr	r1, [pc, #0x8c]         @ 0x805c868 <xQueueReceiveFromISR+0x13c>
 805c7da: 4788         	blx	r1
 805c7dc: b148         	cbz	r0, 0x805c7f2 <xQueueReceiveFromISR+0xc6> @ imm = #0x12
 805c7de: e7ff         	b	0x805c7e0 <xQueueReceiveFromISR+0xb4> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 805c7e0: 9809         	ldr	r0, [sp, #0x24]
 805c7e2: b120         	cbz	r0, 0x805c7ee <xQueueReceiveFromISR+0xc2> @ imm = #0x8
 805c7e4: e7ff         	b	0x805c7e6 <xQueueReceiveFromISR+0xba> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 805c7e6: 9909         	ldr	r1, [sp, #0x24]
 805c7e8: 2001         	movs	r0, #0x1
 805c7ea: 6008         	str	r0, [r1]
;                         }
 805c7ec: e000         	b	0x805c7f0 <xQueueReceiveFromISR+0xc4> @ imm = #0x0
 805c7ee: e7ff         	b	0x805c7f0 <xQueueReceiveFromISR+0xc4> @ imm = #-0x2
;                     }
 805c7f0: e000         	b	0x805c7f4 <xQueueReceiveFromISR+0xc8> @ imm = #0x0
 805c7f2: e7ff         	b	0x805c7f4 <xQueueReceiveFromISR+0xc8> @ imm = #-0x2
;                 }
 805c7f4: e000         	b	0x805c7f8 <xQueueReceiveFromISR+0xcc> @ imm = #0x0
 805c7f6: e7ff         	b	0x805c7f8 <xQueueReceiveFromISR+0xcc> @ imm = #-0x2
;             }
 805c7f8: e01b         	b	0x805c832 <xQueueReceiveFromISR+0x106> @ imm = #0x36
;                 prvIncrementQueueRxLock( pxQueue, cRxLock );
 805c7fa: e7ff         	b	0x805c7fc <xQueueReceiveFromISR+0xd0> @ imm = #-0x2
 805c7fc: 4818         	ldr	r0, [pc, #0x60]         @ 0x805c860 <xQueueReceiveFromISR+0x134>
 805c7fe: 4780         	blx	r0
 805c800: 9003         	str	r0, [sp, #0xc]
 805c802: f917 0c25    	ldrsb	r0, [r7, #-37]
 805c806: 9903         	ldr	r1, [sp, #0xc]
 805c808: 4288         	cmp	r0, r1
 805c80a: d210         	bhs	0x805c82e <xQueueReceiveFromISR+0x102> @ imm = #0x20
 805c80c: e7ff         	b	0x805c80e <xQueueReceiveFromISR+0xe2> @ imm = #-0x2
 805c80e: f917 0c25    	ldrsb	r0, [r7, #-37]
 805c812: 287f         	cmp	r0, #0x7f
 805c814: d104         	bne	0x805c820 <xQueueReceiveFromISR+0xf4> @ imm = #0x8
 805c816: e7ff         	b	0x805c818 <xQueueReceiveFromISR+0xec> @ imm = #-0x2
 805c818: 4812         	ldr	r0, [pc, #0x48]         @ 0x805c864 <xQueueReceiveFromISR+0x138>
 805c81a: 4780         	blx	r0
 805c81c: e7ff         	b	0x805c81e <xQueueReceiveFromISR+0xf2> @ imm = #-0x2
 805c81e: e7fe         	b	0x805c81e <xQueueReceiveFromISR+0xf2> @ imm = #-0x4
 805c820: f817 0c25    	ldrb	r0, [r7, #-37]
 805c824: 3001         	adds	r0, #0x1
 805c826: 9906         	ldr	r1, [sp, #0x18]
 805c828: f881 0044    	strb.w	r0, [r1, #0x44]
 805c82c: e7ff         	b	0x805c82e <xQueueReceiveFromISR+0x102> @ imm = #-0x2
 805c82e: e7ff         	b	0x805c830 <xQueueReceiveFromISR+0x104> @ imm = #-0x2
 805c830: e7ff         	b	0x805c832 <xQueueReceiveFromISR+0x106> @ imm = #-0x2
 805c832: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805c834: 9008         	str	r0, [sp, #0x20]
;         }
 805c836: e002         	b	0x805c83e <xQueueReceiveFromISR+0x112> @ imm = #0x4
 805c838: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805c83a: 9008         	str	r0, [sp, #0x20]
 805c83c: e7ff         	b	0x805c83e <xQueueReceiveFromISR+0x112> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805c83e: 9807         	ldr	r0, [sp, #0x1c]
 805c840: 490a         	ldr	r1, [pc, #0x28]         @ 0x805c86c <xQueueReceiveFromISR+0x140>
 805c842: 4788         	blx	r1
;     return xReturn;
 805c844: 9808         	ldr	r0, [sp, #0x20]
 805c846: 9001         	str	r0, [sp, #0x4]
 805c848: 4809         	ldr	r0, [pc, #0x24]         @ 0x805c870 <xQueueReceiveFromISR+0x144>
 805c84a: 4780         	blx	r0
 805c84c: 9801         	ldr	r0, [sp, #0x4]
 805c84e: b00c         	add	sp, #0x30
 805c850: bdd0         	pop	{r4, r6, r7, pc}
 805c852: bf00         	nop

0805c854 <$d.45>:
 805c854: 95 21 06 08  	.word	0x08062195
 805c858: 55 ec 05 08  	.word	0x0805ec55
 805c85c: f1 c3 05 08  	.word	0x0805c3f1
 805c860: d5 6d 05 08  	.word	0x08056dd5
 805c864: 55 ec 05 08  	.word	0x0805ec55
 805c868: 0d 73 05 08  	.word	0x0805730d
 805c86c: 85 ec 05 08  	.word	0x0805ec85
 805c870: 21 05 06 08  	.word	0x08060521
 805c874: 55 ec 05 08  	.word	0x0805ec55
 805c878: 55 ec 05 08  	.word	0x0805ec55

0805c87c <xQueuePeekFromISR>:
; {
 805c87c: b580         	push	{r7, lr}
 805c87e: 466f         	mov	r7, sp
 805c880: b088         	sub	sp, #0x20
 805c882: f643 5340    	movw	r3, #0x3d40
 805c886: f2c2 0300    	movt	r3, #0x2000
 805c88a: 681a         	ldr	r2, [r3]
 805c88c: f642 5c40    	movw	r12, #0x2d40
 805c890: f2c2 0c00    	movt	r12, #0x2000
 805c894: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805c898: 3201         	adds	r2, #0x1
 805c89a: 601a         	str	r2, [r3]
 805c89c: 9007         	str	r0, [sp, #0x1c]
 805c89e: 9106         	str	r1, [sp, #0x18]
;     Queue_t * const pxQueue = xQueue;
 805c8a0: 9807         	ldr	r0, [sp, #0x1c]
 805c8a2: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxQueue );
 805c8a4: 9802         	ldr	r0, [sp, #0x8]
 805c8a6: b920         	cbnz	r0, 0x805c8b2 <xQueuePeekFromISR+0x36> @ imm = #0x8
 805c8a8: e7ff         	b	0x805c8aa <xQueuePeekFromISR+0x2e> @ imm = #-0x2
 805c8aa: 4828         	ldr	r0, [pc, #0xa0]         @ 0x805c94c <xQueuePeekFromISR+0xd0>
 805c8ac: 4780         	blx	r0
 805c8ae: e7ff         	b	0x805c8b0 <xQueuePeekFromISR+0x34> @ imm = #-0x2
 805c8b0: e7fe         	b	0x805c8b0 <xQueuePeekFromISR+0x34> @ imm = #-0x4
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c8b2: 9906         	ldr	r1, [sp, #0x18]
 805c8b4: 2000         	movs	r0, #0x0
 805c8b6: 9001         	str	r0, [sp, #0x4]
 805c8b8: b939         	cbnz	r1, 0x805c8ca <xQueuePeekFromISR+0x4e> @ imm = #0xe
 805c8ba: e7ff         	b	0x805c8bc <xQueuePeekFromISR+0x40> @ imm = #-0x2
 805c8bc: 9802         	ldr	r0, [sp, #0x8]
 805c8be: 6c00         	ldr	r0, [r0, #0x40]
 805c8c0: 2800         	cmp	r0, #0x0
 805c8c2: bf18         	it	ne
 805c8c4: 2001         	movne	r0, #0x1
 805c8c6: 9001         	str	r0, [sp, #0x4]
 805c8c8: e7ff         	b	0x805c8ca <xQueuePeekFromISR+0x4e> @ imm = #-0x2
 805c8ca: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805c8cc: 07c0         	lsls	r0, r0, #0x1f
 805c8ce: b120         	cbz	r0, 0x805c8da <xQueuePeekFromISR+0x5e> @ imm = #0x8
 805c8d0: e7ff         	b	0x805c8d2 <xQueuePeekFromISR+0x56> @ imm = #-0x2
 805c8d2: 481d         	ldr	r0, [pc, #0x74]         @ 0x805c948 <xQueuePeekFromISR+0xcc>
 805c8d4: 4780         	blx	r0
 805c8d6: e7ff         	b	0x805c8d8 <xQueuePeekFromISR+0x5c> @ imm = #-0x2
 805c8d8: e7fe         	b	0x805c8d8 <xQueuePeekFromISR+0x5c> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 805c8da: 9802         	ldr	r0, [sp, #0x8]
 805c8dc: 6c00         	ldr	r0, [r0, #0x40]
 805c8de: b920         	cbnz	r0, 0x805c8ea <xQueuePeekFromISR+0x6e> @ imm = #0x8
 805c8e0: e7ff         	b	0x805c8e2 <xQueuePeekFromISR+0x66> @ imm = #-0x2
 805c8e2: 4818         	ldr	r0, [pc, #0x60]         @ 0x805c944 <xQueuePeekFromISR+0xc8>
 805c8e4: 4780         	blx	r0
 805c8e6: e7ff         	b	0x805c8e8 <xQueuePeekFromISR+0x6c> @ imm = #-0x2
 805c8e8: e7fe         	b	0x805c8e8 <xQueuePeekFromISR+0x6c> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805c8ea: 4811         	ldr	r0, [pc, #0x44]         @ 0x805c930 <xQueuePeekFromISR+0xb4>
 805c8ec: 4780         	blx	r0
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805c8ee: 4811         	ldr	r0, [pc, #0x44]         @ 0x805c934 <xQueuePeekFromISR+0xb8>
 805c8f0: 4780         	blx	r0
 805c8f2: 9004         	str	r0, [sp, #0x10]
;         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 805c8f4: 9802         	ldr	r0, [sp, #0x8]
 805c8f6: 6b80         	ldr	r0, [r0, #0x38]
 805c8f8: b168         	cbz	r0, 0x805c916 <xQueuePeekFromISR+0x9a> @ imm = #0x1a
 805c8fa: e7ff         	b	0x805c8fc <xQueuePeekFromISR+0x80> @ imm = #-0x2
;             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 805c8fc: 9802         	ldr	r0, [sp, #0x8]
 805c8fe: 68c0         	ldr	r0, [r0, #0xc]
 805c900: 9003         	str	r0, [sp, #0xc]
;             prvCopyDataFromQueue( pxQueue, pvBuffer );
 805c902: 9802         	ldr	r0, [sp, #0x8]
 805c904: 9906         	ldr	r1, [sp, #0x18]
 805c906: 4a0c         	ldr	r2, [pc, #0x30]         @ 0x805c938 <xQueuePeekFromISR+0xbc>
 805c908: 4790         	blx	r2
;             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 805c90a: 9803         	ldr	r0, [sp, #0xc]
 805c90c: 9902         	ldr	r1, [sp, #0x8]
 805c90e: 60c8         	str	r0, [r1, #0xc]
 805c910: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805c912: 9005         	str	r0, [sp, #0x14]
;         }
 805c914: e002         	b	0x805c91c <xQueuePeekFromISR+0xa0> @ imm = #0x4
 805c916: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805c918: 9005         	str	r0, [sp, #0x14]
 805c91a: e7ff         	b	0x805c91c <xQueuePeekFromISR+0xa0> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805c91c: 9804         	ldr	r0, [sp, #0x10]
 805c91e: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805c93c <xQueuePeekFromISR+0xc0>
 805c920: 4788         	blx	r1
;     return xReturn;
 805c922: 9805         	ldr	r0, [sp, #0x14]
 805c924: 9000         	str	r0, [sp]
 805c926: 4806         	ldr	r0, [pc, #0x18]         @ 0x805c940 <xQueuePeekFromISR+0xc4>
 805c928: 4780         	blx	r0
 805c92a: 9800         	ldr	r0, [sp]
 805c92c: b008         	add	sp, #0x20
 805c92e: bd80         	pop	{r7, pc}

0805c930 <$d.47>:
 805c930: 95 21 06 08  	.word	0x08062195
 805c934: 55 ec 05 08  	.word	0x0805ec55
 805c938: f1 c3 05 08  	.word	0x0805c3f1
 805c93c: 85 ec 05 08  	.word	0x0805ec85
 805c940: 21 05 06 08  	.word	0x08060521
 805c944: 55 ec 05 08  	.word	0x0805ec55
 805c948: 55 ec 05 08  	.word	0x0805ec55
 805c94c: 55 ec 05 08  	.word	0x0805ec55

0805c950 <uxQueueMessagesWaiting>:
; {
 805c950: b580         	push	{r7, lr}
 805c952: 466f         	mov	r7, sp
 805c954: b084         	sub	sp, #0x10
 805c956: f643 5240    	movw	r2, #0x3d40
 805c95a: f2c2 0200    	movt	r2, #0x2000
 805c95e: 6811         	ldr	r1, [r2]
 805c960: f642 5340    	movw	r3, #0x2d40
 805c964: f2c2 0300    	movt	r3, #0x2000
 805c968: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805c96c: 3101         	adds	r1, #0x1
 805c96e: 6011         	str	r1, [r2]
 805c970: 9003         	str	r0, [sp, #0xc]
;     configASSERT( xQueue );
 805c972: 9803         	ldr	r0, [sp, #0xc]
 805c974: b920         	cbnz	r0, 0x805c980 <uxQueueMessagesWaiting+0x30> @ imm = #0x8
 805c976: e7ff         	b	0x805c978 <uxQueueMessagesWaiting+0x28> @ imm = #-0x2
 805c978: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805c9a8 <uxQueueMessagesWaiting+0x58>
 805c97a: 4780         	blx	r0
 805c97c: e7ff         	b	0x805c97e <uxQueueMessagesWaiting+0x2e> @ imm = #-0x2
 805c97e: e7fe         	b	0x805c97e <uxQueueMessagesWaiting+0x2e> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805c980: 4806         	ldr	r0, [pc, #0x18]         @ 0x805c99c <uxQueueMessagesWaiting+0x4c>
 805c982: 4780         	blx	r0
;         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 805c984: 9803         	ldr	r0, [sp, #0xc]
 805c986: 6b80         	ldr	r0, [r0, #0x38]
 805c988: 9002         	str	r0, [sp, #0x8]
;     taskEXIT_CRITICAL();
 805c98a: 4805         	ldr	r0, [pc, #0x14]         @ 0x805c9a0 <uxQueueMessagesWaiting+0x50>
 805c98c: 4780         	blx	r0
;     return uxReturn;
 805c98e: 9802         	ldr	r0, [sp, #0x8]
 805c990: 9001         	str	r0, [sp, #0x4]
 805c992: 4804         	ldr	r0, [pc, #0x10]         @ 0x805c9a4 <uxQueueMessagesWaiting+0x54>
 805c994: 4780         	blx	r0
 805c996: 9801         	ldr	r0, [sp, #0x4]
 805c998: b004         	add	sp, #0x10
 805c99a: bd80         	pop	{r7, pc}

0805c99c <$d.49>:
 805c99c: 05 e1 05 08  	.word	0x0805e105
 805c9a0: 4d e1 05 08  	.word	0x0805e14d
 805c9a4: 21 05 06 08  	.word	0x08060521
 805c9a8: 55 ec 05 08  	.word	0x0805ec55

0805c9ac <uxQueueSpacesAvailable>:
; {
 805c9ac: b580         	push	{r7, lr}
 805c9ae: 466f         	mov	r7, sp
 805c9b0: b084         	sub	sp, #0x10
 805c9b2: f643 5240    	movw	r2, #0x3d40
 805c9b6: f2c2 0200    	movt	r2, #0x2000
 805c9ba: 6811         	ldr	r1, [r2]
 805c9bc: f642 5340    	movw	r3, #0x2d40
 805c9c0: f2c2 0300    	movt	r3, #0x2000
 805c9c4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805c9c8: 3101         	adds	r1, #0x1
 805c9ca: 6011         	str	r1, [r2]
 805c9cc: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805c9ce: 9803         	ldr	r0, [sp, #0xc]
 805c9d0: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805c9d2: 9801         	ldr	r0, [sp, #0x4]
 805c9d4: b920         	cbnz	r0, 0x805c9e0 <uxQueueSpacesAvailable+0x34> @ imm = #0x8
 805c9d6: e7ff         	b	0x805c9d8 <uxQueueSpacesAvailable+0x2c> @ imm = #-0x2
 805c9d8: 480c         	ldr	r0, [pc, #0x30]         @ 0x805ca0c <uxQueueSpacesAvailable+0x60>
 805c9da: 4780         	blx	r0
 805c9dc: e7ff         	b	0x805c9de <uxQueueSpacesAvailable+0x32> @ imm = #-0x2
 805c9de: e7fe         	b	0x805c9de <uxQueueSpacesAvailable+0x32> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805c9e0: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805ca00 <uxQueueSpacesAvailable+0x54>
 805c9e2: 4780         	blx	r0
;         uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 805c9e4: 9901         	ldr	r1, [sp, #0x4]
 805c9e6: 6bc8         	ldr	r0, [r1, #0x3c]
 805c9e8: 6b89         	ldr	r1, [r1, #0x38]
 805c9ea: 1a40         	subs	r0, r0, r1
 805c9ec: 9002         	str	r0, [sp, #0x8]
;     taskEXIT_CRITICAL();
 805c9ee: 4805         	ldr	r0, [pc, #0x14]         @ 0x805ca04 <uxQueueSpacesAvailable+0x58>
 805c9f0: 4780         	blx	r0
;     return uxReturn;
 805c9f2: 9802         	ldr	r0, [sp, #0x8]
 805c9f4: 9000         	str	r0, [sp]
 805c9f6: 4804         	ldr	r0, [pc, #0x10]         @ 0x805ca08 <uxQueueSpacesAvailable+0x5c>
 805c9f8: 4780         	blx	r0
 805c9fa: 9800         	ldr	r0, [sp]
 805c9fc: b004         	add	sp, #0x10
 805c9fe: bd80         	pop	{r7, pc}

0805ca00 <$d.51>:
 805ca00: 05 e1 05 08  	.word	0x0805e105
 805ca04: 4d e1 05 08  	.word	0x0805e14d
 805ca08: 21 05 06 08  	.word	0x08060521
 805ca0c: 55 ec 05 08  	.word	0x0805ec55

0805ca10 <uxQueueMessagesWaitingFromISR>:
; {
 805ca10: b580         	push	{r7, lr}
 805ca12: 466f         	mov	r7, sp
 805ca14: b084         	sub	sp, #0x10
 805ca16: f643 5240    	movw	r2, #0x3d40
 805ca1a: f2c2 0200    	movt	r2, #0x2000
 805ca1e: 6811         	ldr	r1, [r2]
 805ca20: f642 5340    	movw	r3, #0x2d40
 805ca24: f2c2 0300    	movt	r3, #0x2000
 805ca28: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805ca2c: 3101         	adds	r1, #0x1
 805ca2e: 6011         	str	r1, [r2]
 805ca30: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805ca32: 9803         	ldr	r0, [sp, #0xc]
 805ca34: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805ca36: 9801         	ldr	r0, [sp, #0x4]
 805ca38: b920         	cbnz	r0, 0x805ca44 <uxQueueMessagesWaitingFromISR+0x34> @ imm = #0x8
 805ca3a: e7ff         	b	0x805ca3c <uxQueueMessagesWaitingFromISR+0x2c> @ imm = #-0x2
 805ca3c: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805ca5c <uxQueueMessagesWaitingFromISR+0x4c>
 805ca3e: 4780         	blx	r0
 805ca40: e7ff         	b	0x805ca42 <uxQueueMessagesWaitingFromISR+0x32> @ imm = #-0x2
 805ca42: e7fe         	b	0x805ca42 <uxQueueMessagesWaitingFromISR+0x32> @ imm = #-0x4
;     uxReturn = pxQueue->uxMessagesWaiting;
 805ca44: 9801         	ldr	r0, [sp, #0x4]
 805ca46: 6b80         	ldr	r0, [r0, #0x38]
 805ca48: 9002         	str	r0, [sp, #0x8]
;     return uxReturn;
 805ca4a: 9802         	ldr	r0, [sp, #0x8]
 805ca4c: 9000         	str	r0, [sp]
 805ca4e: 4802         	ldr	r0, [pc, #0x8]          @ 0x805ca58 <uxQueueMessagesWaitingFromISR+0x48>
 805ca50: 4780         	blx	r0
 805ca52: 9800         	ldr	r0, [sp]
 805ca54: b004         	add	sp, #0x10
 805ca56: bd80         	pop	{r7, pc}

0805ca58 <$d.53>:
 805ca58: 21 05 06 08  	.word	0x08060521
 805ca5c: 55 ec 05 08  	.word	0x0805ec55

0805ca60 <vQueueDelete>:
; {
 805ca60: b580         	push	{r7, lr}
 805ca62: 466f         	mov	r7, sp
 805ca64: b082         	sub	sp, #0x8
 805ca66: f643 5240    	movw	r2, #0x3d40
 805ca6a: f2c2 0200    	movt	r2, #0x2000
 805ca6e: 6811         	ldr	r1, [r2]
 805ca70: f642 5340    	movw	r3, #0x2d40
 805ca74: f2c2 0300    	movt	r3, #0x2000
 805ca78: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805ca7c: 3101         	adds	r1, #0x1
 805ca7e: 6011         	str	r1, [r2]
 805ca80: 9001         	str	r0, [sp, #0x4]
;     Queue_t * const pxQueue = xQueue;
 805ca82: 9801         	ldr	r0, [sp, #0x4]
 805ca84: 9000         	str	r0, [sp]
;     configASSERT( pxQueue );
 805ca86: 9800         	ldr	r0, [sp]
 805ca88: b920         	cbnz	r0, 0x805ca94 <vQueueDelete+0x34> @ imm = #0x8
 805ca8a: e7ff         	b	0x805ca8c <vQueueDelete+0x2c> @ imm = #-0x2
 805ca8c: 4809         	ldr	r0, [pc, #0x24]         @ 0x805cab4 <vQueueDelete+0x54>
 805ca8e: 4780         	blx	r0
 805ca90: e7ff         	b	0x805ca92 <vQueueDelete+0x32> @ imm = #-0x2
 805ca92: e7fe         	b	0x805ca92 <vQueueDelete+0x32> @ imm = #-0x4
;         vQueueUnregisterQueue( pxQueue );
 805ca94: 9800         	ldr	r0, [sp]
 805ca96: 4904         	ldr	r1, [pc, #0x10]         @ 0x805caa8 <vQueueDelete+0x48>
 805ca98: 4788         	blx	r1
;         vPortFree( pxQueue );
 805ca9a: 9800         	ldr	r0, [sp]
 805ca9c: 4903         	ldr	r1, [pc, #0xc]          @ 0x805caac <vQueueDelete+0x4c>
 805ca9e: 4788         	blx	r1
; }
 805caa0: 4803         	ldr	r0, [pc, #0xc]          @ 0x805cab0 <vQueueDelete+0x50>
 805caa2: 4780         	blx	r0
 805caa4: b002         	add	sp, #0x8
 805caa6: bd80         	pop	{r7, pc}

0805caa8 <$d.55>:
 805caa8: b9 ca 05 08  	.word	0x0805cab9
 805caac: 41 a4 05 08  	.word	0x0805a441
 805cab0: 21 05 06 08  	.word	0x08060521
 805cab4: 55 ec 05 08  	.word	0x0805ec55

0805cab8 <vQueueUnregisterQueue>:
;     {
 805cab8: b580         	push	{r7, lr}
 805caba: 466f         	mov	r7, sp
 805cabc: b082         	sub	sp, #0x8
 805cabe: f643 5240    	movw	r2, #0x3d40
 805cac2: f2c2 0200    	movt	r2, #0x2000
 805cac6: 6811         	ldr	r1, [r2]
 805cac8: f642 5340    	movw	r3, #0x2d40
 805cacc: f2c2 0300    	movt	r3, #0x2000
 805cad0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805cad4: 3101         	adds	r1, #0x1
 805cad6: 6011         	str	r1, [r2]
 805cad8: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xQueue );
 805cada: 9801         	ldr	r0, [sp, #0x4]
 805cadc: b920         	cbnz	r0, 0x805cae8 <vQueueUnregisterQueue+0x30> @ imm = #0x8
 805cade: e7ff         	b	0x805cae0 <vQueueUnregisterQueue+0x28> @ imm = #-0x2
 805cae0: 4817         	ldr	r0, [pc, #0x5c]         @ 0x805cb40 <vQueueUnregisterQueue+0x88>
 805cae2: 4780         	blx	r0
 805cae4: e7ff         	b	0x805cae6 <vQueueUnregisterQueue+0x2e> @ imm = #-0x2
 805cae6: e7fe         	b	0x805cae6 <vQueueUnregisterQueue+0x2e> @ imm = #-0x4
 805cae8: 2000         	movs	r0, #0x0
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805caea: 9000         	str	r0, [sp]
 805caec: e7ff         	b	0x805caee <vQueueUnregisterQueue+0x36> @ imm = #-0x2
 805caee: 9800         	ldr	r0, [sp]
 805caf0: 2807         	cmp	r0, #0x7
 805caf2: d81f         	bhi	0x805cb34 <vQueueUnregisterQueue+0x7c> @ imm = #0x3e
 805caf4: e7ff         	b	0x805caf6 <vQueueUnregisterQueue+0x3e> @ imm = #-0x2
;             if( xQueueRegistry[ ux ].xHandle == xQueue )
 805caf6: 9900         	ldr	r1, [sp]
 805caf8: f242 3038    	movw	r0, #0x2338
 805cafc: f2c2 0000    	movt	r0, #0x2000
 805cb00: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805cb04: 6840         	ldr	r0, [r0, #0x4]
 805cb06: 9901         	ldr	r1, [sp, #0x4]
 805cb08: 4288         	cmp	r0, r1
 805cb0a: d10d         	bne	0x805cb28 <vQueueUnregisterQueue+0x70> @ imm = #0x1a
 805cb0c: e7ff         	b	0x805cb0e <vQueueUnregisterQueue+0x56> @ imm = #-0x2
;                 xQueueRegistry[ ux ].pcQueueName = NULL;
 805cb0e: 9a00         	ldr	r2, [sp]
 805cb10: f242 3138    	movw	r1, #0x2338
 805cb14: f2c2 0100    	movt	r1, #0x2000
 805cb18: 2000         	movs	r0, #0x0
 805cb1a: f841 0032    	str.w	r0, [r1, r2, lsl #3]
;                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 805cb1e: 9a00         	ldr	r2, [sp]
 805cb20: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cb24: 6048         	str	r0, [r1, #0x4]
;                 break;
 805cb26: e005         	b	0x805cb34 <vQueueUnregisterQueue+0x7c> @ imm = #0xa
 805cb28: e7ff         	b	0x805cb2a <vQueueUnregisterQueue+0x72> @ imm = #-0x2
;         }
 805cb2a: e7ff         	b	0x805cb2c <vQueueUnregisterQueue+0x74> @ imm = #-0x2
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805cb2c: 9800         	ldr	r0, [sp]
 805cb2e: 3001         	adds	r0, #0x1
 805cb30: 9000         	str	r0, [sp]
 805cb32: e7dc         	b	0x805caee <vQueueUnregisterQueue+0x36> @ imm = #-0x48
;     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 805cb34: 4801         	ldr	r0, [pc, #0x4]          @ 0x805cb3c <vQueueUnregisterQueue+0x84>
 805cb36: 4780         	blx	r0
 805cb38: b002         	add	sp, #0x8
 805cb3a: bd80         	pop	{r7, pc}

0805cb3c <$d.57>:
 805cb3c: 21 05 06 08  	.word	0x08060521
 805cb40: 55 ec 05 08  	.word	0x0805ec55

0805cb44 <uxQueueGetQueueNumber>:
;     {
 805cb44: b580         	push	{r7, lr}
 805cb46: 466f         	mov	r7, sp
 805cb48: b082         	sub	sp, #0x8
 805cb4a: f643 5240    	movw	r2, #0x3d40
 805cb4e: f2c2 0200    	movt	r2, #0x2000
 805cb52: 6811         	ldr	r1, [r2]
 805cb54: f642 5340    	movw	r3, #0x2d40
 805cb58: f2c2 0300    	movt	r3, #0x2000
 805cb5c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805cb60: 3101         	adds	r1, #0x1
 805cb62: 6011         	str	r1, [r2]
 805cb64: 9001         	str	r0, [sp, #0x4]
;         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 805cb66: 9801         	ldr	r0, [sp, #0x4]
 805cb68: 6c80         	ldr	r0, [r0, #0x48]
 805cb6a: 9000         	str	r0, [sp]
 805cb6c: 4802         	ldr	r0, [pc, #0x8]          @ 0x805cb78 <uxQueueGetQueueNumber+0x34>
 805cb6e: 4780         	blx	r0
 805cb70: 9800         	ldr	r0, [sp]
 805cb72: b002         	add	sp, #0x8
 805cb74: bd80         	pop	{r7, pc}
 805cb76: bf00         	nop

0805cb78 <$d.59>:
 805cb78: 21 05 06 08  	.word	0x08060521

0805cb7c <vQueueSetQueueNumber>:
;     {
 805cb7c: b580         	push	{r7, lr}
 805cb7e: 466f         	mov	r7, sp
 805cb80: b082         	sub	sp, #0x8
 805cb82: f643 5340    	movw	r3, #0x3d40
 805cb86: f2c2 0300    	movt	r3, #0x2000
 805cb8a: 681a         	ldr	r2, [r3]
 805cb8c: f642 5c40    	movw	r12, #0x2d40
 805cb90: f2c2 0c00    	movt	r12, #0x2000
 805cb94: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805cb98: 3201         	adds	r2, #0x1
 805cb9a: 601a         	str	r2, [r3]
 805cb9c: 9001         	str	r0, [sp, #0x4]
 805cb9e: 9100         	str	r1, [sp]
;         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 805cba0: 9800         	ldr	r0, [sp]
 805cba2: 9901         	ldr	r1, [sp, #0x4]
 805cba4: 6488         	str	r0, [r1, #0x48]
;     }
 805cba6: 4802         	ldr	r0, [pc, #0x8]          @ 0x805cbb0 <vQueueSetQueueNumber+0x34>
 805cba8: 4780         	blx	r0
 805cbaa: b002         	add	sp, #0x8
 805cbac: bd80         	pop	{r7, pc}
 805cbae: bf00         	nop

0805cbb0 <$d.61>:
 805cbb0: 21 05 06 08  	.word	0x08060521

0805cbb4 <ucQueueGetQueueType>:
;     {
 805cbb4: b580         	push	{r7, lr}
 805cbb6: 466f         	mov	r7, sp
 805cbb8: b082         	sub	sp, #0x8
 805cbba: f643 5240    	movw	r2, #0x3d40
 805cbbe: f2c2 0200    	movt	r2, #0x2000
 805cbc2: 6811         	ldr	r1, [r2]
 805cbc4: f642 5340    	movw	r3, #0x2d40
 805cbc8: f2c2 0300    	movt	r3, #0x2000
 805cbcc: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805cbd0: 3101         	adds	r1, #0x1
 805cbd2: 6011         	str	r1, [r2]
 805cbd4: 9001         	str	r0, [sp, #0x4]
;         return ( ( Queue_t * ) xQueue )->ucQueueType;
 805cbd6: 9801         	ldr	r0, [sp, #0x4]
 805cbd8: f890 004c    	ldrb.w	r0, [r0, #0x4c]
 805cbdc: 9000         	str	r0, [sp]
 805cbde: 4802         	ldr	r0, [pc, #0x8]          @ 0x805cbe8 <ucQueueGetQueueType+0x34>
 805cbe0: 4780         	blx	r0
 805cbe2: 9800         	ldr	r0, [sp]
 805cbe4: b002         	add	sp, #0x8
 805cbe6: bd80         	pop	{r7, pc}

0805cbe8 <$d.63>:
 805cbe8: 21 05 06 08  	.word	0x08060521

0805cbec <uxQueueGetQueueItemSize>:
; {
 805cbec: b580         	push	{r7, lr}
 805cbee: 466f         	mov	r7, sp
 805cbf0: b082         	sub	sp, #0x8
 805cbf2: f643 5240    	movw	r2, #0x3d40
 805cbf6: f2c2 0200    	movt	r2, #0x2000
 805cbfa: 6811         	ldr	r1, [r2]
 805cbfc: f642 5340    	movw	r3, #0x2d40
 805cc00: f2c2 0300    	movt	r3, #0x2000
 805cc04: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805cc08: 3101         	adds	r1, #0x1
 805cc0a: 6011         	str	r1, [r2]
 805cc0c: 9001         	str	r0, [sp, #0x4]
;     return ( ( Queue_t * ) xQueue )->uxItemSize;
 805cc0e: 9801         	ldr	r0, [sp, #0x4]
 805cc10: 6c00         	ldr	r0, [r0, #0x40]
 805cc12: 9000         	str	r0, [sp]
 805cc14: 4802         	ldr	r0, [pc, #0x8]          @ 0x805cc20 <uxQueueGetQueueItemSize+0x34>
 805cc16: 4780         	blx	r0
 805cc18: 9800         	ldr	r0, [sp]
 805cc1a: b002         	add	sp, #0x8
 805cc1c: bd80         	pop	{r7, pc}
 805cc1e: bf00         	nop

0805cc20 <$d.65>:
 805cc20: 21 05 06 08  	.word	0x08060521

0805cc24 <uxQueueGetQueueLength>:
; {
 805cc24: b580         	push	{r7, lr}
 805cc26: 466f         	mov	r7, sp
 805cc28: b082         	sub	sp, #0x8
 805cc2a: f643 5240    	movw	r2, #0x3d40
 805cc2e: f2c2 0200    	movt	r2, #0x2000
 805cc32: 6811         	ldr	r1, [r2]
 805cc34: f642 5340    	movw	r3, #0x2d40
 805cc38: f2c2 0300    	movt	r3, #0x2000
 805cc3c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805cc40: 3101         	adds	r1, #0x1
 805cc42: 6011         	str	r1, [r2]
 805cc44: 9001         	str	r0, [sp, #0x4]
;     return ( ( Queue_t * ) xQueue )->uxLength;
 805cc46: 9801         	ldr	r0, [sp, #0x4]
 805cc48: 6bc0         	ldr	r0, [r0, #0x3c]
 805cc4a: 9000         	str	r0, [sp]
 805cc4c: 4802         	ldr	r0, [pc, #0x8]          @ 0x805cc58 <uxQueueGetQueueLength+0x34>
 805cc4e: 4780         	blx	r0
 805cc50: 9800         	ldr	r0, [sp]
 805cc52: b002         	add	sp, #0x8
 805cc54: bd80         	pop	{r7, pc}
 805cc56: bf00         	nop

0805cc58 <$d.67>:
 805cc58: 21 05 06 08  	.word	0x08060521

0805cc5c <xQueueIsQueueEmptyFromISR>:
; {
 805cc5c: b580         	push	{r7, lr}
 805cc5e: 466f         	mov	r7, sp
 805cc60: b084         	sub	sp, #0x10
 805cc62: f643 5240    	movw	r2, #0x3d40
 805cc66: f2c2 0200    	movt	r2, #0x2000
 805cc6a: 6811         	ldr	r1, [r2]
 805cc6c: f642 5340    	movw	r3, #0x2d40
 805cc70: f2c2 0300    	movt	r3, #0x2000
 805cc74: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805cc78: 3101         	adds	r1, #0x1
 805cc7a: 6011         	str	r1, [r2]
 805cc7c: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805cc7e: 9803         	ldr	r0, [sp, #0xc]
 805cc80: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805cc82: 9801         	ldr	r0, [sp, #0x4]
 805cc84: b920         	cbnz	r0, 0x805cc90 <xQueueIsQueueEmptyFromISR+0x34> @ imm = #0x8
 805cc86: e7ff         	b	0x805cc88 <xQueueIsQueueEmptyFromISR+0x2c> @ imm = #-0x2
 805cc88: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805ccb8 <xQueueIsQueueEmptyFromISR+0x5c>
 805cc8a: 4780         	blx	r0
 805cc8c: e7ff         	b	0x805cc8e <xQueueIsQueueEmptyFromISR+0x32> @ imm = #-0x2
 805cc8e: e7fe         	b	0x805cc8e <xQueueIsQueueEmptyFromISR+0x32> @ imm = #-0x4
;     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 805cc90: 9801         	ldr	r0, [sp, #0x4]
 805cc92: 6b80         	ldr	r0, [r0, #0x38]
 805cc94: b918         	cbnz	r0, 0x805cc9e <xQueueIsQueueEmptyFromISR+0x42> @ imm = #0x6
 805cc96: e7ff         	b	0x805cc98 <xQueueIsQueueEmptyFromISR+0x3c> @ imm = #-0x2
 805cc98: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805cc9a: 9002         	str	r0, [sp, #0x8]
;     }
 805cc9c: e002         	b	0x805cca4 <xQueueIsQueueEmptyFromISR+0x48> @ imm = #0x4
 805cc9e: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805cca0: 9002         	str	r0, [sp, #0x8]
 805cca2: e7ff         	b	0x805cca4 <xQueueIsQueueEmptyFromISR+0x48> @ imm = #-0x2
;     return xReturn;
 805cca4: 9802         	ldr	r0, [sp, #0x8]
 805cca6: 9000         	str	r0, [sp]
 805cca8: 4802         	ldr	r0, [pc, #0x8]          @ 0x805ccb4 <xQueueIsQueueEmptyFromISR+0x58>
 805ccaa: 4780         	blx	r0
 805ccac: 9800         	ldr	r0, [sp]
 805ccae: b004         	add	sp, #0x10
 805ccb0: bd80         	pop	{r7, pc}
 805ccb2: bf00         	nop

0805ccb4 <$d.69>:
 805ccb4: 21 05 06 08  	.word	0x08060521
 805ccb8: 55 ec 05 08  	.word	0x0805ec55

0805ccbc <xQueueIsQueueFullFromISR>:
; {
 805ccbc: b580         	push	{r7, lr}
 805ccbe: 466f         	mov	r7, sp
 805ccc0: b084         	sub	sp, #0x10
 805ccc2: f643 5240    	movw	r2, #0x3d40
 805ccc6: f2c2 0200    	movt	r2, #0x2000
 805ccca: 6811         	ldr	r1, [r2]
 805cccc: f642 5340    	movw	r3, #0x2d40
 805ccd0: f2c2 0300    	movt	r3, #0x2000
 805ccd4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805ccd8: 3101         	adds	r1, #0x1
 805ccda: 6011         	str	r1, [r2]
 805ccdc: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805ccde: 9803         	ldr	r0, [sp, #0xc]
 805cce0: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805cce2: 9801         	ldr	r0, [sp, #0x4]
 805cce4: b920         	cbnz	r0, 0x805ccf0 <xQueueIsQueueFullFromISR+0x34> @ imm = #0x8
 805cce6: e7ff         	b	0x805cce8 <xQueueIsQueueFullFromISR+0x2c> @ imm = #-0x2
 805cce8: 480c         	ldr	r0, [pc, #0x30]         @ 0x805cd1c <xQueueIsQueueFullFromISR+0x60>
 805ccea: 4780         	blx	r0
 805ccec: e7ff         	b	0x805ccee <xQueueIsQueueFullFromISR+0x32> @ imm = #-0x2
 805ccee: e7fe         	b	0x805ccee <xQueueIsQueueFullFromISR+0x32> @ imm = #-0x4
;     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 805ccf0: 9801         	ldr	r0, [sp, #0x4]
 805ccf2: 6b80         	ldr	r0, [r0, #0x38]
 805ccf4: 9901         	ldr	r1, [sp, #0x4]
 805ccf6: 6bc9         	ldr	r1, [r1, #0x3c]
 805ccf8: 4288         	cmp	r0, r1
 805ccfa: d103         	bne	0x805cd04 <xQueueIsQueueFullFromISR+0x48> @ imm = #0x6
 805ccfc: e7ff         	b	0x805ccfe <xQueueIsQueueFullFromISR+0x42> @ imm = #-0x2
 805ccfe: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805cd00: 9002         	str	r0, [sp, #0x8]
;     }
 805cd02: e002         	b	0x805cd0a <xQueueIsQueueFullFromISR+0x4e> @ imm = #0x4
 805cd04: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805cd06: 9002         	str	r0, [sp, #0x8]
 805cd08: e7ff         	b	0x805cd0a <xQueueIsQueueFullFromISR+0x4e> @ imm = #-0x2
;     return xReturn;
 805cd0a: 9802         	ldr	r0, [sp, #0x8]
 805cd0c: 9000         	str	r0, [sp]
 805cd0e: 4802         	ldr	r0, [pc, #0x8]          @ 0x805cd18 <xQueueIsQueueFullFromISR+0x5c>
 805cd10: 4780         	blx	r0
 805cd12: 9800         	ldr	r0, [sp]
 805cd14: b004         	add	sp, #0x10
 805cd16: bd80         	pop	{r7, pc}

0805cd18 <$d.71>:
 805cd18: 21 05 06 08  	.word	0x08060521
 805cd1c: 55 ec 05 08  	.word	0x0805ec55

0805cd20 <vQueueAddToRegistry>:
;     {
 805cd20: b580         	push	{r7, lr}
 805cd22: 466f         	mov	r7, sp
 805cd24: b084         	sub	sp, #0x10
 805cd26: f643 5340    	movw	r3, #0x3d40
 805cd2a: f2c2 0300    	movt	r3, #0x2000
 805cd2e: 681a         	ldr	r2, [r3]
 805cd30: f642 5c40    	movw	r12, #0x2d40
 805cd34: f2c2 0c00    	movt	r12, #0x2000
 805cd38: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805cd3c: 3201         	adds	r2, #0x1
 805cd3e: 601a         	str	r2, [r3]
 805cd40: 9003         	str	r0, [sp, #0xc]
 805cd42: 9102         	str	r1, [sp, #0x8]
 805cd44: 2000         	movs	r0, #0x0
;         QueueRegistryItem_t * pxEntryToWrite = NULL;
 805cd46: 9000         	str	r0, [sp]
;         configASSERT( xQueue );
 805cd48: 9803         	ldr	r0, [sp, #0xc]
 805cd4a: b920         	cbnz	r0, 0x805cd56 <vQueueAddToRegistry+0x36> @ imm = #0x8
 805cd4c: e7ff         	b	0x805cd4e <vQueueAddToRegistry+0x2e> @ imm = #-0x2
 805cd4e: 4828         	ldr	r0, [pc, #0xa0]         @ 0x805cdf0 <vQueueAddToRegistry+0xd0>
 805cd50: 4780         	blx	r0
 805cd52: e7ff         	b	0x805cd54 <vQueueAddToRegistry+0x34> @ imm = #-0x2
 805cd54: e7fe         	b	0x805cd54 <vQueueAddToRegistry+0x34> @ imm = #-0x4
;         if( pcQueueName != NULL )
 805cd56: 9802         	ldr	r0, [sp, #0x8]
 805cd58: b3c8         	cbz	r0, 0x805cdce <vQueueAddToRegistry+0xae> @ imm = #0x72
 805cd5a: e7ff         	b	0x805cd5c <vQueueAddToRegistry+0x3c> @ imm = #-0x2
 805cd5c: 2000         	movs	r0, #0x0
;             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805cd5e: 9001         	str	r0, [sp, #0x4]
 805cd60: e7ff         	b	0x805cd62 <vQueueAddToRegistry+0x42> @ imm = #-0x2
 805cd62: 9801         	ldr	r0, [sp, #0x4]
 805cd64: 2807         	cmp	r0, #0x7
 805cd66: d831         	bhi	0x805cdcc <vQueueAddToRegistry+0xac> @ imm = #0x62
 805cd68: e7ff         	b	0x805cd6a <vQueueAddToRegistry+0x4a> @ imm = #-0x2
;                 if( xQueue == xQueueRegistry[ ux ].xHandle )
 805cd6a: 9803         	ldr	r0, [sp, #0xc]
 805cd6c: 9a01         	ldr	r2, [sp, #0x4]
 805cd6e: f242 3138    	movw	r1, #0x2338
 805cd72: f2c2 0100    	movt	r1, #0x2000
 805cd76: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805cd7a: 6849         	ldr	r1, [r1, #0x4]
 805cd7c: 4288         	cmp	r0, r1
 805cd7e: d109         	bne	0x805cd94 <vQueueAddToRegistry+0x74> @ imm = #0x12
 805cd80: e7ff         	b	0x805cd82 <vQueueAddToRegistry+0x62> @ imm = #-0x2
;                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 805cd82: 9901         	ldr	r1, [sp, #0x4]
 805cd84: f242 3038    	movw	r0, #0x2338
 805cd88: f2c2 0000    	movt	r0, #0x2000
 805cd8c: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805cd90: 9000         	str	r0, [sp]
;                     break;
 805cd92: e01b         	b	0x805cdcc <vQueueAddToRegistry+0xac> @ imm = #0x36
;                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 805cd94: 9800         	ldr	r0, [sp]
 805cd96: b990         	cbnz	r0, 0x805cdbe <vQueueAddToRegistry+0x9e> @ imm = #0x24
 805cd98: e7ff         	b	0x805cd9a <vQueueAddToRegistry+0x7a> @ imm = #-0x2
 805cd9a: 9901         	ldr	r1, [sp, #0x4]
 805cd9c: f242 3038    	movw	r0, #0x2338
 805cda0: f2c2 0000    	movt	r0, #0x2000
 805cda4: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805cda8: b948         	cbnz	r0, 0x805cdbe <vQueueAddToRegistry+0x9e> @ imm = #0x12
 805cdaa: e7ff         	b	0x805cdac <vQueueAddToRegistry+0x8c> @ imm = #-0x2
;                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 805cdac: 9901         	ldr	r1, [sp, #0x4]
 805cdae: f242 3038    	movw	r0, #0x2338
 805cdb2: f2c2 0000    	movt	r0, #0x2000
 805cdb6: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805cdba: 9000         	str	r0, [sp]
;                 }
 805cdbc: e000         	b	0x805cdc0 <vQueueAddToRegistry+0xa0> @ imm = #0x0
 805cdbe: e7ff         	b	0x805cdc0 <vQueueAddToRegistry+0xa0> @ imm = #-0x2
 805cdc0: e7ff         	b	0x805cdc2 <vQueueAddToRegistry+0xa2> @ imm = #-0x2
;             }
 805cdc2: e7ff         	b	0x805cdc4 <vQueueAddToRegistry+0xa4> @ imm = #-0x2
;             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805cdc4: 9801         	ldr	r0, [sp, #0x4]
 805cdc6: 3001         	adds	r0, #0x1
 805cdc8: 9001         	str	r0, [sp, #0x4]
 805cdca: e7ca         	b	0x805cd62 <vQueueAddToRegistry+0x42> @ imm = #-0x6c
;         }
 805cdcc: e7ff         	b	0x805cdce <vQueueAddToRegistry+0xae> @ imm = #-0x2
;         if( pxEntryToWrite != NULL )
 805cdce: 9800         	ldr	r0, [sp]
 805cdd0: b138         	cbz	r0, 0x805cde2 <vQueueAddToRegistry+0xc2> @ imm = #0xe
 805cdd2: e7ff         	b	0x805cdd4 <vQueueAddToRegistry+0xb4> @ imm = #-0x2
;             pxEntryToWrite->pcQueueName = pcQueueName;
 805cdd4: 9802         	ldr	r0, [sp, #0x8]
 805cdd6: 9900         	ldr	r1, [sp]
 805cdd8: 6008         	str	r0, [r1]
;             pxEntryToWrite->xHandle = xQueue;
 805cdda: 9803         	ldr	r0, [sp, #0xc]
 805cddc: 9900         	ldr	r1, [sp]
 805cdde: 6048         	str	r0, [r1, #0x4]
;         }
 805cde0: e7ff         	b	0x805cde2 <vQueueAddToRegistry+0xc2> @ imm = #-0x2
;     }
 805cde2: 4802         	ldr	r0, [pc, #0x8]          @ 0x805cdec <vQueueAddToRegistry+0xcc>
 805cde4: 4780         	blx	r0
 805cde6: b004         	add	sp, #0x10
 805cde8: bd80         	pop	{r7, pc}
 805cdea: bf00         	nop

0805cdec <$d.73>:
 805cdec: 21 05 06 08  	.word	0x08060521
 805cdf0: 55 ec 05 08  	.word	0x0805ec55

0805cdf4 <pcQueueGetName>:
;     {
 805cdf4: b580         	push	{r7, lr}
 805cdf6: 466f         	mov	r7, sp
 805cdf8: b084         	sub	sp, #0x10
 805cdfa: f643 5240    	movw	r2, #0x3d40
 805cdfe: f2c2 0200    	movt	r2, #0x2000
 805ce02: 6811         	ldr	r1, [r2]
 805ce04: f642 5340    	movw	r3, #0x2d40
 805ce08: f2c2 0300    	movt	r3, #0x2000
 805ce0c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805ce10: 3101         	adds	r1, #0x1
 805ce12: 6011         	str	r1, [r2]
 805ce14: 9003         	str	r0, [sp, #0xc]
 805ce16: 2000         	movs	r0, #0x0
;         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 805ce18: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xQueue );
 805ce1a: 9803         	ldr	r0, [sp, #0xc]
 805ce1c: b920         	cbnz	r0, 0x805ce28 <pcQueueGetName+0x34> @ imm = #0x8
 805ce1e: e7ff         	b	0x805ce20 <pcQueueGetName+0x2c> @ imm = #-0x2
 805ce20: 4817         	ldr	r0, [pc, #0x5c]         @ 0x805ce80 <pcQueueGetName+0x8c>
 805ce22: 4780         	blx	r0
 805ce24: e7ff         	b	0x805ce26 <pcQueueGetName+0x32> @ imm = #-0x2
 805ce26: e7fe         	b	0x805ce26 <pcQueueGetName+0x32> @ imm = #-0x4
 805ce28: 2000         	movs	r0, #0x0
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805ce2a: 9002         	str	r0, [sp, #0x8]
 805ce2c: e7ff         	b	0x805ce2e <pcQueueGetName+0x3a> @ imm = #-0x2
 805ce2e: 9802         	ldr	r0, [sp, #0x8]
 805ce30: 2807         	cmp	r0, #0x7
 805ce32: d81b         	bhi	0x805ce6c <pcQueueGetName+0x78> @ imm = #0x36
 805ce34: e7ff         	b	0x805ce36 <pcQueueGetName+0x42> @ imm = #-0x2
;             if( xQueueRegistry[ ux ].xHandle == xQueue )
 805ce36: 9902         	ldr	r1, [sp, #0x8]
 805ce38: f242 3038    	movw	r0, #0x2338
 805ce3c: f2c2 0000    	movt	r0, #0x2000
 805ce40: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805ce44: 6840         	ldr	r0, [r0, #0x4]
 805ce46: 9903         	ldr	r1, [sp, #0xc]
 805ce48: 4288         	cmp	r0, r1
 805ce4a: d109         	bne	0x805ce60 <pcQueueGetName+0x6c> @ imm = #0x12
 805ce4c: e7ff         	b	0x805ce4e <pcQueueGetName+0x5a> @ imm = #-0x2
;                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 805ce4e: 9902         	ldr	r1, [sp, #0x8]
 805ce50: f242 3038    	movw	r0, #0x2338
 805ce54: f2c2 0000    	movt	r0, #0x2000
 805ce58: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805ce5c: 9001         	str	r0, [sp, #0x4]
;                 break;
 805ce5e: e005         	b	0x805ce6c <pcQueueGetName+0x78> @ imm = #0xa
 805ce60: e7ff         	b	0x805ce62 <pcQueueGetName+0x6e> @ imm = #-0x2
;         }
 805ce62: e7ff         	b	0x805ce64 <pcQueueGetName+0x70> @ imm = #-0x2
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805ce64: 9802         	ldr	r0, [sp, #0x8]
 805ce66: 3001         	adds	r0, #0x1
 805ce68: 9002         	str	r0, [sp, #0x8]
 805ce6a: e7e0         	b	0x805ce2e <pcQueueGetName+0x3a> @ imm = #-0x40
;         return pcReturn;
 805ce6c: 9801         	ldr	r0, [sp, #0x4]
 805ce6e: 9000         	str	r0, [sp]
 805ce70: 4802         	ldr	r0, [pc, #0x8]          @ 0x805ce7c <pcQueueGetName+0x88>
 805ce72: 4780         	blx	r0
 805ce74: 9800         	ldr	r0, [sp]
 805ce76: b004         	add	sp, #0x10
 805ce78: bd80         	pop	{r7, pc}
 805ce7a: bf00         	nop

0805ce7c <$d.75>:
 805ce7c: 21 05 06 08  	.word	0x08060521
 805ce80: 55 ec 05 08  	.word	0x0805ec55

0805ce84 <vQueueWaitForMessageRestricted>:
;     {
 805ce84: b5d0         	push	{r4, r6, r7, lr}
 805ce86: af02         	add	r7, sp, #0x8
 805ce88: b084         	sub	sp, #0x10
 805ce8a: f643 5c40    	movw	r12, #0x3d40
 805ce8e: f2c2 0c00    	movt	r12, #0x2000
 805ce92: f8dc 3000    	ldr.w	r3, [r12]
 805ce96: f642 5440    	movw	r4, #0x2d40
 805ce9a: f2c2 0400    	movt	r4, #0x2000
 805ce9e: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805cea2: 3301         	adds	r3, #0x1
 805cea4: f8cc 3000    	str.w	r3, [r12]
 805cea8: 9003         	str	r0, [sp, #0xc]
 805ceaa: 9102         	str	r1, [sp, #0x8]
 805ceac: 9201         	str	r2, [sp, #0x4]
;         Queue_t * const pxQueue = xQueue;
 805ceae: 9803         	ldr	r0, [sp, #0xc]
 805ceb0: 9000         	str	r0, [sp]
;         prvLockQueue( pxQueue );
 805ceb2: 4816         	ldr	r0, [pc, #0x58]         @ 0x805cf0c <vQueueWaitForMessageRestricted+0x88>
 805ceb4: 4780         	blx	r0
 805ceb6: 9800         	ldr	r0, [sp]
 805ceb8: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805cebc: 3001         	adds	r0, #0x1
 805cebe: b928         	cbnz	r0, 0x805cecc <vQueueWaitForMessageRestricted+0x48> @ imm = #0xa
 805cec0: e7ff         	b	0x805cec2 <vQueueWaitForMessageRestricted+0x3e> @ imm = #-0x2
 805cec2: 9900         	ldr	r1, [sp]
 805cec4: 2000         	movs	r0, #0x0
 805cec6: f881 0044    	strb.w	r0, [r1, #0x44]
 805ceca: e7ff         	b	0x805cecc <vQueueWaitForMessageRestricted+0x48> @ imm = #-0x2
 805cecc: 9800         	ldr	r0, [sp]
 805cece: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805ced2: 3001         	adds	r0, #0x1
 805ced4: b928         	cbnz	r0, 0x805cee2 <vQueueWaitForMessageRestricted+0x5e> @ imm = #0xa
 805ced6: e7ff         	b	0x805ced8 <vQueueWaitForMessageRestricted+0x54> @ imm = #-0x2
 805ced8: 9900         	ldr	r1, [sp]
 805ceda: 2000         	movs	r0, #0x0
 805cedc: f881 0045    	strb.w	r0, [r1, #0x45]
 805cee0: e7ff         	b	0x805cee2 <vQueueWaitForMessageRestricted+0x5e> @ imm = #-0x2
 805cee2: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805cf10 <vQueueWaitForMessageRestricted+0x8c>
 805cee4: 4780         	blx	r0
;         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 805cee6: 9800         	ldr	r0, [sp]
 805cee8: 6b80         	ldr	r0, [r0, #0x38]
 805ceea: b938         	cbnz	r0, 0x805cefc <vQueueWaitForMessageRestricted+0x78> @ imm = #0xe
 805ceec: e7ff         	b	0x805ceee <vQueueWaitForMessageRestricted+0x6a> @ imm = #-0x2
;             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 805ceee: 9800         	ldr	r0, [sp]
 805cef0: 3024         	adds	r0, #0x24
 805cef2: 9902         	ldr	r1, [sp, #0x8]
 805cef4: 9a01         	ldr	r2, [sp, #0x4]
 805cef6: 4b07         	ldr	r3, [pc, #0x1c]         @ 0x805cf14 <vQueueWaitForMessageRestricted+0x90>
 805cef8: 4798         	blx	r3
;         }
 805cefa: e000         	b	0x805cefe <vQueueWaitForMessageRestricted+0x7a> @ imm = #0x0
 805cefc: e7ff         	b	0x805cefe <vQueueWaitForMessageRestricted+0x7a> @ imm = #-0x2
;         prvUnlockQueue( pxQueue );
 805cefe: 9800         	ldr	r0, [sp]
 805cf00: 4905         	ldr	r1, [pc, #0x14]         @ 0x805cf18 <vQueueWaitForMessageRestricted+0x94>
 805cf02: 4788         	blx	r1
;     }
 805cf04: 4805         	ldr	r0, [pc, #0x14]         @ 0x805cf1c <vQueueWaitForMessageRestricted+0x98>
 805cf06: 4780         	blx	r0
 805cf08: b004         	add	sp, #0x10
 805cf0a: bdd0         	pop	{r4, r6, r7, pc}

0805cf0c <$d.77>:
 805cf0c: 05 e1 05 08  	.word	0x0805e105
 805cf10: 4d e1 05 08  	.word	0x0805e14d
 805cf14: 65 72 05 08  	.word	0x08057265
 805cf18: f5 bd 05 08  	.word	0x0805bdf5
 805cf1c: 21 05 06 08  	.word	0x08060521

0805cf20 <xStreamBufferGenericCreate>:
;     {
 805cf20: b5b0         	push	{r4, r5, r7, lr}
 805cf22: af02         	add	r7, sp, #0x8
 805cf24: b08a         	sub	sp, #0x28
 805cf26: 4674         	mov	r4, lr
 805cf28: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805cf2c: f643 5e40    	movw	lr, #0x3d40
 805cf30: f2c2 0e00    	movt	lr, #0x2000
 805cf34: f8de c000    	ldr.w	r12, [lr]
 805cf38: f642 5540    	movw	r5, #0x2d40
 805cf3c: f2c2 0500    	movt	r5, #0x2000
 805cf40: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805cf44: f10c 0c01    	add.w	r12, r12, #0x1
 805cf48: f8ce c000    	str.w	r12, [lr]
 805cf4c: 9009         	str	r0, [sp, #0x24]
 805cf4e: 9108         	str	r1, [sp, #0x20]
 805cf50: 9207         	str	r2, [sp, #0x1c]
 805cf52: 9306         	str	r3, [sp, #0x18]
;         if( xIsMessageBuffer == pdTRUE )
 805cf54: 9807         	ldr	r0, [sp, #0x1c]
 805cf56: 2801         	cmp	r0, #0x1
 805cf58: d10c         	bne	0x805cf74 <xStreamBufferGenericCreate+0x54> @ imm = #0x18
 805cf5a: e7ff         	b	0x805cf5c <xStreamBufferGenericCreate+0x3c> @ imm = #-0x2
 805cf5c: 2001         	movs	r0, #0x1
;             ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 805cf5e: f807 0c1d    	strb	r0, [r7, #-29]
;             configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 805cf62: 9809         	ldr	r0, [sp, #0x24]
 805cf64: 2804         	cmp	r0, #0x4
 805cf66: d804         	bhi	0x805cf72 <xStreamBufferGenericCreate+0x52> @ imm = #0x8
 805cf68: e7ff         	b	0x805cf6a <xStreamBufferGenericCreate+0x4a> @ imm = #-0x2
 805cf6a: 482d         	ldr	r0, [pc, #0xb4]         @ 0x805d020 <xStreamBufferGenericCreate+0x100>
 805cf6c: 4780         	blx	r0
 805cf6e: e7ff         	b	0x805cf70 <xStreamBufferGenericCreate+0x50> @ imm = #-0x2
 805cf70: e7fe         	b	0x805cf70 <xStreamBufferGenericCreate+0x50> @ imm = #-0x4
;         }
 805cf72: e00a         	b	0x805cf8a <xStreamBufferGenericCreate+0x6a> @ imm = #0x14
 805cf74: 2000         	movs	r0, #0x0
;             ucFlags = 0;
 805cf76: f807 0c1d    	strb	r0, [r7, #-29]
;             configASSERT( xBufferSizeBytes > 0 );
 805cf7a: 9809         	ldr	r0, [sp, #0x24]
 805cf7c: b920         	cbnz	r0, 0x805cf88 <xStreamBufferGenericCreate+0x68> @ imm = #0x8
 805cf7e: e7ff         	b	0x805cf80 <xStreamBufferGenericCreate+0x60> @ imm = #-0x2
 805cf80: 4822         	ldr	r0, [pc, #0x88]         @ 0x805d00c <xStreamBufferGenericCreate+0xec>
 805cf82: 4780         	blx	r0
 805cf84: e7ff         	b	0x805cf86 <xStreamBufferGenericCreate+0x66> @ imm = #-0x2
 805cf86: e7fe         	b	0x805cf86 <xStreamBufferGenericCreate+0x66> @ imm = #-0x4
 805cf88: e7ff         	b	0x805cf8a <xStreamBufferGenericCreate+0x6a> @ imm = #-0x2
;         configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 805cf8a: 9808         	ldr	r0, [sp, #0x20]
 805cf8c: 9909         	ldr	r1, [sp, #0x24]
 805cf8e: 4288         	cmp	r0, r1
 805cf90: d904         	bls	0x805cf9c <xStreamBufferGenericCreate+0x7c> @ imm = #0x8
 805cf92: e7ff         	b	0x805cf94 <xStreamBufferGenericCreate+0x74> @ imm = #-0x2
 805cf94: 4821         	ldr	r0, [pc, #0x84]         @ 0x805d01c <xStreamBufferGenericCreate+0xfc>
 805cf96: 4780         	blx	r0
 805cf98: e7ff         	b	0x805cf9a <xStreamBufferGenericCreate+0x7a> @ imm = #-0x2
 805cf9a: e7fe         	b	0x805cf9a <xStreamBufferGenericCreate+0x7a> @ imm = #-0x4
;         if( xTriggerLevelBytes == ( size_t ) 0 )
 805cf9c: 9808         	ldr	r0, [sp, #0x20]
 805cf9e: b918         	cbnz	r0, 0x805cfa8 <xStreamBufferGenericCreate+0x88> @ imm = #0x6
 805cfa0: e7ff         	b	0x805cfa2 <xStreamBufferGenericCreate+0x82> @ imm = #-0x2
 805cfa2: 2001         	movs	r0, #0x1
;             xTriggerLevelBytes = ( size_t ) 1;
 805cfa4: 9008         	str	r0, [sp, #0x20]
;         }
 805cfa6: e7ff         	b	0x805cfa8 <xStreamBufferGenericCreate+0x88> @ imm = #-0x2
;         if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 805cfa8: 9809         	ldr	r0, [sp, #0x24]
 805cfaa: f100 0125    	add.w	r1, r0, #0x25
 805cfae: 4288         	cmp	r0, r1
 805cfb0: d209         	bhs	0x805cfc6 <xStreamBufferGenericCreate+0xa6> @ imm = #0x12
 805cfb2: e7ff         	b	0x805cfb4 <xStreamBufferGenericCreate+0x94> @ imm = #-0x2
;             xBufferSizeBytes++;
 805cfb4: 9809         	ldr	r0, [sp, #0x24]
 805cfb6: 3001         	adds	r0, #0x1
 805cfb8: 9009         	str	r0, [sp, #0x24]
;             pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
 805cfba: 9809         	ldr	r0, [sp, #0x24]
 805cfbc: 3024         	adds	r0, #0x24
 805cfbe: 4914         	ldr	r1, [pc, #0x50]         @ 0x805d010 <xStreamBufferGenericCreate+0xf0>
 805cfc0: 4788         	blx	r1
 805cfc2: 9005         	str	r0, [sp, #0x14]
;         }
 805cfc4: e002         	b	0x805cfcc <xStreamBufferGenericCreate+0xac> @ imm = #0x4
 805cfc6: 2000         	movs	r0, #0x0
;             pvAllocatedMemory = NULL;
 805cfc8: 9005         	str	r0, [sp, #0x14]
 805cfca: e7ff         	b	0x805cfcc <xStreamBufferGenericCreate+0xac> @ imm = #-0x2
;         if( pvAllocatedMemory != NULL )
 805cfcc: 9805         	ldr	r0, [sp, #0x14]
 805cfce: b1a0         	cbz	r0, 0x805cffa <xStreamBufferGenericCreate+0xda> @ imm = #0x28
 805cfd0: e7ff         	b	0x805cfd2 <xStreamBufferGenericCreate+0xb2> @ imm = #-0x2
;             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 805cfd2: 9805         	ldr	r0, [sp, #0x14]
;                                           ( ( uint8_t * ) pvAllocatedMemory ) + sizeof( StreamBuffer_t ), /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
 805cfd4: f100 0124    	add.w	r1, r0, #0x24
;                                           xBufferSizeBytes,
 805cfd8: 9a09         	ldr	r2, [sp, #0x24]
;                                           xTriggerLevelBytes,
 805cfda: 9b08         	ldr	r3, [sp, #0x20]
;                                           ucFlags,
 805cfdc: f817 cc1d    	ldrb	r12, [r7, #-29]
;                                           pxSendCompletedCallback,
 805cfe0: 9c06         	ldr	r4, [sp, #0x18]
;                                           pxReceiveCompletedCallback );
 805cfe2: 68bd         	ldr	r5, [r7, #0x8]
;             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 805cfe4: 46ee         	mov	lr, sp
 805cfe6: f8ce 5008    	str.w	r5, [lr, #0x8]
 805cfea: f8ce 4004    	str.w	r4, [lr, #0x4]
 805cfee: f8ce c000    	str.w	r12, [lr]
 805cff2: f8df c020    	ldr.w	r12, [pc, #0x20]        @ 0x805d014 <xStreamBufferGenericCreate+0xf4>
 805cff6: 47e0         	blx	r12
;         }
 805cff8: e000         	b	0x805cffc <xStreamBufferGenericCreate+0xdc> @ imm = #0x0
 805cffa: e7ff         	b	0x805cffc <xStreamBufferGenericCreate+0xdc> @ imm = #-0x2
;         return ( StreamBufferHandle_t ) pvAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 805cffc: 9805         	ldr	r0, [sp, #0x14]
 805cffe: 9003         	str	r0, [sp, #0xc]
 805d000: 4805         	ldr	r0, [pc, #0x14]         @ 0x805d018 <xStreamBufferGenericCreate+0xf8>
 805d002: 4780         	blx	r0
 805d004: 9803         	ldr	r0, [sp, #0xc]
 805d006: b00a         	add	sp, #0x28
 805d008: bdb0         	pop	{r4, r5, r7, pc}
 805d00a: bf00         	nop

0805d00c <$d.1>:
 805d00c: 55 ec 05 08  	.word	0x0805ec55
 805d010: 75 a0 05 08  	.word	0x0805a075
 805d014: 25 d0 05 08  	.word	0x0805d025
 805d018: 21 05 06 08  	.word	0x08060521
 805d01c: 55 ec 05 08  	.word	0x0805ec55
 805d020: 55 ec 05 08  	.word	0x0805ec55

0805d024 <prvInitialiseNewStreamBuffer>:
; {
 805d024: b5f0         	push	{r4, r5, r6, r7, lr}
 805d026: af03         	add	r7, sp, #0xc
 805d028: f84d bd04    	str	r11, [sp, #-4]!
 805d02c: b086         	sub	sp, #0x18
 805d02e: 4675         	mov	r5, lr
 805d030: 4684         	mov	r12, r0
 805d032: 6938         	ldr	r0, [r7, #0x10]
 805d034: 68f8         	ldr	r0, [r7, #0xc]
 805d036: 68b8         	ldr	r0, [r7, #0x8]
 805d038: f643 5440    	movw	r4, #0x3d40
 805d03c: f2c2 0400    	movt	r4, #0x2000
 805d040: f8d4 e000    	ldr.w	lr, [r4]
 805d044: f642 5640    	movw	r6, #0x2d40
 805d048: f2c2 0600    	movt	r6, #0x2000
 805d04c: f846 502e    	str.w	r5, [r6, lr, lsl #2]
 805d050: f10e 0e01    	add.w	lr, lr, #0x1
 805d054: f8c4 e000    	str.w	lr, [r4]
 805d058: f8cd c014    	str.w	r12, [sp, #0x14]
 805d05c: 9104         	str	r1, [sp, #0x10]
 805d05e: 9203         	str	r2, [sp, #0xc]
 805d060: 9302         	str	r3, [sp, #0x8]
 805d062: f807 0c21    	strb	r0, [r7, #-33]
;         configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
 805d066: 9804         	ldr	r0, [sp, #0x10]
 805d068: 9a03         	ldr	r2, [sp, #0xc]
 805d06a: 4b11         	ldr	r3, [pc, #0x44]         @ 0x805d0b0 <prvInitialiseNewStreamBuffer+0x8c>
 805d06c: 2155         	movs	r1, #0x55
 805d06e: 4798         	blx	r3
 805d070: 9904         	ldr	r1, [sp, #0x10]
 805d072: 4288         	cmp	r0, r1
 805d074: d004         	beq	0x805d080 <prvInitialiseNewStreamBuffer+0x5c> @ imm = #0x8
 805d076: e7ff         	b	0x805d078 <prvInitialiseNewStreamBuffer+0x54> @ imm = #-0x2
 805d078: 4810         	ldr	r0, [pc, #0x40]         @ 0x805d0bc <prvInitialiseNewStreamBuffer+0x98>
 805d07a: 4780         	blx	r0
 805d07c: e7ff         	b	0x805d07e <prvInitialiseNewStreamBuffer+0x5a> @ imm = #-0x2
 805d07e: e7fe         	b	0x805d07e <prvInitialiseNewStreamBuffer+0x5a> @ imm = #-0x4
;     ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 805d080: 9805         	ldr	r0, [sp, #0x14]
 805d082: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x805d0b4 <prvInitialiseNewStreamBuffer+0x90>
 805d084: 2100         	movs	r1, #0x0
 805d086: 2224         	movs	r2, #0x24
 805d088: 4798         	blx	r3
;     pxStreamBuffer->pucBuffer = pucBuffer;
 805d08a: 9804         	ldr	r0, [sp, #0x10]
 805d08c: 9905         	ldr	r1, [sp, #0x14]
 805d08e: 6188         	str	r0, [r1, #0x18]
;     pxStreamBuffer->xLength = xBufferSizeBytes;
 805d090: 9803         	ldr	r0, [sp, #0xc]
 805d092: 9905         	ldr	r1, [sp, #0x14]
 805d094: 6088         	str	r0, [r1, #0x8]
;     pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 805d096: 9802         	ldr	r0, [sp, #0x8]
 805d098: 9905         	ldr	r1, [sp, #0x14]
 805d09a: 60c8         	str	r0, [r1, #0xc]
;     pxStreamBuffer->ucFlags = ucFlags;
 805d09c: f817 0c21    	ldrb	r0, [r7, #-33]
 805d0a0: 9905         	ldr	r1, [sp, #0x14]
 805d0a2: 7708         	strb	r0, [r1, #0x1c]
; }
 805d0a4: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d0b8 <prvInitialiseNewStreamBuffer+0x94>
 805d0a6: 4780         	blx	r0
 805d0a8: b006         	add	sp, #0x18
 805d0aa: f85d bb04    	ldr	r11, [sp], #4
 805d0ae: bdf0         	pop	{r4, r5, r6, r7, pc}

0805d0b0 <$d.3>:
 805d0b0: 75 23 06 08  	.word	0x08062375
 805d0b4: 75 23 06 08  	.word	0x08062375
 805d0b8: 21 05 06 08  	.word	0x08060521
 805d0bc: 55 ec 05 08  	.word	0x0805ec55

0805d0c0 <vStreamBufferDelete>:
; {
 805d0c0: b580         	push	{r7, lr}
 805d0c2: 466f         	mov	r7, sp
 805d0c4: b082         	sub	sp, #0x8
 805d0c6: f643 5240    	movw	r2, #0x3d40
 805d0ca: f2c2 0200    	movt	r2, #0x2000
 805d0ce: 6811         	ldr	r1, [r2]
 805d0d0: f642 5340    	movw	r3, #0x2d40
 805d0d4: f2c2 0300    	movt	r3, #0x2000
 805d0d8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805d0dc: 3101         	adds	r1, #0x1
 805d0de: 6011         	str	r1, [r2]
 805d0e0: 9001         	str	r0, [sp, #0x4]
;     StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 805d0e2: 9801         	ldr	r0, [sp, #0x4]
 805d0e4: 9000         	str	r0, [sp]
;     configASSERT( pxStreamBuffer );
 805d0e6: 9800         	ldr	r0, [sp]
 805d0e8: b920         	cbnz	r0, 0x805d0f4 <vStreamBufferDelete+0x34> @ imm = #0x8
 805d0ea: e7ff         	b	0x805d0ec <vStreamBufferDelete+0x2c> @ imm = #-0x2
 805d0ec: 480e         	ldr	r0, [pc, #0x38]         @ 0x805d128 <vStreamBufferDelete+0x68>
 805d0ee: 4780         	blx	r0
 805d0f0: e7ff         	b	0x805d0f2 <vStreamBufferDelete+0x32> @ imm = #-0x2
 805d0f2: e7fe         	b	0x805d0f2 <vStreamBufferDelete+0x32> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 805d0f4: 9800         	ldr	r0, [sp]
 805d0f6: 7f00         	ldrb	r0, [r0, #0x1c]
 805d0f8: 0780         	lsls	r0, r0, #0x1e
 805d0fa: 2800         	cmp	r0, #0x0
 805d0fc: d404         	bmi	0x805d108 <vStreamBufferDelete+0x48> @ imm = #0x8
 805d0fe: e7ff         	b	0x805d100 <vStreamBufferDelete+0x40> @ imm = #-0x2
;             vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 805d100: 9800         	ldr	r0, [sp]
 805d102: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805d120 <vStreamBufferDelete+0x60>
 805d104: 4788         	blx	r1
;     }
 805d106: e005         	b	0x805d114 <vStreamBufferDelete+0x54> @ imm = #0xa
;         ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 805d108: 9800         	ldr	r0, [sp]
 805d10a: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805d11c <vStreamBufferDelete+0x5c>
 805d10c: 2100         	movs	r1, #0x0
 805d10e: 2224         	movs	r2, #0x24
 805d110: 4798         	blx	r3
 805d112: e7ff         	b	0x805d114 <vStreamBufferDelete+0x54> @ imm = #-0x2
; }
 805d114: 4803         	ldr	r0, [pc, #0xc]          @ 0x805d124 <vStreamBufferDelete+0x64>
 805d116: 4780         	blx	r0
 805d118: b002         	add	sp, #0x8
 805d11a: bd80         	pop	{r7, pc}

0805d11c <$d.5>:
 805d11c: 75 23 06 08  	.word	0x08062375
 805d120: 41 a4 05 08  	.word	0x0805a441
 805d124: 21 05 06 08  	.word	0x08060521
 805d128: 55 ec 05 08  	.word	0x0805ec55

0805d12c <xStreamBufferReset>:
; {
 805d12c: b5b0         	push	{r4, r5, r7, lr}
 805d12e: af02         	add	r7, sp, #0x8
 805d130: b08a         	sub	sp, #0x28
 805d132: f643 5240    	movw	r2, #0x3d40
 805d136: f2c2 0200    	movt	r2, #0x2000
 805d13a: 6811         	ldr	r1, [r2]
 805d13c: f642 5340    	movw	r3, #0x2d40
 805d140: f2c2 0300    	movt	r3, #0x2000
 805d144: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805d148: 3101         	adds	r1, #0x1
 805d14a: 6011         	str	r1, [r2]
 805d14c: 9009         	str	r0, [sp, #0x24]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805d14e: 9809         	ldr	r0, [sp, #0x24]
 805d150: 9008         	str	r0, [sp, #0x20]
 805d152: 2000         	movs	r0, #0x0
;     BaseType_t xReturn = pdFAIL;
 805d154: 9007         	str	r0, [sp, #0x1c]
;     StreamBufferCallbackFunction_t pxSendCallback = NULL, pxReceiveCallback = NULL;
 805d156: 9006         	str	r0, [sp, #0x18]
 805d158: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxStreamBuffer );
 805d15a: 9808         	ldr	r0, [sp, #0x20]
 805d15c: b920         	cbnz	r0, 0x805d168 <xStreamBufferReset+0x3c> @ imm = #0x8
 805d15e: e7ff         	b	0x805d160 <xStreamBufferReset+0x34> @ imm = #-0x2
 805d160: 481c         	ldr	r0, [pc, #0x70]         @ 0x805d1d4 <xStreamBufferReset+0xa8>
 805d162: 4780         	blx	r0
 805d164: e7ff         	b	0x805d166 <xStreamBufferReset+0x3a> @ imm = #-0x2
 805d166: e7fe         	b	0x805d166 <xStreamBufferReset+0x3a> @ imm = #-0x4
;         uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 805d168: 9808         	ldr	r0, [sp, #0x20]
 805d16a: 6a00         	ldr	r0, [r0, #0x20]
 805d16c: 9004         	str	r0, [sp, #0x10]
;     taskENTER_CRITICAL();
 805d16e: 4815         	ldr	r0, [pc, #0x54]         @ 0x805d1c4 <xStreamBufferReset+0x98>
 805d170: 4780         	blx	r0
;         if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
 805d172: 9808         	ldr	r0, [sp, #0x20]
 805d174: 6900         	ldr	r0, [r0, #0x10]
 805d176: b9e0         	cbnz	r0, 0x805d1b2 <xStreamBufferReset+0x86> @ imm = #0x38
 805d178: e7ff         	b	0x805d17a <xStreamBufferReset+0x4e> @ imm = #-0x2
 805d17a: 9808         	ldr	r0, [sp, #0x20]
 805d17c: 6940         	ldr	r0, [r0, #0x14]
 805d17e: b9c0         	cbnz	r0, 0x805d1b2 <xStreamBufferReset+0x86> @ imm = #0x30
 805d180: e7ff         	b	0x805d182 <xStreamBufferReset+0x56> @ imm = #-0x2
;             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 805d182: 9808         	ldr	r0, [sp, #0x20]
;                                           pxStreamBuffer->xLength,
 805d184: 6882         	ldr	r2, [r0, #0x8]
;                                           pxStreamBuffer->xTriggerLevelBytes,
 805d186: 68c3         	ldr	r3, [r0, #0xc]
;                                           pxStreamBuffer->pucBuffer,
 805d188: 6981         	ldr	r1, [r0, #0x18]
;                                           pxStreamBuffer->ucFlags,
 805d18a: f890 c01c    	ldrb.w	r12, [r0, #0x1c]
;                                           pxSendCallback,
 805d18e: 9c06         	ldr	r4, [sp, #0x18]
;                                           pxReceiveCallback );
 805d190: 9d05         	ldr	r5, [sp, #0x14]
;             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 805d192: 46ee         	mov	lr, sp
 805d194: f8ce 5008    	str.w	r5, [lr, #0x8]
 805d198: f8ce 4004    	str.w	r4, [lr, #0x4]
 805d19c: f8ce c000    	str.w	r12, [lr]
 805d1a0: f8df c024    	ldr.w	r12, [pc, #0x24]        @ 0x805d1c8 <xStreamBufferReset+0x9c>
 805d1a4: 47e0         	blx	r12
;                 pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 805d1a6: 9804         	ldr	r0, [sp, #0x10]
 805d1a8: 9908         	ldr	r1, [sp, #0x20]
 805d1aa: 6208         	str	r0, [r1, #0x20]
 805d1ac: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805d1ae: 9007         	str	r0, [sp, #0x1c]
;         }
 805d1b0: e7ff         	b	0x805d1b2 <xStreamBufferReset+0x86> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805d1b2: 4806         	ldr	r0, [pc, #0x18]         @ 0x805d1cc <xStreamBufferReset+0xa0>
 805d1b4: 4780         	blx	r0
;     return xReturn;
 805d1b6: 9807         	ldr	r0, [sp, #0x1c]
 805d1b8: 9003         	str	r0, [sp, #0xc]
 805d1ba: 4805         	ldr	r0, [pc, #0x14]         @ 0x805d1d0 <xStreamBufferReset+0xa4>
 805d1bc: 4780         	blx	r0
 805d1be: 9803         	ldr	r0, [sp, #0xc]
 805d1c0: b00a         	add	sp, #0x28
 805d1c2: bdb0         	pop	{r4, r5, r7, pc}

0805d1c4 <$d.7>:
 805d1c4: 05 e1 05 08  	.word	0x0805e105
 805d1c8: 25 d0 05 08  	.word	0x0805d025
 805d1cc: 4d e1 05 08  	.word	0x0805e14d
 805d1d0: 21 05 06 08  	.word	0x08060521
 805d1d4: 55 ec 05 08  	.word	0x0805ec55

0805d1d8 <xStreamBufferSetTriggerLevel>:
; {
 805d1d8: b580         	push	{r7, lr}
 805d1da: 466f         	mov	r7, sp
 805d1dc: b086         	sub	sp, #0x18
 805d1de: f643 5340    	movw	r3, #0x3d40
 805d1e2: f2c2 0300    	movt	r3, #0x2000
 805d1e6: 681a         	ldr	r2, [r3]
 805d1e8: f642 5c40    	movw	r12, #0x2d40
 805d1ec: f2c2 0c00    	movt	r12, #0x2000
 805d1f0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805d1f4: 3201         	adds	r2, #0x1
 805d1f6: 601a         	str	r2, [r3]
 805d1f8: 9005         	str	r0, [sp, #0x14]
 805d1fa: 9104         	str	r1, [sp, #0x10]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805d1fc: 9805         	ldr	r0, [sp, #0x14]
 805d1fe: 9003         	str	r0, [sp, #0xc]
;     configASSERT( pxStreamBuffer );
 805d200: 9803         	ldr	r0, [sp, #0xc]
 805d202: b920         	cbnz	r0, 0x805d20e <xStreamBufferSetTriggerLevel+0x36> @ imm = #0x8
 805d204: e7ff         	b	0x805d206 <xStreamBufferSetTriggerLevel+0x2e> @ imm = #-0x2
 805d206: 4811         	ldr	r0, [pc, #0x44]         @ 0x805d24c <xStreamBufferSetTriggerLevel+0x74>
 805d208: 4780         	blx	r0
 805d20a: e7ff         	b	0x805d20c <xStreamBufferSetTriggerLevel+0x34> @ imm = #-0x2
 805d20c: e7fe         	b	0x805d20c <xStreamBufferSetTriggerLevel+0x34> @ imm = #-0x4
;     if( xTriggerLevel == ( size_t ) 0 )
 805d20e: 9804         	ldr	r0, [sp, #0x10]
 805d210: b918         	cbnz	r0, 0x805d21a <xStreamBufferSetTriggerLevel+0x42> @ imm = #0x6
 805d212: e7ff         	b	0x805d214 <xStreamBufferSetTriggerLevel+0x3c> @ imm = #-0x2
 805d214: 2001         	movs	r0, #0x1
;         xTriggerLevel = ( size_t ) 1;
 805d216: 9004         	str	r0, [sp, #0x10]
;     }
 805d218: e7ff         	b	0x805d21a <xStreamBufferSetTriggerLevel+0x42> @ imm = #-0x2
;     if( xTriggerLevel < pxStreamBuffer->xLength )
 805d21a: 9804         	ldr	r0, [sp, #0x10]
 805d21c: 9903         	ldr	r1, [sp, #0xc]
 805d21e: 6889         	ldr	r1, [r1, #0x8]
 805d220: 4288         	cmp	r0, r1
 805d222: d206         	bhs	0x805d232 <xStreamBufferSetTriggerLevel+0x5a> @ imm = #0xc
 805d224: e7ff         	b	0x805d226 <xStreamBufferSetTriggerLevel+0x4e> @ imm = #-0x2
;         pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 805d226: 9804         	ldr	r0, [sp, #0x10]
 805d228: 9903         	ldr	r1, [sp, #0xc]
 805d22a: 60c8         	str	r0, [r1, #0xc]
 805d22c: 2001         	movs	r0, #0x1
;         xReturn = pdPASS;
 805d22e: 9002         	str	r0, [sp, #0x8]
;     }
 805d230: e002         	b	0x805d238 <xStreamBufferSetTriggerLevel+0x60> @ imm = #0x4
 805d232: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805d234: 9002         	str	r0, [sp, #0x8]
 805d236: e7ff         	b	0x805d238 <xStreamBufferSetTriggerLevel+0x60> @ imm = #-0x2
;     return xReturn;
 805d238: 9802         	ldr	r0, [sp, #0x8]
 805d23a: 9001         	str	r0, [sp, #0x4]
 805d23c: 4802         	ldr	r0, [pc, #0x8]          @ 0x805d248 <xStreamBufferSetTriggerLevel+0x70>
 805d23e: 4780         	blx	r0
 805d240: 9801         	ldr	r0, [sp, #0x4]
 805d242: b006         	add	sp, #0x18
 805d244: bd80         	pop	{r7, pc}
 805d246: bf00         	nop

0805d248 <$d.9>:
 805d248: 21 05 06 08  	.word	0x08060521
 805d24c: 55 ec 05 08  	.word	0x0805ec55

0805d250 <xStreamBufferSpacesAvailable>:
; {
 805d250: b580         	push	{r7, lr}
 805d252: 466f         	mov	r7, sp
 805d254: b086         	sub	sp, #0x18
 805d256: f643 5240    	movw	r2, #0x3d40
 805d25a: f2c2 0200    	movt	r2, #0x2000
 805d25e: 6811         	ldr	r1, [r2]
 805d260: f642 5340    	movw	r3, #0x2d40
 805d264: f2c2 0300    	movt	r3, #0x2000
 805d268: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805d26c: 3101         	adds	r1, #0x1
 805d26e: 6011         	str	r1, [r2]
 805d270: 9005         	str	r0, [sp, #0x14]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805d272: 9805         	ldr	r0, [sp, #0x14]
 805d274: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxStreamBuffer );
 805d276: 9804         	ldr	r0, [sp, #0x10]
 805d278: b920         	cbnz	r0, 0x805d284 <xStreamBufferSpacesAvailable+0x34> @ imm = #0x8
 805d27a: e7ff         	b	0x805d27c <xStreamBufferSpacesAvailable+0x2c> @ imm = #-0x2
 805d27c: 4818         	ldr	r0, [pc, #0x60]         @ 0x805d2e0 <xStreamBufferSpacesAvailable+0x90>
 805d27e: 4780         	blx	r0
 805d280: e7ff         	b	0x805d282 <xStreamBufferSpacesAvailable+0x32> @ imm = #-0x2
 805d282: e7fe         	b	0x805d282 <xStreamBufferSpacesAvailable+0x32> @ imm = #-0x4
;     do
 805d284: e7ff         	b	0x805d286 <xStreamBufferSpacesAvailable+0x36> @ imm = #-0x2
;         xOriginalTail = pxStreamBuffer->xTail;
 805d286: 9804         	ldr	r0, [sp, #0x10]
 805d288: 6800         	ldr	r0, [r0]
 805d28a: 9002         	str	r0, [sp, #0x8]
;         xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 805d28c: 9904         	ldr	r1, [sp, #0x10]
 805d28e: 6888         	ldr	r0, [r1, #0x8]
 805d290: 6809         	ldr	r1, [r1]
 805d292: 4408         	add	r0, r1
 805d294: 9003         	str	r0, [sp, #0xc]
;         xSpace -= pxStreamBuffer->xHead;
 805d296: 9804         	ldr	r0, [sp, #0x10]
 805d298: 6841         	ldr	r1, [r0, #0x4]
 805d29a: 9803         	ldr	r0, [sp, #0xc]
 805d29c: 1a40         	subs	r0, r0, r1
 805d29e: 9003         	str	r0, [sp, #0xc]
;     } while( xOriginalTail != pxStreamBuffer->xTail );
 805d2a0: e7ff         	b	0x805d2a2 <xStreamBufferSpacesAvailable+0x52> @ imm = #-0x2
 805d2a2: 9802         	ldr	r0, [sp, #0x8]
 805d2a4: 9904         	ldr	r1, [sp, #0x10]
 805d2a6: 6809         	ldr	r1, [r1]
 805d2a8: 4288         	cmp	r0, r1
 805d2aa: d1ec         	bne	0x805d286 <xStreamBufferSpacesAvailable+0x36> @ imm = #-0x28
 805d2ac: e7ff         	b	0x805d2ae <xStreamBufferSpacesAvailable+0x5e> @ imm = #-0x2
;     xSpace -= ( size_t ) 1;
 805d2ae: 9803         	ldr	r0, [sp, #0xc]
 805d2b0: 3801         	subs	r0, #0x1
 805d2b2: 9003         	str	r0, [sp, #0xc]
;     if( xSpace >= pxStreamBuffer->xLength )
 805d2b4: 9803         	ldr	r0, [sp, #0xc]
 805d2b6: 9904         	ldr	r1, [sp, #0x10]
 805d2b8: 6889         	ldr	r1, [r1, #0x8]
 805d2ba: 4288         	cmp	r0, r1
 805d2bc: d306         	blo	0x805d2cc <xStreamBufferSpacesAvailable+0x7c> @ imm = #0xc
 805d2be: e7ff         	b	0x805d2c0 <xStreamBufferSpacesAvailable+0x70> @ imm = #-0x2
;         xSpace -= pxStreamBuffer->xLength;
 805d2c0: 9804         	ldr	r0, [sp, #0x10]
 805d2c2: 6881         	ldr	r1, [r0, #0x8]
 805d2c4: 9803         	ldr	r0, [sp, #0xc]
 805d2c6: 1a40         	subs	r0, r0, r1
 805d2c8: 9003         	str	r0, [sp, #0xc]
;     }
 805d2ca: e000         	b	0x805d2ce <xStreamBufferSpacesAvailable+0x7e> @ imm = #0x0
 805d2cc: e7ff         	b	0x805d2ce <xStreamBufferSpacesAvailable+0x7e> @ imm = #-0x2
;     return xSpace;
 805d2ce: 9803         	ldr	r0, [sp, #0xc]
 805d2d0: 9001         	str	r0, [sp, #0x4]
 805d2d2: 4802         	ldr	r0, [pc, #0x8]          @ 0x805d2dc <xStreamBufferSpacesAvailable+0x8c>
 805d2d4: 4780         	blx	r0
 805d2d6: 9801         	ldr	r0, [sp, #0x4]
 805d2d8: b006         	add	sp, #0x18
 805d2da: bd80         	pop	{r7, pc}

0805d2dc <$d.11>:
 805d2dc: 21 05 06 08  	.word	0x08060521
 805d2e0: 55 ec 05 08  	.word	0x0805ec55

0805d2e4 <xStreamBufferBytesAvailable>:
; {
 805d2e4: b580         	push	{r7, lr}
 805d2e6: 466f         	mov	r7, sp
 805d2e8: b084         	sub	sp, #0x10
 805d2ea: f643 5240    	movw	r2, #0x3d40
 805d2ee: f2c2 0200    	movt	r2, #0x2000
 805d2f2: 6811         	ldr	r1, [r2]
 805d2f4: f642 5340    	movw	r3, #0x2d40
 805d2f8: f2c2 0300    	movt	r3, #0x2000
 805d2fc: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805d300: 3101         	adds	r1, #0x1
 805d302: 6011         	str	r1, [r2]
 805d304: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805d306: 9803         	ldr	r0, [sp, #0xc]
 805d308: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805d30a: 9802         	ldr	r0, [sp, #0x8]
 805d30c: b920         	cbnz	r0, 0x805d318 <xStreamBufferBytesAvailable+0x34> @ imm = #0x8
 805d30e: e7ff         	b	0x805d310 <xStreamBufferBytesAvailable+0x2c> @ imm = #-0x2
 805d310: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d338 <xStreamBufferBytesAvailable+0x54>
 805d312: 4780         	blx	r0
 805d314: e7ff         	b	0x805d316 <xStreamBufferBytesAvailable+0x32> @ imm = #-0x2
 805d316: e7fe         	b	0x805d316 <xStreamBufferBytesAvailable+0x32> @ imm = #-0x4
;     xReturn = prvBytesInBuffer( pxStreamBuffer );
 805d318: 9802         	ldr	r0, [sp, #0x8]
 805d31a: 4905         	ldr	r1, [pc, #0x14]         @ 0x805d330 <xStreamBufferBytesAvailable+0x4c>
 805d31c: 4788         	blx	r1
 805d31e: 9001         	str	r0, [sp, #0x4]
;     return xReturn;
 805d320: 9801         	ldr	r0, [sp, #0x4]
 805d322: 9000         	str	r0, [sp]
 805d324: 4803         	ldr	r0, [pc, #0xc]          @ 0x805d334 <xStreamBufferBytesAvailable+0x50>
 805d326: 4780         	blx	r0
 805d328: 9800         	ldr	r0, [sp]
 805d32a: b004         	add	sp, #0x10
 805d32c: bd80         	pop	{r7, pc}
 805d32e: bf00         	nop

0805d330 <$d.13>:
 805d330: 3d d3 05 08  	.word	0x0805d33d
 805d334: 21 05 06 08  	.word	0x08060521
 805d338: 55 ec 05 08  	.word	0x0805ec55

0805d33c <prvBytesInBuffer>:
; {
 805d33c: b580         	push	{r7, lr}
 805d33e: 466f         	mov	r7, sp
 805d340: b084         	sub	sp, #0x10
 805d342: f643 5240    	movw	r2, #0x3d40
 805d346: f2c2 0200    	movt	r2, #0x2000
 805d34a: 6811         	ldr	r1, [r2]
 805d34c: f642 5340    	movw	r3, #0x2d40
 805d350: f2c2 0300    	movt	r3, #0x2000
 805d354: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805d358: 3101         	adds	r1, #0x1
 805d35a: 6011         	str	r1, [r2]
 805d35c: 9003         	str	r0, [sp, #0xc]
;     xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 805d35e: 9903         	ldr	r1, [sp, #0xc]
 805d360: 6888         	ldr	r0, [r1, #0x8]
 805d362: 6849         	ldr	r1, [r1, #0x4]
 805d364: 4408         	add	r0, r1
 805d366: 9002         	str	r0, [sp, #0x8]
;     xCount -= pxStreamBuffer->xTail;
 805d368: 9803         	ldr	r0, [sp, #0xc]
 805d36a: 6801         	ldr	r1, [r0]
 805d36c: 9802         	ldr	r0, [sp, #0x8]
 805d36e: 1a40         	subs	r0, r0, r1
 805d370: 9002         	str	r0, [sp, #0x8]
;     if( xCount >= pxStreamBuffer->xLength )
 805d372: 9802         	ldr	r0, [sp, #0x8]
 805d374: 9903         	ldr	r1, [sp, #0xc]
 805d376: 6889         	ldr	r1, [r1, #0x8]
 805d378: 4288         	cmp	r0, r1
 805d37a: d306         	blo	0x805d38a <prvBytesInBuffer+0x4e> @ imm = #0xc
 805d37c: e7ff         	b	0x805d37e <prvBytesInBuffer+0x42> @ imm = #-0x2
;         xCount -= pxStreamBuffer->xLength;
 805d37e: 9803         	ldr	r0, [sp, #0xc]
 805d380: 6881         	ldr	r1, [r0, #0x8]
 805d382: 9802         	ldr	r0, [sp, #0x8]
 805d384: 1a40         	subs	r0, r0, r1
 805d386: 9002         	str	r0, [sp, #0x8]
;     }
 805d388: e000         	b	0x805d38c <prvBytesInBuffer+0x50> @ imm = #0x0
 805d38a: e7ff         	b	0x805d38c <prvBytesInBuffer+0x50> @ imm = #-0x2
;     return xCount;
 805d38c: 9802         	ldr	r0, [sp, #0x8]
 805d38e: 9001         	str	r0, [sp, #0x4]
 805d390: 4802         	ldr	r0, [pc, #0x8]          @ 0x805d39c <prvBytesInBuffer+0x60>
 805d392: 4780         	blx	r0
 805d394: 9801         	ldr	r0, [sp, #0x4]
 805d396: b004         	add	sp, #0x10
 805d398: bd80         	pop	{r7, pc}
 805d39a: bf00         	nop

0805d39c <$d.15>:
 805d39c: 21 05 06 08  	.word	0x08060521

0805d3a0 <xStreamBufferSend>:
; {
 805d3a0: b5b0         	push	{r4, r5, r7, lr}
 805d3a2: af02         	add	r7, sp, #0x8
 805d3a4: b090         	sub	sp, #0x40
 805d3a6: 4674         	mov	r4, lr
 805d3a8: f643 5e40    	movw	lr, #0x3d40
 805d3ac: f2c2 0e00    	movt	lr, #0x2000
 805d3b0: f8de c000    	ldr.w	r12, [lr]
 805d3b4: f642 5540    	movw	r5, #0x2d40
 805d3b8: f2c2 0500    	movt	r5, #0x2000
 805d3bc: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805d3c0: f10c 0c01    	add.w	r12, r12, #0x1
 805d3c4: f8ce c000    	str.w	r12, [lr]
 805d3c8: 900f         	str	r0, [sp, #0x3c]
 805d3ca: 910e         	str	r1, [sp, #0x38]
 805d3cc: 920d         	str	r2, [sp, #0x34]
 805d3ce: 930c         	str	r3, [sp, #0x30]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805d3d0: 980f         	ldr	r0, [sp, #0x3c]
 805d3d2: 900b         	str	r0, [sp, #0x2c]
 805d3d4: 2000         	movs	r0, #0x0
;     size_t xReturn, xSpace = 0;
 805d3d6: 9009         	str	r0, [sp, #0x24]
;     size_t xRequiredSpace = xDataLengthBytes;
 805d3d8: 990d         	ldr	r1, [sp, #0x34]
 805d3da: 9108         	str	r1, [sp, #0x20]
;     size_t xMaxReportedSpace = 0;
 805d3dc: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pvTxData );
 805d3de: 980e         	ldr	r0, [sp, #0x38]
 805d3e0: b920         	cbnz	r0, 0x805d3ec <xStreamBufferSend+0x4c> @ imm = #0x8
 805d3e2: e7ff         	b	0x805d3e4 <xStreamBufferSend+0x44> @ imm = #-0x2
 805d3e4: 486e         	ldr	r0, [pc, #0x1b8]        @ 0x805d5a0 <xStreamBufferSend+0x200>
 805d3e6: 4780         	blx	r0
 805d3e8: e7ff         	b	0x805d3ea <xStreamBufferSend+0x4a> @ imm = #-0x2
 805d3ea: e7fe         	b	0x805d3ea <xStreamBufferSend+0x4a> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805d3ec: 980b         	ldr	r0, [sp, #0x2c]
 805d3ee: b920         	cbnz	r0, 0x805d3fa <xStreamBufferSend+0x5a> @ imm = #0x8
 805d3f0: e7ff         	b	0x805d3f2 <xStreamBufferSend+0x52> @ imm = #-0x2
 805d3f2: 486a         	ldr	r0, [pc, #0x1a8]        @ 0x805d59c <xStreamBufferSend+0x1fc>
 805d3f4: 4780         	blx	r0
 805d3f6: e7ff         	b	0x805d3f8 <xStreamBufferSend+0x58> @ imm = #-0x2
 805d3f8: e7fe         	b	0x805d3f8 <xStreamBufferSend+0x58> @ imm = #-0x4
;     xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 805d3fa: 980b         	ldr	r0, [sp, #0x2c]
 805d3fc: 6880         	ldr	r0, [r0, #0x8]
 805d3fe: 3801         	subs	r0, #0x1
 805d400: 9005         	str	r0, [sp, #0x14]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805d402: 980b         	ldr	r0, [sp, #0x2c]
 805d404: 7f00         	ldrb	r0, [r0, #0x1c]
 805d406: 07c0         	lsls	r0, r0, #0x1f
 805d408: b1b0         	cbz	r0, 0x805d438 <xStreamBufferSend+0x98> @ imm = #0x2c
 805d40a: e7ff         	b	0x805d40c <xStreamBufferSend+0x6c> @ imm = #-0x2
;         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805d40c: 9808         	ldr	r0, [sp, #0x20]
 805d40e: 3004         	adds	r0, #0x4
 805d410: 9008         	str	r0, [sp, #0x20]
;         configASSERT( xRequiredSpace > xDataLengthBytes );
 805d412: 9808         	ldr	r0, [sp, #0x20]
 805d414: 990d         	ldr	r1, [sp, #0x34]
 805d416: 4288         	cmp	r0, r1
 805d418: d804         	bhi	0x805d424 <xStreamBufferSend+0x84> @ imm = #0x8
 805d41a: e7ff         	b	0x805d41c <xStreamBufferSend+0x7c> @ imm = #-0x2
 805d41c: 485e         	ldr	r0, [pc, #0x178]        @ 0x805d598 <xStreamBufferSend+0x1f8>
 805d41e: 4780         	blx	r0
 805d420: e7ff         	b	0x805d422 <xStreamBufferSend+0x82> @ imm = #-0x2
 805d422: e7fe         	b	0x805d422 <xStreamBufferSend+0x82> @ imm = #-0x4
;         if( xRequiredSpace > xMaxReportedSpace )
 805d424: 9808         	ldr	r0, [sp, #0x20]
 805d426: 9905         	ldr	r1, [sp, #0x14]
 805d428: 4288         	cmp	r0, r1
 805d42a: d903         	bls	0x805d434 <xStreamBufferSend+0x94> @ imm = #0x6
 805d42c: e7ff         	b	0x805d42e <xStreamBufferSend+0x8e> @ imm = #-0x2
 805d42e: 2000         	movs	r0, #0x0
;             xTicksToWait = ( TickType_t ) 0;
 805d430: 900c         	str	r0, [sp, #0x30]
;         }
 805d432: e000         	b	0x805d436 <xStreamBufferSend+0x96> @ imm = #0x0
 805d434: e7ff         	b	0x805d436 <xStreamBufferSend+0x96> @ imm = #-0x2
;     }
 805d436: e009         	b	0x805d44c <xStreamBufferSend+0xac> @ imm = #0x12
;         if( xRequiredSpace > xMaxReportedSpace )
 805d438: 9808         	ldr	r0, [sp, #0x20]
 805d43a: 9905         	ldr	r1, [sp, #0x14]
 805d43c: 4288         	cmp	r0, r1
 805d43e: d903         	bls	0x805d448 <xStreamBufferSend+0xa8> @ imm = #0x6
 805d440: e7ff         	b	0x805d442 <xStreamBufferSend+0xa2> @ imm = #-0x2
;             xRequiredSpace = xMaxReportedSpace;
 805d442: 9805         	ldr	r0, [sp, #0x14]
 805d444: 9008         	str	r0, [sp, #0x20]
;         }
 805d446: e000         	b	0x805d44a <xStreamBufferSend+0xaa> @ imm = #0x0
 805d448: e7ff         	b	0x805d44a <xStreamBufferSend+0xaa> @ imm = #-0x2
 805d44a: e7ff         	b	0x805d44c <xStreamBufferSend+0xac> @ imm = #-0x2
;     if( xTicksToWait != ( TickType_t ) 0 )
 805d44c: 980c         	ldr	r0, [sp, #0x30]
 805d44e: b3e0         	cbz	r0, 0x805d4ca <xStreamBufferSend+0x12a> @ imm = #0x78
 805d450: e7ff         	b	0x805d452 <xStreamBufferSend+0xb2> @ imm = #-0x2
;         vTaskSetTimeOutState( &xTimeOut );
 805d452: 4940         	ldr	r1, [pc, #0x100]        @ 0x805d554 <xStreamBufferSend+0x1b4>
 805d454: a806         	add	r0, sp, #0x18
 805d456: 4788         	blx	r1
;         do
 805d458: e7ff         	b	0x805d45a <xStreamBufferSend+0xba> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805d45a: 483f         	ldr	r0, [pc, #0xfc]         @ 0x805d558 <xStreamBufferSend+0x1b8>
 805d45c: 4780         	blx	r0
;                 xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805d45e: 980b         	ldr	r0, [sp, #0x2c]
 805d460: 493e         	ldr	r1, [pc, #0xf8]         @ 0x805d55c <xStreamBufferSend+0x1bc>
 805d462: 4788         	blx	r1
 805d464: 9009         	str	r0, [sp, #0x24]
;                 if( xSpace < xRequiredSpace )
 805d466: 9809         	ldr	r0, [sp, #0x24]
 805d468: 9908         	ldr	r1, [sp, #0x20]
 805d46a: 4288         	cmp	r0, r1
 805d46c: d211         	bhs	0x805d492 <xStreamBufferSend+0xf2> @ imm = #0x22
 805d46e: e7ff         	b	0x805d470 <xStreamBufferSend+0xd0> @ imm = #-0x2
;                     ( void ) xTaskNotifyStateClear( NULL );
 805d470: 4a3c         	ldr	r2, [pc, #0xf0]         @ 0x805d564 <xStreamBufferSend+0x1c4>
 805d472: 2100         	movs	r1, #0x0
 805d474: 4608         	mov	r0, r1
 805d476: 4790         	blx	r2
;                     configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 805d478: 980b         	ldr	r0, [sp, #0x2c]
 805d47a: 6940         	ldr	r0, [r0, #0x14]
 805d47c: b120         	cbz	r0, 0x805d488 <xStreamBufferSend+0xe8> @ imm = #0x8
 805d47e: e7ff         	b	0x805d480 <xStreamBufferSend+0xe0> @ imm = #-0x2
 805d480: 4844         	ldr	r0, [pc, #0x110]        @ 0x805d594 <xStreamBufferSend+0x1f4>
 805d482: 4780         	blx	r0
 805d484: e7ff         	b	0x805d486 <xStreamBufferSend+0xe6> @ imm = #-0x2
 805d486: e7fe         	b	0x805d486 <xStreamBufferSend+0xe6> @ imm = #-0x4
;                     pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 805d488: 4837         	ldr	r0, [pc, #0xdc]         @ 0x805d568 <xStreamBufferSend+0x1c8>
 805d48a: 4780         	blx	r0
 805d48c: 990b         	ldr	r1, [sp, #0x2c]
 805d48e: 6148         	str	r0, [r1, #0x14]
;                 }
 805d490: e002         	b	0x805d498 <xStreamBufferSend+0xf8> @ imm = #0x4
;                     taskEXIT_CRITICAL();
 805d492: 4833         	ldr	r0, [pc, #0xcc]         @ 0x805d560 <xStreamBufferSend+0x1c0>
 805d494: 4780         	blx	r0
;                     break;
 805d496: e017         	b	0x805d4c8 <xStreamBufferSend+0x128> @ imm = #0x2e
;             taskEXIT_CRITICAL();
 805d498: 4834         	ldr	r0, [pc, #0xd0]         @ 0x805d56c <xStreamBufferSend+0x1cc>
 805d49a: 4780         	blx	r0
;             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 805d49c: 980c         	ldr	r0, [sp, #0x30]
 805d49e: 4669         	mov	r1, sp
 805d4a0: 6008         	str	r0, [r1]
 805d4a2: f8df c0cc    	ldr.w	r12, [pc, #0xcc]        @ 0x805d570 <xStreamBufferSend+0x1d0>
 805d4a6: 2300         	movs	r3, #0x0
 805d4a8: 9304         	str	r3, [sp, #0x10]
 805d4aa: 4618         	mov	r0, r3
 805d4ac: 4619         	mov	r1, r3
 805d4ae: 461a         	mov	r2, r3
 805d4b0: 47e0         	blx	r12
;             pxStreamBuffer->xTaskWaitingToSend = NULL;
 805d4b2: 9804         	ldr	r0, [sp, #0x10]
 805d4b4: 990b         	ldr	r1, [sp, #0x2c]
 805d4b6: 6148         	str	r0, [r1, #0x14]
;         } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 805d4b8: e7ff         	b	0x805d4ba <xStreamBufferSend+0x11a> @ imm = #-0x2
 805d4ba: 4a2e         	ldr	r2, [pc, #0xb8]         @ 0x805d574 <xStreamBufferSend+0x1d4>
 805d4bc: a806         	add	r0, sp, #0x18
 805d4be: a90c         	add	r1, sp, #0x30
 805d4c0: 4790         	blx	r2
 805d4c2: 2800         	cmp	r0, #0x0
 805d4c4: d0c9         	beq	0x805d45a <xStreamBufferSend+0xba> @ imm = #-0x6e
 805d4c6: e7ff         	b	0x805d4c8 <xStreamBufferSend+0x128> @ imm = #-0x2
;     }
 805d4c8: e000         	b	0x805d4cc <xStreamBufferSend+0x12c> @ imm = #0x0
 805d4ca: e7ff         	b	0x805d4cc <xStreamBufferSend+0x12c> @ imm = #-0x2
;     if( xSpace == ( size_t ) 0 )
 805d4cc: 9809         	ldr	r0, [sp, #0x24]
 805d4ce: b928         	cbnz	r0, 0x805d4dc <xStreamBufferSend+0x13c> @ imm = #0xa
 805d4d0: e7ff         	b	0x805d4d2 <xStreamBufferSend+0x132> @ imm = #-0x2
;         xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805d4d2: 980b         	ldr	r0, [sp, #0x2c]
 805d4d4: 4928         	ldr	r1, [pc, #0xa0]         @ 0x805d578 <xStreamBufferSend+0x1d8>
 805d4d6: 4788         	blx	r1
 805d4d8: 9009         	str	r0, [sp, #0x24]
;     }
 805d4da: e000         	b	0x805d4de <xStreamBufferSend+0x13e> @ imm = #0x0
 805d4dc: e7ff         	b	0x805d4de <xStreamBufferSend+0x13e> @ imm = #-0x2
;     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 805d4de: 980b         	ldr	r0, [sp, #0x2c]
 805d4e0: 990e         	ldr	r1, [sp, #0x38]
 805d4e2: 9a0d         	ldr	r2, [sp, #0x34]
 805d4e4: 9b09         	ldr	r3, [sp, #0x24]
 805d4e6: f8dd c020    	ldr.w	r12, [sp, #0x20]
 805d4ea: 46ee         	mov	lr, sp
 805d4ec: f8ce c000    	str.w	r12, [lr]
 805d4f0: f8df c088    	ldr.w	r12, [pc, #0x88]        @ 0x805d57c <xStreamBufferSend+0x1dc>
 805d4f4: 47e0         	blx	r12
 805d4f6: 900a         	str	r0, [sp, #0x28]
;     if( xReturn > ( size_t ) 0 )
 805d4f8: 980a         	ldr	r0, [sp, #0x28]
 805d4fa: b310         	cbz	r0, 0x805d542 <xStreamBufferSend+0x1a2> @ imm = #0x44
 805d4fc: e7ff         	b	0x805d4fe <xStreamBufferSend+0x15e> @ imm = #-0x2
;         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 805d4fe: 980b         	ldr	r0, [sp, #0x2c]
 805d500: 491f         	ldr	r1, [pc, #0x7c]         @ 0x805d580 <xStreamBufferSend+0x1e0>
 805d502: 4788         	blx	r1
 805d504: 990b         	ldr	r1, [sp, #0x2c]
 805d506: 68c9         	ldr	r1, [r1, #0xc]
 805d508: 4288         	cmp	r0, r1
 805d50a: d318         	blo	0x805d53e <xStreamBufferSend+0x19e> @ imm = #0x30
 805d50c: e7ff         	b	0x805d50e <xStreamBufferSend+0x16e> @ imm = #-0x2
;             prvSEND_COMPLETED( pxStreamBuffer );
 805d50e: 481d         	ldr	r0, [pc, #0x74]         @ 0x805d584 <xStreamBufferSend+0x1e4>
 805d510: 4780         	blx	r0
 805d512: 980b         	ldr	r0, [sp, #0x2c]
 805d514: 6900         	ldr	r0, [r0, #0x10]
 805d516: b178         	cbz	r0, 0x805d538 <xStreamBufferSend+0x198> @ imm = #0x1e
 805d518: e7ff         	b	0x805d51a <xStreamBufferSend+0x17a> @ imm = #-0x2
 805d51a: 980b         	ldr	r0, [sp, #0x2c]
 805d51c: 6900         	ldr	r0, [r0, #0x10]
 805d51e: 4669         	mov	r1, sp
 805d520: 2300         	movs	r3, #0x0
 805d522: 9303         	str	r3, [sp, #0xc]
 805d524: 600b         	str	r3, [r1]
 805d526: f8df c060    	ldr.w	r12, [pc, #0x60]        @ 0x805d588 <xStreamBufferSend+0x1e8>
 805d52a: 4619         	mov	r1, r3
 805d52c: 461a         	mov	r2, r3
 805d52e: 47e0         	blx	r12
 805d530: 9803         	ldr	r0, [sp, #0xc]
 805d532: 990b         	ldr	r1, [sp, #0x2c]
 805d534: 6108         	str	r0, [r1, #0x10]
 805d536: e7ff         	b	0x805d538 <xStreamBufferSend+0x198> @ imm = #-0x2
 805d538: 4814         	ldr	r0, [pc, #0x50]         @ 0x805d58c <xStreamBufferSend+0x1ec>
 805d53a: 4780         	blx	r0
;         }
 805d53c: e000         	b	0x805d540 <xStreamBufferSend+0x1a0> @ imm = #0x0
 805d53e: e7ff         	b	0x805d540 <xStreamBufferSend+0x1a0> @ imm = #-0x2
;     }
 805d540: e000         	b	0x805d544 <xStreamBufferSend+0x1a4> @ imm = #0x0
 805d542: e7ff         	b	0x805d544 <xStreamBufferSend+0x1a4> @ imm = #-0x2
;     return xReturn;
 805d544: 980a         	ldr	r0, [sp, #0x28]
 805d546: 9002         	str	r0, [sp, #0x8]
 805d548: 4811         	ldr	r0, [pc, #0x44]         @ 0x805d590 <xStreamBufferSend+0x1f0>
 805d54a: 4780         	blx	r0
 805d54c: 9802         	ldr	r0, [sp, #0x8]
 805d54e: b010         	add	sp, #0x40
 805d550: bdb0         	pop	{r4, r5, r7, pc}
 805d552: bf00         	nop

0805d554 <$d.17>:
 805d554: cd 76 05 08  	.word	0x080576cd
 805d558: 05 e1 05 08  	.word	0x0805e105
 805d55c: 51 d2 05 08  	.word	0x0805d251
 805d560: 4d e1 05 08  	.word	0x0805e14d
 805d564: 95 8c 05 08  	.word	0x08058c95
 805d568: bd 7b 05 08  	.word	0x08057bbd
 805d56c: 4d e1 05 08  	.word	0x0805e14d
 805d570: 45 83 05 08  	.word	0x08058345
 805d574: 85 77 05 08  	.word	0x08057785
 805d578: 51 d2 05 08  	.word	0x0805d251
 805d57c: a5 d5 05 08  	.word	0x0805d5a5
 805d580: 3d d3 05 08  	.word	0x0805d33d
 805d584: b9 59 05 08  	.word	0x080559b9
 805d588: c1 84 05 08  	.word	0x080584c1
 805d58c: 29 5b 05 08  	.word	0x08055b29
 805d590: 21 05 06 08  	.word	0x08060521
 805d594: 55 ec 05 08  	.word	0x0805ec55
 805d598: 55 ec 05 08  	.word	0x0805ec55
 805d59c: 55 ec 05 08  	.word	0x0805ec55
 805d5a0: 55 ec 05 08  	.word	0x0805ec55

0805d5a4 <prvWriteMessageToBuffer>:
; {
 805d5a4: b5b0         	push	{r4, r5, r7, lr}
 805d5a6: af02         	add	r7, sp, #0x8
 805d5a8: b088         	sub	sp, #0x20
 805d5aa: 4674         	mov	r4, lr
 805d5ac: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805d5b0: f643 5e40    	movw	lr, #0x3d40
 805d5b4: f2c2 0e00    	movt	lr, #0x2000
 805d5b8: f8de c000    	ldr.w	r12, [lr]
 805d5bc: f642 5540    	movw	r5, #0x2d40
 805d5c0: f2c2 0500    	movt	r5, #0x2000
 805d5c4: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805d5c8: f10c 0c01    	add.w	r12, r12, #0x1
 805d5cc: f8ce c000    	str.w	r12, [lr]
 805d5d0: 9007         	str	r0, [sp, #0x1c]
 805d5d2: 9106         	str	r1, [sp, #0x18]
 805d5d4: 9205         	str	r2, [sp, #0x14]
 805d5d6: 9304         	str	r3, [sp, #0x10]
;     size_t xNextHead = pxStreamBuffer->xHead;
 805d5d8: 9807         	ldr	r0, [sp, #0x1c]
 805d5da: 6840         	ldr	r0, [r0, #0x4]
 805d5dc: 9003         	str	r0, [sp, #0xc]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805d5de: 9807         	ldr	r0, [sp, #0x1c]
 805d5e0: 7f00         	ldrb	r0, [r0, #0x1c]
 805d5e2: 07c0         	lsls	r0, r0, #0x1f
 805d5e4: b1e8         	cbz	r0, 0x805d622 <prvWriteMessageToBuffer+0x7e> @ imm = #0x3a
 805d5e6: e7ff         	b	0x805d5e8 <prvWriteMessageToBuffer+0x44> @ imm = #-0x2
;         xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
 805d5e8: 9805         	ldr	r0, [sp, #0x14]
 805d5ea: 9002         	str	r0, [sp, #0x8]
;         configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );
 805d5ec: 9802         	ldr	r0, [sp, #0x8]
 805d5ee: 9905         	ldr	r1, [sp, #0x14]
 805d5f0: 4288         	cmp	r0, r1
 805d5f2: d004         	beq	0x805d5fe <prvWriteMessageToBuffer+0x5a> @ imm = #0x8
 805d5f4: e7ff         	b	0x805d5f6 <prvWriteMessageToBuffer+0x52> @ imm = #-0x2
 805d5f6: 481f         	ldr	r0, [pc, #0x7c]         @ 0x805d674 <prvWriteMessageToBuffer+0xd0>
 805d5f8: 4780         	blx	r0
 805d5fa: e7ff         	b	0x805d5fc <prvWriteMessageToBuffer+0x58> @ imm = #-0x2
 805d5fc: e7fe         	b	0x805d5fc <prvWriteMessageToBuffer+0x58> @ imm = #-0x4
;         if( xSpace >= xRequiredSpace )
 805d5fe: 9804         	ldr	r0, [sp, #0x10]
 805d600: 68b9         	ldr	r1, [r7, #0x8]
 805d602: 4288         	cmp	r0, r1
 805d604: d309         	blo	0x805d61a <prvWriteMessageToBuffer+0x76> @ imm = #0x12
 805d606: e7ff         	b	0x805d608 <prvWriteMessageToBuffer+0x64> @ imm = #-0x2
;             xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 805d608: 9807         	ldr	r0, [sp, #0x1c]
 805d60a: 9b03         	ldr	r3, [sp, #0xc]
 805d60c: f8df c058    	ldr.w	r12, [pc, #0x58]        @ 0x805d668 <prvWriteMessageToBuffer+0xc4>
 805d610: a902         	add	r1, sp, #0x8
 805d612: 2204         	movs	r2, #0x4
 805d614: 47e0         	blx	r12
 805d616: 9003         	str	r0, [sp, #0xc]
;         }
 805d618: e002         	b	0x805d620 <prvWriteMessageToBuffer+0x7c> @ imm = #0x4
 805d61a: 2000         	movs	r0, #0x0
;             xDataLengthBytes = 0;
 805d61c: 9005         	str	r0, [sp, #0x14]
 805d61e: e7ff         	b	0x805d620 <prvWriteMessageToBuffer+0x7c> @ imm = #-0x2
;     }
 805d620: e00d         	b	0x805d63e <prvWriteMessageToBuffer+0x9a> @ imm = #0x1a
;         xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 805d622: 9805         	ldr	r0, [sp, #0x14]
 805d624: 9904         	ldr	r1, [sp, #0x10]
 805d626: 4288         	cmp	r0, r1
 805d628: d203         	bhs	0x805d632 <prvWriteMessageToBuffer+0x8e> @ imm = #0x6
 805d62a: e7ff         	b	0x805d62c <prvWriteMessageToBuffer+0x88> @ imm = #-0x2
 805d62c: 9805         	ldr	r0, [sp, #0x14]
 805d62e: 9001         	str	r0, [sp, #0x4]
 805d630: e002         	b	0x805d638 <prvWriteMessageToBuffer+0x94> @ imm = #0x4
 805d632: 9804         	ldr	r0, [sp, #0x10]
 805d634: 9001         	str	r0, [sp, #0x4]
 805d636: e7ff         	b	0x805d638 <prvWriteMessageToBuffer+0x94> @ imm = #-0x2
 805d638: 9801         	ldr	r0, [sp, #0x4]
 805d63a: 9005         	str	r0, [sp, #0x14]
 805d63c: e7ff         	b	0x805d63e <prvWriteMessageToBuffer+0x9a> @ imm = #-0x2
;     if( xDataLengthBytes != ( size_t ) 0 )
 805d63e: 9805         	ldr	r0, [sp, #0x14]
 805d640: b150         	cbz	r0, 0x805d658 <prvWriteMessageToBuffer+0xb4> @ imm = #0x14
 805d642: e7ff         	b	0x805d644 <prvWriteMessageToBuffer+0xa0> @ imm = #-0x2
;         pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 805d644: 9807         	ldr	r0, [sp, #0x1c]
 805d646: 9906         	ldr	r1, [sp, #0x18]
 805d648: 9a05         	ldr	r2, [sp, #0x14]
 805d64a: 9b03         	ldr	r3, [sp, #0xc]
 805d64c: f8df c01c    	ldr.w	r12, [pc, #0x1c]        @ 0x805d66c <prvWriteMessageToBuffer+0xc8>
 805d650: 47e0         	blx	r12
 805d652: 9907         	ldr	r1, [sp, #0x1c]
 805d654: 6048         	str	r0, [r1, #0x4]
;     }
 805d656: e7ff         	b	0x805d658 <prvWriteMessageToBuffer+0xb4> @ imm = #-0x2
;     return xDataLengthBytes;
 805d658: 9805         	ldr	r0, [sp, #0x14]
 805d65a: 9000         	str	r0, [sp]
 805d65c: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d670 <prvWriteMessageToBuffer+0xcc>
 805d65e: 4780         	blx	r0
 805d660: 9800         	ldr	r0, [sp]
 805d662: b008         	add	sp, #0x20
 805d664: bdb0         	pop	{r4, r5, r7, pc}
 805d666: bf00         	nop

0805d668 <$d.19>:
 805d668: 4d df 05 08  	.word	0x0805df4d
 805d66c: 4d df 05 08  	.word	0x0805df4d
 805d670: 21 05 06 08  	.word	0x08060521
 805d674: 55 ec 05 08  	.word	0x0805ec55

0805d678 <xStreamBufferSendFromISR>:
; {
 805d678: b5b0         	push	{r4, r5, r7, lr}
 805d67a: af02         	add	r7, sp, #0x8
 805d67c: b08e         	sub	sp, #0x38
 805d67e: 4674         	mov	r4, lr
 805d680: f643 5e40    	movw	lr, #0x3d40
 805d684: f2c2 0e00    	movt	lr, #0x2000
 805d688: f8de c000    	ldr.w	r12, [lr]
 805d68c: f642 5540    	movw	r5, #0x2d40
 805d690: f2c2 0500    	movt	r5, #0x2000
 805d694: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805d698: f10c 0c01    	add.w	r12, r12, #0x1
 805d69c: f8ce c000    	str.w	r12, [lr]
 805d6a0: 900d         	str	r0, [sp, #0x34]
 805d6a2: 910c         	str	r1, [sp, #0x30]
 805d6a4: 920b         	str	r2, [sp, #0x2c]
 805d6a6: 930a         	str	r3, [sp, #0x28]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805d6a8: 980d         	ldr	r0, [sp, #0x34]
 805d6aa: 9009         	str	r0, [sp, #0x24]
;     size_t xRequiredSpace = xDataLengthBytes;
 805d6ac: 980b         	ldr	r0, [sp, #0x2c]
 805d6ae: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pvTxData );
 805d6b0: 980c         	ldr	r0, [sp, #0x30]
 805d6b2: b920         	cbnz	r0, 0x805d6be <xStreamBufferSendFromISR+0x46> @ imm = #0x8
 805d6b4: e7ff         	b	0x805d6b6 <xStreamBufferSendFromISR+0x3e> @ imm = #-0x2
 805d6b6: 4834         	ldr	r0, [pc, #0xd0]         @ 0x805d788 <xStreamBufferSendFromISR+0x110>
 805d6b8: 4780         	blx	r0
 805d6ba: e7ff         	b	0x805d6bc <xStreamBufferSendFromISR+0x44> @ imm = #-0x2
 805d6bc: e7fe         	b	0x805d6bc <xStreamBufferSendFromISR+0x44> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805d6be: 9809         	ldr	r0, [sp, #0x24]
 805d6c0: b920         	cbnz	r0, 0x805d6cc <xStreamBufferSendFromISR+0x54> @ imm = #0x8
 805d6c2: e7ff         	b	0x805d6c4 <xStreamBufferSendFromISR+0x4c> @ imm = #-0x2
 805d6c4: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805d784 <xStreamBufferSendFromISR+0x10c>
 805d6c6: 4780         	blx	r0
 805d6c8: e7ff         	b	0x805d6ca <xStreamBufferSendFromISR+0x52> @ imm = #-0x2
 805d6ca: e7fe         	b	0x805d6ca <xStreamBufferSendFromISR+0x52> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805d6cc: 9809         	ldr	r0, [sp, #0x24]
 805d6ce: 7f00         	ldrb	r0, [r0, #0x1c]
 805d6d0: 07c0         	lsls	r0, r0, #0x1f
 805d6d2: b120         	cbz	r0, 0x805d6de <xStreamBufferSendFromISR+0x66> @ imm = #0x8
 805d6d4: e7ff         	b	0x805d6d6 <xStreamBufferSendFromISR+0x5e> @ imm = #-0x2
;         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805d6d6: 9806         	ldr	r0, [sp, #0x18]
 805d6d8: 3004         	adds	r0, #0x4
 805d6da: 9006         	str	r0, [sp, #0x18]
;     }
 805d6dc: e000         	b	0x805d6e0 <xStreamBufferSendFromISR+0x68> @ imm = #0x0
 805d6de: e7ff         	b	0x805d6e0 <xStreamBufferSendFromISR+0x68> @ imm = #-0x2
;     xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805d6e0: 9809         	ldr	r0, [sp, #0x24]
 805d6e2: 4921         	ldr	r1, [pc, #0x84]         @ 0x805d768 <xStreamBufferSendFromISR+0xf0>
 805d6e4: 4788         	blx	r1
 805d6e6: 9007         	str	r0, [sp, #0x1c]
;     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 805d6e8: 9809         	ldr	r0, [sp, #0x24]
 805d6ea: 990c         	ldr	r1, [sp, #0x30]
 805d6ec: 9a0b         	ldr	r2, [sp, #0x2c]
 805d6ee: 9b07         	ldr	r3, [sp, #0x1c]
 805d6f0: f8dd c018    	ldr.w	r12, [sp, #0x18]
 805d6f4: 46ee         	mov	lr, sp
 805d6f6: f8ce c000    	str.w	r12, [lr]
 805d6fa: f8df c070    	ldr.w	r12, [pc, #0x70]        @ 0x805d76c <xStreamBufferSendFromISR+0xf4>
 805d6fe: 47e0         	blx	r12
 805d700: 9008         	str	r0, [sp, #0x20]
;     if( xReturn > ( size_t ) 0 )
 805d702: 9808         	ldr	r0, [sp, #0x20]
 805d704: b340         	cbz	r0, 0x805d758 <xStreamBufferSendFromISR+0xe0> @ imm = #0x50
 805d706: e7ff         	b	0x805d708 <xStreamBufferSendFromISR+0x90> @ imm = #-0x2
;         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 805d708: 9809         	ldr	r0, [sp, #0x24]
 805d70a: 4919         	ldr	r1, [pc, #0x64]         @ 0x805d770 <xStreamBufferSendFromISR+0xf8>
 805d70c: 4788         	blx	r1
 805d70e: 9909         	ldr	r1, [sp, #0x24]
 805d710: 68c9         	ldr	r1, [r1, #0xc]
 805d712: 4288         	cmp	r0, r1
 805d714: d31e         	blo	0x805d754 <xStreamBufferSendFromISR+0xdc> @ imm = #0x3c
 805d716: e7ff         	b	0x805d718 <xStreamBufferSendFromISR+0xa0> @ imm = #-0x2
;             prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 805d718: e7ff         	b	0x805d71a <xStreamBufferSendFromISR+0xa2> @ imm = #-0x2
 805d71a: 4816         	ldr	r0, [pc, #0x58]         @ 0x805d774 <xStreamBufferSendFromISR+0xfc>
 805d71c: 4780         	blx	r0
 805d71e: 9005         	str	r0, [sp, #0x14]
 805d720: 9809         	ldr	r0, [sp, #0x24]
 805d722: 6900         	ldr	r0, [r0, #0x10]
 805d724: b188         	cbz	r0, 0x805d74a <xStreamBufferSendFromISR+0xd2> @ imm = #0x22
 805d726: e7ff         	b	0x805d728 <xStreamBufferSendFromISR+0xb0> @ imm = #-0x2
 805d728: 9809         	ldr	r0, [sp, #0x24]
 805d72a: 6900         	ldr	r0, [r0, #0x10]
 805d72c: 9a0a         	ldr	r2, [sp, #0x28]
 805d72e: 4669         	mov	r1, sp
 805d730: 604a         	str	r2, [r1, #0x4]
 805d732: 2300         	movs	r3, #0x0
 805d734: 9304         	str	r3, [sp, #0x10]
 805d736: 600b         	str	r3, [r1]
 805d738: f8df c03c    	ldr.w	r12, [pc, #0x3c]        @ 0x805d778 <xStreamBufferSendFromISR+0x100>
 805d73c: 4619         	mov	r1, r3
 805d73e: 461a         	mov	r2, r3
 805d740: 47e0         	blx	r12
 805d742: 9804         	ldr	r0, [sp, #0x10]
 805d744: 9909         	ldr	r1, [sp, #0x24]
 805d746: 6108         	str	r0, [r1, #0x10]
 805d748: e7ff         	b	0x805d74a <xStreamBufferSendFromISR+0xd2> @ imm = #-0x2
 805d74a: 9805         	ldr	r0, [sp, #0x14]
 805d74c: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805d77c <xStreamBufferSendFromISR+0x104>
 805d74e: 4788         	blx	r1
 805d750: e7ff         	b	0x805d752 <xStreamBufferSendFromISR+0xda> @ imm = #-0x2
;         }
 805d752: e000         	b	0x805d756 <xStreamBufferSendFromISR+0xde> @ imm = #0x0
 805d754: e7ff         	b	0x805d756 <xStreamBufferSendFromISR+0xde> @ imm = #-0x2
;     }
 805d756: e000         	b	0x805d75a <xStreamBufferSendFromISR+0xe2> @ imm = #0x0
 805d758: e7ff         	b	0x805d75a <xStreamBufferSendFromISR+0xe2> @ imm = #-0x2
;     return xReturn;
 805d75a: 9808         	ldr	r0, [sp, #0x20]
 805d75c: 9003         	str	r0, [sp, #0xc]
 805d75e: 4808         	ldr	r0, [pc, #0x20]         @ 0x805d780 <xStreamBufferSendFromISR+0x108>
 805d760: 4780         	blx	r0
 805d762: 9803         	ldr	r0, [sp, #0xc]
 805d764: b00e         	add	sp, #0x38
 805d766: bdb0         	pop	{r4, r5, r7, pc}

0805d768 <$d.21>:
 805d768: 51 d2 05 08  	.word	0x0805d251
 805d76c: a5 d5 05 08  	.word	0x0805d5a5
 805d770: 3d d3 05 08  	.word	0x0805d33d
 805d774: 55 ec 05 08  	.word	0x0805ec55
 805d778: 55 87 05 08  	.word	0x08058755
 805d77c: 85 ec 05 08  	.word	0x0805ec85
 805d780: 21 05 06 08  	.word	0x08060521
 805d784: 55 ec 05 08  	.word	0x0805ec55
 805d788: 55 ec 05 08  	.word	0x0805ec55

0805d78c <xStreamBufferReceive>:
; {
 805d78c: b5b0         	push	{r4, r5, r7, lr}
 805d78e: af02         	add	r7, sp, #0x8
 805d790: b08c         	sub	sp, #0x30
 805d792: 4674         	mov	r4, lr
 805d794: f643 5e40    	movw	lr, #0x3d40
 805d798: f2c2 0e00    	movt	lr, #0x2000
 805d79c: f8de c000    	ldr.w	r12, [lr]
 805d7a0: f642 5540    	movw	r5, #0x2d40
 805d7a4: f2c2 0500    	movt	r5, #0x2000
 805d7a8: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805d7ac: f10c 0c01    	add.w	r12, r12, #0x1
 805d7b0: f8ce c000    	str.w	r12, [lr]
 805d7b4: 900b         	str	r0, [sp, #0x2c]
 805d7b6: 910a         	str	r1, [sp, #0x28]
 805d7b8: 9209         	str	r2, [sp, #0x24]
 805d7ba: 9308         	str	r3, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805d7bc: 980b         	ldr	r0, [sp, #0x2c]
 805d7be: 9007         	str	r0, [sp, #0x1c]
 805d7c0: 2000         	movs	r0, #0x0
;     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 805d7c2: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pvRxData );
 805d7c4: 980a         	ldr	r0, [sp, #0x28]
 805d7c6: b920         	cbnz	r0, 0x805d7d2 <xStreamBufferReceive+0x46> @ imm = #0x8
 805d7c8: e7ff         	b	0x805d7ca <xStreamBufferReceive+0x3e> @ imm = #-0x2
 805d7ca: 4853         	ldr	r0, [pc, #0x14c]        @ 0x805d918 <xStreamBufferReceive+0x18c>
 805d7cc: 4780         	blx	r0
 805d7ce: e7ff         	b	0x805d7d0 <xStreamBufferReceive+0x44> @ imm = #-0x2
 805d7d0: e7fe         	b	0x805d7d0 <xStreamBufferReceive+0x44> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805d7d2: 9807         	ldr	r0, [sp, #0x1c]
 805d7d4: b920         	cbnz	r0, 0x805d7e0 <xStreamBufferReceive+0x54> @ imm = #0x8
 805d7d6: e7ff         	b	0x805d7d8 <xStreamBufferReceive+0x4c> @ imm = #-0x2
 805d7d8: 484e         	ldr	r0, [pc, #0x138]        @ 0x805d914 <xStreamBufferReceive+0x188>
 805d7da: 4780         	blx	r0
 805d7dc: e7ff         	b	0x805d7de <xStreamBufferReceive+0x52> @ imm = #-0x2
 805d7de: e7fe         	b	0x805d7de <xStreamBufferReceive+0x52> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805d7e0: 9807         	ldr	r0, [sp, #0x1c]
 805d7e2: 7f00         	ldrb	r0, [r0, #0x1c]
 805d7e4: 07c0         	lsls	r0, r0, #0x1f
 805d7e6: b118         	cbz	r0, 0x805d7f0 <xStreamBufferReceive+0x64> @ imm = #0x6
 805d7e8: e7ff         	b	0x805d7ea <xStreamBufferReceive+0x5e> @ imm = #-0x2
 805d7ea: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805d7ec: 9004         	str	r0, [sp, #0x10]
;     }
 805d7ee: e002         	b	0x805d7f6 <xStreamBufferReceive+0x6a> @ imm = #0x4
 805d7f0: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805d7f2: 9004         	str	r0, [sp, #0x10]
 805d7f4: e7ff         	b	0x805d7f6 <xStreamBufferReceive+0x6a> @ imm = #-0x2
;     if( xTicksToWait != ( TickType_t ) 0 )
 805d7f6: 9808         	ldr	r0, [sp, #0x20]
 805d7f8: b3c8         	cbz	r0, 0x805d86e <xStreamBufferReceive+0xe2> @ imm = #0x72
 805d7fa: e7ff         	b	0x805d7fc <xStreamBufferReceive+0x70> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805d7fc: 4838         	ldr	r0, [pc, #0xe0]         @ 0x805d8e0 <xStreamBufferReceive+0x154>
 805d7fe: 4780         	blx	r0
;             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805d800: 9807         	ldr	r0, [sp, #0x1c]
 805d802: 4938         	ldr	r1, [pc, #0xe0]         @ 0x805d8e4 <xStreamBufferReceive+0x158>
 805d804: 4788         	blx	r1
 805d806: 9005         	str	r0, [sp, #0x14]
;             if( xBytesAvailable <= xBytesToStoreMessageLength )
 805d808: 9805         	ldr	r0, [sp, #0x14]
 805d80a: 9904         	ldr	r1, [sp, #0x10]
 805d80c: 4288         	cmp	r0, r1
 805d80e: d811         	bhi	0x805d834 <xStreamBufferReceive+0xa8> @ imm = #0x22
 805d810: e7ff         	b	0x805d812 <xStreamBufferReceive+0x86> @ imm = #-0x2
;                 ( void ) xTaskNotifyStateClear( NULL );
 805d812: 4a35         	ldr	r2, [pc, #0xd4]         @ 0x805d8e8 <xStreamBufferReceive+0x15c>
 805d814: 2100         	movs	r1, #0x0
 805d816: 4608         	mov	r0, r1
 805d818: 4790         	blx	r2
;                 configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 805d81a: 9807         	ldr	r0, [sp, #0x1c]
 805d81c: 6900         	ldr	r0, [r0, #0x10]
 805d81e: b120         	cbz	r0, 0x805d82a <xStreamBufferReceive+0x9e> @ imm = #0x8
 805d820: e7ff         	b	0x805d822 <xStreamBufferReceive+0x96> @ imm = #-0x2
 805d822: 483b         	ldr	r0, [pc, #0xec]         @ 0x805d910 <xStreamBufferReceive+0x184>
 805d824: 4780         	blx	r0
 805d826: e7ff         	b	0x805d828 <xStreamBufferReceive+0x9c> @ imm = #-0x2
 805d828: e7fe         	b	0x805d828 <xStreamBufferReceive+0x9c> @ imm = #-0x4
;                 pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 805d82a: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805d8ec <xStreamBufferReceive+0x160>
 805d82c: 4780         	blx	r0
 805d82e: 9907         	ldr	r1, [sp, #0x1c]
 805d830: 6108         	str	r0, [r1, #0x10]
;             }
 805d832: e000         	b	0x805d836 <xStreamBufferReceive+0xaa> @ imm = #0x0
 805d834: e7ff         	b	0x805d836 <xStreamBufferReceive+0xaa> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805d836: 482e         	ldr	r0, [pc, #0xb8]         @ 0x805d8f0 <xStreamBufferReceive+0x164>
 805d838: 4780         	blx	r0
;         if( xBytesAvailable <= xBytesToStoreMessageLength )
 805d83a: 9805         	ldr	r0, [sp, #0x14]
 805d83c: 9904         	ldr	r1, [sp, #0x10]
 805d83e: 4288         	cmp	r0, r1
 805d840: d813         	bhi	0x805d86a <xStreamBufferReceive+0xde> @ imm = #0x26
 805d842: e7ff         	b	0x805d844 <xStreamBufferReceive+0xb8> @ imm = #-0x2
;             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 805d844: 9808         	ldr	r0, [sp, #0x20]
 805d846: 4669         	mov	r1, sp
 805d848: 6008         	str	r0, [r1]
 805d84a: f8df c0a8    	ldr.w	r12, [pc, #0xa8]        @ 0x805d8f4 <xStreamBufferReceive+0x168>
 805d84e: 2300         	movs	r3, #0x0
 805d850: 9303         	str	r3, [sp, #0xc]
 805d852: 4618         	mov	r0, r3
 805d854: 4619         	mov	r1, r3
 805d856: 461a         	mov	r2, r3
 805d858: 47e0         	blx	r12
;             pxStreamBuffer->xTaskWaitingToReceive = NULL;
 805d85a: 9803         	ldr	r0, [sp, #0xc]
 805d85c: 9907         	ldr	r1, [sp, #0x1c]
 805d85e: 6108         	str	r0, [r1, #0x10]
;             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805d860: 9807         	ldr	r0, [sp, #0x1c]
 805d862: 4925         	ldr	r1, [pc, #0x94]         @ 0x805d8f8 <xStreamBufferReceive+0x16c>
 805d864: 4788         	blx	r1
 805d866: 9005         	str	r0, [sp, #0x14]
;         }
 805d868: e000         	b	0x805d86c <xStreamBufferReceive+0xe0> @ imm = #0x0
 805d86a: e7ff         	b	0x805d86c <xStreamBufferReceive+0xe0> @ imm = #-0x2
;     }
 805d86c: e004         	b	0x805d878 <xStreamBufferReceive+0xec> @ imm = #0x8
;         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805d86e: 9807         	ldr	r0, [sp, #0x1c]
 805d870: 491a         	ldr	r1, [pc, #0x68]         @ 0x805d8dc <xStreamBufferReceive+0x150>
 805d872: 4788         	blx	r1
 805d874: 9005         	str	r0, [sp, #0x14]
 805d876: e7ff         	b	0x805d878 <xStreamBufferReceive+0xec> @ imm = #-0x2
;     if( xBytesAvailable > xBytesToStoreMessageLength )
 805d878: 9805         	ldr	r0, [sp, #0x14]
 805d87a: 9904         	ldr	r1, [sp, #0x10]
 805d87c: 4288         	cmp	r0, r1
 805d87e: d925         	bls	0x805d8cc <xStreamBufferReceive+0x140> @ imm = #0x4a
 805d880: e7ff         	b	0x805d882 <xStreamBufferReceive+0xf6> @ imm = #-0x2
;         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 805d882: 9807         	ldr	r0, [sp, #0x1c]
 805d884: 990a         	ldr	r1, [sp, #0x28]
 805d886: 9a09         	ldr	r2, [sp, #0x24]
 805d888: 9b05         	ldr	r3, [sp, #0x14]
 805d88a: f8df c070    	ldr.w	r12, [pc, #0x70]        @ 0x805d8fc <xStreamBufferReceive+0x170>
 805d88e: 47e0         	blx	r12
 805d890: 9006         	str	r0, [sp, #0x18]
;         if( xReceivedLength != ( size_t ) 0 )
 805d892: 9806         	ldr	r0, [sp, #0x18]
 805d894: b1c0         	cbz	r0, 0x805d8c8 <xStreamBufferReceive+0x13c> @ imm = #0x30
 805d896: e7ff         	b	0x805d898 <xStreamBufferReceive+0x10c> @ imm = #-0x2
;             prvRECEIVE_COMPLETED( xStreamBuffer );
 805d898: 4819         	ldr	r0, [pc, #0x64]         @ 0x805d900 <xStreamBufferReceive+0x174>
 805d89a: 4780         	blx	r0
 805d89c: 980b         	ldr	r0, [sp, #0x2c]
 805d89e: 6940         	ldr	r0, [r0, #0x14]
 805d8a0: b178         	cbz	r0, 0x805d8c2 <xStreamBufferReceive+0x136> @ imm = #0x1e
 805d8a2: e7ff         	b	0x805d8a4 <xStreamBufferReceive+0x118> @ imm = #-0x2
 805d8a4: 980b         	ldr	r0, [sp, #0x2c]
 805d8a6: 6940         	ldr	r0, [r0, #0x14]
 805d8a8: 4669         	mov	r1, sp
 805d8aa: 2300         	movs	r3, #0x0
 805d8ac: 9302         	str	r3, [sp, #0x8]
 805d8ae: 600b         	str	r3, [r1]
 805d8b0: f8df c050    	ldr.w	r12, [pc, #0x50]        @ 0x805d904 <xStreamBufferReceive+0x178>
 805d8b4: 4619         	mov	r1, r3
 805d8b6: 461a         	mov	r2, r3
 805d8b8: 47e0         	blx	r12
 805d8ba: 9802         	ldr	r0, [sp, #0x8]
 805d8bc: 990b         	ldr	r1, [sp, #0x2c]
 805d8be: 6148         	str	r0, [r1, #0x14]
 805d8c0: e7ff         	b	0x805d8c2 <xStreamBufferReceive+0x136> @ imm = #-0x2
 805d8c2: 4811         	ldr	r0, [pc, #0x44]         @ 0x805d908 <xStreamBufferReceive+0x17c>
 805d8c4: 4780         	blx	r0
;         }
 805d8c6: e000         	b	0x805d8ca <xStreamBufferReceive+0x13e> @ imm = #0x0
 805d8c8: e7ff         	b	0x805d8ca <xStreamBufferReceive+0x13e> @ imm = #-0x2
;     }
 805d8ca: e000         	b	0x805d8ce <xStreamBufferReceive+0x142> @ imm = #0x0
 805d8cc: e7ff         	b	0x805d8ce <xStreamBufferReceive+0x142> @ imm = #-0x2
;     return xReceivedLength;
 805d8ce: 9806         	ldr	r0, [sp, #0x18]
 805d8d0: 9001         	str	r0, [sp, #0x4]
 805d8d2: 480e         	ldr	r0, [pc, #0x38]         @ 0x805d90c <xStreamBufferReceive+0x180>
 805d8d4: 4780         	blx	r0
 805d8d6: 9801         	ldr	r0, [sp, #0x4]
 805d8d8: b00c         	add	sp, #0x30
 805d8da: bdb0         	pop	{r4, r5, r7, pc}

0805d8dc <$d.23>:
 805d8dc: 3d d3 05 08  	.word	0x0805d33d
 805d8e0: 05 e1 05 08  	.word	0x0805e105
 805d8e4: 3d d3 05 08  	.word	0x0805d33d
 805d8e8: 95 8c 05 08  	.word	0x08058c95
 805d8ec: bd 7b 05 08  	.word	0x08057bbd
 805d8f0: 4d e1 05 08  	.word	0x0805e14d
 805d8f4: 45 83 05 08  	.word	0x08058345
 805d8f8: 3d d3 05 08  	.word	0x0805d33d
 805d8fc: 1d d9 05 08  	.word	0x0805d91d
 805d900: b9 59 05 08  	.word	0x080559b9
 805d904: c1 84 05 08  	.word	0x080584c1
 805d908: 29 5b 05 08  	.word	0x08055b29
 805d90c: 21 05 06 08  	.word	0x08060521
 805d910: 55 ec 05 08  	.word	0x0805ec55
 805d914: 55 ec 05 08  	.word	0x0805ec55
 805d918: 55 ec 05 08  	.word	0x0805ec55

0805d91c <prvReadMessageFromBuffer>:
; {
 805d91c: b5b0         	push	{r4, r5, r7, lr}
 805d91e: af02         	add	r7, sp, #0x8
 805d920: b08a         	sub	sp, #0x28
 805d922: 4674         	mov	r4, lr
 805d924: f643 5e40    	movw	lr, #0x3d40
 805d928: f2c2 0e00    	movt	lr, #0x2000
 805d92c: f8de c000    	ldr.w	r12, [lr]
 805d930: f642 5540    	movw	r5, #0x2d40
 805d934: f2c2 0500    	movt	r5, #0x2000
 805d938: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805d93c: f10c 0c01    	add.w	r12, r12, #0x1
 805d940: f8ce c000    	str.w	r12, [lr]
 805d944: 9009         	str	r0, [sp, #0x24]
 805d946: 9108         	str	r1, [sp, #0x20]
 805d948: 9207         	str	r2, [sp, #0x1c]
 805d94a: 9306         	str	r3, [sp, #0x18]
;     size_t xNextTail = pxStreamBuffer->xTail;
 805d94c: 9809         	ldr	r0, [sp, #0x24]
 805d94e: 6800         	ldr	r0, [r0]
 805d950: 9002         	str	r0, [sp, #0x8]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805d952: 9809         	ldr	r0, [sp, #0x24]
 805d954: 7f00         	ldrb	r0, [r0, #0x1c]
 805d956: 07c0         	lsls	r0, r0, #0x1f
 805d958: b1b8         	cbz	r0, 0x805d98a <prvReadMessageFromBuffer+0x6e> @ imm = #0x2e
 805d95a: e7ff         	b	0x805d95c <prvReadMessageFromBuffer+0x40> @ imm = #-0x2
;         xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 805d95c: 9809         	ldr	r0, [sp, #0x24]
 805d95e: 9b02         	ldr	r3, [sp, #0x8]
 805d960: f8df c070    	ldr.w	r12, [pc, #0x70]        @ 0x805d9d4 <prvReadMessageFromBuffer+0xb8>
 805d964: a903         	add	r1, sp, #0xc
 805d966: 2204         	movs	r2, #0x4
 805d968: 47e0         	blx	r12
 805d96a: 9002         	str	r0, [sp, #0x8]
;         xNextMessageLength = ( size_t ) xTempNextMessageLength;
 805d96c: 9803         	ldr	r0, [sp, #0xc]
 805d96e: 9004         	str	r0, [sp, #0x10]
;         xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805d970: 9806         	ldr	r0, [sp, #0x18]
 805d972: 3804         	subs	r0, #0x4
 805d974: 9006         	str	r0, [sp, #0x18]
;         if( xNextMessageLength > xBufferLengthBytes )
 805d976: 9804         	ldr	r0, [sp, #0x10]
 805d978: 9907         	ldr	r1, [sp, #0x1c]
 805d97a: 4288         	cmp	r0, r1
 805d97c: d903         	bls	0x805d986 <prvReadMessageFromBuffer+0x6a> @ imm = #0x6
 805d97e: e7ff         	b	0x805d980 <prvReadMessageFromBuffer+0x64> @ imm = #-0x2
 805d980: 2000         	movs	r0, #0x0
;             xNextMessageLength = 0;
 805d982: 9004         	str	r0, [sp, #0x10]
;         }
 805d984: e000         	b	0x805d988 <prvReadMessageFromBuffer+0x6c> @ imm = #0x0
 805d986: e7ff         	b	0x805d988 <prvReadMessageFromBuffer+0x6c> @ imm = #-0x2
;     }
 805d988: e002         	b	0x805d990 <prvReadMessageFromBuffer+0x74> @ imm = #0x4
;         xNextMessageLength = xBufferLengthBytes;
 805d98a: 9807         	ldr	r0, [sp, #0x1c]
 805d98c: 9004         	str	r0, [sp, #0x10]
 805d98e: e7ff         	b	0x805d990 <prvReadMessageFromBuffer+0x74> @ imm = #-0x2
;     xCount = configMIN( xNextMessageLength, xBytesAvailable );
 805d990: 9804         	ldr	r0, [sp, #0x10]
 805d992: 9906         	ldr	r1, [sp, #0x18]
 805d994: 4288         	cmp	r0, r1
 805d996: d203         	bhs	0x805d9a0 <prvReadMessageFromBuffer+0x84> @ imm = #0x6
 805d998: e7ff         	b	0x805d99a <prvReadMessageFromBuffer+0x7e> @ imm = #-0x2
 805d99a: 9804         	ldr	r0, [sp, #0x10]
 805d99c: 9001         	str	r0, [sp, #0x4]
 805d99e: e002         	b	0x805d9a6 <prvReadMessageFromBuffer+0x8a> @ imm = #0x4
 805d9a0: 9806         	ldr	r0, [sp, #0x18]
 805d9a2: 9001         	str	r0, [sp, #0x4]
 805d9a4: e7ff         	b	0x805d9a6 <prvReadMessageFromBuffer+0x8a> @ imm = #-0x2
 805d9a6: 9801         	ldr	r0, [sp, #0x4]
 805d9a8: 9005         	str	r0, [sp, #0x14]
;     if( xCount != ( size_t ) 0 )
 805d9aa: 9805         	ldr	r0, [sp, #0x14]
 805d9ac: b150         	cbz	r0, 0x805d9c4 <prvReadMessageFromBuffer+0xa8> @ imm = #0x14
 805d9ae: e7ff         	b	0x805d9b0 <prvReadMessageFromBuffer+0x94> @ imm = #-0x2
;         pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 805d9b0: 9809         	ldr	r0, [sp, #0x24]
 805d9b2: 9908         	ldr	r1, [sp, #0x20]
 805d9b4: 9a05         	ldr	r2, [sp, #0x14]
 805d9b6: 9b02         	ldr	r3, [sp, #0x8]
 805d9b8: f8df c01c    	ldr.w	r12, [pc, #0x1c]        @ 0x805d9d8 <prvReadMessageFromBuffer+0xbc>
 805d9bc: 47e0         	blx	r12
 805d9be: 9909         	ldr	r1, [sp, #0x24]
 805d9c0: 6008         	str	r0, [r1]
;     }
 805d9c2: e7ff         	b	0x805d9c4 <prvReadMessageFromBuffer+0xa8> @ imm = #-0x2
;     return xCount;
 805d9c4: 9805         	ldr	r0, [sp, #0x14]
 805d9c6: 9000         	str	r0, [sp]
 805d9c8: 4804         	ldr	r0, [pc, #0x10]         @ 0x805d9dc <prvReadMessageFromBuffer+0xc0>
 805d9ca: 4780         	blx	r0
 805d9cc: 9800         	ldr	r0, [sp]
 805d9ce: b00a         	add	sp, #0x28
 805d9d0: bdb0         	pop	{r4, r5, r7, pc}
 805d9d2: bf00         	nop

0805d9d4 <$d.25>:
 805d9d4: 81 da 05 08  	.word	0x0805da81
 805d9d8: 81 da 05 08  	.word	0x0805da81
 805d9dc: 21 05 06 08  	.word	0x08060521

0805d9e0 <xStreamBufferNextMessageLengthBytes>:
; {
 805d9e0: b580         	push	{r7, lr}
 805d9e2: 466f         	mov	r7, sp
 805d9e4: b086         	sub	sp, #0x18
 805d9e6: f643 5240    	movw	r2, #0x3d40
 805d9ea: f2c2 0200    	movt	r2, #0x2000
 805d9ee: 6811         	ldr	r1, [r2]
 805d9f0: f642 5340    	movw	r3, #0x2d40
 805d9f4: f2c2 0300    	movt	r3, #0x2000
 805d9f8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805d9fc: 3101         	adds	r1, #0x1
 805d9fe: 6011         	str	r1, [r2]
 805da00: 9005         	str	r0, [sp, #0x14]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805da02: 9805         	ldr	r0, [sp, #0x14]
 805da04: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxStreamBuffer );
 805da06: 9804         	ldr	r0, [sp, #0x10]
 805da08: b920         	cbnz	r0, 0x805da14 <xStreamBufferNextMessageLengthBytes+0x34> @ imm = #0x8
 805da0a: e7ff         	b	0x805da0c <xStreamBufferNextMessageLengthBytes+0x2c> @ imm = #-0x2
 805da0c: 481b         	ldr	r0, [pc, #0x6c]         @ 0x805da7c <xStreamBufferNextMessageLengthBytes+0x9c>
 805da0e: 4780         	blx	r0
 805da10: e7ff         	b	0x805da12 <xStreamBufferNextMessageLengthBytes+0x32> @ imm = #-0x2
 805da12: e7fe         	b	0x805da12 <xStreamBufferNextMessageLengthBytes+0x32> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805da14: 9804         	ldr	r0, [sp, #0x10]
 805da16: 7f00         	ldrb	r0, [r0, #0x1c]
 805da18: 07c0         	lsls	r0, r0, #0x1f
 805da1a: b1e8         	cbz	r0, 0x805da58 <xStreamBufferNextMessageLengthBytes+0x78> @ imm = #0x3a
 805da1c: e7ff         	b	0x805da1e <xStreamBufferNextMessageLengthBytes+0x3e> @ imm = #-0x2
;         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805da1e: 9804         	ldr	r0, [sp, #0x10]
 805da20: 4912         	ldr	r1, [pc, #0x48]         @ 0x805da6c <xStreamBufferNextMessageLengthBytes+0x8c>
 805da22: 4788         	blx	r1
 805da24: 9002         	str	r0, [sp, #0x8]
;         if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 805da26: 9802         	ldr	r0, [sp, #0x8]
 805da28: 2805         	cmp	r0, #0x5
 805da2a: d30a         	blo	0x805da42 <xStreamBufferNextMessageLengthBytes+0x62> @ imm = #0x14
 805da2c: e7ff         	b	0x805da2e <xStreamBufferNextMessageLengthBytes+0x4e> @ imm = #-0x2
;             ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 805da2e: 9804         	ldr	r0, [sp, #0x10]
 805da30: 6803         	ldr	r3, [r0]
 805da32: f8df c040    	ldr.w	r12, [pc, #0x40]        @ 0x805da74 <xStreamBufferNextMessageLengthBytes+0x94>
 805da36: a901         	add	r1, sp, #0x4
 805da38: 2204         	movs	r2, #0x4
 805da3a: 47e0         	blx	r12
;             xReturn = ( size_t ) xTempReturn;
 805da3c: 9801         	ldr	r0, [sp, #0x4]
 805da3e: 9003         	str	r0, [sp, #0xc]
;         }
 805da40: e009         	b	0x805da56 <xStreamBufferNextMessageLengthBytes+0x76> @ imm = #0x12
;             configASSERT( xBytesAvailable == 0 );
 805da42: 9802         	ldr	r0, [sp, #0x8]
 805da44: b120         	cbz	r0, 0x805da50 <xStreamBufferNextMessageLengthBytes+0x70> @ imm = #0x8
 805da46: e7ff         	b	0x805da48 <xStreamBufferNextMessageLengthBytes+0x68> @ imm = #-0x2
 805da48: 4809         	ldr	r0, [pc, #0x24]         @ 0x805da70 <xStreamBufferNextMessageLengthBytes+0x90>
 805da4a: 4780         	blx	r0
 805da4c: e7ff         	b	0x805da4e <xStreamBufferNextMessageLengthBytes+0x6e> @ imm = #-0x2
 805da4e: e7fe         	b	0x805da4e <xStreamBufferNextMessageLengthBytes+0x6e> @ imm = #-0x4
 805da50: 2000         	movs	r0, #0x0
;             xReturn = 0;
 805da52: 9003         	str	r0, [sp, #0xc]
 805da54: e7ff         	b	0x805da56 <xStreamBufferNextMessageLengthBytes+0x76> @ imm = #-0x2
;     }
 805da56: e002         	b	0x805da5e <xStreamBufferNextMessageLengthBytes+0x7e> @ imm = #0x4
 805da58: 2000         	movs	r0, #0x0
;         xReturn = 0;
 805da5a: 9003         	str	r0, [sp, #0xc]
 805da5c: e7ff         	b	0x805da5e <xStreamBufferNextMessageLengthBytes+0x7e> @ imm = #-0x2
;     return xReturn;
 805da5e: 9803         	ldr	r0, [sp, #0xc]
 805da60: 9000         	str	r0, [sp]
 805da62: 4805         	ldr	r0, [pc, #0x14]         @ 0x805da78 <xStreamBufferNextMessageLengthBytes+0x98>
 805da64: 4780         	blx	r0
 805da66: 9800         	ldr	r0, [sp]
 805da68: b006         	add	sp, #0x18
 805da6a: bd80         	pop	{r7, pc}

0805da6c <$d.27>:
 805da6c: 3d d3 05 08  	.word	0x0805d33d
 805da70: 55 ec 05 08  	.word	0x0805ec55
 805da74: 81 da 05 08  	.word	0x0805da81
 805da78: 21 05 06 08  	.word	0x08060521
 805da7c: 55 ec 05 08  	.word	0x0805ec55

0805da80 <prvReadBytesFromBuffer>:
; {
 805da80: b5b0         	push	{r4, r5, r7, lr}
 805da82: af02         	add	r7, sp, #0x8
 805da84: b088         	sub	sp, #0x20
 805da86: 4674         	mov	r4, lr
 805da88: f643 5e40    	movw	lr, #0x3d40
 805da8c: f2c2 0e00    	movt	lr, #0x2000
 805da90: f8de c000    	ldr.w	r12, [lr]
 805da94: f642 5540    	movw	r5, #0x2d40
 805da98: f2c2 0500    	movt	r5, #0x2000
 805da9c: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805daa0: f10c 0c01    	add.w	r12, r12, #0x1
 805daa4: f8ce c000    	str.w	r12, [lr]
 805daa8: 9007         	str	r0, [sp, #0x1c]
 805daaa: 9106         	str	r1, [sp, #0x18]
 805daac: 9205         	str	r2, [sp, #0x14]
 805daae: 9304         	str	r3, [sp, #0x10]
;     configASSERT( xCount != ( size_t ) 0 );
 805dab0: 9805         	ldr	r0, [sp, #0x14]
 805dab2: b920         	cbnz	r0, 0x805dabe <prvReadBytesFromBuffer+0x3e> @ imm = #0x8
 805dab4: e7ff         	b	0x805dab6 <prvReadBytesFromBuffer+0x36> @ imm = #-0x2
 805dab6: 4832         	ldr	r0, [pc, #0xc8]         @ 0x805db80 <prvReadBytesFromBuffer+0x100>
 805dab8: 4780         	blx	r0
 805daba: e7ff         	b	0x805dabc <prvReadBytesFromBuffer+0x3c> @ imm = #-0x2
 805dabc: e7fe         	b	0x805dabc <prvReadBytesFromBuffer+0x3c> @ imm = #-0x4
;     xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 805dabe: 9807         	ldr	r0, [sp, #0x1c]
 805dac0: 6880         	ldr	r0, [r0, #0x8]
 805dac2: 9904         	ldr	r1, [sp, #0x10]
 805dac4: 1a40         	subs	r0, r0, r1
 805dac6: 9905         	ldr	r1, [sp, #0x14]
 805dac8: 4288         	cmp	r0, r1
 805daca: d206         	bhs	0x805dada <prvReadBytesFromBuffer+0x5a> @ imm = #0xc
 805dacc: e7ff         	b	0x805dace <prvReadBytesFromBuffer+0x4e> @ imm = #-0x2
 805dace: 9807         	ldr	r0, [sp, #0x1c]
 805dad0: 6880         	ldr	r0, [r0, #0x8]
 805dad2: 9904         	ldr	r1, [sp, #0x10]
 805dad4: 1a40         	subs	r0, r0, r1
 805dad6: 9002         	str	r0, [sp, #0x8]
 805dad8: e002         	b	0x805dae0 <prvReadBytesFromBuffer+0x60> @ imm = #0x4
 805dada: 9805         	ldr	r0, [sp, #0x14]
 805dadc: 9002         	str	r0, [sp, #0x8]
 805dade: e7ff         	b	0x805dae0 <prvReadBytesFromBuffer+0x60> @ imm = #-0x2
 805dae0: 9802         	ldr	r0, [sp, #0x8]
 805dae2: 9003         	str	r0, [sp, #0xc]
;     configASSERT( xFirstLength <= xCount );
 805dae4: 9803         	ldr	r0, [sp, #0xc]
 805dae6: 9905         	ldr	r1, [sp, #0x14]
 805dae8: 4288         	cmp	r0, r1
 805daea: d904         	bls	0x805daf6 <prvReadBytesFromBuffer+0x76> @ imm = #0x8
 805daec: e7ff         	b	0x805daee <prvReadBytesFromBuffer+0x6e> @ imm = #-0x2
 805daee: 4823         	ldr	r0, [pc, #0x8c]         @ 0x805db7c <prvReadBytesFromBuffer+0xfc>
 805daf0: 4780         	blx	r0
 805daf2: e7ff         	b	0x805daf4 <prvReadBytesFromBuffer+0x74> @ imm = #-0x2
 805daf4: e7fe         	b	0x805daf4 <prvReadBytesFromBuffer+0x74> @ imm = #-0x4
;     configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 805daf6: 9804         	ldr	r0, [sp, #0x10]
 805daf8: 9903         	ldr	r1, [sp, #0xc]
 805dafa: 4408         	add	r0, r1
 805dafc: 9907         	ldr	r1, [sp, #0x1c]
 805dafe: 6889         	ldr	r1, [r1, #0x8]
 805db00: 4288         	cmp	r0, r1
 805db02: d904         	bls	0x805db0e <prvReadBytesFromBuffer+0x8e> @ imm = #0x8
 805db04: e7ff         	b	0x805db06 <prvReadBytesFromBuffer+0x86> @ imm = #-0x2
 805db06: 481c         	ldr	r0, [pc, #0x70]         @ 0x805db78 <prvReadBytesFromBuffer+0xf8>
 805db08: 4780         	blx	r0
 805db0a: e7ff         	b	0x805db0c <prvReadBytesFromBuffer+0x8c> @ imm = #-0x2
 805db0c: e7fe         	b	0x805db0c <prvReadBytesFromBuffer+0x8c> @ imm = #-0x4
;     ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805db0e: 9806         	ldr	r0, [sp, #0x18]
 805db10: 9907         	ldr	r1, [sp, #0x1c]
 805db12: 6989         	ldr	r1, [r1, #0x18]
 805db14: 9a04         	ldr	r2, [sp, #0x10]
 805db16: 4411         	add	r1, r2
 805db18: 9a03         	ldr	r2, [sp, #0xc]
 805db1a: 4b14         	ldr	r3, [pc, #0x50]         @ 0x805db6c <prvReadBytesFromBuffer+0xec>
 805db1c: 4798         	blx	r3
;     if( xCount > xFirstLength )
 805db1e: 9805         	ldr	r0, [sp, #0x14]
 805db20: 9903         	ldr	r1, [sp, #0xc]
 805db22: 4288         	cmp	r0, r1
 805db24: d90a         	bls	0x805db3c <prvReadBytesFromBuffer+0xbc> @ imm = #0x14
 805db26: e7ff         	b	0x805db28 <prvReadBytesFromBuffer+0xa8> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805db28: 9806         	ldr	r0, [sp, #0x18]
 805db2a: 9b03         	ldr	r3, [sp, #0xc]
 805db2c: 4418         	add	r0, r3
 805db2e: 9907         	ldr	r1, [sp, #0x1c]
 805db30: 6989         	ldr	r1, [r1, #0x18]
 805db32: 9a05         	ldr	r2, [sp, #0x14]
 805db34: 1ad2         	subs	r2, r2, r3
 805db36: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x805db70 <prvReadBytesFromBuffer+0xf0>
 805db38: 4798         	blx	r3
;     }
 805db3a: e000         	b	0x805db3e <prvReadBytesFromBuffer+0xbe> @ imm = #0x0
 805db3c: e7ff         	b	0x805db3e <prvReadBytesFromBuffer+0xbe> @ imm = #-0x2
;     xTail += xCount;
 805db3e: 9905         	ldr	r1, [sp, #0x14]
 805db40: 9804         	ldr	r0, [sp, #0x10]
 805db42: 4408         	add	r0, r1
 805db44: 9004         	str	r0, [sp, #0x10]
;     if( xTail >= pxStreamBuffer->xLength )
 805db46: 9804         	ldr	r0, [sp, #0x10]
 805db48: 9907         	ldr	r1, [sp, #0x1c]
 805db4a: 6889         	ldr	r1, [r1, #0x8]
 805db4c: 4288         	cmp	r0, r1
 805db4e: d306         	blo	0x805db5e <prvReadBytesFromBuffer+0xde> @ imm = #0xc
 805db50: e7ff         	b	0x805db52 <prvReadBytesFromBuffer+0xd2> @ imm = #-0x2
;         xTail -= pxStreamBuffer->xLength;
 805db52: 9807         	ldr	r0, [sp, #0x1c]
 805db54: 6881         	ldr	r1, [r0, #0x8]
 805db56: 9804         	ldr	r0, [sp, #0x10]
 805db58: 1a40         	subs	r0, r0, r1
 805db5a: 9004         	str	r0, [sp, #0x10]
;     }
 805db5c: e7ff         	b	0x805db5e <prvReadBytesFromBuffer+0xde> @ imm = #-0x2
;     return xTail;
 805db5e: 9804         	ldr	r0, [sp, #0x10]
 805db60: 9001         	str	r0, [sp, #0x4]
 805db62: 4804         	ldr	r0, [pc, #0x10]         @ 0x805db74 <prvReadBytesFromBuffer+0xf4>
 805db64: 4780         	blx	r0
 805db66: 9801         	ldr	r0, [sp, #0x4]
 805db68: b008         	add	sp, #0x20
 805db6a: bdb0         	pop	{r4, r5, r7, pc}

0805db6c <$d.29>:
 805db6c: 89 22 06 08  	.word	0x08062289
 805db70: 89 22 06 08  	.word	0x08062289
 805db74: 21 05 06 08  	.word	0x08060521
 805db78: 55 ec 05 08  	.word	0x0805ec55
 805db7c: 55 ec 05 08  	.word	0x0805ec55
 805db80: 55 ec 05 08  	.word	0x0805ec55

0805db84 <xStreamBufferReceiveFromISR>:
; {
 805db84: b5b0         	push	{r4, r5, r7, lr}
 805db86: af02         	add	r7, sp, #0x8
 805db88: b08e         	sub	sp, #0x38
 805db8a: 4674         	mov	r4, lr
 805db8c: f643 5e40    	movw	lr, #0x3d40
 805db90: f2c2 0e00    	movt	lr, #0x2000
 805db94: f8de c000    	ldr.w	r12, [lr]
 805db98: f642 5540    	movw	r5, #0x2d40
 805db9c: f2c2 0500    	movt	r5, #0x2000
 805dba0: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805dba4: f10c 0c01    	add.w	r12, r12, #0x1
 805dba8: f8ce c000    	str.w	r12, [lr]
 805dbac: 900d         	str	r0, [sp, #0x34]
 805dbae: 910c         	str	r1, [sp, #0x30]
 805dbb0: 920b         	str	r2, [sp, #0x2c]
 805dbb2: 930a         	str	r3, [sp, #0x28]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805dbb4: 980d         	ldr	r0, [sp, #0x34]
 805dbb6: 9009         	str	r0, [sp, #0x24]
 805dbb8: 2000         	movs	r0, #0x0
;     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 805dbba: 9008         	str	r0, [sp, #0x20]
;     configASSERT( pvRxData );
 805dbbc: 980c         	ldr	r0, [sp, #0x30]
 805dbbe: b920         	cbnz	r0, 0x805dbca <xStreamBufferReceiveFromISR+0x46> @ imm = #0x8
 805dbc0: e7ff         	b	0x805dbc2 <xStreamBufferReceiveFromISR+0x3e> @ imm = #-0x2
 805dbc2: 4830         	ldr	r0, [pc, #0xc0]         @ 0x805dc84 <xStreamBufferReceiveFromISR+0x100>
 805dbc4: 4780         	blx	r0
 805dbc6: e7ff         	b	0x805dbc8 <xStreamBufferReceiveFromISR+0x44> @ imm = #-0x2
 805dbc8: e7fe         	b	0x805dbc8 <xStreamBufferReceiveFromISR+0x44> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805dbca: 9809         	ldr	r0, [sp, #0x24]
 805dbcc: b920         	cbnz	r0, 0x805dbd8 <xStreamBufferReceiveFromISR+0x54> @ imm = #0x8
 805dbce: e7ff         	b	0x805dbd0 <xStreamBufferReceiveFromISR+0x4c> @ imm = #-0x2
 805dbd0: 482b         	ldr	r0, [pc, #0xac]         @ 0x805dc80 <xStreamBufferReceiveFromISR+0xfc>
 805dbd2: 4780         	blx	r0
 805dbd4: e7ff         	b	0x805dbd6 <xStreamBufferReceiveFromISR+0x52> @ imm = #-0x2
 805dbd6: e7fe         	b	0x805dbd6 <xStreamBufferReceiveFromISR+0x52> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805dbd8: 9809         	ldr	r0, [sp, #0x24]
 805dbda: 7f00         	ldrb	r0, [r0, #0x1c]
 805dbdc: 07c0         	lsls	r0, r0, #0x1f
 805dbde: b118         	cbz	r0, 0x805dbe8 <xStreamBufferReceiveFromISR+0x64> @ imm = #0x6
 805dbe0: e7ff         	b	0x805dbe2 <xStreamBufferReceiveFromISR+0x5e> @ imm = #-0x2
 805dbe2: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805dbe4: 9006         	str	r0, [sp, #0x18]
;     }
 805dbe6: e002         	b	0x805dbee <xStreamBufferReceiveFromISR+0x6a> @ imm = #0x4
 805dbe8: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805dbea: 9006         	str	r0, [sp, #0x18]
 805dbec: e7ff         	b	0x805dbee <xStreamBufferReceiveFromISR+0x6a> @ imm = #-0x2
;     xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805dbee: 9809         	ldr	r0, [sp, #0x24]
 805dbf0: 491d         	ldr	r1, [pc, #0x74]         @ 0x805dc68 <xStreamBufferReceiveFromISR+0xe4>
 805dbf2: 4788         	blx	r1
 805dbf4: 9007         	str	r0, [sp, #0x1c]
;     if( xBytesAvailable > xBytesToStoreMessageLength )
 805dbf6: 9807         	ldr	r0, [sp, #0x1c]
 805dbf8: 9906         	ldr	r1, [sp, #0x18]
 805dbfa: 4288         	cmp	r0, r1
 805dbfc: d92b         	bls	0x805dc56 <xStreamBufferReceiveFromISR+0xd2> @ imm = #0x56
 805dbfe: e7ff         	b	0x805dc00 <xStreamBufferReceiveFromISR+0x7c> @ imm = #-0x2
;         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 805dc00: 9809         	ldr	r0, [sp, #0x24]
 805dc02: 990c         	ldr	r1, [sp, #0x30]
 805dc04: 9a0b         	ldr	r2, [sp, #0x2c]
 805dc06: 9b07         	ldr	r3, [sp, #0x1c]
 805dc08: f8df c060    	ldr.w	r12, [pc, #0x60]        @ 0x805dc6c <xStreamBufferReceiveFromISR+0xe8>
 805dc0c: 47e0         	blx	r12
 805dc0e: 9008         	str	r0, [sp, #0x20]
;         if( xReceivedLength != ( size_t ) 0 )
 805dc10: 9808         	ldr	r0, [sp, #0x20]
 805dc12: b1f0         	cbz	r0, 0x805dc52 <xStreamBufferReceiveFromISR+0xce> @ imm = #0x3c
 805dc14: e7ff         	b	0x805dc16 <xStreamBufferReceiveFromISR+0x92> @ imm = #-0x2
;             prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 805dc16: e7ff         	b	0x805dc18 <xStreamBufferReceiveFromISR+0x94> @ imm = #-0x2
 805dc18: 4815         	ldr	r0, [pc, #0x54]         @ 0x805dc70 <xStreamBufferReceiveFromISR+0xec>
 805dc1a: 4780         	blx	r0
 805dc1c: 9005         	str	r0, [sp, #0x14]
 805dc1e: 9809         	ldr	r0, [sp, #0x24]
 805dc20: 6940         	ldr	r0, [r0, #0x14]
 805dc22: b188         	cbz	r0, 0x805dc48 <xStreamBufferReceiveFromISR+0xc4> @ imm = #0x22
 805dc24: e7ff         	b	0x805dc26 <xStreamBufferReceiveFromISR+0xa2> @ imm = #-0x2
 805dc26: 9809         	ldr	r0, [sp, #0x24]
 805dc28: 6940         	ldr	r0, [r0, #0x14]
 805dc2a: 9a0a         	ldr	r2, [sp, #0x28]
 805dc2c: 4669         	mov	r1, sp
 805dc2e: 604a         	str	r2, [r1, #0x4]
 805dc30: 2300         	movs	r3, #0x0
 805dc32: 9304         	str	r3, [sp, #0x10]
 805dc34: 600b         	str	r3, [r1]
 805dc36: f8df c03c    	ldr.w	r12, [pc, #0x3c]        @ 0x805dc74 <xStreamBufferReceiveFromISR+0xf0>
 805dc3a: 4619         	mov	r1, r3
 805dc3c: 461a         	mov	r2, r3
 805dc3e: 47e0         	blx	r12
 805dc40: 9804         	ldr	r0, [sp, #0x10]
 805dc42: 9909         	ldr	r1, [sp, #0x24]
 805dc44: 6148         	str	r0, [r1, #0x14]
 805dc46: e7ff         	b	0x805dc48 <xStreamBufferReceiveFromISR+0xc4> @ imm = #-0x2
 805dc48: 9805         	ldr	r0, [sp, #0x14]
 805dc4a: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805dc78 <xStreamBufferReceiveFromISR+0xf4>
 805dc4c: 4788         	blx	r1
 805dc4e: e7ff         	b	0x805dc50 <xStreamBufferReceiveFromISR+0xcc> @ imm = #-0x2
;         }
 805dc50: e000         	b	0x805dc54 <xStreamBufferReceiveFromISR+0xd0> @ imm = #0x0
 805dc52: e7ff         	b	0x805dc54 <xStreamBufferReceiveFromISR+0xd0> @ imm = #-0x2
;     }
 805dc54: e000         	b	0x805dc58 <xStreamBufferReceiveFromISR+0xd4> @ imm = #0x0
 805dc56: e7ff         	b	0x805dc58 <xStreamBufferReceiveFromISR+0xd4> @ imm = #-0x2
;     return xReceivedLength;
 805dc58: 9808         	ldr	r0, [sp, #0x20]
 805dc5a: 9003         	str	r0, [sp, #0xc]
 805dc5c: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805dc7c <xStreamBufferReceiveFromISR+0xf8>
 805dc5e: 4780         	blx	r0
 805dc60: 9803         	ldr	r0, [sp, #0xc]
 805dc62: b00e         	add	sp, #0x38
 805dc64: bdb0         	pop	{r4, r5, r7, pc}
 805dc66: bf00         	nop

0805dc68 <$d.31>:
 805dc68: 3d d3 05 08  	.word	0x0805d33d
 805dc6c: 1d d9 05 08  	.word	0x0805d91d
 805dc70: 55 ec 05 08  	.word	0x0805ec55
 805dc74: 55 87 05 08  	.word	0x08058755
 805dc78: 85 ec 05 08  	.word	0x0805ec85
 805dc7c: 21 05 06 08  	.word	0x08060521
 805dc80: 55 ec 05 08  	.word	0x0805ec55
 805dc84: 55 ec 05 08  	.word	0x0805ec55

0805dc88 <xStreamBufferIsEmpty>:
; {
 805dc88: b580         	push	{r7, lr}
 805dc8a: 466f         	mov	r7, sp
 805dc8c: b086         	sub	sp, #0x18
 805dc8e: f643 5240    	movw	r2, #0x3d40
 805dc92: f2c2 0200    	movt	r2, #0x2000
 805dc96: 6811         	ldr	r1, [r2]
 805dc98: f642 5340    	movw	r3, #0x2d40
 805dc9c: f2c2 0300    	movt	r3, #0x2000
 805dca0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805dca4: 3101         	adds	r1, #0x1
 805dca6: 6011         	str	r1, [r2]
 805dca8: 9005         	str	r0, [sp, #0x14]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805dcaa: 9805         	ldr	r0, [sp, #0x14]
 805dcac: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxStreamBuffer );
 805dcae: 9804         	ldr	r0, [sp, #0x10]
 805dcb0: b920         	cbnz	r0, 0x805dcbc <xStreamBufferIsEmpty+0x34> @ imm = #0x8
 805dcb2: e7ff         	b	0x805dcb4 <xStreamBufferIsEmpty+0x2c> @ imm = #-0x2
 805dcb4: 480d         	ldr	r0, [pc, #0x34]         @ 0x805dcec <xStreamBufferIsEmpty+0x64>
 805dcb6: 4780         	blx	r0
 805dcb8: e7ff         	b	0x805dcba <xStreamBufferIsEmpty+0x32> @ imm = #-0x2
 805dcba: e7fe         	b	0x805dcba <xStreamBufferIsEmpty+0x32> @ imm = #-0x4
;     xTail = pxStreamBuffer->xTail;
 805dcbc: 9804         	ldr	r0, [sp, #0x10]
 805dcbe: 6800         	ldr	r0, [r0]
 805dcc0: 9002         	str	r0, [sp, #0x8]
;     if( pxStreamBuffer->xHead == xTail )
 805dcc2: 9804         	ldr	r0, [sp, #0x10]
 805dcc4: 6840         	ldr	r0, [r0, #0x4]
 805dcc6: 9902         	ldr	r1, [sp, #0x8]
 805dcc8: 4288         	cmp	r0, r1
 805dcca: d103         	bne	0x805dcd4 <xStreamBufferIsEmpty+0x4c> @ imm = #0x6
 805dccc: e7ff         	b	0x805dcce <xStreamBufferIsEmpty+0x46> @ imm = #-0x2
 805dcce: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805dcd0: 9003         	str	r0, [sp, #0xc]
;     }
 805dcd2: e002         	b	0x805dcda <xStreamBufferIsEmpty+0x52> @ imm = #0x4
 805dcd4: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805dcd6: 9003         	str	r0, [sp, #0xc]
 805dcd8: e7ff         	b	0x805dcda <xStreamBufferIsEmpty+0x52> @ imm = #-0x2
;     return xReturn;
 805dcda: 9803         	ldr	r0, [sp, #0xc]
 805dcdc: 9001         	str	r0, [sp, #0x4]
 805dcde: 4802         	ldr	r0, [pc, #0x8]          @ 0x805dce8 <xStreamBufferIsEmpty+0x60>
 805dce0: 4780         	blx	r0
 805dce2: 9801         	ldr	r0, [sp, #0x4]
 805dce4: b006         	add	sp, #0x18
 805dce6: bd80         	pop	{r7, pc}

0805dce8 <$d.33>:
 805dce8: 21 05 06 08  	.word	0x08060521
 805dcec: 55 ec 05 08  	.word	0x0805ec55

0805dcf0 <xStreamBufferIsFull>:
; {
 805dcf0: b580         	push	{r7, lr}
 805dcf2: 466f         	mov	r7, sp
 805dcf4: b086         	sub	sp, #0x18
 805dcf6: f643 5240    	movw	r2, #0x3d40
 805dcfa: f2c2 0200    	movt	r2, #0x2000
 805dcfe: 6811         	ldr	r1, [r2]
 805dd00: f642 5340    	movw	r3, #0x2d40
 805dd04: f2c2 0300    	movt	r3, #0x2000
 805dd08: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805dd0c: 3101         	adds	r1, #0x1
 805dd0e: 6011         	str	r1, [r2]
 805dd10: 9005         	str	r0, [sp, #0x14]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805dd12: 9805         	ldr	r0, [sp, #0x14]
 805dd14: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805dd16: 9802         	ldr	r0, [sp, #0x8]
 805dd18: b920         	cbnz	r0, 0x805dd24 <xStreamBufferIsFull+0x34> @ imm = #0x8
 805dd1a: e7ff         	b	0x805dd1c <xStreamBufferIsFull+0x2c> @ imm = #-0x2
 805dd1c: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805dd6c <xStreamBufferIsFull+0x7c>
 805dd1e: 4780         	blx	r0
 805dd20: e7ff         	b	0x805dd22 <xStreamBufferIsFull+0x32> @ imm = #-0x2
 805dd22: e7fe         	b	0x805dd22 <xStreamBufferIsFull+0x32> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805dd24: 9802         	ldr	r0, [sp, #0x8]
 805dd26: 7f00         	ldrb	r0, [r0, #0x1c]
 805dd28: 07c0         	lsls	r0, r0, #0x1f
 805dd2a: b118         	cbz	r0, 0x805dd34 <xStreamBufferIsFull+0x44> @ imm = #0x6
 805dd2c: e7ff         	b	0x805dd2e <xStreamBufferIsFull+0x3e> @ imm = #-0x2
 805dd2e: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805dd30: 9003         	str	r0, [sp, #0xc]
;     }
 805dd32: e002         	b	0x805dd3a <xStreamBufferIsFull+0x4a> @ imm = #0x4
 805dd34: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805dd36: 9003         	str	r0, [sp, #0xc]
 805dd38: e7ff         	b	0x805dd3a <xStreamBufferIsFull+0x4a> @ imm = #-0x2
;     if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 805dd3a: 9805         	ldr	r0, [sp, #0x14]
 805dd3c: 4909         	ldr	r1, [pc, #0x24]         @ 0x805dd64 <xStreamBufferIsFull+0x74>
 805dd3e: 4788         	blx	r1
 805dd40: 9903         	ldr	r1, [sp, #0xc]
 805dd42: 4288         	cmp	r0, r1
 805dd44: d803         	bhi	0x805dd4e <xStreamBufferIsFull+0x5e> @ imm = #0x6
 805dd46: e7ff         	b	0x805dd48 <xStreamBufferIsFull+0x58> @ imm = #-0x2
 805dd48: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805dd4a: 9004         	str	r0, [sp, #0x10]
;     }
 805dd4c: e002         	b	0x805dd54 <xStreamBufferIsFull+0x64> @ imm = #0x4
 805dd4e: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805dd50: 9004         	str	r0, [sp, #0x10]
 805dd52: e7ff         	b	0x805dd54 <xStreamBufferIsFull+0x64> @ imm = #-0x2
;     return xReturn;
 805dd54: 9804         	ldr	r0, [sp, #0x10]
 805dd56: 9001         	str	r0, [sp, #0x4]
 805dd58: 4803         	ldr	r0, [pc, #0xc]          @ 0x805dd68 <xStreamBufferIsFull+0x78>
 805dd5a: 4780         	blx	r0
 805dd5c: 9801         	ldr	r0, [sp, #0x4]
 805dd5e: b006         	add	sp, #0x18
 805dd60: bd80         	pop	{r7, pc}
 805dd62: bf00         	nop

0805dd64 <$d.35>:
 805dd64: 51 d2 05 08  	.word	0x0805d251
 805dd68: 21 05 06 08  	.word	0x08060521
 805dd6c: 55 ec 05 08  	.word	0x0805ec55

0805dd70 <xStreamBufferSendCompletedFromISR>:
; {
 805dd70: b580         	push	{r7, lr}
 805dd72: 466f         	mov	r7, sp
 805dd74: b08a         	sub	sp, #0x28
 805dd76: f643 5340    	movw	r3, #0x3d40
 805dd7a: f2c2 0300    	movt	r3, #0x2000
 805dd7e: 681a         	ldr	r2, [r3]
 805dd80: f642 5c40    	movw	r12, #0x2d40
 805dd84: f2c2 0c00    	movt	r12, #0x2000
 805dd88: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805dd8c: 3201         	adds	r2, #0x1
 805dd8e: 601a         	str	r2, [r3]
 805dd90: 9009         	str	r0, [sp, #0x24]
 805dd92: 9108         	str	r1, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805dd94: 9809         	ldr	r0, [sp, #0x24]
 805dd96: 9007         	str	r0, [sp, #0x1c]
;     configASSERT( pxStreamBuffer );
 805dd98: 9807         	ldr	r0, [sp, #0x1c]
 805dd9a: b920         	cbnz	r0, 0x805dda6 <xStreamBufferSendCompletedFromISR+0x36> @ imm = #0x8
 805dd9c: e7ff         	b	0x805dd9e <xStreamBufferSendCompletedFromISR+0x2e> @ imm = #-0x2
 805dd9e: 4819         	ldr	r0, [pc, #0x64]         @ 0x805de04 <xStreamBufferSendCompletedFromISR+0x94>
 805dda0: 4780         	blx	r0
 805dda2: e7ff         	b	0x805dda4 <xStreamBufferSendCompletedFromISR+0x34> @ imm = #-0x2
 805dda4: e7fe         	b	0x805dda4 <xStreamBufferSendCompletedFromISR+0x34> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805dda6: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805ddf4 <xStreamBufferSendCompletedFromISR+0x84>
 805dda8: 4780         	blx	r0
 805ddaa: 9005         	str	r0, [sp, #0x14]
;         if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 805ddac: 9807         	ldr	r0, [sp, #0x1c]
 805ddae: 6900         	ldr	r0, [r0, #0x10]
 805ddb0: b198         	cbz	r0, 0x805ddda <xStreamBufferSendCompletedFromISR+0x6a> @ imm = #0x26
 805ddb2: e7ff         	b	0x805ddb4 <xStreamBufferSendCompletedFromISR+0x44> @ imm = #-0x2
;             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 805ddb4: 9807         	ldr	r0, [sp, #0x1c]
 805ddb6: 6900         	ldr	r0, [r0, #0x10]
 805ddb8: 9a08         	ldr	r2, [sp, #0x20]
 805ddba: 4669         	mov	r1, sp
 805ddbc: 604a         	str	r2, [r1, #0x4]
 805ddbe: 2300         	movs	r3, #0x0
 805ddc0: 9304         	str	r3, [sp, #0x10]
 805ddc2: 600b         	str	r3, [r1]
 805ddc4: f8df c030    	ldr.w	r12, [pc, #0x30]        @ 0x805ddf8 <xStreamBufferSendCompletedFromISR+0x88>
 805ddc8: 4619         	mov	r1, r3
 805ddca: 461a         	mov	r2, r3
 805ddcc: 47e0         	blx	r12
;             ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 805ddce: 9804         	ldr	r0, [sp, #0x10]
 805ddd0: 9907         	ldr	r1, [sp, #0x1c]
 805ddd2: 6108         	str	r0, [r1, #0x10]
 805ddd4: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805ddd6: 9006         	str	r0, [sp, #0x18]
;         }
 805ddd8: e002         	b	0x805dde0 <xStreamBufferSendCompletedFromISR+0x70> @ imm = #0x4
 805ddda: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805dddc: 9006         	str	r0, [sp, #0x18]
 805ddde: e7ff         	b	0x805dde0 <xStreamBufferSendCompletedFromISR+0x70> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805dde0: 9805         	ldr	r0, [sp, #0x14]
 805dde2: 4906         	ldr	r1, [pc, #0x18]         @ 0x805ddfc <xStreamBufferSendCompletedFromISR+0x8c>
 805dde4: 4788         	blx	r1
;     return xReturn;
 805dde6: 9806         	ldr	r0, [sp, #0x18]
 805dde8: 9003         	str	r0, [sp, #0xc]
 805ddea: 4805         	ldr	r0, [pc, #0x14]         @ 0x805de00 <xStreamBufferSendCompletedFromISR+0x90>
 805ddec: 4780         	blx	r0
 805ddee: 9803         	ldr	r0, [sp, #0xc]
 805ddf0: b00a         	add	sp, #0x28
 805ddf2: bd80         	pop	{r7, pc}

0805ddf4 <$d.37>:
 805ddf4: 55 ec 05 08  	.word	0x0805ec55
 805ddf8: 55 87 05 08  	.word	0x08058755
 805ddfc: 85 ec 05 08  	.word	0x0805ec85
 805de00: 21 05 06 08  	.word	0x08060521
 805de04: 55 ec 05 08  	.word	0x0805ec55

0805de08 <xStreamBufferReceiveCompletedFromISR>:
; {
 805de08: b580         	push	{r7, lr}
 805de0a: 466f         	mov	r7, sp
 805de0c: b08a         	sub	sp, #0x28
 805de0e: f643 5340    	movw	r3, #0x3d40
 805de12: f2c2 0300    	movt	r3, #0x2000
 805de16: 681a         	ldr	r2, [r3]
 805de18: f642 5c40    	movw	r12, #0x2d40
 805de1c: f2c2 0c00    	movt	r12, #0x2000
 805de20: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805de24: 3201         	adds	r2, #0x1
 805de26: 601a         	str	r2, [r3]
 805de28: 9009         	str	r0, [sp, #0x24]
 805de2a: 9108         	str	r1, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805de2c: 9809         	ldr	r0, [sp, #0x24]
 805de2e: 9007         	str	r0, [sp, #0x1c]
;     configASSERT( pxStreamBuffer );
 805de30: 9807         	ldr	r0, [sp, #0x1c]
 805de32: b920         	cbnz	r0, 0x805de3e <xStreamBufferReceiveCompletedFromISR+0x36> @ imm = #0x8
 805de34: e7ff         	b	0x805de36 <xStreamBufferReceiveCompletedFromISR+0x2e> @ imm = #-0x2
 805de36: 4819         	ldr	r0, [pc, #0x64]         @ 0x805de9c <xStreamBufferReceiveCompletedFromISR+0x94>
 805de38: 4780         	blx	r0
 805de3a: e7ff         	b	0x805de3c <xStreamBufferReceiveCompletedFromISR+0x34> @ imm = #-0x2
 805de3c: e7fe         	b	0x805de3c <xStreamBufferReceiveCompletedFromISR+0x34> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805de3e: 4813         	ldr	r0, [pc, #0x4c]         @ 0x805de8c <xStreamBufferReceiveCompletedFromISR+0x84>
 805de40: 4780         	blx	r0
 805de42: 9005         	str	r0, [sp, #0x14]
;         if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 805de44: 9807         	ldr	r0, [sp, #0x1c]
 805de46: 6940         	ldr	r0, [r0, #0x14]
 805de48: b198         	cbz	r0, 0x805de72 <xStreamBufferReceiveCompletedFromISR+0x6a> @ imm = #0x26
 805de4a: e7ff         	b	0x805de4c <xStreamBufferReceiveCompletedFromISR+0x44> @ imm = #-0x2
;             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 805de4c: 9807         	ldr	r0, [sp, #0x1c]
 805de4e: 6940         	ldr	r0, [r0, #0x14]
 805de50: 9a08         	ldr	r2, [sp, #0x20]
 805de52: 4669         	mov	r1, sp
 805de54: 604a         	str	r2, [r1, #0x4]
 805de56: 2300         	movs	r3, #0x0
 805de58: 9304         	str	r3, [sp, #0x10]
 805de5a: 600b         	str	r3, [r1]
 805de5c: f8df c030    	ldr.w	r12, [pc, #0x30]        @ 0x805de90 <xStreamBufferReceiveCompletedFromISR+0x88>
 805de60: 4619         	mov	r1, r3
 805de62: 461a         	mov	r2, r3
 805de64: 47e0         	blx	r12
;             ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 805de66: 9804         	ldr	r0, [sp, #0x10]
 805de68: 9907         	ldr	r1, [sp, #0x1c]
 805de6a: 6148         	str	r0, [r1, #0x14]
 805de6c: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805de6e: 9006         	str	r0, [sp, #0x18]
;         }
 805de70: e002         	b	0x805de78 <xStreamBufferReceiveCompletedFromISR+0x70> @ imm = #0x4
 805de72: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805de74: 9006         	str	r0, [sp, #0x18]
 805de76: e7ff         	b	0x805de78 <xStreamBufferReceiveCompletedFromISR+0x70> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805de78: 9805         	ldr	r0, [sp, #0x14]
 805de7a: 4906         	ldr	r1, [pc, #0x18]         @ 0x805de94 <xStreamBufferReceiveCompletedFromISR+0x8c>
 805de7c: 4788         	blx	r1
;     return xReturn;
 805de7e: 9806         	ldr	r0, [sp, #0x18]
 805de80: 9003         	str	r0, [sp, #0xc]
 805de82: 4805         	ldr	r0, [pc, #0x14]         @ 0x805de98 <xStreamBufferReceiveCompletedFromISR+0x90>
 805de84: 4780         	blx	r0
 805de86: 9803         	ldr	r0, [sp, #0xc]
 805de88: b00a         	add	sp, #0x28
 805de8a: bd80         	pop	{r7, pc}

0805de8c <$d.39>:
 805de8c: 55 ec 05 08  	.word	0x0805ec55
 805de90: 55 87 05 08  	.word	0x08058755
 805de94: 85 ec 05 08  	.word	0x0805ec85
 805de98: 21 05 06 08  	.word	0x08060521
 805de9c: 55 ec 05 08  	.word	0x0805ec55

0805dea0 <uxStreamBufferGetStreamBufferNumber>:
;     {
 805dea0: b580         	push	{r7, lr}
 805dea2: 466f         	mov	r7, sp
 805dea4: b082         	sub	sp, #0x8
 805dea6: f643 5240    	movw	r2, #0x3d40
 805deaa: f2c2 0200    	movt	r2, #0x2000
 805deae: 6811         	ldr	r1, [r2]
 805deb0: f642 5340    	movw	r3, #0x2d40
 805deb4: f2c2 0300    	movt	r3, #0x2000
 805deb8: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805debc: 3101         	adds	r1, #0x1
 805debe: 6011         	str	r1, [r2]
 805dec0: 9001         	str	r0, [sp, #0x4]
;         return xStreamBuffer->uxStreamBufferNumber;
 805dec2: 9801         	ldr	r0, [sp, #0x4]
 805dec4: 6a00         	ldr	r0, [r0, #0x20]
 805dec6: 9000         	str	r0, [sp]
 805dec8: 4802         	ldr	r0, [pc, #0x8]          @ 0x805ded4 <uxStreamBufferGetStreamBufferNumber+0x34>
 805deca: 4780         	blx	r0
 805decc: 9800         	ldr	r0, [sp]
 805dece: b002         	add	sp, #0x8
 805ded0: bd80         	pop	{r7, pc}
 805ded2: bf00         	nop

0805ded4 <$d.41>:
 805ded4: 21 05 06 08  	.word	0x08060521

0805ded8 <vStreamBufferSetStreamBufferNumber>:
;     {
 805ded8: b580         	push	{r7, lr}
 805deda: 466f         	mov	r7, sp
 805dedc: b082         	sub	sp, #0x8
 805dede: f643 5340    	movw	r3, #0x3d40
 805dee2: f2c2 0300    	movt	r3, #0x2000
 805dee6: 681a         	ldr	r2, [r3]
 805dee8: f642 5c40    	movw	r12, #0x2d40
 805deec: f2c2 0c00    	movt	r12, #0x2000
 805def0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805def4: 3201         	adds	r2, #0x1
 805def6: 601a         	str	r2, [r3]
 805def8: 9001         	str	r0, [sp, #0x4]
 805defa: 9100         	str	r1, [sp]
;         xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 805defc: 9800         	ldr	r0, [sp]
 805defe: 9901         	ldr	r1, [sp, #0x4]
 805df00: 6208         	str	r0, [r1, #0x20]
;     }
 805df02: 4802         	ldr	r0, [pc, #0x8]          @ 0x805df0c <vStreamBufferSetStreamBufferNumber+0x34>
 805df04: 4780         	blx	r0
 805df06: b002         	add	sp, #0x8
 805df08: bd80         	pop	{r7, pc}
 805df0a: bf00         	nop

0805df0c <$d.43>:
 805df0c: 21 05 06 08  	.word	0x08060521

0805df10 <ucStreamBufferGetStreamBufferType>:
;     {
 805df10: b580         	push	{r7, lr}
 805df12: 466f         	mov	r7, sp
 805df14: b082         	sub	sp, #0x8
 805df16: f643 5240    	movw	r2, #0x3d40
 805df1a: f2c2 0200    	movt	r2, #0x2000
 805df1e: 6811         	ldr	r1, [r2]
 805df20: f642 5340    	movw	r3, #0x2d40
 805df24: f2c2 0300    	movt	r3, #0x2000
 805df28: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805df2c: 3101         	adds	r1, #0x1
 805df2e: 6011         	str	r1, [r2]
 805df30: 9001         	str	r0, [sp, #0x4]
;         return( ( uint8_t ) ( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) );
 805df32: 9801         	ldr	r0, [sp, #0x4]
 805df34: 7f00         	ldrb	r0, [r0, #0x1c]
 805df36: f000 0001    	and	r0, r0, #0x1
 805df3a: 9000         	str	r0, [sp]
 805df3c: 4802         	ldr	r0, [pc, #0x8]          @ 0x805df48 <ucStreamBufferGetStreamBufferType+0x38>
 805df3e: 4780         	blx	r0
 805df40: 9800         	ldr	r0, [sp]
 805df42: b002         	add	sp, #0x8
 805df44: bd80         	pop	{r7, pc}
 805df46: bf00         	nop

0805df48 <$d.45>:
 805df48: 21 05 06 08  	.word	0x08060521

0805df4c <prvWriteBytesToBuffer>:
; {
 805df4c: b5b0         	push	{r4, r5, r7, lr}
 805df4e: af02         	add	r7, sp, #0x8
 805df50: b088         	sub	sp, #0x20
 805df52: 4674         	mov	r4, lr
 805df54: f643 5e40    	movw	lr, #0x3d40
 805df58: f2c2 0e00    	movt	lr, #0x2000
 805df5c: f8de c000    	ldr.w	r12, [lr]
 805df60: f642 5540    	movw	r5, #0x2d40
 805df64: f2c2 0500    	movt	r5, #0x2000
 805df68: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805df6c: f10c 0c01    	add.w	r12, r12, #0x1
 805df70: f8ce c000    	str.w	r12, [lr]
 805df74: 9007         	str	r0, [sp, #0x1c]
 805df76: 9106         	str	r1, [sp, #0x18]
 805df78: 9205         	str	r2, [sp, #0x14]
 805df7a: 9304         	str	r3, [sp, #0x10]
;     configASSERT( xCount > ( size_t ) 0 );
 805df7c: 9805         	ldr	r0, [sp, #0x14]
 805df7e: b920         	cbnz	r0, 0x805df8a <prvWriteBytesToBuffer+0x3e> @ imm = #0x8
 805df80: e7ff         	b	0x805df82 <prvWriteBytesToBuffer+0x36> @ imm = #-0x2
 805df82: 4834         	ldr	r0, [pc, #0xd0]         @ 0x805e054 <prvWriteBytesToBuffer+0x108>
 805df84: 4780         	blx	r0
 805df86: e7ff         	b	0x805df88 <prvWriteBytesToBuffer+0x3c> @ imm = #-0x2
 805df88: e7fe         	b	0x805df88 <prvWriteBytesToBuffer+0x3c> @ imm = #-0x4
;     xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 805df8a: 9807         	ldr	r0, [sp, #0x1c]
 805df8c: 6880         	ldr	r0, [r0, #0x8]
 805df8e: 9904         	ldr	r1, [sp, #0x10]
 805df90: 1a40         	subs	r0, r0, r1
 805df92: 9905         	ldr	r1, [sp, #0x14]
 805df94: 4288         	cmp	r0, r1
 805df96: d206         	bhs	0x805dfa6 <prvWriteBytesToBuffer+0x5a> @ imm = #0xc
 805df98: e7ff         	b	0x805df9a <prvWriteBytesToBuffer+0x4e> @ imm = #-0x2
 805df9a: 9807         	ldr	r0, [sp, #0x1c]
 805df9c: 6880         	ldr	r0, [r0, #0x8]
 805df9e: 9904         	ldr	r1, [sp, #0x10]
 805dfa0: 1a40         	subs	r0, r0, r1
 805dfa2: 9002         	str	r0, [sp, #0x8]
 805dfa4: e002         	b	0x805dfac <prvWriteBytesToBuffer+0x60> @ imm = #0x4
 805dfa6: 9805         	ldr	r0, [sp, #0x14]
 805dfa8: 9002         	str	r0, [sp, #0x8]
 805dfaa: e7ff         	b	0x805dfac <prvWriteBytesToBuffer+0x60> @ imm = #-0x2
 805dfac: 9802         	ldr	r0, [sp, #0x8]
 805dfae: 9003         	str	r0, [sp, #0xc]
;     configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 805dfb0: 9804         	ldr	r0, [sp, #0x10]
 805dfb2: 9903         	ldr	r1, [sp, #0xc]
 805dfb4: 4408         	add	r0, r1
 805dfb6: 9907         	ldr	r1, [sp, #0x1c]
 805dfb8: 6889         	ldr	r1, [r1, #0x8]
 805dfba: 4288         	cmp	r0, r1
 805dfbc: d904         	bls	0x805dfc8 <prvWriteBytesToBuffer+0x7c> @ imm = #0x8
 805dfbe: e7ff         	b	0x805dfc0 <prvWriteBytesToBuffer+0x74> @ imm = #-0x2
 805dfc0: 4823         	ldr	r0, [pc, #0x8c]         @ 0x805e050 <prvWriteBytesToBuffer+0x104>
 805dfc2: 4780         	blx	r0
 805dfc4: e7ff         	b	0x805dfc6 <prvWriteBytesToBuffer+0x7a> @ imm = #-0x2
 805dfc6: e7fe         	b	0x805dfc6 <prvWriteBytesToBuffer+0x7a> @ imm = #-0x4
;     ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805dfc8: 9807         	ldr	r0, [sp, #0x1c]
 805dfca: 6980         	ldr	r0, [r0, #0x18]
 805dfcc: 9904         	ldr	r1, [sp, #0x10]
 805dfce: 4408         	add	r0, r1
 805dfd0: 9906         	ldr	r1, [sp, #0x18]
 805dfd2: 9a03         	ldr	r2, [sp, #0xc]
 805dfd4: 4b1a         	ldr	r3, [pc, #0x68]         @ 0x805e040 <prvWriteBytesToBuffer+0xf4>
 805dfd6: 4798         	blx	r3
;     if( xCount > xFirstLength )
 805dfd8: 9805         	ldr	r0, [sp, #0x14]
 805dfda: 9903         	ldr	r1, [sp, #0xc]
 805dfdc: 4288         	cmp	r0, r1
 805dfde: d916         	bls	0x805e00e <prvWriteBytesToBuffer+0xc2> @ imm = #0x2c
 805dfe0: e7ff         	b	0x805dfe2 <prvWriteBytesToBuffer+0x96> @ imm = #-0x2
;         configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 805dfe2: 9805         	ldr	r0, [sp, #0x14]
 805dfe4: 9903         	ldr	r1, [sp, #0xc]
 805dfe6: 1a40         	subs	r0, r0, r1
 805dfe8: 9907         	ldr	r1, [sp, #0x1c]
 805dfea: 6889         	ldr	r1, [r1, #0x8]
 805dfec: 4288         	cmp	r0, r1
 805dfee: d904         	bls	0x805dffa <prvWriteBytesToBuffer+0xae> @ imm = #0x8
 805dff0: e7ff         	b	0x805dff2 <prvWriteBytesToBuffer+0xa6> @ imm = #-0x2
 805dff2: 4816         	ldr	r0, [pc, #0x58]         @ 0x805e04c <prvWriteBytesToBuffer+0x100>
 805dff4: 4780         	blx	r0
 805dff6: e7ff         	b	0x805dff8 <prvWriteBytesToBuffer+0xac> @ imm = #-0x2
 805dff8: e7fe         	b	0x805dff8 <prvWriteBytesToBuffer+0xac> @ imm = #-0x4
;         ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805dffa: 9807         	ldr	r0, [sp, #0x1c]
 805dffc: 6980         	ldr	r0, [r0, #0x18]
 805dffe: 9906         	ldr	r1, [sp, #0x18]
 805e000: 9b03         	ldr	r3, [sp, #0xc]
 805e002: 4419         	add	r1, r3
 805e004: 9a05         	ldr	r2, [sp, #0x14]
 805e006: 1ad2         	subs	r2, r2, r3
 805e008: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x805e044 <prvWriteBytesToBuffer+0xf8>
 805e00a: 4798         	blx	r3
;     }
 805e00c: e000         	b	0x805e010 <prvWriteBytesToBuffer+0xc4> @ imm = #0x0
 805e00e: e7ff         	b	0x805e010 <prvWriteBytesToBuffer+0xc4> @ imm = #-0x2
;     xHead += xCount;
 805e010: 9905         	ldr	r1, [sp, #0x14]
 805e012: 9804         	ldr	r0, [sp, #0x10]
 805e014: 4408         	add	r0, r1
 805e016: 9004         	str	r0, [sp, #0x10]
;     if( xHead >= pxStreamBuffer->xLength )
 805e018: 9804         	ldr	r0, [sp, #0x10]
 805e01a: 9907         	ldr	r1, [sp, #0x1c]
 805e01c: 6889         	ldr	r1, [r1, #0x8]
 805e01e: 4288         	cmp	r0, r1
 805e020: d306         	blo	0x805e030 <prvWriteBytesToBuffer+0xe4> @ imm = #0xc
 805e022: e7ff         	b	0x805e024 <prvWriteBytesToBuffer+0xd8> @ imm = #-0x2
;         xHead -= pxStreamBuffer->xLength;
 805e024: 9807         	ldr	r0, [sp, #0x1c]
 805e026: 6881         	ldr	r1, [r0, #0x8]
 805e028: 9804         	ldr	r0, [sp, #0x10]
 805e02a: 1a40         	subs	r0, r0, r1
 805e02c: 9004         	str	r0, [sp, #0x10]
;     }
 805e02e: e000         	b	0x805e032 <prvWriteBytesToBuffer+0xe6> @ imm = #0x0
 805e030: e7ff         	b	0x805e032 <prvWriteBytesToBuffer+0xe6> @ imm = #-0x2
;     return xHead;
 805e032: 9804         	ldr	r0, [sp, #0x10]
 805e034: 9001         	str	r0, [sp, #0x4]
 805e036: 4804         	ldr	r0, [pc, #0x10]         @ 0x805e048 <prvWriteBytesToBuffer+0xfc>
 805e038: 4780         	blx	r0
 805e03a: 9801         	ldr	r0, [sp, #0x4]
 805e03c: b008         	add	sp, #0x20
 805e03e: bdb0         	pop	{r4, r5, r7, pc}

0805e040 <$d.47>:
 805e040: 89 22 06 08  	.word	0x08062289
 805e044: 89 22 06 08  	.word	0x08062289
 805e048: 21 05 06 08  	.word	0x08060521
 805e04c: 55 ec 05 08  	.word	0x0805ec55
 805e050: 55 ec 05 08  	.word	0x0805ec55
 805e054: 55 ec 05 08  	.word	0x0805ec55

0805e058 <vPortSetupTimerInterrupt>:
; {
 805e058: b580         	push	{r7, lr}
 805e05a: 466f         	mov	r7, sp
;     portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 805e05c: f643 5140    	movw	r1, #0x3d40
 805e060: f2c2 0100    	movt	r1, #0x2000
 805e064: 6808         	ldr	r0, [r1]
 805e066: f642 5240    	movw	r2, #0x2d40
 805e06a: f2c2 0200    	movt	r2, #0x2000
 805e06e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e072: 3001         	adds	r0, #0x1
 805e074: 6008         	str	r0, [r1]
 805e076: f24e 0110    	movw	r1, #0xe010
 805e07a: f2ce 0100    	movt	r1, #0xe000
 805e07e: 2004         	movs	r0, #0x4
 805e080: 6008         	str	r0, [r1]
 805e082: f24e 0218    	movw	r2, #0xe018
 805e086: f2ce 0200    	movt	r2, #0xe000
 805e08a: 2000         	movs	r0, #0x0
;     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 805e08c: 6010         	str	r0, [r2]
;     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 805e08e: f242 3088    	movw	r0, #0x2388
 805e092: f2c2 0000    	movt	r0, #0x2000
 805e096: 6800         	ldr	r0, [r0]
 805e098: f644 52d3    	movw	r2, #0x4dd3
 805e09c: f2c1 0262    	movt	r2, #0x1062
 805e0a0: fba0 0202    	umull	r0, r2, r0, r2
 805e0a4: f04f 30ff    	mov.w	r0, #0xffffffff
 805e0a8: eb00 1092    	add.w	r0, r0, r2, lsr #6
 805e0ac: f24e 0214    	movw	r2, #0xe014
 805e0b0: f2ce 0200    	movt	r2, #0xe000
 805e0b4: 6010         	str	r0, [r2]
 805e0b6: 2007         	movs	r0, #0x7
;     portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 805e0b8: 6008         	str	r0, [r1]
; }
 805e0ba: 4801         	ldr	r0, [pc, #0x4]          @ 0x805e0c0 <vPortSetupTimerInterrupt+0x68>
 805e0bc: 4780         	blx	r0
 805e0be: bd80         	pop	{r7, pc}

0805e0c0 <$d.1>:
 805e0c0: 21 05 06 08  	.word	0x08060521

0805e0c4 <vPortYield>:
; {
 805e0c4: b580         	push	{r7, lr}
 805e0c6: 466f         	mov	r7, sp
;     portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 805e0c8: f643 5140    	movw	r1, #0x3d40
 805e0cc: f2c2 0100    	movt	r1, #0x2000
 805e0d0: 6808         	ldr	r0, [r1]
 805e0d2: f642 5240    	movw	r2, #0x2d40
 805e0d6: f2c2 0200    	movt	r2, #0x2000
 805e0da: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e0de: 3001         	adds	r0, #0x1
 805e0e0: 6008         	str	r0, [r1]
 805e0e2: f64e 5104    	movw	r1, #0xed04
 805e0e6: f2ce 0100    	movt	r1, #0xe000
 805e0ea: f04f 5080    	mov.w	r0, #0x10000000
 805e0ee: 6008         	str	r0, [r1]
;     __asm volatile ( "dsb" ::: "memory" );
 805e0f0: f3bf 8f4f    	dsb	sy
;     __asm volatile ( "isb" );
 805e0f4: f3bf 8f6f    	isb	sy
; }
 805e0f8: 4801         	ldr	r0, [pc, #0x4]          @ 0x805e100 <vPortYield+0x3c>
 805e0fa: 4780         	blx	r0
 805e0fc: bd80         	pop	{r7, pc}
 805e0fe: bf00         	nop

0805e100 <$d.3>:
 805e100: 21 05 06 08  	.word	0x08060521

0805e104 <vPortEnterCritical>:
; {
 805e104: b580         	push	{r7, lr}
 805e106: 466f         	mov	r7, sp
;     portDISABLE_INTERRUPTS();
 805e108: f643 5140    	movw	r1, #0x3d40
 805e10c: f2c2 0100    	movt	r1, #0x2000
 805e110: 6808         	ldr	r0, [r1]
 805e112: f642 5240    	movw	r2, #0x2d40
 805e116: f2c2 0200    	movt	r2, #0x2000
 805e11a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e11e: 3001         	adds	r0, #0x1
 805e120: 6008         	str	r0, [r1]
 805e122: 4808         	ldr	r0, [pc, #0x20]         @ 0x805e144 <vPortEnterCritical+0x40>
 805e124: 4780         	blx	r0
;     ulCriticalNesting++;
 805e126: f242 3178    	movw	r1, #0x2378
 805e12a: f2c2 0100    	movt	r1, #0x2000
 805e12e: 6808         	ldr	r0, [r1]
 805e130: 3001         	adds	r0, #0x1
 805e132: 6008         	str	r0, [r1]
;     __asm volatile ( "dsb" ::: "memory" );
 805e134: f3bf 8f4f    	dsb	sy
;     __asm volatile ( "isb" );
 805e138: f3bf 8f6f    	isb	sy
; }
 805e13c: 4802         	ldr	r0, [pc, #0x8]          @ 0x805e148 <vPortEnterCritical+0x44>
 805e13e: 4780         	blx	r0
 805e140: bd80         	pop	{r7, pc}
 805e142: bf00         	nop

0805e144 <$d.5>:
 805e144: 55 ec 05 08  	.word	0x0805ec55
 805e148: 21 05 06 08  	.word	0x08060521

0805e14c <vPortExitCritical>:
; {
 805e14c: b580         	push	{r7, lr}
 805e14e: 466f         	mov	r7, sp
;     configASSERT( ulCriticalNesting );
 805e150: f643 5140    	movw	r1, #0x3d40
 805e154: f2c2 0100    	movt	r1, #0x2000
 805e158: 6808         	ldr	r0, [r1]
 805e15a: f642 5240    	movw	r2, #0x2d40
 805e15e: f2c2 0200    	movt	r2, #0x2000
 805e162: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e166: 3001         	adds	r0, #0x1
 805e168: 6008         	str	r0, [r1]
 805e16a: f242 3078    	movw	r0, #0x2378
 805e16e: f2c2 0000    	movt	r0, #0x2000
 805e172: 6800         	ldr	r0, [r0]
 805e174: b920         	cbnz	r0, 0x805e180 <vPortExitCritical+0x34> @ imm = #0x8
 805e176: e7ff         	b	0x805e178 <vPortExitCritical+0x2c> @ imm = #-0x2
 805e178: 480c         	ldr	r0, [pc, #0x30]         @ 0x805e1ac <vPortExitCritical+0x60>
 805e17a: 4780         	blx	r0
 805e17c: e7ff         	b	0x805e17e <vPortExitCritical+0x32> @ imm = #-0x2
 805e17e: e7fe         	b	0x805e17e <vPortExitCritical+0x32> @ imm = #-0x4
;     ulCriticalNesting--;
 805e180: f242 3078    	movw	r0, #0x2378
 805e184: f2c2 0000    	movt	r0, #0x2000
 805e188: 6801         	ldr	r1, [r0]
 805e18a: 3901         	subs	r1, #0x1
 805e18c: 6001         	str	r1, [r0]
;     if( ulCriticalNesting == 0 )
 805e18e: 6800         	ldr	r0, [r0]
 805e190: b920         	cbnz	r0, 0x805e19c <vPortExitCritical+0x50> @ imm = #0x8
 805e192: e7ff         	b	0x805e194 <vPortExitCritical+0x48> @ imm = #-0x2
;         portENABLE_INTERRUPTS();
 805e194: 4903         	ldr	r1, [pc, #0xc]          @ 0x805e1a4 <vPortExitCritical+0x58>
 805e196: 2000         	movs	r0, #0x0
 805e198: 4788         	blx	r1
;     }
 805e19a: e7ff         	b	0x805e19c <vPortExitCritical+0x50> @ imm = #-0x2
; }
 805e19c: 4802         	ldr	r0, [pc, #0x8]          @ 0x805e1a8 <vPortExitCritical+0x5c>
 805e19e: 4780         	blx	r0
 805e1a0: bd80         	pop	{r7, pc}
 805e1a2: bf00         	nop

0805e1a4 <$d.7>:
 805e1a4: 85 ec 05 08  	.word	0x0805ec85
 805e1a8: 21 05 06 08  	.word	0x08060521
 805e1ac: 55 ec 05 08  	.word	0x0805ec55

0805e1b0 <SysTick_Handler>:
; {
 805e1b0: b580         	push	{r7, lr}
 805e1b2: 466f         	mov	r7, sp
 805e1b4: b082         	sub	sp, #0x8
 805e1b6: f643 5140    	movw	r1, #0x3d40
 805e1ba: f2c2 0100    	movt	r1, #0x2000
 805e1be: 6808         	ldr	r0, [r1]
 805e1c0: f642 5240    	movw	r2, #0x2d40
 805e1c4: f2c2 0200    	movt	r2, #0x2000
 805e1c8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e1cc: 3001         	adds	r0, #0x1
 805e1ce: 6008         	str	r0, [r1]
;     ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 805e1d0: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805e200 <SysTick_Handler+0x50>
 805e1d2: 4780         	blx	r0
 805e1d4: 9001         	str	r0, [sp, #0x4]
;         if( xTaskIncrementTick() != pdFALSE )
 805e1d6: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805e204 <SysTick_Handler+0x54>
 805e1d8: 4780         	blx	r0
 805e1da: b140         	cbz	r0, 0x805e1ee <SysTick_Handler+0x3e> @ imm = #0x10
 805e1dc: e7ff         	b	0x805e1de <SysTick_Handler+0x2e> @ imm = #-0x2
 805e1de: f64e 5104    	movw	r1, #0xed04
 805e1e2: f2ce 0100    	movt	r1, #0xe000
 805e1e6: f04f 5080    	mov.w	r0, #0x10000000
;             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 805e1ea: 6008         	str	r0, [r1]
;         }
 805e1ec: e000         	b	0x805e1f0 <SysTick_Handler+0x40> @ imm = #0x0
 805e1ee: e7ff         	b	0x805e1f0 <SysTick_Handler+0x40> @ imm = #-0x2
;     portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 805e1f0: 9801         	ldr	r0, [sp, #0x4]
 805e1f2: 4905         	ldr	r1, [pc, #0x14]         @ 0x805e208 <SysTick_Handler+0x58>
 805e1f4: 4788         	blx	r1
; }
 805e1f6: 4805         	ldr	r0, [pc, #0x14]         @ 0x805e20c <SysTick_Handler+0x5c>
 805e1f8: 4780         	blx	r0
 805e1fa: b002         	add	sp, #0x8
 805e1fc: bd80         	pop	{r7, pc}
 805e1fe: bf00         	nop

0805e200 <$d.9>:
 805e200: 55 ec 05 08  	.word	0x0805ec55
 805e204: 6d 6a 05 08  	.word	0x08056a6d
 805e208: 85 ec 05 08  	.word	0x0805ec85
 805e20c: 21 05 06 08  	.word	0x08060521

0805e210 <vPortSVCHandler_C>:
; {
 805e210: b580         	push	{r7, lr}
 805e212: 466f         	mov	r7, sp
 805e214: b084         	sub	sp, #0x10
 805e216: f643 5240    	movw	r2, #0x3d40
 805e21a: f2c2 0200    	movt	r2, #0x2000
 805e21e: 6811         	ldr	r1, [r2]
 805e220: f642 5340    	movw	r3, #0x2d40
 805e224: f2c2 0300    	movt	r3, #0x2000
 805e228: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805e22c: 3101         	adds	r1, #0x1
 805e22e: 6011         	str	r1, [r2]
 805e230: 9003         	str	r0, [sp, #0xc]
;     ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 805e232: 9803         	ldr	r0, [sp, #0xc]
 805e234: 6980         	ldr	r0, [r0, #0x18]
 805e236: 9002         	str	r0, [sp, #0x8]
;     ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 805e238: 9802         	ldr	r0, [sp, #0x8]
 805e23a: f810 0c02    	ldrb	r0, [r0, #-2]
 805e23e: f807 0c09    	strb	r0, [r7, #-9]
;     switch( ucSVCNumber )
 805e242: f817 0c09    	ldrb	r0, [r7, #-9]
 805e246: 4601         	mov	r1, r0
 805e248: 9100         	str	r1, [sp]
 805e24a: 2802         	cmp	r0, #0x2
 805e24c: d008         	beq	0x805e260 <vPortSVCHandler_C+0x50> @ imm = #0x10
 805e24e: e7ff         	b	0x805e250 <vPortSVCHandler_C+0x40> @ imm = #-0x2
 805e250: 9800         	ldr	r0, [sp]
 805e252: 2803         	cmp	r0, #0x3
 805e254: d007         	beq	0x805e266 <vPortSVCHandler_C+0x56> @ imm = #0xe
 805e256: e7ff         	b	0x805e258 <vPortSVCHandler_C+0x48> @ imm = #-0x2
 805e258: 9800         	ldr	r0, [sp]
 805e25a: 2807         	cmp	r0, #0x7
 805e25c: d017         	beq	0x805e28e <vPortSVCHandler_C+0x7e> @ imm = #0x2e
 805e25e: e019         	b	0x805e294 <vPortSVCHandler_C+0x84> @ imm = #0x32
;             vRestoreContextOfFirstTask();
 805e260: 4812         	ldr	r0, [pc, #0x48]         @ 0x805e2ac <vPortSVCHandler_C+0x9c>
 805e262: 4780         	blx	r0
;             break;
 805e264: e01a         	b	0x805e29c <vPortSVCHandler_C+0x8c> @ imm = #0x34
;                     if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 805e266: 9802         	ldr	r0, [sp, #0x8]
 805e268: f64e 51c0    	movw	r1, #0xedc0
 805e26c: f6c0 0105    	movt	r1, #0x805
 805e270: 4288         	cmp	r0, r1
 805e272: d30b         	blo	0x805e28c <vPortSVCHandler_C+0x7c> @ imm = #0x16
 805e274: e7ff         	b	0x805e276 <vPortSVCHandler_C+0x66> @ imm = #-0x2
;                         ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 805e276: 9802         	ldr	r0, [sp, #0x8]
 805e278: f240 511f    	movw	r1, #0x51f
 805e27c: f6c0 0106    	movt	r1, #0x806
;                     if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 805e280: 4288         	cmp	r0, r1
 805e282: d803         	bhi	0x805e28c <vPortSVCHandler_C+0x7c> @ imm = #0x6
 805e284: e7ff         	b	0x805e286 <vPortSVCHandler_C+0x76> @ imm = #-0x2
;                         vRaisePrivilege();
 805e286: 4808         	ldr	r0, [pc, #0x20]         @ 0x805e2a8 <vPortSVCHandler_C+0x98>
 805e288: 4780         	blx	r0
;                     }
 805e28a: e7ff         	b	0x805e28c <vPortSVCHandler_C+0x7c> @ imm = #-0x2
;                     break;
 805e28c: e006         	b	0x805e29c <vPortSVCHandler_C+0x8c> @ imm = #0xc
;                     vPortYield();
 805e28e: 4805         	ldr	r0, [pc, #0x14]         @ 0x805e2a4 <vPortSVCHandler_C+0x94>
 805e290: 4780         	blx	r0
;                     break;
 805e292: e003         	b	0x805e29c <vPortSVCHandler_C+0x8c> @ imm = #0x6
;             configASSERT( pdFALSE );
 805e294: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805e2b4 <vPortSVCHandler_C+0xa4>
 805e296: 4780         	blx	r0
 805e298: e7ff         	b	0x805e29a <vPortSVCHandler_C+0x8a> @ imm = #-0x2
 805e29a: e7fe         	b	0x805e29a <vPortSVCHandler_C+0x8a> @ imm = #-0x4
; }
 805e29c: 4804         	ldr	r0, [pc, #0x10]         @ 0x805e2b0 <vPortSVCHandler_C+0xa0>
 805e29e: 4780         	blx	r0
 805e2a0: b004         	add	sp, #0x10
 805e2a2: bd80         	pop	{r7, pc}

0805e2a4 <$d.11>:
 805e2a4: c5 e0 05 08  	.word	0x0805e0c5
 805e2a8: f5 eb 05 08  	.word	0x0805ebf5
 805e2ac: 51 eb 05 08  	.word	0x0805eb51
 805e2b0: 21 05 06 08  	.word	0x08060521
 805e2b4: 55 ec 05 08  	.word	0x0805ec55

0805e2b8 <xPortIsTaskPrivileged>:
;     {
 805e2b8: b580         	push	{r7, lr}
 805e2ba: 466f         	mov	r7, sp
 805e2bc: b084         	sub	sp, #0x10
 805e2be: f643 5140    	movw	r1, #0x3d40
 805e2c2: f2c2 0100    	movt	r1, #0x2000
 805e2c6: 6808         	ldr	r0, [r1]
 805e2c8: f642 5240    	movw	r2, #0x2d40
 805e2cc: f2c2 0200    	movt	r2, #0x2000
 805e2d0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e2d4: 3001         	adds	r0, #0x1
 805e2d6: 6008         	str	r0, [r1]
 805e2d8: 2000         	movs	r0, #0x0
;         BaseType_t xTaskIsPrivileged = pdFALSE;
 805e2da: 9003         	str	r0, [sp, #0xc]
;         const xMPU_SETTINGS * xTaskMpuSettings = xTaskGetMPUSettings( NULL ); /* Calling task's MPU settings. */
 805e2dc: 4909         	ldr	r1, [pc, #0x24]         @ 0x805e304 <xPortIsTaskPrivileged+0x4c>
 805e2de: 4788         	blx	r1
 805e2e0: 9002         	str	r0, [sp, #0x8]
;         if( ( xTaskMpuSettings->ulTaskFlags & portTASK_IS_PRIVILEGED_FLAG ) == portTASK_IS_PRIVILEGED_FLAG )
 805e2e2: 9802         	ldr	r0, [sp, #0x8]
 805e2e4: f890 0078    	ldrb.w	r0, [r0, #0x78]
 805e2e8: 0780         	lsls	r0, r0, #0x1e
 805e2ea: 2800         	cmp	r0, #0x0
 805e2ec: d503         	bpl	0x805e2f6 <xPortIsTaskPrivileged+0x3e> @ imm = #0x6
 805e2ee: e7ff         	b	0x805e2f0 <xPortIsTaskPrivileged+0x38> @ imm = #-0x2
 805e2f0: 2001         	movs	r0, #0x1
;             xTaskIsPrivileged = pdTRUE;
 805e2f2: 9003         	str	r0, [sp, #0xc]
;         }
 805e2f4: e7ff         	b	0x805e2f6 <xPortIsTaskPrivileged+0x3e> @ imm = #-0x2
;         return xTaskIsPrivileged;
 805e2f6: 9803         	ldr	r0, [sp, #0xc]
 805e2f8: 9001         	str	r0, [sp, #0x4]
 805e2fa: 4803         	ldr	r0, [pc, #0xc]          @ 0x805e308 <xPortIsTaskPrivileged+0x50>
 805e2fc: 4780         	blx	r0
 805e2fe: 9801         	ldr	r0, [sp, #0x4]
 805e300: b004         	add	sp, #0x10
 805e302: bd80         	pop	{r7, pc}

0805e304 <$d.13>:
 805e304: d5 8d 05 08  	.word	0x08058dd5
 805e308: 21 05 06 08  	.word	0x08060521

0805e30c <pxPortInitialiseStack>:
;     {
 805e30c: b5b0         	push	{r4, r5, r7, lr}
 805e30e: af02         	add	r7, sp, #0x8
 805e310: b086         	sub	sp, #0x18
 805e312: 4674         	mov	r4, lr
 805e314: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 805e318: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805e31c: f643 5e40    	movw	lr, #0x3d40
 805e320: f2c2 0e00    	movt	lr, #0x2000
 805e324: f8de c000    	ldr.w	r12, [lr]
 805e328: f642 5540    	movw	r5, #0x2d40
 805e32c: f2c2 0500    	movt	r5, #0x2000
 805e330: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805e334: f10c 0c01    	add.w	r12, r12, #0x1
 805e338: f8ce c000    	str.w	r12, [lr]
 805e33c: 9005         	str	r0, [sp, #0x14]
 805e33e: 9104         	str	r1, [sp, #0x10]
 805e340: 9203         	str	r2, [sp, #0xc]
 805e342: 9302         	str	r3, [sp, #0x8]
 805e344: 2000         	movs	r0, #0x0
;         uint32_t ulIndex = 0;
 805e346: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x04040404; /* r4. */
 805e348: 68f8         	ldr	r0, [r7, #0xc]
 805e34a: 9901         	ldr	r1, [sp, #0x4]
 805e34c: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e350: f04f 3004    	mov.w	r0, #0x4040404
 805e354: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e356: 9801         	ldr	r0, [sp, #0x4]
 805e358: 3001         	adds	r0, #0x1
 805e35a: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x05050505; /* r5. */
 805e35c: 68f8         	ldr	r0, [r7, #0xc]
 805e35e: 9901         	ldr	r1, [sp, #0x4]
 805e360: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e364: f04f 3005    	mov.w	r0, #0x5050505
 805e368: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e36a: 9801         	ldr	r0, [sp, #0x4]
 805e36c: 3001         	adds	r0, #0x1
 805e36e: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x06060606; /* r6. */
 805e370: 68f8         	ldr	r0, [r7, #0xc]
 805e372: 9901         	ldr	r1, [sp, #0x4]
 805e374: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e378: f04f 3006    	mov.w	r0, #0x6060606
 805e37c: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e37e: 9801         	ldr	r0, [sp, #0x4]
 805e380: 3001         	adds	r0, #0x1
 805e382: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x07070707; /* r7. */
 805e384: 68f8         	ldr	r0, [r7, #0xc]
 805e386: 9901         	ldr	r1, [sp, #0x4]
 805e388: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e38c: f04f 3007    	mov.w	r0, #0x7070707
 805e390: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e392: 9801         	ldr	r0, [sp, #0x4]
 805e394: 3001         	adds	r0, #0x1
 805e396: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x08080808; /* r8. */
 805e398: 68f8         	ldr	r0, [r7, #0xc]
 805e39a: 9901         	ldr	r1, [sp, #0x4]
 805e39c: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e3a0: f04f 3008    	mov.w	r0, #0x8080808
 805e3a4: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e3a6: 9801         	ldr	r0, [sp, #0x4]
 805e3a8: 3001         	adds	r0, #0x1
 805e3aa: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x09090909; /* r9. */
 805e3ac: 68f8         	ldr	r0, [r7, #0xc]
 805e3ae: 9901         	ldr	r1, [sp, #0x4]
 805e3b0: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e3b4: f04f 3009    	mov.w	r0, #0x9090909
 805e3b8: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e3ba: 9801         	ldr	r0, [sp, #0x4]
 805e3bc: 3001         	adds	r0, #0x1
 805e3be: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x10101010; /* r10. */
 805e3c0: 68f8         	ldr	r0, [r7, #0xc]
 805e3c2: 9901         	ldr	r1, [sp, #0x4]
 805e3c4: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e3c8: f04f 3010    	mov.w	r0, #0x10101010
 805e3cc: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e3ce: 9801         	ldr	r0, [sp, #0x4]
 805e3d0: 3001         	adds	r0, #0x1
 805e3d2: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x11111111; /* r11. */
 805e3d4: 68f8         	ldr	r0, [r7, #0xc]
 805e3d6: 9901         	ldr	r1, [sp, #0x4]
 805e3d8: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e3dc: f04f 3011    	mov.w	r0, #0x11111111
 805e3e0: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e3e2: 9801         	ldr	r0, [sp, #0x4]
 805e3e4: 3001         	adds	r0, #0x1
 805e3e6: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pvParameters;            /* r0. */
 805e3e8: 9802         	ldr	r0, [sp, #0x8]
 805e3ea: 68f9         	ldr	r1, [r7, #0xc]
 805e3ec: 9a01         	ldr	r2, [sp, #0x4]
 805e3ee: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805e3f2: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e3f4: 9801         	ldr	r0, [sp, #0x4]
 805e3f6: 3001         	adds	r0, #0x1
 805e3f8: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x01010101;                           /* r1. */
 805e3fa: 68f8         	ldr	r0, [r7, #0xc]
 805e3fc: 9901         	ldr	r1, [sp, #0x4]
 805e3fe: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e402: f04f 3001    	mov.w	r0, #0x1010101
 805e406: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e408: 9801         	ldr	r0, [sp, #0x4]
 805e40a: 3001         	adds	r0, #0x1
 805e40c: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x02020202;                           /* r2. */
 805e40e: 68f8         	ldr	r0, [r7, #0xc]
 805e410: 9901         	ldr	r1, [sp, #0x4]
 805e412: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e416: f04f 3002    	mov.w	r0, #0x2020202
 805e41a: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e41c: 9801         	ldr	r0, [sp, #0x4]
 805e41e: 3001         	adds	r0, #0x1
 805e420: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x03030303;                           /* r3. */
 805e422: 68f8         	ldr	r0, [r7, #0xc]
 805e424: 9901         	ldr	r1, [sp, #0x4]
 805e426: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e42a: f04f 3003    	mov.w	r0, #0x3030303
 805e42e: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e430: 9801         	ldr	r0, [sp, #0x4]
 805e432: 3001         	adds	r0, #0x1
 805e434: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = 0x12121212;                           /* r12. */
 805e436: 68f8         	ldr	r0, [r7, #0xc]
 805e438: 9901         	ldr	r1, [sp, #0x4]
 805e43a: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e43e: f04f 3012    	mov.w	r0, #0x12121212
 805e442: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e444: 9801         	ldr	r0, [sp, #0x4]
 805e446: 3001         	adds	r0, #0x1
 805e448: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portTASK_RETURN_ADDRESS; /* LR. */
 805e44a: 68f8         	ldr	r0, [r7, #0xc]
 805e44c: 9901         	ldr	r1, [sp, #0x4]
 805e44e: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e452: f242 1035    	movw	r0, #0x2135
 805e456: f6c0 0006    	movt	r0, #0x806
 805e45a: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e45c: 9801         	ldr	r0, [sp, #0x4]
 805e45e: 3001         	adds	r0, #0x1
 805e460: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pxCode;                  /* PC. */
 805e462: 9803         	ldr	r0, [sp, #0xc]
 805e464: 68f9         	ldr	r1, [r7, #0xc]
 805e466: 9a01         	ldr	r2, [sp, #0x4]
 805e468: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805e46c: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e46e: 9801         	ldr	r0, [sp, #0x4]
 805e470: 3001         	adds	r0, #0x1
 805e472: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = portINITIAL_XPSR;                     /* xPSR. */
 805e474: 68f8         	ldr	r0, [r7, #0xc]
 805e476: 9901         	ldr	r1, [sp, #0x4]
 805e478: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e47c: f04f 7080    	mov.w	r0, #0x1000000
 805e480: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e482: 9801         	ldr	r0, [sp, #0x4]
 805e484: 3001         	adds	r0, #0x1
 805e486: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) ( pxTopOfStack - 8 ); /* PSP with the hardware saved stack. */
 805e488: 9805         	ldr	r0, [sp, #0x14]
 805e48a: 3820         	subs	r0, #0x20
 805e48c: 68f9         	ldr	r1, [r7, #0xc]
 805e48e: 9a01         	ldr	r2, [sp, #0x4]
 805e490: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805e494: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e496: 9801         	ldr	r0, [sp, #0x4]
 805e498: 3001         	adds	r0, #0x1
 805e49a: 9001         	str	r0, [sp, #0x4]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pxEndOfStack;         /* PSPLIM. */
 805e49c: 9804         	ldr	r0, [sp, #0x10]
 805e49e: 68f9         	ldr	r1, [r7, #0xc]
 805e4a0: 9a01         	ldr	r2, [sp, #0x4]
 805e4a2: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805e4a6: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e4a8: 9801         	ldr	r0, [sp, #0x4]
 805e4aa: 3001         	adds	r0, #0x1
 805e4ac: 9001         	str	r0, [sp, #0x4]
;         if( xRunPrivileged == pdTRUE )
 805e4ae: 68b8         	ldr	r0, [r7, #0x8]
 805e4b0: 2801         	cmp	r0, #0x1
 805e4b2: d10f         	bne	0x805e4d4 <pxPortInitialiseStack+0x1c8> @ imm = #0x1e
 805e4b4: e7ff         	b	0x805e4b6 <pxPortInitialiseStack+0x1aa> @ imm = #-0x2
;             xMPUSettings->ulTaskFlags |= portTASK_IS_PRIVILEGED_FLAG;
 805e4b6: 68f9         	ldr	r1, [r7, #0xc]
 805e4b8: 6f88         	ldr	r0, [r1, #0x78]
 805e4ba: f040 0002    	orr	r0, r0, #0x2
 805e4be: 6788         	str	r0, [r1, #0x78]
;             xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portINITIAL_CONTROL_PRIVILEGED; /* CONTROL. */
 805e4c0: 68f8         	ldr	r0, [r7, #0xc]
 805e4c2: 9901         	ldr	r1, [sp, #0x4]
 805e4c4: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e4c8: 2002         	movs	r0, #0x2
 805e4ca: 6248         	str	r0, [r1, #0x24]
;             ulIndex++;
 805e4cc: 9801         	ldr	r0, [sp, #0x4]
 805e4ce: 3001         	adds	r0, #0x1
 805e4d0: 9001         	str	r0, [sp, #0x4]
;         }
 805e4d2: e00e         	b	0x805e4f2 <pxPortInitialiseStack+0x1e6> @ imm = #0x1c
;             xMPUSettings->ulTaskFlags &= ( ~portTASK_IS_PRIVILEGED_FLAG );
 805e4d4: 68f9         	ldr	r1, [r7, #0xc]
 805e4d6: 6f88         	ldr	r0, [r1, #0x78]
 805e4d8: f020 0002    	bic	r0, r0, #0x2
 805e4dc: 6788         	str	r0, [r1, #0x78]
;             xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portINITIAL_CONTROL_UNPRIVILEGED; /* CONTROL. */
 805e4de: 68f8         	ldr	r0, [r7, #0xc]
 805e4e0: 9901         	ldr	r1, [sp, #0x4]
 805e4e2: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e4e6: 2003         	movs	r0, #0x3
 805e4e8: 6248         	str	r0, [r1, #0x24]
;             ulIndex++;
 805e4ea: 9801         	ldr	r0, [sp, #0x4]
 805e4ec: 3001         	adds	r0, #0x1
 805e4ee: 9001         	str	r0, [sp, #0x4]
 805e4f0: e7ff         	b	0x805e4f2 <pxPortInitialiseStack+0x1e6> @ imm = #-0x2
;         xMPUSettings->ulContext[ ulIndex ] = portINITIAL_EXC_RETURN; /* LR (EXC_RETURN). */
 805e4f2: 68f8         	ldr	r0, [r7, #0xc]
 805e4f4: 9901         	ldr	r1, [sp, #0x4]
 805e4f6: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805e4fa: f06f 0043    	mvn	r0, #0x43
 805e4fe: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805e500: 9801         	ldr	r0, [sp, #0x4]
 805e502: 3001         	adds	r0, #0x1
 805e504: 9001         	str	r0, [sp, #0x4]
;         return &( xMPUSettings->ulContext[ ulIndex ] );
 805e506: 68f8         	ldr	r0, [r7, #0xc]
 805e508: 9901         	ldr	r1, [sp, #0x4]
 805e50a: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805e50e: 3024         	adds	r0, #0x24
 805e510: 9000         	str	r0, [sp]
 805e512: 4802         	ldr	r0, [pc, #0x8]          @ 0x805e51c <pxPortInitialiseStack+0x210>
 805e514: 4780         	blx	r0
 805e516: 9800         	ldr	r0, [sp]
 805e518: b006         	add	sp, #0x18
 805e51a: bdb0         	pop	{r4, r5, r7, pc}

0805e51c <$d.15>:
 805e51c: 21 05 06 08  	.word	0x08060521

0805e520 <xPortStartScheduler>:
; {
 805e520: b580         	push	{r7, lr}
 805e522: 466f         	mov	r7, sp
 805e524: b084         	sub	sp, #0x10
 805e526: f643 5140    	movw	r1, #0x3d40
 805e52a: f2c2 0100    	movt	r1, #0x2000
 805e52e: 6808         	ldr	r0, [r1]
 805e530: f642 5240    	movw	r2, #0x2d40
 805e534: f2c2 0200    	movt	r2, #0x2000
 805e538: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e53c: 3001         	adds	r0, #0x1
 805e53e: 6008         	str	r0, [r1]
 805e540: 2000         	movs	r0, #0x0
;         volatile uint32_t ulImplementedPrioBits = 0;
 805e542: 9002         	str	r0, [sp, #0x8]
 805e544: f64e 501c    	movw	r0, #0xed1c
 805e548: f2ce 0000    	movt	r0, #0xe000
;         ulOriginalPriority = portNVIC_SHPR2_REG;
 805e54c: 6801         	ldr	r1, [r0]
 805e54e: 9103         	str	r1, [sp, #0xc]
 805e550: f04f 417f    	mov.w	r1, #0xff000000
;         portNVIC_SHPR2_REG = 0xFF000000;
 805e554: 6001         	str	r1, [r0]
;         ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 805e556: 6800         	ldr	r0, [r0]
 805e558: 0e00         	lsrs	r0, r0, #0x18
 805e55a: f807 0c09    	strb	r0, [r7, #-9]
;         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 805e55e: f817 0c09    	ldrb	r0, [r7, #-9]
 805e562: f000 01a0    	and	r1, r0, #0xa0
 805e566: f643 7060    	movw	r0, #0x3f60
 805e56a: f2c2 0000    	movt	r0, #0x2000
 805e56e: 7001         	strb	r1, [r0]
;         configASSERT( ucMaxSysCallPriority );
 805e570: 7800         	ldrb	r0, [r0]
 805e572: b920         	cbnz	r0, 0x805e57e <xPortStartScheduler+0x5e> @ imm = #0x8
 805e574: e7ff         	b	0x805e576 <xPortStartScheduler+0x56> @ imm = #-0x2
 805e576: 483a         	ldr	r0, [pc, #0xe8]         @ 0x805e660 <xPortStartScheduler+0x140>
 805e578: 4780         	blx	r0
 805e57a: e7ff         	b	0x805e57c <xPortStartScheduler+0x5c> @ imm = #-0x2
 805e57c: e7fe         	b	0x805e57c <xPortStartScheduler+0x5c> @ imm = #-0x4
;         configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 805e57e: f817 0c09    	ldrb	r0, [r7, #-9]
 805e582: 43c0         	mvns	r0, r0
 805e584: f010 0fa0    	tst.w	r0, #0xa0
 805e588: d004         	beq	0x805e594 <xPortStartScheduler+0x74> @ imm = #0x8
 805e58a: e7ff         	b	0x805e58c <xPortStartScheduler+0x6c> @ imm = #-0x2
 805e58c: 4833         	ldr	r0, [pc, #0xcc]         @ 0x805e65c <xPortStartScheduler+0x13c>
 805e58e: 4780         	blx	r0
 805e590: e7ff         	b	0x805e592 <xPortStartScheduler+0x72> @ imm = #-0x2
 805e592: e7fe         	b	0x805e592 <xPortStartScheduler+0x72> @ imm = #-0x4
;         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 805e594: e7ff         	b	0x805e596 <xPortStartScheduler+0x76> @ imm = #-0x2
 805e596: f817 0c09    	ldrb	r0, [r7, #-9]
 805e59a: 0600         	lsls	r0, r0, #0x18
 805e59c: 2800         	cmp	r0, #0x0
 805e59e: d509         	bpl	0x805e5b4 <xPortStartScheduler+0x94> @ imm = #0x12
 805e5a0: e7ff         	b	0x805e5a2 <xPortStartScheduler+0x82> @ imm = #-0x2
;             ulImplementedPrioBits++;
 805e5a2: 9802         	ldr	r0, [sp, #0x8]
 805e5a4: 3001         	adds	r0, #0x1
 805e5a6: 9002         	str	r0, [sp, #0x8]
;             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 805e5a8: f817 0c09    	ldrb	r0, [r7, #-9]
 805e5ac: 0040         	lsls	r0, r0, #0x1
 805e5ae: f807 0c09    	strb	r0, [r7, #-9]
;         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 805e5b2: e7f0         	b	0x805e596 <xPortStartScheduler+0x76> @ imm = #-0x20
;         if( ulImplementedPrioBits == 8 )
 805e5b4: 9802         	ldr	r0, [sp, #0x8]
 805e5b6: 2808         	cmp	r0, #0x8
 805e5b8: d107         	bne	0x805e5ca <xPortStartScheduler+0xaa> @ imm = #0xe
 805e5ba: e7ff         	b	0x805e5bc <xPortStartScheduler+0x9c> @ imm = #-0x2
;             ulMaxPRIGROUPValue = 0;
 805e5bc: f643 7164    	movw	r1, #0x3f64
 805e5c0: f2c2 0100    	movt	r1, #0x2000
 805e5c4: 2000         	movs	r0, #0x0
 805e5c6: 6008         	str	r0, [r1]
;         }
 805e5c8: e008         	b	0x805e5dc <xPortStartScheduler+0xbc> @ imm = #0x10
;             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 805e5ca: 9802         	ldr	r0, [sp, #0x8]
 805e5cc: f1c0 0007    	rsb.w	r0, r0, #0x7
 805e5d0: f643 7164    	movw	r1, #0x3f64
 805e5d4: f2c2 0100    	movt	r1, #0x2000
 805e5d8: 6008         	str	r0, [r1]
 805e5da: e7ff         	b	0x805e5dc <xPortStartScheduler+0xbc> @ imm = #-0x2
;         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 805e5dc: f643 7164    	movw	r1, #0x3f64
 805e5e0: f2c2 0100    	movt	r1, #0x2000
 805e5e4: 6808         	ldr	r0, [r1]
 805e5e6: 0200         	lsls	r0, r0, #0x8
 805e5e8: 6008         	str	r0, [r1]
;         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 805e5ea: 6808         	ldr	r0, [r1]
 805e5ec: f400 60e0    	and	r0, r0, #0x700
 805e5f0: 6008         	str	r0, [r1]
;         portNVIC_SHPR2_REG = ulOriginalPriority;
 805e5f2: 9803         	ldr	r0, [sp, #0xc]
 805e5f4: f64e 511c    	movw	r1, #0xed1c
 805e5f8: f2ce 0100    	movt	r1, #0xe000
 805e5fc: 6008         	str	r0, [r1]
 805e5fe: f64e 5120    	movw	r1, #0xed20
 805e602: f2ce 0100    	movt	r1, #0xe000
;     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 805e606: 6808         	ldr	r0, [r1]
 805e608: f440 007f    	orr	r0, r0, #0xff0000
 805e60c: 6008         	str	r0, [r1]
;     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 805e60e: 6808         	ldr	r0, [r1]
 805e610: f040 407f    	orr	r0, r0, #0xff000000
 805e614: 6008         	str	r0, [r1]
;         prvSetupMPU();
 805e616: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805e644 <xPortStartScheduler+0x124>
 805e618: 4780         	blx	r0
;     vPortSetupTimerInterrupt();
 805e61a: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805e648 <xPortStartScheduler+0x128>
 805e61c: 4780         	blx	r0
;     ulCriticalNesting = 0;
 805e61e: f242 3178    	movw	r1, #0x2378
 805e622: f2c2 0100    	movt	r1, #0x2000
 805e626: 2000         	movs	r0, #0x0
 805e628: 9000         	str	r0, [sp]
 805e62a: 6008         	str	r0, [r1]
;     vStartFirstTask();
 805e62c: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805e64c <xPortStartScheduler+0x12c>
 805e62e: 4780         	blx	r0
;     vTaskSwitchContext();
 805e630: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805e650 <xPortStartScheduler+0x130>
 805e632: 4780         	blx	r0
;     prvTaskExitError();
 805e634: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805e654 <xPortStartScheduler+0x134>
 805e636: 4780         	blx	r0
;     return 0;
 805e638: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805e658 <xPortStartScheduler+0x138>
 805e63a: 4780         	blx	r0
 805e63c: 9800         	ldr	r0, [sp]
 805e63e: b004         	add	sp, #0x10
 805e640: bd80         	pop	{r7, pc}
 805e642: bf00         	nop

0805e644 <$d.19>:
 805e644: 65 e6 05 08  	.word	0x0805e665
 805e648: 59 e0 05 08  	.word	0x0805e059
 805e64c: 1d ec 05 08  	.word	0x0805ec1d
 805e650: 39 65 05 08  	.word	0x08056539
 805e654: 35 21 06 08  	.word	0x08062135
 805e658: 21 05 06 08  	.word	0x08060521
 805e65c: 55 ec 05 08  	.word	0x0805ec55
 805e660: 55 ec 05 08  	.word	0x0805ec55

0805e664 <prvSetupMPU>:
;     {
 805e664: b580         	push	{r7, lr}
 805e666: 466f         	mov	r7, sp
;         configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 805e668: f643 5140    	movw	r1, #0x3d40
 805e66c: f2c2 0100    	movt	r1, #0x2000
 805e670: 6808         	ldr	r0, [r1]
 805e672: f642 5240    	movw	r2, #0x2d40
 805e676: f2c2 0200    	movt	r2, #0x2000
 805e67a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e67e: 3001         	adds	r0, #0x1
 805e680: 6008         	str	r0, [r1]
 805e682: f64e 5090    	movw	r0, #0xed90
 805e686: f2ce 0000    	movt	r0, #0xe000
 805e68a: 6800         	ldr	r0, [r0]
 805e68c: f5b0 6f00    	cmp.w	r0, #0x800
 805e690: d004         	beq	0x805e69c <prvSetupMPU+0x38> @ imm = #0x8
 805e692: e7ff         	b	0x805e694 <prvSetupMPU+0x30> @ imm = #-0x2
 805e694: 4840         	ldr	r0, [pc, #0x100]        @ 0x805e798 <prvSetupMPU+0x134>
 805e696: 4780         	blx	r0
 805e698: e7ff         	b	0x805e69a <prvSetupMPU+0x36> @ imm = #-0x2
 805e69a: e7fe         	b	0x805e69a <prvSetupMPU+0x36> @ imm = #-0x4
 805e69c: f64e 5090    	movw	r0, #0xed90
 805e6a0: f2ce 0000    	movt	r0, #0xe000
;         if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 805e6a4: 6800         	ldr	r0, [r0]
 805e6a6: f5b0 6f00    	cmp.w	r0, #0x800
 805e6aa: d170         	bne	0x805e78e <prvSetupMPU+0x12a> @ imm = #0xe0
 805e6ac: e7ff         	b	0x805e6ae <prvSetupMPU+0x4a> @ imm = #-0x2
 805e6ae: f64e 51c0    	movw	r1, #0xedc0
 805e6b2: f2ce 0100    	movt	r1, #0xe000
;             portMPU_MAIR0_REG |= ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 805e6b6: 6808         	ldr	r0, [r1]
 805e6b8: f040 00ff    	orr	r0, r0, #0xff
 805e6bc: 6008         	str	r0, [r1]
;             portMPU_MAIR0_REG |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 805e6be: 6808         	ldr	r0, [r1]
 805e6c0: f440 6080    	orr	r0, r0, #0x400
 805e6c4: 6008         	str	r0, [r1]
 805e6c6: f64e 5c98    	movw	r12, #0xed98
 805e6ca: f2ce 0c00    	movt	r12, #0xe000
 805e6ce: 2000         	movs	r0, #0x0
;             portMPU_RNR_REG = portPRIVILEGED_FLASH_REGION;
 805e6d0: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_functions_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805e6d4: f245 2000    	movw	r0, #0x5200
 805e6d8: f6c0 0005    	movt	r0, #0x805
 805e6dc: 2104         	movs	r1, #0x4
 805e6de: f361 0004    	bfi	r0, r1, #0, #5
 805e6e2: f64e 539c    	movw	r3, #0xed9c
 805e6e6: f2ce 0300    	movt	r3, #0xe000
 805e6ea: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_functions_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805e6ec: f64e 50bf    	movw	r0, #0xedbf
 805e6f0: f6c0 0005    	movt	r0, #0x805
 805e6f4: 2201         	movs	r2, #0x1
 805e6f6: f362 0004    	bfi	r0, r2, #0, #5
 805e6fa: f64e 51a0    	movw	r1, #0xeda0
 805e6fe: f2ce 0100    	movt	r1, #0xe000
 805e702: 6008         	str	r0, [r1]
;             portMPU_RNR_REG = portUNPRIVILEGED_FLASH_REGION;
 805e704: f8cc 2000    	str.w	r2, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __unprivileged_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805e708: f240 5020    	movw	r0, #0x520
 805e70c: f6c0 0006    	movt	r0, #0x806
 805e710: f04f 0e06    	mov.w	lr, #0x6
 805e714: f36e 0004    	bfi	r0, lr, #0, #5
 805e718: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __unprivileged_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805e71a: f24a 405f    	movw	r0, #0xa45f
 805e71e: f6c0 0006    	movt	r0, #0x806
 805e722: f362 0004    	bfi	r0, r2, #0, #5
 805e726: 6008         	str	r0, [r1]
 805e728: 2002         	movs	r0, #0x2
;             portMPU_RNR_REG = portUNPRIVILEGED_SYSCALLS_REGION;
 805e72a: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __syscalls_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805e72e: f64e 50c0    	movw	r0, #0xedc0
 805e732: f6c0 0005    	movt	r0, #0x805
 805e736: f36e 0004    	bfi	r0, lr, #0, #5
 805e73a: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __syscalls_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805e73c: f240 501f    	movw	r0, #0x51f
 805e740: f6c0 0006    	movt	r0, #0x806
 805e744: f362 0004    	bfi	r0, r2, #0, #5
 805e748: 6008         	str	r0, [r1]
 805e74a: 2003         	movs	r0, #0x3
;             portMPU_RNR_REG = portPRIVILEGED_RAM_REGION;
 805e74c: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_sram_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805e750: f240 1000    	movw	r0, #0x100
 805e754: f2c2 0000    	movt	r0, #0x2000
 805e758: f362 0004    	bfi	r0, r2, #0, #5
 805e75c: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_sram_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805e75e: f242 307f    	movw	r0, #0x237f
 805e762: f2c2 0000    	movt	r0, #0x2000
 805e766: f362 0004    	bfi	r0, r2, #0, #5
 805e76a: 6008         	str	r0, [r1]
 805e76c: f64e 5124    	movw	r1, #0xed24
 805e770: f2ce 0100    	movt	r1, #0xe000
;             portSCB_SYS_HANDLER_CTRL_STATE_REG |= portSCB_MEM_FAULT_ENABLE_BIT;
 805e774: 6808         	ldr	r0, [r1]
 805e776: f440 3080    	orr	r0, r0, #0x10000
 805e77a: 6008         	str	r0, [r1]
 805e77c: f64e 5194    	movw	r1, #0xed94
 805e780: f2ce 0100    	movt	r1, #0xe000
;             portMPU_CTRL_REG |= ( portMPU_PRIV_BACKGROUND_ENABLE_BIT | portMPU_ENABLE_BIT );
 805e784: 6808         	ldr	r0, [r1]
 805e786: f040 0005    	orr	r0, r0, #0x5
 805e78a: 6008         	str	r0, [r1]
;         }
 805e78c: e7ff         	b	0x805e78e <prvSetupMPU+0x12a> @ imm = #-0x2
;     }
 805e78e: 4801         	ldr	r0, [pc, #0x4]          @ 0x805e794 <prvSetupMPU+0x130>
 805e790: 4780         	blx	r0
 805e792: bd80         	pop	{r7, pc}

0805e794 <$d.21>:
 805e794: 21 05 06 08  	.word	0x08060521
 805e798: 55 ec 05 08  	.word	0x0805ec55

0805e79c <vPortEndScheduler>:
; {
 805e79c: b580         	push	{r7, lr}
 805e79e: 466f         	mov	r7, sp
;     configASSERT( ulCriticalNesting == 1000UL );
 805e7a0: f643 5140    	movw	r1, #0x3d40
 805e7a4: f2c2 0100    	movt	r1, #0x2000
 805e7a8: 6808         	ldr	r0, [r1]
 805e7aa: f642 5240    	movw	r2, #0x2d40
 805e7ae: f2c2 0200    	movt	r2, #0x2000
 805e7b2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805e7b6: 3001         	adds	r0, #0x1
 805e7b8: 6008         	str	r0, [r1]
 805e7ba: f242 3078    	movw	r0, #0x2378
 805e7be: f2c2 0000    	movt	r0, #0x2000
 805e7c2: 6800         	ldr	r0, [r0]
 805e7c4: f5b0 7f7a    	cmp.w	r0, #0x3e8
 805e7c8: d004         	beq	0x805e7d4 <vPortEndScheduler+0x38> @ imm = #0x8
 805e7ca: e7ff         	b	0x805e7cc <vPortEndScheduler+0x30> @ imm = #-0x2
 805e7cc: 4804         	ldr	r0, [pc, #0x10]         @ 0x805e7e0 <vPortEndScheduler+0x44>
 805e7ce: 4780         	blx	r0
 805e7d0: e7ff         	b	0x805e7d2 <vPortEndScheduler+0x36> @ imm = #-0x2
 805e7d2: e7fe         	b	0x805e7d2 <vPortEndScheduler+0x36> @ imm = #-0x4
; }
 805e7d4: 4801         	ldr	r0, [pc, #0x4]          @ 0x805e7dc <vPortEndScheduler+0x40>
 805e7d6: 4780         	blx	r0
 805e7d8: bd80         	pop	{r7, pc}
 805e7da: bf00         	nop

0805e7dc <$d.23>:
 805e7dc: 21 05 06 08  	.word	0x08060521
 805e7e0: 55 ec 05 08  	.word	0x0805ec55

0805e7e4 <vPortStoreTaskMPUSettings>:
;     {
 805e7e4: b5b0         	push	{r4, r5, r7, lr}
 805e7e6: af02         	add	r7, sp, #0x8
 805e7e8: b088         	sub	sp, #0x20
 805e7ea: 4674         	mov	r4, lr
 805e7ec: f643 5e40    	movw	lr, #0x3d40
 805e7f0: f2c2 0e00    	movt	lr, #0x2000
 805e7f4: f8de c000    	ldr.w	r12, [lr]
 805e7f8: f642 5540    	movw	r5, #0x2d40
 805e7fc: f2c2 0500    	movt	r5, #0x2000
 805e800: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805e804: f10c 0c01    	add.w	r12, r12, #0x1
 805e808: f8ce c000    	str.w	r12, [lr]
 805e80c: 9007         	str	r0, [sp, #0x1c]
 805e80e: 9106         	str	r1, [sp, #0x18]
 805e810: 9205         	str	r2, [sp, #0x14]
 805e812: 9304         	str	r3, [sp, #0x10]
 805e814: 2000         	movs	r0, #0x0
;         int32_t lIndex = 0;
 805e816: 9000         	str	r0, [sp]
;         xMPUSettings->ulMAIR0 = ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 805e818: 9907         	ldr	r1, [sp, #0x1c]
 805e81a: 20ff         	movs	r0, #0xff
 805e81c: 6008         	str	r0, [r1]
;         xMPUSettings->ulMAIR0 |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 805e81e: 9907         	ldr	r1, [sp, #0x1c]
 805e820: 6808         	ldr	r0, [r1]
 805e822: f440 6080    	orr	r0, r0, #0x400
 805e826: 6008         	str	r0, [r1]
;         if( ulStackDepth > 0 )
 805e828: 9804         	ldr	r0, [sp, #0x10]
 805e82a: b390         	cbz	r0, 0x805e892 <vPortStoreTaskMPUSettings+0xae> @ imm = #0x64
 805e82c: e7ff         	b	0x805e82e <vPortStoreTaskMPUSettings+0x4a> @ imm = #-0x2
;             ulRegionStartAddress = ( uint32_t ) pxBottomOfStack;
 805e82e: 9805         	ldr	r0, [sp, #0x14]
 805e830: 9003         	str	r0, [sp, #0xc]
;             ulRegionEndAddress = ( uint32_t ) pxBottomOfStack + ( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) - 1;
 805e832: 9805         	ldr	r0, [sp, #0x14]
 805e834: 9904         	ldr	r1, [sp, #0x10]
 805e836: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805e83a: 3801         	subs	r0, #0x1
 805e83c: 9002         	str	r0, [sp, #0x8]
;             if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 805e83e: 9803         	ldr	r0, [sp, #0xc]
 805e840: f240 1100    	movw	r1, #0x100
 805e844: f2c2 0100    	movt	r1, #0x2000
 805e848: 4288         	cmp	r0, r1
 805e84a: d30e         	blo	0x805e86a <vPortStoreTaskMPUSettings+0x86> @ imm = #0x1c
 805e84c: e7ff         	b	0x805e84e <vPortStoreTaskMPUSettings+0x6a> @ imm = #-0x2
;                 ( ulRegionEndAddress <= ( uint32_t ) __privileged_sram_end__ ) )
 805e84e: 9802         	ldr	r0, [sp, #0x8]
 805e850: f242 317f    	movw	r1, #0x237f
 805e854: f2c2 0100    	movt	r1, #0x2000
;             if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 805e858: 4288         	cmp	r0, r1
 805e85a: d806         	bhi	0x805e86a <vPortStoreTaskMPUSettings+0x86> @ imm = #0xc
 805e85c: e7ff         	b	0x805e85e <vPortStoreTaskMPUSettings+0x7a> @ imm = #-0x2
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = 0;
 805e85e: 9907         	ldr	r1, [sp, #0x1c]
 805e860: 2000         	movs	r0, #0x0
 805e862: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = 0;
 805e864: 9907         	ldr	r1, [sp, #0x1c]
 805e866: 6088         	str	r0, [r1, #0x8]
;             }
 805e868: e012         	b	0x805e890 <vPortStoreTaskMPUSettings+0xac> @ imm = #0x24
;                 ulRegionStartAddress &= portMPU_RBAR_ADDRESS_MASK;
 805e86a: 9803         	ldr	r0, [sp, #0xc]
 805e86c: f020 001f    	bic	r0, r0, #0x1f
 805e870: 9003         	str	r0, [sp, #0xc]
;                 ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 805e872: 9802         	ldr	r0, [sp, #0x8]
 805e874: f020 001f    	bic	r0, r0, #0x1f
 805e878: 9002         	str	r0, [sp, #0x8]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
 805e87a: 9803         	ldr	r0, [sp, #0xc]
;                                                              ( portMPU_REGION_READ_WRITE ) |
 805e87c: f040 0003    	orr	r0, r0, #0x3
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
 805e880: 9907         	ldr	r1, [sp, #0x1c]
 805e882: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
 805e884: 9802         	ldr	r0, [sp, #0x8]
;                                                              ( portMPU_RLAR_ATTR_INDEX0 ) |
 805e886: f040 0001    	orr	r0, r0, #0x1
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
 805e88a: 9907         	ldr	r1, [sp, #0x1c]
 805e88c: 6088         	str	r0, [r1, #0x8]
 805e88e: e7ff         	b	0x805e890 <vPortStoreTaskMPUSettings+0xac> @ imm = #-0x2
;         }
 805e890: e7ff         	b	0x805e892 <vPortStoreTaskMPUSettings+0xae> @ imm = #-0x2
 805e892: 2001         	movs	r0, #0x1
;         for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 805e894: 9001         	str	r0, [sp, #0x4]
 805e896: e7ff         	b	0x805e898 <vPortStoreTaskMPUSettings+0xb4> @ imm = #-0x2
 805e898: 9801         	ldr	r0, [sp, #0x4]
 805e89a: 2803         	cmp	r0, #0x3
 805e89c: f200 8090    	bhi.w	0x805e9c0 <vPortStoreTaskMPUSettings+0x1dc> @ imm = #0x120
 805e8a0: e7ff         	b	0x805e8a2 <vPortStoreTaskMPUSettings+0xbe> @ imm = #-0x2
;             if( ( xRegions != NULL ) && ( xRegions[ lIndex ].ulLengthInBytes > 0UL ) )
 805e8a2: 9806         	ldr	r0, [sp, #0x18]
 805e8a4: 2800         	cmp	r0, #0x0
 805e8a6: d077         	beq	0x805e998 <vPortStoreTaskMPUSettings+0x1b4> @ imm = #0xee
 805e8a8: e7ff         	b	0x805e8aa <vPortStoreTaskMPUSettings+0xc6> @ imm = #-0x2
 805e8aa: 9806         	ldr	r0, [sp, #0x18]
 805e8ac: 9900         	ldr	r1, [sp]
 805e8ae: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805e8b2: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805e8b6: 6840         	ldr	r0, [r0, #0x4]
 805e8b8: 2800         	cmp	r0, #0x0
 805e8ba: d06d         	beq	0x805e998 <vPortStoreTaskMPUSettings+0x1b4> @ imm = #0xda
 805e8bc: e7ff         	b	0x805e8be <vPortStoreTaskMPUSettings+0xda> @ imm = #-0x2
;                 ulRegionStartAddress = ( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) & portMPU_RBAR_ADDRESS_MASK;
 805e8be: 9806         	ldr	r0, [sp, #0x18]
 805e8c0: 9900         	ldr	r1, [sp]
 805e8c2: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805e8c6: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 805e8ca: f020 001f    	bic	r0, r0, #0x1f
 805e8ce: 9003         	str	r0, [sp, #0xc]
;                 ulRegionEndAddress = ( uint32_t ) xRegions[ lIndex ].pvBaseAddress + xRegions[ lIndex ].ulLengthInBytes - 1;
 805e8d0: 9806         	ldr	r0, [sp, #0x18]
 805e8d2: 9900         	ldr	r1, [sp]
 805e8d4: eb01 0241    	add.w	r2, r1, r1, lsl #1
 805e8d8: eb00 0182    	add.w	r1, r0, r2, lsl #2
 805e8dc: f850 0022    	ldr.w	r0, [r0, r2, lsl #2]
 805e8e0: 6849         	ldr	r1, [r1, #0x4]
 805e8e2: 4408         	add	r0, r1
 805e8e4: 3801         	subs	r0, #0x1
 805e8e6: 9002         	str	r0, [sp, #0x8]
;                 ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 805e8e8: 9802         	ldr	r0, [sp, #0x8]
 805e8ea: f020 001f    	bic	r0, r0, #0x1f
 805e8ee: 9002         	str	r0, [sp, #0x8]
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = ( ulRegionStartAddress ) |
 805e8f0: 9803         	ldr	r0, [sp, #0xc]
 805e8f2: 9907         	ldr	r1, [sp, #0x1c]
 805e8f4: 9a01         	ldr	r2, [sp, #0x4]
 805e8f6: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805e8fa: 6048         	str	r0, [r1, #0x4]
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_READ_ONLY ) != 0 )
 805e8fc: 9806         	ldr	r0, [sp, #0x18]
 805e8fe: 9900         	ldr	r1, [sp]
 805e900: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805e904: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805e908: 7a00         	ldrb	r0, [r0, #0x8]
 805e90a: 07c0         	lsls	r0, r0, #0x1f
 805e90c: b148         	cbz	r0, 0x805e922 <vPortStoreTaskMPUSettings+0x13e> @ imm = #0x12
 805e90e: e7ff         	b	0x805e910 <vPortStoreTaskMPUSettings+0x12c> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_ONLY );
 805e910: 9807         	ldr	r0, [sp, #0x1c]
 805e912: 9901         	ldr	r1, [sp, #0x4]
 805e914: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805e918: 6848         	ldr	r0, [r1, #0x4]
 805e91a: f040 0006    	orr	r0, r0, #0x6
 805e91e: 6048         	str	r0, [r1, #0x4]
;                 }
 805e920: e008         	b	0x805e934 <vPortStoreTaskMPUSettings+0x150> @ imm = #0x10
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_WRITE );
 805e922: 9807         	ldr	r0, [sp, #0x1c]
 805e924: 9901         	ldr	r1, [sp, #0x4]
 805e926: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805e92a: 6848         	ldr	r0, [r1, #0x4]
 805e92c: f040 0002    	orr	r0, r0, #0x2
 805e930: 6048         	str	r0, [r1, #0x4]
 805e932: e7ff         	b	0x805e934 <vPortStoreTaskMPUSettings+0x150> @ imm = #-0x2
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_EXECUTE_NEVER ) != 0 )
 805e934: 9806         	ldr	r0, [sp, #0x18]
 805e936: 9900         	ldr	r1, [sp]
 805e938: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805e93c: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805e940: 7a00         	ldrb	r0, [r0, #0x8]
 805e942: 0740         	lsls	r0, r0, #0x1d
 805e944: 2800         	cmp	r0, #0x0
 805e946: d509         	bpl	0x805e95c <vPortStoreTaskMPUSettings+0x178> @ imm = #0x12
 805e948: e7ff         	b	0x805e94a <vPortStoreTaskMPUSettings+0x166> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_EXECUTE_NEVER );
 805e94a: 9807         	ldr	r0, [sp, #0x1c]
 805e94c: 9901         	ldr	r1, [sp, #0x4]
 805e94e: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805e952: 6848         	ldr	r0, [r1, #0x4]
 805e954: f040 0001    	orr	r0, r0, #0x1
 805e958: 6048         	str	r0, [r1, #0x4]
;                 }
 805e95a: e7ff         	b	0x805e95c <vPortStoreTaskMPUSettings+0x178> @ imm = #-0x2
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = ( ulRegionEndAddress ) |
 805e95c: 9802         	ldr	r0, [sp, #0x8]
 805e95e: f040 0001    	orr	r0, r0, #0x1
 805e962: 9907         	ldr	r1, [sp, #0x1c]
 805e964: 9a01         	ldr	r2, [sp, #0x4]
 805e966: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805e96a: 6088         	str	r0, [r1, #0x8]
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_DEVICE_MEMORY ) != 0 )
 805e96c: 9806         	ldr	r0, [sp, #0x18]
 805e96e: 9900         	ldr	r1, [sp]
 805e970: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805e974: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805e978: 7a00         	ldrb	r0, [r0, #0x8]
 805e97a: 06c0         	lsls	r0, r0, #0x1b
 805e97c: 2800         	cmp	r0, #0x0
 805e97e: d509         	bpl	0x805e994 <vPortStoreTaskMPUSettings+0x1b0> @ imm = #0x12
 805e980: e7ff         	b	0x805e982 <vPortStoreTaskMPUSettings+0x19e> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR |= portMPU_RLAR_ATTR_INDEX1;
 805e982: 9807         	ldr	r0, [sp, #0x1c]
 805e984: 9901         	ldr	r1, [sp, #0x4]
 805e986: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805e98a: 6888         	ldr	r0, [r1, #0x8]
 805e98c: f040 0002    	orr	r0, r0, #0x2
 805e990: 6088         	str	r0, [r1, #0x8]
;                 }
 805e992: e000         	b	0x805e996 <vPortStoreTaskMPUSettings+0x1b2> @ imm = #0x0
 805e994: e7ff         	b	0x805e996 <vPortStoreTaskMPUSettings+0x1b2> @ imm = #-0x2
;             }
 805e996: e00b         	b	0x805e9b0 <vPortStoreTaskMPUSettings+0x1cc> @ imm = #0x16
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = 0UL;
 805e998: 9807         	ldr	r0, [sp, #0x1c]
 805e99a: 9901         	ldr	r1, [sp, #0x4]
 805e99c: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805e9a0: 2000         	movs	r0, #0x0
 805e9a2: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = 0UL;
 805e9a4: 9907         	ldr	r1, [sp, #0x1c]
 805e9a6: 9a01         	ldr	r2, [sp, #0x4]
 805e9a8: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805e9ac: 6088         	str	r0, [r1, #0x8]
 805e9ae: e7ff         	b	0x805e9b0 <vPortStoreTaskMPUSettings+0x1cc> @ imm = #-0x2
;             lIndex++;
 805e9b0: 9800         	ldr	r0, [sp]
 805e9b2: 3001         	adds	r0, #0x1
 805e9b4: 9000         	str	r0, [sp]
;         }
 805e9b6: e7ff         	b	0x805e9b8 <vPortStoreTaskMPUSettings+0x1d4> @ imm = #-0x2
;         for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 805e9b8: 9801         	ldr	r0, [sp, #0x4]
 805e9ba: 3001         	adds	r0, #0x1
 805e9bc: 9001         	str	r0, [sp, #0x4]
 805e9be: e76b         	b	0x805e898 <vPortStoreTaskMPUSettings+0xb4> @ imm = #-0x12a
;     }
 805e9c0: 4801         	ldr	r0, [pc, #0x4]          @ 0x805e9c8 <vPortStoreTaskMPUSettings+0x1e4>
 805e9c2: 4780         	blx	r0
 805e9c4: b008         	add	sp, #0x20
 805e9c6: bdb0         	pop	{r4, r5, r7, pc}

0805e9c8 <$d.25>:
 805e9c8: 21 05 06 08  	.word	0x08060521

0805e9cc <xPortIsAuthorizedToAccessBuffer>:
;     {
 805e9cc: b5d0         	push	{r4, r6, r7, lr}
 805e9ce: af02         	add	r7, sp, #0x8
 805e9d0: b08a         	sub	sp, #0x28
 805e9d2: f643 5c40    	movw	r12, #0x3d40
 805e9d6: f2c2 0c00    	movt	r12, #0x2000
 805e9da: f8dc 3000    	ldr.w	r3, [r12]
 805e9de: f642 5440    	movw	r4, #0x2d40
 805e9e2: f2c2 0400    	movt	r4, #0x2000
 805e9e6: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805e9ea: 3301         	adds	r3, #0x1
 805e9ec: f8cc 3000    	str.w	r3, [r12]
 805e9f0: 9009         	str	r0, [sp, #0x24]
 805e9f2: 9108         	str	r1, [sp, #0x20]
 805e9f4: 9207         	str	r2, [sp, #0x1c]
 805e9f6: 2000         	movs	r0, #0x0
;         BaseType_t xAccessGranted = pdFALSE;
 805e9f8: 9003         	str	r0, [sp, #0xc]
;         const xMPU_SETTINGS * xTaskMpuSettings = xTaskGetMPUSettings( NULL ); /* Calling task's MPU settings. */
 805e9fa: 4939         	ldr	r1, [pc, #0xe4]         @ 0x805eae0 <xPortIsAuthorizedToAccessBuffer+0x114>
 805e9fc: 4788         	blx	r1
 805e9fe: 9002         	str	r0, [sp, #0x8]
;         if( ( xTaskMpuSettings->ulTaskFlags & portTASK_IS_PRIVILEGED_FLAG ) == portTASK_IS_PRIVILEGED_FLAG )
 805ea00: 9802         	ldr	r0, [sp, #0x8]
 805ea02: f890 0078    	ldrb.w	r0, [r0, #0x78]
 805ea06: 0780         	lsls	r0, r0, #0x1e
 805ea08: 2800         	cmp	r0, #0x0
 805ea0a: d503         	bpl	0x805ea14 <xPortIsAuthorizedToAccessBuffer+0x48> @ imm = #0x6
 805ea0c: e7ff         	b	0x805ea0e <xPortIsAuthorizedToAccessBuffer+0x42> @ imm = #-0x2
 805ea0e: 2001         	movs	r0, #0x1
;             xAccessGranted = pdTRUE;
 805ea10: 9003         	str	r0, [sp, #0xc]
;         }
 805ea12: e05e         	b	0x805ead2 <xPortIsAuthorizedToAccessBuffer+0x106> @ imm = #0xbc
;             if( portADD_UINT32_WILL_OVERFLOW( ( ( uint32_t ) pvBuffer ), ( ulBufferLength - 1UL ) ) == pdFALSE )
 805ea14: 9809         	ldr	r0, [sp, #0x24]
 805ea16: 9908         	ldr	r1, [sp, #0x20]
 805ea18: 4249         	rsbs	r1, r1, #0
 805ea1a: 4288         	cmp	r0, r1
 805ea1c: d858         	bhi	0x805ead0 <xPortIsAuthorizedToAccessBuffer+0x104> @ imm = #0xb0
 805ea1e: e7ff         	b	0x805ea20 <xPortIsAuthorizedToAccessBuffer+0x54> @ imm = #-0x2
;                 ulBufferStartAddress = ( uint32_t ) pvBuffer;
 805ea20: 9809         	ldr	r0, [sp, #0x24]
 805ea22: 9005         	str	r0, [sp, #0x14]
;                 ulBufferEndAddress = ( ( ( uint32_t ) pvBuffer ) + ulBufferLength - 1UL );
 805ea24: 9809         	ldr	r0, [sp, #0x24]
 805ea26: 9908         	ldr	r1, [sp, #0x20]
 805ea28: 4408         	add	r0, r1
 805ea2a: 3801         	subs	r0, #0x1
 805ea2c: 9004         	str	r0, [sp, #0x10]
 805ea2e: 2000         	movs	r0, #0x0
;                 for( i = 0; i < portTOTAL_NUM_REGIONS; i++ )
 805ea30: 9006         	str	r0, [sp, #0x18]
 805ea32: e7ff         	b	0x805ea34 <xPortIsAuthorizedToAccessBuffer+0x68> @ imm = #-0x2
 805ea34: 9806         	ldr	r0, [sp, #0x18]
 805ea36: 2803         	cmp	r0, #0x3
 805ea38: d849         	bhi	0x805eace <xPortIsAuthorizedToAccessBuffer+0x102> @ imm = #0x92
 805ea3a: e7ff         	b	0x805ea3c <xPortIsAuthorizedToAccessBuffer+0x70> @ imm = #-0x2
;                     if( ( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR & portMPU_RLAR_REGION_ENABLE ) == portMPU_RLAR_REGION_ENABLE )
 805ea3c: 9802         	ldr	r0, [sp, #0x8]
 805ea3e: 9906         	ldr	r1, [sp, #0x18]
 805ea40: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805ea44: 7a00         	ldrb	r0, [r0, #0x8]
 805ea46: 07c0         	lsls	r0, r0, #0x1f
 805ea48: b3e0         	cbz	r0, 0x805eac4 <xPortIsAuthorizedToAccessBuffer+0xf8> @ imm = #0x78
 805ea4a: e7ff         	b	0x805ea4c <xPortIsAuthorizedToAccessBuffer+0x80> @ imm = #-0x2
;                         if( portIS_ADDRESS_WITHIN_RANGE( ulBufferStartAddress,
 805ea4c: 9805         	ldr	r0, [sp, #0x14]
 805ea4e: 9902         	ldr	r1, [sp, #0x8]
 805ea50: 9a06         	ldr	r2, [sp, #0x18]
 805ea52: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805ea56: 6849         	ldr	r1, [r1, #0x4]
 805ea58: f021 011f    	bic	r1, r1, #0x1f
 805ea5c: 4288         	cmp	r0, r1
 805ea5e: d330         	blo	0x805eac2 <xPortIsAuthorizedToAccessBuffer+0xf6> @ imm = #0x60
 805ea60: e7ff         	b	0x805ea62 <xPortIsAuthorizedToAccessBuffer+0x96> @ imm = #-0x2
 805ea62: 9805         	ldr	r0, [sp, #0x14]
 805ea64: 9902         	ldr	r1, [sp, #0x8]
 805ea66: 9a06         	ldr	r2, [sp, #0x18]
 805ea68: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805ea6c: 6889         	ldr	r1, [r1, #0x8]
 805ea6e: f041 011f    	orr	r1, r1, #0x1f
;                                                          portEXTRACT_LAST_ADDRESS_FROM_RLAR( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR ) ) &&
 805ea72: 4288         	cmp	r0, r1
 805ea74: d825         	bhi	0x805eac2 <xPortIsAuthorizedToAccessBuffer+0xf6> @ imm = #0x4a
 805ea76: e7ff         	b	0x805ea78 <xPortIsAuthorizedToAccessBuffer+0xac> @ imm = #-0x2
;                             portIS_ADDRESS_WITHIN_RANGE( ulBufferEndAddress,
 805ea78: 9804         	ldr	r0, [sp, #0x10]
 805ea7a: 9902         	ldr	r1, [sp, #0x8]
 805ea7c: 9a06         	ldr	r2, [sp, #0x18]
 805ea7e: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805ea82: 6849         	ldr	r1, [r1, #0x4]
 805ea84: f021 011f    	bic	r1, r1, #0x1f
 805ea88: 4288         	cmp	r0, r1
 805ea8a: d31a         	blo	0x805eac2 <xPortIsAuthorizedToAccessBuffer+0xf6> @ imm = #0x34
 805ea8c: e7ff         	b	0x805ea8e <xPortIsAuthorizedToAccessBuffer+0xc2> @ imm = #-0x2
 805ea8e: 9804         	ldr	r0, [sp, #0x10]
 805ea90: 9902         	ldr	r1, [sp, #0x8]
 805ea92: 9a06         	ldr	r2, [sp, #0x18]
 805ea94: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805ea98: 6889         	ldr	r1, [r1, #0x8]
 805ea9a: f041 011f    	orr	r1, r1, #0x1f
;                                                          portEXTRACT_LAST_ADDRESS_FROM_RLAR( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR ) ) &&
 805ea9e: 4288         	cmp	r0, r1
 805eaa0: d80f         	bhi	0x805eac2 <xPortIsAuthorizedToAccessBuffer+0xf6> @ imm = #0x1e
 805eaa2: e7ff         	b	0x805eaa4 <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #-0x2
;                             portIS_AUTHORIZED( ulAccessRequested,
 805eaa4: 9802         	ldr	r0, [sp, #0x8]
 805eaa6: 9906         	ldr	r1, [sp, #0x18]
 805eaa8: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805eaac: 6840         	ldr	r0, [r0, #0x4]
 805eaae: 490d         	ldr	r1, [pc, #0x34]         @ 0x805eae4 <xPortIsAuthorizedToAccessBuffer+0x118>
 805eab0: 4788         	blx	r1
 805eab2: 9907         	ldr	r1, [sp, #0x1c]
 805eab4: 4008         	ands	r0, r1
;                         if( portIS_ADDRESS_WITHIN_RANGE( ulBufferStartAddress,
 805eab6: 4288         	cmp	r0, r1
 805eab8: d103         	bne	0x805eac2 <xPortIsAuthorizedToAccessBuffer+0xf6> @ imm = #0x6
 805eaba: e7ff         	b	0x805eabc <xPortIsAuthorizedToAccessBuffer+0xf0> @ imm = #-0x2
 805eabc: 2001         	movs	r0, #0x1
;                             xAccessGranted = pdTRUE;
 805eabe: 9003         	str	r0, [sp, #0xc]
;                             break;
 805eac0: e005         	b	0x805eace <xPortIsAuthorizedToAccessBuffer+0x102> @ imm = #0xa
;                     }
 805eac2: e7ff         	b	0x805eac4 <xPortIsAuthorizedToAccessBuffer+0xf8> @ imm = #-0x2
;                 }
 805eac4: e7ff         	b	0x805eac6 <xPortIsAuthorizedToAccessBuffer+0xfa> @ imm = #-0x2
;                 for( i = 0; i < portTOTAL_NUM_REGIONS; i++ )
 805eac6: 9806         	ldr	r0, [sp, #0x18]
 805eac8: 3001         	adds	r0, #0x1
 805eaca: 9006         	str	r0, [sp, #0x18]
 805eacc: e7b2         	b	0x805ea34 <xPortIsAuthorizedToAccessBuffer+0x68> @ imm = #-0x9c
;             }
 805eace: e7ff         	b	0x805ead0 <xPortIsAuthorizedToAccessBuffer+0x104> @ imm = #-0x2
 805ead0: e7ff         	b	0x805ead2 <xPortIsAuthorizedToAccessBuffer+0x106> @ imm = #-0x2
;         return xAccessGranted;
 805ead2: 9803         	ldr	r0, [sp, #0xc]
 805ead4: 9001         	str	r0, [sp, #0x4]
 805ead6: 4804         	ldr	r0, [pc, #0x10]         @ 0x805eae8 <xPortIsAuthorizedToAccessBuffer+0x11c>
 805ead8: 4780         	blx	r0
 805eada: 9801         	ldr	r0, [sp, #0x4]
 805eadc: b00a         	add	sp, #0x28
 805eade: bdd0         	pop	{r4, r6, r7, pc}

0805eae0 <$d.27>:
 805eae0: d5 8d 05 08  	.word	0x08058dd5
 805eae4: ed ea 05 08  	.word	0x0805eaed
 805eae8: 21 05 06 08  	.word	0x08060521

0805eaec <prvGetRegionAccessPermissions>:
;     {
 805eaec: b580         	push	{r7, lr}
 805eaee: 466f         	mov	r7, sp
 805eaf0: b084         	sub	sp, #0x10
 805eaf2: f643 5240    	movw	r2, #0x3d40
 805eaf6: f2c2 0200    	movt	r2, #0x2000
 805eafa: 6811         	ldr	r1, [r2]
 805eafc: f642 5340    	movw	r3, #0x2d40
 805eb00: f2c2 0300    	movt	r3, #0x2000
 805eb04: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805eb08: 3101         	adds	r1, #0x1
 805eb0a: 6011         	str	r1, [r2]
 805eb0c: 9003         	str	r0, [sp, #0xc]
 805eb0e: 2000         	movs	r0, #0x0
;         uint32_t ulAccessPermissions = 0;
 805eb10: 9002         	str	r0, [sp, #0x8]
;         if( ( ulRBARValue & portMPU_RBAR_ACCESS_PERMISSIONS_MASK ) == portMPU_REGION_READ_ONLY )
 805eb12: 9803         	ldr	r0, [sp, #0xc]
 805eb14: f000 0006    	and	r0, r0, #0x6
 805eb18: 2806         	cmp	r0, #0x6
 805eb1a: d103         	bne	0x805eb24 <prvGetRegionAccessPermissions+0x38> @ imm = #0x6
 805eb1c: e7ff         	b	0x805eb1e <prvGetRegionAccessPermissions+0x32> @ imm = #-0x2
 805eb1e: 2001         	movs	r0, #0x1
;             ulAccessPermissions = tskMPU_READ_PERMISSION;
 805eb20: 9002         	str	r0, [sp, #0x8]
;         }
 805eb22: e7ff         	b	0x805eb24 <prvGetRegionAccessPermissions+0x38> @ imm = #-0x2
;         if( ( ulRBARValue & portMPU_RBAR_ACCESS_PERMISSIONS_MASK ) == portMPU_REGION_READ_WRITE )
 805eb24: 9803         	ldr	r0, [sp, #0xc]
 805eb26: f000 0006    	and	r0, r0, #0x6
 805eb2a: 2802         	cmp	r0, #0x2
 805eb2c: d103         	bne	0x805eb36 <prvGetRegionAccessPermissions+0x4a> @ imm = #0x6
 805eb2e: e7ff         	b	0x805eb30 <prvGetRegionAccessPermissions+0x44> @ imm = #-0x2
 805eb30: 2003         	movs	r0, #0x3
;             ulAccessPermissions = ( tskMPU_READ_PERMISSION | tskMPU_WRITE_PERMISSION );
 805eb32: 9002         	str	r0, [sp, #0x8]
;         }
 805eb34: e7ff         	b	0x805eb36 <prvGetRegionAccessPermissions+0x4a> @ imm = #-0x2
;         return ulAccessPermissions;
 805eb36: 9802         	ldr	r0, [sp, #0x8]
 805eb38: 9001         	str	r0, [sp, #0x4]
 805eb3a: 4802         	ldr	r0, [pc, #0x8]          @ 0x805eb44 <prvGetRegionAccessPermissions+0x58>
 805eb3c: 4780         	blx	r0
 805eb3e: 9801         	ldr	r0, [sp, #0x4]
 805eb40: b004         	add	sp, #0x10
 805eb42: bd80         	pop	{r7, pc}

0805eb44 <$d.29>:
 805eb44: 21 05 06 08  	.word	0x08060521
 805eb48: 00 00 00 00  	.word	0x00000000
 805eb4c: 00 00 00 00  	.word	0x00000000

0805eb50 <vRestoreContextOfFirstTask>:
;         __asm volatile
 805eb50: f643 5140    	movw	r1, #0x3d40
 805eb54: f2c2 0100    	movt	r1, #0x2000
 805eb58: 6808         	ldr	r0, [r1]
 805eb5a: f642 5240    	movw	r2, #0x2d40
 805eb5e: f2c2 0200    	movt	r2, #0x2000
 805eb62: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805eb66: 3001         	adds	r0, #0x1
 805eb68: 6008         	str	r0, [r1]

0805eb6a <program_mpu_first_task>:
 805eb6a: 4a1d         	ldr	r2, [pc, #0x74]         @ 0x805ebe0 <pxCurrentTCBConst2>
 805eb6c: 6810         	ldr	r0, [r2]
 805eb6e: f3bf 8f5f    	dmb	sy
 805eb72: 491c         	ldr	r1, [pc, #0x70]         @ 0x805ebe4 <xMPUCTRLConst2>
 805eb74: 680a         	ldr	r2, [r1]
 805eb76: f022 0201    	bic	r2, r2, #0x1
 805eb7a: 600a         	str	r2, [r1]
 805eb7c: 3004         	adds	r0, #0x4
 805eb7e: 6801         	ldr	r1, [r0]
 805eb80: 4a19         	ldr	r2, [pc, #0x64]         @ 0x805ebe8 <xMAIR0Const2>
 805eb82: 6011         	str	r1, [r2]
 805eb84: 3004         	adds	r0, #0x4
 805eb86: 4919         	ldr	r1, [pc, #0x64]         @ 0x805ebec <xRNRConst2>
 805eb88: 4a19         	ldr	r2, [pc, #0x64]         @ 0x805ebf0 <xRBARConst2>
 805eb8a: 2304         	movs	r3, #0x4
 805eb8c: 600b         	str	r3, [r1]
 805eb8e: e8b0 0ff0    	ldm.w	r0!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805eb92: e882 0ff0    	stm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805eb96: 4913         	ldr	r1, [pc, #0x4c]         @ 0x805ebe4 <xMPUCTRLConst2>
 805eb98: 680a         	ldr	r2, [r1]
 805eb9a: f042 0201    	orr	r2, r2, #0x1
 805eb9e: 600a         	str	r2, [r1]
 805eba0: f3bf 8f4f    	dsb	sy

0805eba4 <restore_context_first_task>:
 805eba4: 4a0e         	ldr	r2, [pc, #0x38]         @ 0x805ebe0 <pxCurrentTCBConst2>
 805eba6: 6810         	ldr	r0, [r2]
 805eba8: 6801         	ldr	r1, [r0]

0805ebaa <restore_special_regs_first_task>:
 805ebaa: e931 401c    	ldmdb	r1!, {r2, r3, r4, lr}
 805ebae: f382 8809    	msr	psp, r2
 805ebb2: f383 880b    	msr	psplim, r3
 805ebb6: f384 8814    	msr	control, r4

0805ebba <restore_general_regs_first_task>:
 805ebba: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ebbe: e8a2 0ff0    	stm.w	r2!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ebc2: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805ebc6 <restore_context_done_first_task>:
 805ebc6: 6001         	str	r1, [r0]
 805ebc8: f04f 0000    	mov.w	r0, #0x0
 805ebcc: f380 8811    	msr	basepri, r0
 805ebd0: 4770         	bx	lr
 805ebd2: bf00         	nop
 805ebd4: bf00         	nop
 805ebd6: bf00         	nop
 805ebd8: bf00         	nop
 805ebda: bf00         	nop
 805ebdc: bf00         	nop
 805ebde: bf00         	nop

0805ebe0 <pxCurrentTCBConst2>:
 805ebe0: 00 01 00 20  	.word	0x20000100

0805ebe4 <xMPUCTRLConst2>:
 805ebe4: 94 ed 00 e0  	.word	0xe000ed94

0805ebe8 <xMAIR0Const2>:
 805ebe8: c0 ed 00 e0  	.word	0xe000edc0

0805ebec <xRNRConst2>:
 805ebec: 98 ed 00 e0  	.word	0xe000ed98

0805ebf0 <xRBARConst2>:
 805ebf0: 9c ed 00 e0  	.word	0xe000ed9c

0805ebf4 <vRaisePrivilege>:
;     __asm volatile
 805ebf4: f643 5140    	movw	r1, #0x3d40
 805ebf8: f2c2 0100    	movt	r1, #0x2000
 805ebfc: 6808         	ldr	r0, [r1]
 805ebfe: f642 5240    	movw	r2, #0x2d40
 805ec02: f2c2 0200    	movt	r2, #0x2000
 805ec06: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805ec0a: 3001         	adds	r0, #0x1
 805ec0c: 6008         	str	r0, [r1]
 805ec0e: f3ef 8014    	mrs	r0, control
 805ec12: f020 0001    	bic	r0, r0, #0x1
 805ec16: f380 8814    	msr	control, r0
 805ec1a: 4770         	bx	lr

0805ec1c <vStartFirstTask>:
;     __asm volatile
 805ec1c: f643 5140    	movw	r1, #0x3d40
 805ec20: f2c2 0100    	movt	r1, #0x2000
 805ec24: 6808         	ldr	r0, [r1]
 805ec26: f642 5240    	movw	r2, #0x2d40
 805ec2a: f2c2 0200    	movt	r2, #0x2000
 805ec2e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805ec32: 3001         	adds	r0, #0x1
 805ec34: 6008         	str	r0, [r1]
 805ec36: 4806         	ldr	r0, [pc, #0x18]         @ 0x805ec50 <xVTORConst>
 805ec38: 6800         	ldr	r0, [r0]
 805ec3a: 6800         	ldr	r0, [r0]
 805ec3c: f380 8808    	msr	msp, r0
 805ec40: b662         	cpsie i
 805ec42: b661         	cpsie f
 805ec44: f3bf 8f4f    	dsb	sy
 805ec48: f3bf 8f6f    	isb	sy
 805ec4c: df02         	svc	#0x2
 805ec4e: bf00         	nop

0805ec50 <xVTORConst>:
 805ec50: 08 ed 00 e0  	.word	0xe000ed08

0805ec54 <ulSetInterruptMask>:
;     __asm volatile
 805ec54: f643 5140    	movw	r1, #0x3d40
 805ec58: f2c2 0100    	movt	r1, #0x2000
 805ec5c: 6808         	ldr	r0, [r1]
 805ec5e: f642 5240    	movw	r2, #0x2d40
 805ec62: f2c2 0200    	movt	r2, #0x2000
 805ec66: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805ec6a: 3001         	adds	r0, #0x1
 805ec6c: 6008         	str	r0, [r1]
 805ec6e: f3ef 8011    	mrs	r0, basepri
 805ec72: f04f 01a0    	mov.w	r1, #0xa0
 805ec76: f381 8811    	msr	basepri, r1
 805ec7a: f3bf 8f4f    	dsb	sy
 805ec7e: f3bf 8f6f    	isb	sy
 805ec82: 4770         	bx	lr

0805ec84 <vClearInterruptMask>:
;     __asm volatile
 805ec84: f643 5140    	movw	r1, #0x3d40
 805ec88: f2c2 0100    	movt	r1, #0x2000
 805ec8c: 6808         	ldr	r0, [r1]
 805ec8e: f642 5240    	movw	r2, #0x2d40
 805ec92: f2c2 0200    	movt	r2, #0x2000
 805ec96: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805ec9a: 3001         	adds	r0, #0x1
 805ec9c: 6008         	str	r0, [r1]
 805ec9e: f380 8811    	msr	basepri, r0
 805eca2: f3bf 8f4f    	dsb	sy
 805eca6: f3bf 8f6f    	isb	sy
 805ecaa: 4770         	bx	lr

0805ecac <PendSV_Handler>:
;         __asm volatile
 805ecac: f643 5140    	movw	r1, #0x3d40
 805ecb0: f2c2 0100    	movt	r1, #0x2000
 805ecb4: 6808         	ldr	r0, [r1]
 805ecb6: f642 5240    	movw	r2, #0x2d40
 805ecba: f2c2 0200    	movt	r2, #0x2000
 805ecbe: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805ecc2: 3001         	adds	r0, #0x1
 805ecc4: 6008         	str	r0, [r1]
 805ecc6: 4a2a         	ldr	r2, [pc, #0xa8]         @ 0x805ed70 <pxCurrentTCBConst>
 805ecc8: 6810         	ldr	r0, [r2]
 805ecca: 6801         	ldr	r1, [r0]
 805eccc: f3ef 8209    	mrs	r2, psp

0805ecd0 <save_general_regs>:
 805ecd0: e8a1 0ff0    	stm.w	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ecd4: e892 0ff0    	ldm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ecd8: e8a1 0ff0    	stm.w	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805ecdc <save_special_regs>:
 805ecdc: f3ef 830b    	mrs	r3, psplim
 805ece0: f3ef 8414    	mrs	r4, control
 805ece4: e8a1 401c    	stm.w	r1!, {r2, r3, r4, lr}
 805ece8: 6001         	str	r1, [r0]

0805ecea <select_next_task>:
 805ecea: f04f 00a0    	mov.w	r0, #0xa0
 805ecee: f380 8811    	msr	basepri, r0
 805ecf2: f3bf 8f4f    	dsb	sy
 805ecf6: f3bf 8f6f    	isb	sy
 805ecfa: f7f7 fc1d    	bl	0x8056538 <vTaskSwitchContext> @ imm = #-0x87c6
 805ecfe: f04f 0000    	mov.w	r0, #0x0
 805ed02: f380 8811    	msr	basepri, r0

0805ed06 <program_mpu>:
 805ed06: 4a1a         	ldr	r2, [pc, #0x68]         @ 0x805ed70 <pxCurrentTCBConst>
 805ed08: 6810         	ldr	r0, [r2]
 805ed0a: f3bf 8f5f    	dmb	sy
 805ed0e: 4919         	ldr	r1, [pc, #0x64]         @ 0x805ed74 <xMPUCTRLConst>
 805ed10: 680a         	ldr	r2, [r1]
 805ed12: f022 0201    	bic	r2, r2, #0x1
 805ed16: 600a         	str	r2, [r1]
 805ed18: 3004         	adds	r0, #0x4
 805ed1a: 6801         	ldr	r1, [r0]
 805ed1c: 4a16         	ldr	r2, [pc, #0x58]         @ 0x805ed78 <xMAIR0Const>
 805ed1e: 6011         	str	r1, [r2]
 805ed20: 3004         	adds	r0, #0x4
 805ed22: 4916         	ldr	r1, [pc, #0x58]         @ 0x805ed7c <xRNRConst>
 805ed24: 4a16         	ldr	r2, [pc, #0x58]         @ 0x805ed80 <xRBARConst>
 805ed26: 2304         	movs	r3, #0x4
 805ed28: 600b         	str	r3, [r1]
 805ed2a: e8b0 0ff0    	ldm.w	r0!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ed2e: e882 0ff0    	stm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ed32: 4910         	ldr	r1, [pc, #0x40]         @ 0x805ed74 <xMPUCTRLConst>
 805ed34: 680a         	ldr	r2, [r1]
 805ed36: f042 0201    	orr	r2, r2, #0x1
 805ed3a: 600a         	str	r2, [r1]
 805ed3c: f3bf 8f4f    	dsb	sy

0805ed40 <restore_context>:
 805ed40: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805ed70 <pxCurrentTCBConst>
 805ed42: 6810         	ldr	r0, [r2]
 805ed44: 6801         	ldr	r1, [r0]

0805ed46 <restore_special_regs>:
 805ed46: e931 401c    	ldmdb	r1!, {r2, r3, r4, lr}
 805ed4a: f382 8809    	msr	psp, r2
 805ed4e: f383 880b    	msr	psplim, r3
 805ed52: f384 8814    	msr	control, r4

0805ed56 <restore_general_regs>:
 805ed56: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ed5a: e8a2 0ff0    	stm.w	r2!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805ed5e: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805ed62 <restore_context_done>:
 805ed62: 6001         	str	r1, [r0]
 805ed64: 4770         	bx	lr
 805ed66: bf00         	nop
 805ed68: bf00         	nop
 805ed6a: bf00         	nop
 805ed6c: bf00         	nop
 805ed6e: bf00         	nop

0805ed70 <pxCurrentTCBConst>:
 805ed70: 00 01 00 20  	.word	0x20000100

0805ed74 <xMPUCTRLConst>:
 805ed74: 94 ed 00 e0  	.word	0xe000ed94

0805ed78 <xMAIR0Const>:
 805ed78: c0 ed 00 e0  	.word	0xe000edc0

0805ed7c <xRNRConst>:
 805ed7c: 98 ed 00 e0  	.word	0xe000ed98

0805ed80 <xRBARConst>:
 805ed80: 9c ed 00 e0  	.word	0xe000ed9c

0805ed84 <SVC_Handler>:
;         __asm volatile
 805ed84: f643 5140    	movw	r1, #0x3d40
 805ed88: f2c2 0100    	movt	r1, #0x2000
 805ed8c: 6808         	ldr	r0, [r1]
 805ed8e: f642 5240    	movw	r2, #0x2d40
 805ed92: f2c2 0200    	movt	r2, #0x2000
 805ed96: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805ed9a: 3001         	adds	r0, #0x1
 805ed9c: 6008         	str	r0, [r1]
 805ed9e: f01e 0f04    	tst.w	lr, #0x4
 805eda2: bf0c         	ite	eq
 805eda4: f3ef 8008    	mrseq	r0, msp
 805eda8: f3ef 8009    	mrsne	r0, psp
 805edac: 4900         	ldr	r1, [pc, #0x0]          @ 0x805edb0 <svchandler_address_const>
 805edae: 4708         	bx	r1

0805edb0 <svchandler_address_const>:
 805edb0: 11 e2 05 08  	.word	0x0805e211
 805edb4: 00 00 00 00  	.word	0x00000000
 805edb8: 00 00 00 00  	.word	0x00000000
 805edbc: 00 00        	.short	0x0000
 805edbe: 00           	.byte	0x00

0805edbf <__privileged_functions_end__>:
 805edbf: 00           	.byte	0x00

Disassembly of section .freertos_system_calls:

0805edc0 <__syscalls_flash_start__>:
;         {
 805edc0: b580         	push	{r7, lr}
 805edc2: 466f         	mov	r7, sp
 805edc4: b084         	sub	sp, #0x10
 805edc6: f643 5340    	movw	r3, #0x3d40
 805edca: f2c2 0300    	movt	r3, #0x2000
 805edce: 681a         	ldr	r2, [r3]
 805edd0: f642 5c40    	movw	r12, #0x2d40
 805edd4: f2c2 0c00    	movt	r12, #0x2000
 805edd8: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805eddc: 3201         	adds	r2, #0x1
 805edde: 601a         	str	r2, [r3]
 805ede0: 9003         	str	r0, [sp, #0xc]
 805ede2: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ede4: 480c         	ldr	r0, [pc, #0x30]         @ 0x805ee18 <__syscalls_flash_start__+0x58>
 805ede6: 4780         	blx	r0
 805ede8: b948         	cbnz	r0, 0x805edfe <__syscalls_flash_start__+0x3e> @ imm = #0x12
 805edea: e7ff         	b	0x805edec <__syscalls_flash_start__+0x2c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805edec: df03         	svc	#0x3
;                 xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 805edee: 9803         	ldr	r0, [sp, #0xc]
 805edf0: 9902         	ldr	r1, [sp, #0x8]
 805edf2: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805ee20 <__syscalls_flash_start__+0x60>
 805edf4: 4790         	blx	r2
 805edf6: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805edf8: 480a         	ldr	r0, [pc, #0x28]         @ 0x805ee24 <__syscalls_flash_start__+0x64>
 805edfa: 4780         	blx	r0
;             }
 805edfc: e005         	b	0x805ee0a <__syscalls_flash_start__+0x4a> @ imm = #0xa
;                 xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 805edfe: 9803         	ldr	r0, [sp, #0xc]
 805ee00: 9902         	ldr	r1, [sp, #0x8]
 805ee02: 4a06         	ldr	r2, [pc, #0x18]         @ 0x805ee1c <__syscalls_flash_start__+0x5c>
 805ee04: 4790         	blx	r2
 805ee06: 9001         	str	r0, [sp, #0x4]
 805ee08: e7ff         	b	0x805ee0a <__syscalls_flash_start__+0x4a> @ imm = #-0x2
;             return xReturn;
 805ee0a: 9801         	ldr	r0, [sp, #0x4]
 805ee0c: 9000         	str	r0, [sp]
 805ee0e: 4806         	ldr	r0, [pc, #0x18]         @ 0x805ee28 <__syscalls_flash_start__+0x68>
 805ee10: 4780         	blx	r0
 805ee12: 9800         	ldr	r0, [sp]
 805ee14: b004         	add	sp, #0x10
 805ee16: bd80         	pop	{r7, pc}

0805ee18 <$d.5>:
 805ee18: 31 22 06 08  	.word	0x08062231
 805ee1c: 99 58 05 08  	.word	0x08055899
 805ee20: 99 58 05 08  	.word	0x08055899
 805ee24: 61 22 06 08  	.word	0x08062261
 805ee28: 21 05 06 08  	.word	0x08060521

0805ee2c <MPU_vTaskDelay>:
;         {
 805ee2c: b580         	push	{r7, lr}
 805ee2e: 466f         	mov	r7, sp
 805ee30: b082         	sub	sp, #0x8
 805ee32: f643 5240    	movw	r2, #0x3d40
 805ee36: f2c2 0200    	movt	r2, #0x2000
 805ee3a: 6811         	ldr	r1, [r2]
 805ee3c: f642 5340    	movw	r3, #0x2d40
 805ee40: f2c2 0300    	movt	r3, #0x2000
 805ee44: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805ee48: 3101         	adds	r1, #0x1
 805ee4a: 6011         	str	r1, [r2]
 805ee4c: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ee4e: 4809         	ldr	r0, [pc, #0x24]         @ 0x805ee74 <MPU_vTaskDelay+0x48>
 805ee50: 4780         	blx	r0
 805ee52: b938         	cbnz	r0, 0x805ee64 <MPU_vTaskDelay+0x38> @ imm = #0xe
 805ee54: e7ff         	b	0x805ee56 <MPU_vTaskDelay+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ee56: df03         	svc	#0x3
;                 vTaskDelay( xTicksToDelay );
 805ee58: 9801         	ldr	r0, [sp, #0x4]
 805ee5a: 4908         	ldr	r1, [pc, #0x20]         @ 0x805ee7c <MPU_vTaskDelay+0x50>
 805ee5c: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805ee5e: 4808         	ldr	r0, [pc, #0x20]         @ 0x805ee80 <MPU_vTaskDelay+0x54>
 805ee60: 4780         	blx	r0
;             }
 805ee62: e003         	b	0x805ee6c <MPU_vTaskDelay+0x40> @ imm = #0x6
;                 vTaskDelay( xTicksToDelay );
 805ee64: 9801         	ldr	r0, [sp, #0x4]
 805ee66: 4904         	ldr	r1, [pc, #0x10]         @ 0x805ee78 <MPU_vTaskDelay+0x4c>
 805ee68: 4788         	blx	r1
 805ee6a: e7ff         	b	0x805ee6c <MPU_vTaskDelay+0x40> @ imm = #-0x2
;         }
 805ee6c: 4805         	ldr	r0, [pc, #0x14]         @ 0x805ee84 <MPU_vTaskDelay+0x58>
 805ee6e: 4780         	blx	r0
 805ee70: b002         	add	sp, #0x8
 805ee72: bd80         	pop	{r7, pc}

0805ee74 <$d.7>:
 805ee74: 31 22 06 08  	.word	0x08062231
 805ee78: dd 5d 05 08  	.word	0x08055ddd
 805ee7c: dd 5d 05 08  	.word	0x08055ddd
 805ee80: 61 22 06 08  	.word	0x08062261
 805ee84: 21 05 06 08  	.word	0x08060521

0805ee88 <MPU_uxTaskPriorityGet>:
;         {
 805ee88: b580         	push	{r7, lr}
 805ee8a: 466f         	mov	r7, sp
 805ee8c: b084         	sub	sp, #0x10
 805ee8e: f643 5240    	movw	r2, #0x3d40
 805ee92: f2c2 0200    	movt	r2, #0x2000
 805ee96: 6811         	ldr	r1, [r2]
 805ee98: f642 5340    	movw	r3, #0x2d40
 805ee9c: f2c2 0300    	movt	r3, #0x2000
 805eea0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805eea4: 3101         	adds	r1, #0x1
 805eea6: 6011         	str	r1, [r2]
 805eea8: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805eeaa: 480c         	ldr	r0, [pc, #0x30]         @ 0x805eedc <MPU_uxTaskPriorityGet+0x54>
 805eeac: 4780         	blx	r0
 805eeae: b940         	cbnz	r0, 0x805eec2 <MPU_uxTaskPriorityGet+0x3a> @ imm = #0x10
 805eeb0: e7ff         	b	0x805eeb2 <MPU_uxTaskPriorityGet+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805eeb2: df03         	svc	#0x3
;                 uxReturn = uxTaskPriorityGet( pxTask );
 805eeb4: 9803         	ldr	r0, [sp, #0xc]
 805eeb6: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805eee4 <MPU_uxTaskPriorityGet+0x5c>
 805eeb8: 4788         	blx	r1
 805eeba: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805eebc: 480a         	ldr	r0, [pc, #0x28]         @ 0x805eee8 <MPU_uxTaskPriorityGet+0x60>
 805eebe: 4780         	blx	r0
;             }
 805eec0: e004         	b	0x805eecc <MPU_uxTaskPriorityGet+0x44> @ imm = #0x8
;                 uxReturn = uxTaskPriorityGet( pxTask );
 805eec2: 9803         	ldr	r0, [sp, #0xc]
 805eec4: 4906         	ldr	r1, [pc, #0x18]         @ 0x805eee0 <MPU_uxTaskPriorityGet+0x58>
 805eec6: 4788         	blx	r1
 805eec8: 9002         	str	r0, [sp, #0x8]
 805eeca: e7ff         	b	0x805eecc <MPU_uxTaskPriorityGet+0x44> @ imm = #-0x2
;             return uxReturn;
 805eecc: 9802         	ldr	r0, [sp, #0x8]
 805eece: 9001         	str	r0, [sp, #0x4]
 805eed0: 4806         	ldr	r0, [pc, #0x18]         @ 0x805eeec <MPU_uxTaskPriorityGet+0x64>
 805eed2: 4780         	blx	r0
 805eed4: 9801         	ldr	r0, [sp, #0x4]
 805eed6: b004         	add	sp, #0x10
 805eed8: bd80         	pop	{r7, pc}
 805eeda: bf00         	nop

0805eedc <$d.9>:
 805eedc: 31 22 06 08  	.word	0x08062231
 805eee0: c1 5f 05 08  	.word	0x08055fc1
 805eee4: c1 5f 05 08  	.word	0x08055fc1
 805eee8: 61 22 06 08  	.word	0x08062261
 805eeec: 21 05 06 08  	.word	0x08060521

0805eef0 <MPU_eTaskGetState>:
;         {
 805eef0: b580         	push	{r7, lr}
 805eef2: 466f         	mov	r7, sp
 805eef4: b084         	sub	sp, #0x10
 805eef6: f643 5240    	movw	r2, #0x3d40
 805eefa: f2c2 0200    	movt	r2, #0x2000
 805eefe: 6811         	ldr	r1, [r2]
 805ef00: f642 5340    	movw	r3, #0x2d40
 805ef04: f2c2 0300    	movt	r3, #0x2000
 805ef08: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805ef0c: 3101         	adds	r1, #0x1
 805ef0e: 6011         	str	r1, [r2]
 805ef10: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ef12: 480d         	ldr	r0, [pc, #0x34]         @ 0x805ef48 <MPU_eTaskGetState+0x58>
 805ef14: 4780         	blx	r0
 805ef16: b948         	cbnz	r0, 0x805ef2c <MPU_eTaskGetState+0x3c> @ imm = #0x12
 805ef18: e7ff         	b	0x805ef1a <MPU_eTaskGetState+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ef1a: df03         	svc	#0x3
;                 eReturn = eTaskGetState( pxTask );
 805ef1c: 9803         	ldr	r0, [sp, #0xc]
 805ef1e: 490c         	ldr	r1, [pc, #0x30]         @ 0x805ef50 <MPU_eTaskGetState+0x60>
 805ef20: 4788         	blx	r1
 805ef22: f807 0c05    	strb	r0, [r7, #-5]
;                 portRESET_PRIVILEGE();
 805ef26: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805ef54 <MPU_eTaskGetState+0x64>
 805ef28: 4780         	blx	r0
;             }
 805ef2a: e005         	b	0x805ef38 <MPU_eTaskGetState+0x48> @ imm = #0xa
;                 eReturn = eTaskGetState( pxTask );
 805ef2c: 9803         	ldr	r0, [sp, #0xc]
 805ef2e: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805ef4c <MPU_eTaskGetState+0x5c>
 805ef30: 4788         	blx	r1
 805ef32: f807 0c05    	strb	r0, [r7, #-5]
 805ef36: e7ff         	b	0x805ef38 <MPU_eTaskGetState+0x48> @ imm = #-0x2
;             return eReturn;
 805ef38: f817 0c05    	ldrb	r0, [r7, #-5]
 805ef3c: 9001         	str	r0, [sp, #0x4]
 805ef3e: 4806         	ldr	r0, [pc, #0x18]         @ 0x805ef58 <MPU_eTaskGetState+0x68>
 805ef40: 4780         	blx	r0
 805ef42: 9801         	ldr	r0, [sp, #0x4]
 805ef44: b004         	add	sp, #0x10
 805ef46: bd80         	pop	{r7, pc}

0805ef48 <$d.13>:
 805ef48: 31 22 06 08  	.word	0x08062231
 805ef4c: 65 5e 05 08  	.word	0x08055e65
 805ef50: 65 5e 05 08  	.word	0x08055e65
 805ef54: 61 22 06 08  	.word	0x08062261
 805ef58: 21 05 06 08  	.word	0x08060521

0805ef5c <MPU_vTaskGetInfo>:
;         {
 805ef5c: b5b0         	push	{r4, r5, r7, lr}
 805ef5e: af02         	add	r7, sp, #0x8
 805ef60: b084         	sub	sp, #0x10
 805ef62: 4674         	mov	r4, lr
 805ef64: f643 5e40    	movw	lr, #0x3d40
 805ef68: f2c2 0e00    	movt	lr, #0x2000
 805ef6c: f8de c000    	ldr.w	r12, [lr]
 805ef70: f642 5540    	movw	r5, #0x2d40
 805ef74: f2c2 0500    	movt	r5, #0x2000
 805ef78: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805ef7c: f10c 0c01    	add.w	r12, r12, #0x1
 805ef80: f8ce c000    	str.w	r12, [lr]
 805ef84: 9003         	str	r0, [sp, #0xc]
 805ef86: 9102         	str	r1, [sp, #0x8]
 805ef88: 9201         	str	r2, [sp, #0x4]
 805ef8a: f807 3c15    	strb	r3, [r7, #-21]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ef8e: 480e         	ldr	r0, [pc, #0x38]         @ 0x805efc8 <MPU_vTaskGetInfo+0x6c>
 805ef90: 4780         	blx	r0
 805ef92: b960         	cbnz	r0, 0x805efae <MPU_vTaskGetInfo+0x52> @ imm = #0x18
 805ef94: e7ff         	b	0x805ef96 <MPU_vTaskGetInfo+0x3a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ef96: df03         	svc	#0x3
;                 vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 805ef98: 9803         	ldr	r0, [sp, #0xc]
 805ef9a: 9902         	ldr	r1, [sp, #0x8]
 805ef9c: 9a01         	ldr	r2, [sp, #0x4]
 805ef9e: f817 3c15    	ldrb	r3, [r7, #-21]
 805efa2: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x805efd0 <MPU_vTaskGetInfo+0x74>
 805efa6: 47e0         	blx	r12
;                 portRESET_PRIVILEGE();
 805efa8: 480a         	ldr	r0, [pc, #0x28]         @ 0x805efd4 <MPU_vTaskGetInfo+0x78>
 805efaa: 4780         	blx	r0
;             }
 805efac: e008         	b	0x805efc0 <MPU_vTaskGetInfo+0x64> @ imm = #0x10
;                 vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 805efae: 9803         	ldr	r0, [sp, #0xc]
 805efb0: 9902         	ldr	r1, [sp, #0x8]
 805efb2: 9a01         	ldr	r2, [sp, #0x4]
 805efb4: f817 3c15    	ldrb	r3, [r7, #-21]
 805efb8: f8df c010    	ldr.w	r12, [pc, #0x10]        @ 0x805efcc <MPU_vTaskGetInfo+0x70>
 805efbc: 47e0         	blx	r12
 805efbe: e7ff         	b	0x805efc0 <MPU_vTaskGetInfo+0x64> @ imm = #-0x2
;         }
 805efc0: 4805         	ldr	r0, [pc, #0x14]         @ 0x805efd8 <MPU_vTaskGetInfo+0x7c>
 805efc2: 4780         	blx	r0
 805efc4: b004         	add	sp, #0x10
 805efc6: bdb0         	pop	{r4, r5, r7, pc}

0805efc8 <$d.15>:
 805efc8: 31 22 06 08  	.word	0x08062231
 805efcc: a5 79 05 08  	.word	0x080579a5
 805efd0: a5 79 05 08  	.word	0x080579a5
 805efd4: 61 22 06 08  	.word	0x08062261
 805efd8: 21 05 06 08  	.word	0x08060521

0805efdc <MPU_vTaskSuspend>:
;         {
 805efdc: b580         	push	{r7, lr}
 805efde: 466f         	mov	r7, sp
 805efe0: b082         	sub	sp, #0x8
 805efe2: f643 5240    	movw	r2, #0x3d40
 805efe6: f2c2 0200    	movt	r2, #0x2000
 805efea: 6811         	ldr	r1, [r2]
 805efec: f642 5340    	movw	r3, #0x2d40
 805eff0: f2c2 0300    	movt	r3, #0x2000
 805eff4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805eff8: 3101         	adds	r1, #0x1
 805effa: 6011         	str	r1, [r2]
 805effc: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805effe: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f024 <MPU_vTaskSuspend+0x48>
 805f000: 4780         	blx	r0
 805f002: b938         	cbnz	r0, 0x805f014 <MPU_vTaskSuspend+0x38> @ imm = #0xe
 805f004: e7ff         	b	0x805f006 <MPU_vTaskSuspend+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f006: df03         	svc	#0x3
;                 vTaskSuspend( pxTaskToSuspend );
 805f008: 9801         	ldr	r0, [sp, #0x4]
 805f00a: 4908         	ldr	r1, [pc, #0x20]         @ 0x805f02c <MPU_vTaskSuspend+0x50>
 805f00c: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805f00e: 4808         	ldr	r0, [pc, #0x20]         @ 0x805f030 <MPU_vTaskSuspend+0x54>
 805f010: 4780         	blx	r0
;             }
 805f012: e003         	b	0x805f01c <MPU_vTaskSuspend+0x40> @ imm = #0x6
;                 vTaskSuspend( pxTaskToSuspend );
 805f014: 9801         	ldr	r0, [sp, #0x4]
 805f016: 4904         	ldr	r1, [pc, #0x10]         @ 0x805f028 <MPU_vTaskSuspend+0x4c>
 805f018: 4788         	blx	r1
 805f01a: e7ff         	b	0x805f01c <MPU_vTaskSuspend+0x40> @ imm = #-0x2
;         }
 805f01c: 4805         	ldr	r0, [pc, #0x14]         @ 0x805f034 <MPU_vTaskSuspend+0x58>
 805f01e: 4780         	blx	r0
 805f020: b002         	add	sp, #0x8
 805f022: bd80         	pop	{r7, pc}

0805f024 <$d.17>:
 805f024: 31 22 06 08  	.word	0x08062231
 805f028: bd 63 05 08  	.word	0x080563bd
 805f02c: bd 63 05 08  	.word	0x080563bd
 805f030: 61 22 06 08  	.word	0x08062261
 805f034: 21 05 06 08  	.word	0x08060521

0805f038 <MPU_vTaskResume>:
;         {
 805f038: b580         	push	{r7, lr}
 805f03a: 466f         	mov	r7, sp
 805f03c: b082         	sub	sp, #0x8
 805f03e: f643 5240    	movw	r2, #0x3d40
 805f042: f2c2 0200    	movt	r2, #0x2000
 805f046: 6811         	ldr	r1, [r2]
 805f048: f642 5340    	movw	r3, #0x2d40
 805f04c: f2c2 0300    	movt	r3, #0x2000
 805f050: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805f054: 3101         	adds	r1, #0x1
 805f056: 6011         	str	r1, [r2]
 805f058: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f05a: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f080 <MPU_vTaskResume+0x48>
 805f05c: 4780         	blx	r0
 805f05e: b938         	cbnz	r0, 0x805f070 <MPU_vTaskResume+0x38> @ imm = #0xe
 805f060: e7ff         	b	0x805f062 <MPU_vTaskResume+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f062: df03         	svc	#0x3
;                 vTaskResume( pxTaskToResume );
 805f064: 9801         	ldr	r0, [sp, #0x4]
 805f066: 4908         	ldr	r1, [pc, #0x20]         @ 0x805f088 <MPU_vTaskResume+0x50>
 805f068: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805f06a: 4808         	ldr	r0, [pc, #0x20]         @ 0x805f08c <MPU_vTaskResume+0x54>
 805f06c: 4780         	blx	r0
;             }
 805f06e: e003         	b	0x805f078 <MPU_vTaskResume+0x40> @ imm = #0x6
;                 vTaskResume( pxTaskToResume );
 805f070: 9801         	ldr	r0, [sp, #0x4]
 805f072: 4904         	ldr	r1, [pc, #0x10]         @ 0x805f084 <MPU_vTaskResume+0x4c>
 805f074: 4788         	blx	r1
 805f076: e7ff         	b	0x805f078 <MPU_vTaskResume+0x40> @ imm = #-0x2
;         }
 805f078: 4805         	ldr	r0, [pc, #0x14]         @ 0x805f090 <MPU_vTaskResume+0x58>
 805f07a: 4780         	blx	r0
 805f07c: b002         	add	sp, #0x8
 805f07e: bd80         	pop	{r7, pc}

0805f080 <$d.19>:
 805f080: 31 22 06 08  	.word	0x08062231
 805f084: 21 66 05 08  	.word	0x08056621
 805f088: 21 66 05 08  	.word	0x08056621
 805f08c: 61 22 06 08  	.word	0x08062261
 805f090: 21 05 06 08  	.word	0x08060521

0805f094 <MPU_xTaskGetTickCount>:
;     {
 805f094: b580         	push	{r7, lr}
 805f096: 466f         	mov	r7, sp
 805f098: b082         	sub	sp, #0x8
 805f09a: f643 5140    	movw	r1, #0x3d40
 805f09e: f2c2 0100    	movt	r1, #0x2000
 805f0a2: 6808         	ldr	r0, [r1]
 805f0a4: f642 5240    	movw	r2, #0x2d40
 805f0a8: f2c2 0200    	movt	r2, #0x2000
 805f0ac: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805f0b0: 3001         	adds	r0, #0x1
 805f0b2: 6008         	str	r0, [r1]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f0b4: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f0e0 <MPU_xTaskGetTickCount+0x4c>
 805f0b6: 4780         	blx	r0
 805f0b8: b938         	cbnz	r0, 0x805f0ca <MPU_xTaskGetTickCount+0x36> @ imm = #0xe
 805f0ba: e7ff         	b	0x805f0bc <MPU_xTaskGetTickCount+0x28> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f0bc: df03         	svc	#0x3
;             xReturn = xTaskGetTickCount();
 805f0be: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f0e8 <MPU_xTaskGetTickCount+0x54>
 805f0c0: 4780         	blx	r0
 805f0c2: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805f0c4: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f0ec <MPU_xTaskGetTickCount+0x58>
 805f0c6: 4780         	blx	r0
;         }
 805f0c8: e003         	b	0x805f0d2 <MPU_xTaskGetTickCount+0x3e> @ imm = #0x6
;             xReturn = xTaskGetTickCount();
 805f0ca: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f0e4 <MPU_xTaskGetTickCount+0x50>
 805f0cc: 4780         	blx	r0
 805f0ce: 9001         	str	r0, [sp, #0x4]
 805f0d0: e7ff         	b	0x805f0d2 <MPU_xTaskGetTickCount+0x3e> @ imm = #-0x2
;         return xReturn;
 805f0d2: 9801         	ldr	r0, [sp, #0x4]
 805f0d4: 9000         	str	r0, [sp]
 805f0d6: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f0f0 <MPU_xTaskGetTickCount+0x5c>
 805f0d8: 4780         	blx	r0
 805f0da: 9800         	ldr	r0, [sp]
 805f0dc: b002         	add	sp, #0x8
 805f0de: bd80         	pop	{r7, pc}

0805f0e0 <$d.25>:
 805f0e0: 31 22 06 08  	.word	0x08062231
 805f0e4: 49 6d 05 08  	.word	0x08056d49
 805f0e8: 49 6d 05 08  	.word	0x08056d49
 805f0ec: 61 22 06 08  	.word	0x08062261
 805f0f0: 21 05 06 08  	.word	0x08060521

0805f0f4 <MPU_uxTaskGetNumberOfTasks>:
;     {
 805f0f4: b580         	push	{r7, lr}
 805f0f6: 466f         	mov	r7, sp
 805f0f8: b082         	sub	sp, #0x8
 805f0fa: f643 5140    	movw	r1, #0x3d40
 805f0fe: f2c2 0100    	movt	r1, #0x2000
 805f102: 6808         	ldr	r0, [r1]
 805f104: f642 5240    	movw	r2, #0x2d40
 805f108: f2c2 0200    	movt	r2, #0x2000
 805f10c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805f110: 3001         	adds	r0, #0x1
 805f112: 6008         	str	r0, [r1]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f114: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f140 <MPU_uxTaskGetNumberOfTasks+0x4c>
 805f116: 4780         	blx	r0
 805f118: b938         	cbnz	r0, 0x805f12a <MPU_uxTaskGetNumberOfTasks+0x36> @ imm = #0xe
 805f11a: e7ff         	b	0x805f11c <MPU_uxTaskGetNumberOfTasks+0x28> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f11c: df03         	svc	#0x3
;             uxReturn = uxTaskGetNumberOfTasks();
 805f11e: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f148 <MPU_uxTaskGetNumberOfTasks+0x54>
 805f120: 4780         	blx	r0
 805f122: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805f124: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f14c <MPU_uxTaskGetNumberOfTasks+0x58>
 805f126: 4780         	blx	r0
;         }
 805f128: e003         	b	0x805f132 <MPU_uxTaskGetNumberOfTasks+0x3e> @ imm = #0x6
;             uxReturn = uxTaskGetNumberOfTasks();
 805f12a: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f144 <MPU_uxTaskGetNumberOfTasks+0x50>
 805f12c: 4780         	blx	r0
 805f12e: 9001         	str	r0, [sp, #0x4]
 805f130: e7ff         	b	0x805f132 <MPU_uxTaskGetNumberOfTasks+0x3e> @ imm = #-0x2
;         return uxReturn;
 805f132: 9801         	ldr	r0, [sp, #0x4]
 805f134: 9000         	str	r0, [sp]
 805f136: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f150 <MPU_uxTaskGetNumberOfTasks+0x5c>
 805f138: 4780         	blx	r0
 805f13a: 9800         	ldr	r0, [sp]
 805f13c: b002         	add	sp, #0x8
 805f13e: bd80         	pop	{r7, pc}

0805f140 <$d.27>:
 805f140: 31 22 06 08  	.word	0x08062231
 805f144: d5 6d 05 08  	.word	0x08056dd5
 805f148: d5 6d 05 08  	.word	0x08056dd5
 805f14c: 61 22 06 08  	.word	0x08062261
 805f150: 21 05 06 08  	.word	0x08060521

0805f154 <MPU_uxTaskGetSystemState>:
;         {
 805f154: b5d0         	push	{r4, r6, r7, lr}
 805f156: af02         	add	r7, sp, #0x8
 805f158: b086         	sub	sp, #0x18
 805f15a: f643 5c40    	movw	r12, #0x3d40
 805f15e: f2c2 0c00    	movt	r12, #0x2000
 805f162: f8dc 3000    	ldr.w	r3, [r12]
 805f166: f642 5440    	movw	r4, #0x2d40
 805f16a: f2c2 0400    	movt	r4, #0x2000
 805f16e: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805f172: 3301         	adds	r3, #0x1
 805f174: f8cc 3000    	str.w	r3, [r12]
 805f178: 9005         	str	r0, [sp, #0x14]
 805f17a: 9104         	str	r1, [sp, #0x10]
 805f17c: 9203         	str	r2, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f17e: 480e         	ldr	r0, [pc, #0x38]         @ 0x805f1b8 <MPU_uxTaskGetSystemState+0x64>
 805f180: 4780         	blx	r0
 805f182: b950         	cbnz	r0, 0x805f19a <MPU_uxTaskGetSystemState+0x46> @ imm = #0x14
 805f184: e7ff         	b	0x805f186 <MPU_uxTaskGetSystemState+0x32> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f186: df03         	svc	#0x3
;                 uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 805f188: 9805         	ldr	r0, [sp, #0x14]
 805f18a: 9904         	ldr	r1, [sp, #0x10]
 805f18c: 9a03         	ldr	r2, [sp, #0xc]
 805f18e: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x805f1c0 <MPU_uxTaskGetSystemState+0x6c>
 805f190: 4798         	blx	r3
 805f192: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805f194: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805f1c4 <MPU_uxTaskGetSystemState+0x70>
 805f196: 4780         	blx	r0
;             }
 805f198: e006         	b	0x805f1a8 <MPU_uxTaskGetSystemState+0x54> @ imm = #0xc
;                 uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 805f19a: 9805         	ldr	r0, [sp, #0x14]
 805f19c: 9904         	ldr	r1, [sp, #0x10]
 805f19e: 9a03         	ldr	r2, [sp, #0xc]
 805f1a0: 4b06         	ldr	r3, [pc, #0x18]         @ 0x805f1bc <MPU_uxTaskGetSystemState+0x68>
 805f1a2: 4798         	blx	r3
 805f1a4: 9002         	str	r0, [sp, #0x8]
 805f1a6: e7ff         	b	0x805f1a8 <MPU_uxTaskGetSystemState+0x54> @ imm = #-0x2
;             return uxReturn;
 805f1a8: 9802         	ldr	r0, [sp, #0x8]
 805f1aa: 9001         	str	r0, [sp, #0x4]
 805f1ac: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f1c8 <MPU_uxTaskGetSystemState+0x74>
 805f1ae: 4780         	blx	r0
 805f1b0: 9801         	ldr	r0, [sp, #0x4]
 805f1b2: b006         	add	sp, #0x18
 805f1b4: bdd0         	pop	{r4, r6, r7, pc}
 805f1b6: bf00         	nop

0805f1b8 <$d.29>:
 805f1b8: 31 22 06 08  	.word	0x08062231
 805f1bc: 79 6e 05 08  	.word	0x08056e79
 805f1c0: 79 6e 05 08  	.word	0x08056e79
 805f1c4: 61 22 06 08  	.word	0x08062261
 805f1c8: 21 05 06 08  	.word	0x08060521

0805f1cc <MPU_uxTaskGetStackHighWaterMark>:
;         {
 805f1cc: b580         	push	{r7, lr}
 805f1ce: 466f         	mov	r7, sp
 805f1d0: b084         	sub	sp, #0x10
 805f1d2: f643 5240    	movw	r2, #0x3d40
 805f1d6: f2c2 0200    	movt	r2, #0x2000
 805f1da: 6811         	ldr	r1, [r2]
 805f1dc: f642 5340    	movw	r3, #0x2d40
 805f1e0: f2c2 0300    	movt	r3, #0x2000
 805f1e4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805f1e8: 3101         	adds	r1, #0x1
 805f1ea: 6011         	str	r1, [r2]
 805f1ec: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f1ee: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f220 <MPU_uxTaskGetStackHighWaterMark+0x54>
 805f1f0: 4780         	blx	r0
 805f1f2: b940         	cbnz	r0, 0x805f206 <MPU_uxTaskGetStackHighWaterMark+0x3a> @ imm = #0x10
 805f1f4: e7ff         	b	0x805f1f6 <MPU_uxTaskGetStackHighWaterMark+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f1f6: df03         	svc	#0x3
;                 uxReturn = uxTaskGetStackHighWaterMark( xTask );
 805f1f8: 9803         	ldr	r0, [sp, #0xc]
 805f1fa: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805f228 <MPU_uxTaskGetStackHighWaterMark+0x5c>
 805f1fc: 4788         	blx	r1
 805f1fe: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805f200: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f22c <MPU_uxTaskGetStackHighWaterMark+0x60>
 805f202: 4780         	blx	r0
;             }
 805f204: e004         	b	0x805f210 <MPU_uxTaskGetStackHighWaterMark+0x44> @ imm = #0x8
;                 uxReturn = uxTaskGetStackHighWaterMark( xTask );
 805f206: 9803         	ldr	r0, [sp, #0xc]
 805f208: 4906         	ldr	r1, [pc, #0x18]         @ 0x805f224 <MPU_uxTaskGetStackHighWaterMark+0x58>
 805f20a: 4788         	blx	r1
 805f20c: 9002         	str	r0, [sp, #0x8]
 805f20e: e7ff         	b	0x805f210 <MPU_uxTaskGetStackHighWaterMark+0x44> @ imm = #-0x2
;             return uxReturn;
 805f210: 9802         	ldr	r0, [sp, #0x8]
 805f212: 9001         	str	r0, [sp, #0x4]
 805f214: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f230 <MPU_uxTaskGetStackHighWaterMark+0x64>
 805f216: 4780         	blx	r0
 805f218: 9801         	ldr	r0, [sp, #0x4]
 805f21a: b004         	add	sp, #0x10
 805f21c: bd80         	pop	{r7, pc}
 805f21e: bf00         	nop

0805f220 <$d.33>:
 805f220: 31 22 06 08  	.word	0x08062231
 805f224: 55 7b 05 08  	.word	0x08057b55
 805f228: 55 7b 05 08  	.word	0x08057b55
 805f22c: 61 22 06 08  	.word	0x08062261
 805f230: 21 05 06 08  	.word	0x08060521

0805f234 <MPU_xTaskGetCurrentTaskHandle>:
;         {
 805f234: b580         	push	{r7, lr}
 805f236: 466f         	mov	r7, sp
 805f238: b082         	sub	sp, #0x8
 805f23a: f643 5140    	movw	r1, #0x3d40
 805f23e: f2c2 0100    	movt	r1, #0x2000
 805f242: 6808         	ldr	r0, [r1]
 805f244: f642 5240    	movw	r2, #0x2d40
 805f248: f2c2 0200    	movt	r2, #0x2000
 805f24c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805f250: 3001         	adds	r0, #0x1
 805f252: 6008         	str	r0, [r1]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f254: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f280 <MPU_xTaskGetCurrentTaskHandle+0x4c>
 805f256: 4780         	blx	r0
 805f258: b938         	cbnz	r0, 0x805f26a <MPU_xTaskGetCurrentTaskHandle+0x36> @ imm = #0xe
 805f25a: e7ff         	b	0x805f25c <MPU_xTaskGetCurrentTaskHandle+0x28> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f25c: df03         	svc	#0x3
;                 xReturn = xTaskGetCurrentTaskHandle();
 805f25e: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f288 <MPU_xTaskGetCurrentTaskHandle+0x54>
 805f260: 4780         	blx	r0
 805f262: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805f264: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f28c <MPU_xTaskGetCurrentTaskHandle+0x58>
 805f266: 4780         	blx	r0
;             }
 805f268: e003         	b	0x805f272 <MPU_xTaskGetCurrentTaskHandle+0x3e> @ imm = #0x6
;                 xReturn = xTaskGetCurrentTaskHandle();
 805f26a: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f284 <MPU_xTaskGetCurrentTaskHandle+0x50>
 805f26c: 4780         	blx	r0
 805f26e: 9001         	str	r0, [sp, #0x4]
 805f270: e7ff         	b	0x805f272 <MPU_xTaskGetCurrentTaskHandle+0x3e> @ imm = #-0x2
;             return xReturn;
 805f272: 9801         	ldr	r0, [sp, #0x4]
 805f274: 9000         	str	r0, [sp]
 805f276: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f290 <MPU_xTaskGetCurrentTaskHandle+0x5c>
 805f278: 4780         	blx	r0
 805f27a: 9800         	ldr	r0, [sp]
 805f27c: b002         	add	sp, #0x8
 805f27e: bd80         	pop	{r7, pc}

0805f280 <$d.35>:
 805f280: 31 22 06 08  	.word	0x08062231
 805f284: bd 7b 05 08  	.word	0x08057bbd
 805f288: bd 7b 05 08  	.word	0x08057bbd
 805f28c: 61 22 06 08  	.word	0x08062261
 805f290: 21 05 06 08  	.word	0x08060521

0805f294 <MPU_xTaskGetSchedulerState>:
;         {
 805f294: b580         	push	{r7, lr}
 805f296: 466f         	mov	r7, sp
 805f298: b082         	sub	sp, #0x8
 805f29a: f643 5140    	movw	r1, #0x3d40
 805f29e: f2c2 0100    	movt	r1, #0x2000
 805f2a2: 6808         	ldr	r0, [r1]
 805f2a4: f642 5240    	movw	r2, #0x2d40
 805f2a8: f2c2 0200    	movt	r2, #0x2000
 805f2ac: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805f2b0: 3001         	adds	r0, #0x1
 805f2b2: 6008         	str	r0, [r1]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f2b4: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f2e0 <MPU_xTaskGetSchedulerState+0x4c>
 805f2b6: 4780         	blx	r0
 805f2b8: b938         	cbnz	r0, 0x805f2ca <MPU_xTaskGetSchedulerState+0x36> @ imm = #0xe
 805f2ba: e7ff         	b	0x805f2bc <MPU_xTaskGetSchedulerState+0x28> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f2bc: df03         	svc	#0x3
;                 xReturn = xTaskGetSchedulerState();
 805f2be: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f2e8 <MPU_xTaskGetSchedulerState+0x54>
 805f2c0: 4780         	blx	r0
 805f2c2: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805f2c4: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f2ec <MPU_xTaskGetSchedulerState+0x58>
 805f2c6: 4780         	blx	r0
;             }
 805f2c8: e003         	b	0x805f2d2 <MPU_xTaskGetSchedulerState+0x3e> @ imm = #0x6
;                 xReturn = xTaskGetSchedulerState();
 805f2ca: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f2e4 <MPU_xTaskGetSchedulerState+0x50>
 805f2cc: 4780         	blx	r0
 805f2ce: 9001         	str	r0, [sp, #0x4]
 805f2d0: e7ff         	b	0x805f2d2 <MPU_xTaskGetSchedulerState+0x3e> @ imm = #-0x2
;             return xReturn;
 805f2d2: 9801         	ldr	r0, [sp, #0x4]
 805f2d4: 9000         	str	r0, [sp]
 805f2d6: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f2f0 <MPU_xTaskGetSchedulerState+0x5c>
 805f2d8: 4780         	blx	r0
 805f2da: 9800         	ldr	r0, [sp]
 805f2dc: b002         	add	sp, #0x8
 805f2de: bd80         	pop	{r7, pc}

0805f2e0 <$d.37>:
 805f2e0: 31 22 06 08  	.word	0x08062231
 805f2e4: fd 7b 05 08  	.word	0x08057bfd
 805f2e8: fd 7b 05 08  	.word	0x08057bfd
 805f2ec: 61 22 06 08  	.word	0x08062261
 805f2f0: 21 05 06 08  	.word	0x08060521

0805f2f4 <MPU_vTaskSetTimeOutState>:
;     {
 805f2f4: b580         	push	{r7, lr}
 805f2f6: 466f         	mov	r7, sp
 805f2f8: b082         	sub	sp, #0x8
 805f2fa: f643 5240    	movw	r2, #0x3d40
 805f2fe: f2c2 0200    	movt	r2, #0x2000
 805f302: 6811         	ldr	r1, [r2]
 805f304: f642 5340    	movw	r3, #0x2d40
 805f308: f2c2 0300    	movt	r3, #0x2000
 805f30c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805f310: 3101         	adds	r1, #0x1
 805f312: 6011         	str	r1, [r2]
 805f314: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f316: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f33c <MPU_vTaskSetTimeOutState+0x48>
 805f318: 4780         	blx	r0
 805f31a: b938         	cbnz	r0, 0x805f32c <MPU_vTaskSetTimeOutState+0x38> @ imm = #0xe
 805f31c: e7ff         	b	0x805f31e <MPU_vTaskSetTimeOutState+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f31e: df03         	svc	#0x3
;             vTaskSetTimeOutState( pxTimeOut );
 805f320: 9801         	ldr	r0, [sp, #0x4]
 805f322: 4908         	ldr	r1, [pc, #0x20]         @ 0x805f344 <MPU_vTaskSetTimeOutState+0x50>
 805f324: 4788         	blx	r1
;             portRESET_PRIVILEGE();
 805f326: 4808         	ldr	r0, [pc, #0x20]         @ 0x805f348 <MPU_vTaskSetTimeOutState+0x54>
 805f328: 4780         	blx	r0
;         }
 805f32a: e003         	b	0x805f334 <MPU_vTaskSetTimeOutState+0x40> @ imm = #0x6
;             vTaskSetTimeOutState( pxTimeOut );
 805f32c: 9801         	ldr	r0, [sp, #0x4]
 805f32e: 4904         	ldr	r1, [pc, #0x10]         @ 0x805f340 <MPU_vTaskSetTimeOutState+0x4c>
 805f330: 4788         	blx	r1
 805f332: e7ff         	b	0x805f334 <MPU_vTaskSetTimeOutState+0x40> @ imm = #-0x2
;     }
 805f334: 4805         	ldr	r0, [pc, #0x14]         @ 0x805f34c <MPU_vTaskSetTimeOutState+0x58>
 805f336: 4780         	blx	r0
 805f338: b002         	add	sp, #0x8
 805f33a: bd80         	pop	{r7, pc}

0805f33c <$d.39>:
 805f33c: 31 22 06 08  	.word	0x08062231
 805f340: cd 76 05 08  	.word	0x080576cd
 805f344: cd 76 05 08  	.word	0x080576cd
 805f348: 61 22 06 08  	.word	0x08062261
 805f34c: 21 05 06 08  	.word	0x08060521

0805f350 <MPU_xTaskCheckForTimeOut>:
;     {
 805f350: b580         	push	{r7, lr}
 805f352: 466f         	mov	r7, sp
 805f354: b084         	sub	sp, #0x10
 805f356: f643 5340    	movw	r3, #0x3d40
 805f35a: f2c2 0300    	movt	r3, #0x2000
 805f35e: 681a         	ldr	r2, [r3]
 805f360: f642 5c40    	movw	r12, #0x2d40
 805f364: f2c2 0c00    	movt	r12, #0x2000
 805f368: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805f36c: 3201         	adds	r2, #0x1
 805f36e: 601a         	str	r2, [r3]
 805f370: 9003         	str	r0, [sp, #0xc]
 805f372: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f374: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f3a8 <MPU_xTaskCheckForTimeOut+0x58>
 805f376: 4780         	blx	r0
 805f378: b948         	cbnz	r0, 0x805f38e <MPU_xTaskCheckForTimeOut+0x3e> @ imm = #0x12
 805f37a: e7ff         	b	0x805f37c <MPU_xTaskCheckForTimeOut+0x2c> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f37c: df03         	svc	#0x3
;             xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 805f37e: 9803         	ldr	r0, [sp, #0xc]
 805f380: 9902         	ldr	r1, [sp, #0x8]
 805f382: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805f3b0 <MPU_xTaskCheckForTimeOut+0x60>
 805f384: 4790         	blx	r2
 805f386: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805f388: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f3b4 <MPU_xTaskCheckForTimeOut+0x64>
 805f38a: 4780         	blx	r0
;         }
 805f38c: e005         	b	0x805f39a <MPU_xTaskCheckForTimeOut+0x4a> @ imm = #0xa
;             xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 805f38e: 9803         	ldr	r0, [sp, #0xc]
 805f390: 9902         	ldr	r1, [sp, #0x8]
 805f392: 4a06         	ldr	r2, [pc, #0x18]         @ 0x805f3ac <MPU_xTaskCheckForTimeOut+0x5c>
 805f394: 4790         	blx	r2
 805f396: 9001         	str	r0, [sp, #0x4]
 805f398: e7ff         	b	0x805f39a <MPU_xTaskCheckForTimeOut+0x4a> @ imm = #-0x2
;         return xReturn;
 805f39a: 9801         	ldr	r0, [sp, #0x4]
 805f39c: 9000         	str	r0, [sp]
 805f39e: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f3b8 <MPU_xTaskCheckForTimeOut+0x68>
 805f3a0: 4780         	blx	r0
 805f3a2: 9800         	ldr	r0, [sp]
 805f3a4: b004         	add	sp, #0x10
 805f3a6: bd80         	pop	{r7, pc}

0805f3a8 <$d.41>:
 805f3a8: 31 22 06 08  	.word	0x08062231
 805f3ac: 85 77 05 08  	.word	0x08057785
 805f3b0: 85 77 05 08  	.word	0x08057785
 805f3b4: 61 22 06 08  	.word	0x08062261
 805f3b8: 21 05 06 08  	.word	0x08060521

0805f3bc <MPU_xTaskGenericNotify>:
;         {
 805f3bc: b5b0         	push	{r4, r5, r7, lr}
 805f3be: af02         	add	r7, sp, #0x8
 805f3c0: b088         	sub	sp, #0x20
 805f3c2: 4674         	mov	r4, lr
 805f3c4: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805f3c8: f643 5e40    	movw	lr, #0x3d40
 805f3cc: f2c2 0e00    	movt	lr, #0x2000
 805f3d0: f8de c000    	ldr.w	r12, [lr]
 805f3d4: f642 5540    	movw	r5, #0x2d40
 805f3d8: f2c2 0500    	movt	r5, #0x2000
 805f3dc: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805f3e0: f10c 0c01    	add.w	r12, r12, #0x1
 805f3e4: f8ce c000    	str.w	r12, [lr]
 805f3e8: 9007         	str	r0, [sp, #0x1c]
 805f3ea: 9106         	str	r1, [sp, #0x18]
 805f3ec: 9205         	str	r2, [sp, #0x14]
 805f3ee: f807 3c15    	strb	r3, [r7, #-21]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f3f2: 4816         	ldr	r0, [pc, #0x58]         @ 0x805f44c <MPU_xTaskGenericNotify+0x90>
 805f3f4: 4780         	blx	r0
 805f3f6: b990         	cbnz	r0, 0x805f41e <MPU_xTaskGenericNotify+0x62> @ imm = #0x24
 805f3f8: e7ff         	b	0x805f3fa <MPU_xTaskGenericNotify+0x3e> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f3fa: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 805f3fc: 9807         	ldr	r0, [sp, #0x1c]
 805f3fe: 9906         	ldr	r1, [sp, #0x18]
 805f400: 9a05         	ldr	r2, [sp, #0x14]
 805f402: f817 3c15    	ldrb	r3, [r7, #-21]
 805f406: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805f40a: 46ee         	mov	lr, sp
 805f40c: f8ce c000    	str.w	r12, [lr]
 805f410: f8df c040    	ldr.w	r12, [pc, #0x40]        @ 0x805f454 <MPU_xTaskGenericNotify+0x98>
 805f414: 47e0         	blx	r12
 805f416: 9003         	str	r0, [sp, #0xc]
;                 portRESET_PRIVILEGE();
 805f418: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805f458 <MPU_xTaskGenericNotify+0x9c>
 805f41a: 4780         	blx	r0
;             }
 805f41c: e00e         	b	0x805f43c <MPU_xTaskGenericNotify+0x80> @ imm = #0x1c
;                 xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 805f41e: 9807         	ldr	r0, [sp, #0x1c]
 805f420: 9906         	ldr	r1, [sp, #0x18]
 805f422: 9a05         	ldr	r2, [sp, #0x14]
 805f424: f817 3c15    	ldrb	r3, [r7, #-21]
 805f428: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805f42c: 46ee         	mov	lr, sp
 805f42e: f8ce c000    	str.w	r12, [lr]
 805f432: f8df c01c    	ldr.w	r12, [pc, #0x1c]        @ 0x805f450 <MPU_xTaskGenericNotify+0x94>
 805f436: 47e0         	blx	r12
 805f438: 9003         	str	r0, [sp, #0xc]
 805f43a: e7ff         	b	0x805f43c <MPU_xTaskGenericNotify+0x80> @ imm = #-0x2
;             return xReturn;
 805f43c: 9803         	ldr	r0, [sp, #0xc]
 805f43e: 9002         	str	r0, [sp, #0x8]
 805f440: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f45c <MPU_xTaskGenericNotify+0xa0>
 805f442: 4780         	blx	r0
 805f444: 9802         	ldr	r0, [sp, #0x8]
 805f446: b008         	add	sp, #0x20
 805f448: bdb0         	pop	{r4, r5, r7, pc}
 805f44a: bf00         	nop

0805f44c <$d.43>:
 805f44c: 31 22 06 08  	.word	0x08062231
 805f450: c1 84 05 08  	.word	0x080584c1
 805f454: c1 84 05 08  	.word	0x080584c1
 805f458: 61 22 06 08  	.word	0x08062261
 805f45c: 21 05 06 08  	.word	0x08060521

0805f460 <MPU_xTaskGenericNotifyWait>:
;         {
 805f460: b5b0         	push	{r4, r5, r7, lr}
 805f462: af02         	add	r7, sp, #0x8
 805f464: b088         	sub	sp, #0x20
 805f466: 4674         	mov	r4, lr
 805f468: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805f46c: f643 5e40    	movw	lr, #0x3d40
 805f470: f2c2 0e00    	movt	lr, #0x2000
 805f474: f8de c000    	ldr.w	r12, [lr]
 805f478: f642 5540    	movw	r5, #0x2d40
 805f47c: f2c2 0500    	movt	r5, #0x2000
 805f480: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805f484: f10c 0c01    	add.w	r12, r12, #0x1
 805f488: f8ce c000    	str.w	r12, [lr]
 805f48c: 9007         	str	r0, [sp, #0x1c]
 805f48e: 9106         	str	r1, [sp, #0x18]
 805f490: 9205         	str	r2, [sp, #0x14]
 805f492: 9304         	str	r3, [sp, #0x10]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f494: 4814         	ldr	r0, [pc, #0x50]         @ 0x805f4e8 <MPU_xTaskGenericNotifyWait+0x88>
 805f496: 4780         	blx	r0
 805f498: b988         	cbnz	r0, 0x805f4be <MPU_xTaskGenericNotifyWait+0x5e> @ imm = #0x22
 805f49a: e7ff         	b	0x805f49c <MPU_xTaskGenericNotifyWait+0x3c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f49c: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 805f49e: 9807         	ldr	r0, [sp, #0x1c]
 805f4a0: 9906         	ldr	r1, [sp, #0x18]
 805f4a2: 9a05         	ldr	r2, [sp, #0x14]
 805f4a4: 9b04         	ldr	r3, [sp, #0x10]
 805f4a6: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805f4aa: 46ee         	mov	lr, sp
 805f4ac: f8ce c000    	str.w	r12, [lr]
 805f4b0: f8df c03c    	ldr.w	r12, [pc, #0x3c]        @ 0x805f4f0 <MPU_xTaskGenericNotifyWait+0x90>
 805f4b4: 47e0         	blx	r12
 805f4b6: 9003         	str	r0, [sp, #0xc]
;                 portRESET_PRIVILEGE();
 805f4b8: 480e         	ldr	r0, [pc, #0x38]         @ 0x805f4f4 <MPU_xTaskGenericNotifyWait+0x94>
 805f4ba: 4780         	blx	r0
;             }
 805f4bc: e00d         	b	0x805f4da <MPU_xTaskGenericNotifyWait+0x7a> @ imm = #0x1a
;                 xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 805f4be: 9807         	ldr	r0, [sp, #0x1c]
 805f4c0: 9906         	ldr	r1, [sp, #0x18]
 805f4c2: 9a05         	ldr	r2, [sp, #0x14]
 805f4c4: 9b04         	ldr	r3, [sp, #0x10]
 805f4c6: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805f4ca: 46ee         	mov	lr, sp
 805f4cc: f8ce c000    	str.w	r12, [lr]
 805f4d0: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x805f4ec <MPU_xTaskGenericNotifyWait+0x8c>
 805f4d4: 47e0         	blx	r12
 805f4d6: 9003         	str	r0, [sp, #0xc]
 805f4d8: e7ff         	b	0x805f4da <MPU_xTaskGenericNotifyWait+0x7a> @ imm = #-0x2
;             return xReturn;
 805f4da: 9803         	ldr	r0, [sp, #0xc]
 805f4dc: 9002         	str	r0, [sp, #0x8]
 805f4de: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f4f8 <MPU_xTaskGenericNotifyWait+0x98>
 805f4e0: 4780         	blx	r0
 805f4e2: 9802         	ldr	r0, [sp, #0x8]
 805f4e4: b008         	add	sp, #0x20
 805f4e6: bdb0         	pop	{r4, r5, r7, pc}

0805f4e8 <$d.45>:
 805f4e8: 31 22 06 08  	.word	0x08062231
 805f4ec: 45 83 05 08  	.word	0x08058345
 805f4f0: 45 83 05 08  	.word	0x08058345
 805f4f4: 61 22 06 08  	.word	0x08062261
 805f4f8: 21 05 06 08  	.word	0x08060521

0805f4fc <MPU_ulTaskGenericNotifyTake>:
;         {
 805f4fc: b5d0         	push	{r4, r6, r7, lr}
 805f4fe: af02         	add	r7, sp, #0x8
 805f500: b086         	sub	sp, #0x18
 805f502: f643 5c40    	movw	r12, #0x3d40
 805f506: f2c2 0c00    	movt	r12, #0x2000
 805f50a: f8dc 3000    	ldr.w	r3, [r12]
 805f50e: f642 5440    	movw	r4, #0x2d40
 805f512: f2c2 0400    	movt	r4, #0x2000
 805f516: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805f51a: 3301         	adds	r3, #0x1
 805f51c: f8cc 3000    	str.w	r3, [r12]
 805f520: 9005         	str	r0, [sp, #0x14]
 805f522: 9104         	str	r1, [sp, #0x10]
 805f524: 9203         	str	r2, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f526: 480e         	ldr	r0, [pc, #0x38]         @ 0x805f560 <MPU_ulTaskGenericNotifyTake+0x64>
 805f528: 4780         	blx	r0
 805f52a: b950         	cbnz	r0, 0x805f542 <MPU_ulTaskGenericNotifyTake+0x46> @ imm = #0x14
 805f52c: e7ff         	b	0x805f52e <MPU_ulTaskGenericNotifyTake+0x32> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f52e: df03         	svc	#0x3
;                 ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 805f530: 9805         	ldr	r0, [sp, #0x14]
 805f532: 9904         	ldr	r1, [sp, #0x10]
 805f534: 9a03         	ldr	r2, [sp, #0xc]
 805f536: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x805f568 <MPU_ulTaskGenericNotifyTake+0x6c>
 805f538: 4798         	blx	r3
 805f53a: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805f53c: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805f56c <MPU_ulTaskGenericNotifyTake+0x70>
 805f53e: 4780         	blx	r0
;             }
 805f540: e006         	b	0x805f550 <MPU_ulTaskGenericNotifyTake+0x54> @ imm = #0xc
;                 ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 805f542: 9805         	ldr	r0, [sp, #0x14]
 805f544: 9904         	ldr	r1, [sp, #0x10]
 805f546: 9a03         	ldr	r2, [sp, #0xc]
 805f548: 4b06         	ldr	r3, [pc, #0x18]         @ 0x805f564 <MPU_ulTaskGenericNotifyTake+0x68>
 805f54a: 4798         	blx	r3
 805f54c: 9002         	str	r0, [sp, #0x8]
 805f54e: e7ff         	b	0x805f550 <MPU_ulTaskGenericNotifyTake+0x54> @ imm = #-0x2
;             return ulReturn;
 805f550: 9802         	ldr	r0, [sp, #0x8]
 805f552: 9001         	str	r0, [sp, #0x4]
 805f554: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f570 <MPU_ulTaskGenericNotifyTake+0x74>
 805f556: 4780         	blx	r0
 805f558: 9801         	ldr	r0, [sp, #0x4]
 805f55a: b006         	add	sp, #0x18
 805f55c: bdd0         	pop	{r4, r6, r7, pc}
 805f55e: bf00         	nop

0805f560 <$d.47>:
 805f560: 31 22 06 08  	.word	0x08062231
 805f564: f1 81 05 08  	.word	0x080581f1
 805f568: f1 81 05 08  	.word	0x080581f1
 805f56c: 61 22 06 08  	.word	0x08062261
 805f570: 21 05 06 08  	.word	0x08060521

0805f574 <MPU_xTaskGenericNotifyStateClear>:
;         {
 805f574: b580         	push	{r7, lr}
 805f576: 466f         	mov	r7, sp
 805f578: b084         	sub	sp, #0x10
 805f57a: f643 5340    	movw	r3, #0x3d40
 805f57e: f2c2 0300    	movt	r3, #0x2000
 805f582: 681a         	ldr	r2, [r3]
 805f584: f642 5c40    	movw	r12, #0x2d40
 805f588: f2c2 0c00    	movt	r12, #0x2000
 805f58c: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805f590: 3201         	adds	r2, #0x1
 805f592: 601a         	str	r2, [r3]
 805f594: 9003         	str	r0, [sp, #0xc]
 805f596: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f598: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f5cc <MPU_xTaskGenericNotifyStateClear+0x58>
 805f59a: 4780         	blx	r0
 805f59c: b948         	cbnz	r0, 0x805f5b2 <MPU_xTaskGenericNotifyStateClear+0x3e> @ imm = #0x12
 805f59e: e7ff         	b	0x805f5a0 <MPU_xTaskGenericNotifyStateClear+0x2c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f5a0: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 805f5a2: 9803         	ldr	r0, [sp, #0xc]
 805f5a4: 9902         	ldr	r1, [sp, #0x8]
 805f5a6: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805f5d4 <MPU_xTaskGenericNotifyStateClear+0x60>
 805f5a8: 4790         	blx	r2
 805f5aa: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805f5ac: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f5d8 <MPU_xTaskGenericNotifyStateClear+0x64>
 805f5ae: 4780         	blx	r0
;             }
 805f5b0: e005         	b	0x805f5be <MPU_xTaskGenericNotifyStateClear+0x4a> @ imm = #0xa
;                 xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 805f5b2: 9803         	ldr	r0, [sp, #0xc]
 805f5b4: 9902         	ldr	r1, [sp, #0x8]
 805f5b6: 4a06         	ldr	r2, [pc, #0x18]         @ 0x805f5d0 <MPU_xTaskGenericNotifyStateClear+0x5c>
 805f5b8: 4790         	blx	r2
 805f5ba: 9001         	str	r0, [sp, #0x4]
 805f5bc: e7ff         	b	0x805f5be <MPU_xTaskGenericNotifyStateClear+0x4a> @ imm = #-0x2
;             return xReturn;
 805f5be: 9801         	ldr	r0, [sp, #0x4]
 805f5c0: 9000         	str	r0, [sp]
 805f5c2: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f5dc <MPU_xTaskGenericNotifyStateClear+0x68>
 805f5c4: 4780         	blx	r0
 805f5c6: 9800         	ldr	r0, [sp]
 805f5c8: b004         	add	sp, #0x10
 805f5ca: bd80         	pop	{r7, pc}

0805f5cc <$d.49>:
 805f5cc: 31 22 06 08  	.word	0x08062231
 805f5d0: 95 8c 05 08  	.word	0x08058c95
 805f5d4: 95 8c 05 08  	.word	0x08058c95
 805f5d8: 61 22 06 08  	.word	0x08062261
 805f5dc: 21 05 06 08  	.word	0x08060521

0805f5e0 <MPU_ulTaskGenericNotifyValueClear>:
;         {
 805f5e0: b5d0         	push	{r4, r6, r7, lr}
 805f5e2: af02         	add	r7, sp, #0x8
 805f5e4: b086         	sub	sp, #0x18
 805f5e6: f643 5c40    	movw	r12, #0x3d40
 805f5ea: f2c2 0c00    	movt	r12, #0x2000
 805f5ee: f8dc 3000    	ldr.w	r3, [r12]
 805f5f2: f642 5440    	movw	r4, #0x2d40
 805f5f6: f2c2 0400    	movt	r4, #0x2000
 805f5fa: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805f5fe: 3301         	adds	r3, #0x1
 805f600: f8cc 3000    	str.w	r3, [r12]
 805f604: 9005         	str	r0, [sp, #0x14]
 805f606: 9104         	str	r1, [sp, #0x10]
 805f608: 9203         	str	r2, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f60a: 480e         	ldr	r0, [pc, #0x38]         @ 0x805f644 <MPU_ulTaskGenericNotifyValueClear+0x64>
 805f60c: 4780         	blx	r0
 805f60e: b950         	cbnz	r0, 0x805f626 <MPU_ulTaskGenericNotifyValueClear+0x46> @ imm = #0x14
 805f610: e7ff         	b	0x805f612 <MPU_ulTaskGenericNotifyValueClear+0x32> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f612: df03         	svc	#0x3
;                 ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 805f614: 9805         	ldr	r0, [sp, #0x14]
 805f616: 9904         	ldr	r1, [sp, #0x10]
 805f618: 9a03         	ldr	r2, [sp, #0xc]
 805f61a: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x805f64c <MPU_ulTaskGenericNotifyValueClear+0x6c>
 805f61c: 4798         	blx	r3
 805f61e: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805f620: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805f650 <MPU_ulTaskGenericNotifyValueClear+0x70>
 805f622: 4780         	blx	r0
;             }
 805f624: e006         	b	0x805f634 <MPU_ulTaskGenericNotifyValueClear+0x54> @ imm = #0xc
;                 ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 805f626: 9805         	ldr	r0, [sp, #0x14]
 805f628: 9904         	ldr	r1, [sp, #0x10]
 805f62a: 9a03         	ldr	r2, [sp, #0xc]
 805f62c: 4b06         	ldr	r3, [pc, #0x18]         @ 0x805f648 <MPU_ulTaskGenericNotifyValueClear+0x68>
 805f62e: 4798         	blx	r3
 805f630: 9002         	str	r0, [sp, #0x8]
 805f632: e7ff         	b	0x805f634 <MPU_ulTaskGenericNotifyValueClear+0x54> @ imm = #-0x2
;             return ulReturn;
 805f634: 9802         	ldr	r0, [sp, #0x8]
 805f636: 9001         	str	r0, [sp, #0x4]
 805f638: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f654 <MPU_ulTaskGenericNotifyValueClear+0x74>
 805f63a: 4780         	blx	r0
 805f63c: 9801         	ldr	r0, [sp, #0x4]
 805f63e: b006         	add	sp, #0x18
 805f640: bdd0         	pop	{r4, r6, r7, pc}
 805f642: bf00         	nop

0805f644 <$d.51>:
 805f644: 31 22 06 08  	.word	0x08062231
 805f648: 35 8d 05 08  	.word	0x08058d35
 805f64c: 35 8d 05 08  	.word	0x08058d35
 805f650: 61 22 06 08  	.word	0x08062261
 805f654: 21 05 06 08  	.word	0x08060521

0805f658 <MPU_xQueueGenericSend>:
;     {
 805f658: b5b0         	push	{r4, r5, r7, lr}
 805f65a: af02         	add	r7, sp, #0x8
 805f65c: b086         	sub	sp, #0x18
 805f65e: 4674         	mov	r4, lr
 805f660: f643 5e40    	movw	lr, #0x3d40
 805f664: f2c2 0e00    	movt	lr, #0x2000
 805f668: f8de c000    	ldr.w	r12, [lr]
 805f66c: f642 5540    	movw	r5, #0x2d40
 805f670: f2c2 0500    	movt	r5, #0x2000
 805f674: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805f678: f10c 0c01    	add.w	r12, r12, #0x1
 805f67c: f8ce c000    	str.w	r12, [lr]
 805f680: 9005         	str	r0, [sp, #0x14]
 805f682: 9104         	str	r1, [sp, #0x10]
 805f684: 9203         	str	r2, [sp, #0xc]
 805f686: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f688: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805f6c8 <MPU_xQueueGenericSend+0x70>
 805f68a: 4780         	blx	r0
 805f68c: b960         	cbnz	r0, 0x805f6a8 <MPU_xQueueGenericSend+0x50> @ imm = #0x18
 805f68e: e7ff         	b	0x805f690 <MPU_xQueueGenericSend+0x38> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f690: df03         	svc	#0x3
;             xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 805f692: 9805         	ldr	r0, [sp, #0x14]
 805f694: 9904         	ldr	r1, [sp, #0x10]
 805f696: 9a03         	ldr	r2, [sp, #0xc]
 805f698: 9b02         	ldr	r3, [sp, #0x8]
 805f69a: f8df c034    	ldr.w	r12, [pc, #0x34]        @ 0x805f6d0 <MPU_xQueueGenericSend+0x78>
 805f69e: 47e0         	blx	r12
 805f6a0: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805f6a2: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f6d4 <MPU_xQueueGenericSend+0x7c>
 805f6a4: 4780         	blx	r0
;         }
 805f6a6: e008         	b	0x805f6ba <MPU_xQueueGenericSend+0x62> @ imm = #0x10
;             xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 805f6a8: 9805         	ldr	r0, [sp, #0x14]
 805f6aa: 9904         	ldr	r1, [sp, #0x10]
 805f6ac: 9a03         	ldr	r2, [sp, #0xc]
 805f6ae: 9b02         	ldr	r3, [sp, #0x8]
 805f6b0: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x805f6cc <MPU_xQueueGenericSend+0x74>
 805f6b4: 47e0         	blx	r12
 805f6b6: 9001         	str	r0, [sp, #0x4]
 805f6b8: e7ff         	b	0x805f6ba <MPU_xQueueGenericSend+0x62> @ imm = #-0x2
;         return xReturn;
 805f6ba: 9801         	ldr	r0, [sp, #0x4]
 805f6bc: 9000         	str	r0, [sp]
 805f6be: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f6d8 <MPU_xQueueGenericSend+0x80>
 805f6c0: 4780         	blx	r0
 805f6c2: 9800         	ldr	r0, [sp]
 805f6c4: b006         	add	sp, #0x18
 805f6c6: bdb0         	pop	{r4, r5, r7, pc}

0805f6c8 <$d.57>:
 805f6c8: 31 22 06 08  	.word	0x08062231
 805f6cc: b1 b6 05 08  	.word	0x0805b6b1
 805f6d0: b1 b6 05 08  	.word	0x0805b6b1
 805f6d4: 61 22 06 08  	.word	0x08062261
 805f6d8: 21 05 06 08  	.word	0x08060521

0805f6dc <MPU_uxQueueMessagesWaiting>:
;     {
 805f6dc: b580         	push	{r7, lr}
 805f6de: 466f         	mov	r7, sp
 805f6e0: b084         	sub	sp, #0x10
 805f6e2: f643 5240    	movw	r2, #0x3d40
 805f6e6: f2c2 0200    	movt	r2, #0x2000
 805f6ea: 6811         	ldr	r1, [r2]
 805f6ec: f642 5340    	movw	r3, #0x2d40
 805f6f0: f2c2 0300    	movt	r3, #0x2000
 805f6f4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805f6f8: 3101         	adds	r1, #0x1
 805f6fa: 6011         	str	r1, [r2]
 805f6fc: 9003         	str	r0, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f6fe: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f730 <MPU_uxQueueMessagesWaiting+0x54>
 805f700: 4780         	blx	r0
 805f702: b940         	cbnz	r0, 0x805f716 <MPU_uxQueueMessagesWaiting+0x3a> @ imm = #0x10
 805f704: e7ff         	b	0x805f706 <MPU_uxQueueMessagesWaiting+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f706: df03         	svc	#0x3
;             uxReturn = uxQueueMessagesWaiting( pxQueue );
 805f708: 9803         	ldr	r0, [sp, #0xc]
 805f70a: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805f738 <MPU_uxQueueMessagesWaiting+0x5c>
 805f70c: 4788         	blx	r1
 805f70e: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 805f710: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f73c <MPU_uxQueueMessagesWaiting+0x60>
 805f712: 4780         	blx	r0
;         }
 805f714: e004         	b	0x805f720 <MPU_uxQueueMessagesWaiting+0x44> @ imm = #0x8
;             uxReturn = uxQueueMessagesWaiting( pxQueue );
 805f716: 9803         	ldr	r0, [sp, #0xc]
 805f718: 4906         	ldr	r1, [pc, #0x18]         @ 0x805f734 <MPU_uxQueueMessagesWaiting+0x58>
 805f71a: 4788         	blx	r1
 805f71c: 9002         	str	r0, [sp, #0x8]
 805f71e: e7ff         	b	0x805f720 <MPU_uxQueueMessagesWaiting+0x44> @ imm = #-0x2
;         return uxReturn;
 805f720: 9802         	ldr	r0, [sp, #0x8]
 805f722: 9001         	str	r0, [sp, #0x4]
 805f724: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f740 <MPU_uxQueueMessagesWaiting+0x64>
 805f726: 4780         	blx	r0
 805f728: 9801         	ldr	r0, [sp, #0x4]
 805f72a: b004         	add	sp, #0x10
 805f72c: bd80         	pop	{r7, pc}
 805f72e: bf00         	nop

0805f730 <$d.59>:
 805f730: 31 22 06 08  	.word	0x08062231
 805f734: 51 c9 05 08  	.word	0x0805c951
 805f738: 51 c9 05 08  	.word	0x0805c951
 805f73c: 61 22 06 08  	.word	0x08062261
 805f740: 21 05 06 08  	.word	0x08060521

0805f744 <MPU_uxQueueSpacesAvailable>:
;     {
 805f744: b580         	push	{r7, lr}
 805f746: 466f         	mov	r7, sp
 805f748: b084         	sub	sp, #0x10
 805f74a: f643 5240    	movw	r2, #0x3d40
 805f74e: f2c2 0200    	movt	r2, #0x2000
 805f752: 6811         	ldr	r1, [r2]
 805f754: f642 5340    	movw	r3, #0x2d40
 805f758: f2c2 0300    	movt	r3, #0x2000
 805f75c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805f760: 3101         	adds	r1, #0x1
 805f762: 6011         	str	r1, [r2]
 805f764: 9003         	str	r0, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f766: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f798 <MPU_uxQueueSpacesAvailable+0x54>
 805f768: 4780         	blx	r0
 805f76a: b940         	cbnz	r0, 0x805f77e <MPU_uxQueueSpacesAvailable+0x3a> @ imm = #0x10
 805f76c: e7ff         	b	0x805f76e <MPU_uxQueueSpacesAvailable+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f76e: df03         	svc	#0x3
;             uxReturn = uxQueueSpacesAvailable( xQueue );
 805f770: 9803         	ldr	r0, [sp, #0xc]
 805f772: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805f7a0 <MPU_uxQueueSpacesAvailable+0x5c>
 805f774: 4788         	blx	r1
 805f776: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 805f778: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f7a4 <MPU_uxQueueSpacesAvailable+0x60>
 805f77a: 4780         	blx	r0
;         }
 805f77c: e004         	b	0x805f788 <MPU_uxQueueSpacesAvailable+0x44> @ imm = #0x8
;             uxReturn = uxQueueSpacesAvailable( xQueue );
 805f77e: 9803         	ldr	r0, [sp, #0xc]
 805f780: 4906         	ldr	r1, [pc, #0x18]         @ 0x805f79c <MPU_uxQueueSpacesAvailable+0x58>
 805f782: 4788         	blx	r1
 805f784: 9002         	str	r0, [sp, #0x8]
 805f786: e7ff         	b	0x805f788 <MPU_uxQueueSpacesAvailable+0x44> @ imm = #-0x2
;         return uxReturn;
 805f788: 9802         	ldr	r0, [sp, #0x8]
 805f78a: 9001         	str	r0, [sp, #0x4]
 805f78c: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f7a8 <MPU_uxQueueSpacesAvailable+0x64>
 805f78e: 4780         	blx	r0
 805f790: 9801         	ldr	r0, [sp, #0x4]
 805f792: b004         	add	sp, #0x10
 805f794: bd80         	pop	{r7, pc}
 805f796: bf00         	nop

0805f798 <$d.61>:
 805f798: 31 22 06 08  	.word	0x08062231
 805f79c: ad c9 05 08  	.word	0x0805c9ad
 805f7a0: ad c9 05 08  	.word	0x0805c9ad
 805f7a4: 61 22 06 08  	.word	0x08062261
 805f7a8: 21 05 06 08  	.word	0x08060521

0805f7ac <MPU_xQueueReceive>:
;     {
 805f7ac: b5d0         	push	{r4, r6, r7, lr}
 805f7ae: af02         	add	r7, sp, #0x8
 805f7b0: b086         	sub	sp, #0x18
 805f7b2: f643 5c40    	movw	r12, #0x3d40
 805f7b6: f2c2 0c00    	movt	r12, #0x2000
 805f7ba: f8dc 3000    	ldr.w	r3, [r12]
 805f7be: f642 5440    	movw	r4, #0x2d40
 805f7c2: f2c2 0400    	movt	r4, #0x2000
 805f7c6: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805f7ca: 3301         	adds	r3, #0x1
 805f7cc: f8cc 3000    	str.w	r3, [r12]
 805f7d0: 9005         	str	r0, [sp, #0x14]
 805f7d2: 9104         	str	r1, [sp, #0x10]
 805f7d4: 9203         	str	r2, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f7d6: 480e         	ldr	r0, [pc, #0x38]         @ 0x805f810 <MPU_xQueueReceive+0x64>
 805f7d8: 4780         	blx	r0
 805f7da: b950         	cbnz	r0, 0x805f7f2 <MPU_xQueueReceive+0x46> @ imm = #0x14
 805f7dc: e7ff         	b	0x805f7de <MPU_xQueueReceive+0x32> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f7de: df03         	svc	#0x3
;             xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 805f7e0: 9805         	ldr	r0, [sp, #0x14]
 805f7e2: 9904         	ldr	r1, [sp, #0x10]
 805f7e4: 9a03         	ldr	r2, [sp, #0xc]
 805f7e6: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x805f818 <MPU_xQueueReceive+0x6c>
 805f7e8: 4798         	blx	r3
 805f7ea: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 805f7ec: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805f81c <MPU_xQueueReceive+0x70>
 805f7ee: 4780         	blx	r0
;         }
 805f7f0: e006         	b	0x805f800 <MPU_xQueueReceive+0x54> @ imm = #0xc
;             xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 805f7f2: 9805         	ldr	r0, [sp, #0x14]
 805f7f4: 9904         	ldr	r1, [sp, #0x10]
 805f7f6: 9a03         	ldr	r2, [sp, #0xc]
 805f7f8: 4b06         	ldr	r3, [pc, #0x18]         @ 0x805f814 <MPU_xQueueReceive+0x68>
 805f7fa: 4798         	blx	r3
 805f7fc: 9002         	str	r0, [sp, #0x8]
 805f7fe: e7ff         	b	0x805f800 <MPU_xQueueReceive+0x54> @ imm = #-0x2
;         return xReturn;
 805f800: 9802         	ldr	r0, [sp, #0x8]
 805f802: 9001         	str	r0, [sp, #0x4]
 805f804: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f820 <MPU_xQueueReceive+0x74>
 805f806: 4780         	blx	r0
 805f808: 9801         	ldr	r0, [sp, #0x4]
 805f80a: b006         	add	sp, #0x18
 805f80c: bdd0         	pop	{r4, r6, r7, pc}
 805f80e: bf00         	nop

0805f810 <$d.63>:
 805f810: 31 22 06 08  	.word	0x08062231
 805f814: cd c1 05 08  	.word	0x0805c1cd
 805f818: cd c1 05 08  	.word	0x0805c1cd
 805f81c: 61 22 06 08  	.word	0x08062261
 805f820: 21 05 06 08  	.word	0x08060521

0805f824 <MPU_xQueuePeek>:
;     {
 805f824: b5d0         	push	{r4, r6, r7, lr}
 805f826: af02         	add	r7, sp, #0x8
 805f828: b086         	sub	sp, #0x18
 805f82a: f643 5c40    	movw	r12, #0x3d40
 805f82e: f2c2 0c00    	movt	r12, #0x2000
 805f832: f8dc 3000    	ldr.w	r3, [r12]
 805f836: f642 5440    	movw	r4, #0x2d40
 805f83a: f2c2 0400    	movt	r4, #0x2000
 805f83e: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 805f842: 3301         	adds	r3, #0x1
 805f844: f8cc 3000    	str.w	r3, [r12]
 805f848: 9005         	str	r0, [sp, #0x14]
 805f84a: 9104         	str	r1, [sp, #0x10]
 805f84c: 9203         	str	r2, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f84e: 480e         	ldr	r0, [pc, #0x38]         @ 0x805f888 <MPU_xQueuePeek+0x64>
 805f850: 4780         	blx	r0
 805f852: b950         	cbnz	r0, 0x805f86a <MPU_xQueuePeek+0x46> @ imm = #0x14
 805f854: e7ff         	b	0x805f856 <MPU_xQueuePeek+0x32> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f856: df03         	svc	#0x3
;             xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 805f858: 9805         	ldr	r0, [sp, #0x14]
 805f85a: 9904         	ldr	r1, [sp, #0x10]
 805f85c: 9a03         	ldr	r2, [sp, #0xc]
 805f85e: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x805f890 <MPU_xQueuePeek+0x6c>
 805f860: 4798         	blx	r3
 805f862: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 805f864: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805f894 <MPU_xQueuePeek+0x70>
 805f866: 4780         	blx	r0
;         }
 805f868: e006         	b	0x805f878 <MPU_xQueuePeek+0x54> @ imm = #0xc
;             xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 805f86a: 9805         	ldr	r0, [sp, #0x14]
 805f86c: 9904         	ldr	r1, [sp, #0x10]
 805f86e: 9a03         	ldr	r2, [sp, #0xc]
 805f870: 4b06         	ldr	r3, [pc, #0x18]         @ 0x805f88c <MPU_xQueuePeek+0x68>
 805f872: 4798         	blx	r3
 805f874: 9002         	str	r0, [sp, #0x8]
 805f876: e7ff         	b	0x805f878 <MPU_xQueuePeek+0x54> @ imm = #-0x2
;         return xReturn;
 805f878: 9802         	ldr	r0, [sp, #0x8]
 805f87a: 9001         	str	r0, [sp, #0x4]
 805f87c: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f898 <MPU_xQueuePeek+0x74>
 805f87e: 4780         	blx	r0
 805f880: 9801         	ldr	r0, [sp, #0x4]
 805f882: b006         	add	sp, #0x18
 805f884: bdd0         	pop	{r4, r6, r7, pc}
 805f886: bf00         	nop

0805f888 <$d.65>:
 805f888: 31 22 06 08  	.word	0x08062231
 805f88c: 05 c5 05 08  	.word	0x0805c505
 805f890: 05 c5 05 08  	.word	0x0805c505
 805f894: 61 22 06 08  	.word	0x08062261
 805f898: 21 05 06 08  	.word	0x08060521

0805f89c <MPU_xQueueSemaphoreTake>:
;     {
 805f89c: b580         	push	{r7, lr}
 805f89e: 466f         	mov	r7, sp
 805f8a0: b084         	sub	sp, #0x10
 805f8a2: f643 5340    	movw	r3, #0x3d40
 805f8a6: f2c2 0300    	movt	r3, #0x2000
 805f8aa: 681a         	ldr	r2, [r3]
 805f8ac: f642 5c40    	movw	r12, #0x2d40
 805f8b0: f2c2 0c00    	movt	r12, #0x2000
 805f8b4: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805f8b8: 3201         	adds	r2, #0x1
 805f8ba: 601a         	str	r2, [r3]
 805f8bc: 9003         	str	r0, [sp, #0xc]
 805f8be: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805f8c0: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f8f4 <MPU_xQueueSemaphoreTake+0x58>
 805f8c2: 4780         	blx	r0
 805f8c4: b948         	cbnz	r0, 0x805f8da <MPU_xQueueSemaphoreTake+0x3e> @ imm = #0x12
 805f8c6: e7ff         	b	0x805f8c8 <MPU_xQueueSemaphoreTake+0x2c> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805f8c8: df03         	svc	#0x3
;             xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 805f8ca: 9803         	ldr	r0, [sp, #0xc]
 805f8cc: 9902         	ldr	r1, [sp, #0x8]
 805f8ce: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805f8fc <MPU_xQueueSemaphoreTake+0x60>
 805f8d0: 4790         	blx	r2
 805f8d2: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805f8d4: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f900 <MPU_xQueueSemaphoreTake+0x64>
 805f8d6: 4780         	blx	r0
;         }
 805f8d8: e005         	b	0x805f8e6 <MPU_xQueueSemaphoreTake+0x4a> @ imm = #0xa
;             xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 805f8da: 9803         	ldr	r0, [sp, #0xc]
 805f8dc: 9902         	ldr	r1, [sp, #0x8]
 805f8de: 4a06         	ldr	r2, [pc, #0x18]         @ 0x805f8f8 <MPU_xQueueSemaphoreTake+0x5c>
 805f8e0: 4790         	blx	r2
 805f8e2: 9001         	str	r0, [sp, #0x4]
 805f8e4: e7ff         	b	0x805f8e6 <MPU_xQueueSemaphoreTake+0x4a> @ imm = #-0x2
;         return xReturn;
 805f8e6: 9801         	ldr	r0, [sp, #0x4]
 805f8e8: 9000         	str	r0, [sp]
 805f8ea: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f904 <MPU_xQueueSemaphoreTake+0x68>
 805f8ec: 4780         	blx	r0
 805f8ee: 9800         	ldr	r0, [sp]
 805f8f0: b004         	add	sp, #0x10
 805f8f2: bd80         	pop	{r7, pc}

0805f8f4 <$d.67>:
 805f8f4: 31 22 06 08  	.word	0x08062231
 805f8f8: a1 b9 05 08  	.word	0x0805b9a1
 805f8fc: a1 b9 05 08  	.word	0x0805b9a1
 805f900: 61 22 06 08  	.word	0x08062261
 805f904: 21 05 06 08  	.word	0x08060521

0805f908 <MPU_xQueueGetMutexHolder>:
;         {
 805f908: b580         	push	{r7, lr}
 805f90a: 466f         	mov	r7, sp
 805f90c: b084         	sub	sp, #0x10
 805f90e: f643 5240    	movw	r2, #0x3d40
 805f912: f2c2 0200    	movt	r2, #0x2000
 805f916: 6811         	ldr	r1, [r2]
 805f918: f642 5340    	movw	r3, #0x2d40
 805f91c: f2c2 0300    	movt	r3, #0x2000
 805f920: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805f924: 3101         	adds	r1, #0x1
 805f926: 6011         	str	r1, [r2]
 805f928: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f92a: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f95c <MPU_xQueueGetMutexHolder+0x54>
 805f92c: 4780         	blx	r0
 805f92e: b940         	cbnz	r0, 0x805f942 <MPU_xQueueGetMutexHolder+0x3a> @ imm = #0x10
 805f930: e7ff         	b	0x805f932 <MPU_xQueueGetMutexHolder+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f932: df03         	svc	#0x3
;                 xReturn = xQueueGetMutexHolder( xSemaphore );
 805f934: 9803         	ldr	r0, [sp, #0xc]
 805f936: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805f964 <MPU_xQueueGetMutexHolder+0x5c>
 805f938: 4788         	blx	r1
 805f93a: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805f93c: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f968 <MPU_xQueueGetMutexHolder+0x60>
 805f93e: 4780         	blx	r0
;             }
 805f940: e004         	b	0x805f94c <MPU_xQueueGetMutexHolder+0x44> @ imm = #0x8
;                 xReturn = xQueueGetMutexHolder( xSemaphore );
 805f942: 9803         	ldr	r0, [sp, #0xc]
 805f944: 4906         	ldr	r1, [pc, #0x18]         @ 0x805f960 <MPU_xQueueGetMutexHolder+0x58>
 805f946: 4788         	blx	r1
 805f948: 9002         	str	r0, [sp, #0x8]
 805f94a: e7ff         	b	0x805f94c <MPU_xQueueGetMutexHolder+0x44> @ imm = #-0x2
;             return xReturn;
 805f94c: 9802         	ldr	r0, [sp, #0x8]
 805f94e: 9001         	str	r0, [sp, #0x4]
 805f950: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f96c <MPU_xQueueGetMutexHolder+0x64>
 805f952: 4780         	blx	r0
 805f954: 9801         	ldr	r0, [sp, #0x4]
 805f956: b004         	add	sp, #0x10
 805f958: bd80         	pop	{r7, pc}
 805f95a: bf00         	nop

0805f95c <$d.69>:
 805f95c: 31 22 06 08  	.word	0x08062231
 805f960: 51 b5 05 08  	.word	0x0805b551
 805f964: 51 b5 05 08  	.word	0x0805b551
 805f968: 61 22 06 08  	.word	0x08062261
 805f96c: 21 05 06 08  	.word	0x08060521

0805f970 <MPU_xQueueTakeMutexRecursive>:
;         {
 805f970: b580         	push	{r7, lr}
 805f972: 466f         	mov	r7, sp
 805f974: b084         	sub	sp, #0x10
 805f976: f643 5340    	movw	r3, #0x3d40
 805f97a: f2c2 0300    	movt	r3, #0x2000
 805f97e: 681a         	ldr	r2, [r3]
 805f980: f642 5c40    	movw	r12, #0x2d40
 805f984: f2c2 0c00    	movt	r12, #0x2000
 805f988: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805f98c: 3201         	adds	r2, #0x1
 805f98e: 601a         	str	r2, [r3]
 805f990: 9003         	str	r0, [sp, #0xc]
 805f992: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f994: 480c         	ldr	r0, [pc, #0x30]         @ 0x805f9c8 <MPU_xQueueTakeMutexRecursive+0x58>
 805f996: 4780         	blx	r0
 805f998: b948         	cbnz	r0, 0x805f9ae <MPU_xQueueTakeMutexRecursive+0x3e> @ imm = #0x12
 805f99a: e7ff         	b	0x805f99c <MPU_xQueueTakeMutexRecursive+0x2c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805f99c: df03         	svc	#0x3
;                 xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 805f99e: 9803         	ldr	r0, [sp, #0xc]
 805f9a0: 9902         	ldr	r1, [sp, #0x8]
 805f9a2: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805f9d0 <MPU_xQueueTakeMutexRecursive+0x60>
 805f9a4: 4790         	blx	r2
 805f9a6: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805f9a8: 480a         	ldr	r0, [pc, #0x28]         @ 0x805f9d4 <MPU_xQueueTakeMutexRecursive+0x64>
 805f9aa: 4780         	blx	r0
;             }
 805f9ac: e005         	b	0x805f9ba <MPU_xQueueTakeMutexRecursive+0x4a> @ imm = #0xa
;                 xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 805f9ae: 9803         	ldr	r0, [sp, #0xc]
 805f9b0: 9902         	ldr	r1, [sp, #0x8]
 805f9b2: 4a06         	ldr	r2, [pc, #0x18]         @ 0x805f9cc <MPU_xQueueTakeMutexRecursive+0x5c>
 805f9b4: 4790         	blx	r2
 805f9b6: 9001         	str	r0, [sp, #0x4]
 805f9b8: e7ff         	b	0x805f9ba <MPU_xQueueTakeMutexRecursive+0x4a> @ imm = #-0x2
;             return xReturn;
 805f9ba: 9801         	ldr	r0, [sp, #0x4]
 805f9bc: 9000         	str	r0, [sp]
 805f9be: 4806         	ldr	r0, [pc, #0x18]         @ 0x805f9d8 <MPU_xQueueTakeMutexRecursive+0x68>
 805f9c0: 4780         	blx	r0
 805f9c2: 9800         	ldr	r0, [sp]
 805f9c4: b004         	add	sp, #0x10
 805f9c6: bd80         	pop	{r7, pc}

0805f9c8 <$d.75>:
 805f9c8: 31 22 06 08  	.word	0x08062231
 805f9cc: 0d b9 05 08  	.word	0x0805b90d
 805f9d0: 0d b9 05 08  	.word	0x0805b90d
 805f9d4: 61 22 06 08  	.word	0x08062261
 805f9d8: 21 05 06 08  	.word	0x08060521

0805f9dc <MPU_xQueueGiveMutexRecursive>:
;         {
 805f9dc: b580         	push	{r7, lr}
 805f9de: 466f         	mov	r7, sp
 805f9e0: b084         	sub	sp, #0x10
 805f9e2: f643 5240    	movw	r2, #0x3d40
 805f9e6: f2c2 0200    	movt	r2, #0x2000
 805f9ea: 6811         	ldr	r1, [r2]
 805f9ec: f642 5340    	movw	r3, #0x2d40
 805f9f0: f2c2 0300    	movt	r3, #0x2000
 805f9f4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805f9f8: 3101         	adds	r1, #0x1
 805f9fa: 6011         	str	r1, [r2]
 805f9fc: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805f9fe: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fa30 <MPU_xQueueGiveMutexRecursive+0x54>
 805fa00: 4780         	blx	r0
 805fa02: b940         	cbnz	r0, 0x805fa16 <MPU_xQueueGiveMutexRecursive+0x3a> @ imm = #0x10
 805fa04: e7ff         	b	0x805fa06 <MPU_xQueueGiveMutexRecursive+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fa06: df03         	svc	#0x3
;                 xReturn = xQueueGiveMutexRecursive( xMutex );
 805fa08: 9803         	ldr	r0, [sp, #0xc]
 805fa0a: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fa38 <MPU_xQueueGiveMutexRecursive+0x5c>
 805fa0c: 4788         	blx	r1
 805fa0e: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fa10: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fa3c <MPU_xQueueGiveMutexRecursive+0x60>
 805fa12: 4780         	blx	r0
;             }
 805fa14: e004         	b	0x805fa20 <MPU_xQueueGiveMutexRecursive+0x44> @ imm = #0x8
;                 xReturn = xQueueGiveMutexRecursive( xMutex );
 805fa16: 9803         	ldr	r0, [sp, #0xc]
 805fa18: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fa34 <MPU_xQueueGiveMutexRecursive+0x58>
 805fa1a: 4788         	blx	r1
 805fa1c: 9002         	str	r0, [sp, #0x8]
 805fa1e: e7ff         	b	0x805fa20 <MPU_xQueueGiveMutexRecursive+0x44> @ imm = #-0x2
;             return xReturn;
 805fa20: 9802         	ldr	r0, [sp, #0x8]
 805fa22: 9001         	str	r0, [sp, #0x4]
 805fa24: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fa40 <MPU_xQueueGiveMutexRecursive+0x64>
 805fa26: 4780         	blx	r0
 805fa28: 9801         	ldr	r0, [sp, #0x4]
 805fa2a: b004         	add	sp, #0x10
 805fa2c: bd80         	pop	{r7, pc}
 805fa2e: bf00         	nop

0805fa30 <$d.77>:
 805fa30: 31 22 06 08  	.word	0x08062231
 805fa34: 1d b6 05 08  	.word	0x0805b61d
 805fa38: 1d b6 05 08  	.word	0x0805b61d
 805fa3c: 61 22 06 08  	.word	0x08062261
 805fa40: 21 05 06 08  	.word	0x08060521

0805fa44 <MPU_vQueueAddToRegistry>:
;         {
 805fa44: b580         	push	{r7, lr}
 805fa46: 466f         	mov	r7, sp
 805fa48: b082         	sub	sp, #0x8
 805fa4a: f643 5340    	movw	r3, #0x3d40
 805fa4e: f2c2 0300    	movt	r3, #0x2000
 805fa52: 681a         	ldr	r2, [r3]
 805fa54: f642 5c40    	movw	r12, #0x2d40
 805fa58: f2c2 0c00    	movt	r12, #0x2000
 805fa5c: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805fa60: 3201         	adds	r2, #0x1
 805fa62: 601a         	str	r2, [r3]
 805fa64: 9001         	str	r0, [sp, #0x4]
 805fa66: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fa68: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fa94 <MPU_vQueueAddToRegistry+0x50>
 805fa6a: 4780         	blx	r0
 805fa6c: b940         	cbnz	r0, 0x805fa80 <MPU_vQueueAddToRegistry+0x3c> @ imm = #0x10
 805fa6e: e7ff         	b	0x805fa70 <MPU_vQueueAddToRegistry+0x2c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fa70: df03         	svc	#0x3
;                 vQueueAddToRegistry( xQueue, pcName );
 805fa72: 9801         	ldr	r0, [sp, #0x4]
 805fa74: 9900         	ldr	r1, [sp]
 805fa76: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805fa9c <MPU_vQueueAddToRegistry+0x58>
 805fa78: 4790         	blx	r2
;                 portRESET_PRIVILEGE();
 805fa7a: 4809         	ldr	r0, [pc, #0x24]         @ 0x805faa0 <MPU_vQueueAddToRegistry+0x5c>
 805fa7c: 4780         	blx	r0
;             }
 805fa7e: e004         	b	0x805fa8a <MPU_vQueueAddToRegistry+0x46> @ imm = #0x8
;                 vQueueAddToRegistry( xQueue, pcName );
 805fa80: 9801         	ldr	r0, [sp, #0x4]
 805fa82: 9900         	ldr	r1, [sp]
 805fa84: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805fa98 <MPU_vQueueAddToRegistry+0x54>
 805fa86: 4790         	blx	r2
 805fa88: e7ff         	b	0x805fa8a <MPU_vQueueAddToRegistry+0x46> @ imm = #-0x2
;         }
 805fa8a: 4806         	ldr	r0, [pc, #0x18]         @ 0x805faa4 <MPU_vQueueAddToRegistry+0x60>
 805fa8c: 4780         	blx	r0
 805fa8e: b002         	add	sp, #0x8
 805fa90: bd80         	pop	{r7, pc}
 805fa92: bf00         	nop

0805fa94 <$d.79>:
 805fa94: 31 22 06 08  	.word	0x08062231
 805fa98: 21 cd 05 08  	.word	0x0805cd21
 805fa9c: 21 cd 05 08  	.word	0x0805cd21
 805faa0: 61 22 06 08  	.word	0x08062261
 805faa4: 21 05 06 08  	.word	0x08060521

0805faa8 <MPU_vQueueUnregisterQueue>:
;         {
 805faa8: b580         	push	{r7, lr}
 805faaa: 466f         	mov	r7, sp
 805faac: b082         	sub	sp, #0x8
 805faae: f643 5240    	movw	r2, #0x3d40
 805fab2: f2c2 0200    	movt	r2, #0x2000
 805fab6: 6811         	ldr	r1, [r2]
 805fab8: f642 5340    	movw	r3, #0x2d40
 805fabc: f2c2 0300    	movt	r3, #0x2000
 805fac0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805fac4: 3101         	adds	r1, #0x1
 805fac6: 6011         	str	r1, [r2]
 805fac8: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805faca: 4809         	ldr	r0, [pc, #0x24]         @ 0x805faf0 <MPU_vQueueUnregisterQueue+0x48>
 805facc: 4780         	blx	r0
 805face: b938         	cbnz	r0, 0x805fae0 <MPU_vQueueUnregisterQueue+0x38> @ imm = #0xe
 805fad0: e7ff         	b	0x805fad2 <MPU_vQueueUnregisterQueue+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fad2: df03         	svc	#0x3
;                 vQueueUnregisterQueue( xQueue );
 805fad4: 9801         	ldr	r0, [sp, #0x4]
 805fad6: 4908         	ldr	r1, [pc, #0x20]         @ 0x805faf8 <MPU_vQueueUnregisterQueue+0x50>
 805fad8: 4788         	blx	r1
;                 portRESET_PRIVILEGE();
 805fada: 4808         	ldr	r0, [pc, #0x20]         @ 0x805fafc <MPU_vQueueUnregisterQueue+0x54>
 805fadc: 4780         	blx	r0
;             }
 805fade: e003         	b	0x805fae8 <MPU_vQueueUnregisterQueue+0x40> @ imm = #0x6
;                 vQueueUnregisterQueue( xQueue );
 805fae0: 9801         	ldr	r0, [sp, #0x4]
 805fae2: 4904         	ldr	r1, [pc, #0x10]         @ 0x805faf4 <MPU_vQueueUnregisterQueue+0x4c>
 805fae4: 4788         	blx	r1
 805fae6: e7ff         	b	0x805fae8 <MPU_vQueueUnregisterQueue+0x40> @ imm = #-0x2
;         }
 805fae8: 4805         	ldr	r0, [pc, #0x14]         @ 0x805fb00 <MPU_vQueueUnregisterQueue+0x58>
 805faea: 4780         	blx	r0
 805faec: b002         	add	sp, #0x8
 805faee: bd80         	pop	{r7, pc}

0805faf0 <$d.81>:
 805faf0: 31 22 06 08  	.word	0x08062231
 805faf4: b9 ca 05 08  	.word	0x0805cab9
 805faf8: b9 ca 05 08  	.word	0x0805cab9
 805fafc: 61 22 06 08  	.word	0x08062261
 805fb00: 21 05 06 08  	.word	0x08060521

0805fb04 <MPU_pcQueueGetName>:
;         {
 805fb04: b580         	push	{r7, lr}
 805fb06: 466f         	mov	r7, sp
 805fb08: b084         	sub	sp, #0x10
 805fb0a: f643 5240    	movw	r2, #0x3d40
 805fb0e: f2c2 0200    	movt	r2, #0x2000
 805fb12: 6811         	ldr	r1, [r2]
 805fb14: f642 5340    	movw	r3, #0x2d40
 805fb18: f2c2 0300    	movt	r3, #0x2000
 805fb1c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805fb20: 3101         	adds	r1, #0x1
 805fb22: 6011         	str	r1, [r2]
 805fb24: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fb26: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fb58 <MPU_pcQueueGetName+0x54>
 805fb28: 4780         	blx	r0
 805fb2a: b940         	cbnz	r0, 0x805fb3e <MPU_pcQueueGetName+0x3a> @ imm = #0x10
 805fb2c: e7ff         	b	0x805fb2e <MPU_pcQueueGetName+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fb2e: df03         	svc	#0x3
;                 pcReturn = pcQueueGetName( xQueue );
 805fb30: 9803         	ldr	r0, [sp, #0xc]
 805fb32: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fb60 <MPU_pcQueueGetName+0x5c>
 805fb34: 4788         	blx	r1
 805fb36: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fb38: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fb64 <MPU_pcQueueGetName+0x60>
 805fb3a: 4780         	blx	r0
;             }
 805fb3c: e004         	b	0x805fb48 <MPU_pcQueueGetName+0x44> @ imm = #0x8
;                 pcReturn = pcQueueGetName( xQueue );
 805fb3e: 9803         	ldr	r0, [sp, #0xc]
 805fb40: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fb5c <MPU_pcQueueGetName+0x58>
 805fb42: 4788         	blx	r1
 805fb44: 9002         	str	r0, [sp, #0x8]
 805fb46: e7ff         	b	0x805fb48 <MPU_pcQueueGetName+0x44> @ imm = #-0x2
;             return pcReturn;
 805fb48: 9802         	ldr	r0, [sp, #0x8]
 805fb4a: 9001         	str	r0, [sp, #0x4]
 805fb4c: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fb68 <MPU_pcQueueGetName+0x64>
 805fb4e: 4780         	blx	r0
 805fb50: 9801         	ldr	r0, [sp, #0x4]
 805fb52: b004         	add	sp, #0x10
 805fb54: bd80         	pop	{r7, pc}
 805fb56: bf00         	nop

0805fb58 <$d.83>:
 805fb58: 31 22 06 08  	.word	0x08062231
 805fb5c: f5 cd 05 08  	.word	0x0805cdf5
 805fb60: f5 cd 05 08  	.word	0x0805cdf5
 805fb64: 61 22 06 08  	.word	0x08062261
 805fb68: 21 05 06 08  	.word	0x08060521

0805fb6c <MPU_pvTimerGetTimerID>:
;         {
 805fb6c: b580         	push	{r7, lr}
 805fb6e: 466f         	mov	r7, sp
 805fb70: b084         	sub	sp, #0x10
 805fb72: f643 5240    	movw	r2, #0x3d40
 805fb76: f2c2 0200    	movt	r2, #0x2000
 805fb7a: 6811         	ldr	r1, [r2]
 805fb7c: f642 5340    	movw	r3, #0x2d40
 805fb80: f2c2 0300    	movt	r3, #0x2000
 805fb84: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805fb88: 3101         	adds	r1, #0x1
 805fb8a: 6011         	str	r1, [r2]
 805fb8c: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fb8e: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fbc0 <MPU_pvTimerGetTimerID+0x54>
 805fb90: 4780         	blx	r0
 805fb92: b940         	cbnz	r0, 0x805fba6 <MPU_pvTimerGetTimerID+0x3a> @ imm = #0x10
 805fb94: e7ff         	b	0x805fb96 <MPU_pvTimerGetTimerID+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fb96: df03         	svc	#0x3
;                 pvReturn = pvTimerGetTimerID( xTimer );
 805fb98: 9803         	ldr	r0, [sp, #0xc]
 805fb9a: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fbc8 <MPU_pvTimerGetTimerID+0x5c>
 805fb9c: 4788         	blx	r1
 805fb9e: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fba0: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fbcc <MPU_pvTimerGetTimerID+0x60>
 805fba2: 4780         	blx	r0
;             }
 805fba4: e004         	b	0x805fbb0 <MPU_pvTimerGetTimerID+0x44> @ imm = #0x8
;                 pvReturn = pvTimerGetTimerID( xTimer );
 805fba6: 9803         	ldr	r0, [sp, #0xc]
 805fba8: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fbc4 <MPU_pvTimerGetTimerID+0x58>
 805fbaa: 4788         	blx	r1
 805fbac: 9002         	str	r0, [sp, #0x8]
 805fbae: e7ff         	b	0x805fbb0 <MPU_pvTimerGetTimerID+0x44> @ imm = #-0x2
;             return pvReturn;
 805fbb0: 9802         	ldr	r0, [sp, #0x8]
 805fbb2: 9001         	str	r0, [sp, #0x4]
 805fbb4: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fbd0 <MPU_pvTimerGetTimerID+0x64>
 805fbb6: 4780         	blx	r0
 805fbb8: 9801         	ldr	r0, [sp, #0x4]
 805fbba: b004         	add	sp, #0x10
 805fbbc: bd80         	pop	{r7, pc}
 805fbbe: bf00         	nop

0805fbc0 <$d.87>:
 805fbc0: 31 22 06 08  	.word	0x08062231
 805fbc4: b1 98 05 08  	.word	0x080598b1
 805fbc8: b1 98 05 08  	.word	0x080598b1
 805fbcc: 61 22 06 08  	.word	0x08062261
 805fbd0: 21 05 06 08  	.word	0x08060521

0805fbd4 <MPU_vTimerSetTimerID>:
;         {
 805fbd4: b580         	push	{r7, lr}
 805fbd6: 466f         	mov	r7, sp
 805fbd8: b082         	sub	sp, #0x8
 805fbda: f643 5340    	movw	r3, #0x3d40
 805fbde: f2c2 0300    	movt	r3, #0x2000
 805fbe2: 681a         	ldr	r2, [r3]
 805fbe4: f642 5c40    	movw	r12, #0x2d40
 805fbe8: f2c2 0c00    	movt	r12, #0x2000
 805fbec: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805fbf0: 3201         	adds	r2, #0x1
 805fbf2: 601a         	str	r2, [r3]
 805fbf4: 9001         	str	r0, [sp, #0x4]
 805fbf6: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fbf8: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fc24 <MPU_vTimerSetTimerID+0x50>
 805fbfa: 4780         	blx	r0
 805fbfc: b940         	cbnz	r0, 0x805fc10 <MPU_vTimerSetTimerID+0x3c> @ imm = #0x10
 805fbfe: e7ff         	b	0x805fc00 <MPU_vTimerSetTimerID+0x2c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fc00: df03         	svc	#0x3
;                 vTimerSetTimerID( xTimer, pvNewID );
 805fc02: 9801         	ldr	r0, [sp, #0x4]
 805fc04: 9900         	ldr	r1, [sp]
 805fc06: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805fc2c <MPU_vTimerSetTimerID+0x58>
 805fc08: 4790         	blx	r2
;                 portRESET_PRIVILEGE();
 805fc0a: 4809         	ldr	r0, [pc, #0x24]         @ 0x805fc30 <MPU_vTimerSetTimerID+0x5c>
 805fc0c: 4780         	blx	r0
;             }
 805fc0e: e004         	b	0x805fc1a <MPU_vTimerSetTimerID+0x46> @ imm = #0x8
;                 vTimerSetTimerID( xTimer, pvNewID );
 805fc10: 9801         	ldr	r0, [sp, #0x4]
 805fc12: 9900         	ldr	r1, [sp]
 805fc14: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805fc28 <MPU_vTimerSetTimerID+0x54>
 805fc16: 4790         	blx	r2
 805fc18: e7ff         	b	0x805fc1a <MPU_vTimerSetTimerID+0x46> @ imm = #-0x2
;         }
 805fc1a: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fc34 <MPU_vTimerSetTimerID+0x60>
 805fc1c: 4780         	blx	r0
 805fc1e: b002         	add	sp, #0x8
 805fc20: bd80         	pop	{r7, pc}
 805fc22: bf00         	nop

0805fc24 <$d.89>:
 805fc24: 31 22 06 08  	.word	0x08062231
 805fc28: 11 99 05 08  	.word	0x08059911
 805fc2c: 11 99 05 08  	.word	0x08059911
 805fc30: 61 22 06 08  	.word	0x08062261
 805fc34: 21 05 06 08  	.word	0x08060521

0805fc38 <MPU_xTimerIsTimerActive>:
;         {
 805fc38: b580         	push	{r7, lr}
 805fc3a: 466f         	mov	r7, sp
 805fc3c: b084         	sub	sp, #0x10
 805fc3e: f643 5240    	movw	r2, #0x3d40
 805fc42: f2c2 0200    	movt	r2, #0x2000
 805fc46: 6811         	ldr	r1, [r2]
 805fc48: f642 5340    	movw	r3, #0x2d40
 805fc4c: f2c2 0300    	movt	r3, #0x2000
 805fc50: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805fc54: 3101         	adds	r1, #0x1
 805fc56: 6011         	str	r1, [r2]
 805fc58: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fc5a: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fc8c <MPU_xTimerIsTimerActive+0x54>
 805fc5c: 4780         	blx	r0
 805fc5e: b940         	cbnz	r0, 0x805fc72 <MPU_xTimerIsTimerActive+0x3a> @ imm = #0x10
 805fc60: e7ff         	b	0x805fc62 <MPU_xTimerIsTimerActive+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fc62: df03         	svc	#0x3
;                 xReturn = xTimerIsTimerActive( xTimer );
 805fc64: 9803         	ldr	r0, [sp, #0xc]
 805fc66: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fc94 <MPU_xTimerIsTimerActive+0x5c>
 805fc68: 4788         	blx	r1
 805fc6a: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fc6c: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fc98 <MPU_xTimerIsTimerActive+0x60>
 805fc6e: 4780         	blx	r0
;             }
 805fc70: e004         	b	0x805fc7c <MPU_xTimerIsTimerActive+0x44> @ imm = #0x8
;                 xReturn = xTimerIsTimerActive( xTimer );
 805fc72: 9803         	ldr	r0, [sp, #0xc]
 805fc74: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fc90 <MPU_xTimerIsTimerActive+0x58>
 805fc76: 4788         	blx	r1
 805fc78: 9002         	str	r0, [sp, #0x8]
 805fc7a: e7ff         	b	0x805fc7c <MPU_xTimerIsTimerActive+0x44> @ imm = #-0x2
;             return xReturn;
 805fc7c: 9802         	ldr	r0, [sp, #0x8]
 805fc7e: 9001         	str	r0, [sp, #0x4]
 805fc80: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fc9c <MPU_xTimerIsTimerActive+0x64>
 805fc82: 4780         	blx	r0
 805fc84: 9801         	ldr	r0, [sp, #0x4]
 805fc86: b004         	add	sp, #0x10
 805fc88: bd80         	pop	{r7, pc}
 805fc8a: bf00         	nop

0805fc8c <$d.91>:
 805fc8c: 31 22 06 08  	.word	0x08062231
 805fc90: 3d 98 05 08  	.word	0x0805983d
 805fc94: 3d 98 05 08  	.word	0x0805983d
 805fc98: 61 22 06 08  	.word	0x08062261
 805fc9c: 21 05 06 08  	.word	0x08060521

0805fca0 <MPU_xTimerGetTimerDaemonTaskHandle>:
;         {
 805fca0: b580         	push	{r7, lr}
 805fca2: 466f         	mov	r7, sp
 805fca4: b082         	sub	sp, #0x8
 805fca6: f643 5140    	movw	r1, #0x3d40
 805fcaa: f2c2 0100    	movt	r1, #0x2000
 805fcae: 6808         	ldr	r0, [r1]
 805fcb0: f642 5240    	movw	r2, #0x2d40
 805fcb4: f2c2 0200    	movt	r2, #0x2000
 805fcb8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 805fcbc: 3001         	adds	r0, #0x1
 805fcbe: 6008         	str	r0, [r1]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fcc0: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fcec <MPU_xTimerGetTimerDaemonTaskHandle+0x4c>
 805fcc2: 4780         	blx	r0
 805fcc4: b938         	cbnz	r0, 0x805fcd6 <MPU_xTimerGetTimerDaemonTaskHandle+0x36> @ imm = #0xe
 805fcc6: e7ff         	b	0x805fcc8 <MPU_xTimerGetTimerDaemonTaskHandle+0x28> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fcc8: df03         	svc	#0x3
;                 xReturn = xTimerGetTimerDaemonTaskHandle();
 805fcca: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fcf4 <MPU_xTimerGetTimerDaemonTaskHandle+0x54>
 805fccc: 4780         	blx	r0
 805fcce: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805fcd0: 4809         	ldr	r0, [pc, #0x24]         @ 0x805fcf8 <MPU_xTimerGetTimerDaemonTaskHandle+0x58>
 805fcd2: 4780         	blx	r0
;             }
 805fcd4: e003         	b	0x805fcde <MPU_xTimerGetTimerDaemonTaskHandle+0x3e> @ imm = #0x6
;                 xReturn = xTimerGetTimerDaemonTaskHandle();
 805fcd6: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fcf0 <MPU_xTimerGetTimerDaemonTaskHandle+0x50>
 805fcd8: 4780         	blx	r0
 805fcda: 9001         	str	r0, [sp, #0x4]
 805fcdc: e7ff         	b	0x805fcde <MPU_xTimerGetTimerDaemonTaskHandle+0x3e> @ imm = #-0x2
;             return xReturn;
 805fcde: 9801         	ldr	r0, [sp, #0x4]
 805fce0: 9000         	str	r0, [sp]
 805fce2: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fcfc <MPU_xTimerGetTimerDaemonTaskHandle+0x5c>
 805fce4: 4780         	blx	r0
 805fce6: 9800         	ldr	r0, [sp]
 805fce8: b002         	add	sp, #0x8
 805fcea: bd80         	pop	{r7, pc}

0805fcec <$d.93>:
 805fcec: 31 22 06 08  	.word	0x08062231
 805fcf0: d1 95 05 08  	.word	0x080595d1
 805fcf4: d1 95 05 08  	.word	0x080595d1
 805fcf8: 61 22 06 08  	.word	0x08062261
 805fcfc: 21 05 06 08  	.word	0x08060521

0805fd00 <MPU_vTimerSetReloadMode>:
;         {
 805fd00: b580         	push	{r7, lr}
 805fd02: 466f         	mov	r7, sp
 805fd04: b082         	sub	sp, #0x8
 805fd06: f643 5340    	movw	r3, #0x3d40
 805fd0a: f2c2 0300    	movt	r3, #0x2000
 805fd0e: 681a         	ldr	r2, [r3]
 805fd10: f642 5c40    	movw	r12, #0x2d40
 805fd14: f2c2 0c00    	movt	r12, #0x2000
 805fd18: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 805fd1c: 3201         	adds	r2, #0x1
 805fd1e: 601a         	str	r2, [r3]
 805fd20: 9001         	str	r0, [sp, #0x4]
 805fd22: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fd24: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fd50 <MPU_vTimerSetReloadMode+0x50>
 805fd26: 4780         	blx	r0
 805fd28: b940         	cbnz	r0, 0x805fd3c <MPU_vTimerSetReloadMode+0x3c> @ imm = #0x10
 805fd2a: e7ff         	b	0x805fd2c <MPU_vTimerSetReloadMode+0x2c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fd2c: df03         	svc	#0x3
;                 vTimerSetReloadMode( xTimer, uxAutoReload );
 805fd2e: 9801         	ldr	r0, [sp, #0x4]
 805fd30: 9900         	ldr	r1, [sp]
 805fd32: 4a09         	ldr	r2, [pc, #0x24]         @ 0x805fd58 <MPU_vTimerSetReloadMode+0x58>
 805fd34: 4790         	blx	r2
;                 portRESET_PRIVILEGE();
 805fd36: 4809         	ldr	r0, [pc, #0x24]         @ 0x805fd5c <MPU_vTimerSetReloadMode+0x5c>
 805fd38: 4780         	blx	r0
;             }
 805fd3a: e004         	b	0x805fd46 <MPU_vTimerSetReloadMode+0x46> @ imm = #0x8
;                 vTimerSetReloadMode( xTimer, uxAutoReload );
 805fd3c: 9801         	ldr	r0, [sp, #0x4]
 805fd3e: 9900         	ldr	r1, [sp]
 805fd40: 4a04         	ldr	r2, [pc, #0x10]         @ 0x805fd54 <MPU_vTimerSetReloadMode+0x54>
 805fd42: 4790         	blx	r2
 805fd44: e7ff         	b	0x805fd46 <MPU_vTimerSetReloadMode+0x46> @ imm = #-0x2
;         }
 805fd46: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fd60 <MPU_vTimerSetReloadMode+0x60>
 805fd48: 4780         	blx	r0
 805fd4a: b002         	add	sp, #0x8
 805fd4c: bd80         	pop	{r7, pc}
 805fd4e: bf00         	nop

0805fd50 <$d.95>:
 805fd50: 31 22 06 08  	.word	0x08062231
 805fd54: 71 96 05 08  	.word	0x08059671
 805fd58: 71 96 05 08  	.word	0x08059671
 805fd5c: 61 22 06 08  	.word	0x08062261
 805fd60: 21 05 06 08  	.word	0x08060521

0805fd64 <MPU_uxTimerGetReloadMode>:
;         {
 805fd64: b580         	push	{r7, lr}
 805fd66: 466f         	mov	r7, sp
 805fd68: b084         	sub	sp, #0x10
 805fd6a: f643 5240    	movw	r2, #0x3d40
 805fd6e: f2c2 0200    	movt	r2, #0x2000
 805fd72: 6811         	ldr	r1, [r2]
 805fd74: f642 5340    	movw	r3, #0x2d40
 805fd78: f2c2 0300    	movt	r3, #0x2000
 805fd7c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805fd80: 3101         	adds	r1, #0x1
 805fd82: 6011         	str	r1, [r2]
 805fd84: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fd86: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fdb8 <MPU_uxTimerGetReloadMode+0x54>
 805fd88: 4780         	blx	r0
 805fd8a: b940         	cbnz	r0, 0x805fd9e <MPU_uxTimerGetReloadMode+0x3a> @ imm = #0x10
 805fd8c: e7ff         	b	0x805fd8e <MPU_uxTimerGetReloadMode+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fd8e: df03         	svc	#0x3
;                 uxReturn = uxTimerGetReloadMode( xTimer );
 805fd90: 9803         	ldr	r0, [sp, #0xc]
 805fd92: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fdc0 <MPU_uxTimerGetReloadMode+0x5c>
 805fd94: 4788         	blx	r1
 805fd96: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fd98: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fdc4 <MPU_uxTimerGetReloadMode+0x60>
 805fd9a: 4780         	blx	r0
;             }
 805fd9c: e004         	b	0x805fda8 <MPU_uxTimerGetReloadMode+0x44> @ imm = #0x8
;                 uxReturn = uxTimerGetReloadMode( xTimer );
 805fd9e: 9803         	ldr	r0, [sp, #0xc]
 805fda0: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fdbc <MPU_uxTimerGetReloadMode+0x58>
 805fda2: 4788         	blx	r1
 805fda4: 9002         	str	r0, [sp, #0x8]
 805fda6: e7ff         	b	0x805fda8 <MPU_uxTimerGetReloadMode+0x44> @ imm = #-0x2
;             return uxReturn;
 805fda8: 9802         	ldr	r0, [sp, #0x8]
 805fdaa: 9001         	str	r0, [sp, #0x4]
 805fdac: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fdc8 <MPU_uxTimerGetReloadMode+0x64>
 805fdae: 4780         	blx	r0
 805fdb0: 9801         	ldr	r0, [sp, #0x4]
 805fdb2: b004         	add	sp, #0x10
 805fdb4: bd80         	pop	{r7, pc}
 805fdb6: bf00         	nop

0805fdb8 <$d.97>:
 805fdb8: 31 22 06 08  	.word	0x08062231
 805fdbc: 61 97 05 08  	.word	0x08059761
 805fdc0: 61 97 05 08  	.word	0x08059761
 805fdc4: 61 22 06 08  	.word	0x08062261
 805fdc8: 21 05 06 08  	.word	0x08060521

0805fdcc <MPU_pcTimerGetName>:
;         {
 805fdcc: b580         	push	{r7, lr}
 805fdce: 466f         	mov	r7, sp
 805fdd0: b084         	sub	sp, #0x10
 805fdd2: f643 5240    	movw	r2, #0x3d40
 805fdd6: f2c2 0200    	movt	r2, #0x2000
 805fdda: 6811         	ldr	r1, [r2]
 805fddc: f642 5340    	movw	r3, #0x2d40
 805fde0: f2c2 0300    	movt	r3, #0x2000
 805fde4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805fde8: 3101         	adds	r1, #0x1
 805fdea: 6011         	str	r1, [r2]
 805fdec: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fdee: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fe20 <MPU_pcTimerGetName+0x54>
 805fdf0: 4780         	blx	r0
 805fdf2: b940         	cbnz	r0, 0x805fe06 <MPU_pcTimerGetName+0x3a> @ imm = #0x10
 805fdf4: e7ff         	b	0x805fdf6 <MPU_pcTimerGetName+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fdf6: df03         	svc	#0x3
;                 pcReturn = pcTimerGetName( xTimer );
 805fdf8: 9803         	ldr	r0, [sp, #0xc]
 805fdfa: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fe28 <MPU_pcTimerGetName+0x5c>
 805fdfc: 4788         	blx	r1
 805fdfe: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fe00: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fe2c <MPU_pcTimerGetName+0x60>
 805fe02: 4780         	blx	r0
;             }
 805fe04: e004         	b	0x805fe10 <MPU_pcTimerGetName+0x44> @ imm = #0x8
;                 pcReturn = pcTimerGetName( xTimer );
 805fe06: 9803         	ldr	r0, [sp, #0xc]
 805fe08: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fe24 <MPU_pcTimerGetName+0x58>
 805fe0a: 4788         	blx	r1
 805fe0c: 9002         	str	r0, [sp, #0x8]
 805fe0e: e7ff         	b	0x805fe10 <MPU_pcTimerGetName+0x44> @ imm = #-0x2
;             return pcReturn;
 805fe10: 9802         	ldr	r0, [sp, #0x8]
 805fe12: 9001         	str	r0, [sp, #0x4]
 805fe14: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fe30 <MPU_pcTimerGetName+0x64>
 805fe16: 4780         	blx	r0
 805fe18: 9801         	ldr	r0, [sp, #0x4]
 805fe1a: b004         	add	sp, #0x10
 805fe1c: bd80         	pop	{r7, pc}
 805fe1e: bf00         	nop

0805fe20 <$d.99>:
 805fe20: 31 22 06 08  	.word	0x08062231
 805fe24: f1 97 05 08  	.word	0x080597f1
 805fe28: f1 97 05 08  	.word	0x080597f1
 805fe2c: 61 22 06 08  	.word	0x08062261
 805fe30: 21 05 06 08  	.word	0x08060521

0805fe34 <MPU_xTimerGetPeriod>:
;         {
 805fe34: b580         	push	{r7, lr}
 805fe36: 466f         	mov	r7, sp
 805fe38: b084         	sub	sp, #0x10
 805fe3a: f643 5240    	movw	r2, #0x3d40
 805fe3e: f2c2 0200    	movt	r2, #0x2000
 805fe42: 6811         	ldr	r1, [r2]
 805fe44: f642 5340    	movw	r3, #0x2d40
 805fe48: f2c2 0300    	movt	r3, #0x2000
 805fe4c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805fe50: 3101         	adds	r1, #0x1
 805fe52: 6011         	str	r1, [r2]
 805fe54: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805fe56: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fe88 <MPU_xTimerGetPeriod+0x54>
 805fe58: 4780         	blx	r0
 805fe5a: b940         	cbnz	r0, 0x805fe6e <MPU_xTimerGetPeriod+0x3a> @ imm = #0x10
 805fe5c: e7ff         	b	0x805fe5e <MPU_xTimerGetPeriod+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fe5e: df03         	svc	#0x3
;                 xReturn = xTimerGetPeriod( xTimer );
 805fe60: 9803         	ldr	r0, [sp, #0xc]
 805fe62: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fe90 <MPU_xTimerGetPeriod+0x5c>
 805fe64: 4788         	blx	r1
 805fe66: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fe68: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fe94 <MPU_xTimerGetPeriod+0x60>
 805fe6a: 4780         	blx	r0
;             }
 805fe6c: e004         	b	0x805fe78 <MPU_xTimerGetPeriod+0x44> @ imm = #0x8
;                 xReturn = xTimerGetPeriod( xTimer );
 805fe6e: 9803         	ldr	r0, [sp, #0xc]
 805fe70: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fe8c <MPU_xTimerGetPeriod+0x58>
 805fe72: 4788         	blx	r1
 805fe74: 9002         	str	r0, [sp, #0x8]
 805fe76: e7ff         	b	0x805fe78 <MPU_xTimerGetPeriod+0x44> @ imm = #-0x2
;             return xReturn;
 805fe78: 9802         	ldr	r0, [sp, #0x8]
 805fe7a: 9001         	str	r0, [sp, #0x4]
 805fe7c: 4806         	ldr	r0, [pc, #0x18]         @ 0x805fe98 <MPU_xTimerGetPeriod+0x64>
 805fe7e: 4780         	blx	r0
 805fe80: 9801         	ldr	r0, [sp, #0x4]
 805fe82: b004         	add	sp, #0x10
 805fe84: bd80         	pop	{r7, pc}
 805fe86: bf00         	nop

0805fe88 <$d.101>:
 805fe88: 31 22 06 08  	.word	0x08062231
 805fe8c: 25 96 05 08  	.word	0x08059625
 805fe90: 25 96 05 08  	.word	0x08059625
 805fe94: 61 22 06 08  	.word	0x08062261
 805fe98: 21 05 06 08  	.word	0x08060521

0805fe9c <MPU_xTimerGetExpiryTime>:
;         {
 805fe9c: b580         	push	{r7, lr}
 805fe9e: 466f         	mov	r7, sp
 805fea0: b084         	sub	sp, #0x10
 805fea2: f643 5240    	movw	r2, #0x3d40
 805fea6: f2c2 0200    	movt	r2, #0x2000
 805feaa: 6811         	ldr	r1, [r2]
 805feac: f642 5340    	movw	r3, #0x2d40
 805feb0: f2c2 0300    	movt	r3, #0x2000
 805feb4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 805feb8: 3101         	adds	r1, #0x1
 805feba: 6011         	str	r1, [r2]
 805febc: 9003         	str	r0, [sp, #0xc]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805febe: 480c         	ldr	r0, [pc, #0x30]         @ 0x805fef0 <MPU_xTimerGetExpiryTime+0x54>
 805fec0: 4780         	blx	r0
 805fec2: b940         	cbnz	r0, 0x805fed6 <MPU_xTimerGetExpiryTime+0x3a> @ imm = #0x10
 805fec4: e7ff         	b	0x805fec6 <MPU_xTimerGetExpiryTime+0x2a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805fec6: df03         	svc	#0x3
;                 xReturn = xTimerGetExpiryTime( xTimer );
 805fec8: 9803         	ldr	r0, [sp, #0xc]
 805feca: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fef8 <MPU_xTimerGetExpiryTime+0x5c>
 805fecc: 4788         	blx	r1
 805fece: 9002         	str	r0, [sp, #0x8]
;                 portRESET_PRIVILEGE();
 805fed0: 480a         	ldr	r0, [pc, #0x28]         @ 0x805fefc <MPU_xTimerGetExpiryTime+0x60>
 805fed2: 4780         	blx	r0
;             }
 805fed4: e004         	b	0x805fee0 <MPU_xTimerGetExpiryTime+0x44> @ imm = #0x8
;                 xReturn = xTimerGetExpiryTime( xTimer );
 805fed6: 9803         	ldr	r0, [sp, #0xc]
 805fed8: 4906         	ldr	r1, [pc, #0x18]         @ 0x805fef4 <MPU_xTimerGetExpiryTime+0x58>
 805feda: 4788         	blx	r1
 805fedc: 9002         	str	r0, [sp, #0x8]
 805fede: e7ff         	b	0x805fee0 <MPU_xTimerGetExpiryTime+0x44> @ imm = #-0x2
;             return xReturn;
 805fee0: 9802         	ldr	r0, [sp, #0x8]
 805fee2: 9001         	str	r0, [sp, #0x4]
 805fee4: 4806         	ldr	r0, [pc, #0x18]         @ 0x805ff00 <MPU_xTimerGetExpiryTime+0x64>
 805fee6: 4780         	blx	r0
 805fee8: 9801         	ldr	r0, [sp, #0x4]
 805feea: b004         	add	sp, #0x10
 805feec: bd80         	pop	{r7, pc}
 805feee: bf00         	nop

0805fef0 <$d.103>:
 805fef0: 31 22 06 08  	.word	0x08062231
 805fef4: a1 97 05 08  	.word	0x080597a1
 805fef8: a1 97 05 08  	.word	0x080597a1
 805fefc: 61 22 06 08  	.word	0x08062261
 805ff00: 21 05 06 08  	.word	0x08060521

0805ff04 <MPU_xTimerGenericCommandFromTask>:
;         {
 805ff04: b5b0         	push	{r4, r5, r7, lr}
 805ff06: af02         	add	r7, sp, #0x8
 805ff08: b088         	sub	sp, #0x20
 805ff0a: 4674         	mov	r4, lr
 805ff0c: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805ff10: f643 5e40    	movw	lr, #0x3d40
 805ff14: f2c2 0e00    	movt	lr, #0x2000
 805ff18: f8de c000    	ldr.w	r12, [lr]
 805ff1c: f642 5540    	movw	r5, #0x2d40
 805ff20: f2c2 0500    	movt	r5, #0x2000
 805ff24: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805ff28: f10c 0c01    	add.w	r12, r12, #0x1
 805ff2c: f8ce c000    	str.w	r12, [lr]
 805ff30: 9007         	str	r0, [sp, #0x1c]
 805ff32: 9106         	str	r1, [sp, #0x18]
 805ff34: 9205         	str	r2, [sp, #0x14]
 805ff36: 9304         	str	r3, [sp, #0x10]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ff38: 4814         	ldr	r0, [pc, #0x50]         @ 0x805ff8c <MPU_xTimerGenericCommandFromTask+0x88>
 805ff3a: 4780         	blx	r0
 805ff3c: b988         	cbnz	r0, 0x805ff62 <MPU_xTimerGenericCommandFromTask+0x5e> @ imm = #0x22
 805ff3e: e7ff         	b	0x805ff40 <MPU_xTimerGenericCommandFromTask+0x3c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ff40: df03         	svc	#0x3
;                 xReturn = xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 805ff42: 9807         	ldr	r0, [sp, #0x1c]
 805ff44: 9906         	ldr	r1, [sp, #0x18]
 805ff46: 9a05         	ldr	r2, [sp, #0x14]
 805ff48: 9b04         	ldr	r3, [sp, #0x10]
 805ff4a: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805ff4e: 46ee         	mov	lr, sp
 805ff50: f8ce c000    	str.w	r12, [lr]
 805ff54: f8df c03c    	ldr.w	r12, [pc, #0x3c]        @ 0x805ff94 <MPU_xTimerGenericCommandFromTask+0x90>
 805ff58: 47e0         	blx	r12
 805ff5a: 9003         	str	r0, [sp, #0xc]
;                 portRESET_PRIVILEGE();
 805ff5c: 480e         	ldr	r0, [pc, #0x38]         @ 0x805ff98 <MPU_xTimerGenericCommandFromTask+0x94>
 805ff5e: 4780         	blx	r0
;             }
 805ff60: e00d         	b	0x805ff7e <MPU_xTimerGenericCommandFromTask+0x7a> @ imm = #0x1a
;                 xReturn = xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 805ff62: 9807         	ldr	r0, [sp, #0x1c]
 805ff64: 9906         	ldr	r1, [sp, #0x18]
 805ff66: 9a05         	ldr	r2, [sp, #0x14]
 805ff68: 9b04         	ldr	r3, [sp, #0x10]
 805ff6a: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805ff6e: 46ee         	mov	lr, sp
 805ff70: f8ce c000    	str.w	r12, [lr]
 805ff74: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x805ff90 <MPU_xTimerGenericCommandFromTask+0x8c>
 805ff78: 47e0         	blx	r12
 805ff7a: 9003         	str	r0, [sp, #0xc]
 805ff7c: e7ff         	b	0x805ff7e <MPU_xTimerGenericCommandFromTask+0x7a> @ imm = #-0x2
;             return xReturn;
 805ff7e: 9803         	ldr	r0, [sp, #0xc]
 805ff80: 9002         	str	r0, [sp, #0x8]
 805ff82: 4806         	ldr	r0, [pc, #0x18]         @ 0x805ff9c <MPU_xTimerGenericCommandFromTask+0x98>
 805ff84: 4780         	blx	r0
 805ff86: 9802         	ldr	r0, [sp, #0x8]
 805ff88: b008         	add	sp, #0x20
 805ff8a: bdb0         	pop	{r4, r5, r7, pc}

0805ff8c <$d.105>:
 805ff8c: 31 22 06 08  	.word	0x08062231
 805ff90: 39 94 05 08  	.word	0x08059439
 805ff94: 39 94 05 08  	.word	0x08059439
 805ff98: 61 22 06 08  	.word	0x08062261
 805ff9c: 21 05 06 08  	.word	0x08060521

0805ffa0 <MPU_xEventGroupWaitBits>:
;     {
 805ffa0: b5b0         	push	{r4, r5, r7, lr}
 805ffa2: af02         	add	r7, sp, #0x8
 805ffa4: b088         	sub	sp, #0x20
 805ffa6: 4674         	mov	r4, lr
 805ffa8: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805ffac: f643 5e40    	movw	lr, #0x3d40
 805ffb0: f2c2 0e00    	movt	lr, #0x2000
 805ffb4: f8de c000    	ldr.w	r12, [lr]
 805ffb8: f642 5540    	movw	r5, #0x2d40
 805ffbc: f2c2 0500    	movt	r5, #0x2000
 805ffc0: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 805ffc4: f10c 0c01    	add.w	r12, r12, #0x1
 805ffc8: f8ce c000    	str.w	r12, [lr]
 805ffcc: 9007         	str	r0, [sp, #0x1c]
 805ffce: 9106         	str	r1, [sp, #0x18]
 805ffd0: 9205         	str	r2, [sp, #0x14]
 805ffd2: 9304         	str	r3, [sp, #0x10]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805ffd4: 4814         	ldr	r0, [pc, #0x50]         @ 0x8060028 <MPU_xEventGroupWaitBits+0x88>
 805ffd6: 4780         	blx	r0
 805ffd8: b988         	cbnz	r0, 0x805fffe <MPU_xEventGroupWaitBits+0x5e> @ imm = #0x22
 805ffda: e7ff         	b	0x805ffdc <MPU_xEventGroupWaitBits+0x3c> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805ffdc: df03         	svc	#0x3
;             xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 805ffde: 9807         	ldr	r0, [sp, #0x1c]
 805ffe0: 9906         	ldr	r1, [sp, #0x18]
 805ffe2: 9a05         	ldr	r2, [sp, #0x14]
 805ffe4: 9b04         	ldr	r3, [sp, #0x10]
 805ffe6: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805ffea: 46ee         	mov	lr, sp
 805ffec: f8ce c000    	str.w	r12, [lr]
 805fff0: f8df c03c    	ldr.w	r12, [pc, #0x3c]        @ 0x8060030 <MPU_xEventGroupWaitBits+0x90>
 805fff4: 47e0         	blx	r12
 805fff6: 9003         	str	r0, [sp, #0xc]
;             portRESET_PRIVILEGE();
 805fff8: 480e         	ldr	r0, [pc, #0x38]         @ 0x8060034 <MPU_xEventGroupWaitBits+0x94>
 805fffa: 4780         	blx	r0
;         }
 805fffc: e00d         	b	0x806001a <MPU_xEventGroupWaitBits+0x7a> @ imm = #0x1a
;             xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 805fffe: 9807         	ldr	r0, [sp, #0x1c]
 8060000: 9906         	ldr	r1, [sp, #0x18]
 8060002: 9a05         	ldr	r2, [sp, #0x14]
 8060004: 9b04         	ldr	r3, [sp, #0x10]
 8060006: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 806000a: 46ee         	mov	lr, sp
 806000c: f8ce c000    	str.w	r12, [lr]
 8060010: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x806002c <MPU_xEventGroupWaitBits+0x8c>
 8060014: 47e0         	blx	r12
 8060016: 9003         	str	r0, [sp, #0xc]
 8060018: e7ff         	b	0x806001a <MPU_xEventGroupWaitBits+0x7a> @ imm = #-0x2
;         return xReturn;
 806001a: 9803         	ldr	r0, [sp, #0xc]
 806001c: 9002         	str	r0, [sp, #0x8]
 806001e: 4806         	ldr	r0, [pc, #0x18]         @ 0x8060038 <MPU_xEventGroupWaitBits+0x98>
 8060020: 4780         	blx	r0
 8060022: 9802         	ldr	r0, [sp, #0x8]
 8060024: b008         	add	sp, #0x20
 8060026: bdb0         	pop	{r4, r5, r7, pc}

08060028 <$d.109>:
 8060028: 31 22 06 08  	.word	0x08062231
 806002c: f5 aa 05 08  	.word	0x0805aaf5
 8060030: f5 aa 05 08  	.word	0x0805aaf5
 8060034: 61 22 06 08  	.word	0x08062261
 8060038: 21 05 06 08  	.word	0x08060521

0806003c <MPU_xEventGroupClearBits>:
;     {
 806003c: b580         	push	{r7, lr}
 806003e: 466f         	mov	r7, sp
 8060040: b084         	sub	sp, #0x10
 8060042: f643 5340    	movw	r3, #0x3d40
 8060046: f2c2 0300    	movt	r3, #0x2000
 806004a: 681a         	ldr	r2, [r3]
 806004c: f642 5c40    	movw	r12, #0x2d40
 8060050: f2c2 0c00    	movt	r12, #0x2000
 8060054: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8060058: 3201         	adds	r2, #0x1
 806005a: 601a         	str	r2, [r3]
 806005c: 9003         	str	r0, [sp, #0xc]
 806005e: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 8060060: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060094 <MPU_xEventGroupClearBits+0x58>
 8060062: 4780         	blx	r0
 8060064: b948         	cbnz	r0, 0x806007a <MPU_xEventGroupClearBits+0x3e> @ imm = #0x12
 8060066: e7ff         	b	0x8060068 <MPU_xEventGroupClearBits+0x2c> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 8060068: df03         	svc	#0x3
;             xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 806006a: 9803         	ldr	r0, [sp, #0xc]
 806006c: 9902         	ldr	r1, [sp, #0x8]
 806006e: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x806009c <MPU_xEventGroupClearBits+0x60>
 8060070: 4790         	blx	r2
 8060072: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 8060074: 480a         	ldr	r0, [pc, #0x28]         @ 0x80600a0 <MPU_xEventGroupClearBits+0x64>
 8060076: 4780         	blx	r0
;         }
 8060078: e005         	b	0x8060086 <MPU_xEventGroupClearBits+0x4a> @ imm = #0xa
;             xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 806007a: 9803         	ldr	r0, [sp, #0xc]
 806007c: 9902         	ldr	r1, [sp, #0x8]
 806007e: 4a06         	ldr	r2, [pc, #0x18]         @ 0x8060098 <MPU_xEventGroupClearBits+0x5c>
 8060080: 4790         	blx	r2
 8060082: 9001         	str	r0, [sp, #0x4]
 8060084: e7ff         	b	0x8060086 <MPU_xEventGroupClearBits+0x4a> @ imm = #-0x2
;         return xReturn;
 8060086: 9801         	ldr	r0, [sp, #0x4]
 8060088: 9000         	str	r0, [sp]
 806008a: 4806         	ldr	r0, [pc, #0x18]         @ 0x80600a4 <MPU_xEventGroupClearBits+0x68>
 806008c: 4780         	blx	r0
 806008e: 9800         	ldr	r0, [sp]
 8060090: b004         	add	sp, #0x10
 8060092: bd80         	pop	{r7, pc}

08060094 <$d.111>:
 8060094: 31 22 06 08  	.word	0x08062231
 8060098: 3d ad 05 08  	.word	0x0805ad3d
 806009c: 3d ad 05 08  	.word	0x0805ad3d
 80600a0: 61 22 06 08  	.word	0x08062261
 80600a4: 21 05 06 08  	.word	0x08060521

080600a8 <MPU_xEventGroupSetBits>:
;     {
 80600a8: b580         	push	{r7, lr}
 80600aa: 466f         	mov	r7, sp
 80600ac: b084         	sub	sp, #0x10
 80600ae: f643 5340    	movw	r3, #0x3d40
 80600b2: f2c2 0300    	movt	r3, #0x2000
 80600b6: 681a         	ldr	r2, [r3]
 80600b8: f642 5c40    	movw	r12, #0x2d40
 80600bc: f2c2 0c00    	movt	r12, #0x2000
 80600c0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 80600c4: 3201         	adds	r2, #0x1
 80600c6: 601a         	str	r2, [r3]
 80600c8: 9003         	str	r0, [sp, #0xc]
 80600ca: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 80600cc: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060100 <MPU_xEventGroupSetBits+0x58>
 80600ce: 4780         	blx	r0
 80600d0: b948         	cbnz	r0, 0x80600e6 <MPU_xEventGroupSetBits+0x3e> @ imm = #0x12
 80600d2: e7ff         	b	0x80600d4 <MPU_xEventGroupSetBits+0x2c> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 80600d4: df03         	svc	#0x3
;             xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 80600d6: 9803         	ldr	r0, [sp, #0xc]
 80600d8: 9902         	ldr	r1, [sp, #0x8]
 80600da: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x8060108 <MPU_xEventGroupSetBits+0x60>
 80600dc: 4790         	blx	r2
 80600de: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 80600e0: 480a         	ldr	r0, [pc, #0x28]         @ 0x806010c <MPU_xEventGroupSetBits+0x64>
 80600e2: 4780         	blx	r0
;         }
 80600e4: e005         	b	0x80600f2 <MPU_xEventGroupSetBits+0x4a> @ imm = #0xa
;             xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 80600e6: 9803         	ldr	r0, [sp, #0xc]
 80600e8: 9902         	ldr	r1, [sp, #0x8]
 80600ea: 4a06         	ldr	r2, [pc, #0x18]         @ 0x8060104 <MPU_xEventGroupSetBits+0x5c>
 80600ec: 4790         	blx	r2
 80600ee: 9001         	str	r0, [sp, #0x4]
 80600f0: e7ff         	b	0x80600f2 <MPU_xEventGroupSetBits+0x4a> @ imm = #-0x2
;         return xReturn;
 80600f2: 9801         	ldr	r0, [sp, #0x4]
 80600f4: 9000         	str	r0, [sp]
 80600f6: 4806         	ldr	r0, [pc, #0x18]         @ 0x8060110 <MPU_xEventGroupSetBits+0x68>
 80600f8: 4780         	blx	r0
 80600fa: 9800         	ldr	r0, [sp]
 80600fc: b004         	add	sp, #0x10
 80600fe: bd80         	pop	{r7, pc}

08060100 <$d.113>:
 8060100: 31 22 06 08  	.word	0x08062231
 8060104: b9 a9 05 08  	.word	0x0805a9b9
 8060108: b9 a9 05 08  	.word	0x0805a9b9
 806010c: 61 22 06 08  	.word	0x08062261
 8060110: 21 05 06 08  	.word	0x08060521

08060114 <MPU_xEventGroupSync>:
;     {
 8060114: b5b0         	push	{r4, r5, r7, lr}
 8060116: af02         	add	r7, sp, #0x8
 8060118: b086         	sub	sp, #0x18
 806011a: 4674         	mov	r4, lr
 806011c: f643 5e40    	movw	lr, #0x3d40
 8060120: f2c2 0e00    	movt	lr, #0x2000
 8060124: f8de c000    	ldr.w	r12, [lr]
 8060128: f642 5540    	movw	r5, #0x2d40
 806012c: f2c2 0500    	movt	r5, #0x2000
 8060130: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 8060134: f10c 0c01    	add.w	r12, r12, #0x1
 8060138: f8ce c000    	str.w	r12, [lr]
 806013c: 9005         	str	r0, [sp, #0x14]
 806013e: 9104         	str	r1, [sp, #0x10]
 8060140: 9203         	str	r2, [sp, #0xc]
 8060142: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 8060144: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8060184 <MPU_xEventGroupSync+0x70>
 8060146: 4780         	blx	r0
 8060148: b960         	cbnz	r0, 0x8060164 <MPU_xEventGroupSync+0x50> @ imm = #0x18
 806014a: e7ff         	b	0x806014c <MPU_xEventGroupSync+0x38> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 806014c: df03         	svc	#0x3
;             xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 806014e: 9805         	ldr	r0, [sp, #0x14]
 8060150: 9904         	ldr	r1, [sp, #0x10]
 8060152: 9a03         	ldr	r2, [sp, #0xc]
 8060154: 9b02         	ldr	r3, [sp, #0x8]
 8060156: f8df c034    	ldr.w	r12, [pc, #0x34]        @ 0x806018c <MPU_xEventGroupSync+0x78>
 806015a: 47e0         	blx	r12
 806015c: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 806015e: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060190 <MPU_xEventGroupSync+0x7c>
 8060160: 4780         	blx	r0
;         }
 8060162: e008         	b	0x8060176 <MPU_xEventGroupSync+0x62> @ imm = #0x10
;             xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8060164: 9805         	ldr	r0, [sp, #0x14]
 8060166: 9904         	ldr	r1, [sp, #0x10]
 8060168: 9a03         	ldr	r2, [sp, #0xc]
 806016a: 9b02         	ldr	r3, [sp, #0x8]
 806016c: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x8060188 <MPU_xEventGroupSync+0x74>
 8060170: 47e0         	blx	r12
 8060172: 9001         	str	r0, [sp, #0x4]
 8060174: e7ff         	b	0x8060176 <MPU_xEventGroupSync+0x62> @ imm = #-0x2
;         return xReturn;
 8060176: 9801         	ldr	r0, [sp, #0x4]
 8060178: 9000         	str	r0, [sp]
 806017a: 4806         	ldr	r0, [pc, #0x18]         @ 0x8060194 <MPU_xEventGroupSync+0x80>
 806017c: 4780         	blx	r0
 806017e: 9800         	ldr	r0, [sp]
 8060180: b006         	add	sp, #0x18
 8060182: bdb0         	pop	{r4, r5, r7, pc}

08060184 <$d.115>:
 8060184: 31 22 06 08  	.word	0x08062231
 8060188: 2d a8 05 08  	.word	0x0805a82d
 806018c: 2d a8 05 08  	.word	0x0805a82d
 8060190: 61 22 06 08  	.word	0x08062261
 8060194: 21 05 06 08  	.word	0x08060521

08060198 <MPU_xStreamBufferSend>:
;     {
 8060198: b5b0         	push	{r4, r5, r7, lr}
 806019a: af02         	add	r7, sp, #0x8
 806019c: b086         	sub	sp, #0x18
 806019e: 4674         	mov	r4, lr
 80601a0: f643 5e40    	movw	lr, #0x3d40
 80601a4: f2c2 0e00    	movt	lr, #0x2000
 80601a8: f8de c000    	ldr.w	r12, [lr]
 80601ac: f642 5540    	movw	r5, #0x2d40
 80601b0: f2c2 0500    	movt	r5, #0x2000
 80601b4: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 80601b8: f10c 0c01    	add.w	r12, r12, #0x1
 80601bc: f8ce c000    	str.w	r12, [lr]
 80601c0: 9005         	str	r0, [sp, #0x14]
 80601c2: 9104         	str	r1, [sp, #0x10]
 80601c4: 9203         	str	r2, [sp, #0xc]
 80601c6: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 80601c8: 480f         	ldr	r0, [pc, #0x3c]         @ 0x8060208 <MPU_xStreamBufferSend+0x70>
 80601ca: 4780         	blx	r0
 80601cc: b960         	cbnz	r0, 0x80601e8 <MPU_xStreamBufferSend+0x50> @ imm = #0x18
 80601ce: e7ff         	b	0x80601d0 <MPU_xStreamBufferSend+0x38> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 80601d0: df03         	svc	#0x3
;             xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 80601d2: 9805         	ldr	r0, [sp, #0x14]
 80601d4: 9904         	ldr	r1, [sp, #0x10]
 80601d6: 9a03         	ldr	r2, [sp, #0xc]
 80601d8: 9b02         	ldr	r3, [sp, #0x8]
 80601da: f8df c034    	ldr.w	r12, [pc, #0x34]        @ 0x8060210 <MPU_xStreamBufferSend+0x78>
 80601de: 47e0         	blx	r12
 80601e0: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 80601e2: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060214 <MPU_xStreamBufferSend+0x7c>
 80601e4: 4780         	blx	r0
;         }
 80601e6: e008         	b	0x80601fa <MPU_xStreamBufferSend+0x62> @ imm = #0x10
;             xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 80601e8: 9805         	ldr	r0, [sp, #0x14]
 80601ea: 9904         	ldr	r1, [sp, #0x10]
 80601ec: 9a03         	ldr	r2, [sp, #0xc]
 80601ee: 9b02         	ldr	r3, [sp, #0x8]
 80601f0: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x806020c <MPU_xStreamBufferSend+0x74>
 80601f4: 47e0         	blx	r12
 80601f6: 9001         	str	r0, [sp, #0x4]
 80601f8: e7ff         	b	0x80601fa <MPU_xStreamBufferSend+0x62> @ imm = #-0x2
;         return xReturn;
 80601fa: 9801         	ldr	r0, [sp, #0x4]
 80601fc: 9000         	str	r0, [sp]
 80601fe: 4806         	ldr	r0, [pc, #0x18]         @ 0x8060218 <MPU_xStreamBufferSend+0x80>
 8060200: 4780         	blx	r0
 8060202: 9800         	ldr	r0, [sp]
 8060204: b006         	add	sp, #0x18
 8060206: bdb0         	pop	{r4, r5, r7, pc}

08060208 <$d.119>:
 8060208: 31 22 06 08  	.word	0x08062231
 806020c: a1 d3 05 08  	.word	0x0805d3a1
 8060210: a1 d3 05 08  	.word	0x0805d3a1
 8060214: 61 22 06 08  	.word	0x08062261
 8060218: 21 05 06 08  	.word	0x08060521

0806021c <MPU_xStreamBufferNextMessageLengthBytes>:
;     {
 806021c: b580         	push	{r7, lr}
 806021e: 466f         	mov	r7, sp
 8060220: b084         	sub	sp, #0x10
 8060222: f643 5240    	movw	r2, #0x3d40
 8060226: f2c2 0200    	movt	r2, #0x2000
 806022a: 6811         	ldr	r1, [r2]
 806022c: f642 5340    	movw	r3, #0x2d40
 8060230: f2c2 0300    	movt	r3, #0x2000
 8060234: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8060238: 3101         	adds	r1, #0x1
 806023a: 6011         	str	r1, [r2]
 806023c: 9003         	str	r0, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 806023e: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060270 <MPU_xStreamBufferNextMessageLengthBytes+0x54>
 8060240: 4780         	blx	r0
 8060242: b940         	cbnz	r0, 0x8060256 <MPU_xStreamBufferNextMessageLengthBytes+0x3a> @ imm = #0x10
 8060244: e7ff         	b	0x8060246 <MPU_xStreamBufferNextMessageLengthBytes+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 8060246: df03         	svc	#0x3
;             xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8060248: 9803         	ldr	r0, [sp, #0xc]
 806024a: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8060278 <MPU_xStreamBufferNextMessageLengthBytes+0x5c>
 806024c: 4788         	blx	r1
 806024e: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 8060250: 480a         	ldr	r0, [pc, #0x28]         @ 0x806027c <MPU_xStreamBufferNextMessageLengthBytes+0x60>
 8060252: 4780         	blx	r0
;         }
 8060254: e004         	b	0x8060260 <MPU_xStreamBufferNextMessageLengthBytes+0x44> @ imm = #0x8
;             xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8060256: 9803         	ldr	r0, [sp, #0xc]
 8060258: 4906         	ldr	r1, [pc, #0x18]         @ 0x8060274 <MPU_xStreamBufferNextMessageLengthBytes+0x58>
 806025a: 4788         	blx	r1
 806025c: 9002         	str	r0, [sp, #0x8]
 806025e: e7ff         	b	0x8060260 <MPU_xStreamBufferNextMessageLengthBytes+0x44> @ imm = #-0x2
;         return xReturn;
 8060260: 9802         	ldr	r0, [sp, #0x8]
 8060262: 9001         	str	r0, [sp, #0x4]
 8060264: 4806         	ldr	r0, [pc, #0x18]         @ 0x8060280 <MPU_xStreamBufferNextMessageLengthBytes+0x64>
 8060266: 4780         	blx	r0
 8060268: 9801         	ldr	r0, [sp, #0x4]
 806026a: b004         	add	sp, #0x10
 806026c: bd80         	pop	{r7, pc}
 806026e: bf00         	nop

08060270 <$d.121>:
 8060270: 31 22 06 08  	.word	0x08062231
 8060274: e1 d9 05 08  	.word	0x0805d9e1
 8060278: e1 d9 05 08  	.word	0x0805d9e1
 806027c: 61 22 06 08  	.word	0x08062261
 8060280: 21 05 06 08  	.word	0x08060521

08060284 <MPU_xStreamBufferReceive>:
;     {
 8060284: b5b0         	push	{r4, r5, r7, lr}
 8060286: af02         	add	r7, sp, #0x8
 8060288: b086         	sub	sp, #0x18
 806028a: 4674         	mov	r4, lr
 806028c: f643 5e40    	movw	lr, #0x3d40
 8060290: f2c2 0e00    	movt	lr, #0x2000
 8060294: f8de c000    	ldr.w	r12, [lr]
 8060298: f642 5540    	movw	r5, #0x2d40
 806029c: f2c2 0500    	movt	r5, #0x2000
 80602a0: f845 402c    	str.w	r4, [r5, r12, lsl #2]
 80602a4: f10c 0c01    	add.w	r12, r12, #0x1
 80602a8: f8ce c000    	str.w	r12, [lr]
 80602ac: 9005         	str	r0, [sp, #0x14]
 80602ae: 9104         	str	r1, [sp, #0x10]
 80602b0: 9203         	str	r2, [sp, #0xc]
 80602b2: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 80602b4: 480f         	ldr	r0, [pc, #0x3c]         @ 0x80602f4 <MPU_xStreamBufferReceive+0x70>
 80602b6: 4780         	blx	r0
 80602b8: b960         	cbnz	r0, 0x80602d4 <MPU_xStreamBufferReceive+0x50> @ imm = #0x18
 80602ba: e7ff         	b	0x80602bc <MPU_xStreamBufferReceive+0x38> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 80602bc: df03         	svc	#0x3
;             xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 80602be: 9805         	ldr	r0, [sp, #0x14]
 80602c0: 9904         	ldr	r1, [sp, #0x10]
 80602c2: 9a03         	ldr	r2, [sp, #0xc]
 80602c4: 9b02         	ldr	r3, [sp, #0x8]
 80602c6: f8df c034    	ldr.w	r12, [pc, #0x34]        @ 0x80602fc <MPU_xStreamBufferReceive+0x78>
 80602ca: 47e0         	blx	r12
 80602cc: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 80602ce: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060300 <MPU_xStreamBufferReceive+0x7c>
 80602d0: 4780         	blx	r0
;         }
 80602d2: e008         	b	0x80602e6 <MPU_xStreamBufferReceive+0x62> @ imm = #0x10
;             xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 80602d4: 9805         	ldr	r0, [sp, #0x14]
 80602d6: 9904         	ldr	r1, [sp, #0x10]
 80602d8: 9a03         	ldr	r2, [sp, #0xc]
 80602da: 9b02         	ldr	r3, [sp, #0x8]
 80602dc: f8df c018    	ldr.w	r12, [pc, #0x18]        @ 0x80602f8 <MPU_xStreamBufferReceive+0x74>
 80602e0: 47e0         	blx	r12
 80602e2: 9001         	str	r0, [sp, #0x4]
 80602e4: e7ff         	b	0x80602e6 <MPU_xStreamBufferReceive+0x62> @ imm = #-0x2
;         return xReturn;
 80602e6: 9801         	ldr	r0, [sp, #0x4]
 80602e8: 9000         	str	r0, [sp]
 80602ea: 4806         	ldr	r0, [pc, #0x18]         @ 0x8060304 <MPU_xStreamBufferReceive+0x80>
 80602ec: 4780         	blx	r0
 80602ee: 9800         	ldr	r0, [sp]
 80602f0: b006         	add	sp, #0x18
 80602f2: bdb0         	pop	{r4, r5, r7, pc}

080602f4 <$d.123>:
 80602f4: 31 22 06 08  	.word	0x08062231
 80602f8: 8d d7 05 08  	.word	0x0805d78d
 80602fc: 8d d7 05 08  	.word	0x0805d78d
 8060300: 61 22 06 08  	.word	0x08062261
 8060304: 21 05 06 08  	.word	0x08060521

08060308 <MPU_xStreamBufferIsFull>:
;     {
 8060308: b580         	push	{r7, lr}
 806030a: 466f         	mov	r7, sp
 806030c: b084         	sub	sp, #0x10
 806030e: f643 5240    	movw	r2, #0x3d40
 8060312: f2c2 0200    	movt	r2, #0x2000
 8060316: 6811         	ldr	r1, [r2]
 8060318: f642 5340    	movw	r3, #0x2d40
 806031c: f2c2 0300    	movt	r3, #0x2000
 8060320: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8060324: 3101         	adds	r1, #0x1
 8060326: 6011         	str	r1, [r2]
 8060328: 9003         	str	r0, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 806032a: 480c         	ldr	r0, [pc, #0x30]         @ 0x806035c <MPU_xStreamBufferIsFull+0x54>
 806032c: 4780         	blx	r0
 806032e: b940         	cbnz	r0, 0x8060342 <MPU_xStreamBufferIsFull+0x3a> @ imm = #0x10
 8060330: e7ff         	b	0x8060332 <MPU_xStreamBufferIsFull+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 8060332: df03         	svc	#0x3
;             xReturn = xStreamBufferIsFull( xStreamBuffer );
 8060334: 9803         	ldr	r0, [sp, #0xc]
 8060336: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8060364 <MPU_xStreamBufferIsFull+0x5c>
 8060338: 4788         	blx	r1
 806033a: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 806033c: 480a         	ldr	r0, [pc, #0x28]         @ 0x8060368 <MPU_xStreamBufferIsFull+0x60>
 806033e: 4780         	blx	r0
;         }
 8060340: e004         	b	0x806034c <MPU_xStreamBufferIsFull+0x44> @ imm = #0x8
;             xReturn = xStreamBufferIsFull( xStreamBuffer );
 8060342: 9803         	ldr	r0, [sp, #0xc]
 8060344: 4906         	ldr	r1, [pc, #0x18]         @ 0x8060360 <MPU_xStreamBufferIsFull+0x58>
 8060346: 4788         	blx	r1
 8060348: 9002         	str	r0, [sp, #0x8]
 806034a: e7ff         	b	0x806034c <MPU_xStreamBufferIsFull+0x44> @ imm = #-0x2
;         return xReturn;
 806034c: 9802         	ldr	r0, [sp, #0x8]
 806034e: 9001         	str	r0, [sp, #0x4]
 8060350: 4806         	ldr	r0, [pc, #0x18]         @ 0x806036c <MPU_xStreamBufferIsFull+0x64>
 8060352: 4780         	blx	r0
 8060354: 9801         	ldr	r0, [sp, #0x4]
 8060356: b004         	add	sp, #0x10
 8060358: bd80         	pop	{r7, pc}
 806035a: bf00         	nop

0806035c <$d.127>:
 806035c: 31 22 06 08  	.word	0x08062231
 8060360: f1 dc 05 08  	.word	0x0805dcf1
 8060364: f1 dc 05 08  	.word	0x0805dcf1
 8060368: 61 22 06 08  	.word	0x08062261
 806036c: 21 05 06 08  	.word	0x08060521

08060370 <MPU_xStreamBufferIsEmpty>:
;     {
 8060370: b580         	push	{r7, lr}
 8060372: 466f         	mov	r7, sp
 8060374: b084         	sub	sp, #0x10
 8060376: f643 5240    	movw	r2, #0x3d40
 806037a: f2c2 0200    	movt	r2, #0x2000
 806037e: 6811         	ldr	r1, [r2]
 8060380: f642 5340    	movw	r3, #0x2d40
 8060384: f2c2 0300    	movt	r3, #0x2000
 8060388: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 806038c: 3101         	adds	r1, #0x1
 806038e: 6011         	str	r1, [r2]
 8060390: 9003         	str	r0, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 8060392: 480c         	ldr	r0, [pc, #0x30]         @ 0x80603c4 <MPU_xStreamBufferIsEmpty+0x54>
 8060394: 4780         	blx	r0
 8060396: b940         	cbnz	r0, 0x80603aa <MPU_xStreamBufferIsEmpty+0x3a> @ imm = #0x10
 8060398: e7ff         	b	0x806039a <MPU_xStreamBufferIsEmpty+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 806039a: df03         	svc	#0x3
;             xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 806039c: 9803         	ldr	r0, [sp, #0xc]
 806039e: 490b         	ldr	r1, [pc, #0x2c]         @ 0x80603cc <MPU_xStreamBufferIsEmpty+0x5c>
 80603a0: 4788         	blx	r1
 80603a2: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 80603a4: 480a         	ldr	r0, [pc, #0x28]         @ 0x80603d0 <MPU_xStreamBufferIsEmpty+0x60>
 80603a6: 4780         	blx	r0
;         }
 80603a8: e004         	b	0x80603b4 <MPU_xStreamBufferIsEmpty+0x44> @ imm = #0x8
;             xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 80603aa: 9803         	ldr	r0, [sp, #0xc]
 80603ac: 4906         	ldr	r1, [pc, #0x18]         @ 0x80603c8 <MPU_xStreamBufferIsEmpty+0x58>
 80603ae: 4788         	blx	r1
 80603b0: 9002         	str	r0, [sp, #0x8]
 80603b2: e7ff         	b	0x80603b4 <MPU_xStreamBufferIsEmpty+0x44> @ imm = #-0x2
;         return xReturn;
 80603b4: 9802         	ldr	r0, [sp, #0x8]
 80603b6: 9001         	str	r0, [sp, #0x4]
 80603b8: 4806         	ldr	r0, [pc, #0x18]         @ 0x80603d4 <MPU_xStreamBufferIsEmpty+0x64>
 80603ba: 4780         	blx	r0
 80603bc: 9801         	ldr	r0, [sp, #0x4]
 80603be: b004         	add	sp, #0x10
 80603c0: bd80         	pop	{r7, pc}
 80603c2: bf00         	nop

080603c4 <$d.129>:
 80603c4: 31 22 06 08  	.word	0x08062231
 80603c8: 89 dc 05 08  	.word	0x0805dc89
 80603cc: 89 dc 05 08  	.word	0x0805dc89
 80603d0: 61 22 06 08  	.word	0x08062261
 80603d4: 21 05 06 08  	.word	0x08060521

080603d8 <MPU_xStreamBufferSpacesAvailable>:
;     {
 80603d8: b580         	push	{r7, lr}
 80603da: 466f         	mov	r7, sp
 80603dc: b084         	sub	sp, #0x10
 80603de: f643 5240    	movw	r2, #0x3d40
 80603e2: f2c2 0200    	movt	r2, #0x2000
 80603e6: 6811         	ldr	r1, [r2]
 80603e8: f642 5340    	movw	r3, #0x2d40
 80603ec: f2c2 0300    	movt	r3, #0x2000
 80603f0: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80603f4: 3101         	adds	r1, #0x1
 80603f6: 6011         	str	r1, [r2]
 80603f8: 9003         	str	r0, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 80603fa: 480c         	ldr	r0, [pc, #0x30]         @ 0x806042c <MPU_xStreamBufferSpacesAvailable+0x54>
 80603fc: 4780         	blx	r0
 80603fe: b940         	cbnz	r0, 0x8060412 <MPU_xStreamBufferSpacesAvailable+0x3a> @ imm = #0x10
 8060400: e7ff         	b	0x8060402 <MPU_xStreamBufferSpacesAvailable+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 8060402: df03         	svc	#0x3
;             xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8060404: 9803         	ldr	r0, [sp, #0xc]
 8060406: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8060434 <MPU_xStreamBufferSpacesAvailable+0x5c>
 8060408: 4788         	blx	r1
 806040a: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 806040c: 480a         	ldr	r0, [pc, #0x28]         @ 0x8060438 <MPU_xStreamBufferSpacesAvailable+0x60>
 806040e: 4780         	blx	r0
;         }
 8060410: e004         	b	0x806041c <MPU_xStreamBufferSpacesAvailable+0x44> @ imm = #0x8
;             xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8060412: 9803         	ldr	r0, [sp, #0xc]
 8060414: 4906         	ldr	r1, [pc, #0x18]         @ 0x8060430 <MPU_xStreamBufferSpacesAvailable+0x58>
 8060416: 4788         	blx	r1
 8060418: 9002         	str	r0, [sp, #0x8]
 806041a: e7ff         	b	0x806041c <MPU_xStreamBufferSpacesAvailable+0x44> @ imm = #-0x2
;         return xReturn;
 806041c: 9802         	ldr	r0, [sp, #0x8]
 806041e: 9001         	str	r0, [sp, #0x4]
 8060420: 4806         	ldr	r0, [pc, #0x18]         @ 0x806043c <MPU_xStreamBufferSpacesAvailable+0x64>
 8060422: 4780         	blx	r0
 8060424: 9801         	ldr	r0, [sp, #0x4]
 8060426: b004         	add	sp, #0x10
 8060428: bd80         	pop	{r7, pc}
 806042a: bf00         	nop

0806042c <$d.133>:
 806042c: 31 22 06 08  	.word	0x08062231
 8060430: 51 d2 05 08  	.word	0x0805d251
 8060434: 51 d2 05 08  	.word	0x0805d251
 8060438: 61 22 06 08  	.word	0x08062261
 806043c: 21 05 06 08  	.word	0x08060521

08060440 <MPU_xStreamBufferBytesAvailable>:
;     {
 8060440: b580         	push	{r7, lr}
 8060442: 466f         	mov	r7, sp
 8060444: b084         	sub	sp, #0x10
 8060446: f643 5240    	movw	r2, #0x3d40
 806044a: f2c2 0200    	movt	r2, #0x2000
 806044e: 6811         	ldr	r1, [r2]
 8060450: f642 5340    	movw	r3, #0x2d40
 8060454: f2c2 0300    	movt	r3, #0x2000
 8060458: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 806045c: 3101         	adds	r1, #0x1
 806045e: 6011         	str	r1, [r2]
 8060460: 9003         	str	r0, [sp, #0xc]
;         if( portIS_PRIVILEGED() == pdFALSE )
 8060462: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060494 <MPU_xStreamBufferBytesAvailable+0x54>
 8060464: 4780         	blx	r0
 8060466: b940         	cbnz	r0, 0x806047a <MPU_xStreamBufferBytesAvailable+0x3a> @ imm = #0x10
 8060468: e7ff         	b	0x806046a <MPU_xStreamBufferBytesAvailable+0x2a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 806046a: df03         	svc	#0x3
;             xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 806046c: 9803         	ldr	r0, [sp, #0xc]
 806046e: 490b         	ldr	r1, [pc, #0x2c]         @ 0x806049c <MPU_xStreamBufferBytesAvailable+0x5c>
 8060470: 4788         	blx	r1
 8060472: 9002         	str	r0, [sp, #0x8]
;             portRESET_PRIVILEGE();
 8060474: 480a         	ldr	r0, [pc, #0x28]         @ 0x80604a0 <MPU_xStreamBufferBytesAvailable+0x60>
 8060476: 4780         	blx	r0
;         }
 8060478: e004         	b	0x8060484 <MPU_xStreamBufferBytesAvailable+0x44> @ imm = #0x8
;             xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 806047a: 9803         	ldr	r0, [sp, #0xc]
 806047c: 4906         	ldr	r1, [pc, #0x18]         @ 0x8060498 <MPU_xStreamBufferBytesAvailable+0x58>
 806047e: 4788         	blx	r1
 8060480: 9002         	str	r0, [sp, #0x8]
 8060482: e7ff         	b	0x8060484 <MPU_xStreamBufferBytesAvailable+0x44> @ imm = #-0x2
;         return xReturn;
 8060484: 9802         	ldr	r0, [sp, #0x8]
 8060486: 9001         	str	r0, [sp, #0x4]
 8060488: 4806         	ldr	r0, [pc, #0x18]         @ 0x80604a4 <MPU_xStreamBufferBytesAvailable+0x64>
 806048a: 4780         	blx	r0
 806048c: 9801         	ldr	r0, [sp, #0x4]
 806048e: b004         	add	sp, #0x10
 8060490: bd80         	pop	{r7, pc}
 8060492: bf00         	nop

08060494 <$d.135>:
 8060494: 31 22 06 08  	.word	0x08062231
 8060498: e5 d2 05 08  	.word	0x0805d2e5
 806049c: e5 d2 05 08  	.word	0x0805d2e5
 80604a0: 61 22 06 08  	.word	0x08062261
 80604a4: 21 05 06 08  	.word	0x08060521

080604a8 <MPU_xStreamBufferSetTriggerLevel>:
;     {
 80604a8: b580         	push	{r7, lr}
 80604aa: 466f         	mov	r7, sp
 80604ac: b084         	sub	sp, #0x10
 80604ae: f643 5340    	movw	r3, #0x3d40
 80604b2: f2c2 0300    	movt	r3, #0x2000
 80604b6: 681a         	ldr	r2, [r3]
 80604b8: f642 5c40    	movw	r12, #0x2d40
 80604bc: f2c2 0c00    	movt	r12, #0x2000
 80604c0: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 80604c4: 3201         	adds	r2, #0x1
 80604c6: 601a         	str	r2, [r3]
 80604c8: 9003         	str	r0, [sp, #0xc]
 80604ca: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 80604cc: 480c         	ldr	r0, [pc, #0x30]         @ 0x8060500 <MPU_xStreamBufferSetTriggerLevel+0x58>
 80604ce: 4780         	blx	r0
 80604d0: b948         	cbnz	r0, 0x80604e6 <MPU_xStreamBufferSetTriggerLevel+0x3e> @ imm = #0x12
 80604d2: e7ff         	b	0x80604d4 <MPU_xStreamBufferSetTriggerLevel+0x2c> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 80604d4: df03         	svc	#0x3
;             xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 80604d6: 9803         	ldr	r0, [sp, #0xc]
 80604d8: 9902         	ldr	r1, [sp, #0x8]
 80604da: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x8060508 <MPU_xStreamBufferSetTriggerLevel+0x60>
 80604dc: 4790         	blx	r2
 80604de: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 80604e0: 480a         	ldr	r0, [pc, #0x28]         @ 0x806050c <MPU_xStreamBufferSetTriggerLevel+0x64>
 80604e2: 4780         	blx	r0
;         }
 80604e4: e005         	b	0x80604f2 <MPU_xStreamBufferSetTriggerLevel+0x4a> @ imm = #0xa
;             xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 80604e6: 9803         	ldr	r0, [sp, #0xc]
 80604e8: 9902         	ldr	r1, [sp, #0x8]
 80604ea: 4a06         	ldr	r2, [pc, #0x18]         @ 0x8060504 <MPU_xStreamBufferSetTriggerLevel+0x5c>
 80604ec: 4790         	blx	r2
 80604ee: 9001         	str	r0, [sp, #0x4]
 80604f0: e7ff         	b	0x80604f2 <MPU_xStreamBufferSetTriggerLevel+0x4a> @ imm = #-0x2
;         return xReturn;
 80604f2: 9801         	ldr	r0, [sp, #0x4]
 80604f4: 9000         	str	r0, [sp]
 80604f6: 4806         	ldr	r0, [pc, #0x18]         @ 0x8060510 <MPU_xStreamBufferSetTriggerLevel+0x68>
 80604f8: 4780         	blx	r0
 80604fa: 9800         	ldr	r0, [sp]
 80604fc: b004         	add	sp, #0x10
 80604fe: bd80         	pop	{r7, pc}

08060500 <$d.137>:
 8060500: 31 22 06 08  	.word	0x08062231
 8060504: d9 d1 05 08  	.word	0x0805d1d9
 8060508: d9 d1 05 08  	.word	0x0805d1d9
 806050c: 61 22 06 08  	.word	0x08062261
 8060510: 21 05 06 08  	.word	0x08060521
 8060514: 00 00 00 00  	.word	0x00000000
 8060518: 00 00 00 00  	.word	0x00000000
 806051c: 00 00        	.short	0x0000
 806051e: 00           	.byte	0x00

0806051f <__syscalls_flash_end__>:
 806051f: 00           	.byte	0x00

Disassembly of section .text:

08060520 <checkStackOverflow>:
 8060520: b580         	push	{r7, lr}
 8060522: 466f         	mov	r7, sp
 8060524: f643 5040    	movw	r0, #0x3d40
 8060528: f2c2 0000    	movt	r0, #0x2000
 806052c: 6801         	ldr	r1, [r0]
 806052e: 3901         	subs	r1, #0x1
 8060530: 6001         	str	r1, [r0]
 8060532: f642 5040    	movw	r0, #0x2d40
 8060536: f2c2 0000    	movt	r0, #0x2000
 806053a: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 806053e: 4639         	mov	r1, r7
 8060540: 6809         	ldr	r1, [r1]
 8060542: 6849         	ldr	r1, [r1, #0x4]
 8060544: 4288         	cmp	r0, r1
 8060546: d101         	bne	0x806054c <checkStackOverflow+0x2c> @ imm = #0x2
 8060548: e7ff         	b	0x806054a <checkStackOverflow+0x2a> @ imm = #-0x2
 806054a: bd80         	pop	{r7, pc}
 806054c: defe         	trap
 806054e: 0000         	movs	r0, r0

08060550 <HAL_Init>:
; {
 8060550: b580         	push	{r7, lr}
 8060552: 466f         	mov	r7, sp
 8060554: b082         	sub	sp, #0x8
 8060556: f643 5140    	movw	r1, #0x3d40
 806055a: f2c2 0100    	movt	r1, #0x2000
 806055e: 6808         	ldr	r0, [r1]
 8060560: f642 5240    	movw	r2, #0x2d40
 8060564: f2c2 0200    	movt	r2, #0x2000
 8060568: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806056c: 3001         	adds	r0, #0x1
 806056e: 6008         	str	r0, [r1]
 8060570: 2000         	movs	r0, #0x0
;   HAL_StatusTypeDef  status = HAL_OK;
 8060572: f807 0c01    	strb	r0, [r7, #-1]
;   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8060576: 490c         	ldr	r1, [pc, #0x30]         @ 0x80605a8 <HAL_Init+0x58>
 8060578: 2004         	movs	r0, #0x4
 806057a: 4788         	blx	r1
;   SystemCoreClockUpdate();
 806057c: 480b         	ldr	r0, [pc, #0x2c]         @ 0x80605ac <HAL_Init+0x5c>
 806057e: 4780         	blx	r0
;   if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8060580: 490b         	ldr	r1, [pc, #0x2c]         @ 0x80605b0 <HAL_Init+0x60>
 8060582: 2007         	movs	r0, #0x7
 8060584: 4788         	blx	r1
 8060586: b120         	cbz	r0, 0x8060592 <HAL_Init+0x42> @ imm = #0x8
 8060588: e7ff         	b	0x806058a <HAL_Init+0x3a> @ imm = #-0x2
 806058a: 2001         	movs	r0, #0x1
;     status = HAL_ERROR;
 806058c: f807 0c01    	strb	r0, [r7, #-1]
;   }
 8060590: e002         	b	0x8060598 <HAL_Init+0x48> @ imm = #0x4
;     HAL_MspInit();
 8060592: 4808         	ldr	r0, [pc, #0x20]         @ 0x80605b4 <HAL_Init+0x64>
 8060594: 4780         	blx	r0
 8060596: e7ff         	b	0x8060598 <HAL_Init+0x48> @ imm = #-0x2
;   return status;
 8060598: f817 0c01    	ldrb	r0, [r7, #-1]
 806059c: 9000         	str	r0, [sp]
 806059e: 4806         	ldr	r0, [pc, #0x18]         @ 0x80605b8 <HAL_Init+0x68>
 80605a0: 4780         	blx	r0
 80605a2: 9800         	ldr	r0, [sp]
 80605a4: b002         	add	sp, #0x8
 80605a6: bd80         	pop	{r7, pc}

080605a8 <$d.1>:
 80605a8: a5 0c 06 08  	.word	0x08060ca5
 80605ac: c5 06 06 08  	.word	0x080606c5
 80605b0: bd 05 06 08  	.word	0x080605bd
 80605b4: 75 06 06 08  	.word	0x08060675
 80605b8: 21 05 06 08  	.word	0x08060521

080605bc <HAL_InitTick>:
; {
 80605bc: b580         	push	{r7, lr}
 80605be: 466f         	mov	r7, sp
 80605c0: b084         	sub	sp, #0x10
 80605c2: f643 5240    	movw	r2, #0x3d40
 80605c6: f2c2 0200    	movt	r2, #0x2000
 80605ca: 6811         	ldr	r1, [r2]
 80605cc: f642 5340    	movw	r3, #0x2d40
 80605d0: f2c2 0300    	movt	r3, #0x2000
 80605d4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 80605d8: 3101         	adds	r1, #0x1
 80605da: 6011         	str	r1, [r2]
 80605dc: 9003         	str	r0, [sp, #0xc]
 80605de: 2000         	movs	r0, #0x0
;   HAL_StatusTypeDef  status = HAL_OK;
 80605e0: f807 0c05    	strb	r0, [r7, #-5]
;   if ((uint32_t)uwTickFreq != 0U)
 80605e4: f242 3084    	movw	r0, #0x2384
 80605e8: f2c2 0000    	movt	r0, #0x2000
 80605ec: 7800         	ldrb	r0, [r0]
 80605ee: b378         	cbz	r0, 0x8060650 <HAL_InitTick+0x94> @ imm = #0x5e
 80605f0: e7ff         	b	0x80605f2 <HAL_InitTick+0x36> @ imm = #-0x2
;     if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80605f2: f242 3088    	movw	r0, #0x2388
 80605f6: f2c2 0000    	movt	r0, #0x2000
 80605fa: 6800         	ldr	r0, [r0]
 80605fc: f242 3184    	movw	r1, #0x2384
 8060600: f2c2 0100    	movt	r1, #0x2000
 8060604: 780a         	ldrb	r2, [r1]
 8060606: f44f 717a    	mov.w	r1, #0x3e8
 806060a: fbb1 f1f2    	udiv	r1, r1, r2
 806060e: fbb0 f0f1    	udiv	r0, r0, r1
 8060612: 4915         	ldr	r1, [pc, #0x54]         @ 0x8060668 <HAL_InitTick+0xac>
 8060614: 4788         	blx	r1
 8060616: b9b0         	cbnz	r0, 0x8060646 <HAL_InitTick+0x8a> @ imm = #0x2c
 8060618: e7ff         	b	0x806061a <HAL_InitTick+0x5e> @ imm = #-0x2
;       if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 806061a: 9803         	ldr	r0, [sp, #0xc]
 806061c: 2807         	cmp	r0, #0x7
 806061e: d80d         	bhi	0x806063c <HAL_InitTick+0x80> @ imm = #0x1a
 8060620: e7ff         	b	0x8060622 <HAL_InitTick+0x66> @ imm = #-0x2
;         HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8060622: 9903         	ldr	r1, [sp, #0xc]
 8060624: 4b11         	ldr	r3, [pc, #0x44]         @ 0x806066c <HAL_InitTick+0xb0>
 8060626: f04f 30ff    	mov.w	r0, #0xffffffff
 806062a: 2200         	movs	r2, #0x0
 806062c: 4798         	blx	r3
;         uwTickPrio = TickPriority;
 806062e: 9803         	ldr	r0, [sp, #0xc]
 8060630: f242 3180    	movw	r1, #0x2380
 8060634: f2c2 0100    	movt	r1, #0x2000
 8060638: 6008         	str	r0, [r1]
;       }
 806063a: e003         	b	0x8060644 <HAL_InitTick+0x88> @ imm = #0x6
 806063c: 2001         	movs	r0, #0x1
;         status = HAL_ERROR;
 806063e: f807 0c05    	strb	r0, [r7, #-5]
 8060642: e7ff         	b	0x8060644 <HAL_InitTick+0x88> @ imm = #-0x2
;     }
 8060644: e003         	b	0x806064e <HAL_InitTick+0x92> @ imm = #0x6
 8060646: 2001         	movs	r0, #0x1
;       status = HAL_ERROR;
 8060648: f807 0c05    	strb	r0, [r7, #-5]
 806064c: e7ff         	b	0x806064e <HAL_InitTick+0x92> @ imm = #-0x2
;   }
 806064e: e003         	b	0x8060658 <HAL_InitTick+0x9c> @ imm = #0x6
 8060650: 2001         	movs	r0, #0x1
;     status = HAL_ERROR;
 8060652: f807 0c05    	strb	r0, [r7, #-5]
 8060656: e7ff         	b	0x8060658 <HAL_InitTick+0x9c> @ imm = #-0x2
;   return status;
 8060658: f817 0c05    	ldrb	r0, [r7, #-5]
 806065c: 9001         	str	r0, [sp, #0x4]
 806065e: 4804         	ldr	r0, [pc, #0x10]         @ 0x8060670 <HAL_InitTick+0xb4>
 8060660: 4780         	blx	r0
 8060662: 9801         	ldr	r0, [sp, #0x4]
 8060664: b004         	add	sp, #0x10
 8060666: bd80         	pop	{r7, pc}

08060668 <$d.3>:
 8060668: e9 0e 06 08  	.word	0x08060ee9
 806066c: 41 0d 06 08  	.word	0x08060d41
 8060670: 21 05 06 08  	.word	0x08060521

08060674 <HAL_MspInit>:
; {
 8060674: b580         	push	{r7, lr}
 8060676: 466f         	mov	r7, sp
; }
 8060678: f643 5140    	movw	r1, #0x3d40
 806067c: f2c2 0100    	movt	r1, #0x2000
 8060680: 6808         	ldr	r0, [r1]
 8060682: f642 5240    	movw	r2, #0x2d40
 8060686: f2c2 0200    	movt	r2, #0x2000
 806068a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806068e: 3001         	adds	r0, #0x1
 8060690: 6008         	str	r0, [r1]
 8060692: 4801         	ldr	r0, [pc, #0x4]          @ 0x8060698 <HAL_MspInit+0x24>
 8060694: 4780         	blx	r0
 8060696: bd80         	pop	{r7, pc}

08060698 <$d.5>:
 8060698: 21 05 06 08  	.word	0x08060521

0806069c <SystemInit>:
; {
 806069c: b580         	push	{r7, lr}
 806069e: 466f         	mov	r7, sp
; }
 80606a0: f643 5140    	movw	r1, #0x3d40
 80606a4: f2c2 0100    	movt	r1, #0x2000
 80606a8: 6808         	ldr	r0, [r1]
 80606aa: f642 5240    	movw	r2, #0x2d40
 80606ae: f2c2 0200    	movt	r2, #0x2000
 80606b2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80606b6: 3001         	adds	r0, #0x1
 80606b8: 6008         	str	r0, [r1]
 80606ba: 4801         	ldr	r0, [pc, #0x4]          @ 0x80606c0 <SystemInit+0x24>
 80606bc: 4780         	blx	r0
 80606be: bd80         	pop	{r7, pc}

080606c0 <$d.1>:
 80606c0: 21 05 06 08  	.word	0x08060521

080606c4 <SystemCoreClockUpdate>:
; {
 80606c4: b580         	push	{r7, lr}
 80606c6: 466f         	mov	r7, sp
 80606c8: b088         	sub	sp, #0x20
 80606ca: f643 5140    	movw	r1, #0x3d40
 80606ce: f2c2 0100    	movt	r1, #0x2000
 80606d2: 6808         	ldr	r0, [r1]
 80606d4: f642 5240    	movw	r2, #0x2d40
 80606d8: f2c2 0200    	movt	r2, #0x2000
 80606dc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80606e0: 3001         	adds	r0, #0x1
 80606e2: 6008         	str	r0, [r1]
 80606e4: f241 0000    	movw	r0, #0x1000
 80606e8: f2c4 0002    	movt	r0, #0x4002
;   if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80606ec: 6800         	ldr	r0, [r0]
 80606ee: 0700         	lsls	r0, r0, #0x1c
 80606f0: 2800         	cmp	r0, #0x0
 80606f2: d409         	bmi	0x8060708 <SystemCoreClockUpdate+0x44> @ imm = #0x12
 80606f4: e7ff         	b	0x80606f6 <SystemCoreClockUpdate+0x32> @ imm = #-0x2
 80606f6: f241 0094    	movw	r0, #0x1094
 80606fa: f2c4 0002    	movt	r0, #0x4002
;     msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80606fe: 6800         	ldr	r0, [r0]
 8060700: f3c0 2003    	ubfx	r0, r0, #0x8, #0x4
 8060704: 9006         	str	r0, [sp, #0x18]
;   }
 8060706: e008         	b	0x806071a <SystemCoreClockUpdate+0x56> @ imm = #0x10
 8060708: f241 0000    	movw	r0, #0x1000
 806070c: f2c4 0002    	movt	r0, #0x4002
;     msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8060710: 6800         	ldr	r0, [r0]
 8060712: b2c0         	uxtb	r0, r0
 8060714: 0900         	lsrs	r0, r0, #0x4
 8060716: 9006         	str	r0, [sp, #0x18]
 8060718: e7ff         	b	0x806071a <SystemCoreClockUpdate+0x56> @ imm = #-0x2
;   msirange = MSIRangeTable[msirange];
 806071a: 9906         	ldr	r1, [sp, #0x18]
 806071c: f24a 0024    	movw	r0, #0xa024
 8060720: f6c0 0006    	movt	r0, #0x806
 8060724: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 8060728: 9006         	str	r0, [sp, #0x18]
 806072a: f241 0008    	movw	r0, #0x1008
 806072e: f2c4 0002    	movt	r0, #0x4002
;   switch (RCC->CFGR & RCC_CFGR_SWS)
 8060732: 6800         	ldr	r0, [r0]
 8060734: f000 000c    	and	r0, r0, #0xc
 8060738: 4601         	mov	r1, r0
 806073a: 9101         	str	r1, [sp, #0x4]
 806073c: b160         	cbz	r0, 0x8060758 <SystemCoreClockUpdate+0x94> @ imm = #0x18
 806073e: e7ff         	b	0x8060740 <SystemCoreClockUpdate+0x7c> @ imm = #-0x2
 8060740: 9801         	ldr	r0, [sp, #0x4]
 8060742: 2804         	cmp	r0, #0x4
 8060744: d00f         	beq	0x8060766 <SystemCoreClockUpdate+0xa2> @ imm = #0x1e
 8060746: e7ff         	b	0x8060748 <SystemCoreClockUpdate+0x84> @ imm = #-0x2
 8060748: 9801         	ldr	r0, [sp, #0x4]
 806074a: 2808         	cmp	r0, #0x8
 806074c: d015         	beq	0x806077a <SystemCoreClockUpdate+0xb6> @ imm = #0x2a
 806074e: e7ff         	b	0x8060750 <SystemCoreClockUpdate+0x8c> @ imm = #-0x2
 8060750: 9801         	ldr	r0, [sp, #0x4]
 8060752: 280c         	cmp	r0, #0xc
 8060754: d01b         	beq	0x806078e <SystemCoreClockUpdate+0xca> @ imm = #0x36
 8060756: e064         	b	0x8060822 <SystemCoreClockUpdate+0x15e> @ imm = #0xc8
;       SystemCoreClock = msirange;
 8060758: 9806         	ldr	r0, [sp, #0x18]
 806075a: f242 3188    	movw	r1, #0x2388
 806075e: f2c2 0100    	movt	r1, #0x2000
 8060762: 6008         	str	r0, [r1]
;       break;
 8060764: e064         	b	0x8060830 <SystemCoreClockUpdate+0x16c> @ imm = #0xc8
;       SystemCoreClock = HSI_VALUE;
 8060766: f242 3188    	movw	r1, #0x2388
 806076a: f2c2 0100    	movt	r1, #0x2000
 806076e: f242 4000    	movw	r0, #0x2400
 8060772: f2c0 00f4    	movt	r0, #0xf4
 8060776: 6008         	str	r0, [r1]
;       break;
 8060778: e05a         	b	0x8060830 <SystemCoreClockUpdate+0x16c> @ imm = #0xb4
;       SystemCoreClock = HSE_VALUE;
 806077a: f242 3188    	movw	r1, #0x2388
 806077e: f2c2 0100    	movt	r1, #0x2000
 8060782: f242 4000    	movw	r0, #0x2400
 8060786: f2c0 00f4    	movt	r0, #0xf4
 806078a: 6008         	str	r0, [r1]
;       break;
 806078c: e050         	b	0x8060830 <SystemCoreClockUpdate+0x16c> @ imm = #0xa0
 806078e: f241 000c    	movw	r0, #0x100c
 8060792: f2c4 0002    	movt	r0, #0x4002
;       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8060796: 6801         	ldr	r1, [r0]
 8060798: f001 0103    	and	r1, r1, #0x3
 806079c: 9104         	str	r1, [sp, #0x10]
;       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 806079e: 6800         	ldr	r0, [r0]
 80607a0: b2c1         	uxtb	r1, r0
 80607a2: 2001         	movs	r0, #0x1
 80607a4: eb00 1011    	add.w	r0, r0, r1, lsr #4
 80607a8: 9003         	str	r0, [sp, #0xc]
;       switch (pllsource)
 80607aa: 9804         	ldr	r0, [sp, #0x10]
 80607ac: 9000         	str	r0, [sp]
 80607ae: 2802         	cmp	r0, #0x2
 80607b0: d004         	beq	0x80607bc <SystemCoreClockUpdate+0xf8> @ imm = #0x8
 80607b2: e7ff         	b	0x80607b4 <SystemCoreClockUpdate+0xf0> @ imm = #-0x2
 80607b4: 9800         	ldr	r0, [sp]
 80607b6: 2803         	cmp	r0, #0x3
 80607b8: d009         	beq	0x80607ce <SystemCoreClockUpdate+0x10a> @ imm = #0x12
 80607ba: e011         	b	0x80607e0 <SystemCoreClockUpdate+0x11c> @ imm = #0x22
;           pllvco = (HSI_VALUE / pllm);
 80607bc: 9903         	ldr	r1, [sp, #0xc]
 80607be: f242 4000    	movw	r0, #0x2400
 80607c2: f2c0 00f4    	movt	r0, #0xf4
 80607c6: fbb0 f0f1    	udiv	r0, r0, r1
 80607ca: 9005         	str	r0, [sp, #0x14]
;           break;
 80607cc: e00e         	b	0x80607ec <SystemCoreClockUpdate+0x128> @ imm = #0x1c
;           pllvco = (HSE_VALUE / pllm);
 80607ce: 9903         	ldr	r1, [sp, #0xc]
 80607d0: f242 4000    	movw	r0, #0x2400
 80607d4: f2c0 00f4    	movt	r0, #0xf4
 80607d8: fbb0 f0f1    	udiv	r0, r0, r1
 80607dc: 9005         	str	r0, [sp, #0x14]
;           break;
 80607de: e005         	b	0x80607ec <SystemCoreClockUpdate+0x128> @ imm = #0xa
;           pllvco = (msirange / pllm);
 80607e0: 9806         	ldr	r0, [sp, #0x18]
 80607e2: 9903         	ldr	r1, [sp, #0xc]
 80607e4: fbb0 f0f1    	udiv	r0, r0, r1
 80607e8: 9005         	str	r0, [sp, #0x14]
;           break;
 80607ea: e7ff         	b	0x80607ec <SystemCoreClockUpdate+0x128> @ imm = #-0x2
;       pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80607ec: 9905         	ldr	r1, [sp, #0x14]
 80607ee: f241 000c    	movw	r0, #0x100c
 80607f2: f2c4 0002    	movt	r0, #0x4002
 80607f6: 6802         	ldr	r2, [r0]
 80607f8: f3c2 2206    	ubfx	r2, r2, #0x8, #0x7
 80607fc: 4351         	muls	r1, r2, r1
 80607fe: 9105         	str	r1, [sp, #0x14]
;       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8060800: 6800         	ldr	r0, [r0]
 8060802: f000 61c0    	and	r1, r0, #0x6000000
 8060806: 2002         	movs	r0, #0x2
 8060808: eb00 6011    	add.w	r0, r0, r1, lsr #24
 806080c: 9002         	str	r0, [sp, #0x8]
;       SystemCoreClock = pllvco/pllr;
 806080e: 9805         	ldr	r0, [sp, #0x14]
 8060810: 9902         	ldr	r1, [sp, #0x8]
 8060812: fbb0 f0f1    	udiv	r0, r0, r1
 8060816: f242 3188    	movw	r1, #0x2388
 806081a: f2c2 0100    	movt	r1, #0x2000
 806081e: 6008         	str	r0, [r1]
;       break;
 8060820: e006         	b	0x8060830 <SystemCoreClockUpdate+0x16c> @ imm = #0xc
;       SystemCoreClock = msirange;
 8060822: 9806         	ldr	r0, [sp, #0x18]
 8060824: f242 3188    	movw	r1, #0x2388
 8060828: f2c2 0100    	movt	r1, #0x2000
 806082c: 6008         	str	r0, [r1]
;       break;
 806082e: e7ff         	b	0x8060830 <SystemCoreClockUpdate+0x16c> @ imm = #-0x2
 8060830: f241 0008    	movw	r0, #0x1008
 8060834: f2c4 0002    	movt	r0, #0x4002
;   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8060838: 6800         	ldr	r0, [r0]
 806083a: b2c0         	uxtb	r0, r0
 806083c: 0901         	lsrs	r1, r0, #0x4
 806083e: f24a 0014    	movw	r0, #0xa014
 8060842: f6c0 0006    	movt	r0, #0x806
 8060846: 5c40         	ldrb	r0, [r0, r1]
 8060848: 9007         	str	r0, [sp, #0x1c]
;   SystemCoreClock >>= tmp;
 806084a: 9a07         	ldr	r2, [sp, #0x1c]
 806084c: f242 3188    	movw	r1, #0x2388
 8060850: f2c2 0100    	movt	r1, #0x2000
 8060854: 6808         	ldr	r0, [r1]
 8060856: 40d0         	lsrs	r0, r2
 8060858: 6008         	str	r0, [r1]
; }
 806085a: 4802         	ldr	r0, [pc, #0x8]          @ 0x8060864 <SystemCoreClockUpdate+0x1a0>
 806085c: 4780         	blx	r0
 806085e: b008         	add	sp, #0x20
 8060860: bd80         	pop	{r7, pc}
 8060862: bf00         	nop

08060864 <$d.3>:
 8060864: 21 05 06 08  	.word	0x08060521

08060868 <HAL_GPIO_Init>:
; void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8060868: b580         	push	{r7, lr}
 806086a: 466f         	mov	r7, sp
 806086c: b08c         	sub	sp, #0x30
 806086e: f643 5340    	movw	r3, #0x3d40
 8060872: f2c2 0300    	movt	r3, #0x2000
 8060876: 681a         	ldr	r2, [r3]
 8060878: f642 5c40    	movw	r12, #0x2d40
 806087c: f2c2 0c00    	movt	r12, #0x2000
 8060880: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8060884: 3201         	adds	r2, #0x1
 8060886: 601a         	str	r2, [r3]
 8060888: 900b         	str	r0, [sp, #0x2c]
 806088a: 910a         	str	r1, [sp, #0x28]
 806088c: 2000         	movs	r0, #0x0
;   uint32_t position = 0U;
 806088e: 9009         	str	r0, [sp, #0x24]
;   while (((GPIO_Init->Pin) >> position) != 0U) {
 8060890: e7ff         	b	0x8060892 <HAL_GPIO_Init+0x2a> @ imm = #-0x2
 8060892: 980a         	ldr	r0, [sp, #0x28]
 8060894: 6800         	ldr	r0, [r0]
 8060896: 9909         	ldr	r1, [sp, #0x24]
 8060898: 40c8         	lsrs	r0, r1
 806089a: 2800         	cmp	r0, #0x0
 806089c: f000 81a9    	beq.w	0x8060bf2 <HAL_GPIO_Init+0x38a> @ imm = #0x352
 80608a0: e7ff         	b	0x80608a2 <HAL_GPIO_Init+0x3a> @ imm = #-0x2
;     iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80608a2: 980a         	ldr	r0, [sp, #0x28]
 80608a4: 6800         	ldr	r0, [r0]
 80608a6: 9a09         	ldr	r2, [sp, #0x24]
 80608a8: 2101         	movs	r1, #0x1
 80608aa: 4091         	lsls	r1, r2
 80608ac: 4008         	ands	r0, r1
 80608ae: 9008         	str	r0, [sp, #0x20]
;     if (iocurrent != 0U) {
 80608b0: 9808         	ldr	r0, [sp, #0x20]
 80608b2: 2800         	cmp	r0, #0x0
 80608b4: f000 8199    	beq.w	0x8060bea <HAL_GPIO_Init+0x382> @ imm = #0x332
 80608b8: e7ff         	b	0x80608ba <HAL_GPIO_Init+0x52> @ imm = #-0x2
;       if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) ||
 80608ba: 980a         	ldr	r0, [sp, #0x28]
 80608bc: 6840         	ldr	r0, [r0, #0x4]
 80608be: 2801         	cmp	r0, #0x1
 80608c0: d00f         	beq	0x80608e2 <HAL_GPIO_Init+0x7a> @ imm = #0x1e
 80608c2: e7ff         	b	0x80608c4 <HAL_GPIO_Init+0x5c> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80608c4: 980a         	ldr	r0, [sp, #0x28]
 80608c6: 6840         	ldr	r0, [r0, #0x4]
 80608c8: 2802         	cmp	r0, #0x2
 80608ca: d00a         	beq	0x80608e2 <HAL_GPIO_Init+0x7a> @ imm = #0x14
 80608cc: e7ff         	b	0x80608ce <HAL_GPIO_Init+0x66> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) ||
 80608ce: 980a         	ldr	r0, [sp, #0x28]
 80608d0: 6840         	ldr	r0, [r0, #0x4]
 80608d2: 2811         	cmp	r0, #0x11
 80608d4: d005         	beq	0x80608e2 <HAL_GPIO_Init+0x7a> @ imm = #0xa
 80608d6: e7ff         	b	0x80608d8 <HAL_GPIO_Init+0x70> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 80608d8: 980a         	ldr	r0, [sp, #0x28]
 80608da: 6840         	ldr	r0, [r0, #0x4]
;       if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) ||
 80608dc: 2812         	cmp	r0, #0x12
 80608de: d12f         	bne	0x8060940 <HAL_GPIO_Init+0xd8> @ imm = #0x5e
 80608e0: e7ff         	b	0x80608e2 <HAL_GPIO_Init+0x7a> @ imm = #-0x2
;         temp = GPIOx->OSPEEDR;
 80608e2: 980b         	ldr	r0, [sp, #0x2c]
 80608e4: 6880         	ldr	r0, [r0, #0x8]
 80608e6: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80608e8: 9809         	ldr	r0, [sp, #0x24]
 80608ea: 0041         	lsls	r1, r0, #0x1
 80608ec: 2003         	movs	r0, #0x3
 80608ee: fa00 f101    	lsl.w	r1, r0, r1
 80608f2: 9807         	ldr	r0, [sp, #0x1c]
 80608f4: 4388         	bics	r0, r1
 80608f6: 9007         	str	r0, [sp, #0x1c]
;         temp |= (GPIO_Init->Speed << (position * 2U));
 80608f8: 980a         	ldr	r0, [sp, #0x28]
 80608fa: 68c0         	ldr	r0, [r0, #0xc]
 80608fc: 9909         	ldr	r1, [sp, #0x24]
 80608fe: 0049         	lsls	r1, r1, #0x1
 8060900: fa00 f101    	lsl.w	r1, r0, r1
 8060904: 9807         	ldr	r0, [sp, #0x1c]
 8060906: 4308         	orrs	r0, r1
 8060908: 9007         	str	r0, [sp, #0x1c]
;         GPIOx->OSPEEDR = temp;
 806090a: 9807         	ldr	r0, [sp, #0x1c]
 806090c: 990b         	ldr	r1, [sp, #0x2c]
 806090e: 6088         	str	r0, [r1, #0x8]
;         temp = GPIOx->OTYPER;
 8060910: 980b         	ldr	r0, [sp, #0x2c]
 8060912: 6840         	ldr	r0, [r0, #0x4]
 8060914: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~(GPIO_OTYPER_OT0 << position);
 8060916: 9909         	ldr	r1, [sp, #0x24]
 8060918: 2001         	movs	r0, #0x1
 806091a: fa00 f101    	lsl.w	r1, r0, r1
 806091e: 9807         	ldr	r0, [sp, #0x1c]
 8060920: 4388         	bics	r0, r1
 8060922: 9007         	str	r0, [sp, #0x1c]
;         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8060924: 980a         	ldr	r0, [sp, #0x28]
 8060926: 6840         	ldr	r0, [r0, #0x4]
 8060928: f3c0 1000    	ubfx	r0, r0, #0x4, #0x1
 806092c: 9909         	ldr	r1, [sp, #0x24]
 806092e: fa00 f101    	lsl.w	r1, r0, r1
 8060932: 9807         	ldr	r0, [sp, #0x1c]
 8060934: 4308         	orrs	r0, r1
 8060936: 9007         	str	r0, [sp, #0x1c]
;         GPIOx->OTYPER = temp;
 8060938: 9807         	ldr	r0, [sp, #0x1c]
 806093a: 990b         	ldr	r1, [sp, #0x2c]
 806093c: 6048         	str	r0, [r1, #0x4]
;       }
 806093e: e7ff         	b	0x8060940 <HAL_GPIO_Init+0xd8> @ imm = #-0x2
;       temp = GPIOx->PUPDR;
 8060940: 980b         	ldr	r0, [sp, #0x2c]
 8060942: 68c0         	ldr	r0, [r0, #0xc]
 8060944: 9007         	str	r0, [sp, #0x1c]
;       temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8060946: 9809         	ldr	r0, [sp, #0x24]
 8060948: 0041         	lsls	r1, r0, #0x1
 806094a: 2003         	movs	r0, #0x3
 806094c: fa00 f101    	lsl.w	r1, r0, r1
 8060950: 9807         	ldr	r0, [sp, #0x1c]
 8060952: 4388         	bics	r0, r1
 8060954: 9007         	str	r0, [sp, #0x1c]
;       temp |= ((GPIO_Init->Pull) << (position * 2U));
 8060956: 980a         	ldr	r0, [sp, #0x28]
 8060958: 6880         	ldr	r0, [r0, #0x8]
 806095a: 9909         	ldr	r1, [sp, #0x24]
 806095c: 0049         	lsls	r1, r1, #0x1
 806095e: fa00 f101    	lsl.w	r1, r0, r1
 8060962: 9807         	ldr	r0, [sp, #0x1c]
 8060964: 4308         	orrs	r0, r1
 8060966: 9007         	str	r0, [sp, #0x1c]
;       GPIOx->PUPDR = temp;
 8060968: 9807         	ldr	r0, [sp, #0x1c]
 806096a: 990b         	ldr	r1, [sp, #0x2c]
 806096c: 60c8         	str	r0, [r1, #0xc]
;       if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 806096e: 980a         	ldr	r0, [sp, #0x28]
 8060970: 6840         	ldr	r0, [r0, #0x4]
 8060972: 2802         	cmp	r0, #0x2
 8060974: d005         	beq	0x8060982 <HAL_GPIO_Init+0x11a> @ imm = #0xa
 8060976: e7ff         	b	0x8060978 <HAL_GPIO_Init+0x110> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8060978: 980a         	ldr	r0, [sp, #0x28]
 806097a: 6840         	ldr	r0, [r0, #0x4]
;       if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 806097c: 2812         	cmp	r0, #0x12
 806097e: d126         	bne	0x80609ce <HAL_GPIO_Init+0x166> @ imm = #0x4c
 8060980: e7ff         	b	0x8060982 <HAL_GPIO_Init+0x11a> @ imm = #-0x2
;         temp = GPIOx->AFR[position >> 3U];
 8060982: 980b         	ldr	r0, [sp, #0x2c]
 8060984: 9909         	ldr	r1, [sp, #0x24]
 8060986: f06f 0203    	mvn	r2, #0x3
 806098a: ea02 0151    	and.w	r1, r2, r1, lsr #1
 806098e: 4408         	add	r0, r1
 8060990: 6a00         	ldr	r0, [r0, #0x20]
 8060992: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8060994: 9809         	ldr	r0, [sp, #0x24]
 8060996: f000 0007    	and	r0, r0, #0x7
 806099a: 0081         	lsls	r1, r0, #0x2
 806099c: 200f         	movs	r0, #0xf
 806099e: fa00 f101    	lsl.w	r1, r0, r1
 80609a2: 9807         	ldr	r0, [sp, #0x1c]
 80609a4: 4388         	bics	r0, r1
 80609a6: 9007         	str	r0, [sp, #0x1c]
;         temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80609a8: 980a         	ldr	r0, [sp, #0x28]
 80609aa: 6900         	ldr	r0, [r0, #0x10]
 80609ac: 9909         	ldr	r1, [sp, #0x24]
 80609ae: f001 0107    	and	r1, r1, #0x7
 80609b2: 0089         	lsls	r1, r1, #0x2
 80609b4: fa00 f101    	lsl.w	r1, r0, r1
 80609b8: 9807         	ldr	r0, [sp, #0x1c]
 80609ba: 4308         	orrs	r0, r1
 80609bc: 9007         	str	r0, [sp, #0x1c]
;         GPIOx->AFR[position >> 3U] = temp;
 80609be: 9807         	ldr	r0, [sp, #0x1c]
 80609c0: 990b         	ldr	r1, [sp, #0x2c]
 80609c2: 9b09         	ldr	r3, [sp, #0x24]
 80609c4: ea02 0253    	and.w	r2, r2, r3, lsr #1
 80609c8: 4411         	add	r1, r2
 80609ca: 6208         	str	r0, [r1, #0x20]
;       }
 80609cc: e7ff         	b	0x80609ce <HAL_GPIO_Init+0x166> @ imm = #-0x2
;       temp = GPIOx->MODER;
 80609ce: 980b         	ldr	r0, [sp, #0x2c]
 80609d0: 6800         	ldr	r0, [r0]
 80609d2: 9007         	str	r0, [sp, #0x1c]
;       temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80609d4: 9809         	ldr	r0, [sp, #0x24]
 80609d6: 0041         	lsls	r1, r0, #0x1
 80609d8: 2003         	movs	r0, #0x3
 80609da: fa00 f101    	lsl.w	r1, r0, r1
 80609de: 9807         	ldr	r0, [sp, #0x1c]
 80609e0: 4388         	bics	r0, r1
 80609e2: 9007         	str	r0, [sp, #0x1c]
;       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80609e4: 980a         	ldr	r0, [sp, #0x28]
 80609e6: 6840         	ldr	r0, [r0, #0x4]
 80609e8: f000 0003    	and	r0, r0, #0x3
 80609ec: 9909         	ldr	r1, [sp, #0x24]
 80609ee: 0049         	lsls	r1, r1, #0x1
 80609f0: fa00 f101    	lsl.w	r1, r0, r1
 80609f4: 9807         	ldr	r0, [sp, #0x1c]
 80609f6: 4308         	orrs	r0, r1
 80609f8: 9007         	str	r0, [sp, #0x1c]
;       GPIOx->MODER = temp;
 80609fa: 9807         	ldr	r0, [sp, #0x1c]
 80609fc: 990b         	ldr	r1, [sp, #0x2c]
 80609fe: 6008         	str	r0, [r1]
;       if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8060a00: 980a         	ldr	r0, [sp, #0x28]
 8060a02: 79c0         	ldrb	r0, [r0, #0x7]
 8060a04: 06c0         	lsls	r0, r0, #0x1b
 8060a06: 2800         	cmp	r0, #0x0
 8060a08: f140 80ee    	bpl.w	0x8060be8 <HAL_GPIO_Init+0x380> @ imm = #0x1dc
 8060a0c: e7ff         	b	0x8060a0e <HAL_GPIO_Init+0x1a6> @ imm = #-0x2
;         temp = EXTI->EXTICR[position >> 2U];
 8060a0e: 9809         	ldr	r0, [sp, #0x24]
 8060a10: f020 0003    	bic	r0, r0, #0x3
 8060a14: f24f 4160    	movw	r1, #0xf460
 8060a18: f2c4 0102    	movt	r1, #0x4002
 8060a1c: 5840         	ldr	r0, [r0, r1]
 8060a1e: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8060a20: 9809         	ldr	r0, [sp, #0x24]
 8060a22: f000 0003    	and	r0, r0, #0x3
 8060a26: 00c1         	lsls	r1, r0, #0x3
 8060a28: 200f         	movs	r0, #0xf
 8060a2a: fa00 f101    	lsl.w	r1, r0, r1
 8060a2e: 9807         	ldr	r0, [sp, #0x1c]
 8060a30: 4388         	bics	r0, r1
 8060a32: 9007         	str	r0, [sp, #0x1c]
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8060a34: 980b         	ldr	r0, [sp, #0x2c]
 8060a36: 2100         	movs	r1, #0x0
 8060a38: f2c4 2102    	movt	r1, #0x4202
 8060a3c: 4288         	cmp	r0, r1
 8060a3e: d103         	bne	0x8060a48 <HAL_GPIO_Init+0x1e0> @ imm = #0x6
 8060a40: e7ff         	b	0x8060a42 <HAL_GPIO_Init+0x1da> @ imm = #-0x2
 8060a42: 2000         	movs	r0, #0x0
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8060a44: 9006         	str	r0, [sp, #0x18]
 8060a46: e050         	b	0x8060aea <HAL_GPIO_Init+0x282> @ imm = #0xa0
 8060a48: 980b         	ldr	r0, [sp, #0x2c]
 8060a4a: f240 4100    	movw	r1, #0x400
 8060a4e: f2c4 2102    	movt	r1, #0x4202
 8060a52: 4288         	cmp	r0, r1
 8060a54: d103         	bne	0x8060a5e <HAL_GPIO_Init+0x1f6> @ imm = #0x6
 8060a56: e7ff         	b	0x8060a58 <HAL_GPIO_Init+0x1f0> @ imm = #-0x2
 8060a58: 2001         	movs	r0, #0x1
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8060a5a: 9005         	str	r0, [sp, #0x14]
 8060a5c: e042         	b	0x8060ae4 <HAL_GPIO_Init+0x27c> @ imm = #0x84
 8060a5e: 980b         	ldr	r0, [sp, #0x2c]
 8060a60: f640 0100    	movw	r1, #0x800
 8060a64: f2c4 2102    	movt	r1, #0x4202
 8060a68: 4288         	cmp	r0, r1
 8060a6a: d103         	bne	0x8060a74 <HAL_GPIO_Init+0x20c> @ imm = #0x6
 8060a6c: e7ff         	b	0x8060a6e <HAL_GPIO_Init+0x206> @ imm = #-0x2
 8060a6e: 2002         	movs	r0, #0x2
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8060a70: 9004         	str	r0, [sp, #0x10]
 8060a72: e034         	b	0x8060ade <HAL_GPIO_Init+0x276> @ imm = #0x68
 8060a74: 980b         	ldr	r0, [sp, #0x2c]
 8060a76: f640 4100    	movw	r1, #0xc00
 8060a7a: f2c4 2102    	movt	r1, #0x4202
 8060a7e: 4288         	cmp	r0, r1
 8060a80: d103         	bne	0x8060a8a <HAL_GPIO_Init+0x222> @ imm = #0x6
 8060a82: e7ff         	b	0x8060a84 <HAL_GPIO_Init+0x21c> @ imm = #-0x2
 8060a84: 2003         	movs	r0, #0x3
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8060a86: 9003         	str	r0, [sp, #0xc]
 8060a88: e026         	b	0x8060ad8 <HAL_GPIO_Init+0x270> @ imm = #0x4c
 8060a8a: 980b         	ldr	r0, [sp, #0x2c]
 8060a8c: f241 0100    	movw	r1, #0x1000
 8060a90: f2c4 2102    	movt	r1, #0x4202
 8060a94: 4288         	cmp	r0, r1
 8060a96: d103         	bne	0x8060aa0 <HAL_GPIO_Init+0x238> @ imm = #0x6
 8060a98: e7ff         	b	0x8060a9a <HAL_GPIO_Init+0x232> @ imm = #-0x2
 8060a9a: 2004         	movs	r0, #0x4
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8060a9c: 9002         	str	r0, [sp, #0x8]
 8060a9e: e018         	b	0x8060ad2 <HAL_GPIO_Init+0x26a> @ imm = #0x30
 8060aa0: 980b         	ldr	r0, [sp, #0x2c]
 8060aa2: f241 4100    	movw	r1, #0x1400
 8060aa6: f2c4 2102    	movt	r1, #0x4202
 8060aaa: 4288         	cmp	r0, r1
 8060aac: d103         	bne	0x8060ab6 <HAL_GPIO_Init+0x24e> @ imm = #0x6
 8060aae: e7ff         	b	0x8060ab0 <HAL_GPIO_Init+0x248> @ imm = #-0x2
 8060ab0: 2005         	movs	r0, #0x5
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8060ab2: 9001         	str	r0, [sp, #0x4]
 8060ab4: e00a         	b	0x8060acc <HAL_GPIO_Init+0x264> @ imm = #0x14
 8060ab6: 990b         	ldr	r1, [sp, #0x2c]
 8060ab8: f641 0200    	movw	r2, #0x1800
 8060abc: f2c4 2202    	movt	r2, #0x4202
 8060ac0: 2007         	movs	r0, #0x7
 8060ac2: 4291         	cmp	r1, r2
 8060ac4: bf08         	it	eq
 8060ac6: 2006         	moveq	r0, #0x6
 8060ac8: 9001         	str	r0, [sp, #0x4]
 8060aca: e7ff         	b	0x8060acc <HAL_GPIO_Init+0x264> @ imm = #-0x2
 8060acc: 9801         	ldr	r0, [sp, #0x4]
 8060ace: 9002         	str	r0, [sp, #0x8]
 8060ad0: e7ff         	b	0x8060ad2 <HAL_GPIO_Init+0x26a> @ imm = #-0x2
 8060ad2: 9802         	ldr	r0, [sp, #0x8]
 8060ad4: 9003         	str	r0, [sp, #0xc]
 8060ad6: e7ff         	b	0x8060ad8 <HAL_GPIO_Init+0x270> @ imm = #-0x2
 8060ad8: 9803         	ldr	r0, [sp, #0xc]
 8060ada: 9004         	str	r0, [sp, #0x10]
 8060adc: e7ff         	b	0x8060ade <HAL_GPIO_Init+0x276> @ imm = #-0x2
 8060ade: 9804         	ldr	r0, [sp, #0x10]
 8060ae0: 9005         	str	r0, [sp, #0x14]
 8060ae2: e7ff         	b	0x8060ae4 <HAL_GPIO_Init+0x27c> @ imm = #-0x2
 8060ae4: 9805         	ldr	r0, [sp, #0x14]
 8060ae6: 9006         	str	r0, [sp, #0x18]
 8060ae8: e7ff         	b	0x8060aea <HAL_GPIO_Init+0x282> @ imm = #-0x2
 8060aea: 9806         	ldr	r0, [sp, #0x18]
 8060aec: 9909         	ldr	r1, [sp, #0x24]
 8060aee: f001 0103    	and	r1, r1, #0x3
 8060af2: 00c9         	lsls	r1, r1, #0x3
 8060af4: fa00 f101    	lsl.w	r1, r0, r1
 8060af8: 9807         	ldr	r0, [sp, #0x1c]
 8060afa: 4308         	orrs	r0, r1
 8060afc: 9007         	str	r0, [sp, #0x1c]
;         EXTI->EXTICR[position >> 2U] = temp;
 8060afe: 9807         	ldr	r0, [sp, #0x1c]
 8060b00: 9909         	ldr	r1, [sp, #0x24]
 8060b02: f021 0103    	bic	r1, r1, #0x3
 8060b06: f24f 4260    	movw	r2, #0xf460
 8060b0a: f2c4 0202    	movt	r2, #0x4002
 8060b0e: 5088         	str	r0, [r1, r2]
 8060b10: f24f 4080    	movw	r0, #0xf480
 8060b14: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->IMR1;
 8060b18: 6800         	ldr	r0, [r0]
 8060b1a: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~(iocurrent);
 8060b1c: 9908         	ldr	r1, [sp, #0x20]
 8060b1e: 9807         	ldr	r0, [sp, #0x1c]
 8060b20: 4388         	bics	r0, r1
 8060b22: 9007         	str	r0, [sp, #0x1c]
;         if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8060b24: 980a         	ldr	r0, [sp, #0x28]
 8060b26: 7980         	ldrb	r0, [r0, #0x6]
 8060b28: 07c0         	lsls	r0, r0, #0x1f
 8060b2a: b128         	cbz	r0, 0x8060b38 <HAL_GPIO_Init+0x2d0> @ imm = #0xa
 8060b2c: e7ff         	b	0x8060b2e <HAL_GPIO_Init+0x2c6> @ imm = #-0x2
;           temp |= iocurrent;
 8060b2e: 9908         	ldr	r1, [sp, #0x20]
 8060b30: 9807         	ldr	r0, [sp, #0x1c]
 8060b32: 4308         	orrs	r0, r1
 8060b34: 9007         	str	r0, [sp, #0x1c]
;         }
 8060b36: e7ff         	b	0x8060b38 <HAL_GPIO_Init+0x2d0> @ imm = #-0x2
;         EXTI->IMR1 = temp;
 8060b38: 9807         	ldr	r0, [sp, #0x1c]
 8060b3a: f24f 4180    	movw	r1, #0xf480
 8060b3e: f2c4 0102    	movt	r1, #0x4002
 8060b42: 6008         	str	r0, [r1]
 8060b44: f24f 4084    	movw	r0, #0xf484
 8060b48: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->EMR1;
 8060b4c: 6800         	ldr	r0, [r0]
 8060b4e: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~(iocurrent);
 8060b50: 9908         	ldr	r1, [sp, #0x20]
 8060b52: 9807         	ldr	r0, [sp, #0x1c]
 8060b54: 4388         	bics	r0, r1
 8060b56: 9007         	str	r0, [sp, #0x1c]
;         if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8060b58: 980a         	ldr	r0, [sp, #0x28]
 8060b5a: 7980         	ldrb	r0, [r0, #0x6]
 8060b5c: 0780         	lsls	r0, r0, #0x1e
 8060b5e: 2800         	cmp	r0, #0x0
 8060b60: d505         	bpl	0x8060b6e <HAL_GPIO_Init+0x306> @ imm = #0xa
 8060b62: e7ff         	b	0x8060b64 <HAL_GPIO_Init+0x2fc> @ imm = #-0x2
;           temp |= iocurrent;
 8060b64: 9908         	ldr	r1, [sp, #0x20]
 8060b66: 9807         	ldr	r0, [sp, #0x1c]
 8060b68: 4308         	orrs	r0, r1
 8060b6a: 9007         	str	r0, [sp, #0x1c]
;         }
 8060b6c: e7ff         	b	0x8060b6e <HAL_GPIO_Init+0x306> @ imm = #-0x2
;         EXTI->EMR1 = temp;
 8060b6e: 9807         	ldr	r0, [sp, #0x1c]
 8060b70: f24f 4184    	movw	r1, #0xf484
 8060b74: f2c4 0102    	movt	r1, #0x4002
 8060b78: 6008         	str	r0, [r1]
 8060b7a: f24f 4000    	movw	r0, #0xf400
 8060b7e: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->RTSR1;
 8060b82: 6800         	ldr	r0, [r0]
 8060b84: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~(iocurrent);
 8060b86: 9908         	ldr	r1, [sp, #0x20]
 8060b88: 9807         	ldr	r0, [sp, #0x1c]
 8060b8a: 4388         	bics	r0, r1
 8060b8c: 9007         	str	r0, [sp, #0x1c]
;         if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8060b8e: 980a         	ldr	r0, [sp, #0x28]
 8060b90: 7980         	ldrb	r0, [r0, #0x6]
 8060b92: 06c0         	lsls	r0, r0, #0x1b
 8060b94: 2800         	cmp	r0, #0x0
 8060b96: d505         	bpl	0x8060ba4 <HAL_GPIO_Init+0x33c> @ imm = #0xa
 8060b98: e7ff         	b	0x8060b9a <HAL_GPIO_Init+0x332> @ imm = #-0x2
;           temp |= iocurrent;
 8060b9a: 9908         	ldr	r1, [sp, #0x20]
 8060b9c: 9807         	ldr	r0, [sp, #0x1c]
 8060b9e: 4308         	orrs	r0, r1
 8060ba0: 9007         	str	r0, [sp, #0x1c]
;         }
 8060ba2: e7ff         	b	0x8060ba4 <HAL_GPIO_Init+0x33c> @ imm = #-0x2
;         EXTI->RTSR1 = temp;
 8060ba4: 9807         	ldr	r0, [sp, #0x1c]
 8060ba6: f24f 4100    	movw	r1, #0xf400
 8060baa: f2c4 0102    	movt	r1, #0x4002
 8060bae: 6008         	str	r0, [r1]
 8060bb0: f24f 4004    	movw	r0, #0xf404
 8060bb4: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->FTSR1;
 8060bb8: 6800         	ldr	r0, [r0]
 8060bba: 9007         	str	r0, [sp, #0x1c]
;         temp &= ~(iocurrent);
 8060bbc: 9908         	ldr	r1, [sp, #0x20]
 8060bbe: 9807         	ldr	r0, [sp, #0x1c]
 8060bc0: 4388         	bics	r0, r1
 8060bc2: 9007         	str	r0, [sp, #0x1c]
;         if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8060bc4: 980a         	ldr	r0, [sp, #0x28]
 8060bc6: 7980         	ldrb	r0, [r0, #0x6]
 8060bc8: 0680         	lsls	r0, r0, #0x1a
 8060bca: 2800         	cmp	r0, #0x0
 8060bcc: d505         	bpl	0x8060bda <HAL_GPIO_Init+0x372> @ imm = #0xa
 8060bce: e7ff         	b	0x8060bd0 <HAL_GPIO_Init+0x368> @ imm = #-0x2
;           temp |= iocurrent;
 8060bd0: 9908         	ldr	r1, [sp, #0x20]
 8060bd2: 9807         	ldr	r0, [sp, #0x1c]
 8060bd4: 4308         	orrs	r0, r1
 8060bd6: 9007         	str	r0, [sp, #0x1c]
;         }
 8060bd8: e7ff         	b	0x8060bda <HAL_GPIO_Init+0x372> @ imm = #-0x2
;         EXTI->FTSR1 = temp;
 8060bda: 9807         	ldr	r0, [sp, #0x1c]
 8060bdc: f24f 4104    	movw	r1, #0xf404
 8060be0: f2c4 0102    	movt	r1, #0x4002
 8060be4: 6008         	str	r0, [r1]
;       }
 8060be6: e7ff         	b	0x8060be8 <HAL_GPIO_Init+0x380> @ imm = #-0x2
;     }
 8060be8: e7ff         	b	0x8060bea <HAL_GPIO_Init+0x382> @ imm = #-0x2
;     position++;
 8060bea: 9809         	ldr	r0, [sp, #0x24]
 8060bec: 3001         	adds	r0, #0x1
 8060bee: 9009         	str	r0, [sp, #0x24]
;   while (((GPIO_Init->Pin) >> position) != 0U) {
 8060bf0: e64f         	b	0x8060892 <HAL_GPIO_Init+0x2a> @ imm = #-0x362
; }
 8060bf2: 4802         	ldr	r0, [pc, #0x8]          @ 0x8060bfc <HAL_GPIO_Init+0x394>
 8060bf4: 4780         	blx	r0
 8060bf6: b00c         	add	sp, #0x30
 8060bf8: bd80         	pop	{r7, pc}
 8060bfa: bf00         	nop

08060bfc <$d.1>:
 8060bfc: 21 05 06 08  	.word	0x08060521

08060c00 <HAL_GPIO_WritePin>:
;                        GPIO_PinState PinState) {
 8060c00: b5d0         	push	{r4, r6, r7, lr}
 8060c02: af02         	add	r7, sp, #0x8
 8060c04: b082         	sub	sp, #0x8
 8060c06: f643 5c40    	movw	r12, #0x3d40
 8060c0a: f2c2 0c00    	movt	r12, #0x2000
 8060c0e: f8dc 3000    	ldr.w	r3, [r12]
 8060c12: f642 5440    	movw	r4, #0x2d40
 8060c16: f2c2 0400    	movt	r4, #0x2000
 8060c1a: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8060c1e: 3301         	adds	r3, #0x1
 8060c20: f8cc 3000    	str.w	r3, [r12]
 8060c24: 9001         	str	r0, [sp, #0x4]
 8060c26: f827 1c0e    	strh	r1, [r7, #-14]
 8060c2a: f807 2c0f    	strb	r2, [r7, #-15]
;   if (PinState != GPIO_PIN_RESET) {
 8060c2e: f817 0c0f    	ldrb	r0, [r7, #-15]
 8060c32: b128         	cbz	r0, 0x8060c40 <HAL_GPIO_WritePin+0x40> @ imm = #0xa
 8060c34: e7ff         	b	0x8060c36 <HAL_GPIO_WritePin+0x36> @ imm = #-0x2
;     GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8060c36: f837 0c0e    	ldrh	r0, [r7, #-14]
 8060c3a: 9901         	ldr	r1, [sp, #0x4]
 8060c3c: 6188         	str	r0, [r1, #0x18]
;   } else {
 8060c3e: e004         	b	0x8060c4a <HAL_GPIO_WritePin+0x4a> @ imm = #0x8
;     GPIOx->BRR = (uint32_t)GPIO_Pin;
 8060c40: f837 0c0e    	ldrh	r0, [r7, #-14]
 8060c44: 9901         	ldr	r1, [sp, #0x4]
 8060c46: 6288         	str	r0, [r1, #0x28]
 8060c48: e7ff         	b	0x8060c4a <HAL_GPIO_WritePin+0x4a> @ imm = #-0x2
; }
 8060c4a: 4802         	ldr	r0, [pc, #0x8]          @ 0x8060c54 <HAL_GPIO_WritePin+0x54>
 8060c4c: 4780         	blx	r0
 8060c4e: b002         	add	sp, #0x8
 8060c50: bdd0         	pop	{r4, r6, r7, pc}
 8060c52: bf00         	nop

08060c54 <$d.7>:
 8060c54: 21 05 06 08  	.word	0x08060521

08060c58 <HAL_GPIO_TogglePin>:
; void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8060c58: b580         	push	{r7, lr}
 8060c5a: 466f         	mov	r7, sp
 8060c5c: b084         	sub	sp, #0x10
 8060c5e: f643 5340    	movw	r3, #0x3d40
 8060c62: f2c2 0300    	movt	r3, #0x2000
 8060c66: 681a         	ldr	r2, [r3]
 8060c68: f642 5c40    	movw	r12, #0x2d40
 8060c6c: f2c2 0c00    	movt	r12, #0x2000
 8060c70: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8060c74: 3201         	adds	r2, #0x1
 8060c76: 601a         	str	r2, [r3]
 8060c78: 9003         	str	r0, [sp, #0xc]
 8060c7a: f827 1c06    	strh	r1, [r7, #-6]
;   odr = GPIOx->ODR;
 8060c7e: 9803         	ldr	r0, [sp, #0xc]
 8060c80: 6940         	ldr	r0, [r0, #0x14]
 8060c82: 9001         	str	r0, [sp, #0x4]
;   GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8060c84: 9a01         	ldr	r2, [sp, #0x4]
 8060c86: f837 0c06    	ldrh	r0, [r7, #-6]
 8060c8a: ea02 0100    	and.w	r1, r2, r0
 8060c8e: 4390         	bics	r0, r2
 8060c90: ea40 4001    	orr.w	r0, r0, r1, lsl #16
 8060c94: 9903         	ldr	r1, [sp, #0xc]
 8060c96: 6188         	str	r0, [r1, #0x18]
; }
 8060c98: 4801         	ldr	r0, [pc, #0x4]          @ 0x8060ca0 <HAL_GPIO_TogglePin+0x48>
 8060c9a: 4780         	blx	r0
 8060c9c: b004         	add	sp, #0x10
 8060c9e: bd80         	pop	{r7, pc}

08060ca0 <$d.9>:
 8060ca0: 21 05 06 08  	.word	0x08060521

08060ca4 <HAL_NVIC_SetPriorityGrouping>:
; {
 8060ca4: b580         	push	{r7, lr}
 8060ca6: 466f         	mov	r7, sp
 8060ca8: b082         	sub	sp, #0x8
 8060caa: f643 5240    	movw	r2, #0x3d40
 8060cae: f2c2 0200    	movt	r2, #0x2000
 8060cb2: 6811         	ldr	r1, [r2]
 8060cb4: f642 5340    	movw	r3, #0x2d40
 8060cb8: f2c2 0300    	movt	r3, #0x2000
 8060cbc: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8060cc0: 3101         	adds	r1, #0x1
 8060cc2: 6011         	str	r1, [r2]
 8060cc4: 9001         	str	r0, [sp, #0x4]
;   NVIC_SetPriorityGrouping(PriorityGroup);
 8060cc6: 9801         	ldr	r0, [sp, #0x4]
 8060cc8: 4902         	ldr	r1, [pc, #0x8]          @ 0x8060cd4 <HAL_NVIC_SetPriorityGrouping+0x30>
 8060cca: 4788         	blx	r1
; }
 8060ccc: 4802         	ldr	r0, [pc, #0x8]          @ 0x8060cd8 <HAL_NVIC_SetPriorityGrouping+0x34>
 8060cce: 4780         	blx	r0
 8060cd0: b002         	add	sp, #0x8
 8060cd2: bd80         	pop	{r7, pc}

08060cd4 <$d.1>:
 8060cd4: dd 0c 06 08  	.word	0x08060cdd
 8060cd8: 21 05 06 08  	.word	0x08060521

08060cdc <__NVIC_SetPriorityGrouping>:
; {
 8060cdc: b580         	push	{r7, lr}
 8060cde: 466f         	mov	r7, sp
 8060ce0: b084         	sub	sp, #0x10
 8060ce2: f643 5240    	movw	r2, #0x3d40
 8060ce6: f2c2 0200    	movt	r2, #0x2000
 8060cea: 6811         	ldr	r1, [r2]
 8060cec: f642 5340    	movw	r3, #0x2d40
 8060cf0: f2c2 0300    	movt	r3, #0x2000
 8060cf4: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8060cf8: 3101         	adds	r1, #0x1
 8060cfa: 6011         	str	r1, [r2]
 8060cfc: 9003         	str	r0, [sp, #0xc]
;   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8060cfe: 9803         	ldr	r0, [sp, #0xc]
 8060d00: f000 0007    	and	r0, r0, #0x7
 8060d04: 9001         	str	r0, [sp, #0x4]
 8060d06: f64e 510c    	movw	r1, #0xed0c
 8060d0a: f2ce 0100    	movt	r1, #0xe000
;   reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8060d0e: 6808         	ldr	r0, [r1]
 8060d10: 9002         	str	r0, [sp, #0x8]
;   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8060d12: 9802         	ldr	r0, [sp, #0x8]
 8060d14: f64f 02ff    	movw	r2, #0xf8ff
 8060d18: 4010         	ands	r0, r2
 8060d1a: 9002         	str	r0, [sp, #0x8]
;   reg_value  =  (reg_value                                   |
 8060d1c: 9802         	ldr	r0, [sp, #0x8]
;                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8060d1e: 9a01         	ldr	r2, [sp, #0x4]
;   reg_value  =  (reg_value                                   |
 8060d20: ea40 2002    	orr.w	r0, r0, r2, lsl #8
 8060d24: 2200         	movs	r2, #0x0
 8060d26: f2c0 52fa    	movt	r2, #0x5fa
;                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8060d2a: 4310         	orrs	r0, r2
;   reg_value  =  (reg_value                                   |
 8060d2c: 9002         	str	r0, [sp, #0x8]
;   SCB->AIRCR =  reg_value;
 8060d2e: 9802         	ldr	r0, [sp, #0x8]
 8060d30: 6008         	str	r0, [r1]
; }
 8060d32: 4802         	ldr	r0, [pc, #0x8]          @ 0x8060d3c <__NVIC_SetPriorityGrouping+0x60>
 8060d34: 4780         	blx	r0
 8060d36: b004         	add	sp, #0x10
 8060d38: bd80         	pop	{r7, pc}
 8060d3a: bf00         	nop

08060d3c <$d.3>:
 8060d3c: 21 05 06 08  	.word	0x08060521

08060d40 <HAL_NVIC_SetPriority>:
; {
 8060d40: b5d0         	push	{r4, r6, r7, lr}
 8060d42: af02         	add	r7, sp, #0x8
 8060d44: b086         	sub	sp, #0x18
 8060d46: f643 5c40    	movw	r12, #0x3d40
 8060d4a: f2c2 0c00    	movt	r12, #0x2000
 8060d4e: f8dc 3000    	ldr.w	r3, [r12]
 8060d52: f642 5440    	movw	r4, #0x2d40
 8060d56: f2c2 0400    	movt	r4, #0x2000
 8060d5a: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8060d5e: 3301         	adds	r3, #0x1
 8060d60: f8cc 3000    	str.w	r3, [r12]
 8060d64: f807 0c09    	strb	r0, [r7, #-9]
 8060d68: 9104         	str	r1, [sp, #0x10]
 8060d6a: 9203         	str	r2, [sp, #0xc]
;   prioritygroup = NVIC_GetPriorityGrouping();
 8060d6c: 4809         	ldr	r0, [pc, #0x24]         @ 0x8060d94 <HAL_NVIC_SetPriority+0x54>
 8060d6e: 4780         	blx	r0
 8060d70: 9002         	str	r0, [sp, #0x8]
;   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8060d72: f917 0c09    	ldrsb	r0, [r7, #-9]
 8060d76: 9001         	str	r0, [sp, #0x4]
 8060d78: 9802         	ldr	r0, [sp, #0x8]
 8060d7a: 9904         	ldr	r1, [sp, #0x10]
 8060d7c: 9a03         	ldr	r2, [sp, #0xc]
 8060d7e: 4b06         	ldr	r3, [pc, #0x18]         @ 0x8060d98 <HAL_NVIC_SetPriority+0x58>
 8060d80: 4798         	blx	r3
 8060d82: 4601         	mov	r1, r0
 8060d84: 9801         	ldr	r0, [sp, #0x4]
 8060d86: 4a05         	ldr	r2, [pc, #0x14]         @ 0x8060d9c <HAL_NVIC_SetPriority+0x5c>
 8060d88: 4790         	blx	r2
; }
 8060d8a: 4805         	ldr	r0, [pc, #0x14]         @ 0x8060da0 <HAL_NVIC_SetPriority+0x60>
 8060d8c: 4780         	blx	r0
 8060d8e: b006         	add	sp, #0x18
 8060d90: bdd0         	pop	{r4, r6, r7, pc}
 8060d92: bf00         	nop

08060d94 <$d.5>:
 8060d94: a5 0d 06 08  	.word	0x08060da5
 8060d98: 4d 0e 06 08  	.word	0x08060e4d
 8060d9c: e5 0d 06 08  	.word	0x08060de5
 8060da0: 21 05 06 08  	.word	0x08060521

08060da4 <__NVIC_GetPriorityGrouping>:
; {
 8060da4: b580         	push	{r7, lr}
 8060da6: 466f         	mov	r7, sp
 8060da8: b082         	sub	sp, #0x8
;   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8060daa: f643 5140    	movw	r1, #0x3d40
 8060dae: f2c2 0100    	movt	r1, #0x2000
 8060db2: 6808         	ldr	r0, [r1]
 8060db4: f642 5240    	movw	r2, #0x2d40
 8060db8: f2c2 0200    	movt	r2, #0x2000
 8060dbc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8060dc0: 3001         	adds	r0, #0x1
 8060dc2: 6008         	str	r0, [r1]
 8060dc4: f64e 500c    	movw	r0, #0xed0c
 8060dc8: f2ce 0000    	movt	r0, #0xe000
 8060dcc: 6800         	ldr	r0, [r0]
 8060dce: f3c0 2002    	ubfx	r0, r0, #0x8, #0x3
 8060dd2: 9001         	str	r0, [sp, #0x4]
 8060dd4: 4802         	ldr	r0, [pc, #0x8]          @ 0x8060de0 <__NVIC_GetPriorityGrouping+0x3c>
 8060dd6: 4780         	blx	r0
 8060dd8: 9801         	ldr	r0, [sp, #0x4]
 8060dda: b002         	add	sp, #0x8
 8060ddc: bd80         	pop	{r7, pc}
 8060dde: bf00         	nop

08060de0 <$d.7>:
 8060de0: 21 05 06 08  	.word	0x08060521

08060de4 <__NVIC_SetPriority>:
; {
 8060de4: b580         	push	{r7, lr}
 8060de6: 466f         	mov	r7, sp
 8060de8: b082         	sub	sp, #0x8
 8060dea: f643 5340    	movw	r3, #0x3d40
 8060dee: f2c2 0300    	movt	r3, #0x2000
 8060df2: 681a         	ldr	r2, [r3]
 8060df4: f642 5c40    	movw	r12, #0x2d40
 8060df8: f2c2 0c00    	movt	r12, #0x2000
 8060dfc: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8060e00: 3201         	adds	r2, #0x1
 8060e02: 601a         	str	r2, [r3]
 8060e04: f807 0c01    	strb	r0, [r7, #-1]
 8060e08: 9100         	str	r1, [sp]
;   if ((int32_t)(IRQn) >= 0)
 8060e0a: f917 0c01    	ldrsb	r0, [r7, #-1]
 8060e0e: 2800         	cmp	r0, #0x0
 8060e10: d40a         	bmi	0x8060e28 <__NVIC_SetPriority+0x44> @ imm = #0x14
 8060e12: e7ff         	b	0x8060e14 <__NVIC_SetPriority+0x30> @ imm = #-0x2
;     NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060e14: 9800         	ldr	r0, [sp]
 8060e16: 0140         	lsls	r0, r0, #0x5
 8060e18: f917 1c01    	ldrsb	r1, [r7, #-1]
 8060e1c: f24e 4200    	movw	r2, #0xe400
 8060e20: f2ce 0200    	movt	r2, #0xe000
 8060e24: 5488         	strb	r0, [r1, r2]
;   }
 8060e26: e00b         	b	0x8060e40 <__NVIC_SetPriority+0x5c> @ imm = #0x16
;     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060e28: 9800         	ldr	r0, [sp]
 8060e2a: 0140         	lsls	r0, r0, #0x5
 8060e2c: f817 1c01    	ldrb	r1, [r7, #-1]
 8060e30: f001 010f    	and	r1, r1, #0xf
 8060e34: f64e 5214    	movw	r2, #0xed14
 8060e38: f2ce 0200    	movt	r2, #0xe000
 8060e3c: 5488         	strb	r0, [r1, r2]
 8060e3e: e7ff         	b	0x8060e40 <__NVIC_SetPriority+0x5c> @ imm = #-0x2
; }
 8060e40: 4801         	ldr	r0, [pc, #0x4]          @ 0x8060e48 <__NVIC_SetPriority+0x64>
 8060e42: 4780         	blx	r0
 8060e44: b002         	add	sp, #0x8
 8060e46: bd80         	pop	{r7, pc}

08060e48 <$d.9>:
 8060e48: 21 05 06 08  	.word	0x08060521

08060e4c <NVIC_EncodePriority>:
; {
 8060e4c: b5d0         	push	{r4, r6, r7, lr}
 8060e4e: af02         	add	r7, sp, #0x8
 8060e50: b08a         	sub	sp, #0x28
 8060e52: f643 5c40    	movw	r12, #0x3d40
 8060e56: f2c2 0c00    	movt	r12, #0x2000
 8060e5a: f8dc 3000    	ldr.w	r3, [r12]
 8060e5e: f642 5440    	movw	r4, #0x2d40
 8060e62: f2c2 0400    	movt	r4, #0x2000
 8060e66: f844 e023    	str.w	lr, [r4, r3, lsl #2]
 8060e6a: 3301         	adds	r3, #0x1
 8060e6c: f8cc 3000    	str.w	r3, [r12]
 8060e70: 9009         	str	r0, [sp, #0x24]
 8060e72: 9108         	str	r1, [sp, #0x20]
 8060e74: 9207         	str	r2, [sp, #0x1c]
;   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8060e76: 9809         	ldr	r0, [sp, #0x24]
 8060e78: f000 0007    	and	r0, r0, #0x7
 8060e7c: 9006         	str	r0, [sp, #0x18]
;   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8060e7e: 9806         	ldr	r0, [sp, #0x18]
 8060e80: f1c0 0007    	rsb.w	r0, r0, #0x7
 8060e84: 2804         	cmp	r0, #0x4
 8060e86: d303         	blo	0x8060e90 <NVIC_EncodePriority+0x44> @ imm = #0x6
 8060e88: e7ff         	b	0x8060e8a <NVIC_EncodePriority+0x3e> @ imm = #-0x2
 8060e8a: 2003         	movs	r0, #0x3
;   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8060e8c: 9003         	str	r0, [sp, #0xc]
 8060e8e: e004         	b	0x8060e9a <NVIC_EncodePriority+0x4e> @ imm = #0x8
 8060e90: 9806         	ldr	r0, [sp, #0x18]
 8060e92: f1c0 0007    	rsb.w	r0, r0, #0x7
 8060e96: 9003         	str	r0, [sp, #0xc]
 8060e98: e7ff         	b	0x8060e9a <NVIC_EncodePriority+0x4e> @ imm = #-0x2
 8060e9a: 9803         	ldr	r0, [sp, #0xc]
 8060e9c: 9005         	str	r0, [sp, #0x14]
;   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8060e9e: 9806         	ldr	r0, [sp, #0x18]
 8060ea0: 3003         	adds	r0, #0x3
 8060ea2: 2806         	cmp	r0, #0x6
 8060ea4: d803         	bhi	0x8060eae <NVIC_EncodePriority+0x62> @ imm = #0x6
 8060ea6: e7ff         	b	0x8060ea8 <NVIC_EncodePriority+0x5c> @ imm = #-0x2
 8060ea8: 2000         	movs	r0, #0x0
;   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8060eaa: 9002         	str	r0, [sp, #0x8]
 8060eac: e003         	b	0x8060eb6 <NVIC_EncodePriority+0x6a> @ imm = #0x6
 8060eae: 9806         	ldr	r0, [sp, #0x18]
 8060eb0: 3804         	subs	r0, #0x4
 8060eb2: 9002         	str	r0, [sp, #0x8]
 8060eb4: e7ff         	b	0x8060eb6 <NVIC_EncodePriority+0x6a> @ imm = #-0x2
 8060eb6: 9802         	ldr	r0, [sp, #0x8]
 8060eb8: 9004         	str	r0, [sp, #0x10]
;            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060eba: 9808         	ldr	r0, [sp, #0x20]
 8060ebc: 9905         	ldr	r1, [sp, #0x14]
 8060ebe: 2201         	movs	r2, #0x1
 8060ec0: fa02 f101    	lsl.w	r1, r2, r1
 8060ec4: 3901         	subs	r1, #0x1
 8060ec6: 4008         	ands	r0, r1
 8060ec8: 9b04         	ldr	r3, [sp, #0x10]
 8060eca: 4098         	lsls	r0, r3
;            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8060ecc: 9907         	ldr	r1, [sp, #0x1c]
 8060ece: 409a         	lsls	r2, r3
 8060ed0: 3a01         	subs	r2, #0x1
 8060ed2: 4011         	ands	r1, r2
;            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060ed4: 4308         	orrs	r0, r1
;   return (
 8060ed6: 9001         	str	r0, [sp, #0x4]
 8060ed8: 4802         	ldr	r0, [pc, #0x8]          @ 0x8060ee4 <NVIC_EncodePriority+0x98>
 8060eda: 4780         	blx	r0
 8060edc: 9801         	ldr	r0, [sp, #0x4]
 8060ede: b00a         	add	sp, #0x28
 8060ee0: bdd0         	pop	{r4, r6, r7, pc}
 8060ee2: bf00         	nop

08060ee4 <$d.11>:
 8060ee4: 21 05 06 08  	.word	0x08060521

08060ee8 <HAL_SYSTICK_Config>:
; {
 8060ee8: b580         	push	{r7, lr}
 8060eea: 466f         	mov	r7, sp
 8060eec: b082         	sub	sp, #0x8
 8060eee: f643 5240    	movw	r2, #0x3d40
 8060ef2: f2c2 0200    	movt	r2, #0x2000
 8060ef6: 6811         	ldr	r1, [r2]
 8060ef8: f642 5340    	movw	r3, #0x2d40
 8060efc: f2c2 0300    	movt	r3, #0x2000
 8060f00: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8060f04: 3101         	adds	r1, #0x1
 8060f06: 6011         	str	r1, [r2]
 8060f08: 9001         	str	r0, [sp, #0x4]
;   return SysTick_Config(TicksNumb);
 8060f0a: 9801         	ldr	r0, [sp, #0x4]
 8060f0c: 4903         	ldr	r1, [pc, #0xc]          @ 0x8060f1c <HAL_SYSTICK_Config+0x34>
 8060f0e: 4788         	blx	r1
 8060f10: 9000         	str	r0, [sp]
 8060f12: 4803         	ldr	r0, [pc, #0xc]          @ 0x8060f20 <HAL_SYSTICK_Config+0x38>
 8060f14: 4780         	blx	r0
 8060f16: 9800         	ldr	r0, [sp]
 8060f18: b002         	add	sp, #0x8
 8060f1a: bd80         	pop	{r7, pc}

08060f1c <$d.25>:
 8060f1c: 25 0f 06 08  	.word	0x08060f25
 8060f20: 21 05 06 08  	.word	0x08060521

08060f24 <SysTick_Config>:
; {
 8060f24: b580         	push	{r7, lr}
 8060f26: 466f         	mov	r7, sp
 8060f28: b084         	sub	sp, #0x10
 8060f2a: f643 5240    	movw	r2, #0x3d40
 8060f2e: f2c2 0200    	movt	r2, #0x2000
 8060f32: 6811         	ldr	r1, [r2]
 8060f34: f642 5340    	movw	r3, #0x2d40
 8060f38: f2c2 0300    	movt	r3, #0x2000
 8060f3c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8060f40: 3101         	adds	r1, #0x1
 8060f42: 6011         	str	r1, [r2]
 8060f44: 9002         	str	r0, [sp, #0x8]
;   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8060f46: 9802         	ldr	r0, [sp, #0x8]
 8060f48: 3801         	subs	r0, #0x1
 8060f4a: f1b0 7f80    	cmp.w	r0, #0x1000000
 8060f4e: d303         	blo	0x8060f58 <SysTick_Config+0x34> @ imm = #0x6
 8060f50: e7ff         	b	0x8060f52 <SysTick_Config+0x2e> @ imm = #-0x2
 8060f52: 2001         	movs	r0, #0x1
;     return (1UL);                                                   /* Reload value impossible */
 8060f54: 9003         	str	r0, [sp, #0xc]
 8060f56: e01a         	b	0x8060f8e <SysTick_Config+0x6a> @ imm = #0x34
;   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8060f58: 9802         	ldr	r0, [sp, #0x8]
 8060f5a: 3801         	subs	r0, #0x1
 8060f5c: f24e 0114    	movw	r1, #0xe014
 8060f60: f2ce 0100    	movt	r1, #0xe000
 8060f64: 6008         	str	r0, [r1]
;   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8060f66: 4a0d         	ldr	r2, [pc, #0x34]         @ 0x8060f9c <SysTick_Config+0x78>
 8060f68: f04f 30ff    	mov.w	r0, #0xffffffff
 8060f6c: 2107         	movs	r1, #0x7
 8060f6e: 9101         	str	r1, [sp, #0x4]
 8060f70: 4790         	blx	r2
 8060f72: 9901         	ldr	r1, [sp, #0x4]
 8060f74: f24e 0218    	movw	r2, #0xe018
 8060f78: f2ce 0200    	movt	r2, #0xe000
 8060f7c: 2000         	movs	r0, #0x0
;   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8060f7e: 6010         	str	r0, [r2]
 8060f80: f24e 0210    	movw	r2, #0xe010
 8060f84: f2ce 0200    	movt	r2, #0xe000
;   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8060f88: 6011         	str	r1, [r2]
;   return (0UL);                                                     /* Function successful */
 8060f8a: 9003         	str	r0, [sp, #0xc]
 8060f8c: e7ff         	b	0x8060f8e <SysTick_Config+0x6a> @ imm = #-0x2
; }
 8060f8e: 9803         	ldr	r0, [sp, #0xc]
 8060f90: 9000         	str	r0, [sp]
 8060f92: 4803         	ldr	r0, [pc, #0xc]          @ 0x8060fa0 <SysTick_Config+0x7c>
 8060f94: 4780         	blx	r0
 8060f96: 9800         	ldr	r0, [sp]
 8060f98: b004         	add	sp, #0x10
 8060f9a: bd80         	pop	{r7, pc}

08060f9c <$d.27>:
 8060f9c: e5 0d 06 08  	.word	0x08060de5
 8060fa0: 21 05 06 08  	.word	0x08060521

08060fa4 <NMI_Handler>:
; DEFAULT_IRQ_HANDLER(NMI_Handler)
 8060fa4: f643 5140    	movw	r1, #0x3d40
 8060fa8: f2c2 0100    	movt	r1, #0x2000
 8060fac: 6808         	ldr	r0, [r1]
 8060fae: f642 5240    	movw	r2, #0x2d40
 8060fb2: f2c2 0200    	movt	r2, #0x2000
 8060fb6: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8060fba: 3001         	adds	r0, #0x1
 8060fbc: 6008         	str	r0, [r1]
 8060fbe: e7ff         	b	0x8060fc0 <NMI_Handler+0x1c> @ imm = #-0x2
 8060fc0: e7fe         	b	0x8060fc0 <NMI_Handler+0x1c> @ imm = #-0x4

08060fc2 <HardFault_Handler>:
; DEFAULT_IRQ_HANDLER(HardFault_Handler)
 8060fc2: f643 5140    	movw	r1, #0x3d40
 8060fc6: f2c2 0100    	movt	r1, #0x2000
 8060fca: 6808         	ldr	r0, [r1]
 8060fcc: f642 5240    	movw	r2, #0x2d40
 8060fd0: f2c2 0200    	movt	r2, #0x2000
 8060fd4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8060fd8: 3001         	adds	r0, #0x1
 8060fda: 6008         	str	r0, [r1]
 8060fdc: e7ff         	b	0x8060fde <HardFault_Handler+0x1c> @ imm = #-0x2
 8060fde: e7fe         	b	0x8060fde <HardFault_Handler+0x1c> @ imm = #-0x4

08060fe0 <MemManage_Handler>:
; DEFAULT_IRQ_HANDLER(MemManage_Handler)
 8060fe0: f643 5140    	movw	r1, #0x3d40
 8060fe4: f2c2 0100    	movt	r1, #0x2000
 8060fe8: 6808         	ldr	r0, [r1]
 8060fea: f642 5240    	movw	r2, #0x2d40
 8060fee: f2c2 0200    	movt	r2, #0x2000
 8060ff2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8060ff6: 3001         	adds	r0, #0x1
 8060ff8: 6008         	str	r0, [r1]
 8060ffa: e7ff         	b	0x8060ffc <MemManage_Handler+0x1c> @ imm = #-0x2
 8060ffc: e7fe         	b	0x8060ffc <MemManage_Handler+0x1c> @ imm = #-0x4

08060ffe <BusFault_Handler>:
; DEFAULT_IRQ_HANDLER(BusFault_Handler)
 8060ffe: f643 5140    	movw	r1, #0x3d40
 8061002: f2c2 0100    	movt	r1, #0x2000
 8061006: 6808         	ldr	r0, [r1]
 8061008: f642 5240    	movw	r2, #0x2d40
 806100c: f2c2 0200    	movt	r2, #0x2000
 8061010: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061014: 3001         	adds	r0, #0x1
 8061016: 6008         	str	r0, [r1]
 8061018: e7ff         	b	0x806101a <BusFault_Handler+0x1c> @ imm = #-0x2
 806101a: e7fe         	b	0x806101a <BusFault_Handler+0x1c> @ imm = #-0x4

0806101c <UsageFault_Handler>:
; DEFAULT_IRQ_HANDLER(UsageFault_Handler)
 806101c: f643 5140    	movw	r1, #0x3d40
 8061020: f2c2 0100    	movt	r1, #0x2000
 8061024: 6808         	ldr	r0, [r1]
 8061026: f642 5240    	movw	r2, #0x2d40
 806102a: f2c2 0200    	movt	r2, #0x2000
 806102e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061032: 3001         	adds	r0, #0x1
 8061034: 6008         	str	r0, [r1]
 8061036: e7ff         	b	0x8061038 <UsageFault_Handler+0x1c> @ imm = #-0x2
 8061038: e7fe         	b	0x8061038 <UsageFault_Handler+0x1c> @ imm = #-0x4

0806103a <SecureFault_Handler>:
; DEFAULT_IRQ_HANDLER(SecureFault_Handler)
 806103a: f643 5140    	movw	r1, #0x3d40
 806103e: f2c2 0100    	movt	r1, #0x2000
 8061042: 6808         	ldr	r0, [r1]
 8061044: f642 5240    	movw	r2, #0x2d40
 8061048: f2c2 0200    	movt	r2, #0x2000
 806104c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061050: 3001         	adds	r0, #0x1
 8061052: 6008         	str	r0, [r1]
 8061054: e7ff         	b	0x8061056 <SecureFault_Handler+0x1c> @ imm = #-0x2
 8061056: e7fe         	b	0x8061056 <SecureFault_Handler+0x1c> @ imm = #-0x4

08061058 <DebugMon_Handler>:
; DEFAULT_IRQ_HANDLER(DebugMon_Handler)
 8061058: f643 5140    	movw	r1, #0x3d40
 806105c: f2c2 0100    	movt	r1, #0x2000
 8061060: 6808         	ldr	r0, [r1]
 8061062: f642 5240    	movw	r2, #0x2d40
 8061066: f2c2 0200    	movt	r2, #0x2000
 806106a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806106e: 3001         	adds	r0, #0x1
 8061070: 6008         	str	r0, [r1]
 8061072: e7ff         	b	0x8061074 <DebugMon_Handler+0x1c> @ imm = #-0x2
 8061074: e7fe         	b	0x8061074 <DebugMon_Handler+0x1c> @ imm = #-0x4

08061076 <WWDG_IRQHandler>:
; DEFAULT_IRQ_HANDLER(WWDG_IRQHandler)
 8061076: f643 5140    	movw	r1, #0x3d40
 806107a: f2c2 0100    	movt	r1, #0x2000
 806107e: 6808         	ldr	r0, [r1]
 8061080: f642 5240    	movw	r2, #0x2d40
 8061084: f2c2 0200    	movt	r2, #0x2000
 8061088: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806108c: 3001         	adds	r0, #0x1
 806108e: 6008         	str	r0, [r1]
 8061090: e7ff         	b	0x8061092 <WWDG_IRQHandler+0x1c> @ imm = #-0x2
 8061092: e7fe         	b	0x8061092 <WWDG_IRQHandler+0x1c> @ imm = #-0x4

08061094 <PVD_PVM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(PVD_PVM_IRQHandler)
 8061094: f643 5140    	movw	r1, #0x3d40
 8061098: f2c2 0100    	movt	r1, #0x2000
 806109c: 6808         	ldr	r0, [r1]
 806109e: f642 5240    	movw	r2, #0x2d40
 80610a2: f2c2 0200    	movt	r2, #0x2000
 80610a6: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80610aa: 3001         	adds	r0, #0x1
 80610ac: 6008         	str	r0, [r1]
 80610ae: e7ff         	b	0x80610b0 <PVD_PVM_IRQHandler+0x1c> @ imm = #-0x2
 80610b0: e7fe         	b	0x80610b0 <PVD_PVM_IRQHandler+0x1c> @ imm = #-0x4

080610b2 <RTC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RTC_IRQHandler)
 80610b2: f643 5140    	movw	r1, #0x3d40
 80610b6: f2c2 0100    	movt	r1, #0x2000
 80610ba: 6808         	ldr	r0, [r1]
 80610bc: f642 5240    	movw	r2, #0x2d40
 80610c0: f2c2 0200    	movt	r2, #0x2000
 80610c4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80610c8: 3001         	adds	r0, #0x1
 80610ca: 6008         	str	r0, [r1]
 80610cc: e7ff         	b	0x80610ce <RTC_IRQHandler+0x1c> @ imm = #-0x2
 80610ce: e7fe         	b	0x80610ce <RTC_IRQHandler+0x1c> @ imm = #-0x4

080610d0 <RTC_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(RTC_IRQHandler_S)
 80610d0: f643 5140    	movw	r1, #0x3d40
 80610d4: f2c2 0100    	movt	r1, #0x2000
 80610d8: 6808         	ldr	r0, [r1]
 80610da: f642 5240    	movw	r2, #0x2d40
 80610de: f2c2 0200    	movt	r2, #0x2000
 80610e2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80610e6: 3001         	adds	r0, #0x1
 80610e8: 6008         	str	r0, [r1]
 80610ea: e7ff         	b	0x80610ec <RTC_IRQHandler_S+0x1c> @ imm = #-0x2
 80610ec: e7fe         	b	0x80610ec <RTC_IRQHandler_S+0x1c> @ imm = #-0x4

080610ee <TAMP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TAMP_IRQHandler)
 80610ee: f643 5140    	movw	r1, #0x3d40
 80610f2: f2c2 0100    	movt	r1, #0x2000
 80610f6: 6808         	ldr	r0, [r1]
 80610f8: f642 5240    	movw	r2, #0x2d40
 80610fc: f2c2 0200    	movt	r2, #0x2000
 8061100: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061104: 3001         	adds	r0, #0x1
 8061106: 6008         	str	r0, [r1]
 8061108: e7ff         	b	0x806110a <TAMP_IRQHandler+0x1c> @ imm = #-0x2
 806110a: e7fe         	b	0x806110a <TAMP_IRQHandler+0x1c> @ imm = #-0x4

0806110c <TAMP_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(TAMP_IRQHandler_S)
 806110c: f643 5140    	movw	r1, #0x3d40
 8061110: f2c2 0100    	movt	r1, #0x2000
 8061114: 6808         	ldr	r0, [r1]
 8061116: f642 5240    	movw	r2, #0x2d40
 806111a: f2c2 0200    	movt	r2, #0x2000
 806111e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061122: 3001         	adds	r0, #0x1
 8061124: 6008         	str	r0, [r1]
 8061126: e7ff         	b	0x8061128 <TAMP_IRQHandler_S+0x1c> @ imm = #-0x2
 8061128: e7fe         	b	0x8061128 <TAMP_IRQHandler_S+0x1c> @ imm = #-0x4

0806112a <FLASH_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FLASH_IRQHandler)
 806112a: f643 5140    	movw	r1, #0x3d40
 806112e: f2c2 0100    	movt	r1, #0x2000
 8061132: 6808         	ldr	r0, [r1]
 8061134: f642 5240    	movw	r2, #0x2d40
 8061138: f2c2 0200    	movt	r2, #0x2000
 806113c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061140: 3001         	adds	r0, #0x1
 8061142: 6008         	str	r0, [r1]
 8061144: e7ff         	b	0x8061146 <FLASH_IRQHandler+0x1c> @ imm = #-0x2
 8061146: e7fe         	b	0x8061146 <FLASH_IRQHandler+0x1c> @ imm = #-0x4

08061148 <FLASH_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(FLASH_IRQHandler_S)
 8061148: f643 5140    	movw	r1, #0x3d40
 806114c: f2c2 0100    	movt	r1, #0x2000
 8061150: 6808         	ldr	r0, [r1]
 8061152: f642 5240    	movw	r2, #0x2d40
 8061156: f2c2 0200    	movt	r2, #0x2000
 806115a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806115e: 3001         	adds	r0, #0x1
 8061160: 6008         	str	r0, [r1]
 8061162: e7ff         	b	0x8061164 <FLASH_IRQHandler_S+0x1c> @ imm = #-0x2
 8061164: e7fe         	b	0x8061164 <FLASH_IRQHandler_S+0x1c> @ imm = #-0x4

08061166 <SERR_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SERR_IRQHandler)
 8061166: f643 5140    	movw	r1, #0x3d40
 806116a: f2c2 0100    	movt	r1, #0x2000
 806116e: 6808         	ldr	r0, [r1]
 8061170: f642 5240    	movw	r2, #0x2d40
 8061174: f2c2 0200    	movt	r2, #0x2000
 8061178: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806117c: 3001         	adds	r0, #0x1
 806117e: 6008         	str	r0, [r1]
 8061180: e7ff         	b	0x8061182 <SERR_IRQHandler+0x1c> @ imm = #-0x2
 8061182: e7fe         	b	0x8061182 <SERR_IRQHandler+0x1c> @ imm = #-0x4

08061184 <RCC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RCC_IRQHandler)
 8061184: f643 5140    	movw	r1, #0x3d40
 8061188: f2c2 0100    	movt	r1, #0x2000
 806118c: 6808         	ldr	r0, [r1]
 806118e: f642 5240    	movw	r2, #0x2d40
 8061192: f2c2 0200    	movt	r2, #0x2000
 8061196: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806119a: 3001         	adds	r0, #0x1
 806119c: 6008         	str	r0, [r1]
 806119e: e7ff         	b	0x80611a0 <RCC_IRQHandler+0x1c> @ imm = #-0x2
 80611a0: e7fe         	b	0x80611a0 <RCC_IRQHandler+0x1c> @ imm = #-0x4

080611a2 <RCC_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(RCC_IRQHandler_S)
 80611a2: f643 5140    	movw	r1, #0x3d40
 80611a6: f2c2 0100    	movt	r1, #0x2000
 80611aa: 6808         	ldr	r0, [r1]
 80611ac: f642 5240    	movw	r2, #0x2d40
 80611b0: f2c2 0200    	movt	r2, #0x2000
 80611b4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80611b8: 3001         	adds	r0, #0x1
 80611ba: 6008         	str	r0, [r1]
 80611bc: e7ff         	b	0x80611be <RCC_IRQHandler_S+0x1c> @ imm = #-0x2
 80611be: e7fe         	b	0x80611be <RCC_IRQHandler_S+0x1c> @ imm = #-0x4

080611c0 <EXTI0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI0_IRQHandler)
 80611c0: f643 5140    	movw	r1, #0x3d40
 80611c4: f2c2 0100    	movt	r1, #0x2000
 80611c8: 6808         	ldr	r0, [r1]
 80611ca: f642 5240    	movw	r2, #0x2d40
 80611ce: f2c2 0200    	movt	r2, #0x2000
 80611d2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80611d6: 3001         	adds	r0, #0x1
 80611d8: 6008         	str	r0, [r1]
 80611da: e7ff         	b	0x80611dc <EXTI0_IRQHandler+0x1c> @ imm = #-0x2
 80611dc: e7fe         	b	0x80611dc <EXTI0_IRQHandler+0x1c> @ imm = #-0x4

080611de <EXTI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI1_IRQHandler)
 80611de: f643 5140    	movw	r1, #0x3d40
 80611e2: f2c2 0100    	movt	r1, #0x2000
 80611e6: 6808         	ldr	r0, [r1]
 80611e8: f642 5240    	movw	r2, #0x2d40
 80611ec: f2c2 0200    	movt	r2, #0x2000
 80611f0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80611f4: 3001         	adds	r0, #0x1
 80611f6: 6008         	str	r0, [r1]
 80611f8: e7ff         	b	0x80611fa <EXTI1_IRQHandler+0x1c> @ imm = #-0x2
 80611fa: e7fe         	b	0x80611fa <EXTI1_IRQHandler+0x1c> @ imm = #-0x4

080611fc <EXTI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI2_IRQHandler)
 80611fc: f643 5140    	movw	r1, #0x3d40
 8061200: f2c2 0100    	movt	r1, #0x2000
 8061204: 6808         	ldr	r0, [r1]
 8061206: f642 5240    	movw	r2, #0x2d40
 806120a: f2c2 0200    	movt	r2, #0x2000
 806120e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061212: 3001         	adds	r0, #0x1
 8061214: 6008         	str	r0, [r1]
 8061216: e7ff         	b	0x8061218 <EXTI2_IRQHandler+0x1c> @ imm = #-0x2
 8061218: e7fe         	b	0x8061218 <EXTI2_IRQHandler+0x1c> @ imm = #-0x4

0806121a <EXTI3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI3_IRQHandler)
 806121a: f643 5140    	movw	r1, #0x3d40
 806121e: f2c2 0100    	movt	r1, #0x2000
 8061222: 6808         	ldr	r0, [r1]
 8061224: f642 5240    	movw	r2, #0x2d40
 8061228: f2c2 0200    	movt	r2, #0x2000
 806122c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061230: 3001         	adds	r0, #0x1
 8061232: 6008         	str	r0, [r1]
 8061234: e7ff         	b	0x8061236 <EXTI3_IRQHandler+0x1c> @ imm = #-0x2
 8061236: e7fe         	b	0x8061236 <EXTI3_IRQHandler+0x1c> @ imm = #-0x4

08061238 <EXTI4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI4_IRQHandler)
 8061238: f643 5140    	movw	r1, #0x3d40
 806123c: f2c2 0100    	movt	r1, #0x2000
 8061240: 6808         	ldr	r0, [r1]
 8061242: f642 5240    	movw	r2, #0x2d40
 8061246: f2c2 0200    	movt	r2, #0x2000
 806124a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806124e: 3001         	adds	r0, #0x1
 8061250: 6008         	str	r0, [r1]
 8061252: e7ff         	b	0x8061254 <EXTI4_IRQHandler+0x1c> @ imm = #-0x2
 8061254: e7fe         	b	0x8061254 <EXTI4_IRQHandler+0x1c> @ imm = #-0x4

08061256 <EXTI5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI5_IRQHandler)
 8061256: f643 5140    	movw	r1, #0x3d40
 806125a: f2c2 0100    	movt	r1, #0x2000
 806125e: 6808         	ldr	r0, [r1]
 8061260: f642 5240    	movw	r2, #0x2d40
 8061264: f2c2 0200    	movt	r2, #0x2000
 8061268: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806126c: 3001         	adds	r0, #0x1
 806126e: 6008         	str	r0, [r1]
 8061270: e7ff         	b	0x8061272 <EXTI5_IRQHandler+0x1c> @ imm = #-0x2
 8061272: e7fe         	b	0x8061272 <EXTI5_IRQHandler+0x1c> @ imm = #-0x4

08061274 <EXTI6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI6_IRQHandler)
 8061274: f643 5140    	movw	r1, #0x3d40
 8061278: f2c2 0100    	movt	r1, #0x2000
 806127c: 6808         	ldr	r0, [r1]
 806127e: f642 5240    	movw	r2, #0x2d40
 8061282: f2c2 0200    	movt	r2, #0x2000
 8061286: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806128a: 3001         	adds	r0, #0x1
 806128c: 6008         	str	r0, [r1]
 806128e: e7ff         	b	0x8061290 <EXTI6_IRQHandler+0x1c> @ imm = #-0x2
 8061290: e7fe         	b	0x8061290 <EXTI6_IRQHandler+0x1c> @ imm = #-0x4

08061292 <EXTI7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI7_IRQHandler)
 8061292: f643 5140    	movw	r1, #0x3d40
 8061296: f2c2 0100    	movt	r1, #0x2000
 806129a: 6808         	ldr	r0, [r1]
 806129c: f642 5240    	movw	r2, #0x2d40
 80612a0: f2c2 0200    	movt	r2, #0x2000
 80612a4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80612a8: 3001         	adds	r0, #0x1
 80612aa: 6008         	str	r0, [r1]
 80612ac: e7ff         	b	0x80612ae <EXTI7_IRQHandler+0x1c> @ imm = #-0x2
 80612ae: e7fe         	b	0x80612ae <EXTI7_IRQHandler+0x1c> @ imm = #-0x4

080612b0 <EXTI8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI8_IRQHandler)
 80612b0: f643 5140    	movw	r1, #0x3d40
 80612b4: f2c2 0100    	movt	r1, #0x2000
 80612b8: 6808         	ldr	r0, [r1]
 80612ba: f642 5240    	movw	r2, #0x2d40
 80612be: f2c2 0200    	movt	r2, #0x2000
 80612c2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80612c6: 3001         	adds	r0, #0x1
 80612c8: 6008         	str	r0, [r1]
 80612ca: e7ff         	b	0x80612cc <EXTI8_IRQHandler+0x1c> @ imm = #-0x2
 80612cc: e7fe         	b	0x80612cc <EXTI8_IRQHandler+0x1c> @ imm = #-0x4

080612ce <EXTI9_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI9_IRQHandler)
 80612ce: f643 5140    	movw	r1, #0x3d40
 80612d2: f2c2 0100    	movt	r1, #0x2000
 80612d6: 6808         	ldr	r0, [r1]
 80612d8: f642 5240    	movw	r2, #0x2d40
 80612dc: f2c2 0200    	movt	r2, #0x2000
 80612e0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80612e4: 3001         	adds	r0, #0x1
 80612e6: 6008         	str	r0, [r1]
 80612e8: e7ff         	b	0x80612ea <EXTI9_IRQHandler+0x1c> @ imm = #-0x2
 80612ea: e7fe         	b	0x80612ea <EXTI9_IRQHandler+0x1c> @ imm = #-0x4

080612ec <EXTI10_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI10_IRQHandler)
 80612ec: f643 5140    	movw	r1, #0x3d40
 80612f0: f2c2 0100    	movt	r1, #0x2000
 80612f4: 6808         	ldr	r0, [r1]
 80612f6: f642 5240    	movw	r2, #0x2d40
 80612fa: f2c2 0200    	movt	r2, #0x2000
 80612fe: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061302: 3001         	adds	r0, #0x1
 8061304: 6008         	str	r0, [r1]
 8061306: e7ff         	b	0x8061308 <EXTI10_IRQHandler+0x1c> @ imm = #-0x2
 8061308: e7fe         	b	0x8061308 <EXTI10_IRQHandler+0x1c> @ imm = #-0x4

0806130a <EXTI11_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI11_IRQHandler)
 806130a: f643 5140    	movw	r1, #0x3d40
 806130e: f2c2 0100    	movt	r1, #0x2000
 8061312: 6808         	ldr	r0, [r1]
 8061314: f642 5240    	movw	r2, #0x2d40
 8061318: f2c2 0200    	movt	r2, #0x2000
 806131c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061320: 3001         	adds	r0, #0x1
 8061322: 6008         	str	r0, [r1]
 8061324: e7ff         	b	0x8061326 <EXTI11_IRQHandler+0x1c> @ imm = #-0x2
 8061326: e7fe         	b	0x8061326 <EXTI11_IRQHandler+0x1c> @ imm = #-0x4

08061328 <EXTI12_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI12_IRQHandler)
 8061328: f643 5140    	movw	r1, #0x3d40
 806132c: f2c2 0100    	movt	r1, #0x2000
 8061330: 6808         	ldr	r0, [r1]
 8061332: f642 5240    	movw	r2, #0x2d40
 8061336: f2c2 0200    	movt	r2, #0x2000
 806133a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806133e: 3001         	adds	r0, #0x1
 8061340: 6008         	str	r0, [r1]
 8061342: e7ff         	b	0x8061344 <EXTI12_IRQHandler+0x1c> @ imm = #-0x2
 8061344: e7fe         	b	0x8061344 <EXTI12_IRQHandler+0x1c> @ imm = #-0x4

08061346 <EXTI13_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI13_IRQHandler)
 8061346: f643 5140    	movw	r1, #0x3d40
 806134a: f2c2 0100    	movt	r1, #0x2000
 806134e: 6808         	ldr	r0, [r1]
 8061350: f642 5240    	movw	r2, #0x2d40
 8061354: f2c2 0200    	movt	r2, #0x2000
 8061358: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806135c: 3001         	adds	r0, #0x1
 806135e: 6008         	str	r0, [r1]
 8061360: e7ff         	b	0x8061362 <EXTI13_IRQHandler+0x1c> @ imm = #-0x2
 8061362: e7fe         	b	0x8061362 <EXTI13_IRQHandler+0x1c> @ imm = #-0x4

08061364 <EXTI14_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI14_IRQHandler)
 8061364: f643 5140    	movw	r1, #0x3d40
 8061368: f2c2 0100    	movt	r1, #0x2000
 806136c: 6808         	ldr	r0, [r1]
 806136e: f642 5240    	movw	r2, #0x2d40
 8061372: f2c2 0200    	movt	r2, #0x2000
 8061376: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806137a: 3001         	adds	r0, #0x1
 806137c: 6008         	str	r0, [r1]
 806137e: e7ff         	b	0x8061380 <EXTI14_IRQHandler+0x1c> @ imm = #-0x2
 8061380: e7fe         	b	0x8061380 <EXTI14_IRQHandler+0x1c> @ imm = #-0x4

08061382 <EXTI15_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI15_IRQHandler)
 8061382: f643 5140    	movw	r1, #0x3d40
 8061386: f2c2 0100    	movt	r1, #0x2000
 806138a: 6808         	ldr	r0, [r1]
 806138c: f642 5240    	movw	r2, #0x2d40
 8061390: f2c2 0200    	movt	r2, #0x2000
 8061394: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061398: 3001         	adds	r0, #0x1
 806139a: 6008         	str	r0, [r1]
 806139c: e7ff         	b	0x806139e <EXTI15_IRQHandler+0x1c> @ imm = #-0x2
 806139e: e7fe         	b	0x806139e <EXTI15_IRQHandler+0x1c> @ imm = #-0x4

080613a0 <DMAMUX1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMAMUX1_IRQHandler)
 80613a0: f643 5140    	movw	r1, #0x3d40
 80613a4: f2c2 0100    	movt	r1, #0x2000
 80613a8: 6808         	ldr	r0, [r1]
 80613aa: f642 5240    	movw	r2, #0x2d40
 80613ae: f2c2 0200    	movt	r2, #0x2000
 80613b2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80613b6: 3001         	adds	r0, #0x1
 80613b8: 6008         	str	r0, [r1]
 80613ba: e7ff         	b	0x80613bc <DMAMUX1_IRQHandler+0x1c> @ imm = #-0x2
 80613bc: e7fe         	b	0x80613bc <DMAMUX1_IRQHandler+0x1c> @ imm = #-0x4

080613be <DMAMUX1_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(DMAMUX1_IRQHandler_S)
 80613be: f643 5140    	movw	r1, #0x3d40
 80613c2: f2c2 0100    	movt	r1, #0x2000
 80613c6: 6808         	ldr	r0, [r1]
 80613c8: f642 5240    	movw	r2, #0x2d40
 80613cc: f2c2 0200    	movt	r2, #0x2000
 80613d0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80613d4: 3001         	adds	r0, #0x1
 80613d6: 6008         	str	r0, [r1]
 80613d8: e7ff         	b	0x80613da <DMAMUX1_IRQHandler_S+0x1c> @ imm = #-0x2
 80613da: e7fe         	b	0x80613da <DMAMUX1_IRQHandler_S+0x1c> @ imm = #-0x4

080613dc <DMA1_Channel1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel1_IRQHandler)
 80613dc: f643 5140    	movw	r1, #0x3d40
 80613e0: f2c2 0100    	movt	r1, #0x2000
 80613e4: 6808         	ldr	r0, [r1]
 80613e6: f642 5240    	movw	r2, #0x2d40
 80613ea: f2c2 0200    	movt	r2, #0x2000
 80613ee: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80613f2: 3001         	adds	r0, #0x1
 80613f4: 6008         	str	r0, [r1]
 80613f6: e7ff         	b	0x80613f8 <DMA1_Channel1_IRQHandler+0x1c> @ imm = #-0x2
 80613f8: e7fe         	b	0x80613f8 <DMA1_Channel1_IRQHandler+0x1c> @ imm = #-0x4

080613fa <DMA1_Channel2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel2_IRQHandler)
 80613fa: f643 5140    	movw	r1, #0x3d40
 80613fe: f2c2 0100    	movt	r1, #0x2000
 8061402: 6808         	ldr	r0, [r1]
 8061404: f642 5240    	movw	r2, #0x2d40
 8061408: f2c2 0200    	movt	r2, #0x2000
 806140c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061410: 3001         	adds	r0, #0x1
 8061412: 6008         	str	r0, [r1]
 8061414: e7ff         	b	0x8061416 <DMA1_Channel2_IRQHandler+0x1c> @ imm = #-0x2
 8061416: e7fe         	b	0x8061416 <DMA1_Channel2_IRQHandler+0x1c> @ imm = #-0x4

08061418 <DMA1_Channel3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel3_IRQHandler)
 8061418: f643 5140    	movw	r1, #0x3d40
 806141c: f2c2 0100    	movt	r1, #0x2000
 8061420: 6808         	ldr	r0, [r1]
 8061422: f642 5240    	movw	r2, #0x2d40
 8061426: f2c2 0200    	movt	r2, #0x2000
 806142a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806142e: 3001         	adds	r0, #0x1
 8061430: 6008         	str	r0, [r1]
 8061432: e7ff         	b	0x8061434 <DMA1_Channel3_IRQHandler+0x1c> @ imm = #-0x2
 8061434: e7fe         	b	0x8061434 <DMA1_Channel3_IRQHandler+0x1c> @ imm = #-0x4

08061436 <DMA1_Channel4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel4_IRQHandler)
 8061436: f643 5140    	movw	r1, #0x3d40
 806143a: f2c2 0100    	movt	r1, #0x2000
 806143e: 6808         	ldr	r0, [r1]
 8061440: f642 5240    	movw	r2, #0x2d40
 8061444: f2c2 0200    	movt	r2, #0x2000
 8061448: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806144c: 3001         	adds	r0, #0x1
 806144e: 6008         	str	r0, [r1]
 8061450: e7ff         	b	0x8061452 <DMA1_Channel4_IRQHandler+0x1c> @ imm = #-0x2
 8061452: e7fe         	b	0x8061452 <DMA1_Channel4_IRQHandler+0x1c> @ imm = #-0x4

08061454 <DMA1_Channel5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel5_IRQHandler)
 8061454: f643 5140    	movw	r1, #0x3d40
 8061458: f2c2 0100    	movt	r1, #0x2000
 806145c: 6808         	ldr	r0, [r1]
 806145e: f642 5240    	movw	r2, #0x2d40
 8061462: f2c2 0200    	movt	r2, #0x2000
 8061466: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806146a: 3001         	adds	r0, #0x1
 806146c: 6008         	str	r0, [r1]
 806146e: e7ff         	b	0x8061470 <DMA1_Channel5_IRQHandler+0x1c> @ imm = #-0x2
 8061470: e7fe         	b	0x8061470 <DMA1_Channel5_IRQHandler+0x1c> @ imm = #-0x4

08061472 <DMA1_Channel6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel6_IRQHandler)
 8061472: f643 5140    	movw	r1, #0x3d40
 8061476: f2c2 0100    	movt	r1, #0x2000
 806147a: 6808         	ldr	r0, [r1]
 806147c: f642 5240    	movw	r2, #0x2d40
 8061480: f2c2 0200    	movt	r2, #0x2000
 8061484: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061488: 3001         	adds	r0, #0x1
 806148a: 6008         	str	r0, [r1]
 806148c: e7ff         	b	0x806148e <DMA1_Channel6_IRQHandler+0x1c> @ imm = #-0x2
 806148e: e7fe         	b	0x806148e <DMA1_Channel6_IRQHandler+0x1c> @ imm = #-0x4

08061490 <DMA1_Channel7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel7_IRQHandler)
 8061490: f643 5140    	movw	r1, #0x3d40
 8061494: f2c2 0100    	movt	r1, #0x2000
 8061498: 6808         	ldr	r0, [r1]
 806149a: f642 5240    	movw	r2, #0x2d40
 806149e: f2c2 0200    	movt	r2, #0x2000
 80614a2: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80614a6: 3001         	adds	r0, #0x1
 80614a8: 6008         	str	r0, [r1]
 80614aa: e7ff         	b	0x80614ac <DMA1_Channel7_IRQHandler+0x1c> @ imm = #-0x2
 80614ac: e7fe         	b	0x80614ac <DMA1_Channel7_IRQHandler+0x1c> @ imm = #-0x4

080614ae <DMA1_Channel8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel8_IRQHandler)
 80614ae: f643 5140    	movw	r1, #0x3d40
 80614b2: f2c2 0100    	movt	r1, #0x2000
 80614b6: 6808         	ldr	r0, [r1]
 80614b8: f642 5240    	movw	r2, #0x2d40
 80614bc: f2c2 0200    	movt	r2, #0x2000
 80614c0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80614c4: 3001         	adds	r0, #0x1
 80614c6: 6008         	str	r0, [r1]
 80614c8: e7ff         	b	0x80614ca <DMA1_Channel8_IRQHandler+0x1c> @ imm = #-0x2
 80614ca: e7fe         	b	0x80614ca <DMA1_Channel8_IRQHandler+0x1c> @ imm = #-0x4

080614cc <ADC1_2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(ADC1_2_IRQHandler)
 80614cc: f643 5140    	movw	r1, #0x3d40
 80614d0: f2c2 0100    	movt	r1, #0x2000
 80614d4: 6808         	ldr	r0, [r1]
 80614d6: f642 5240    	movw	r2, #0x2d40
 80614da: f2c2 0200    	movt	r2, #0x2000
 80614de: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80614e2: 3001         	adds	r0, #0x1
 80614e4: 6008         	str	r0, [r1]
 80614e6: e7ff         	b	0x80614e8 <ADC1_2_IRQHandler+0x1c> @ imm = #-0x2
 80614e8: e7fe         	b	0x80614e8 <ADC1_2_IRQHandler+0x1c> @ imm = #-0x4

080614ea <DAC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DAC_IRQHandler)
 80614ea: f643 5140    	movw	r1, #0x3d40
 80614ee: f2c2 0100    	movt	r1, #0x2000
 80614f2: 6808         	ldr	r0, [r1]
 80614f4: f642 5240    	movw	r2, #0x2d40
 80614f8: f2c2 0200    	movt	r2, #0x2000
 80614fc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061500: 3001         	adds	r0, #0x1
 8061502: 6008         	str	r0, [r1]
 8061504: e7ff         	b	0x8061506 <DAC_IRQHandler+0x1c> @ imm = #-0x2
 8061506: e7fe         	b	0x8061506 <DAC_IRQHandler+0x1c> @ imm = #-0x4

08061508 <FDCAN1_IT0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FDCAN1_IT0_IRQHandler)
 8061508: f643 5140    	movw	r1, #0x3d40
 806150c: f2c2 0100    	movt	r1, #0x2000
 8061510: 6808         	ldr	r0, [r1]
 8061512: f642 5240    	movw	r2, #0x2d40
 8061516: f2c2 0200    	movt	r2, #0x2000
 806151a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806151e: 3001         	adds	r0, #0x1
 8061520: 6008         	str	r0, [r1]
 8061522: e7ff         	b	0x8061524 <FDCAN1_IT0_IRQHandler+0x1c> @ imm = #-0x2
 8061524: e7fe         	b	0x8061524 <FDCAN1_IT0_IRQHandler+0x1c> @ imm = #-0x4

08061526 <FDCAN1_IT1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FDCAN1_IT1_IRQHandler)
 8061526: f643 5140    	movw	r1, #0x3d40
 806152a: f2c2 0100    	movt	r1, #0x2000
 806152e: 6808         	ldr	r0, [r1]
 8061530: f642 5240    	movw	r2, #0x2d40
 8061534: f2c2 0200    	movt	r2, #0x2000
 8061538: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806153c: 3001         	adds	r0, #0x1
 806153e: 6008         	str	r0, [r1]
 8061540: e7ff         	b	0x8061542 <FDCAN1_IT1_IRQHandler+0x1c> @ imm = #-0x2
 8061542: e7fe         	b	0x8061542 <FDCAN1_IT1_IRQHandler+0x1c> @ imm = #-0x4

08061544 <TIM1_BRK_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_BRK_IRQHandler)
 8061544: f643 5140    	movw	r1, #0x3d40
 8061548: f2c2 0100    	movt	r1, #0x2000
 806154c: 6808         	ldr	r0, [r1]
 806154e: f642 5240    	movw	r2, #0x2d40
 8061552: f2c2 0200    	movt	r2, #0x2000
 8061556: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806155a: 3001         	adds	r0, #0x1
 806155c: 6008         	str	r0, [r1]
 806155e: e7ff         	b	0x8061560 <TIM1_BRK_IRQHandler+0x1c> @ imm = #-0x2
 8061560: e7fe         	b	0x8061560 <TIM1_BRK_IRQHandler+0x1c> @ imm = #-0x4

08061562 <TIM1_UP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_UP_IRQHandler)
 8061562: f643 5140    	movw	r1, #0x3d40
 8061566: f2c2 0100    	movt	r1, #0x2000
 806156a: 6808         	ldr	r0, [r1]
 806156c: f642 5240    	movw	r2, #0x2d40
 8061570: f2c2 0200    	movt	r2, #0x2000
 8061574: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061578: 3001         	adds	r0, #0x1
 806157a: 6008         	str	r0, [r1]
 806157c: e7ff         	b	0x806157e <TIM1_UP_IRQHandler+0x1c> @ imm = #-0x2
 806157e: e7fe         	b	0x806157e <TIM1_UP_IRQHandler+0x1c> @ imm = #-0x4

08061580 <TIM1_TRG_COM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_TRG_COM_IRQHandler)
 8061580: f643 5140    	movw	r1, #0x3d40
 8061584: f2c2 0100    	movt	r1, #0x2000
 8061588: 6808         	ldr	r0, [r1]
 806158a: f642 5240    	movw	r2, #0x2d40
 806158e: f2c2 0200    	movt	r2, #0x2000
 8061592: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061596: 3001         	adds	r0, #0x1
 8061598: 6008         	str	r0, [r1]
 806159a: e7ff         	b	0x806159c <TIM1_TRG_COM_IRQHandler+0x1c> @ imm = #-0x2
 806159c: e7fe         	b	0x806159c <TIM1_TRG_COM_IRQHandler+0x1c> @ imm = #-0x4

0806159e <TIM1_CC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_CC_IRQHandler)
 806159e: f643 5140    	movw	r1, #0x3d40
 80615a2: f2c2 0100    	movt	r1, #0x2000
 80615a6: 6808         	ldr	r0, [r1]
 80615a8: f642 5240    	movw	r2, #0x2d40
 80615ac: f2c2 0200    	movt	r2, #0x2000
 80615b0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80615b4: 3001         	adds	r0, #0x1
 80615b6: 6008         	str	r0, [r1]
 80615b8: e7ff         	b	0x80615ba <TIM1_CC_IRQHandler+0x1c> @ imm = #-0x2
 80615ba: e7fe         	b	0x80615ba <TIM1_CC_IRQHandler+0x1c> @ imm = #-0x4

080615bc <TIM2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM2_IRQHandler)
 80615bc: f643 5140    	movw	r1, #0x3d40
 80615c0: f2c2 0100    	movt	r1, #0x2000
 80615c4: 6808         	ldr	r0, [r1]
 80615c6: f642 5240    	movw	r2, #0x2d40
 80615ca: f2c2 0200    	movt	r2, #0x2000
 80615ce: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80615d2: 3001         	adds	r0, #0x1
 80615d4: 6008         	str	r0, [r1]
 80615d6: e7ff         	b	0x80615d8 <TIM2_IRQHandler+0x1c> @ imm = #-0x2
 80615d8: e7fe         	b	0x80615d8 <TIM2_IRQHandler+0x1c> @ imm = #-0x4

080615da <TIM3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM3_IRQHandler)
 80615da: f643 5140    	movw	r1, #0x3d40
 80615de: f2c2 0100    	movt	r1, #0x2000
 80615e2: 6808         	ldr	r0, [r1]
 80615e4: f642 5240    	movw	r2, #0x2d40
 80615e8: f2c2 0200    	movt	r2, #0x2000
 80615ec: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80615f0: 3001         	adds	r0, #0x1
 80615f2: 6008         	str	r0, [r1]
 80615f4: e7ff         	b	0x80615f6 <TIM3_IRQHandler+0x1c> @ imm = #-0x2
 80615f6: e7fe         	b	0x80615f6 <TIM3_IRQHandler+0x1c> @ imm = #-0x4

080615f8 <TIM4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM4_IRQHandler)
 80615f8: f643 5140    	movw	r1, #0x3d40
 80615fc: f2c2 0100    	movt	r1, #0x2000
 8061600: 6808         	ldr	r0, [r1]
 8061602: f642 5240    	movw	r2, #0x2d40
 8061606: f2c2 0200    	movt	r2, #0x2000
 806160a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806160e: 3001         	adds	r0, #0x1
 8061610: 6008         	str	r0, [r1]
 8061612: e7ff         	b	0x8061614 <TIM4_IRQHandler+0x1c> @ imm = #-0x2
 8061614: e7fe         	b	0x8061614 <TIM4_IRQHandler+0x1c> @ imm = #-0x4

08061616 <TIM5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM5_IRQHandler)
 8061616: f643 5140    	movw	r1, #0x3d40
 806161a: f2c2 0100    	movt	r1, #0x2000
 806161e: 6808         	ldr	r0, [r1]
 8061620: f642 5240    	movw	r2, #0x2d40
 8061624: f2c2 0200    	movt	r2, #0x2000
 8061628: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806162c: 3001         	adds	r0, #0x1
 806162e: 6008         	str	r0, [r1]
 8061630: e7ff         	b	0x8061632 <TIM5_IRQHandler+0x1c> @ imm = #-0x2
 8061632: e7fe         	b	0x8061632 <TIM5_IRQHandler+0x1c> @ imm = #-0x4

08061634 <TIM6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM6_IRQHandler)
 8061634: f643 5140    	movw	r1, #0x3d40
 8061638: f2c2 0100    	movt	r1, #0x2000
 806163c: 6808         	ldr	r0, [r1]
 806163e: f642 5240    	movw	r2, #0x2d40
 8061642: f2c2 0200    	movt	r2, #0x2000
 8061646: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806164a: 3001         	adds	r0, #0x1
 806164c: 6008         	str	r0, [r1]
 806164e: e7ff         	b	0x8061650 <TIM6_IRQHandler+0x1c> @ imm = #-0x2
 8061650: e7fe         	b	0x8061650 <TIM6_IRQHandler+0x1c> @ imm = #-0x4

08061652 <TIM7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM7_IRQHandler)
 8061652: f643 5140    	movw	r1, #0x3d40
 8061656: f2c2 0100    	movt	r1, #0x2000
 806165a: 6808         	ldr	r0, [r1]
 806165c: f642 5240    	movw	r2, #0x2d40
 8061660: f2c2 0200    	movt	r2, #0x2000
 8061664: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061668: 3001         	adds	r0, #0x1
 806166a: 6008         	str	r0, [r1]
 806166c: e7ff         	b	0x806166e <TIM7_IRQHandler+0x1c> @ imm = #-0x2
 806166e: e7fe         	b	0x806166e <TIM7_IRQHandler+0x1c> @ imm = #-0x4

08061670 <TIM8_BRK_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_BRK_IRQHandler)
 8061670: f643 5140    	movw	r1, #0x3d40
 8061674: f2c2 0100    	movt	r1, #0x2000
 8061678: 6808         	ldr	r0, [r1]
 806167a: f642 5240    	movw	r2, #0x2d40
 806167e: f2c2 0200    	movt	r2, #0x2000
 8061682: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061686: 3001         	adds	r0, #0x1
 8061688: 6008         	str	r0, [r1]
 806168a: e7ff         	b	0x806168c <TIM8_BRK_IRQHandler+0x1c> @ imm = #-0x2
 806168c: e7fe         	b	0x806168c <TIM8_BRK_IRQHandler+0x1c> @ imm = #-0x4

0806168e <TIM8_UP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_UP_IRQHandler)
 806168e: f643 5140    	movw	r1, #0x3d40
 8061692: f2c2 0100    	movt	r1, #0x2000
 8061696: 6808         	ldr	r0, [r1]
 8061698: f642 5240    	movw	r2, #0x2d40
 806169c: f2c2 0200    	movt	r2, #0x2000
 80616a0: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80616a4: 3001         	adds	r0, #0x1
 80616a6: 6008         	str	r0, [r1]
 80616a8: e7ff         	b	0x80616aa <TIM8_UP_IRQHandler+0x1c> @ imm = #-0x2
 80616aa: e7fe         	b	0x80616aa <TIM8_UP_IRQHandler+0x1c> @ imm = #-0x4

080616ac <TIM8_TRG_COM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_TRG_COM_IRQHandler)
 80616ac: f643 5140    	movw	r1, #0x3d40
 80616b0: f2c2 0100    	movt	r1, #0x2000
 80616b4: 6808         	ldr	r0, [r1]
 80616b6: f642 5240    	movw	r2, #0x2d40
 80616ba: f2c2 0200    	movt	r2, #0x2000
 80616be: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80616c2: 3001         	adds	r0, #0x1
 80616c4: 6008         	str	r0, [r1]
 80616c6: e7ff         	b	0x80616c8 <TIM8_TRG_COM_IRQHandler+0x1c> @ imm = #-0x2
 80616c8: e7fe         	b	0x80616c8 <TIM8_TRG_COM_IRQHandler+0x1c> @ imm = #-0x4

080616ca <TIM8_CC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_CC_IRQHandler)
 80616ca: f643 5140    	movw	r1, #0x3d40
 80616ce: f2c2 0100    	movt	r1, #0x2000
 80616d2: 6808         	ldr	r0, [r1]
 80616d4: f642 5240    	movw	r2, #0x2d40
 80616d8: f2c2 0200    	movt	r2, #0x2000
 80616dc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80616e0: 3001         	adds	r0, #0x1
 80616e2: 6008         	str	r0, [r1]
 80616e4: e7ff         	b	0x80616e6 <TIM8_CC_IRQHandler+0x1c> @ imm = #-0x2
 80616e6: e7fe         	b	0x80616e6 <TIM8_CC_IRQHandler+0x1c> @ imm = #-0x4

080616e8 <I2C1_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C1_EV_IRQHandler)
 80616e8: f643 5140    	movw	r1, #0x3d40
 80616ec: f2c2 0100    	movt	r1, #0x2000
 80616f0: 6808         	ldr	r0, [r1]
 80616f2: f642 5240    	movw	r2, #0x2d40
 80616f6: f2c2 0200    	movt	r2, #0x2000
 80616fa: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80616fe: 3001         	adds	r0, #0x1
 8061700: 6008         	str	r0, [r1]
 8061702: e7ff         	b	0x8061704 <I2C1_EV_IRQHandler+0x1c> @ imm = #-0x2
 8061704: e7fe         	b	0x8061704 <I2C1_EV_IRQHandler+0x1c> @ imm = #-0x4

08061706 <I2C1_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C1_ER_IRQHandler)
 8061706: f643 5140    	movw	r1, #0x3d40
 806170a: f2c2 0100    	movt	r1, #0x2000
 806170e: 6808         	ldr	r0, [r1]
 8061710: f642 5240    	movw	r2, #0x2d40
 8061714: f2c2 0200    	movt	r2, #0x2000
 8061718: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806171c: 3001         	adds	r0, #0x1
 806171e: 6008         	str	r0, [r1]
 8061720: e7ff         	b	0x8061722 <I2C1_ER_IRQHandler+0x1c> @ imm = #-0x2
 8061722: e7fe         	b	0x8061722 <I2C1_ER_IRQHandler+0x1c> @ imm = #-0x4

08061724 <I2C2_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C2_EV_IRQHandler)
 8061724: f643 5140    	movw	r1, #0x3d40
 8061728: f2c2 0100    	movt	r1, #0x2000
 806172c: 6808         	ldr	r0, [r1]
 806172e: f642 5240    	movw	r2, #0x2d40
 8061732: f2c2 0200    	movt	r2, #0x2000
 8061736: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806173a: 3001         	adds	r0, #0x1
 806173c: 6008         	str	r0, [r1]
 806173e: e7ff         	b	0x8061740 <I2C2_EV_IRQHandler+0x1c> @ imm = #-0x2
 8061740: e7fe         	b	0x8061740 <I2C2_EV_IRQHandler+0x1c> @ imm = #-0x4

08061742 <I2C2_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C2_ER_IRQHandler)
 8061742: f643 5140    	movw	r1, #0x3d40
 8061746: f2c2 0100    	movt	r1, #0x2000
 806174a: 6808         	ldr	r0, [r1]
 806174c: f642 5240    	movw	r2, #0x2d40
 8061750: f2c2 0200    	movt	r2, #0x2000
 8061754: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061758: 3001         	adds	r0, #0x1
 806175a: 6008         	str	r0, [r1]
 806175c: e7ff         	b	0x806175e <I2C2_ER_IRQHandler+0x1c> @ imm = #-0x2
 806175e: e7fe         	b	0x806175e <I2C2_ER_IRQHandler+0x1c> @ imm = #-0x4

08061760 <SPI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI1_IRQHandler)
 8061760: f643 5140    	movw	r1, #0x3d40
 8061764: f2c2 0100    	movt	r1, #0x2000
 8061768: 6808         	ldr	r0, [r1]
 806176a: f642 5240    	movw	r2, #0x2d40
 806176e: f2c2 0200    	movt	r2, #0x2000
 8061772: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061776: 3001         	adds	r0, #0x1
 8061778: 6008         	str	r0, [r1]
 806177a: e7ff         	b	0x806177c <SPI1_IRQHandler+0x1c> @ imm = #-0x2
 806177c: e7fe         	b	0x806177c <SPI1_IRQHandler+0x1c> @ imm = #-0x4

0806177e <SPI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI2_IRQHandler)
 806177e: f643 5140    	movw	r1, #0x3d40
 8061782: f2c2 0100    	movt	r1, #0x2000
 8061786: 6808         	ldr	r0, [r1]
 8061788: f642 5240    	movw	r2, #0x2d40
 806178c: f2c2 0200    	movt	r2, #0x2000
 8061790: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061794: 3001         	adds	r0, #0x1
 8061796: 6008         	str	r0, [r1]
 8061798: e7ff         	b	0x806179a <SPI2_IRQHandler+0x1c> @ imm = #-0x2
 806179a: e7fe         	b	0x806179a <SPI2_IRQHandler+0x1c> @ imm = #-0x4

0806179c <USART1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART1_IRQHandler)
 806179c: f643 5140    	movw	r1, #0x3d40
 80617a0: f2c2 0100    	movt	r1, #0x2000
 80617a4: 6808         	ldr	r0, [r1]
 80617a6: f642 5240    	movw	r2, #0x2d40
 80617aa: f2c2 0200    	movt	r2, #0x2000
 80617ae: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80617b2: 3001         	adds	r0, #0x1
 80617b4: 6008         	str	r0, [r1]
 80617b6: e7ff         	b	0x80617b8 <USART1_IRQHandler+0x1c> @ imm = #-0x2
 80617b8: e7fe         	b	0x80617b8 <USART1_IRQHandler+0x1c> @ imm = #-0x4

080617ba <USART2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART2_IRQHandler)
 80617ba: f643 5140    	movw	r1, #0x3d40
 80617be: f2c2 0100    	movt	r1, #0x2000
 80617c2: 6808         	ldr	r0, [r1]
 80617c4: f642 5240    	movw	r2, #0x2d40
 80617c8: f2c2 0200    	movt	r2, #0x2000
 80617cc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80617d0: 3001         	adds	r0, #0x1
 80617d2: 6008         	str	r0, [r1]
 80617d4: e7ff         	b	0x80617d6 <USART2_IRQHandler+0x1c> @ imm = #-0x2
 80617d6: e7fe         	b	0x80617d6 <USART2_IRQHandler+0x1c> @ imm = #-0x4

080617d8 <USART3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART3_IRQHandler)
 80617d8: f643 5140    	movw	r1, #0x3d40
 80617dc: f2c2 0100    	movt	r1, #0x2000
 80617e0: 6808         	ldr	r0, [r1]
 80617e2: f642 5240    	movw	r2, #0x2d40
 80617e6: f2c2 0200    	movt	r2, #0x2000
 80617ea: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80617ee: 3001         	adds	r0, #0x1
 80617f0: 6008         	str	r0, [r1]
 80617f2: e7ff         	b	0x80617f4 <USART3_IRQHandler+0x1c> @ imm = #-0x2
 80617f4: e7fe         	b	0x80617f4 <USART3_IRQHandler+0x1c> @ imm = #-0x4

080617f6 <UART4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UART4_IRQHandler)
 80617f6: f643 5140    	movw	r1, #0x3d40
 80617fa: f2c2 0100    	movt	r1, #0x2000
 80617fe: 6808         	ldr	r0, [r1]
 8061800: f642 5240    	movw	r2, #0x2d40
 8061804: f2c2 0200    	movt	r2, #0x2000
 8061808: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806180c: 3001         	adds	r0, #0x1
 806180e: 6008         	str	r0, [r1]
 8061810: e7ff         	b	0x8061812 <UART4_IRQHandler+0x1c> @ imm = #-0x2
 8061812: e7fe         	b	0x8061812 <UART4_IRQHandler+0x1c> @ imm = #-0x4

08061814 <UART5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UART5_IRQHandler)
 8061814: f643 5140    	movw	r1, #0x3d40
 8061818: f2c2 0100    	movt	r1, #0x2000
 806181c: 6808         	ldr	r0, [r1]
 806181e: f642 5240    	movw	r2, #0x2d40
 8061822: f2c2 0200    	movt	r2, #0x2000
 8061826: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806182a: 3001         	adds	r0, #0x1
 806182c: 6008         	str	r0, [r1]
 806182e: e7ff         	b	0x8061830 <UART5_IRQHandler+0x1c> @ imm = #-0x2
 8061830: e7fe         	b	0x8061830 <UART5_IRQHandler+0x1c> @ imm = #-0x4

08061832 <LPUART1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPUART1_IRQHandler)
 8061832: f643 5140    	movw	r1, #0x3d40
 8061836: f2c2 0100    	movt	r1, #0x2000
 806183a: 6808         	ldr	r0, [r1]
 806183c: f642 5240    	movw	r2, #0x2d40
 8061840: f2c2 0200    	movt	r2, #0x2000
 8061844: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061848: 3001         	adds	r0, #0x1
 806184a: 6008         	str	r0, [r1]
 806184c: e7ff         	b	0x806184e <LPUART1_IRQHandler+0x1c> @ imm = #-0x2
 806184e: e7fe         	b	0x806184e <LPUART1_IRQHandler+0x1c> @ imm = #-0x4

08061850 <LPTIM1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM1_IRQHandler)
 8061850: f643 5140    	movw	r1, #0x3d40
 8061854: f2c2 0100    	movt	r1, #0x2000
 8061858: 6808         	ldr	r0, [r1]
 806185a: f642 5240    	movw	r2, #0x2d40
 806185e: f2c2 0200    	movt	r2, #0x2000
 8061862: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061866: 3001         	adds	r0, #0x1
 8061868: 6008         	str	r0, [r1]
 806186a: e7ff         	b	0x806186c <LPTIM1_IRQHandler+0x1c> @ imm = #-0x2
 806186c: e7fe         	b	0x806186c <LPTIM1_IRQHandler+0x1c> @ imm = #-0x4

0806186e <LPTIM2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM2_IRQHandler)
 806186e: f643 5140    	movw	r1, #0x3d40
 8061872: f2c2 0100    	movt	r1, #0x2000
 8061876: 6808         	ldr	r0, [r1]
 8061878: f642 5240    	movw	r2, #0x2d40
 806187c: f2c2 0200    	movt	r2, #0x2000
 8061880: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061884: 3001         	adds	r0, #0x1
 8061886: 6008         	str	r0, [r1]
 8061888: e7ff         	b	0x806188a <LPTIM2_IRQHandler+0x1c> @ imm = #-0x2
 806188a: e7fe         	b	0x806188a <LPTIM2_IRQHandler+0x1c> @ imm = #-0x4

0806188c <TIM15_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM15_IRQHandler)
 806188c: f643 5140    	movw	r1, #0x3d40
 8061890: f2c2 0100    	movt	r1, #0x2000
 8061894: 6808         	ldr	r0, [r1]
 8061896: f642 5240    	movw	r2, #0x2d40
 806189a: f2c2 0200    	movt	r2, #0x2000
 806189e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80618a2: 3001         	adds	r0, #0x1
 80618a4: 6008         	str	r0, [r1]
 80618a6: e7ff         	b	0x80618a8 <TIM15_IRQHandler+0x1c> @ imm = #-0x2
 80618a8: e7fe         	b	0x80618a8 <TIM15_IRQHandler+0x1c> @ imm = #-0x4

080618aa <TIM16_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM16_IRQHandler)
 80618aa: f643 5140    	movw	r1, #0x3d40
 80618ae: f2c2 0100    	movt	r1, #0x2000
 80618b2: 6808         	ldr	r0, [r1]
 80618b4: f642 5240    	movw	r2, #0x2d40
 80618b8: f2c2 0200    	movt	r2, #0x2000
 80618bc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80618c0: 3001         	adds	r0, #0x1
 80618c2: 6008         	str	r0, [r1]
 80618c4: e7ff         	b	0x80618c6 <TIM16_IRQHandler+0x1c> @ imm = #-0x2
 80618c6: e7fe         	b	0x80618c6 <TIM16_IRQHandler+0x1c> @ imm = #-0x4

080618c8 <TIM17_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM17_IRQHandler)
 80618c8: f643 5140    	movw	r1, #0x3d40
 80618cc: f2c2 0100    	movt	r1, #0x2000
 80618d0: 6808         	ldr	r0, [r1]
 80618d2: f642 5240    	movw	r2, #0x2d40
 80618d6: f2c2 0200    	movt	r2, #0x2000
 80618da: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80618de: 3001         	adds	r0, #0x1
 80618e0: 6008         	str	r0, [r1]
 80618e2: e7ff         	b	0x80618e4 <TIM17_IRQHandler+0x1c> @ imm = #-0x2
 80618e4: e7fe         	b	0x80618e4 <TIM17_IRQHandler+0x1c> @ imm = #-0x4

080618e6 <COMP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(COMP_IRQHandler)
 80618e6: f643 5140    	movw	r1, #0x3d40
 80618ea: f2c2 0100    	movt	r1, #0x2000
 80618ee: 6808         	ldr	r0, [r1]
 80618f0: f642 5240    	movw	r2, #0x2d40
 80618f4: f2c2 0200    	movt	r2, #0x2000
 80618f8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80618fc: 3001         	adds	r0, #0x1
 80618fe: 6008         	str	r0, [r1]
 8061900: e7ff         	b	0x8061902 <COMP_IRQHandler+0x1c> @ imm = #-0x2
 8061902: e7fe         	b	0x8061902 <COMP_IRQHandler+0x1c> @ imm = #-0x4

08061904 <USB_FS_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USB_FS_IRQHandler)
 8061904: f643 5140    	movw	r1, #0x3d40
 8061908: f2c2 0100    	movt	r1, #0x2000
 806190c: 6808         	ldr	r0, [r1]
 806190e: f642 5240    	movw	r2, #0x2d40
 8061912: f2c2 0200    	movt	r2, #0x2000
 8061916: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806191a: 3001         	adds	r0, #0x1
 806191c: 6008         	str	r0, [r1]
 806191e: e7ff         	b	0x8061920 <USB_FS_IRQHandler+0x1c> @ imm = #-0x2
 8061920: e7fe         	b	0x8061920 <USB_FS_IRQHandler+0x1c> @ imm = #-0x4

08061922 <CRS_IRQHandler>:
; DEFAULT_IRQ_HANDLER(CRS_IRQHandler)
 8061922: f643 5140    	movw	r1, #0x3d40
 8061926: f2c2 0100    	movt	r1, #0x2000
 806192a: 6808         	ldr	r0, [r1]
 806192c: f642 5240    	movw	r2, #0x2d40
 8061930: f2c2 0200    	movt	r2, #0x2000
 8061934: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061938: 3001         	adds	r0, #0x1
 806193a: 6008         	str	r0, [r1]
 806193c: e7ff         	b	0x806193e <CRS_IRQHandler+0x1c> @ imm = #-0x2
 806193e: e7fe         	b	0x806193e <CRS_IRQHandler+0x1c> @ imm = #-0x4

08061940 <FMC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FMC_IRQHandler)
 8061940: f643 5140    	movw	r1, #0x3d40
 8061944: f2c2 0100    	movt	r1, #0x2000
 8061948: 6808         	ldr	r0, [r1]
 806194a: f642 5240    	movw	r2, #0x2d40
 806194e: f2c2 0200    	movt	r2, #0x2000
 8061952: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061956: 3001         	adds	r0, #0x1
 8061958: 6008         	str	r0, [r1]
 806195a: e7ff         	b	0x806195c <FMC_IRQHandler+0x1c> @ imm = #-0x2
 806195c: e7fe         	b	0x806195c <FMC_IRQHandler+0x1c> @ imm = #-0x4

0806195e <OCTOSPI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(OCTOSPI1_IRQHandler)
 806195e: f643 5140    	movw	r1, #0x3d40
 8061962: f2c2 0100    	movt	r1, #0x2000
 8061966: 6808         	ldr	r0, [r1]
 8061968: f642 5240    	movw	r2, #0x2d40
 806196c: f2c2 0200    	movt	r2, #0x2000
 8061970: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061974: 3001         	adds	r0, #0x1
 8061976: 6008         	str	r0, [r1]
 8061978: e7ff         	b	0x806197a <OCTOSPI1_IRQHandler+0x1c> @ imm = #-0x2
 806197a: e7fe         	b	0x806197a <OCTOSPI1_IRQHandler+0x1c> @ imm = #-0x4

0806197c <SDMMC1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SDMMC1_IRQHandler)
 806197c: f643 5140    	movw	r1, #0x3d40
 8061980: f2c2 0100    	movt	r1, #0x2000
 8061984: 6808         	ldr	r0, [r1]
 8061986: f642 5240    	movw	r2, #0x2d40
 806198a: f2c2 0200    	movt	r2, #0x2000
 806198e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061992: 3001         	adds	r0, #0x1
 8061994: 6008         	str	r0, [r1]
 8061996: e7ff         	b	0x8061998 <SDMMC1_IRQHandler+0x1c> @ imm = #-0x2
 8061998: e7fe         	b	0x8061998 <SDMMC1_IRQHandler+0x1c> @ imm = #-0x4

0806199a <DMA2_Channel1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel1_IRQHandler)
 806199a: f643 5140    	movw	r1, #0x3d40
 806199e: f2c2 0100    	movt	r1, #0x2000
 80619a2: 6808         	ldr	r0, [r1]
 80619a4: f642 5240    	movw	r2, #0x2d40
 80619a8: f2c2 0200    	movt	r2, #0x2000
 80619ac: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80619b0: 3001         	adds	r0, #0x1
 80619b2: 6008         	str	r0, [r1]
 80619b4: e7ff         	b	0x80619b6 <DMA2_Channel1_IRQHandler+0x1c> @ imm = #-0x2
 80619b6: e7fe         	b	0x80619b6 <DMA2_Channel1_IRQHandler+0x1c> @ imm = #-0x4

080619b8 <DMA2_Channel2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel2_IRQHandler)
 80619b8: f643 5140    	movw	r1, #0x3d40
 80619bc: f2c2 0100    	movt	r1, #0x2000
 80619c0: 6808         	ldr	r0, [r1]
 80619c2: f642 5240    	movw	r2, #0x2d40
 80619c6: f2c2 0200    	movt	r2, #0x2000
 80619ca: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80619ce: 3001         	adds	r0, #0x1
 80619d0: 6008         	str	r0, [r1]
 80619d2: e7ff         	b	0x80619d4 <DMA2_Channel2_IRQHandler+0x1c> @ imm = #-0x2
 80619d4: e7fe         	b	0x80619d4 <DMA2_Channel2_IRQHandler+0x1c> @ imm = #-0x4

080619d6 <DMA2_Channel3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel3_IRQHandler)
 80619d6: f643 5140    	movw	r1, #0x3d40
 80619da: f2c2 0100    	movt	r1, #0x2000
 80619de: 6808         	ldr	r0, [r1]
 80619e0: f642 5240    	movw	r2, #0x2d40
 80619e4: f2c2 0200    	movt	r2, #0x2000
 80619e8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80619ec: 3001         	adds	r0, #0x1
 80619ee: 6008         	str	r0, [r1]
 80619f0: e7ff         	b	0x80619f2 <DMA2_Channel3_IRQHandler+0x1c> @ imm = #-0x2
 80619f2: e7fe         	b	0x80619f2 <DMA2_Channel3_IRQHandler+0x1c> @ imm = #-0x4

080619f4 <DMA2_Channel4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel4_IRQHandler)
 80619f4: f643 5140    	movw	r1, #0x3d40
 80619f8: f2c2 0100    	movt	r1, #0x2000
 80619fc: 6808         	ldr	r0, [r1]
 80619fe: f642 5240    	movw	r2, #0x2d40
 8061a02: f2c2 0200    	movt	r2, #0x2000
 8061a06: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061a0a: 3001         	adds	r0, #0x1
 8061a0c: 6008         	str	r0, [r1]
 8061a0e: e7ff         	b	0x8061a10 <DMA2_Channel4_IRQHandler+0x1c> @ imm = #-0x2
 8061a10: e7fe         	b	0x8061a10 <DMA2_Channel4_IRQHandler+0x1c> @ imm = #-0x4

08061a12 <DMA2_Channel5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel5_IRQHandler)
 8061a12: f643 5140    	movw	r1, #0x3d40
 8061a16: f2c2 0100    	movt	r1, #0x2000
 8061a1a: 6808         	ldr	r0, [r1]
 8061a1c: f642 5240    	movw	r2, #0x2d40
 8061a20: f2c2 0200    	movt	r2, #0x2000
 8061a24: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061a28: 3001         	adds	r0, #0x1
 8061a2a: 6008         	str	r0, [r1]
 8061a2c: e7ff         	b	0x8061a2e <DMA2_Channel5_IRQHandler+0x1c> @ imm = #-0x2
 8061a2e: e7fe         	b	0x8061a2e <DMA2_Channel5_IRQHandler+0x1c> @ imm = #-0x4

08061a30 <DMA2_Channel6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel6_IRQHandler)
 8061a30: f643 5140    	movw	r1, #0x3d40
 8061a34: f2c2 0100    	movt	r1, #0x2000
 8061a38: 6808         	ldr	r0, [r1]
 8061a3a: f642 5240    	movw	r2, #0x2d40
 8061a3e: f2c2 0200    	movt	r2, #0x2000
 8061a42: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061a46: 3001         	adds	r0, #0x1
 8061a48: 6008         	str	r0, [r1]
 8061a4a: e7ff         	b	0x8061a4c <DMA2_Channel6_IRQHandler+0x1c> @ imm = #-0x2
 8061a4c: e7fe         	b	0x8061a4c <DMA2_Channel6_IRQHandler+0x1c> @ imm = #-0x4

08061a4e <DMA2_Channel7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel7_IRQHandler)
 8061a4e: f643 5140    	movw	r1, #0x3d40
 8061a52: f2c2 0100    	movt	r1, #0x2000
 8061a56: 6808         	ldr	r0, [r1]
 8061a58: f642 5240    	movw	r2, #0x2d40
 8061a5c: f2c2 0200    	movt	r2, #0x2000
 8061a60: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061a64: 3001         	adds	r0, #0x1
 8061a66: 6008         	str	r0, [r1]
 8061a68: e7ff         	b	0x8061a6a <DMA2_Channel7_IRQHandler+0x1c> @ imm = #-0x2
 8061a6a: e7fe         	b	0x8061a6a <DMA2_Channel7_IRQHandler+0x1c> @ imm = #-0x4

08061a6c <DMA2_Channel8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel8_IRQHandler)
 8061a6c: f643 5140    	movw	r1, #0x3d40
 8061a70: f2c2 0100    	movt	r1, #0x2000
 8061a74: 6808         	ldr	r0, [r1]
 8061a76: f642 5240    	movw	r2, #0x2d40
 8061a7a: f2c2 0200    	movt	r2, #0x2000
 8061a7e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061a82: 3001         	adds	r0, #0x1
 8061a84: 6008         	str	r0, [r1]
 8061a86: e7ff         	b	0x8061a88 <DMA2_Channel8_IRQHandler+0x1c> @ imm = #-0x2
 8061a88: e7fe         	b	0x8061a88 <DMA2_Channel8_IRQHandler+0x1c> @ imm = #-0x4

08061a8a <I2C3_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C3_EV_IRQHandler)
 8061a8a: f643 5140    	movw	r1, #0x3d40
 8061a8e: f2c2 0100    	movt	r1, #0x2000
 8061a92: 6808         	ldr	r0, [r1]
 8061a94: f642 5240    	movw	r2, #0x2d40
 8061a98: f2c2 0200    	movt	r2, #0x2000
 8061a9c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061aa0: 3001         	adds	r0, #0x1
 8061aa2: 6008         	str	r0, [r1]
 8061aa4: e7ff         	b	0x8061aa6 <I2C3_EV_IRQHandler+0x1c> @ imm = #-0x2
 8061aa6: e7fe         	b	0x8061aa6 <I2C3_EV_IRQHandler+0x1c> @ imm = #-0x4

08061aa8 <I2C3_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C3_ER_IRQHandler)
 8061aa8: f643 5140    	movw	r1, #0x3d40
 8061aac: f2c2 0100    	movt	r1, #0x2000
 8061ab0: 6808         	ldr	r0, [r1]
 8061ab2: f642 5240    	movw	r2, #0x2d40
 8061ab6: f2c2 0200    	movt	r2, #0x2000
 8061aba: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061abe: 3001         	adds	r0, #0x1
 8061ac0: 6008         	str	r0, [r1]
 8061ac2: e7ff         	b	0x8061ac4 <I2C3_ER_IRQHandler+0x1c> @ imm = #-0x2
 8061ac4: e7fe         	b	0x8061ac4 <I2C3_ER_IRQHandler+0x1c> @ imm = #-0x4

08061ac6 <SAI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SAI1_IRQHandler)
 8061ac6: f643 5140    	movw	r1, #0x3d40
 8061aca: f2c2 0100    	movt	r1, #0x2000
 8061ace: 6808         	ldr	r0, [r1]
 8061ad0: f642 5240    	movw	r2, #0x2d40
 8061ad4: f2c2 0200    	movt	r2, #0x2000
 8061ad8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061adc: 3001         	adds	r0, #0x1
 8061ade: 6008         	str	r0, [r1]
 8061ae0: e7ff         	b	0x8061ae2 <SAI1_IRQHandler+0x1c> @ imm = #-0x2
 8061ae2: e7fe         	b	0x8061ae2 <SAI1_IRQHandler+0x1c> @ imm = #-0x4

08061ae4 <SAI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SAI2_IRQHandler)
 8061ae4: f643 5140    	movw	r1, #0x3d40
 8061ae8: f2c2 0100    	movt	r1, #0x2000
 8061aec: 6808         	ldr	r0, [r1]
 8061aee: f642 5240    	movw	r2, #0x2d40
 8061af2: f2c2 0200    	movt	r2, #0x2000
 8061af6: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061afa: 3001         	adds	r0, #0x1
 8061afc: 6008         	str	r0, [r1]
 8061afe: e7ff         	b	0x8061b00 <SAI2_IRQHandler+0x1c> @ imm = #-0x2
 8061b00: e7fe         	b	0x8061b00 <SAI2_IRQHandler+0x1c> @ imm = #-0x4

08061b02 <TSC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TSC_IRQHandler)
 8061b02: f643 5140    	movw	r1, #0x3d40
 8061b06: f2c2 0100    	movt	r1, #0x2000
 8061b0a: 6808         	ldr	r0, [r1]
 8061b0c: f642 5240    	movw	r2, #0x2d40
 8061b10: f2c2 0200    	movt	r2, #0x2000
 8061b14: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061b18: 3001         	adds	r0, #0x1
 8061b1a: 6008         	str	r0, [r1]
 8061b1c: e7ff         	b	0x8061b1e <TSC_IRQHandler+0x1c> @ imm = #-0x2
 8061b1e: e7fe         	b	0x8061b1e <TSC_IRQHandler+0x1c> @ imm = #-0x4

08061b20 <AES_IRQHandler>:
; DEFAULT_IRQ_HANDLER(AES_IRQHandler)
 8061b20: f643 5140    	movw	r1, #0x3d40
 8061b24: f2c2 0100    	movt	r1, #0x2000
 8061b28: 6808         	ldr	r0, [r1]
 8061b2a: f642 5240    	movw	r2, #0x2d40
 8061b2e: f2c2 0200    	movt	r2, #0x2000
 8061b32: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061b36: 3001         	adds	r0, #0x1
 8061b38: 6008         	str	r0, [r1]
 8061b3a: e7ff         	b	0x8061b3c <AES_IRQHandler+0x1c> @ imm = #-0x2
 8061b3c: e7fe         	b	0x8061b3c <AES_IRQHandler+0x1c> @ imm = #-0x4

08061b3e <RNG_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RNG_IRQHandler)
 8061b3e: f643 5140    	movw	r1, #0x3d40
 8061b42: f2c2 0100    	movt	r1, #0x2000
 8061b46: 6808         	ldr	r0, [r1]
 8061b48: f642 5240    	movw	r2, #0x2d40
 8061b4c: f2c2 0200    	movt	r2, #0x2000
 8061b50: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061b54: 3001         	adds	r0, #0x1
 8061b56: 6008         	str	r0, [r1]
 8061b58: e7ff         	b	0x8061b5a <RNG_IRQHandler+0x1c> @ imm = #-0x2
 8061b5a: e7fe         	b	0x8061b5a <RNG_IRQHandler+0x1c> @ imm = #-0x4

08061b5c <FPU_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FPU_IRQHandler)
 8061b5c: f643 5140    	movw	r1, #0x3d40
 8061b60: f2c2 0100    	movt	r1, #0x2000
 8061b64: 6808         	ldr	r0, [r1]
 8061b66: f642 5240    	movw	r2, #0x2d40
 8061b6a: f2c2 0200    	movt	r2, #0x2000
 8061b6e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061b72: 3001         	adds	r0, #0x1
 8061b74: 6008         	str	r0, [r1]
 8061b76: e7ff         	b	0x8061b78 <FPU_IRQHandler+0x1c> @ imm = #-0x2
 8061b78: e7fe         	b	0x8061b78 <FPU_IRQHandler+0x1c> @ imm = #-0x4

08061b7a <HASH_IRQHandler>:
; DEFAULT_IRQ_HANDLER(HASH_IRQHandler)
 8061b7a: f643 5140    	movw	r1, #0x3d40
 8061b7e: f2c2 0100    	movt	r1, #0x2000
 8061b82: 6808         	ldr	r0, [r1]
 8061b84: f642 5240    	movw	r2, #0x2d40
 8061b88: f2c2 0200    	movt	r2, #0x2000
 8061b8c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061b90: 3001         	adds	r0, #0x1
 8061b92: 6008         	str	r0, [r1]
 8061b94: e7ff         	b	0x8061b96 <HASH_IRQHandler+0x1c> @ imm = #-0x2
 8061b96: e7fe         	b	0x8061b96 <HASH_IRQHandler+0x1c> @ imm = #-0x4

08061b98 <PKA_IRQHandler>:
; DEFAULT_IRQ_HANDLER(PKA_IRQHandler)
 8061b98: f643 5140    	movw	r1, #0x3d40
 8061b9c: f2c2 0100    	movt	r1, #0x2000
 8061ba0: 6808         	ldr	r0, [r1]
 8061ba2: f642 5240    	movw	r2, #0x2d40
 8061ba6: f2c2 0200    	movt	r2, #0x2000
 8061baa: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061bae: 3001         	adds	r0, #0x1
 8061bb0: 6008         	str	r0, [r1]
 8061bb2: e7ff         	b	0x8061bb4 <PKA_IRQHandler+0x1c> @ imm = #-0x2
 8061bb4: e7fe         	b	0x8061bb4 <PKA_IRQHandler+0x1c> @ imm = #-0x4

08061bb6 <LPTIM3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM3_IRQHandler)
 8061bb6: f643 5140    	movw	r1, #0x3d40
 8061bba: f2c2 0100    	movt	r1, #0x2000
 8061bbe: 6808         	ldr	r0, [r1]
 8061bc0: f642 5240    	movw	r2, #0x2d40
 8061bc4: f2c2 0200    	movt	r2, #0x2000
 8061bc8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061bcc: 3001         	adds	r0, #0x1
 8061bce: 6008         	str	r0, [r1]
 8061bd0: e7ff         	b	0x8061bd2 <LPTIM3_IRQHandler+0x1c> @ imm = #-0x2
 8061bd2: e7fe         	b	0x8061bd2 <LPTIM3_IRQHandler+0x1c> @ imm = #-0x4

08061bd4 <SPI3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI3_IRQHandler)
 8061bd4: f643 5140    	movw	r1, #0x3d40
 8061bd8: f2c2 0100    	movt	r1, #0x2000
 8061bdc: 6808         	ldr	r0, [r1]
 8061bde: f642 5240    	movw	r2, #0x2d40
 8061be2: f2c2 0200    	movt	r2, #0x2000
 8061be6: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061bea: 3001         	adds	r0, #0x1
 8061bec: 6008         	str	r0, [r1]
 8061bee: e7ff         	b	0x8061bf0 <SPI3_IRQHandler+0x1c> @ imm = #-0x2
 8061bf0: e7fe         	b	0x8061bf0 <SPI3_IRQHandler+0x1c> @ imm = #-0x4

08061bf2 <I2C4_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C4_ER_IRQHandler)
 8061bf2: f643 5140    	movw	r1, #0x3d40
 8061bf6: f2c2 0100    	movt	r1, #0x2000
 8061bfa: 6808         	ldr	r0, [r1]
 8061bfc: f642 5240    	movw	r2, #0x2d40
 8061c00: f2c2 0200    	movt	r2, #0x2000
 8061c04: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061c08: 3001         	adds	r0, #0x1
 8061c0a: 6008         	str	r0, [r1]
 8061c0c: e7ff         	b	0x8061c0e <I2C4_ER_IRQHandler+0x1c> @ imm = #-0x2
 8061c0e: e7fe         	b	0x8061c0e <I2C4_ER_IRQHandler+0x1c> @ imm = #-0x4

08061c10 <I2C4_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C4_EV_IRQHandler)
 8061c10: f643 5140    	movw	r1, #0x3d40
 8061c14: f2c2 0100    	movt	r1, #0x2000
 8061c18: 6808         	ldr	r0, [r1]
 8061c1a: f642 5240    	movw	r2, #0x2d40
 8061c1e: f2c2 0200    	movt	r2, #0x2000
 8061c22: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061c26: 3001         	adds	r0, #0x1
 8061c28: 6008         	str	r0, [r1]
 8061c2a: e7ff         	b	0x8061c2c <I2C4_EV_IRQHandler+0x1c> @ imm = #-0x2
 8061c2c: e7fe         	b	0x8061c2c <I2C4_EV_IRQHandler+0x1c> @ imm = #-0x4

08061c2e <DFSDM1_FLT0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT0_IRQHandler)
 8061c2e: f643 5140    	movw	r1, #0x3d40
 8061c32: f2c2 0100    	movt	r1, #0x2000
 8061c36: 6808         	ldr	r0, [r1]
 8061c38: f642 5240    	movw	r2, #0x2d40
 8061c3c: f2c2 0200    	movt	r2, #0x2000
 8061c40: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061c44: 3001         	adds	r0, #0x1
 8061c46: 6008         	str	r0, [r1]
 8061c48: e7ff         	b	0x8061c4a <DFSDM1_FLT0_IRQHandler+0x1c> @ imm = #-0x2
 8061c4a: e7fe         	b	0x8061c4a <DFSDM1_FLT0_IRQHandler+0x1c> @ imm = #-0x4

08061c4c <DFSDM1_FLT1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT1_IRQHandler)
 8061c4c: f643 5140    	movw	r1, #0x3d40
 8061c50: f2c2 0100    	movt	r1, #0x2000
 8061c54: 6808         	ldr	r0, [r1]
 8061c56: f642 5240    	movw	r2, #0x2d40
 8061c5a: f2c2 0200    	movt	r2, #0x2000
 8061c5e: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061c62: 3001         	adds	r0, #0x1
 8061c64: 6008         	str	r0, [r1]
 8061c66: e7ff         	b	0x8061c68 <DFSDM1_FLT1_IRQHandler+0x1c> @ imm = #-0x2
 8061c68: e7fe         	b	0x8061c68 <DFSDM1_FLT1_IRQHandler+0x1c> @ imm = #-0x4

08061c6a <DFSDM1_FLT2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT2_IRQHandler)
 8061c6a: f643 5140    	movw	r1, #0x3d40
 8061c6e: f2c2 0100    	movt	r1, #0x2000
 8061c72: 6808         	ldr	r0, [r1]
 8061c74: f642 5240    	movw	r2, #0x2d40
 8061c78: f2c2 0200    	movt	r2, #0x2000
 8061c7c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061c80: 3001         	adds	r0, #0x1
 8061c82: 6008         	str	r0, [r1]
 8061c84: e7ff         	b	0x8061c86 <DFSDM1_FLT2_IRQHandler+0x1c> @ imm = #-0x2
 8061c86: e7fe         	b	0x8061c86 <DFSDM1_FLT2_IRQHandler+0x1c> @ imm = #-0x4

08061c88 <DFSDM1_FLT3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT3_IRQHandler)
 8061c88: f643 5140    	movw	r1, #0x3d40
 8061c8c: f2c2 0100    	movt	r1, #0x2000
 8061c90: 6808         	ldr	r0, [r1]
 8061c92: f642 5240    	movw	r2, #0x2d40
 8061c96: f2c2 0200    	movt	r2, #0x2000
 8061c9a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061c9e: 3001         	adds	r0, #0x1
 8061ca0: 6008         	str	r0, [r1]
 8061ca2: e7ff         	b	0x8061ca4 <DFSDM1_FLT3_IRQHandler+0x1c> @ imm = #-0x2
 8061ca4: e7fe         	b	0x8061ca4 <DFSDM1_FLT3_IRQHandler+0x1c> @ imm = #-0x4

08061ca6 <UCPD1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UCPD1_IRQHandler)
 8061ca6: f643 5140    	movw	r1, #0x3d40
 8061caa: f2c2 0100    	movt	r1, #0x2000
 8061cae: 6808         	ldr	r0, [r1]
 8061cb0: f642 5240    	movw	r2, #0x2d40
 8061cb4: f2c2 0200    	movt	r2, #0x2000
 8061cb8: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061cbc: 3001         	adds	r0, #0x1
 8061cbe: 6008         	str	r0, [r1]
 8061cc0: e7ff         	b	0x8061cc2 <UCPD1_IRQHandler+0x1c> @ imm = #-0x2
 8061cc2: e7fe         	b	0x8061cc2 <UCPD1_IRQHandler+0x1c> @ imm = #-0x4

08061cc4 <ICACHE_IRQHandler>:
; DEFAULT_IRQ_HANDLER(ICACHE_IRQHandler)
 8061cc4: f643 5140    	movw	r1, #0x3d40
 8061cc8: f2c2 0100    	movt	r1, #0x2000
 8061ccc: 6808         	ldr	r0, [r1]
 8061cce: f642 5240    	movw	r2, #0x2d40
 8061cd2: f2c2 0200    	movt	r2, #0x2000
 8061cd6: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061cda: 3001         	adds	r0, #0x1
 8061cdc: 6008         	str	r0, [r1]
 8061cde: e7ff         	b	0x8061ce0 <ICACHE_IRQHandler+0x1c> @ imm = #-0x2
 8061ce0: e7fe         	b	0x8061ce0 <ICACHE_IRQHandler+0x1c> @ imm = #-0x4

08061ce2 <OTFDEC1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(OTFDEC1_IRQHandler)
 8061ce2: f643 5140    	movw	r1, #0x3d40
 8061ce6: f2c2 0100    	movt	r1, #0x2000
 8061cea: 6808         	ldr	r0, [r1]
 8061cec: f642 5240    	movw	r2, #0x2d40
 8061cf0: f2c2 0200    	movt	r2, #0x2000
 8061cf4: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061cf8: 3001         	adds	r0, #0x1
 8061cfa: 6008         	str	r0, [r1]
 8061cfc: e7ff         	b	0x8061cfe <OTFDEC1_IRQHandler+0x1c> @ imm = #-0x2
 8061cfe: e7fe         	b	0x8061cfe <OTFDEC1_IRQHandler+0x1c> @ imm = #-0x4

08061d00 <Reset_Handler>:
; void Reset_Handler(void) {
 8061d00: b580         	push	{r7, lr}
 8061d02: 466f         	mov	r7, sp
 8061d04: b08c         	sub	sp, #0x30
;   __set_MSPLIM((uint32_t)(&__STACK_LIMIT));
 8061d06: f8cd e010    	str.w	lr, [sp, #0x10]
 8061d0a: f643 5140    	movw	r1, #0x3d40
 8061d0e: f2c2 0100    	movt	r1, #0x2000
 8061d12: 9103         	str	r1, [sp, #0xc]
 8061d14: 6808         	ldr	r0, [r1]
 8061d16: f642 5240    	movw	r2, #0x2d40
 8061d1a: f2c2 0200    	movt	r2, #0x2000
 8061d1e: 9202         	str	r2, [sp, #0x8]
 8061d20: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061d24: 3001         	adds	r0, #0x1
 8061d26: 6008         	str	r0, [r1]
 8061d28: 6808         	ldr	r0, [r1]
 8061d2a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061d2e: 3001         	adds	r0, #0x1
 8061d30: 6008         	str	r0, [r1]
 8061d32: f643 70c0    	movw	r0, #0x3fc0
 8061d36: f2c2 0000    	movt	r0, #0x2000
 8061d3a: 9001         	str	r0, [sp, #0x4]
 8061d3c: 9009         	str	r0, [sp, #0x24]
;   __ASM volatile("MSR msplim, %0" : : "r"(MainStackPtrLimit));
 8061d3e: 9809         	ldr	r0, [sp, #0x24]
 8061d40: f380 880a    	msr	msplim, r0
; }
 8061d44: 483e         	ldr	r0, [pc, #0xf8]         @ 0x8061e40 <Reset_Handler+0x140>
 8061d46: 4780         	blx	r0
 8061d48: 9a02         	ldr	r2, [sp, #0x8]
 8061d4a: 9903         	ldr	r1, [sp, #0xc]
 8061d4c: f8dd e010    	ldr.w	lr, [sp, #0x10]
 8061d50: 6808         	ldr	r0, [r1]
 8061d52: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061d56: 3001         	adds	r0, #0x1
 8061d58: 6008         	str	r0, [r1]
 8061d5a: f644 70c0    	movw	r0, #0x4fc0
 8061d5e: f2c2 0000    	movt	r0, #0x2000
 8061d62: 900a         	str	r0, [sp, #0x28]
;   __ASM volatile("MSR psp, %0" : : "r"(topOfProcStack) :);
 8061d64: 980a         	ldr	r0, [sp, #0x28]
 8061d66: f380 8809    	msr	psp, r0
; }
 8061d6a: 4836         	ldr	r0, [pc, #0xd8]         @ 0x8061e44 <Reset_Handler+0x144>
 8061d6c: 4780         	blx	r0
 8061d6e: 9801         	ldr	r0, [sp, #0x4]
 8061d70: 9b02         	ldr	r3, [sp, #0x8]
 8061d72: 9a03         	ldr	r2, [sp, #0xc]
 8061d74: f8dd e010    	ldr.w	lr, [sp, #0x10]
 8061d78: 6811         	ldr	r1, [r2]
 8061d7a: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8061d7e: 3101         	adds	r1, #0x1
 8061d80: 6011         	str	r1, [r2]
 8061d82: 900b         	str	r0, [sp, #0x2c]
;   __ASM volatile("MSR psplim, %0" : : "r"(ProcStackPtrLimit));
 8061d84: 980b         	ldr	r0, [sp, #0x2c]
 8061d86: f380 880b    	msr	psplim, r0
; }
 8061d8a: 482f         	ldr	r0, [pc, #0xbc]         @ 0x8061e48 <Reset_Handler+0x148>
 8061d8c: 4780         	blx	r0
;   SystemInit();      /* CMSIS System Initialization */
 8061d8e: 482f         	ldr	r0, [pc, #0xbc]         @ 0x8061e4c <Reset_Handler+0x14c>
 8061d90: 4780         	blx	r0
 8061d92: 9a02         	ldr	r2, [sp, #0x8]
 8061d94: 9903         	ldr	r1, [sp, #0xc]
 8061d96: f8dd e010    	ldr.w	lr, [sp, #0x10]
 8061d9a: 6808         	ldr	r0, [r1]
 8061d9c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061da0: 3001         	adds	r0, #0x1
 8061da2: 6008         	str	r0, [r1]
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 8061da4: f24a 5040    	movw	r0, #0xa540
 8061da8: f6c0 0006    	movt	r0, #0x806
 8061dac: 9008         	str	r0, [sp, #0x20]
 8061dae: e7ff         	b	0x8061db0 <Reset_Handler+0xb0> @ imm = #-0x2
;        pTable < &__copy_table_end__; ++pTable) {
 8061db0: 9808         	ldr	r0, [sp, #0x20]
 8061db2: f24a 5158    	movw	r1, #0xa558
 8061db6: f6c0 0106    	movt	r1, #0x806
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 8061dba: 4288         	cmp	r0, r1
 8061dbc: d219         	bhs	0x8061df2 <Reset_Handler+0xf2> @ imm = #0x32
 8061dbe: e7ff         	b	0x8061dc0 <Reset_Handler+0xc0> @ imm = #-0x2
 8061dc0: 2000         	movs	r0, #0x0
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 8061dc2: 9007         	str	r0, [sp, #0x1c]
 8061dc4: e7ff         	b	0x8061dc6 <Reset_Handler+0xc6> @ imm = #-0x2
 8061dc6: 9807         	ldr	r0, [sp, #0x1c]
 8061dc8: 9908         	ldr	r1, [sp, #0x20]
 8061dca: 6889         	ldr	r1, [r1, #0x8]
 8061dcc: 4288         	cmp	r0, r1
 8061dce: d20c         	bhs	0x8061dea <Reset_Handler+0xea> @ imm = #0x18
 8061dd0: e7ff         	b	0x8061dd2 <Reset_Handler+0xd2> @ imm = #-0x2
;       pTable->dest[i] = pTable->src[i];
 8061dd2: 9908         	ldr	r1, [sp, #0x20]
 8061dd4: 9a07         	ldr	r2, [sp, #0x1c]
 8061dd6: 6808         	ldr	r0, [r1]
 8061dd8: 6849         	ldr	r1, [r1, #0x4]
 8061dda: f850 0022    	ldr.w	r0, [r0, r2, lsl #2]
 8061dde: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 8061de2: 9807         	ldr	r0, [sp, #0x1c]
 8061de4: 3001         	adds	r0, #0x1
 8061de6: 9007         	str	r0, [sp, #0x1c]
 8061de8: e7ed         	b	0x8061dc6 <Reset_Handler+0xc6> @ imm = #-0x26
;        pTable < &__copy_table_end__; ++pTable) {
 8061dea: 9808         	ldr	r0, [sp, #0x20]
 8061dec: 300c         	adds	r0, #0xc
 8061dee: 9008         	str	r0, [sp, #0x20]
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 8061df0: e7de         	b	0x8061db0 <Reset_Handler+0xb0> @ imm = #-0x44
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 8061df2: f24a 5058    	movw	r0, #0xa558
 8061df6: f6c0 0006    	movt	r0, #0x806
 8061dfa: 9006         	str	r0, [sp, #0x18]
 8061dfc: e7ff         	b	0x8061dfe <Reset_Handler+0xfe> @ imm = #-0x2
;        pTable < &__zero_table_end__; ++pTable) {
 8061dfe: 9806         	ldr	r0, [sp, #0x18]
 8061e00: f24a 5168    	movw	r1, #0xa568
 8061e04: f6c0 0106    	movt	r1, #0x806
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 8061e08: 4288         	cmp	r0, r1
 8061e0a: d217         	bhs	0x8061e3c <Reset_Handler+0x13c> @ imm = #0x2e
 8061e0c: e7ff         	b	0x8061e0e <Reset_Handler+0x10e> @ imm = #-0x2
 8061e0e: 2000         	movs	r0, #0x0
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 8061e10: 9005         	str	r0, [sp, #0x14]
 8061e12: e7ff         	b	0x8061e14 <Reset_Handler+0x114> @ imm = #-0x2
 8061e14: 9805         	ldr	r0, [sp, #0x14]
 8061e16: 9906         	ldr	r1, [sp, #0x18]
 8061e18: 6849         	ldr	r1, [r1, #0x4]
 8061e1a: 4288         	cmp	r0, r1
 8061e1c: d20a         	bhs	0x8061e34 <Reset_Handler+0x134> @ imm = #0x14
 8061e1e: e7ff         	b	0x8061e20 <Reset_Handler+0x120> @ imm = #-0x2
;       pTable->dest[i] = 0u;
 8061e20: 9806         	ldr	r0, [sp, #0x18]
 8061e22: 6801         	ldr	r1, [r0]
 8061e24: 9a05         	ldr	r2, [sp, #0x14]
 8061e26: 2000         	movs	r0, #0x0
 8061e28: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 8061e2c: 9805         	ldr	r0, [sp, #0x14]
 8061e2e: 3001         	adds	r0, #0x1
 8061e30: 9005         	str	r0, [sp, #0x14]
 8061e32: e7ef         	b	0x8061e14 <Reset_Handler+0x114> @ imm = #-0x22
;        pTable < &__zero_table_end__; ++pTable) {
 8061e34: 9806         	ldr	r0, [sp, #0x18]
 8061e36: 3008         	adds	r0, #0x8
 8061e38: 9006         	str	r0, [sp, #0x18]
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 8061e3a: e7e0         	b	0x8061dfe <Reset_Handler+0xfe> @ imm = #-0x40
;   main();
 8061e3c: 4804         	ldr	r0, [pc, #0x10]         @ 0x8061e50 <Reset_Handler+0x150>
 8061e3e: 4780         	blx	r0

08061e40 <$d.118>:
 8061e40: 21 05 06 08  	.word	0x08060521
 8061e44: 21 05 06 08  	.word	0x08060521
 8061e48: 21 05 06 08  	.word	0x08060521
 8061e4c: 9d 06 06 08  	.word	0x0806069d
 8061e50: 81 1f 06 08  	.word	0x08061f81

08061e54 <getAddr>:
; void getAddr() {
 8061e54: b580         	push	{r7, lr}
 8061e56: 466f         	mov	r7, sp
;   ret_addr2 = __builtin_return_address(1);
 8061e58: f643 5140    	movw	r1, #0x3d40
 8061e5c: f2c2 0100    	movt	r1, #0x2000
 8061e60: 6808         	ldr	r0, [r1]
 8061e62: f642 5240    	movw	r2, #0x2d40
 8061e66: f2c2 0200    	movt	r2, #0x2000
 8061e6a: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8061e6e: 3001         	adds	r0, #0x1
 8061e70: 6008         	str	r0, [r1]
 8061e72: 4638         	mov	r0, r7
 8061e74: 6800         	ldr	r0, [r0]
 8061e76: 6841         	ldr	r1, [r0, #0x4]
 8061e78: f643 5044    	movw	r0, #0x3d44
 8061e7c: f2c2 0000    	movt	r0, #0x2000
 8061e80: 6001         	str	r1, [r0]
;   printf("0x%x\n", ret_addr2);
 8061e82: 6801         	ldr	r1, [r0]
 8061e84: f24a 0064    	movw	r0, #0xa064
 8061e88: f6c0 0006    	movt	r0, #0x806
 8061e8c: 4a02         	ldr	r2, [pc, #0x8]          @ 0x8061e98 <getAddr+0x44>
 8061e8e: 4790         	blx	r2
; }
 8061e90: 4802         	ldr	r0, [pc, #0x8]          @ 0x8061e9c <getAddr+0x48>
 8061e92: 4780         	blx	r0
 8061e94: bd80         	pop	{r7, pc}
 8061e96: bf00         	nop

08061e98 <$d.1>:
 8061e98: 39 24 06 08  	.word	0x08062439
 8061e9c: 21 05 06 08  	.word	0x08060521

08061ea0 <foo>:
; int foo(int a, int b) {
 8061ea0: b580         	push	{r7, lr}
 8061ea2: 466f         	mov	r7, sp
 8061ea4: b084         	sub	sp, #0x10
 8061ea6: f643 5340    	movw	r3, #0x3d40
 8061eaa: f2c2 0300    	movt	r3, #0x2000
 8061eae: 681a         	ldr	r2, [r3]
 8061eb0: f642 5c40    	movw	r12, #0x2d40
 8061eb4: f2c2 0c00    	movt	r12, #0x2000
 8061eb8: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8061ebc: 3201         	adds	r2, #0x1
 8061ebe: 601a         	str	r2, [r3]
 8061ec0: 9003         	str	r0, [sp, #0xc]
 8061ec2: 9102         	str	r1, [sp, #0x8]
;   int c = a + b;
 8061ec4: 9803         	ldr	r0, [sp, #0xc]
 8061ec6: 9902         	ldr	r1, [sp, #0x8]
 8061ec8: 4408         	add	r0, r1
 8061eca: 9001         	str	r0, [sp, #0x4]
;   getAddr();
 8061ecc: 4804         	ldr	r0, [pc, #0x10]         @ 0x8061ee0 <foo+0x40>
 8061ece: 4780         	blx	r0
;   return c;
 8061ed0: 9801         	ldr	r0, [sp, #0x4]
 8061ed2: 9000         	str	r0, [sp]
 8061ed4: 4803         	ldr	r0, [pc, #0xc]          @ 0x8061ee4 <foo+0x44>
 8061ed6: 4780         	blx	r0
 8061ed8: 9800         	ldr	r0, [sp]
 8061eda: b004         	add	sp, #0x10
 8061edc: bd80         	pop	{r7, pc}
 8061ede: bf00         	nop

08061ee0 <$d.3>:
 8061ee0: 55 1e 06 08  	.word	0x08061e55
 8061ee4: 21 05 06 08  	.word	0x08060521

08061ee8 <sum>:
; int sum(int a, int b) { return a + b; }
 8061ee8: b580         	push	{r7, lr}
 8061eea: 466f         	mov	r7, sp
 8061eec: b084         	sub	sp, #0x10
 8061eee: f643 5340    	movw	r3, #0x3d40
 8061ef2: f2c2 0300    	movt	r3, #0x2000
 8061ef6: 681a         	ldr	r2, [r3]
 8061ef8: f642 5c40    	movw	r12, #0x2d40
 8061efc: f2c2 0c00    	movt	r12, #0x2000
 8061f00: f84c e022    	str.w	lr, [r12, r2, lsl #2]
 8061f04: 3201         	adds	r2, #0x1
 8061f06: 601a         	str	r2, [r3]
 8061f08: 9003         	str	r0, [sp, #0xc]
 8061f0a: 9102         	str	r1, [sp, #0x8]
 8061f0c: 9803         	ldr	r0, [sp, #0xc]
 8061f0e: 9902         	ldr	r1, [sp, #0x8]
 8061f10: 4408         	add	r0, r1
 8061f12: 9001         	str	r0, [sp, #0x4]
 8061f14: 4802         	ldr	r0, [pc, #0x8]          @ 0x8061f20 <sum+0x38>
 8061f16: 4780         	blx	r0
 8061f18: 9801         	ldr	r0, [sp, #0x4]
 8061f1a: b004         	add	sp, #0x10
 8061f1c: bd80         	pop	{r7, pc}
 8061f1e: bf00         	nop

08061f20 <$d.5>:
 8061f20: 21 05 06 08  	.word	0x08060521

08061f24 <testThread>:
; void testThread(void *pvParameters) {
 8061f24: b580         	push	{r7, lr}
 8061f26: 466f         	mov	r7, sp
 8061f28: b084         	sub	sp, #0x10
 8061f2a: f643 5240    	movw	r2, #0x3d40
 8061f2e: f2c2 0200    	movt	r2, #0x2000
 8061f32: 6811         	ldr	r1, [r2]
 8061f34: f642 5340    	movw	r3, #0x2d40
 8061f38: f2c2 0300    	movt	r3, #0x2000
 8061f3c: f843 e021    	str.w	lr, [r3, r1, lsl #2]
 8061f40: 3101         	adds	r1, #0x1
 8061f42: 6011         	str	r1, [r2]
 8061f44: 9003         	str	r0, [sp, #0xc]
;   while (1) {
 8061f46: e7ff         	b	0x8061f48 <testThread+0x24> @ imm = #-0x2
;     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8061f48: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x8061f74 <testThread+0x50>
 8061f4a: f640 4000    	movw	r0, #0xc00
 8061f4e: f2c4 2002    	movt	r0, #0x4202
 8061f52: 2108         	movs	r1, #0x8
 8061f54: 4790         	blx	r2
 8061f56: 2002         	movs	r0, #0x2
;     int a = 2;
 8061f58: 9002         	str	r0, [sp, #0x8]
 8061f5a: 2003         	movs	r0, #0x3
;     int b = 3;
 8061f5c: 9001         	str	r0, [sp, #0x4]
;     int c = sum(a, b);
 8061f5e: 9802         	ldr	r0, [sp, #0x8]
 8061f60: 9901         	ldr	r1, [sp, #0x4]
 8061f62: 4a05         	ldr	r2, [pc, #0x14]         @ 0x8061f78 <testThread+0x54>
 8061f64: 4790         	blx	r2
 8061f66: 9000         	str	r0, [sp]
;     vTaskDelay(500);
 8061f68: 4904         	ldr	r1, [pc, #0x10]         @ 0x8061f7c <testThread+0x58>
 8061f6a: f44f 70fa    	mov.w	r0, #0x1f4
 8061f6e: 4788         	blx	r1
;   while (1) {
 8061f70: e7ea         	b	0x8061f48 <testThread+0x24> @ imm = #-0x2c
 8061f72: bf00         	nop

08061f74 <$d.7>:
 8061f74: 59 0c 06 08  	.word	0x08060c59
 8061f78: e9 1e 06 08  	.word	0x08061ee9
 8061f7c: 2d ee 05 08  	.word	0x0805ee2d

08061f80 <main>:
; int main() {
 8061f80: b580         	push	{r7, lr}
 8061f82: 466f         	mov	r7, sp
 8061f84: b092         	sub	sp, #0x48
 8061f86: 2000         	movs	r0, #0x0
 8061f88: 9001         	str	r0, [sp, #0x4]
 8061f8a: 9011         	str	r0, [sp, #0x44]
;   HAL_Init();
 8061f8c: 4810         	ldr	r0, [pc, #0x40]         @ 0x8061fd0 <main+0x50>
 8061f8e: 4780         	blx	r0
;   MX_GPIO_Init();
 8061f90: 4810         	ldr	r0, [pc, #0x40]         @ 0x8061fd4 <main+0x54>
 8061f92: 4780         	blx	r0
;   foo(1, 2);
 8061f94: 4a10         	ldr	r2, [pc, #0x40]         @ 0x8061fd8 <main+0x58>
 8061f96: 2001         	movs	r0, #0x1
 8061f98: 2102         	movs	r1, #0x2
 8061f9a: 4790         	blx	r2
 8061f9c: 9901         	ldr	r1, [sp, #0x4]
;   TaskParameters_t taskParams = {
 8061f9e: f24a 0378    	movw	r3, #0xa078
 8061fa2: f6c0 0306    	movt	r3, #0x806
 8061fa6: a802         	add	r0, sp, #0x8
 8061fa8: 4602         	mov	r2, r0
 8061faa: e8b3 5070    	ldm.w	r3!, {r4, r5, r6, r12, lr}
 8061fae: e8a2 5070    	stm.w	r2!, {r4, r5, r6, r12, lr}
 8061fb2: e8b3 5070    	ldm.w	r3!, {r4, r5, r6, r12, lr}
 8061fb6: e8a2 5070    	stm.w	r2!, {r4, r5, r6, r12, lr}
 8061fba: e893 5070    	ldm.w	r3, {r4, r5, r6, r12, lr}
 8061fbe: e882 5070    	stm.w	r2, {r4, r5, r6, r12, lr}
;   xTaskCreateRestricted(&taskParams, NULL);
 8061fc2: 4a06         	ldr	r2, [pc, #0x18]         @ 0x8061fdc <main+0x5c>
 8061fc4: 4790         	blx	r2
;   vTaskStartScheduler();
 8061fc6: 4806         	ldr	r0, [pc, #0x18]         @ 0x8061fe0 <main+0x60>
 8061fc8: 4780         	blx	r0
;   for (;;)
 8061fca: e7ff         	b	0x8061fcc <main+0x4c>   @ imm = #-0x2
 8061fcc: e7fe         	b	0x8061fcc <main+0x4c>   @ imm = #-0x4
 8061fce: bf00         	nop

08061fd0 <$d.9>:
 8061fd0: 51 05 06 08  	.word	0x08060551
 8061fd4: e5 1f 06 08  	.word	0x08061fe5
 8061fd8: a1 1e 06 08  	.word	0x08061ea1
 8061fdc: 01 52 05 08  	.word	0x08055201
 8061fe0: 7d 69 05 08  	.word	0x0805697d

08061fe4 <MX_GPIO_Init>:
; static void MX_GPIO_Init(void) {
 8061fe4: b580         	push	{r7, lr}
 8061fe6: 466f         	mov	r7, sp
 8061fe8: b08a         	sub	sp, #0x28
 8061fea: f643 5140    	movw	r1, #0x3d40
 8061fee: f2c2 0100    	movt	r1, #0x2000
 8061ff2: 6808         	ldr	r0, [r1]
 8061ff4: f642 5240    	movw	r2, #0x2d40
 8061ff8: f2c2 0200    	movt	r2, #0x2000
 8061ffc: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8062000: 3001         	adds	r0, #0x1
 8062002: 6008         	str	r0, [r1]
 8062004: 2000         	movs	r0, #0x0
;   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8062006: 9009         	str	r0, [sp, #0x24]
 8062008: 9008         	str	r0, [sp, #0x20]
 806200a: 9007         	str	r0, [sp, #0x1c]
 806200c: 9006         	str	r0, [sp, #0x18]
 806200e: 9005         	str	r0, [sp, #0x14]
;   __HAL_RCC_GPIOD_CLK_ENABLE();
 8062010: e7ff         	b	0x8062012 <MX_GPIO_Init+0x2e> @ imm = #-0x2
 8062012: f241 004c    	movw	r0, #0x104c
 8062016: f2c4 0002    	movt	r0, #0x4002
;   __HAL_RCC_GPIOD_CLK_ENABLE();
 806201a: 6801         	ldr	r1, [r0]
 806201c: f041 0108    	orr	r1, r1, #0x8
 8062020: 6001         	str	r1, [r0]
 8062022: 6800         	ldr	r0, [r0]
 8062024: f000 0008    	and	r0, r0, #0x8
 8062028: 9004         	str	r0, [sp, #0x10]
 806202a: 9804         	ldr	r0, [sp, #0x10]
 806202c: e7ff         	b	0x806202e <MX_GPIO_Init+0x4a> @ imm = #-0x2
;   HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_SET);
 806202e: 4b0d         	ldr	r3, [pc, #0x34]         @ 0x8062064 <MX_GPIO_Init+0x80>
 8062030: f640 4000    	movw	r0, #0xc00
 8062034: f2c4 2002    	movt	r0, #0x4202
 8062038: 9003         	str	r0, [sp, #0xc]
 806203a: 2108         	movs	r1, #0x8
 806203c: 9101         	str	r1, [sp, #0x4]
 806203e: 2201         	movs	r2, #0x1
 8062040: 9202         	str	r2, [sp, #0x8]
 8062042: 4798         	blx	r3
 8062044: 9a01         	ldr	r2, [sp, #0x4]
 8062046: 9902         	ldr	r1, [sp, #0x8]
 8062048: 9803         	ldr	r0, [sp, #0xc]
;   GPIO_InitStruct.Pin = LED9_Pin;
 806204a: 9205         	str	r2, [sp, #0x14]
;   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806204c: 9106         	str	r1, [sp, #0x18]
;   GPIO_InitStruct.Pull = GPIO_PULLUP;
 806204e: 9107         	str	r1, [sp, #0x1c]
 8062050: 2103         	movs	r1, #0x3
;   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062052: 9108         	str	r1, [sp, #0x20]
;   HAL_GPIO_Init(LED9_GPIO_Port, &GPIO_InitStruct);
 8062054: 4a04         	ldr	r2, [pc, #0x10]         @ 0x8062068 <MX_GPIO_Init+0x84>
 8062056: a905         	add	r1, sp, #0x14
 8062058: 4790         	blx	r2
; }
 806205a: 4804         	ldr	r0, [pc, #0x10]         @ 0x806206c <MX_GPIO_Init+0x88>
 806205c: 4780         	blx	r0
 806205e: b00a         	add	sp, #0x28
 8062060: bd80         	pop	{r7, pc}
 8062062: bf00         	nop

08062064 <$d.11>:
 8062064: 01 0c 06 08  	.word	0x08060c01
 8062068: 69 08 06 08  	.word	0x08060869
 806206c: 21 05 06 08  	.word	0x08060521

08062070 <prvCreateIdleTasks>:
; {
 8062070: b580         	push	{r7, lr}
 8062072: 466f         	mov	r7, sp
 8062074: b08c         	sub	sp, #0x30
 8062076: f643 5140    	movw	r1, #0x3d40
 806207a: f2c2 0100    	movt	r1, #0x2000
 806207e: 6808         	ldr	r0, [r1]
 8062080: f642 5240    	movw	r2, #0x2d40
 8062084: f2c2 0200    	movt	r2, #0x2000
 8062088: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 806208c: 3001         	adds	r0, #0x1
 806208e: 6008         	str	r0, [r1]
 8062090: 2001         	movs	r0, #0x1
;     BaseType_t xReturn = pdPASS;
 8062092: 900b         	str	r0, [sp, #0x2c]
 8062094: 2000         	movs	r0, #0x0
;     TaskFunction_t pxIdleTaskFunction = NULL;
 8062096: 9005         	str	r0, [sp, #0x14]
;     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8062098: 9004         	str	r0, [sp, #0x10]
 806209a: e7ff         	b	0x806209c <prvCreateIdleTasks+0x2c> @ imm = #-0x2
 806209c: 9804         	ldr	r0, [sp, #0x10]
 806209e: 280f         	cmp	r0, #0xf
 80620a0: dc13         	bgt	0x80620ca <prvCreateIdleTasks+0x5a> @ imm = #0x26
 80620a2: e7ff         	b	0x80620a4 <prvCreateIdleTasks+0x34> @ imm = #-0x2
;         cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80620a4: 9a04         	ldr	r2, [sp, #0x10]
 80620a6: f24a 00b8    	movw	r0, #0xa0b8
 80620aa: f6c0 0006    	movt	r0, #0x806
 80620ae: 5c81         	ldrb	r1, [r0, r2]
 80620b0: a806         	add	r0, sp, #0x18
 80620b2: 5481         	strb	r1, [r0, r2]
;         if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80620b4: 9904         	ldr	r1, [sp, #0x10]
 80620b6: 5c40         	ldrb	r0, [r0, r1]
 80620b8: b908         	cbnz	r0, 0x80620be <prvCreateIdleTasks+0x4e> @ imm = #0x2
 80620ba: e7ff         	b	0x80620bc <prvCreateIdleTasks+0x4c> @ imm = #-0x2
;             break;
 80620bc: e005         	b	0x80620ca <prvCreateIdleTasks+0x5a> @ imm = #0xa
 80620be: e7ff         	b	0x80620c0 <prvCreateIdleTasks+0x50> @ imm = #-0x2
;     }
 80620c0: e7ff         	b	0x80620c2 <prvCreateIdleTasks+0x52> @ imm = #-0x2
;     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80620c2: 9804         	ldr	r0, [sp, #0x10]
 80620c4: 3001         	adds	r0, #0x1
 80620c6: 9004         	str	r0, [sp, #0x10]
 80620c8: e7e8         	b	0x806209c <prvCreateIdleTasks+0x2c> @ imm = #-0x30
 80620ca: 2000         	movs	r0, #0x0
;     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80620cc: 900a         	str	r0, [sp, #0x28]
 80620ce: e7ff         	b	0x80620d0 <prvCreateIdleTasks+0x60> @ imm = #-0x2
 80620d0: 980a         	ldr	r0, [sp, #0x28]
 80620d2: 2800         	cmp	r0, #0x0
 80620d4: dc23         	bgt	0x806211e <prvCreateIdleTasks+0xae> @ imm = #0x46
 80620d6: e7ff         	b	0x80620d8 <prvCreateIdleTasks+0x68> @ imm = #-0x2
;             pxIdleTaskFunction = prvIdleTask;
 80620d8: f249 00a1    	movw	r0, #0x90a1
 80620dc: f6c0 0005    	movt	r0, #0x805
 80620e0: 9005         	str	r0, [sp, #0x14]
;             xReturn = xTaskCreate( pxIdleTaskFunction,
 80620e2: 9805         	ldr	r0, [sp, #0x14]
;                                    &xIdleTaskHandles[ xCoreID ] ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80620e4: 9a0a         	ldr	r2, [sp, #0x28]
 80620e6: f240 21ac    	movw	r1, #0x2ac
 80620ea: f2c2 0100    	movt	r1, #0x2000
 80620ee: eb01 0182    	add.w	r1, r1, r2, lsl #2
;             xReturn = xTaskCreate( pxIdleTaskFunction,
 80620f2: 466a         	mov	r2, sp
 80620f4: 6051         	str	r1, [r2, #0x4]
 80620f6: f04f 4100    	mov.w	r1, #0x80000000
 80620fa: 6011         	str	r1, [r2]
 80620fc: f8df c02c    	ldr.w	r12, [pc, #0x2c]        @ 0x806212c <prvCreateIdleTasks+0xbc>
 8062100: a906         	add	r1, sp, #0x18
 8062102: 2280         	movs	r2, #0x80
 8062104: 2300         	movs	r3, #0x0
 8062106: 47e0         	blx	r12
 8062108: 900b         	str	r0, [sp, #0x2c]
;         if( xReturn == pdFAIL )
 806210a: 980b         	ldr	r0, [sp, #0x2c]
 806210c: b908         	cbnz	r0, 0x8062112 <prvCreateIdleTasks+0xa2> @ imm = #0x2
 806210e: e7ff         	b	0x8062110 <prvCreateIdleTasks+0xa0> @ imm = #-0x2
;             break;
 8062110: e005         	b	0x806211e <prvCreateIdleTasks+0xae> @ imm = #0xa
 8062112: e7ff         	b	0x8062114 <prvCreateIdleTasks+0xa4> @ imm = #-0x2
;     }
 8062114: e7ff         	b	0x8062116 <prvCreateIdleTasks+0xa6> @ imm = #-0x2
;     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8062116: 980a         	ldr	r0, [sp, #0x28]
 8062118: 3001         	adds	r0, #0x1
 806211a: 900a         	str	r0, [sp, #0x28]
 806211c: e7d8         	b	0x80620d0 <prvCreateIdleTasks+0x60> @ imm = #-0x50
;     return xReturn;
 806211e: 980b         	ldr	r0, [sp, #0x2c]
 8062120: 9003         	str	r0, [sp, #0xc]
 8062122: 4803         	ldr	r0, [pc, #0xc]          @ 0x8062130 <prvCreateIdleTasks+0xc0>
 8062124: 4780         	blx	r0
 8062126: 9803         	ldr	r0, [sp, #0xc]
 8062128: b00c         	add	sp, #0x30
 806212a: bd80         	pop	{r7, pc}

0806212c <$d.51>:
 806212c: e5 54 05 08  	.word	0x080554e5
 8062130: 21 05 06 08  	.word	0x08060521

08062134 <prvTaskExitError>:
; {
 8062134: b580         	push	{r7, lr}
 8062136: 466f         	mov	r7, sp
 8062138: b082         	sub	sp, #0x8
 806213a: f643 5140    	movw	r1, #0x3d40
 806213e: f2c2 0100    	movt	r1, #0x2000
 8062142: 6808         	ldr	r0, [r1]
 8062144: f642 5240    	movw	r2, #0x2d40
 8062148: f2c2 0200    	movt	r2, #0x2000
 806214c: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8062150: 3001         	adds	r0, #0x1
 8062152: 6008         	str	r0, [r1]
 8062154: 2000         	movs	r0, #0x0
;     volatile uint32_t ulDummy = 0UL;
 8062156: 9001         	str	r0, [sp, #0x4]
;     configASSERT( ulCriticalNesting == ~0UL );
 8062158: f242 3078    	movw	r0, #0x2378
 806215c: f2c2 0000    	movt	r0, #0x2000
 8062160: 6800         	ldr	r0, [r0]
 8062162: 3001         	adds	r0, #0x1
 8062164: b120         	cbz	r0, 0x8062170 <prvTaskExitError+0x3c> @ imm = #0x8
 8062166: e7ff         	b	0x8062168 <prvTaskExitError+0x34> @ imm = #-0x2
 8062168: 4809         	ldr	r0, [pc, #0x24]         @ 0x8062190 <prvTaskExitError+0x5c>
 806216a: 4780         	blx	r0
 806216c: e7ff         	b	0x806216e <prvTaskExitError+0x3a> @ imm = #-0x2
 806216e: e7fe         	b	0x806216e <prvTaskExitError+0x3a> @ imm = #-0x4
;     portDISABLE_INTERRUPTS();
 8062170: 4805         	ldr	r0, [pc, #0x14]         @ 0x8062188 <prvTaskExitError+0x54>
 8062172: 4780         	blx	r0
;     while( ulDummy == 0 )
 8062174: e7ff         	b	0x8062176 <prvTaskExitError+0x42> @ imm = #-0x2
 8062176: 9801         	ldr	r0, [sp, #0x4]
 8062178: b908         	cbnz	r0, 0x806217e <prvTaskExitError+0x4a> @ imm = #0x2
 806217a: e7ff         	b	0x806217c <prvTaskExitError+0x48> @ imm = #-0x2
 806217c: e7fb         	b	0x8062176 <prvTaskExitError+0x42> @ imm = #-0xa
; }
 806217e: 4803         	ldr	r0, [pc, #0xc]          @ 0x806218c <prvTaskExitError+0x58>
 8062180: 4780         	blx	r0
 8062182: b002         	add	sp, #0x8
 8062184: bd80         	pop	{r7, pc}
 8062186: bf00         	nop

08062188 <$d.17>:
 8062188: 55 ec 05 08  	.word	0x0805ec55
 806218c: 21 05 06 08  	.word	0x08060521
 8062190: 55 ec 05 08  	.word	0x0805ec55

08062194 <vPortValidateInterruptPriority>:
;     {
 8062194: b580         	push	{r7, lr}
 8062196: 466f         	mov	r7, sp
 8062198: b082         	sub	sp, #0x8
 806219a: f643 5140    	movw	r1, #0x3d40
 806219e: f2c2 0100    	movt	r1, #0x2000
 80621a2: 6808         	ldr	r0, [r1]
 80621a4: f642 5240    	movw	r2, #0x2d40
 80621a8: f2c2 0200    	movt	r2, #0x2000
 80621ac: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 80621b0: 3001         	adds	r0, #0x1
 80621b2: 6008         	str	r0, [r1]
;         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80621b4: f3ef 8005    	mrs	r0, ipsr
 80621b8: 9001         	str	r0, [sp, #0x4]
;         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80621ba: 9801         	ldr	r0, [sp, #0x4]
 80621bc: 2810         	cmp	r0, #0x10
 80621be: d317         	blo	0x80621f0 <vPortValidateInterruptPriority+0x5c> @ imm = #0x2e
 80621c0: e7ff         	b	0x80621c2 <vPortValidateInterruptPriority+0x2e> @ imm = #-0x2
;             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80621c2: 9801         	ldr	r0, [sp, #0x4]
 80621c4: f24e 31f0    	movw	r1, #0xe3f0
 80621c8: f2ce 0100    	movt	r1, #0xe000
 80621cc: 5c40         	ldrb	r0, [r0, r1]
 80621ce: f807 0c05    	strb	r0, [r7, #-5]
;             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80621d2: f817 0c05    	ldrb	r0, [r7, #-5]
 80621d6: f643 7160    	movw	r1, #0x3f60
 80621da: f2c2 0100    	movt	r1, #0x2000
 80621de: 7809         	ldrb	r1, [r1]
 80621e0: 4288         	cmp	r0, r1
 80621e2: da04         	bge	0x80621ee <vPortValidateInterruptPriority+0x5a> @ imm = #0x8
 80621e4: e7ff         	b	0x80621e6 <vPortValidateInterruptPriority+0x52> @ imm = #-0x2
 80621e6: 4810         	ldr	r0, [pc, #0x40]         @ 0x8062228 <vPortValidateInterruptPriority+0x94>
 80621e8: 4780         	blx	r0
 80621ea: e7ff         	b	0x80621ec <vPortValidateInterruptPriority+0x58> @ imm = #-0x2
 80621ec: e7fe         	b	0x80621ec <vPortValidateInterruptPriority+0x58> @ imm = #-0x4
;         }
 80621ee: e7ff         	b	0x80621f0 <vPortValidateInterruptPriority+0x5c> @ imm = #-0x2
 80621f0: f64e 500c    	movw	r0, #0xed0c
 80621f4: f2ce 0000    	movt	r0, #0xe000
;         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80621f8: 6800         	ldr	r0, [r0]
 80621fa: f400 60e0    	and	r0, r0, #0x700
 80621fe: f643 7164    	movw	r1, #0x3f64
 8062202: f2c2 0100    	movt	r1, #0x2000
 8062206: 6809         	ldr	r1, [r1]
 8062208: 4288         	cmp	r0, r1
 806220a: d904         	bls	0x8062216 <vPortValidateInterruptPriority+0x82> @ imm = #0x8
 806220c: e7ff         	b	0x806220e <vPortValidateInterruptPriority+0x7a> @ imm = #-0x2
 806220e: 4805         	ldr	r0, [pc, #0x14]         @ 0x8062224 <vPortValidateInterruptPriority+0x90>
 8062210: 4780         	blx	r0
 8062212: e7ff         	b	0x8062214 <vPortValidateInterruptPriority+0x80> @ imm = #-0x2
 8062214: e7fe         	b	0x8062214 <vPortValidateInterruptPriority+0x80> @ imm = #-0x4
;     }
 8062216: 4802         	ldr	r0, [pc, #0x8]          @ 0x8062220 <vPortValidateInterruptPriority+0x8c>
 8062218: 4780         	blx	r0
 806221a: b002         	add	sp, #0x8
 806221c: bd80         	pop	{r7, pc}
 806221e: bf00         	nop

08062220 <$d.33>:
 8062220: 21 05 06 08  	.word	0x08060521
 8062224: 55 ec 05 08  	.word	0x0805ec55
 8062228: 55 ec 05 08  	.word	0x0805ec55
 806222c: 00 00 00 00  	.word	0x00000000

08062230 <xIsPrivileged>:
;     __asm volatile
 8062230: f643 5140    	movw	r1, #0x3d40
 8062234: f2c2 0100    	movt	r1, #0x2000
 8062238: 6808         	ldr	r0, [r1]
 806223a: f642 5240    	movw	r2, #0x2d40
 806223e: f2c2 0200    	movt	r2, #0x2000
 8062242: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8062246: 3001         	adds	r0, #0x1
 8062248: 6008         	str	r0, [r1]
 806224a: f3ef 8014    	mrs	r0, control
 806224e: f010 0f01    	tst.w	r0, #0x1
 8062252: bf14         	ite	ne
 8062254: 2000         	movne	r0, #0x0
 8062256: 2001         	moveq	r0, #0x1
 8062258: 4770         	bx	lr
 806225a: bf00         	nop
 806225c: bf00         	nop
 806225e: bf00         	nop

08062260 <vResetPrivilege>:
;     __asm volatile
 8062260: f643 5140    	movw	r1, #0x3d40
 8062264: f2c2 0100    	movt	r1, #0x2000
 8062268: 6808         	ldr	r0, [r1]
 806226a: f642 5240    	movw	r2, #0x2d40
 806226e: f2c2 0200    	movt	r2, #0x2000
 8062272: f842 e020    	str.w	lr, [r2, r0, lsl #2]
 8062276: 3001         	adds	r0, #0x1
 8062278: 6008         	str	r0, [r1]
 806227a: f3ef 8014    	mrs	r0, control
 806227e: f040 0001    	orr	r0, r0, #0x1
 8062282: f380 8814    	msr	control, r0
 8062286: 4770         	bx	lr

08062288 <memcpy>:
 8062288: 4684         	mov	r12, r0
 806228a: ea41 0300    	orr.w	r3, r1, r0
 806228e: f013 0303    	ands	r3, r3, #0x3
 8062292: d149         	bne	0x8062328 <memcpy+0xa0> @ imm = #0x92
 8062294: 3a40         	subs	r2, #0x40
 8062296: d323         	blo	0x80622e0 <memcpy+0x58> @ imm = #0x46
 8062298: 680b         	ldr	r3, [r1]
 806229a: 6003         	str	r3, [r0]
 806229c: 684b         	ldr	r3, [r1, #0x4]
 806229e: 6043         	str	r3, [r0, #0x4]
 80622a0: 688b         	ldr	r3, [r1, #0x8]
 80622a2: 6083         	str	r3, [r0, #0x8]
 80622a4: 68cb         	ldr	r3, [r1, #0xc]
 80622a6: 60c3         	str	r3, [r0, #0xc]
 80622a8: 690b         	ldr	r3, [r1, #0x10]
 80622aa: 6103         	str	r3, [r0, #0x10]
 80622ac: 694b         	ldr	r3, [r1, #0x14]
 80622ae: 6143         	str	r3, [r0, #0x14]
 80622b0: 698b         	ldr	r3, [r1, #0x18]
 80622b2: 6183         	str	r3, [r0, #0x18]
 80622b4: 69cb         	ldr	r3, [r1, #0x1c]
 80622b6: 61c3         	str	r3, [r0, #0x1c]
 80622b8: 6a0b         	ldr	r3, [r1, #0x20]
 80622ba: 6203         	str	r3, [r0, #0x20]
 80622bc: 6a4b         	ldr	r3, [r1, #0x24]
 80622be: 6243         	str	r3, [r0, #0x24]
 80622c0: 6a8b         	ldr	r3, [r1, #0x28]
 80622c2: 6283         	str	r3, [r0, #0x28]
 80622c4: 6acb         	ldr	r3, [r1, #0x2c]
 80622c6: 62c3         	str	r3, [r0, #0x2c]
 80622c8: 6b0b         	ldr	r3, [r1, #0x30]
 80622ca: 6303         	str	r3, [r0, #0x30]
 80622cc: 6b4b         	ldr	r3, [r1, #0x34]
 80622ce: 6343         	str	r3, [r0, #0x34]
 80622d0: 6b8b         	ldr	r3, [r1, #0x38]
 80622d2: 6383         	str	r3, [r0, #0x38]
 80622d4: 6bcb         	ldr	r3, [r1, #0x3c]
 80622d6: 63c3         	str	r3, [r0, #0x3c]
 80622d8: 3040         	adds	r0, #0x40
 80622da: 3140         	adds	r1, #0x40
 80622dc: 3a40         	subs	r2, #0x40
 80622de: d2db         	bhs	0x8062298 <memcpy+0x10> @ imm = #-0x4a
 80622e0: 3230         	adds	r2, #0x30
 80622e2: d30b         	blo	0x80622fc <memcpy+0x74> @ imm = #0x16
 80622e4: 680b         	ldr	r3, [r1]
 80622e6: 6003         	str	r3, [r0]
 80622e8: 684b         	ldr	r3, [r1, #0x4]
 80622ea: 6043         	str	r3, [r0, #0x4]
 80622ec: 688b         	ldr	r3, [r1, #0x8]
 80622ee: 6083         	str	r3, [r0, #0x8]
 80622f0: 68cb         	ldr	r3, [r1, #0xc]
 80622f2: 60c3         	str	r3, [r0, #0xc]
 80622f4: 3010         	adds	r0, #0x10
 80622f6: 3110         	adds	r1, #0x10
 80622f8: 3a10         	subs	r2, #0x10
 80622fa: d2f3         	bhs	0x80622e4 <memcpy+0x5c> @ imm = #-0x1a
 80622fc: 320c         	adds	r2, #0xc
 80622fe: d305         	blo	0x806230c <memcpy+0x84> @ imm = #0xa
 8062300: f851 3b04    	ldr	r3, [r1], #4
 8062304: f840 3b04    	str	r3, [r0], #4
 8062308: 3a04         	subs	r2, #0x4
 806230a: d2f9         	bhs	0x8062300 <memcpy+0x78> @ imm = #-0xe
 806230c: 3204         	adds	r2, #0x4
 806230e: d008         	beq	0x8062322 <memcpy+0x9a> @ imm = #0x10
 8062310: 07d2         	lsls	r2, r2, #0x1f
 8062312: bf1c         	itt	ne
 8062314: f811 3b01    	ldrbne	r3, [r1], #1
 8062318: f800 3b01    	strbne	r3, [r0], #1
 806231c: d301         	blo	0x8062322 <memcpy+0x9a> @ imm = #0x2
 806231e: 880b         	ldrh	r3, [r1]
 8062320: 8003         	strh	r3, [r0]
 8062322: 4660         	mov	r0, r12
 8062324: 4770         	bx	lr
 8062326: bf00         	nop
 8062328: 2a08         	cmp	r2, #0x8
 806232a: d313         	blo	0x8062354 <memcpy+0xcc> @ imm = #0x26
 806232c: 078b         	lsls	r3, r1, #0x1e
 806232e: d0b1         	beq	0x8062294 <memcpy+0xc>  @ imm = #-0x9e
 8062330: f010 0303    	ands	r3, r0, #0x3
 8062334: d0ae         	beq	0x8062294 <memcpy+0xc>  @ imm = #-0xa4
 8062336: f1c3 0304    	rsb.w	r3, r3, #0x4
 806233a: 1ad2         	subs	r2, r2, r3
 806233c: 07db         	lsls	r3, r3, #0x1f
 806233e: bf1c         	itt	ne
 8062340: f811 3b01    	ldrbne	r3, [r1], #1
 8062344: f800 3b01    	strbne	r3, [r0], #1
 8062348: d3a4         	blo	0x8062294 <memcpy+0xc>  @ imm = #-0xb8
 806234a: f831 3b02    	ldrh	r3, [r1], #2
 806234e: f820 3b02    	strh	r3, [r0], #2
 8062352: e79f         	b	0x8062294 <memcpy+0xc>  @ imm = #-0xc2
 8062354: 3a04         	subs	r2, #0x4
 8062356: d3d9         	blo	0x806230c <memcpy+0x84> @ imm = #-0x4e
 8062358: 3a01         	subs	r2, #0x1
 806235a: f811 3b01    	ldrb	r3, [r1], #1
 806235e: f800 3b01    	strb	r3, [r0], #1
 8062362: d2f9         	bhs	0x8062358 <memcpy+0xd0> @ imm = #-0xe
 8062364: 780b         	ldrb	r3, [r1]
 8062366: 7003         	strb	r3, [r0]
 8062368: 784b         	ldrb	r3, [r1, #0x1]
 806236a: 7043         	strb	r3, [r0, #0x1]
 806236c: 788b         	ldrb	r3, [r1, #0x2]
 806236e: 7083         	strb	r3, [r0, #0x2]
 8062370: 4660         	mov	r0, r12
 8062372: 4770         	bx	lr

08062374 <memset>:
 8062374: b570         	push	{r4, r5, r6, lr}
 8062376: 0786         	lsls	r6, r0, #0x1e
 8062378: d048         	beq	0x806240c <memset+0x98> @ imm = #0x90
 806237a: 1e54         	subs	r4, r2, #0x1
 806237c: 2a00         	cmp	r2, #0x0
 806237e: d03f         	beq	0x8062400 <memset+0x8c> @ imm = #0x7e
 8062380: b2ca         	uxtb	r2, r1
 8062382: 4603         	mov	r3, r0
 8062384: e001         	b	0x806238a <memset+0x16> @ imm = #0x2
 8062386: 3c01         	subs	r4, #0x1
 8062388: d33a         	blo	0x8062400 <memset+0x8c> @ imm = #0x74
 806238a: f803 2b01    	strb	r2, [r3], #1
 806238e: 079d         	lsls	r5, r3, #0x1e
 8062390: d1f9         	bne	0x8062386 <memset+0x12> @ imm = #-0xe
 8062392: 2c03         	cmp	r4, #0x3
 8062394: d92d         	bls	0x80623f2 <memset+0x7e> @ imm = #0x5a
 8062396: b2cd         	uxtb	r5, r1
 8062398: 2c0f         	cmp	r4, #0xf
 806239a: ea45 2505    	orr.w	r5, r5, r5, lsl #8
 806239e: ea45 4505    	orr.w	r5, r5, r5, lsl #16
 80623a2: d936         	bls	0x8062412 <memset+0x9e> @ imm = #0x6c
 80623a4: f1a4 0c10    	sub.w	r12, r4, #0x10
 80623a8: f103 0e20    	add.w	lr, r3, #0x20
 80623ac: f103 0210    	add.w	r2, r3, #0x10
 80623b0: f02c 060f    	bic	r6, r12, #0xf
 80623b4: ea4f 1c1c    	lsr.w	r12, r12, #0x4
 80623b8: 44b6         	add	lr, r6
 80623ba: e942 5504    	strd	r5, r5, [r2, #-16]
 80623be: e942 5502    	strd	r5, r5, [r2, #-8]
 80623c2: 3210         	adds	r2, #0x10
 80623c4: 4572         	cmp	r2, lr
 80623c6: d1f8         	bne	0x80623ba <memset+0x46> @ imm = #-0x10
 80623c8: f10c 0201    	add.w	r2, r12, #0x1
 80623cc: f014 0f0c    	tst.w	r4, #0xc
 80623d0: f004 0c0f    	and	r12, r4, #0xf
 80623d4: eb03 1202    	add.w	r2, r3, r2, lsl #4
 80623d8: d013         	beq	0x8062402 <memset+0x8e> @ imm = #0x26
 80623da: f1ac 0304    	sub.w	r3, r12, #0x4
 80623de: f023 0303    	bic	r3, r3, #0x3
 80623e2: 3304         	adds	r3, #0x4
 80623e4: 4413         	add	r3, r2
 80623e6: f842 5b04    	str	r5, [r2], #4
 80623ea: 4293         	cmp	r3, r2
 80623ec: d1fb         	bne	0x80623e6 <memset+0x72> @ imm = #-0xa
 80623ee: f00c 0403    	and	r4, r12, #0x3
 80623f2: b12c         	cbz	r4, 0x8062400 <memset+0x8c> @ imm = #0xa
 80623f4: b2ca         	uxtb	r2, r1
 80623f6: 441c         	add	r4, r3
 80623f8: f803 2b01    	strb	r2, [r3], #1
 80623fc: 429c         	cmp	r4, r3
 80623fe: d1fb         	bne	0x80623f8 <memset+0x84> @ imm = #-0xa
 8062400: bd70         	pop	{r4, r5, r6, pc}
 8062402: 4664         	mov	r4, r12
 8062404: 4613         	mov	r3, r2
 8062406: 2c00         	cmp	r4, #0x0
 8062408: d1f4         	bne	0x80623f4 <memset+0x80> @ imm = #-0x18
 806240a: e7f9         	b	0x8062400 <memset+0x8c> @ imm = #-0xe
 806240c: 4603         	mov	r3, r0
 806240e: 4614         	mov	r4, r2
 8062410: e7bf         	b	0x8062392 <memset+0x1e> @ imm = #-0x82
 8062412: 461a         	mov	r2, r3
 8062414: 46a4         	mov	r12, r4
 8062416: e7e0         	b	0x80623da <memset+0x66> @ imm = #-0x40

08062418 <_printf_r>:
 8062418: b40e         	push	{r1, r2, r3}
 806241a: b500         	push	{lr}
 806241c: b082         	sub	sp, #0x8
 806241e: 6881         	ldr	r1, [r0, #0x8]
 8062420: ab03         	add	r3, sp, #0xc
 8062422: f853 2b04    	ldr	r2, [r3], #4
 8062426: 9301         	str	r3, [sp, #0x4]
 8062428: f000 f81a    	bl	0x8062460 <_vfprintf_r> @ imm = #0x34
 806242c: b002         	add	sp, #0x8
 806242e: f85d eb04    	ldr	lr, [sp], #4
 8062432: b003         	add	sp, #0xc
 8062434: 4770         	bx	lr
 8062436: bf00         	nop

08062438 <printf>:
 8062438: b40f         	push	{r0, r1, r2, r3}
 806243a: 4908         	ldr	r1, [pc, #0x20]         @ 0x806245c <printf+0x24>
 806243c: b500         	push	{lr}
 806243e: b083         	sub	sp, #0xc
 8062440: 6808         	ldr	r0, [r1]
 8062442: ab04         	add	r3, sp, #0x10
 8062444: 6881         	ldr	r1, [r0, #0x8]
 8062446: f853 2b04    	ldr	r2, [r3], #4
 806244a: 9301         	str	r3, [sp, #0x4]
 806244c: f000 f808    	bl	0x8062460 <_vfprintf_r> @ imm = #0x10
 8062450: b003         	add	sp, #0xc
 8062452: f85d eb04    	ldr	lr, [sp], #4
 8062456: b004         	add	sp, #0x10
 8062458: 4770         	bx	lr
 806245a: bf00         	nop

0806245c <$d>:
 806245c: 90 23 00 20  	.word	0x20002390

08062460 <_vfprintf_r>:
 8062460: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8062464: b0bf         	sub	sp, #0xfc
 8062466: 461c         	mov	r4, r3
 8062468: 4689         	mov	r9, r1
 806246a: 4617         	mov	r7, r2
 806246c: 4682         	mov	r10, r0
 806246e: f002 febd    	bl	0x80651ec <_localeconv_r> @ imm = #0x2d7a
 8062472: 6803         	ldr	r3, [r0]
 8062474: 940c         	str	r4, [sp, #0x30]
 8062476: 4618         	mov	r0, r3
 8062478: 9314         	str	r3, [sp, #0x50]
 806247a: f003 ffeb    	bl	0x8066454 <strlen>      @ imm = #0x3fd6
 806247e: 9012         	str	r0, [sp, #0x48]
 8062480: f1ba 0f00    	cmp.w	r10, #0x0
 8062484: d004         	beq	0x8062490 <_vfprintf_r+0x30> @ imm = #0x8
 8062486: f8da 3038    	ldr.w	r3, [r10, #0x38]
 806248a: 2b00         	cmp	r3, #0x0
 806248c: f000 81b9    	beq.w	0x8062802 <_vfprintf_r+0x3a2> @ imm = #0x372
 8062490: f9b9 300c    	ldrsh.w	r3, [r9, #0xc]
 8062494: 049d         	lsls	r5, r3, #0x12
 8062496: b29a         	uxth	r2, r3
 8062498: d40a         	bmi	0x80624b0 <_vfprintf_r+0x50> @ imm = #0x14
 806249a: f443 5300    	orr	r3, r3, #0x2000
 806249e: b29a         	uxth	r2, r3
 80624a0: f8a9 300c    	strh.w	r3, [r9, #0xc]
 80624a4: f8d9 3064    	ldr.w	r3, [r9, #0x64]
 80624a8: f423 5300    	bic	r3, r3, #0x2000
 80624ac: f8c9 3064    	str.w	r3, [r9, #0x64]
 80624b0: 0710         	lsls	r0, r2, #0x1c
 80624b2: f140 80b6    	bpl.w	0x8062622 <_vfprintf_r+0x1c2> @ imm = #0x16c
 80624b6: f8d9 3010    	ldr.w	r3, [r9, #0x10]
 80624ba: 2b00         	cmp	r3, #0x0
 80624bc: f000 80b1    	beq.w	0x8062622 <_vfprintf_r+0x1c2> @ imm = #0x162
 80624c0: f002 021a    	and	r2, r2, #0x1a
 80624c4: 2a0a         	cmp	r2, #0xa
 80624c6: f000 80ba    	beq.w	0x806263e <_vfprintf_r+0x1de> @ imm = #0x174
 80624ca: 2300         	movs	r3, #0x0
 80624cc: aa2e         	add	r2, sp, #0xb8
 80624ce: 2400         	movs	r4, #0x0
 80624d0: f8cd a02c    	str.w	r10, [sp, #0x2c]
 80624d4: 930f         	str	r3, [sp, #0x3c]
 80624d6: 4690         	mov	r8, r2
 80624d8: 9313         	str	r3, [sp, #0x4c]
 80624da: 46ca         	mov	r10, r9
 80624dc: 9316         	str	r3, [sp, #0x58]
 80624de: 9309         	str	r3, [sp, #0x24]
 80624e0: 9221         	str	r2, [sp, #0x84]
 80624e2: e9cd 3322    	strd	r3, r3, [sp, #136]
 80624e6: 2300         	movs	r3, #0x0
 80624e8: e9cd 3410    	strd	r3, r4, [sp, #64]
 80624ec: 783b         	ldrb	r3, [r7]
 80624ee: 463c         	mov	r4, r7
 80624f0: b1d3         	cbz	r3, 0x8062528 <_vfprintf_r+0xc8> @ imm = #0x34
 80624f2: 2b25         	cmp	r3, #0x25
 80624f4: d018         	beq	0x8062528 <_vfprintf_r+0xc8> @ imm = #0x30
 80624f6: 4625         	mov	r5, r4
 80624f8: f814 3f01    	ldrb	r3, [r4, #1]!
 80624fc: b10b         	cbz	r3, 0x8062502 <_vfprintf_r+0xa2> @ imm = #0x2
 80624fe: 2b25         	cmp	r3, #0x25
 8062500: d1f9         	bne	0x80624f6 <_vfprintf_r+0x96> @ imm = #-0xe
 8062502: 1be6         	subs	r6, r4, r7
 8062504: d010         	beq	0x8062528 <_vfprintf_r+0xc8> @ imm = #0x20
 8062506: 9b23         	ldr	r3, [sp, #0x8c]
 8062508: 4433         	add	r3, r6
 806250a: 9323         	str	r3, [sp, #0x8c]
 806250c: 9b22         	ldr	r3, [sp, #0x88]
 806250e: 3301         	adds	r3, #0x1
 8062510: 2b07         	cmp	r3, #0x7
 8062512: 9322         	str	r3, [sp, #0x88]
 8062514: e9c8 7600    	strd	r7, r6, [r8]
 8062518: f300 809f    	bgt.w	0x806265a <_vfprintf_r+0x1fa> @ imm = #0x13e
 806251c: f108 0808    	add.w	r8, r8, #0x8
 8062520: 9b09         	ldr	r3, [sp, #0x24]
 8062522: 4433         	add	r3, r6
 8062524: 9309         	str	r3, [sp, #0x24]
 8062526: 786b         	ldrb	r3, [r5, #0x1]
 8062528: 2b00         	cmp	r3, #0x0
 806252a: f000 8788    	beq.w	0x806343e <_vfprintf_r+0xfde> @ imm = #0xf10
 806252e: 2300         	movs	r3, #0x0
 8062530: 1c67         	adds	r7, r4, #0x1
 8062532: 7862         	ldrb	r2, [r4, #0x1]
 8062534: f04f 35ff    	mov.w	r5, #0xffffffff
 8062538: 4618         	mov	r0, r3
 806253a: 469b         	mov	r11, r3
 806253c: f88d 3067    	strb.w	r3, [sp, #0x67]
 8062540: 9308         	str	r3, [sp, #0x20]
 8062542: 3701         	adds	r7, #0x1
 8062544: f1a2 0120    	sub.w	r1, r2, #0x20
 8062548: 2958         	cmp	r1, #0x58
 806254a: f200 8091    	bhi.w	0x8062670 <_vfprintf_r+0x210> @ imm = #0x122
 806254e: e8df f011    	tbh	[pc, r1, lsl #1]

08062552 <$d>:
 8062552: ab 02 8f 00  	.word	0x008f02ab
 8062556: 8f 00 a7 02  	.word	0x02a7008f
 806255a: 8f 00 8f 00  	.word	0x008f008f
 806255e: 8f 00 8f 00  	.word	0x008f008f
 8062562: 8f 00 8f 00  	.word	0x008f008f
 8062566: 87 01 a3 02  	.word	0x02a30187
 806256a: 8f 00 92 01  	.word	0x0192008f
 806256e: eb 01 8f 00  	.word	0x008f01eb
 8062572: cd 02 59 00  	.word	0x005902cd
 8062576: 59 00 59 00  	.word	0x00590059
 806257a: 59 00 59 00  	.word	0x00590059
 806257e: 59 00 59 00  	.word	0x00590059
 8062582: 59 00 59 00  	.word	0x00590059
 8062586: 8f 00 8f 00  	.word	0x008f008f
 806258a: 8f 00 8f 00  	.word	0x008f008f
 806258e: 8f 00 8f 00  	.word	0x008f008f
 8062592: 8f 00 8f 00  	.word	0x008f008f
 8062596: 8f 00 8f 00  	.word	0x008f008f
 806259a: b2 02 12 01  	.word	0x011202b2
 806259e: 8f 00 12 01  	.word	0x0112008f
 80625a2: 8f 00 8f 00  	.word	0x008f008f
 80625a6: 8f 00 8f 00  	.word	0x008f008f
 80625aa: 9f 02 8f 00  	.word	0x008f029f
 80625ae: 8f 00 83 02  	.word	0x0283008f
 80625b2: 8f 00 8f 00  	.word	0x008f008f
 80625b6: 8f 00 8f 00  	.word	0x008f008f
 80625ba: 8f 00 72 02  	.word	0x0272008f
 80625be: 8f 00 8f 00  	.word	0x008f008f
 80625c2: a5 01 8f 00  	.word	0x008f01a5
 80625c6: 8f 00 8f 00  	.word	0x008f008f
 80625ca: 8f 00 8f 00  	.word	0x008f008f
 80625ce: 8f 00 8f 00  	.word	0x008f008f
 80625d2: 8f 00 8f 00  	.word	0x008f008f
 80625d6: 8f 00 96 01  	.word	0x0196008f
 80625da: 5c 01 12 01  	.word	0x0112015c
 80625de: 12 01 12 01  	.word	0x01120112
 80625e2: e7 01 5c 01  	.word	0x015c01e7
 80625e6: 8f 00 8f 00  	.word	0x008f008f
 80625ea: 6b 02 8f 00  	.word	0x008f026b
 80625ee: 55 02 73 06  	.word	0x06730255
 80625f2: 43 02 3f 02  	.word	0x023f0243
 80625f6: 8f 00 1b 02  	.word	0x021b008f
 80625fa: 8f 00 75 06  	.word	0x0675008f
 80625fe: 8f 00 8f 00  	.word	0x008f008f
 8062602: 03 02        	.short	0x0203

08062604 <$t>:
 8062604: f1a2 0130    	sub.w	r1, r2, #0x30
 8062608: 2400         	movs	r4, #0x0
 806260a: eb04 0484    	add.w	r4, r4, r4, lsl #2
 806260e: f817 2b01    	ldrb	r2, [r7], #1
 8062612: eb01 0444    	add.w	r4, r1, r4, lsl #1
 8062616: f1a2 0130    	sub.w	r1, r2, #0x30
 806261a: 2909         	cmp	r1, #0x9
 806261c: d9f5         	bls	0x806260a <_vfprintf_r+0x1aa> @ imm = #-0x16
 806261e: 9408         	str	r4, [sp, #0x20]
 8062620: e790         	b	0x8062544 <_vfprintf_r+0xe4> @ imm = #-0xe0
 8062622: 4649         	mov	r1, r9
 8062624: 4650         	mov	r0, r10
 8062626: f001 f9e1    	bl	0x80639ec <__swsetup_r> @ imm = #0x13c2
 806262a: 2800         	cmp	r0, #0x0
 806262c: f041 8104    	bne.w	0x8063838 <_vfprintf_r+0x13d8> @ imm = #0x1208
 8062630: f8b9 200c    	ldrh.w	r2, [r9, #0xc]
 8062634: f002 021a    	and	r2, r2, #0x1a
 8062638: 2a0a         	cmp	r2, #0xa
 806263a: f47f af46    	bne.w	0x80624ca <_vfprintf_r+0x6a> @ imm = #-0x174
 806263e: f9b9 300e    	ldrsh.w	r3, [r9, #0xe]
 8062642: 2b00         	cmp	r3, #0x0
 8062644: f6ff af41    	blt.w	0x80624ca <_vfprintf_r+0x6a> @ imm = #-0x17e
 8062648: 4623         	mov	r3, r4
 806264a: 463a         	mov	r2, r7
 806264c: 4649         	mov	r1, r9
 806264e: 4650         	mov	r0, r10
 8062650: b03f         	add	sp, #0xfc
 8062652: e8bd 4ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8062656: f001 b993    	b.w	0x8063980 <__sbprintf>  @ imm = #0x1326
 806265a: aa21         	add	r2, sp, #0x84
 806265c: 4651         	mov	r1, r10
 806265e: 980b         	ldr	r0, [sp, #0x2c]
 8062660: f003 ff60    	bl	0x8066524 <__sprint_r>  @ imm = #0x3ec0
 8062664: 2800         	cmp	r0, #0x0
 8062666: f040 8367    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #0x6ce
 806266a: f10d 08b8    	add.w	r8, sp, #0xb8
 806266e: e757         	b	0x8062520 <_vfprintf_r+0xc0> @ imm = #-0x152
 8062670: 920d         	str	r2, [sp, #0x34]
 8062672: 2b00         	cmp	r3, #0x0
 8062674: f041 80c4    	bne.w	0x8063800 <_vfprintf_r+0x13a0> @ imm = #0x1188
 8062678: 9b0d         	ldr	r3, [sp, #0x34]
 806267a: 2b00         	cmp	r3, #0x0
 806267c: f000 86df    	beq.w	0x806343e <_vfprintf_r+0xfde> @ imm = #0xdbe
 8062680: f88d 3090    	strb.w	r3, [sp, #0x90]
 8062684: 2300         	movs	r3, #0x0
 8062686: ae24         	add	r6, sp, #0x90
 8062688: f88d 3067    	strb.w	r3, [sp, #0x67]
 806268c: 2301         	movs	r3, #0x1
 806268e: 9306         	str	r3, [sp, #0x18]
 8062690: 930a         	str	r3, [sp, #0x28]
 8062692: 2500         	movs	r5, #0x0
 8062694: f8cd b01c    	str.w	r11, [sp, #0x1c]
 8062698: 950e         	str	r5, [sp, #0x38]
 806269a: 9b07         	ldr	r3, [sp, #0x1c]
 806269c: f013 0302    	ands	r3, r3, #0x2
 80626a0: d002         	beq	0x80626a8 <_vfprintf_r+0x248> @ imm = #0x4
 80626a2: 9a06         	ldr	r2, [sp, #0x18]
 80626a4: 3202         	adds	r2, #0x2
 80626a6: 9206         	str	r2, [sp, #0x18]
 80626a8: 9a07         	ldr	r2, [sp, #0x1c]
 80626aa: f012 0b84    	ands	r11, r2, #0x84
 80626ae: d107         	bne	0x80626c0 <_vfprintf_r+0x260> @ imm = #0xe
 80626b0: 9a08         	ldr	r2, [sp, #0x20]
 80626b2: 9906         	ldr	r1, [sp, #0x18]
 80626b4: eba2 0901    	sub.w	r9, r2, r1
 80626b8: f1b9 0f00    	cmp.w	r9, #0x0
 80626bc: f300 8397    	bgt.w	0x8062dee <_vfprintf_r+0x98e> @ imm = #0x72e
 80626c0: 9c23         	ldr	r4, [sp, #0x8c]
 80626c2: f89d 2067    	ldrb.w	r2, [sp, #0x67]
 80626c6: b182         	cbz	r2, 0x80626ea <_vfprintf_r+0x28a> @ imm = #0x20
 80626c8: 9a22         	ldr	r2, [sp, #0x88]
 80626ca: f10d 0167    	add.w	r1, sp, #0x67
 80626ce: 3401         	adds	r4, #0x1
 80626d0: 3201         	adds	r2, #0x1
 80626d2: f8c8 1000    	str.w	r1, [r8]
 80626d6: 2101         	movs	r1, #0x1
 80626d8: 9423         	str	r4, [sp, #0x8c]
 80626da: 2a07         	cmp	r2, #0x7
 80626dc: 9222         	str	r2, [sp, #0x88]
 80626de: f8c8 1004    	str.w	r1, [r8, #0x4]
 80626e2: f300 83cd    	bgt.w	0x8062e80 <_vfprintf_r+0xa20> @ imm = #0x79a
 80626e6: f108 0808    	add.w	r8, r8, #0x8
 80626ea: b17b         	cbz	r3, 0x806270c <_vfprintf_r+0x2ac> @ imm = #0x1e
 80626ec: 9b22         	ldr	r3, [sp, #0x88]
 80626ee: aa1a         	add	r2, sp, #0x68
 80626f0: 3402         	adds	r4, #0x2
 80626f2: 3301         	adds	r3, #0x1
 80626f4: f8c8 2000    	str.w	r2, [r8]
 80626f8: 2202         	movs	r2, #0x2
 80626fa: 9423         	str	r4, [sp, #0x8c]
 80626fc: 2b07         	cmp	r3, #0x7
 80626fe: 9322         	str	r3, [sp, #0x88]
 8062700: f8c8 2004    	str.w	r2, [r8, #0x4]
 8062704: f300 83ca    	bgt.w	0x8062e9c <_vfprintf_r+0xa3c> @ imm = #0x794
 8062708: f108 0808    	add.w	r8, r8, #0x8
 806270c: f1bb 0f80    	cmp.w	r11, #0x80
 8062710: f000 824c    	beq.w	0x8062bac <_vfprintf_r+0x74c> @ imm = #0x498
 8062714: 9b0a         	ldr	r3, [sp, #0x28]
 8062716: 1aed         	subs	r5, r5, r3
 8062718: 2d00         	cmp	r5, #0x0
 806271a: f300 8290    	bgt.w	0x8062c3e <_vfprintf_r+0x7de> @ imm = #0x520
 806271e: 9b07         	ldr	r3, [sp, #0x1c]
 8062720: 05d8         	lsls	r0, r3, #0x17
 8062722: f100 81e7    	bmi.w	0x8062af4 <_vfprintf_r+0x694> @ imm = #0x3ce
 8062726: 9b0a         	ldr	r3, [sp, #0x28]
 8062728: f8c8 6000    	str.w	r6, [r8]
 806272c: 441c         	add	r4, r3
 806272e: f8c8 3004    	str.w	r3, [r8, #0x4]
 8062732: 9b22         	ldr	r3, [sp, #0x88]
 8062734: 9423         	str	r4, [sp, #0x8c]
 8062736: 3301         	adds	r3, #0x1
 8062738: 2b07         	cmp	r3, #0x7
 806273a: 9322         	str	r3, [sp, #0x88]
 806273c: f300 834c    	bgt.w	0x8062dd8 <_vfprintf_r+0x978> @ imm = #0x698
 8062740: f108 0808    	add.w	r8, r8, #0x8
 8062744: 9b07         	ldr	r3, [sp, #0x1c]
 8062746: 0759         	lsls	r1, r3, #0x1d
 8062748: d505         	bpl	0x8062756 <_vfprintf_r+0x2f6> @ imm = #0xa
 806274a: 9b08         	ldr	r3, [sp, #0x20]
 806274c: 9a06         	ldr	r2, [sp, #0x18]
 806274e: 1a9d         	subs	r5, r3, r2
 8062750: 2d00         	cmp	r5, #0x0
 8062752: f300 83af    	bgt.w	0x8062eb4 <_vfprintf_r+0xa54> @ imm = #0x75e
 8062756: 9906         	ldr	r1, [sp, #0x18]
 8062758: e9dd 2308    	ldrd	r2, r3, [sp, #32]
 806275c: 428a         	cmp	r2, r1
 806275e: bfac         	ite	ge
 8062760: 189b         	addge	r3, r3, r2
 8062762: 185b         	addlt	r3, r3, r1
 8062764: 9309         	str	r3, [sp, #0x24]
 8062766: 2c00         	cmp	r4, #0x0
 8062768: f040 82de    	bne.w	0x8062d28 <_vfprintf_r+0x8c8> @ imm = #0x5bc
 806276c: 2300         	movs	r3, #0x0
 806276e: f10d 08b8    	add.w	r8, sp, #0xb8
 8062772: 9322         	str	r3, [sp, #0x88]
 8062774: e6ba         	b	0x80624ec <_vfprintf_r+0x8c> @ imm = #-0x28c
 8062776: 920d         	str	r2, [sp, #0x34]
 8062778: 2b00         	cmp	r3, #0x0
 806277a: f041 8055    	bne.w	0x8063828 <_vfprintf_r+0x13c8> @ imm = #0x10aa
 806277e: 9b0c         	ldr	r3, [sp, #0x30]
 8062780: 3307         	adds	r3, #0x7
 8062782: f023 0207    	bic	r2, r3, #0x7
 8062786: e8f2 3402    	ldrd	r3, r4, [r2], #8
 806278a: e9cd 3410    	strd	r3, r4, [sp, #64]
 806278e: e9dd 3410    	ldrd	r3, r4, [sp, #64]
 8062792: 920c         	str	r2, [sp, #0x30]
 8062794: f04f 32ff    	mov.w	r2, #0xffffffff
 8062798: f024 4400    	bic	r4, r4, #0x80000000
 806279c: 461e         	mov	r6, r3
 806279e: 4618         	mov	r0, r3
 80627a0: 4bb6         	ldr	r3, [pc, #0x2d8]        @ 0x8062a7c <_vfprintf_r+0x61c>
 80627a2: 4621         	mov	r1, r4
 80627a4: f006 fab8    	bl	0x8068d18 <__unorddf2>  @ imm = #0x6570
 80627a8: 2800         	cmp	r0, #0x0
 80627aa: f040 84f7    	bne.w	0x806319c <_vfprintf_r+0xd3c> @ imm = #0x9ee
 80627ae: 4630         	mov	r0, r6
 80627b0: 4621         	mov	r1, r4
 80627b2: f04f 32ff    	mov.w	r2, #0xffffffff
 80627b6: 4bb1         	ldr	r3, [pc, #0x2c4]        @ 0x8062a7c <_vfprintf_r+0x61c>
 80627b8: f006 fa90    	bl	0x8068cdc <__aeabi_dcmple> @ imm = #0x6520
 80627bc: 2800         	cmp	r0, #0x0
 80627be: f040 84ed    	bne.w	0x806319c <_vfprintf_r+0xd3c> @ imm = #0x9da
 80627c2: 2200         	movs	r2, #0x0
 80627c4: 2300         	movs	r3, #0x0
 80627c6: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 80627ca: f006 fa7d    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x64fa
 80627ce: 2800         	cmp	r0, #0x0
 80627d0: f040 86de    	bne.w	0x8063590 <_vfprintf_r+0x1130> @ imm = #0xdbc
 80627d4: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 80627d8: f02b 0380    	bic	r3, r11, #0x80
 80627dc: 4ea8         	ldr	r6, [pc, #0x2a0]        @ 0x8062a80 <_vfprintf_r+0x620>
 80627de: 9307         	str	r3, [sp, #0x1c]
 80627e0: 4ba8         	ldr	r3, [pc, #0x2a0]        @ 0x8062a84 <_vfprintf_r+0x624>
 80627e2: 9a0d         	ldr	r2, [sp, #0x34]
 80627e4: 2500         	movs	r5, #0x0
 80627e6: 2a47         	cmp	r2, #0x47
 80627e8: bfc8         	it	gt
 80627ea: 461e         	movgt	r6, r3
 80627ec: 2303         	movs	r3, #0x3
 80627ee: 950e         	str	r5, [sp, #0x38]
 80627f0: 9306         	str	r3, [sp, #0x18]
 80627f2: 930a         	str	r3, [sp, #0x28]
 80627f4: 2c00         	cmp	r4, #0x0
 80627f6: f43f af50    	beq.w	0x806269a <_vfprintf_r+0x23a> @ imm = #-0x160
 80627fa: 9b06         	ldr	r3, [sp, #0x18]
 80627fc: 3301         	adds	r3, #0x1
 80627fe: 9306         	str	r3, [sp, #0x18]
 8062800: e74b         	b	0x806269a <_vfprintf_r+0x23a> @ imm = #-0x16a
 8062802: 4650         	mov	r0, r10
 8062804: f002 fb38    	bl	0x8064e78 <__sinit>     @ imm = #0x2670
 8062808: e642         	b	0x8062490 <_vfprintf_r+0x30> @ imm = #-0x37c
 806280a: 920d         	str	r2, [sp, #0x34]
 806280c: 2b00         	cmp	r3, #0x0
 806280e: f040 87ff    	bne.w	0x8063810 <_vfprintf_r+0x13b0> @ imm = #0xffe
 8062812: f01b 0f20    	tst.w	r11, #0x20
 8062816: 9b0c         	ldr	r3, [sp, #0x30]
 8062818: f000 8158    	beq.w	0x8062acc <_vfprintf_r+0x66c> @ imm = #0x2b0
 806281c: 3307         	adds	r3, #0x7
 806281e: f023 0307    	bic	r3, r3, #0x7
 8062822: 461a         	mov	r2, r3
 8062824: 685b         	ldr	r3, [r3, #0x4]
 8062826: f852 0b08    	ldr	r0, [r2], #8
 806282a: 4619         	mov	r1, r3
 806282c: 920c         	str	r2, [sp, #0x30]
 806282e: 2b00         	cmp	r3, #0x0
 8062830: f2c0 8485    	blt.w	0x806313e <_vfprintf_r+0xcde> @ imm = #0x90a
 8062834: 1c6b         	adds	r3, r5, #0x1
 8062836: f000 837d    	beq.w	0x8062f34 <_vfprintf_r+0xad4> @ imm = #0x6fa
 806283a: f02b 0380    	bic	r3, r11, #0x80
 806283e: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 8062842: 9307         	str	r3, [sp, #0x1c]
 8062844: ea50 0301    	orrs.w	r3, r0, r1
 8062848: f040 87c9    	bne.w	0x80637de <_vfprintf_r+0x137e> @ imm = #0xf92
 806284c: 1e2b         	subs	r3, r5, #0x0
 806284e: bf18         	it	ne
 8062850: 2301         	movne	r3, #0x1
 8062852: 2d00         	cmp	r5, #0x0
 8062854: f040 87c3    	bne.w	0x80637de <_vfprintf_r+0x137e> @ imm = #0xf86
 8062858: 461d         	mov	r5, r3
 806285a: ae2e         	add	r6, sp, #0xb8
 806285c: 930a         	str	r3, [sp, #0x28]
 806285e: e057         	b	0x8062910 <_vfprintf_r+0x4b0> @ imm = #0xae
 8062860: 9a0c         	ldr	r2, [sp, #0x30]
 8062862: f852 1b04    	ldr	r1, [r2], #4
 8062866: 2900         	cmp	r1, #0x0
 8062868: 9108         	str	r1, [sp, #0x20]
 806286a: f280 8493    	bge.w	0x8063194 <_vfprintf_r+0xd34> @ imm = #0x926
 806286e: 9908         	ldr	r1, [sp, #0x20]
 8062870: 920c         	str	r2, [sp, #0x30]
 8062872: 4249         	rsbs	r1, r1, #0
 8062874: 9108         	str	r1, [sp, #0x20]
 8062876: f04b 0b04    	orr	r11, r11, #0x4
 806287a: 783a         	ldrb	r2, [r7]
 806287c: e661         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x33e
 806287e: 9b0c         	ldr	r3, [sp, #0x30]
 8062880: ae24         	add	r6, sp, #0x90
 8062882: 920d         	str	r2, [sp, #0x34]
 8062884: 2200         	movs	r2, #0x0
 8062886: f88d 2067    	strb.w	r2, [sp, #0x67]
 806288a: f853 2b04    	ldr	r2, [r3], #4
 806288e: 930c         	str	r3, [sp, #0x30]
 8062890: 2301         	movs	r3, #0x1
 8062892: f88d 2090    	strb.w	r2, [sp, #0x90]
 8062896: 9306         	str	r3, [sp, #0x18]
 8062898: 930a         	str	r3, [sp, #0x28]
 806289a: e6fa         	b	0x8062692 <_vfprintf_r+0x232> @ imm = #-0x20c
 806289c: 920d         	str	r2, [sp, #0x34]
 806289e: 2b00         	cmp	r3, #0x0
 80628a0: f040 87be    	bne.w	0x8063820 <_vfprintf_r+0x13c0> @ imm = #0xf7c
 80628a4: 4b78         	ldr	r3, [pc, #0x1e0]        @ 0x8062a88 <_vfprintf_r+0x628>
 80628a6: f01b 0120    	ands	r1, r11, #0x20
 80628aa: 9313         	str	r3, [sp, #0x4c]
 80628ac: d05d         	beq	0x806296a <_vfprintf_r+0x50a> @ imm = #0xba
 80628ae: 9b0c         	ldr	r3, [sp, #0x30]
 80628b0: 3307         	adds	r3, #0x7
 80628b2: f023 0307    	bic	r3, r3, #0x7
 80628b6: 6859         	ldr	r1, [r3, #0x4]
 80628b8: f853 0b08    	ldr	r0, [r3], #8
 80628bc: 930c         	str	r3, [sp, #0x30]
 80628be: f01b 0f01    	tst.w	r11, #0x1
 80628c2: d003         	beq	0x80628cc <_vfprintf_r+0x46c> @ imm = #0x6
 80628c4: ea50 0301    	orrs.w	r3, r0, r1
 80628c8: f040 84ab    	bne.w	0x8063222 <_vfprintf_r+0xdc2> @ imm = #0x956
 80628cc: 2302         	movs	r3, #0x2
 80628ce: 2400         	movs	r4, #0x0
 80628d0: f88d 4067    	strb.w	r4, [sp, #0x67]
 80628d4: 1c6e         	adds	r6, r5, #0x1
 80628d6: f000 81f1    	beq.w	0x8062cbc <_vfprintf_r+0x85c> @ imm = #0x3e2
 80628da: f02b 0280    	bic	r2, r11, #0x80
 80628de: 9207         	str	r2, [sp, #0x1c]
 80628e0: ea50 0201    	orrs.w	r2, r0, r1
 80628e4: f040 81e8    	bne.w	0x8062cb8 <_vfprintf_r+0x858> @ imm = #0x3d0
 80628e8: 1e2a         	subs	r2, r5, #0x0
 80628ea: bf18         	it	ne
 80628ec: 2201         	movne	r2, #0x1
 80628ee: 2d00         	cmp	r5, #0x0
 80628f0: f040 81e2    	bne.w	0x8062cb8 <_vfprintf_r+0x858> @ imm = #0x3c4
 80628f4: 2b00         	cmp	r3, #0x0
 80628f6: f040 8317    	bne.w	0x8062f28 <_vfprintf_r+0xac8> @ imm = #0x62e
 80628fa: f01b 0201    	ands	r2, r11, #0x1
 80628fe: 461d         	mov	r5, r3
 8062900: 920a         	str	r2, [sp, #0x28]
 8062902: f000 83a5    	beq.w	0x8063050 <_vfprintf_r+0xbf0> @ imm = #0x74a
 8062906: 2330         	movs	r3, #0x30
 8062908: f10d 06b7    	add.w	r6, sp, #0xb7
 806290c: f88d 30b7    	strb.w	r3, [sp, #0xb7]
 8062910: 9b0a         	ldr	r3, [sp, #0x28]
 8062912: 42ab         	cmp	r3, r5
 8062914: bfb8         	it	lt
 8062916: 462b         	movlt	r3, r5
 8062918: 9306         	str	r3, [sp, #0x18]
 806291a: 2300         	movs	r3, #0x0
 806291c: 930e         	str	r3, [sp, #0x38]
 806291e: e769         	b	0x80627f4 <_vfprintf_r+0x394> @ imm = #-0x12e
 8062920: f04b 0b40    	orr	r11, r11, #0x40
 8062924: 783a         	ldrb	r2, [r7]
 8062926: e60c         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x3e8
 8062928: 463c         	mov	r4, r7
 806292a: f814 2b01    	ldrb	r2, [r4], #1
 806292e: 2a2a         	cmp	r2, #0x2a
 8062930: f000 87db    	beq.w	0x80638ea <_vfprintf_r+0x148a> @ imm = #0xfb6
 8062934: f1a2 0130    	sub.w	r1, r2, #0x30
 8062938: 4627         	mov	r7, r4
 806293a: 2500         	movs	r5, #0x0
 806293c: 2909         	cmp	r1, #0x9
 806293e: f63f ae01    	bhi.w	0x8062544 <_vfprintf_r+0xe4> @ imm = #-0x3fe
 8062942: eb05 0585    	add.w	r5, r5, r5, lsl #2
 8062946: f817 2b01    	ldrb	r2, [r7], #1
 806294a: eb01 0545    	add.w	r5, r1, r5, lsl #1
 806294e: f1a2 0130    	sub.w	r1, r2, #0x30
 8062952: 2909         	cmp	r1, #0x9
 8062954: d9f5         	bls	0x8062942 <_vfprintf_r+0x4e2> @ imm = #-0x16
 8062956: e5f5         	b	0x8062544 <_vfprintf_r+0xe4> @ imm = #-0x416
 8062958: 920d         	str	r2, [sp, #0x34]
 806295a: 2b00         	cmp	r3, #0x0
 806295c: f040 8768    	bne.w	0x8063830 <_vfprintf_r+0x13d0> @ imm = #0xed0
 8062960: 4b4a         	ldr	r3, [pc, #0x128]        @ 0x8062a8c <_vfprintf_r+0x62c>
 8062962: f01b 0120    	ands	r1, r11, #0x20
 8062966: 9313         	str	r3, [sp, #0x4c]
 8062968: d1a1         	bne	0x80628ae <_vfprintf_r+0x44e> @ imm = #-0xbe
 806296a: f01b 0310    	ands	r3, r11, #0x10
 806296e: f040 83f1    	bne.w	0x8063154 <_vfprintf_r+0xcf4> @ imm = #0x7e2
 8062972: f01b 0140    	ands	r1, r11, #0x40
 8062976: f000 83ed    	beq.w	0x8063154 <_vfprintf_r+0xcf4> @ imm = #0x7da
 806297a: 9a0c         	ldr	r2, [sp, #0x30]
 806297c: 4619         	mov	r1, r3
 806297e: f852 0b04    	ldr	r0, [r2], #4
 8062982: b280         	uxth	r0, r0
 8062984: 920c         	str	r2, [sp, #0x30]
 8062986: e79a         	b	0x80628be <_vfprintf_r+0x45e> @ imm = #-0xcc
 8062988: 9c0c         	ldr	r4, [sp, #0x30]
 806298a: f04f 0900    	mov.w	r9, #0x0
 806298e: 920d         	str	r2, [sp, #0x34]
 8062990: f854 6b04    	ldr	r6, [r4], #4
 8062994: f88d 9067    	strb.w	r9, [sp, #0x67]
 8062998: 2e00         	cmp	r6, #0x0
 806299a: f000 8471    	beq.w	0x8063280 <_vfprintf_r+0xe20> @ imm = #0x8e2
 806299e: 1c6b         	adds	r3, r5, #0x1
 80629a0: f000 855a    	beq.w	0x8063458 <_vfprintf_r+0xff8> @ imm = #0xab4
 80629a4: 462a         	mov	r2, r5
 80629a6: 4649         	mov	r1, r9
 80629a8: 4630         	mov	r0, r6
 80629aa: f002 ff7d    	bl	0x80658a8 <memchr>      @ imm = #0x2efa
 80629ae: 2800         	cmp	r0, #0x0
 80629b0: f000 86d2    	beq.w	0x8063758 <_vfprintf_r+0x12f8> @ imm = #0xda4
 80629b4: 1b83         	subs	r3, r0, r6
 80629b6: 940c         	str	r4, [sp, #0x30]
 80629b8: 464d         	mov	r5, r9
 80629ba: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 80629be: 930a         	str	r3, [sp, #0x28]
 80629c0: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 80629c4: f8cd b01c    	str.w	r11, [sp, #0x1c]
 80629c8: 9306         	str	r3, [sp, #0x18]
 80629ca: f8cd 9038    	str.w	r9, [sp, #0x38]
 80629ce: e711         	b	0x80627f4 <_vfprintf_r+0x394> @ imm = #-0x1de
 80629d0: f04b 0b20    	orr	r11, r11, #0x20
 80629d4: 783a         	ldrb	r2, [r7]
 80629d6: e5b4         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x498
 80629d8: 9b0c         	ldr	r3, [sp, #0x30]
 80629da: 2278         	movs	r2, #0x78
 80629dc: f04b 0b02    	orr	r11, r11, #0x2
 80629e0: 2100         	movs	r1, #0x0
 80629e2: f853 0b04    	ldr	r0, [r3], #4
 80629e6: f88d 2069    	strb.w	r2, [sp, #0x69]
 80629ea: 930c         	str	r3, [sp, #0x30]
 80629ec: 2330         	movs	r3, #0x30
 80629ee: 920d         	str	r2, [sp, #0x34]
 80629f0: f88d 3068    	strb.w	r3, [sp, #0x68]
 80629f4: 4b25         	ldr	r3, [pc, #0x94]         @ 0x8062a8c <_vfprintf_r+0x62c>
 80629f6: 9313         	str	r3, [sp, #0x4c]
 80629f8: 2302         	movs	r3, #0x2
 80629fa: e768         	b	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x130
 80629fc: 2b00         	cmp	r3, #0x0
 80629fe: f040 870b    	bne.w	0x8063818 <_vfprintf_r+0x13b8> @ imm = #0xe16
 8062a02: f01b 0f20    	tst.w	r11, #0x20
 8062a06: f040 8402    	bne.w	0x806320e <_vfprintf_r+0xdae> @ imm = #0x804
 8062a0a: f01b 0f10    	tst.w	r11, #0x10
 8062a0e: f040 846b    	bne.w	0x80632e8 <_vfprintf_r+0xe88> @ imm = #0x8d6
 8062a12: f01b 0f40    	tst.w	r11, #0x40
 8062a16: f000 8467    	beq.w	0x80632e8 <_vfprintf_r+0xe88> @ imm = #0x8ce
 8062a1a: 9b0c         	ldr	r3, [sp, #0x30]
 8062a1c: 9909         	ldr	r1, [sp, #0x24]
 8062a1e: f853 2b04    	ldr	r2, [r3], #4
 8062a22: 8011         	strh	r1, [r2]
 8062a24: 930c         	str	r3, [sp, #0x30]
 8062a26: e561         	b	0x80624ec <_vfprintf_r+0x8c> @ imm = #-0x53e
 8062a28: 783a         	ldrb	r2, [r7]
 8062a2a: 2a6c         	cmp	r2, #0x6c
 8062a2c: f000 8422    	beq.w	0x8063274 <_vfprintf_r+0xe14> @ imm = #0x844
 8062a30: f04b 0b10    	orr	r11, r11, #0x10
 8062a34: e585         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x4f6
 8062a36: f04b 0b10    	orr	r11, r11, #0x10
 8062a3a: 920d         	str	r2, [sp, #0x34]
 8062a3c: f01b 0120    	ands	r1, r11, #0x20
 8062a40: 9a0c         	ldr	r2, [sp, #0x30]
 8062a42: f000 835e    	beq.w	0x8063102 <_vfprintf_r+0xca2> @ imm = #0x6bc
 8062a46: 3207         	adds	r2, #0x7
 8062a48: 2301         	movs	r3, #0x1
 8062a4a: f022 0207    	bic	r2, r2, #0x7
 8062a4e: 6851         	ldr	r1, [r2, #0x4]
 8062a50: f852 0b08    	ldr	r0, [r2], #8
 8062a54: 920c         	str	r2, [sp, #0x30]
 8062a56: e73a         	b	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x18c
 8062a58: f04b 0b10    	orr	r11, r11, #0x10
 8062a5c: 920d         	str	r2, [sp, #0x34]
 8062a5e: f01b 0120    	ands	r1, r11, #0x20
 8062a62: f000 837d    	beq.w	0x8063160 <_vfprintf_r+0xd00> @ imm = #0x6fa
 8062a66: 9a0c         	ldr	r2, [sp, #0x30]
 8062a68: 2300         	movs	r3, #0x0
 8062a6a: 3207         	adds	r2, #0x7
 8062a6c: f022 0207    	bic	r2, r2, #0x7
 8062a70: 6851         	ldr	r1, [r2, #0x4]
 8062a72: f852 0b08    	ldr	r0, [r2], #8
 8062a76: 920c         	str	r2, [sp, #0x30]
 8062a78: e729         	b	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x1ae
 8062a7a: bf00         	nop

08062a7c <$d>:
 8062a7c: ff ff ef 7f  	.word	0x7fefffff
 8062a80: cc a0 06 08  	.word	0x0806a0cc
 8062a84: d0 a0 06 08  	.word	0x0806a0d0
 8062a88: f0 a0 06 08  	.word	0x0806a0f0
 8062a8c: dc a0 06 08  	.word	0x0806a0dc

08062a90 <$t>:
 8062a90: f04b 0b08    	orr	r11, r11, #0x8
 8062a94: 783a         	ldrb	r2, [r7]
 8062a96: e554         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x558
 8062a98: 783a         	ldrb	r2, [r7]
 8062a9a: 2301         	movs	r3, #0x1
 8062a9c: 202b         	movs	r0, #0x2b
 8062a9e: e550         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x560
 8062aa0: f04b 0b01    	orr	r11, r11, #0x1
 8062aa4: 783a         	ldrb	r2, [r7]
 8062aa6: e54c         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x568
 8062aa8: 783a         	ldrb	r2, [r7]
 8062aaa: 2800         	cmp	r0, #0x0
 8062aac: f47f ad49    	bne.w	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x56e
 8062ab0: 2301         	movs	r3, #0x1
 8062ab2: 2020         	movs	r0, #0x20
 8062ab4: e545         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x576
 8062ab6: 920d         	str	r2, [sp, #0x34]
 8062ab8: 2b00         	cmp	r3, #0x0
 8062aba: f040 86a5    	bne.w	0x8063808 <_vfprintf_r+0x13a8> @ imm = #0xd4a
 8062abe: f04b 0b10    	orr	r11, r11, #0x10
 8062ac2: 9b0c         	ldr	r3, [sp, #0x30]
 8062ac4: f01b 0f20    	tst.w	r11, #0x20
 8062ac8: f47f aea8    	bne.w	0x806281c <_vfprintf_r+0x3bc> @ imm = #-0x2b0
 8062acc: f853 0b04    	ldr	r0, [r3], #4
 8062ad0: f01b 0f10    	tst.w	r11, #0x10
 8062ad4: 930c         	str	r3, [sp, #0x30]
 8062ad6: f040 832d    	bne.w	0x8063134 <_vfprintf_r+0xcd4> @ imm = #0x65a
 8062ada: f01b 0f40    	tst.w	r11, #0x40
 8062ade: f000 8329    	beq.w	0x8063134 <_vfprintf_r+0xcd4> @ imm = #0x652
 8062ae2: f340 31c0    	sbfx	r1, r0, #0xf, #0x1
 8062ae6: b200         	sxth	r0, r0
 8062ae8: 460b         	mov	r3, r1
 8062aea: e6a0         	b	0x806282e <_vfprintf_r+0x3ce> @ imm = #-0x2c0
 8062aec: f04b 0b80    	orr	r11, r11, #0x80
 8062af0: 783a         	ldrb	r2, [r7]
 8062af2: e526         	b	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x5b4
 8062af4: 9b0d         	ldr	r3, [sp, #0x34]
 8062af6: 2b65         	cmp	r3, #0x65
 8062af8: f340 8128    	ble.w	0x8062d4c <_vfprintf_r+0x8ec> @ imm = #0x250
 8062afc: 2200         	movs	r2, #0x0
 8062afe: 2300         	movs	r3, #0x0
 8062b00: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 8062b04: f006 f8d6    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x61ac
 8062b08: 2800         	cmp	r0, #0x0
 8062b0a: f000 8224    	beq.w	0x8062f56 <_vfprintf_r+0xaf6> @ imm = #0x448
 8062b0e: 9b22         	ldr	r3, [sp, #0x88]
 8062b10: 3401         	adds	r4, #0x1
 8062b12: 4abf         	ldr	r2, [pc, #0x2fc]        @ 0x8062e10 <_vfprintf_r+0x9b0>
 8062b14: 3301         	adds	r3, #0x1
 8062b16: 9423         	str	r4, [sp, #0x8c]
 8062b18: f8c8 2000    	str.w	r2, [r8]
 8062b1c: 2201         	movs	r2, #0x1
 8062b1e: 2b07         	cmp	r3, #0x7
 8062b20: 9322         	str	r3, [sp, #0x88]
 8062b22: f8c8 2004    	str.w	r2, [r8, #0x4]
 8062b26: f300 8450    	bgt.w	0x80633ca <_vfprintf_r+0xf6a> @ imm = #0x8a0
 8062b2a: f108 0808    	add.w	r8, r8, #0x8
 8062b2e: 9b1b         	ldr	r3, [sp, #0x6c]
 8062b30: 9a0f         	ldr	r2, [sp, #0x3c]
 8062b32: 4293         	cmp	r3, r2
 8062b34: f280 8329    	bge.w	0x806318a <_vfprintf_r+0xd2a> @ imm = #0x652
 8062b38: 9b12         	ldr	r3, [sp, #0x48]
 8062b3a: 9a14         	ldr	r2, [sp, #0x50]
 8062b3c: 441c         	add	r4, r3
 8062b3e: e9c8 2300    	strd	r2, r3, [r8]
 8062b42: 9b22         	ldr	r3, [sp, #0x88]
 8062b44: 9423         	str	r4, [sp, #0x8c]
 8062b46: 3301         	adds	r3, #0x1
 8062b48: 2b07         	cmp	r3, #0x7
 8062b4a: 9322         	str	r3, [sp, #0x88]
 8062b4c: f300 8386    	bgt.w	0x806325c <_vfprintf_r+0xdfc> @ imm = #0x70c
 8062b50: f108 0808    	add.w	r8, r8, #0x8
 8062b54: 9b0f         	ldr	r3, [sp, #0x3c]
 8062b56: 1e5d         	subs	r5, r3, #0x1
 8062b58: 2d00         	cmp	r5, #0x0
 8062b5a: f77f adf3    	ble.w	0x8062744 <_vfprintf_r+0x2e4> @ imm = #-0x41a
 8062b5e: 2d10         	cmp	r5, #0x10
 8062b60: 9b22         	ldr	r3, [sp, #0x88]
 8062b62: f8df 92b0    	ldr.w	r9, [pc, #0x2b0]        @ 0x8062e14 <_vfprintf_r+0x9b4>
 8062b66: f340 8424    	ble.w	0x80633b2 <_vfprintf_r+0xf52> @ imm = #0x848
 8062b6a: 46bb         	mov	r11, r7
 8062b6c: 2610         	movs	r6, #0x10
 8062b6e: 464f         	mov	r7, r9
 8062b70: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 8062b74: e003         	b	0x8062b7e <_vfprintf_r+0x71e> @ imm = #0x6
 8062b76: 3d10         	subs	r5, #0x10
 8062b78: 2d10         	cmp	r5, #0x10
 8062b7a: f340 8418    	ble.w	0x80633ae <_vfprintf_r+0xf4e> @ imm = #0x830
 8062b7e: 3301         	adds	r3, #0x1
 8062b80: 3410         	adds	r4, #0x10
 8062b82: 2b07         	cmp	r3, #0x7
 8062b84: e9c8 7600    	strd	r7, r6, [r8]
 8062b88: e9cd 3422    	strd	r3, r4, [sp, #136]
 8062b8c: f108 0808    	add.w	r8, r8, #0x8
 8062b90: ddf1         	ble	0x8062b76 <_vfprintf_r+0x716> @ imm = #-0x1e
 8062b92: aa21         	add	r2, sp, #0x84
 8062b94: 4651         	mov	r1, r10
 8062b96: 4648         	mov	r0, r9
 8062b98: f003 fcc4    	bl	0x8066524 <__sprint_r>  @ imm = #0x3988
 8062b9c: 2800         	cmp	r0, #0x0
 8062b9e: f040 80cb    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #0x196
 8062ba2: f10d 08b8    	add.w	r8, sp, #0xb8
 8062ba6: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 8062baa: e7e4         	b	0x8062b76 <_vfprintf_r+0x716> @ imm = #-0x38
 8062bac: 9b08         	ldr	r3, [sp, #0x20]
 8062bae: 9a06         	ldr	r2, [sp, #0x18]
 8062bb0: eba3 0b02    	sub.w	r11, r3, r2
 8062bb4: f1bb 0f00    	cmp.w	r11, #0x0
 8062bb8: f77f adac    	ble.w	0x8062714 <_vfprintf_r+0x2b4> @ imm = #-0x4a8
 8062bbc: f1bb 0f10    	cmp.w	r11, #0x10
 8062bc0: 9a22         	ldr	r2, [sp, #0x88]
 8062bc2: f8df 9250    	ldr.w	r9, [pc, #0x250]        @ 0x8062e14 <_vfprintf_r+0x9b4>
 8062bc6: dd28         	ble	0x8062c1a <_vfprintf_r+0x7ba> @ imm = #0x50
 8062bc8: 4621         	mov	r1, r4
 8062bca: 2310         	movs	r3, #0x10
 8062bcc: 464c         	mov	r4, r9
 8062bce: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 8062bd2: e004         	b	0x8062bde <_vfprintf_r+0x77e> @ imm = #0x8
 8062bd4: f1ab 0b10    	sub.w	r11, r11, #0x10
 8062bd8: f1bb 0f10    	cmp.w	r11, #0x10
 8062bdc: dd1b         	ble	0x8062c16 <_vfprintf_r+0x7b6> @ imm = #0x36
 8062bde: 3201         	adds	r2, #0x1
 8062be0: 3110         	adds	r1, #0x10
 8062be2: 2a07         	cmp	r2, #0x7
 8062be4: e9c8 4300    	strd	r4, r3, [r8]
 8062be8: e9cd 2122    	strd	r2, r1, [sp, #136]
 8062bec: f108 0808    	add.w	r8, r8, #0x8
 8062bf0: ddf0         	ble	0x8062bd4 <_vfprintf_r+0x774> @ imm = #-0x20
 8062bf2: aa21         	add	r2, sp, #0x84
 8062bf4: 4651         	mov	r1, r10
 8062bf6: 4648         	mov	r0, r9
 8062bf8: f10d 08b8    	add.w	r8, sp, #0xb8
 8062bfc: f003 fc92    	bl	0x8066524 <__sprint_r>  @ imm = #0x3924
 8062c00: 2800         	cmp	r0, #0x0
 8062c02: f040 8099    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #0x132
 8062c06: f1ab 0b10    	sub.w	r11, r11, #0x10
 8062c0a: 2310         	movs	r3, #0x10
 8062c0c: f1bb 0f10    	cmp.w	r11, #0x10
 8062c10: e9dd 2122    	ldrd	r2, r1, [sp, #136]
 8062c14: dce3         	bgt	0x8062bde <_vfprintf_r+0x77e> @ imm = #-0x3a
 8062c16: 46a1         	mov	r9, r4
 8062c18: 460c         	mov	r4, r1
 8062c1a: 3201         	adds	r2, #0x1
 8062c1c: 445c         	add	r4, r11
 8062c1e: f8c8 9000    	str.w	r9, [r8]
 8062c22: 2a07         	cmp	r2, #0x7
 8062c24: f8c8 b004    	str.w	r11, [r8, #0x4]
 8062c28: e9cd 2422    	strd	r2, r4, [sp, #136]
 8062c2c: f300 83fa    	bgt.w	0x8063424 <_vfprintf_r+0xfc4> @ imm = #0x7f4
 8062c30: 9b0a         	ldr	r3, [sp, #0x28]
 8062c32: f108 0808    	add.w	r8, r8, #0x8
 8062c36: 1aed         	subs	r5, r5, r3
 8062c38: 2d00         	cmp	r5, #0x0
 8062c3a: f77f ad70    	ble.w	0x806271e <_vfprintf_r+0x2be> @ imm = #-0x520
 8062c3e: 2d10         	cmp	r5, #0x10
 8062c40: 9b22         	ldr	r3, [sp, #0x88]
 8062c42: f8df 91d0    	ldr.w	r9, [pc, #0x1d0]        @ 0x8062e14 <_vfprintf_r+0x9b4>
 8062c46: dd29         	ble	0x8062c9c <_vfprintf_r+0x83c> @ imm = #0x52
 8062c48: 464a         	mov	r2, r9
 8062c4a: 9615         	str	r6, [sp, #0x54]
 8062c4c: 46b9         	mov	r9, r7
 8062c4e: f04f 0b10    	mov.w	r11, #0x10
 8062c52: 4657         	mov	r7, r10
 8062c54: 9e0b         	ldr	r6, [sp, #0x2c]
 8062c56: 4692         	mov	r10, r2
 8062c58: e002         	b	0x8062c60 <_vfprintf_r+0x800> @ imm = #0x4
 8062c5a: 3d10         	subs	r5, #0x10
 8062c5c: 2d10         	cmp	r5, #0x10
 8062c5e: dd18         	ble	0x8062c92 <_vfprintf_r+0x832> @ imm = #0x30
 8062c60: 3301         	adds	r3, #0x1
 8062c62: 3410         	adds	r4, #0x10
 8062c64: 2b07         	cmp	r3, #0x7
 8062c66: e9c8 ab00    	strd	r10, r11, [r8]
 8062c6a: e9cd 3422    	strd	r3, r4, [sp, #136]
 8062c6e: f108 0808    	add.w	r8, r8, #0x8
 8062c72: ddf2         	ble	0x8062c5a <_vfprintf_r+0x7fa> @ imm = #-0x1c
 8062c74: aa21         	add	r2, sp, #0x84
 8062c76: 4639         	mov	r1, r7
 8062c78: 4630         	mov	r0, r6
 8062c7a: f10d 08b8    	add.w	r8, sp, #0xb8
 8062c7e: f003 fc51    	bl	0x8066524 <__sprint_r>  @ imm = #0x38a2
 8062c82: 2800         	cmp	r0, #0x0
 8062c84: f040 8154    	bne.w	0x8062f30 <_vfprintf_r+0xad0> @ imm = #0x2a8
 8062c88: 3d10         	subs	r5, #0x10
 8062c8a: 2d10         	cmp	r5, #0x10
 8062c8c: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 8062c90: dce6         	bgt	0x8062c60 <_vfprintf_r+0x800> @ imm = #-0x34
 8062c92: 4652         	mov	r2, r10
 8062c94: 9e15         	ldr	r6, [sp, #0x54]
 8062c96: 46ba         	mov	r10, r7
 8062c98: 464f         	mov	r7, r9
 8062c9a: 4691         	mov	r9, r2
 8062c9c: 3301         	adds	r3, #0x1
 8062c9e: 442c         	add	r4, r5
 8062ca0: f8c8 9000    	str.w	r9, [r8]
 8062ca4: 2b07         	cmp	r3, #0x7
 8062ca6: f8c8 5004    	str.w	r5, [r8, #0x4]
 8062caa: e9cd 3422    	strd	r3, r4, [sp, #136]
 8062cae: f300 821b    	bgt.w	0x80630e8 <_vfprintf_r+0xc88> @ imm = #0x436
 8062cb2: f108 0808    	add.w	r8, r8, #0x8
 8062cb6: e532         	b	0x806271e <_vfprintf_r+0x2be> @ imm = #-0x59c
 8062cb8: f8dd b01c    	ldr.w	r11, [sp, #0x1c]
 8062cbc: 2b01         	cmp	r3, #0x1
 8062cbe: f000 813b    	beq.w	0x8062f38 <_vfprintf_r+0xad8> @ imm = #0x276
 8062cc2: 2b02         	cmp	r3, #0x2
 8062cc4: ae2e         	add	r6, sp, #0xb8
 8062cc6: d112         	bne	0x8062cee <_vfprintf_r+0x88e> @ imm = #0x24
 8062cc8: 9a13         	ldr	r2, [sp, #0x4c]
 8062cca: f000 030f    	and	r3, r0, #0xf
 8062cce: 0900         	lsrs	r0, r0, #0x4
 8062cd0: 5cd3         	ldrb	r3, [r2, r3]
 8062cd2: ea40 7001    	orr.w	r0, r0, r1, lsl #28
 8062cd6: 0909         	lsrs	r1, r1, #0x4
 8062cd8: f806 3d01    	strb	r3, [r6, #-1]!
 8062cdc: ea50 0301    	orrs.w	r3, r0, r1
 8062ce0: d1f3         	bne	0x8062cca <_vfprintf_r+0x86a> @ imm = #-0x1a
 8062ce2: ab2e         	add	r3, sp, #0xb8
 8062ce4: f8cd b01c    	str.w	r11, [sp, #0x1c]
 8062ce8: 1b9b         	subs	r3, r3, r6
 8062cea: 930a         	str	r3, [sp, #0x28]
 8062cec: e610         	b	0x8062910 <_vfprintf_r+0x4b0> @ imm = #-0x3e0
 8062cee: f000 0307    	and	r3, r0, #0x7
 8062cf2: 08c0         	lsrs	r0, r0, #0x3
 8062cf4: 4632         	mov	r2, r6
 8062cf6: ea40 7041    	orr.w	r0, r0, r1, lsl #29
 8062cfa: 3330         	adds	r3, #0x30
 8062cfc: 08c9         	lsrs	r1, r1, #0x3
 8062cfe: f806 3d01    	strb	r3, [r6, #-1]!
 8062d02: ea50 0c01    	orrs.w	r12, r0, r1
 8062d06: d1f2         	bne	0x8062cee <_vfprintf_r+0x88e> @ imm = #-0x1c
 8062d08: 2b30         	cmp	r3, #0x30
 8062d0a: d0ea         	beq	0x8062ce2 <_vfprintf_r+0x882> @ imm = #-0x2c
 8062d0c: f01b 0f01    	tst.w	r11, #0x1
 8062d10: d0e7         	beq	0x8062ce2 <_vfprintf_r+0x882> @ imm = #-0x32
 8062d12: 2330         	movs	r3, #0x30
 8062d14: 3a02         	subs	r2, #0x2
 8062d16: f8cd b01c    	str.w	r11, [sp, #0x1c]
 8062d1a: f806 3c01    	strb	r3, [r6, #-1]
 8062d1e: ab2e         	add	r3, sp, #0xb8
 8062d20: 4616         	mov	r6, r2
 8062d22: 1a9b         	subs	r3, r3, r2
 8062d24: 930a         	str	r3, [sp, #0x28]
 8062d26: e5f3         	b	0x8062910 <_vfprintf_r+0x4b0> @ imm = #-0x41a
 8062d28: aa21         	add	r2, sp, #0x84
 8062d2a: 4651         	mov	r1, r10
 8062d2c: 980b         	ldr	r0, [sp, #0x2c]
 8062d2e: f003 fbf9    	bl	0x8066524 <__sprint_r>  @ imm = #0x37f2
 8062d32: 2800         	cmp	r0, #0x0
 8062d34: f43f ad1a    	beq.w	0x806276c <_vfprintf_r+0x30c> @ imm = #-0x5cc
 8062d38: 46d1         	mov	r9, r10
 8062d3a: f8b9 300c    	ldrh.w	r3, [r9, #0xc]
 8062d3e: 065a         	lsls	r2, r3, #0x19
 8062d40: f100 857a    	bmi.w	0x8063838 <_vfprintf_r+0x13d8> @ imm = #0xaf4
 8062d44: 9809         	ldr	r0, [sp, #0x24]
 8062d46: b03f         	add	sp, #0xfc
 8062d48: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8062d4c: 9b0f         	ldr	r3, [sp, #0x3c]
 8062d4e: 2b01         	cmp	r3, #0x1
 8062d50: f340 8180    	ble.w	0x8063054 <_vfprintf_r+0xbf4> @ imm = #0x300
 8062d54: 9d22         	ldr	r5, [sp, #0x88]
 8062d56: 3401         	adds	r4, #0x1
 8062d58: 2301         	movs	r3, #0x1
 8062d5a: f8c8 6000    	str.w	r6, [r8]
 8062d5e: 3501         	adds	r5, #0x1
 8062d60: 9423         	str	r4, [sp, #0x8c]
 8062d62: f8c8 3004    	str.w	r3, [r8, #0x4]
 8062d66: 2d07         	cmp	r5, #0x7
 8062d68: 9522         	str	r5, [sp, #0x88]
 8062d6a: f300 82d2    	bgt.w	0x8063312 <_vfprintf_r+0xeb2> @ imm = #0x5a4
 8062d6e: f108 0808    	add.w	r8, r8, #0x8
 8062d72: 9b12         	ldr	r3, [sp, #0x48]
 8062d74: 3501         	adds	r5, #0x1
 8062d76: 9a14         	ldr	r2, [sp, #0x50]
 8062d78: 441c         	add	r4, r3
 8062d7a: 2d07         	cmp	r5, #0x7
 8062d7c: e9c8 2300    	strd	r2, r3, [r8]
 8062d80: e9cd 5422    	strd	r5, r4, [sp, #136]
 8062d84: f300 82b8    	bgt.w	0x80632f8 <_vfprintf_r+0xe98> @ imm = #0x570
 8062d88: f108 0808    	add.w	r8, r8, #0x8
 8062d8c: 2200         	movs	r2, #0x0
 8062d8e: 2300         	movs	r3, #0x0
 8062d90: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 8062d94: f005 ff8e    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x5f1c
 8062d98: 2800         	cmp	r0, #0x0
 8062d9a: f040 8179    	bne.w	0x8063090 <_vfprintf_r+0xc30> @ imm = #0x2f2
 8062d9e: 9b0f         	ldr	r3, [sp, #0x3c]
 8062da0: 3501         	adds	r5, #0x1
 8062da2: 3601         	adds	r6, #0x1
 8062da4: 3b01         	subs	r3, #0x1
 8062da6: 2d07         	cmp	r5, #0x7
 8062da8: f8c8 6000    	str.w	r6, [r8]
 8062dac: 441c         	add	r4, r3
 8062dae: 9522         	str	r5, [sp, #0x88]
 8062db0: f8c8 3004    	str.w	r3, [r8, #0x4]
 8062db4: 9423         	str	r4, [sp, #0x8c]
 8062db6: f300 815e    	bgt.w	0x8063076 <_vfprintf_r+0xc16> @ imm = #0x2bc
 8062dba: f108 0808    	add.w	r8, r8, #0x8
 8062dbe: 9b16         	ldr	r3, [sp, #0x58]
 8062dc0: 3501         	adds	r5, #0x1
 8062dc2: 441c         	add	r4, r3
 8062dc4: f8c8 3004    	str.w	r3, [r8, #0x4]
 8062dc8: 2d07         	cmp	r5, #0x7
 8062dca: ab1d         	add	r3, sp, #0x74
 8062dcc: e9cd 5422    	strd	r5, r4, [sp, #136]
 8062dd0: f8c8 3000    	str.w	r3, [r8]
 8062dd4: f77f acb4    	ble.w	0x8062740 <_vfprintf_r+0x2e0> @ imm = #-0x698
 8062dd8: aa21         	add	r2, sp, #0x84
 8062dda: 4651         	mov	r1, r10
 8062ddc: 980b         	ldr	r0, [sp, #0x2c]
 8062dde: f003 fba1    	bl	0x8066524 <__sprint_r>  @ imm = #0x3742
 8062de2: 2800         	cmp	r0, #0x0
 8062de4: d1a8         	bne	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0xb0
 8062de6: 9c23         	ldr	r4, [sp, #0x8c]
 8062de8: f10d 08b8    	add.w	r8, sp, #0xb8
 8062dec: e4aa         	b	0x8062744 <_vfprintf_r+0x2e4> @ imm = #-0x6ac
 8062dee: f1b9 0f10    	cmp.w	r9, #0x10
 8062df2: e9dd 2122    	ldrd	r2, r1, [sp, #136]
 8062df6: dd33         	ble	0x8062e60 <_vfprintf_r+0xa00> @ imm = #0x66
 8062df8: 9315         	str	r3, [sp, #0x54]
 8062dfa: 463b         	mov	r3, r7
 8062dfc: 9617         	str	r6, [sp, #0x5c]
 8062dfe: 4657         	mov	r7, r10
 8062e00: 464e         	mov	r6, r9
 8062e02: 2410         	movs	r4, #0x10
 8062e04: 46a9         	mov	r9, r5
 8062e06: 4608         	mov	r0, r1
 8062e08: 9d0b         	ldr	r5, [sp, #0x2c]
 8062e0a: 469a         	mov	r10, r3
 8062e0c: e007         	b	0x8062e1e <_vfprintf_r+0x9be> @ imm = #0xe
 8062e0e: bf00         	nop

08062e10 <$d>:
 8062e10: 0c a1 06 08  	.word	0x0806a10c
 8062e14: 20 a1 06 08  	.word	0x0806a120

08062e18 <$t>:
 8062e18: 3e10         	subs	r6, #0x10
 8062e1a: 2e10         	cmp	r6, #0x10
 8062e1c: dd18         	ble	0x8062e50 <_vfprintf_r+0x9f0> @ imm = #0x30
 8062e1e: 3201         	adds	r2, #0x1
 8062e20: 3010         	adds	r0, #0x10
 8062e22: 4bbf         	ldr	r3, [pc, #0x2fc]        @ 0x8063120 <_vfprintf_r+0xcc0>
 8062e24: 2a07         	cmp	r2, #0x7
 8062e26: e9c8 3400    	strd	r3, r4, [r8]
 8062e2a: e9cd 2022    	strd	r2, r0, [sp, #136]
 8062e2e: f108 0808    	add.w	r8, r8, #0x8
 8062e32: ddf1         	ble	0x8062e18 <_vfprintf_r+0x9b8> @ imm = #-0x1e
 8062e34: aa21         	add	r2, sp, #0x84
 8062e36: 4639         	mov	r1, r7
 8062e38: 4628         	mov	r0, r5
 8062e3a: f10d 08b8    	add.w	r8, sp, #0xb8
 8062e3e: f003 fb71    	bl	0x8066524 <__sprint_r>  @ imm = #0x36e2
 8062e42: 2800         	cmp	r0, #0x0
 8062e44: d174         	bne	0x8062f30 <_vfprintf_r+0xad0> @ imm = #0xe8
 8062e46: 3e10         	subs	r6, #0x10
 8062e48: 2e10         	cmp	r6, #0x10
 8062e4a: e9dd 2022    	ldrd	r2, r0, [sp, #136]
 8062e4e: dce6         	bgt	0x8062e1e <_vfprintf_r+0x9be> @ imm = #-0x34
 8062e50: 4601         	mov	r1, r0
 8062e52: 4650         	mov	r0, r10
 8062e54: 464d         	mov	r5, r9
 8062e56: 46ba         	mov	r10, r7
 8062e58: 46b1         	mov	r9, r6
 8062e5a: 9b15         	ldr	r3, [sp, #0x54]
 8062e5c: 9e17         	ldr	r6, [sp, #0x5c]
 8062e5e: 4607         	mov	r7, r0
 8062e60: 3201         	adds	r2, #0x1
 8062e62: eb09 0401    	add.w	r4, r9, r1
 8062e66: 49ae         	ldr	r1, [pc, #0x2b8]        @ 0x8063120 <_vfprintf_r+0xcc0>
 8062e68: 2a07         	cmp	r2, #0x7
 8062e6a: f8c8 9004    	str.w	r9, [r8, #0x4]
 8062e6e: f8c8 1000    	str.w	r1, [r8]
 8062e72: e9cd 2422    	strd	r2, r4, [sp, #136]
 8062e76: f300 8259    	bgt.w	0x806332c <_vfprintf_r+0xecc> @ imm = #0x4b2
 8062e7a: f108 0808    	add.w	r8, r8, #0x8
 8062e7e: e420         	b	0x80626c2 <_vfprintf_r+0x262> @ imm = #-0x7c0
 8062e80: aa21         	add	r2, sp, #0x84
 8062e82: 4651         	mov	r1, r10
 8062e84: 980b         	ldr	r0, [sp, #0x2c]
 8062e86: 9315         	str	r3, [sp, #0x54]
 8062e88: f003 fb4c    	bl	0x8066524 <__sprint_r>  @ imm = #0x3698
 8062e8c: 2800         	cmp	r0, #0x0
 8062e8e: f47f af53    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x15a
 8062e92: 9c23         	ldr	r4, [sp, #0x8c]
 8062e94: f10d 08b8    	add.w	r8, sp, #0xb8
 8062e98: 9b15         	ldr	r3, [sp, #0x54]
 8062e9a: e426         	b	0x80626ea <_vfprintf_r+0x28a> @ imm = #-0x7b4
 8062e9c: aa21         	add	r2, sp, #0x84
 8062e9e: 4651         	mov	r1, r10
 8062ea0: 980b         	ldr	r0, [sp, #0x2c]
 8062ea2: f003 fb3f    	bl	0x8066524 <__sprint_r>  @ imm = #0x367e
 8062ea6: 2800         	cmp	r0, #0x0
 8062ea8: f47f af46    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x174
 8062eac: 9c23         	ldr	r4, [sp, #0x8c]
 8062eae: f10d 08b8    	add.w	r8, sp, #0xb8
 8062eb2: e42b         	b	0x806270c <_vfprintf_r+0x2ac> @ imm = #-0x7aa
 8062eb4: 2d10         	cmp	r5, #0x10
 8062eb6: 9b22         	ldr	r3, [sp, #0x88]
 8062eb8: dd20         	ble	0x8062efc <_vfprintf_r+0xa9c> @ imm = #0x40
 8062eba: 2610         	movs	r6, #0x10
 8062ebc: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 8062ec0: e002         	b	0x8062ec8 <_vfprintf_r+0xa68> @ imm = #0x4
 8062ec2: 3d10         	subs	r5, #0x10
 8062ec4: 2d10         	cmp	r5, #0x10
 8062ec6: dd19         	ble	0x8062efc <_vfprintf_r+0xa9c> @ imm = #0x32
 8062ec8: 3301         	adds	r3, #0x1
 8062eca: 3410         	adds	r4, #0x10
 8062ecc: 4a94         	ldr	r2, [pc, #0x250]        @ 0x8063120 <_vfprintf_r+0xcc0>
 8062ece: 2b07         	cmp	r3, #0x7
 8062ed0: e9c8 2600    	strd	r2, r6, [r8]
 8062ed4: e9cd 3422    	strd	r3, r4, [sp, #136]
 8062ed8: f108 0808    	add.w	r8, r8, #0x8
 8062edc: ddf1         	ble	0x8062ec2 <_vfprintf_r+0xa62> @ imm = #-0x1e
 8062ede: aa21         	add	r2, sp, #0x84
 8062ee0: 4651         	mov	r1, r10
 8062ee2: 4648         	mov	r0, r9
 8062ee4: f10d 08b8    	add.w	r8, sp, #0xb8
 8062ee8: f003 fb1c    	bl	0x8066524 <__sprint_r>  @ imm = #0x3638
 8062eec: 2800         	cmp	r0, #0x0
 8062eee: f47f af23    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x1ba
 8062ef2: 3d10         	subs	r5, #0x10
 8062ef4: 2d10         	cmp	r5, #0x10
 8062ef6: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 8062efa: dce5         	bgt	0x8062ec8 <_vfprintf_r+0xa68> @ imm = #-0x36
 8062efc: 3301         	adds	r3, #0x1
 8062efe: 442c         	add	r4, r5
 8062f00: 4a87         	ldr	r2, [pc, #0x21c]        @ 0x8063120 <_vfprintf_r+0xcc0>
 8062f02: 2b07         	cmp	r3, #0x7
 8062f04: f8c8 5004    	str.w	r5, [r8, #0x4]
 8062f08: f8c8 2000    	str.w	r2, [r8]
 8062f0c: e9cd 3422    	strd	r3, r4, [sp, #136]
 8062f10: f77f ac21    	ble.w	0x8062756 <_vfprintf_r+0x2f6> @ imm = #-0x7be
 8062f14: aa21         	add	r2, sp, #0x84
 8062f16: 4651         	mov	r1, r10
 8062f18: 980b         	ldr	r0, [sp, #0x2c]
 8062f1a: f003 fb03    	bl	0x8066524 <__sprint_r>  @ imm = #0x3606
 8062f1e: 2800         	cmp	r0, #0x0
 8062f20: f47f af0a    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x1ec
 8062f24: 9c23         	ldr	r4, [sp, #0x8c]
 8062f26: e416         	b	0x8062756 <_vfprintf_r+0x2f6> @ imm = #-0x7d4
 8062f28: 4615         	mov	r5, r2
 8062f2a: ae2e         	add	r6, sp, #0xb8
 8062f2c: 920a         	str	r2, [sp, #0x28]
 8062f2e: e4ef         	b	0x8062910 <_vfprintf_r+0x4b0> @ imm = #-0x622
 8062f30: 46b9         	mov	r9, r7
 8062f32: e702         	b	0x8062d3a <_vfprintf_r+0x8da> @ imm = #-0x1fc
 8062f34: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 8062f38: 280a         	cmp	r0, #0xa
 8062f3a: f171 0300    	sbcs	r3, r1, #0x0
 8062f3e: f080 8251    	bhs.w	0x80633e4 <_vfprintf_r+0xf84> @ imm = #0x4a2
 8062f42: 3030         	adds	r0, #0x30
 8062f44: 2301         	movs	r3, #0x1
 8062f46: f10d 06b7    	add.w	r6, sp, #0xb7
 8062f4a: f8cd b01c    	str.w	r11, [sp, #0x1c]
 8062f4e: f88d 00b7    	strb.w	r0, [sp, #0xb7]
 8062f52: 930a         	str	r3, [sp, #0x28]
 8062f54: e4dc         	b	0x8062910 <_vfprintf_r+0x4b0> @ imm = #-0x648
 8062f56: 991b         	ldr	r1, [sp, #0x6c]
 8062f58: 2900         	cmp	r1, #0x0
 8062f5a: f340 81f6    	ble.w	0x806334a <_vfprintf_r+0xeea> @ imm = #0x3ec
 8062f5e: e9dd 390e    	ldrd	r3, r9, [sp, #56]
 8062f62: 4599         	cmp	r9, r3
 8062f64: bfa8         	it	ge
 8062f66: 4699         	movge	r9, r3
 8062f68: f1b9 0f00    	cmp.w	r9, #0x0
 8062f6c: dd0b         	ble	0x8062f86 <_vfprintf_r+0xb26> @ imm = #0x16
 8062f6e: 9b22         	ldr	r3, [sp, #0x88]
 8062f70: 444c         	add	r4, r9
 8062f72: 3301         	adds	r3, #0x1
 8062f74: 9423         	str	r4, [sp, #0x8c]
 8062f76: 2b07         	cmp	r3, #0x7
 8062f78: 9322         	str	r3, [sp, #0x88]
 8062f7a: e9c8 6900    	strd	r6, r9, [r8]
 8062f7e: f300 83b0    	bgt.w	0x80636e2 <_vfprintf_r+0x1282> @ imm = #0x760
 8062f82: f108 0808    	add.w	r8, r8, #0x8
 8062f86: 9d0e         	ldr	r5, [sp, #0x38]
 8062f88: f1b9 0f00    	cmp.w	r9, #0x0
 8062f8c: bfa8         	it	ge
 8062f8e: eba5 0509    	subge.w	r5, r5, r9
 8062f92: 2d00         	cmp	r5, #0x0
 8062f94: f300 817e    	bgt.w	0x8063294 <_vfprintf_r+0xe34> @ imm = #0x2fc
 8062f98: 9d1b         	ldr	r5, [sp, #0x6c]
 8062f9a: 9b0f         	ldr	r3, [sp, #0x3c]
 8062f9c: 429d         	cmp	r5, r3
 8062f9e: f280 8150    	bge.w	0x8063242 <_vfprintf_r+0xde2> @ imm = #0x2a0
 8062fa2: 9b12         	ldr	r3, [sp, #0x48]
 8062fa4: 9a14         	ldr	r2, [sp, #0x50]
 8062fa6: 441c         	add	r4, r3
 8062fa8: e9c8 2300    	strd	r2, r3, [r8]
 8062fac: 9b22         	ldr	r3, [sp, #0x88]
 8062fae: 9423         	str	r4, [sp, #0x8c]
 8062fb0: 3301         	adds	r3, #0x1
 8062fb2: 2b07         	cmp	r3, #0x7
 8062fb4: 9322         	str	r3, [sp, #0x88]
 8062fb6: f300 8387    	bgt.w	0x80636c8 <_vfprintf_r+0x1268> @ imm = #0x70e
 8062fba: f108 0808    	add.w	r8, r8, #0x8
 8062fbe: 9b0f         	ldr	r3, [sp, #0x3c]
 8062fc0: 9a0e         	ldr	r2, [sp, #0x38]
 8062fc2: 1b5d         	subs	r5, r3, r5
 8062fc4: eba3 0902    	sub.w	r9, r3, r2
 8062fc8: 45a9         	cmp	r9, r5
 8062fca: bfa8         	it	ge
 8062fcc: 46a9         	movge	r9, r5
 8062fce: f1b9 0f00    	cmp.w	r9, #0x0
 8062fd2: dd0e         	ble	0x8062ff2 <_vfprintf_r+0xb92> @ imm = #0x1c
 8062fd4: 9b22         	ldr	r3, [sp, #0x88]
 8062fd6: 4416         	add	r6, r2
 8062fd8: 444c         	add	r4, r9
 8062fda: f8c8 9004    	str.w	r9, [r8, #0x4]
 8062fde: 3301         	adds	r3, #0x1
 8062fe0: f8c8 6000    	str.w	r6, [r8]
 8062fe4: 9423         	str	r4, [sp, #0x8c]
 8062fe6: 2b07         	cmp	r3, #0x7
 8062fe8: 9322         	str	r3, [sp, #0x88]
 8062fea: f300 83a6    	bgt.w	0x806373a <_vfprintf_r+0x12da> @ imm = #0x74c
 8062fee: f108 0808    	add.w	r8, r8, #0x8
 8062ff2: f1b9 0f00    	cmp.w	r9, #0x0
 8062ff6: bfa8         	it	ge
 8062ff8: eba5 0509    	subge.w	r5, r5, r9
 8062ffc: 2d00         	cmp	r5, #0x0
 8062ffe: f77f aba1    	ble.w	0x8062744 <_vfprintf_r+0x2e4> @ imm = #-0x8be
 8063002: 2d10         	cmp	r5, #0x10
 8063004: 9b22         	ldr	r3, [sp, #0x88]
 8063006: f8df 911c    	ldr.w	r9, [pc, #0x11c]        @ 0x8063124 <_vfprintf_r+0xcc4>
 806300a: f340 81d2    	ble.w	0x80633b2 <_vfprintf_r+0xf52> @ imm = #0x3a4
 806300e: 46bb         	mov	r11, r7
 8063010: 2610         	movs	r6, #0x10
 8063012: 464f         	mov	r7, r9
 8063014: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 8063018: e003         	b	0x8063022 <_vfprintf_r+0xbc2> @ imm = #0x6
 806301a: 3d10         	subs	r5, #0x10
 806301c: 2d10         	cmp	r5, #0x10
 806301e: f340 81c6    	ble.w	0x80633ae <_vfprintf_r+0xf4e> @ imm = #0x38c
 8063022: 3301         	adds	r3, #0x1
 8063024: 3410         	adds	r4, #0x10
 8063026: 2b07         	cmp	r3, #0x7
 8063028: e9c8 7600    	strd	r7, r6, [r8]
 806302c: e9cd 3422    	strd	r3, r4, [sp, #136]
 8063030: f108 0808    	add.w	r8, r8, #0x8
 8063034: ddf1         	ble	0x806301a <_vfprintf_r+0xbba> @ imm = #-0x1e
 8063036: aa21         	add	r2, sp, #0x84
 8063038: 4651         	mov	r1, r10
 806303a: 4648         	mov	r0, r9
 806303c: f003 fa72    	bl	0x8066524 <__sprint_r>  @ imm = #0x34e4
 8063040: 2800         	cmp	r0, #0x0
 8063042: f47f ae79    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x30e
 8063046: f10d 08b8    	add.w	r8, sp, #0xb8
 806304a: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 806304e: e7e4         	b	0x806301a <_vfprintf_r+0xbba> @ imm = #-0x38
 8063050: ae2e         	add	r6, sp, #0xb8
 8063052: e45d         	b	0x8062910 <_vfprintf_r+0x4b0> @ imm = #-0x746
 8063054: 9b07         	ldr	r3, [sp, #0x1c]
 8063056: 07d8         	lsls	r0, r3, #0x1f
 8063058: f53f ae7c    	bmi.w	0x8062d54 <_vfprintf_r+0x8f4> @ imm = #-0x308
 806305c: 9d22         	ldr	r5, [sp, #0x88]
 806305e: 3401         	adds	r4, #0x1
 8063060: 2301         	movs	r3, #0x1
 8063062: f8c8 6000    	str.w	r6, [r8]
 8063066: 3501         	adds	r5, #0x1
 8063068: 9423         	str	r4, [sp, #0x8c]
 806306a: f8c8 3004    	str.w	r3, [r8, #0x4]
 806306e: 2d07         	cmp	r5, #0x7
 8063070: 9522         	str	r5, [sp, #0x88]
 8063072: f77f aea2    	ble.w	0x8062dba <_vfprintf_r+0x95a> @ imm = #-0x2bc
 8063076: aa21         	add	r2, sp, #0x84
 8063078: 4651         	mov	r1, r10
 806307a: 980b         	ldr	r0, [sp, #0x2c]
 806307c: f003 fa52    	bl	0x8066524 <__sprint_r>  @ imm = #0x34a4
 8063080: 2800         	cmp	r0, #0x0
 8063082: f47f ae59    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x34e
 8063086: f10d 08b8    	add.w	r8, sp, #0xb8
 806308a: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 806308e: e696         	b	0x8062dbe <_vfprintf_r+0x95e> @ imm = #-0x2d4
 8063090: 9b0f         	ldr	r3, [sp, #0x3c]
 8063092: 1e5e         	subs	r6, r3, #0x1
 8063094: 2e00         	cmp	r6, #0x0
 8063096: f77f ae92    	ble.w	0x8062dbe <_vfprintf_r+0x95e> @ imm = #-0x2dc
 806309a: 2e10         	cmp	r6, #0x10
 806309c: f8df 9084    	ldr.w	r9, [pc, #0x84]         @ 0x8063124 <_vfprintf_r+0xcc4>
 80630a0: f340 81ed    	ble.w	0x806347e <_vfprintf_r+0x101e> @ imm = #0x3da
 80630a4: 970a         	str	r7, [sp, #0x28]
 80630a6: f04f 0b10    	mov.w	r11, #0x10
 80630aa: 464f         	mov	r7, r9
 80630ac: f8dd 902c    	ldr.w	r9, [sp, #0x2c]
 80630b0: e003         	b	0x80630ba <_vfprintf_r+0xc5a> @ imm = #0x6
 80630b2: 3e10         	subs	r6, #0x10
 80630b4: 2e10         	cmp	r6, #0x10
 80630b6: f340 81e0    	ble.w	0x806347a <_vfprintf_r+0x101a> @ imm = #0x3c0
 80630ba: 3501         	adds	r5, #0x1
 80630bc: 3410         	adds	r4, #0x10
 80630be: 2d07         	cmp	r5, #0x7
 80630c0: e9c8 7b00    	strd	r7, r11, [r8]
 80630c4: e9cd 5422    	strd	r5, r4, [sp, #136]
 80630c8: f108 0808    	add.w	r8, r8, #0x8
 80630cc: ddf1         	ble	0x80630b2 <_vfprintf_r+0xc52> @ imm = #-0x1e
 80630ce: aa21         	add	r2, sp, #0x84
 80630d0: 4651         	mov	r1, r10
 80630d2: 4648         	mov	r0, r9
 80630d4: f003 fa26    	bl	0x8066524 <__sprint_r>  @ imm = #0x344c
 80630d8: 2800         	cmp	r0, #0x0
 80630da: f47f ae2d    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x3a6
 80630de: f10d 08b8    	add.w	r8, sp, #0xb8
 80630e2: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 80630e6: e7e4         	b	0x80630b2 <_vfprintf_r+0xc52> @ imm = #-0x38
 80630e8: aa21         	add	r2, sp, #0x84
 80630ea: 4651         	mov	r1, r10
 80630ec: 980b         	ldr	r0, [sp, #0x2c]
 80630ee: f003 fa19    	bl	0x8066524 <__sprint_r>  @ imm = #0x3432
 80630f2: 2800         	cmp	r0, #0x0
 80630f4: f47f ae20    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x3c0
 80630f8: 9c23         	ldr	r4, [sp, #0x8c]
 80630fa: f10d 08b8    	add.w	r8, sp, #0xb8
 80630fe: f7ff bb0e    	b.w	0x806271e <_vfprintf_r+0x2be> @ imm = #-0x9e4
 8063102: f01b 0310    	ands	r3, r11, #0x10
 8063106: d10f         	bne	0x8063128 <_vfprintf_r+0xcc8> @ imm = #0x1e
 8063108: f01b 0140    	ands	r1, r11, #0x40
 806310c: d00c         	beq	0x8063128 <_vfprintf_r+0xcc8> @ imm = #0x18
 806310e: f852 0b04    	ldr	r0, [r2], #4
 8063112: 4619         	mov	r1, r3
 8063114: 2301         	movs	r3, #0x1
 8063116: b280         	uxth	r0, r0
 8063118: 920c         	str	r2, [sp, #0x30]
 806311a: f7ff bbd8    	b.w	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x850
 806311e: bf00         	nop

08063120 <$d>:
 8063120: 10 a1 06 08  	.word	0x0806a110
 8063124: 20 a1 06 08  	.word	0x0806a120

08063128 <$t>:
 8063128: f852 0b04    	ldr	r0, [r2], #4
 806312c: 2301         	movs	r3, #0x1
 806312e: 920c         	str	r2, [sp, #0x30]
 8063130: f7ff bbcd    	b.w	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x866
 8063134: 17c1         	asrs	r1, r0, #0x1f
 8063136: 460b         	mov	r3, r1
 8063138: 2b00         	cmp	r3, #0x0
 806313a: f6bf ab7b    	bge.w	0x8062834 <_vfprintf_r+0x3d4> @ imm = #-0x90a
 806313e: 4240         	rsbs	r0, r0, #0
 8063140: f04f 042d    	mov.w	r4, #0x2d
 8063144: f04f 0301    	mov.w	r3, #0x1
 8063148: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 806314c: f88d 4067    	strb.w	r4, [sp, #0x67]
 8063150: f7ff bbc0    	b.w	0x80628d4 <_vfprintf_r+0x474> @ imm = #-0x880
 8063154: 9b0c         	ldr	r3, [sp, #0x30]
 8063156: f853 0b04    	ldr	r0, [r3], #4
 806315a: 930c         	str	r3, [sp, #0x30]
 806315c: f7ff bbaf    	b.w	0x80628be <_vfprintf_r+0x45e> @ imm = #-0x8a2
 8063160: f01b 0310    	ands	r3, r11, #0x10
 8063164: d10a         	bne	0x806317c <_vfprintf_r+0xd1c> @ imm = #0x14
 8063166: f01b 0140    	ands	r1, r11, #0x40
 806316a: d007         	beq	0x806317c <_vfprintf_r+0xd1c> @ imm = #0xe
 806316c: 9a0c         	ldr	r2, [sp, #0x30]
 806316e: 4619         	mov	r1, r3
 8063170: f852 0b04    	ldr	r0, [r2], #4
 8063174: b280         	uxth	r0, r0
 8063176: 920c         	str	r2, [sp, #0x30]
 8063178: f7ff bba9    	b.w	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x8ae
 806317c: 9b0c         	ldr	r3, [sp, #0x30]
 806317e: f853 0b04    	ldr	r0, [r3], #4
 8063182: 930c         	str	r3, [sp, #0x30]
 8063184: 460b         	mov	r3, r1
 8063186: f7ff bba2    	b.w	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x8bc
 806318a: 9b07         	ldr	r3, [sp, #0x1c]
 806318c: 07d9         	lsls	r1, r3, #0x1f
 806318e: f57f aad9    	bpl.w	0x8062744 <_vfprintf_r+0x2e4> @ imm = #-0xa4e
 8063192: e4d1         	b	0x8062b38 <_vfprintf_r+0x6d8> @ imm = #-0x65e
 8063194: 920c         	str	r2, [sp, #0x30]
 8063196: 783a         	ldrb	r2, [r7]
 8063198: f7ff b9d3    	b.w	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0xc5a
 806319c: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 80631a0: 4602         	mov	r2, r0
 80631a2: 460b         	mov	r3, r1
 80631a4: f005 fdb8    	bl	0x8068d18 <__unorddf2>  @ imm = #0x5b70
 80631a8: 2800         	cmp	r0, #0x0
 80631aa: f040 8380    	bne.w	0x80638ae <_vfprintf_r+0x144e> @ imm = #0x700
 80631ae: 9b0d         	ldr	r3, [sp, #0x34]
 80631b0: 1c69         	adds	r1, r5, #0x1
 80631b2: f023 0920    	bic	r9, r3, #0x20
 80631b6: f000 816e    	beq.w	0x8063496 <_vfprintf_r+0x1036> @ imm = #0x2dc
 80631ba: f1b9 0f47    	cmp.w	r9, #0x47
 80631be: f040 816b    	bne.w	0x8063498 <_vfprintf_r+0x1038> @ imm = #0x2d6
 80631c2: 2d00         	cmp	r5, #0x0
 80631c4: f040 8168    	bne.w	0x8063498 <_vfprintf_r+0x1038> @ imm = #0x2d0
 80631c8: f44b 7380    	orr	r3, r11, #0x100
 80631cc: 9307         	str	r3, [sp, #0x1c]
 80631ce: 9b11         	ldr	r3, [sp, #0x44]
 80631d0: 2b00         	cmp	r3, #0x0
 80631d2: f2c0 816d    	blt.w	0x80634b0 <_vfprintf_r+0x1050> @ imm = #0x2da
 80631d6: 930a         	str	r3, [sp, #0x28]
 80631d8: ab1f         	add	r3, sp, #0x7c
 80631da: 2501         	movs	r5, #0x1
 80631dc: 9015         	str	r0, [sp, #0x54]
 80631de: 9304         	str	r3, [sp, #0x10]
 80631e0: ab1c         	add	r3, sp, #0x70
 80631e2: 980b         	ldr	r0, [sp, #0x2c]
 80631e4: 462c         	mov	r4, r5
 80631e6: 9303         	str	r3, [sp, #0xc]
 80631e8: ab1b         	add	r3, sp, #0x6c
 80631ea: 9501         	str	r5, [sp, #0x4]
 80631ec: 9302         	str	r3, [sp, #0x8]
 80631ee: 2302         	movs	r3, #0x2
 80631f0: 9300         	str	r3, [sp]
 80631f2: e9dd 2310    	ldrd	r2, r3, [sp, #64]
 80631f6: 9206         	str	r2, [sp, #0x18]
 80631f8: f000 fcfc    	bl	0x8063bf4 <_dtoa_r>     @ imm = #0x9f8
 80631fc: 4606         	mov	r6, r0
 80631fe: f01b 0f01    	tst.w	r11, #0x1
 8063202: f000 81ee    	beq.w	0x80635e2 <_vfprintf_r+0x1182> @ imm = #0x3dc
 8063206: 4434         	add	r4, r6
 8063208: f04f 0947    	mov.w	r9, #0x47
 806320c: e17e         	b	0x806350c <_vfprintf_r+0x10ac> @ imm = #0x2fc
 806320e: 9b0c         	ldr	r3, [sp, #0x30]
 8063210: 9809         	ldr	r0, [sp, #0x24]
 8063212: f853 1b04    	ldr	r1, [r3], #4
 8063216: 17c2         	asrs	r2, r0, #0x1f
 8063218: 930c         	str	r3, [sp, #0x30]
 806321a: e9c1 0200    	strd	r0, r2, [r1]
 806321e: f7ff b965    	b.w	0x80624ec <_vfprintf_r+0x8c> @ imm = #-0xd36
 8063222: 9b0d         	ldr	r3, [sp, #0x34]
 8063224: f04b 0b02    	orr	r11, r11, #0x2
 8063228: f88d 3069    	strb.w	r3, [sp, #0x69]
 806322c: 2330         	movs	r3, #0x30
 806322e: f88d 3068    	strb.w	r3, [sp, #0x68]
 8063232: 2302         	movs	r3, #0x2
 8063234: f7ff bb4b    	b.w	0x80628ce <_vfprintf_r+0x46e> @ imm = #-0x96a
 8063238: 920d         	str	r2, [sp, #0x34]
 806323a: e410         	b	0x8062a5e <_vfprintf_r+0x5fe> @ imm = #-0x7e0
 806323c: 920d         	str	r2, [sp, #0x34]
 806323e: f7ff bbfd    	b.w	0x8062a3c <_vfprintf_r+0x5dc> @ imm = #-0x806
 8063242: 9b07         	ldr	r3, [sp, #0x1c]
 8063244: 07db         	lsls	r3, r3, #0x1f
 8063246: f53f aeac    	bmi.w	0x8062fa2 <_vfprintf_r+0xb42> @ imm = #-0x2a8
 806324a: e9dd 230e    	ldrd	r2, r3, [sp, #56]
 806324e: eba3 0902    	sub.w	r9, r3, r2
 8063252: 1b5d         	subs	r5, r3, r5
 8063254: 45a9         	cmp	r9, r5
 8063256: bfa8         	it	ge
 8063258: 46a9         	movge	r9, r5
 806325a: e6ca         	b	0x8062ff2 <_vfprintf_r+0xb92> @ imm = #-0x26c
 806325c: aa21         	add	r2, sp, #0x84
 806325e: 4651         	mov	r1, r10
 8063260: 980b         	ldr	r0, [sp, #0x2c]
 8063262: f003 f95f    	bl	0x8066524 <__sprint_r>  @ imm = #0x32be
 8063266: 2800         	cmp	r0, #0x0
 8063268: f47f ad66    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x534
 806326c: 9c23         	ldr	r4, [sp, #0x8c]
 806326e: f10d 08b8    	add.w	r8, sp, #0xb8
 8063272: e46f         	b	0x8062b54 <_vfprintf_r+0x6f4> @ imm = #-0x722
 8063274: 787a         	ldrb	r2, [r7, #0x1]
 8063276: f04b 0b20    	orr	r11, r11, #0x20
 806327a: 3701         	adds	r7, #0x1
 806327c: f7ff b961    	b.w	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0xd3e
 8063280: 2d06         	cmp	r5, #0x6
 8063282: 462b         	mov	r3, r5
 8063284: 4eb6         	ldr	r6, [pc, #0x2d8]        @ 0x8063560 <_vfprintf_r+0x1100>
 8063286: bf28         	it	hs
 8063288: 2306         	movhs	r3, #0x6
 806328a: 940c         	str	r4, [sp, #0x30]
 806328c: 930a         	str	r3, [sp, #0x28]
 806328e: 9306         	str	r3, [sp, #0x18]
 8063290: f7ff b9ff    	b.w	0x8062692 <_vfprintf_r+0x232> @ imm = #-0xc02
 8063294: 2d10         	cmp	r5, #0x10
 8063296: 9b22         	ldr	r3, [sp, #0x88]
 8063298: f8df 92c8    	ldr.w	r9, [pc, #0x2c8]        @ 0x8063564 <_vfprintf_r+0x1104>
 806329c: f340 816b    	ble.w	0x8063576 <_vfprintf_r+0x1116> @ imm = #0x2d6
 80632a0: 464a         	mov	r2, r9
 80632a2: 960a         	str	r6, [sp, #0x28]
 80632a4: 46b9         	mov	r9, r7
 80632a6: f04f 0b10    	mov.w	r11, #0x10
 80632aa: 4657         	mov	r7, r10
 80632ac: 9e0b         	ldr	r6, [sp, #0x2c]
 80632ae: 4692         	mov	r10, r2
 80632b0: e003         	b	0x80632ba <_vfprintf_r+0xe5a> @ imm = #0x6
 80632b2: 3d10         	subs	r5, #0x10
 80632b4: 2d10         	cmp	r5, #0x10
 80632b6: f340 8159    	ble.w	0x806356c <_vfprintf_r+0x110c> @ imm = #0x2b2
 80632ba: 3301         	adds	r3, #0x1
 80632bc: 3410         	adds	r4, #0x10
 80632be: 2b07         	cmp	r3, #0x7
 80632c0: e9c8 ab00    	strd	r10, r11, [r8]
 80632c4: e9cd 3422    	strd	r3, r4, [sp, #136]
 80632c8: f108 0808    	add.w	r8, r8, #0x8
 80632cc: ddf1         	ble	0x80632b2 <_vfprintf_r+0xe52> @ imm = #-0x1e
 80632ce: aa21         	add	r2, sp, #0x84
 80632d0: 4639         	mov	r1, r7
 80632d2: 4630         	mov	r0, r6
 80632d4: f003 f926    	bl	0x8066524 <__sprint_r>  @ imm = #0x324c
 80632d8: 2800         	cmp	r0, #0x0
 80632da: f47f ae29    	bne.w	0x8062f30 <_vfprintf_r+0xad0> @ imm = #-0x3ae
 80632de: f10d 08b8    	add.w	r8, sp, #0xb8
 80632e2: e9dd 3422    	ldrd	r3, r4, [sp, #136]
 80632e6: e7e4         	b	0x80632b2 <_vfprintf_r+0xe52> @ imm = #-0x38
 80632e8: 9b0c         	ldr	r3, [sp, #0x30]
 80632ea: 9909         	ldr	r1, [sp, #0x24]
 80632ec: f853 2b04    	ldr	r2, [r3], #4
 80632f0: 6011         	str	r1, [r2]
 80632f2: 930c         	str	r3, [sp, #0x30]
 80632f4: f7ff b8fa    	b.w	0x80624ec <_vfprintf_r+0x8c> @ imm = #-0xe0c
 80632f8: aa21         	add	r2, sp, #0x84
 80632fa: 4651         	mov	r1, r10
 80632fc: 980b         	ldr	r0, [sp, #0x2c]
 80632fe: f003 f911    	bl	0x8066524 <__sprint_r>  @ imm = #0x3222
 8063302: 2800         	cmp	r0, #0x0
 8063304: f47f ad18    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x5d0
 8063308: f10d 08b8    	add.w	r8, sp, #0xb8
 806330c: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 8063310: e53c         	b	0x8062d8c <_vfprintf_r+0x92c> @ imm = #-0x588
 8063312: aa21         	add	r2, sp, #0x84
 8063314: 4651         	mov	r1, r10
 8063316: 980b         	ldr	r0, [sp, #0x2c]
 8063318: f003 f904    	bl	0x8066524 <__sprint_r>  @ imm = #0x3208
 806331c: 2800         	cmp	r0, #0x0
 806331e: f47f ad0b    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x5ea
 8063322: f10d 08b8    	add.w	r8, sp, #0xb8
 8063326: e9dd 5422    	ldrd	r5, r4, [sp, #136]
 806332a: e522         	b	0x8062d72 <_vfprintf_r+0x912> @ imm = #-0x5bc
 806332c: aa21         	add	r2, sp, #0x84
 806332e: 4651         	mov	r1, r10
 8063330: 980b         	ldr	r0, [sp, #0x2c]
 8063332: 9315         	str	r3, [sp, #0x54]
 8063334: f003 f8f6    	bl	0x8066524 <__sprint_r>  @ imm = #0x31ec
 8063338: 2800         	cmp	r0, #0x0
 806333a: f47f acfd    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x606
 806333e: 9c23         	ldr	r4, [sp, #0x8c]
 8063340: f10d 08b8    	add.w	r8, sp, #0xb8
 8063344: 9b15         	ldr	r3, [sp, #0x54]
 8063346: f7ff b9bc    	b.w	0x80626c2 <_vfprintf_r+0x262> @ imm = #-0xc88
 806334a: 9b22         	ldr	r3, [sp, #0x88]
 806334c: 3401         	adds	r4, #0x1
 806334e: 4a86         	ldr	r2, [pc, #0x218]        @ 0x8063568 <_vfprintf_r+0x1108>
 8063350: 3301         	adds	r3, #0x1
 8063352: 9423         	str	r4, [sp, #0x8c]
 8063354: f8c8 2000    	str.w	r2, [r8]
 8063358: 2201         	movs	r2, #0x1
 806335a: 2b07         	cmp	r3, #0x7
 806335c: 9322         	str	r3, [sp, #0x88]
 806335e: f8c8 2004    	str.w	r2, [r8, #0x4]
 8063362: f300 811a    	bgt.w	0x806359a <_vfprintf_r+0x113a> @ imm = #0x234
 8063366: f108 0808    	add.w	r8, r8, #0x8
 806336a: 9b0f         	ldr	r3, [sp, #0x3c]
 806336c: 430b         	orrs	r3, r1
 806336e: f000 81d2    	beq.w	0x8063716 <_vfprintf_r+0x12b6> @ imm = #0x3a4
 8063372: 9b12         	ldr	r3, [sp, #0x48]
 8063374: 9814         	ldr	r0, [sp, #0x50]
 8063376: 191a         	adds	r2, r3, r4
 8063378: e9c8 0300    	strd	r0, r3, [r8]
 806337c: 9b22         	ldr	r3, [sp, #0x88]
 806337e: 9223         	str	r2, [sp, #0x8c]
 8063380: 3301         	adds	r3, #0x1
 8063382: 2b07         	cmp	r3, #0x7
 8063384: 9322         	str	r3, [sp, #0x88]
 8063386: f300 81b8    	bgt.w	0x80636fa <_vfprintf_r+0x129a> @ imm = #0x370
 806338a: f108 0808    	add.w	r8, r8, #0x8
 806338e: 2900         	cmp	r1, #0x0
 8063390: f2c0 8202    	blt.w	0x8063798 <_vfprintf_r+0x1338> @ imm = #0x404
 8063394: 990f         	ldr	r1, [sp, #0x3c]
 8063396: 3301         	adds	r3, #0x1
 8063398: f8c8 6000    	str.w	r6, [r8]
 806339c: 188c         	adds	r4, r1, r2
 806339e: 2b07         	cmp	r3, #0x7
 80633a0: f8c8 1004    	str.w	r1, [r8, #0x4]
 80633a4: e9cd 3422    	strd	r3, r4, [sp, #136]
 80633a8: f77f a9ca    	ble.w	0x8062740 <_vfprintf_r+0x2e0> @ imm = #-0xc6c
 80633ac: e514         	b	0x8062dd8 <_vfprintf_r+0x978> @ imm = #-0x5d8
 80633ae: 46b9         	mov	r9, r7
 80633b0: 465f         	mov	r7, r11
 80633b2: 3301         	adds	r3, #0x1
 80633b4: 442c         	add	r4, r5
 80633b6: f8c8 9000    	str.w	r9, [r8]
 80633ba: 2b07         	cmp	r3, #0x7
 80633bc: f8c8 5004    	str.w	r5, [r8, #0x4]
 80633c0: e9cd 3422    	strd	r3, r4, [sp, #136]
 80633c4: f77f a9bc    	ble.w	0x8062740 <_vfprintf_r+0x2e0> @ imm = #-0xc88
 80633c8: e506         	b	0x8062dd8 <_vfprintf_r+0x978> @ imm = #-0x5f4
 80633ca: aa21         	add	r2, sp, #0x84
 80633cc: 4651         	mov	r1, r10
 80633ce: 980b         	ldr	r0, [sp, #0x2c]
 80633d0: f003 f8a8    	bl	0x8066524 <__sprint_r>  @ imm = #0x3150
 80633d4: 2800         	cmp	r0, #0x0
 80633d6: f47f acaf    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x6a2
 80633da: 9c23         	ldr	r4, [sp, #0x8c]
 80633dc: f10d 08b8    	add.w	r8, sp, #0xb8
 80633e0: f7ff bba5    	b.w	0x8062b2e <_vfprintf_r+0x6ce> @ imm = #-0x8b6
 80633e4: ae2e         	add	r6, sp, #0xb8
 80633e6: f8cd b018    	str.w	r11, [sp, #0x18]
 80633ea: 220a         	movs	r2, #0xa
 80633ec: 2300         	movs	r3, #0x0
 80633ee: 4683         	mov	r11, r0
 80633f0: 4689         	mov	r9, r1
 80633f2: f005 fccf    	bl	0x8068d94 <__aeabi_uldivmod> @ imm = #0x599e
 80633f6: 3230         	adds	r2, #0x30
 80633f8: 2300         	movs	r3, #0x0
 80633fa: 4658         	mov	r0, r11
 80633fc: f806 2d01    	strb	r2, [r6, #-1]!
 8063400: 4649         	mov	r1, r9
 8063402: 220a         	movs	r2, #0xa
 8063404: f005 fcc6    	bl	0x8068d94 <__aeabi_uldivmod> @ imm = #0x598c
 8063408: f1bb 0f0a    	cmp.w	r11, #0xa
 806340c: f179 0300    	sbcs	r3, r9, #0x0
 8063410: d2eb         	bhs	0x80633ea <_vfprintf_r+0xf8a> @ imm = #-0x2a
 8063412: ab2e         	add	r3, sp, #0xb8
 8063414: f8dd b018    	ldr.w	r11, [sp, #0x18]
 8063418: 1b9b         	subs	r3, r3, r6
 806341a: f8cd b01c    	str.w	r11, [sp, #0x1c]
 806341e: 930a         	str	r3, [sp, #0x28]
 8063420: f7ff ba76    	b.w	0x8062910 <_vfprintf_r+0x4b0> @ imm = #-0xb14
 8063424: aa21         	add	r2, sp, #0x84
 8063426: 4651         	mov	r1, r10
 8063428: 980b         	ldr	r0, [sp, #0x2c]
 806342a: f003 f87b    	bl	0x8066524 <__sprint_r>  @ imm = #0x30f6
 806342e: 2800         	cmp	r0, #0x0
 8063430: f47f ac82    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x6fc
 8063434: 9c23         	ldr	r4, [sp, #0x8c]
 8063436: f10d 08b8    	add.w	r8, sp, #0xb8
 806343a: f7ff b96b    	b.w	0x8062714 <_vfprintf_r+0x2b4> @ imm = #-0xd2a
 806343e: 9b23         	ldr	r3, [sp, #0x8c]
 8063440: 46d1         	mov	r9, r10
 8063442: f8dd a02c    	ldr.w	r10, [sp, #0x2c]
 8063446: 2b00         	cmp	r3, #0x0
 8063448: f43f ac77    	beq.w	0x8062d3a <_vfprintf_r+0x8da> @ imm = #-0x712
 806344c: aa21         	add	r2, sp, #0x84
 806344e: 4649         	mov	r1, r9
 8063450: 4650         	mov	r0, r10
 8063452: f003 f867    	bl	0x8066524 <__sprint_r>  @ imm = #0x30ce
 8063456: e470         	b	0x8062d3a <_vfprintf_r+0x8da> @ imm = #-0x720
 8063458: 4630         	mov	r0, r6
 806345a: 940c         	str	r4, [sp, #0x30]
 806345c: f8cd b01c    	str.w	r11, [sp, #0x1c]
 8063460: f002 fff8    	bl	0x8066454 <strlen>      @ imm = #0x2ff0
 8063464: ea20 73e0    	bic.w	r3, r0, r0, asr #31
 8063468: 464d         	mov	r5, r9
 806346a: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 806346e: 900a         	str	r0, [sp, #0x28]
 8063470: f8cd 9038    	str.w	r9, [sp, #0x38]
 8063474: 9306         	str	r3, [sp, #0x18]
 8063476: f7ff b9bd    	b.w	0x80627f4 <_vfprintf_r+0x394> @ imm = #-0xc86
 806347a: 46b9         	mov	r9, r7
 806347c: 9f0a         	ldr	r7, [sp, #0x28]
 806347e: 3501         	adds	r5, #0x1
 8063480: 4434         	add	r4, r6
 8063482: f8c8 9000    	str.w	r9, [r8]
 8063486: 2d07         	cmp	r5, #0x7
 8063488: f8c8 6004    	str.w	r6, [r8, #0x4]
 806348c: e9cd 5422    	strd	r5, r4, [sp, #136]
 8063490: f77f ac93    	ble.w	0x8062dba <_vfprintf_r+0x95a> @ imm = #-0x6da
 8063494: e5ef         	b	0x8063076 <_vfprintf_r+0xc16> @ imm = #-0x422
 8063496: 2506         	movs	r5, #0x6
 8063498: f44b 7380    	orr	r3, r11, #0x100
 806349c: 9307         	str	r3, [sp, #0x1c]
 806349e: 9b11         	ldr	r3, [sp, #0x44]
 80634a0: 2b00         	cmp	r3, #0x0
 80634a2: db08         	blt	0x80634b6 <_vfprintf_r+0x1056> @ imm = #0x10
 80634a4: 930a         	str	r3, [sp, #0x28]
 80634a6: 9b10         	ldr	r3, [sp, #0x40]
 80634a8: 9306         	str	r3, [sp, #0x18]
 80634aa: 2300         	movs	r3, #0x0
 80634ac: 9315         	str	r3, [sp, #0x54]
 80634ae: e00a         	b	0x80634c6 <_vfprintf_r+0x1066> @ imm = #0x14
 80634b0: f04f 0947    	mov.w	r9, #0x47
 80634b4: 2501         	movs	r5, #0x1
 80634b6: e9dd 3410    	ldrd	r3, r4, [sp, #64]
 80634ba: 9306         	str	r3, [sp, #0x18]
 80634bc: f104 4300    	add.w	r3, r4, #0x80000000
 80634c0: 930a         	str	r3, [sp, #0x28]
 80634c2: 232d         	movs	r3, #0x2d
 80634c4: 9315         	str	r3, [sp, #0x54]
 80634c6: f1b9 0f46    	cmp.w	r9, #0x46
 80634ca: 9a06         	ldr	r2, [sp, #0x18]
 80634cc: f040 814f    	bne.w	0x806376e <_vfprintf_r+0x130e> @ imm = #0x29e
 80634d0: a91f         	add	r1, sp, #0x7c
 80634d2: 9c0a         	ldr	r4, [sp, #0x28]
 80634d4: 980b         	ldr	r0, [sp, #0x2c]
 80634d6: 9104         	str	r1, [sp, #0x10]
 80634d8: a91c         	add	r1, sp, #0x70
 80634da: 4623         	mov	r3, r4
 80634dc: 9501         	str	r5, [sp, #0x4]
 80634de: 9103         	str	r1, [sp, #0xc]
 80634e0: a91b         	add	r1, sp, #0x6c
 80634e2: 9102         	str	r1, [sp, #0x8]
 80634e4: 2103         	movs	r1, #0x3
 80634e6: 9100         	str	r1, [sp]
 80634e8: f000 fb84    	bl	0x8063bf4 <_dtoa_r>     @ imm = #0x708
 80634ec: 7803         	ldrb	r3, [r0]
 80634ee: 4606         	mov	r6, r0
 80634f0: 2b30         	cmp	r3, #0x30
 80634f2: d108         	bne	0x8063506 <_vfprintf_r+0x10a6> @ imm = #0x10
 80634f4: 9806         	ldr	r0, [sp, #0x18]
 80634f6: 4621         	mov	r1, r4
 80634f8: 2200         	movs	r2, #0x0
 80634fa: 2300         	movs	r3, #0x0
 80634fc: f005 fbda    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x57b4
 8063500: 2800         	cmp	r0, #0x0
 8063502: f000 8214    	beq.w	0x806392e <_vfprintf_r+0x14ce> @ imm = #0x428
 8063506: 9b1b         	ldr	r3, [sp, #0x6c]
 8063508: 442b         	add	r3, r5
 806350a: 18f4         	adds	r4, r6, r3
 806350c: 9806         	ldr	r0, [sp, #0x18]
 806350e: 2200         	movs	r2, #0x0
 8063510: 990a         	ldr	r1, [sp, #0x28]
 8063512: 2300         	movs	r3, #0x0
 8063514: f005 fbce    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x579c
 8063518: 2800         	cmp	r0, #0x0
 806351a: d057         	beq	0x80635cc <_vfprintf_r+0x116c> @ imm = #0xae
 806351c: 4623         	mov	r3, r4
 806351e: 1b9b         	subs	r3, r3, r6
 8063520: f1b9 0f47    	cmp.w	r9, #0x47
 8063524: 930f         	str	r3, [sp, #0x3c]
 8063526: d05f         	beq	0x80635e8 <_vfprintf_r+0x1188> @ imm = #0xbe
 8063528: 9b0d         	ldr	r3, [sp, #0x34]
 806352a: 2b66         	cmp	r3, #0x66
 806352c: 9b1b         	ldr	r3, [sp, #0x6c]
 806352e: 930e         	str	r3, [sp, #0x38]
 8063530: d163         	bne	0x80635fa <_vfprintf_r+0x119a> @ imm = #0xc6
 8063532: 2b00         	cmp	r3, #0x0
 8063534: f00b 0b01    	and	r11, r11, #0x1
 8063538: f340 81ea    	ble.w	0x8063910 <_vfprintf_r+0x14b0> @ imm = #0x3d4
 806353c: ea5b 0205    	orrs.w	r2, r11, r5
 8063540: f040 81a4    	bne.w	0x806388c <_vfprintf_r+0x142c> @ imm = #0x348
 8063544: 9b0e         	ldr	r3, [sp, #0x38]
 8063546: 9306         	str	r3, [sp, #0x18]
 8063548: 930a         	str	r3, [sp, #0x28]
 806354a: 9b15         	ldr	r3, [sp, #0x54]
 806354c: 2b00         	cmp	r3, #0x0
 806354e: f000 80a6    	beq.w	0x806369e <_vfprintf_r+0x123e> @ imm = #0x14c
 8063552: 232d         	movs	r3, #0x2d
 8063554: 2500         	movs	r5, #0x0
 8063556: f88d 3067    	strb.w	r3, [sp, #0x67]
 806355a: f7ff b94e    	b.w	0x80627fa <_vfprintf_r+0x39a> @ imm = #-0xd64
 806355e: bf00         	nop

08063560 <$d>:
 8063560: 04 a1 06 08  	.word	0x0806a104
 8063564: 20 a1 06 08  	.word	0x0806a120
 8063568: 0c a1 06 08  	.word	0x0806a10c

0806356c <$t>:
 806356c: 4652         	mov	r2, r10
 806356e: 9e0a         	ldr	r6, [sp, #0x28]
 8063570: 46ba         	mov	r10, r7
 8063572: 464f         	mov	r7, r9
 8063574: 4691         	mov	r9, r2
 8063576: 3301         	adds	r3, #0x1
 8063578: 442c         	add	r4, r5
 806357a: f8c8 9000    	str.w	r9, [r8]
 806357e: 2b07         	cmp	r3, #0x7
 8063580: f8c8 5004    	str.w	r5, [r8, #0x4]
 8063584: e9cd 3422    	strd	r3, r4, [sp, #136]
 8063588: dc14         	bgt	0x80635b4 <_vfprintf_r+0x1154> @ imm = #0x28
 806358a: f108 0808    	add.w	r8, r8, #0x8
 806358e: e503         	b	0x8062f98 <_vfprintf_r+0xb38> @ imm = #-0x5fa
 8063590: 242d         	movs	r4, #0x2d
 8063592: f88d 4067    	strb.w	r4, [sp, #0x67]
 8063596: f7ff b91f    	b.w	0x80627d8 <_vfprintf_r+0x378> @ imm = #-0xdc2
 806359a: aa21         	add	r2, sp, #0x84
 806359c: 4651         	mov	r1, r10
 806359e: 980b         	ldr	r0, [sp, #0x2c]
 80635a0: f002 ffc0    	bl	0x8066524 <__sprint_r>  @ imm = #0x2f80
 80635a4: 2800         	cmp	r0, #0x0
 80635a6: f47f abc7    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x872
 80635aa: 991b         	ldr	r1, [sp, #0x6c]
 80635ac: f10d 08b8    	add.w	r8, sp, #0xb8
 80635b0: 9c23         	ldr	r4, [sp, #0x8c]
 80635b2: e6da         	b	0x806336a <_vfprintf_r+0xf0a> @ imm = #-0x24c
 80635b4: aa21         	add	r2, sp, #0x84
 80635b6: 4651         	mov	r1, r10
 80635b8: 980b         	ldr	r0, [sp, #0x2c]
 80635ba: f002 ffb3    	bl	0x8066524 <__sprint_r>  @ imm = #0x2f66
 80635be: 2800         	cmp	r0, #0x0
 80635c0: f47f abba    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x88c
 80635c4: 9c23         	ldr	r4, [sp, #0x8c]
 80635c6: f10d 08b8    	add.w	r8, sp, #0xb8
 80635ca: e4e5         	b	0x8062f98 <_vfprintf_r+0xb38> @ imm = #-0x636
 80635cc: 9b1f         	ldr	r3, [sp, #0x7c]
 80635ce: 42a3         	cmp	r3, r4
 80635d0: d2a5         	bhs	0x806351e <_vfprintf_r+0x10be> @ imm = #-0xb6
 80635d2: 2130         	movs	r1, #0x30
 80635d4: 1c5a         	adds	r2, r3, #0x1
 80635d6: 921f         	str	r2, [sp, #0x7c]
 80635d8: 7019         	strb	r1, [r3]
 80635da: 9b1f         	ldr	r3, [sp, #0x7c]
 80635dc: 429c         	cmp	r4, r3
 80635de: d8f9         	bhi	0x80635d4 <_vfprintf_r+0x1174> @ imm = #-0xe
 80635e0: e79d         	b	0x806351e <_vfprintf_r+0x10be> @ imm = #-0xc6
 80635e2: 9b1f         	ldr	r3, [sp, #0x7c]
 80635e4: 1b9b         	subs	r3, r3, r6
 80635e6: 930f         	str	r3, [sp, #0x3c]
 80635e8: 9b1b         	ldr	r3, [sp, #0x6c]
 80635ea: 1cda         	adds	r2, r3, #0x3
 80635ec: 930e         	str	r3, [sp, #0x38]
 80635ee: db01         	blt	0x80635f4 <_vfprintf_r+0x1194> @ imm = #0x2
 80635f0: 42ab         	cmp	r3, r5
 80635f2: dd59         	ble	0x80636a8 <_vfprintf_r+0x1248> @ imm = #0xb2
 80635f4: 9b0d         	ldr	r3, [sp, #0x34]
 80635f6: 3b02         	subs	r3, #0x2
 80635f8: 930d         	str	r3, [sp, #0x34]
 80635fa: 9b0d         	ldr	r3, [sp, #0x34]
 80635fc: 9a0e         	ldr	r2, [sp, #0x38]
 80635fe: f88d 3074    	strb.w	r3, [sp, #0x74]
 8063602: 1e53         	subs	r3, r2, #0x1
 8063604: 2b00         	cmp	r3, #0x0
 8063606: 931b         	str	r3, [sp, #0x6c]
 8063608: f2c0 813c    	blt.w	0x8063884 <_vfprintf_r+0x1424> @ imm = #0x278
 806360c: 222b         	movs	r2, #0x2b
 806360e: 2b09         	cmp	r3, #0x9
 8063610: f88d 2075    	strb.w	r2, [sp, #0x75]
 8063614: f340 812d    	ble.w	0x8063872 <_vfprintf_r+0x1412> @ imm = #0x25a
 8063618: f10d 0c83    	add.w	r12, sp, #0x83
 806361c: f8df e2e0    	ldr.w	lr, [pc, #0x2e0]        @ 0x8063900 <_vfprintf_r+0x14a0>
 8063620: 4660         	mov	r0, r12
 8063622: fb8e 1203    	smull	r1, r2, lr, r3
 8063626: 17dd         	asrs	r5, r3, #0x1f
 8063628: 4619         	mov	r1, r3
 806362a: 4604         	mov	r4, r0
 806362c: ebc5 05a2    	rsb	r5, r5, r2, asr #2
 8063630: 3801         	subs	r0, #0x1
 8063632: 2963         	cmp	r1, #0x63
 8063634: eb05 0285    	add.w	r2, r5, r5, lsl #2
 8063638: eba3 0242    	sub.w	r2, r3, r2, lsl #1
 806363c: 462b         	mov	r3, r5
 806363e: f102 0230    	add.w	r2, r2, #0x30
 8063642: f804 2c01    	strb	r2, [r4, #-1]
 8063646: dcec         	bgt	0x8063622 <_vfprintf_r+0x11c2> @ imm = #-0x28
 8063648: 3330         	adds	r3, #0x30
 806364a: 1ea2         	subs	r2, r4, #0x2
 806364c: b2db         	uxtb	r3, r3
 806364e: 4594         	cmp	r12, r2
 8063650: f800 3c01    	strb	r3, [r0, #-1]
 8063654: f240 816f    	bls.w	0x8063936 <_vfprintf_r+0x14d6> @ imm = #0x2de
 8063658: f10d 0276    	add.w	r2, sp, #0x76
 806365c: e001         	b	0x8063662 <_vfprintf_r+0x1202> @ imm = #0x2
 806365e: f810 3b01    	ldrb	r3, [r0], #1
 8063662: 4584         	cmp	r12, r0
 8063664: f802 3b01    	strb	r3, [r2], #1
 8063668: d1f9         	bne	0x806365e <_vfprintf_r+0x11fe> @ imm = #-0xe
 806366a: f10d 0385    	add.w	r3, sp, #0x85
 806366e: f10d 0276    	add.w	r2, sp, #0x76
 8063672: 1b1b         	subs	r3, r3, r4
 8063674: 4413         	add	r3, r2
 8063676: aa1d         	add	r2, sp, #0x74
 8063678: 1a9b         	subs	r3, r3, r2
 806367a: 9316         	str	r3, [sp, #0x58]
 806367c: 9a0f         	ldr	r2, [sp, #0x3c]
 806367e: 9b16         	ldr	r3, [sp, #0x58]
 8063680: 2a01         	cmp	r2, #0x1
 8063682: 4413         	add	r3, r2
 8063684: 930a         	str	r3, [sp, #0x28]
 8063686: f340 8109    	ble.w	0x806389c <_vfprintf_r+0x143c> @ imm = #0x212
 806368a: 9b0a         	ldr	r3, [sp, #0x28]
 806368c: 9a12         	ldr	r2, [sp, #0x48]
 806368e: 4413         	add	r3, r2
 8063690: 2200         	movs	r2, #0x0
 8063692: 930a         	str	r3, [sp, #0x28]
 8063694: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 8063698: 920e         	str	r2, [sp, #0x38]
 806369a: 9306         	str	r3, [sp, #0x18]
 806369c: e755         	b	0x806354a <_vfprintf_r+0x10ea> @ imm = #-0x156
 806369e: 9d15         	ldr	r5, [sp, #0x54]
 80636a0: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 80636a4: f7ff b8a6    	b.w	0x80627f4 <_vfprintf_r+0x394> @ imm = #-0xeb4
 80636a8: e9dd 320e    	ldrd	r3, r2, [sp, #56]
 80636ac: 4293         	cmp	r3, r2
 80636ae: f2c0 809a    	blt.w	0x80637e6 <_vfprintf_r+0x1386> @ imm = #0x134
 80636b2: f01b 0f01    	tst.w	r11, #0x1
 80636b6: f040 8106    	bne.w	0x80638c6 <_vfprintf_r+0x1466> @ imm = #0x20c
 80636ba: ea23 72e3    	bic.w	r2, r3, r3, asr #31
 80636be: 930a         	str	r3, [sp, #0x28]
 80636c0: 2367         	movs	r3, #0x67
 80636c2: 9206         	str	r2, [sp, #0x18]
 80636c4: 930d         	str	r3, [sp, #0x34]
 80636c6: e740         	b	0x806354a <_vfprintf_r+0x10ea> @ imm = #-0x180
 80636c8: aa21         	add	r2, sp, #0x84
 80636ca: 4651         	mov	r1, r10
 80636cc: 980b         	ldr	r0, [sp, #0x2c]
 80636ce: f002 ff29    	bl	0x8066524 <__sprint_r>  @ imm = #0x2e52
 80636d2: 2800         	cmp	r0, #0x0
 80636d4: f47f ab30    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x9a0
 80636d8: 9d1b         	ldr	r5, [sp, #0x6c]
 80636da: f10d 08b8    	add.w	r8, sp, #0xb8
 80636de: 9c23         	ldr	r4, [sp, #0x8c]
 80636e0: e46d         	b	0x8062fbe <_vfprintf_r+0xb5e> @ imm = #-0x726
 80636e2: aa21         	add	r2, sp, #0x84
 80636e4: 4651         	mov	r1, r10
 80636e6: 980b         	ldr	r0, [sp, #0x2c]
 80636e8: f002 ff1c    	bl	0x8066524 <__sprint_r>  @ imm = #0x2e38
 80636ec: 2800         	cmp	r0, #0x0
 80636ee: f47f ab23    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x9ba
 80636f2: 9c23         	ldr	r4, [sp, #0x8c]
 80636f4: f10d 08b8    	add.w	r8, sp, #0xb8
 80636f8: e445         	b	0x8062f86 <_vfprintf_r+0xb26> @ imm = #-0x776
 80636fa: aa21         	add	r2, sp, #0x84
 80636fc: 4651         	mov	r1, r10
 80636fe: 980b         	ldr	r0, [sp, #0x2c]
 8063700: f002 ff10    	bl	0x8066524 <__sprint_r>  @ imm = #0x2e20
 8063704: 2800         	cmp	r0, #0x0
 8063706: f47f ab17    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0x9d2
 806370a: 991b         	ldr	r1, [sp, #0x6c]
 806370c: f10d 08b8    	add.w	r8, sp, #0xb8
 8063710: e9dd 3222    	ldrd	r3, r2, [sp, #136]
 8063714: e63b         	b	0x806338e <_vfprintf_r+0xf2e> @ imm = #-0x38a
 8063716: 9b07         	ldr	r3, [sp, #0x1c]
 8063718: 07da         	lsls	r2, r3, #0x1f
 806371a: f57f a813    	bpl.w	0x8062744 <_vfprintf_r+0x2e4> @ imm = #-0xfda
 806371e: 9b12         	ldr	r3, [sp, #0x48]
 8063720: 9914         	ldr	r1, [sp, #0x50]
 8063722: 191a         	adds	r2, r3, r4
 8063724: e9c8 1300    	strd	r1, r3, [r8]
 8063728: 9b22         	ldr	r3, [sp, #0x88]
 806372a: 9223         	str	r2, [sp, #0x8c]
 806372c: 3301         	adds	r3, #0x1
 806372e: 2b07         	cmp	r3, #0x7
 8063730: 9322         	str	r3, [sp, #0x88]
 8063732: dce2         	bgt	0x80636fa <_vfprintf_r+0x129a> @ imm = #-0x3c
 8063734: f108 0808    	add.w	r8, r8, #0x8
 8063738: e62c         	b	0x8063394 <_vfprintf_r+0xf34> @ imm = #-0x3a8
 806373a: aa21         	add	r2, sp, #0x84
 806373c: 4651         	mov	r1, r10
 806373e: 980b         	ldr	r0, [sp, #0x2c]
 8063740: f002 fef0    	bl	0x8066524 <__sprint_r>  @ imm = #0x2de0
 8063744: 2800         	cmp	r0, #0x0
 8063746: f47f aaf7    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0xa12
 806374a: 9d1b         	ldr	r5, [sp, #0x6c]
 806374c: f10d 08b8    	add.w	r8, sp, #0xb8
 8063750: 9b0f         	ldr	r3, [sp, #0x3c]
 8063752: 9c23         	ldr	r4, [sp, #0x8c]
 8063754: 1b5d         	subs	r5, r3, r5
 8063756: e44c         	b	0x8062ff2 <_vfprintf_r+0xb92> @ imm = #-0x768
 8063758: 940c         	str	r4, [sp, #0x30]
 806375a: 9506         	str	r5, [sp, #0x18]
 806375c: 950a         	str	r5, [sp, #0x28]
 806375e: 4605         	mov	r5, r0
 8063760: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 8063764: f8cd b01c    	str.w	r11, [sp, #0x1c]
 8063768: 900e         	str	r0, [sp, #0x38]
 806376a: f7ff b843    	b.w	0x80627f4 <_vfprintf_r+0x394> @ imm = #-0xf7a
 806376e: f1b9 0f45    	cmp.w	r9, #0x45
 8063772: f040 80e3    	bne.w	0x806393c <_vfprintf_r+0x14dc> @ imm = #0x1c6
 8063776: a91f         	add	r1, sp, #0x7c
 8063778: 1c6c         	adds	r4, r5, #0x1
 806377a: 9b0a         	ldr	r3, [sp, #0x28]
 806377c: 9104         	str	r1, [sp, #0x10]
 806377e: a91c         	add	r1, sp, #0x70
 8063780: 9401         	str	r4, [sp, #0x4]
 8063782: 9103         	str	r1, [sp, #0xc]
 8063784: a91b         	add	r1, sp, #0x6c
 8063786: 980b         	ldr	r0, [sp, #0x2c]
 8063788: 9102         	str	r1, [sp, #0x8]
 806378a: 2102         	movs	r1, #0x2
 806378c: 9100         	str	r1, [sp]
 806378e: f000 fa31    	bl	0x8063bf4 <_dtoa_r>     @ imm = #0x462
 8063792: 4606         	mov	r6, r0
 8063794: 4434         	add	r4, r6
 8063796: e6b9         	b	0x806350c <_vfprintf_r+0x10ac> @ imm = #-0x28e
 8063798: 424d         	rsbs	r5, r1, #0
 806379a: 3110         	adds	r1, #0x10
 806379c: f8df 9164    	ldr.w	r9, [pc, #0x164]        @ 0x8063904 <_vfprintf_r+0x14a4>
 80637a0: da4f         	bge	0x8063842 <_vfprintf_r+0x13e2> @ imm = #0x9e
 80637a2: 2410         	movs	r4, #0x10
 80637a4: f8dd b02c    	ldr.w	r11, [sp, #0x2c]
 80637a8: e002         	b	0x80637b0 <_vfprintf_r+0x1350> @ imm = #0x4
 80637aa: 3d10         	subs	r5, #0x10
 80637ac: 2d10         	cmp	r5, #0x10
 80637ae: dd48         	ble	0x8063842 <_vfprintf_r+0x13e2> @ imm = #0x90
 80637b0: 3301         	adds	r3, #0x1
 80637b2: 3210         	adds	r2, #0x10
 80637b4: 2b07         	cmp	r3, #0x7
 80637b6: e9c8 9400    	strd	r9, r4, [r8]
 80637ba: e9cd 3222    	strd	r3, r2, [sp, #136]
 80637be: f108 0808    	add.w	r8, r8, #0x8
 80637c2: ddf2         	ble	0x80637aa <_vfprintf_r+0x134a> @ imm = #-0x1c
 80637c4: aa21         	add	r2, sp, #0x84
 80637c6: 4651         	mov	r1, r10
 80637c8: 4658         	mov	r0, r11
 80637ca: f002 feab    	bl	0x8066524 <__sprint_r>  @ imm = #0x2d56
 80637ce: 2800         	cmp	r0, #0x0
 80637d0: f47f aab2    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0xa9c
 80637d4: f10d 08b8    	add.w	r8, sp, #0xb8
 80637d8: e9dd 3222    	ldrd	r3, r2, [sp, #136]
 80637dc: e7e5         	b	0x80637aa <_vfprintf_r+0x134a> @ imm = #-0x36
 80637de: f8dd b01c    	ldr.w	r11, [sp, #0x1c]
 80637e2: f7ff bba9    	b.w	0x8062f38 <_vfprintf_r+0xad8> @ imm = #-0x8ae
 80637e6: 9a12         	ldr	r2, [sp, #0x48]
 80637e8: 9b0f         	ldr	r3, [sp, #0x3c]
 80637ea: 4413         	add	r3, r2
 80637ec: 9a0e         	ldr	r2, [sp, #0x38]
 80637ee: 2a00         	cmp	r2, #0x0
 80637f0: 930a         	str	r3, [sp, #0x28]
 80637f2: dd6f         	ble	0x80638d4 <_vfprintf_r+0x1474> @ imm = #0xde
 80637f4: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 80637f8: 9306         	str	r3, [sp, #0x18]
 80637fa: 2367         	movs	r3, #0x67
 80637fc: 930d         	str	r3, [sp, #0x34]
 80637fe: e6a4         	b	0x806354a <_vfprintf_r+0x10ea> @ imm = #-0x2b8
 8063800: f88d 0067    	strb.w	r0, [sp, #0x67]
 8063804: f7fe bf38    	b.w	0x8062678 <_vfprintf_r+0x218> @ imm = #-0x1190
 8063808: f88d 0067    	strb.w	r0, [sp, #0x67]
 806380c: f7ff b957    	b.w	0x8062abe <_vfprintf_r+0x65e> @ imm = #-0xd52
 8063810: f88d 0067    	strb.w	r0, [sp, #0x67]
 8063814: f7fe bffd    	b.w	0x8062812 <_vfprintf_r+0x3b2> @ imm = #-0x1006
 8063818: f88d 0067    	strb.w	r0, [sp, #0x67]
 806381c: f7ff b8f1    	b.w	0x8062a02 <_vfprintf_r+0x5a2> @ imm = #-0xe1e
 8063820: f88d 0067    	strb.w	r0, [sp, #0x67]
 8063824: f7ff b83e    	b.w	0x80628a4 <_vfprintf_r+0x444> @ imm = #-0xf84
 8063828: f88d 0067    	strb.w	r0, [sp, #0x67]
 806382c: f7fe bfa7    	b.w	0x806277e <_vfprintf_r+0x31e> @ imm = #-0x10b2
 8063830: f88d 0067    	strb.w	r0, [sp, #0x67]
 8063834: f7ff b894    	b.w	0x8062960 <_vfprintf_r+0x500> @ imm = #-0xed8
 8063838: f04f 33ff    	mov.w	r3, #0xffffffff
 806383c: 9309         	str	r3, [sp, #0x24]
 806383e: f7ff ba81    	b.w	0x8062d44 <_vfprintf_r+0x8e4> @ imm = #-0xafe
 8063842: 3301         	adds	r3, #0x1
 8063844: 442a         	add	r2, r5
 8063846: f8c8 9000    	str.w	r9, [r8]
 806384a: 2b07         	cmp	r3, #0x7
 806384c: f8c8 5004    	str.w	r5, [r8, #0x4]
 8063850: e9cd 3222    	strd	r3, r2, [sp, #136]
 8063854: f77f af6e    	ble.w	0x8063734 <_vfprintf_r+0x12d4> @ imm = #-0x124
 8063858: aa21         	add	r2, sp, #0x84
 806385a: 4651         	mov	r1, r10
 806385c: 980b         	ldr	r0, [sp, #0x2c]
 806385e: f002 fe61    	bl	0x8066524 <__sprint_r>  @ imm = #0x2cc2
 8063862: 2800         	cmp	r0, #0x0
 8063864: f47f aa68    	bne.w	0x8062d38 <_vfprintf_r+0x8d8> @ imm = #-0xb30
 8063868: f10d 08b8    	add.w	r8, sp, #0xb8
 806386c: e9dd 3222    	ldrd	r3, r2, [sp, #136]
 8063870: e590         	b	0x8063394 <_vfprintf_r+0xf34> @ imm = #-0x4e0
 8063872: 3330         	adds	r3, #0x30
 8063874: f88d 3077    	strb.w	r3, [sp, #0x77]
 8063878: 2330         	movs	r3, #0x30
 806387a: f88d 3076    	strb.w	r3, [sp, #0x76]
 806387e: 2304         	movs	r3, #0x4
 8063880: 9316         	str	r3, [sp, #0x58]
 8063882: e6fb         	b	0x806367c <_vfprintf_r+0x121c> @ imm = #-0x20a
 8063884: f1c2 0301    	rsb.w	r3, r2, #0x1
 8063888: 222d         	movs	r2, #0x2d
 806388a: e6c0         	b	0x806360e <_vfprintf_r+0x11ae> @ imm = #-0x280
 806388c: 9a12         	ldr	r2, [sp, #0x48]
 806388e: 4413         	add	r3, r2
 8063890: 442b         	add	r3, r5
 8063892: 930a         	str	r3, [sp, #0x28]
 8063894: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 8063898: 9306         	str	r3, [sp, #0x18]
 806389a: e656         	b	0x806354a <_vfprintf_r+0x10ea> @ imm = #-0x354
 806389c: f01b 0201    	ands	r2, r11, #0x1
 80638a0: 920e         	str	r2, [sp, #0x38]
 80638a2: f47f aef2    	bne.w	0x806368a <_vfprintf_r+0x122a> @ imm = #-0x21c
 80638a6: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 80638aa: 9306         	str	r3, [sp, #0x18]
 80638ac: e64d         	b	0x806354a <_vfprintf_r+0x10ea> @ imm = #-0x366
 80638ae: 9b11         	ldr	r3, [sp, #0x44]
 80638b0: 2b00         	cmp	r3, #0x0
 80638b2: db16         	blt	0x80638e2 <_vfprintf_r+0x1482> @ imm = #0x2c
 80638b4: f89d 4067    	ldrb.w	r4, [sp, #0x67]
 80638b8: f02b 0380    	bic	r3, r11, #0x80
 80638bc: 4e12         	ldr	r6, [pc, #0x48]         @ 0x8063908 <_vfprintf_r+0x14a8>
 80638be: 9307         	str	r3, [sp, #0x1c]
 80638c0: 4b12         	ldr	r3, [pc, #0x48]         @ 0x806390c <_vfprintf_r+0x14ac>
 80638c2: f7fe bf8e    	b.w	0x80627e2 <_vfprintf_r+0x382> @ imm = #-0x10e4
 80638c6: 9b0e         	ldr	r3, [sp, #0x38]
 80638c8: 9a12         	ldr	r2, [sp, #0x48]
 80638ca: 4413         	add	r3, r2
 80638cc: 2267         	movs	r2, #0x67
 80638ce: 930a         	str	r3, [sp, #0x28]
 80638d0: 920d         	str	r2, [sp, #0x34]
 80638d2: e7e8         	b	0x80638a6 <_vfprintf_r+0x1446> @ imm = #-0x30
 80638d4: 9b0e         	ldr	r3, [sp, #0x38]
 80638d6: 9a0a         	ldr	r2, [sp, #0x28]
 80638d8: f1c3 0301    	rsb.w	r3, r3, #0x1
 80638dc: 441a         	add	r2, r3
 80638de: 4613         	mov	r3, r2
 80638e0: e7f4         	b	0x80638cc <_vfprintf_r+0x146c> @ imm = #-0x18
 80638e2: 242d         	movs	r4, #0x2d
 80638e4: f88d 4067    	strb.w	r4, [sp, #0x67]
 80638e8: e7e6         	b	0x80638b8 <_vfprintf_r+0x1458> @ imm = #-0x34
 80638ea: 990c         	ldr	r1, [sp, #0x30]
 80638ec: 787a         	ldrb	r2, [r7, #0x1]
 80638ee: 4627         	mov	r7, r4
 80638f0: f851 5b04    	ldr	r5, [r1], #4
 80638f4: ea45 75e5    	orr.w	r5, r5, r5, asr #31
 80638f8: 910c         	str	r1, [sp, #0x30]
 80638fa: f7fe be22    	b.w	0x8062542 <_vfprintf_r+0xe2> @ imm = #-0x13bc
 80638fe: bf00         	nop

08063900 <$d>:
 8063900: 67 66 66 66  	.word	0x66666667
 8063904: 20 a1 06 08  	.word	0x0806a120
 8063908: d4 a0 06 08  	.word	0x0806a0d4
 806390c: d8 a0 06 08  	.word	0x0806a0d8

08063910 <$t>:
 8063910: ea5b 0305    	orrs.w	r3, r11, r5
 8063914: d103         	bne	0x806391e <_vfprintf_r+0x14be> @ imm = #0x6
 8063916: 2301         	movs	r3, #0x1
 8063918: 9306         	str	r3, [sp, #0x18]
 806391a: 930a         	str	r3, [sp, #0x28]
 806391c: e615         	b	0x806354a <_vfprintf_r+0x10ea> @ imm = #-0x3d6
 806391e: 9b12         	ldr	r3, [sp, #0x48]
 8063920: 3301         	adds	r3, #0x1
 8063922: 442b         	add	r3, r5
 8063924: 930a         	str	r3, [sp, #0x28]
 8063926: ea23 73e3    	bic.w	r3, r3, r3, asr #31
 806392a: 9306         	str	r3, [sp, #0x18]
 806392c: e60d         	b	0x806354a <_vfprintf_r+0x10ea> @ imm = #-0x3e6
 806392e: f1c5 0301    	rsb.w	r3, r5, #0x1
 8063932: 931b         	str	r3, [sp, #0x6c]
 8063934: e5e8         	b	0x8063508 <_vfprintf_r+0x10a8> @ imm = #-0x430
 8063936: 2302         	movs	r3, #0x2
 8063938: 9316         	str	r3, [sp, #0x58]
 806393a: e69f         	b	0x806367c <_vfprintf_r+0x121c> @ imm = #-0x2c2
 806393c: a91f         	add	r1, sp, #0x7c
 806393e: 9b0a         	ldr	r3, [sp, #0x28]
 8063940: 980b         	ldr	r0, [sp, #0x2c]
 8063942: 462c         	mov	r4, r5
 8063944: 9104         	str	r1, [sp, #0x10]
 8063946: a91c         	add	r1, sp, #0x70
 8063948: 9501         	str	r5, [sp, #0x4]
 806394a: 9103         	str	r1, [sp, #0xc]
 806394c: a91b         	add	r1, sp, #0x6c
 806394e: 9102         	str	r1, [sp, #0x8]
 8063950: 2102         	movs	r1, #0x2
 8063952: 9100         	str	r1, [sp]
 8063954: f000 f94e    	bl	0x8063bf4 <_dtoa_r>     @ imm = #0x29c
 8063958: f1b9 0f47    	cmp.w	r9, #0x47
 806395c: 4606         	mov	r6, r0
 806395e: f43f ac4e    	beq.w	0x80631fe <_vfprintf_r+0xd9e> @ imm = #-0x764
 8063962: 4434         	add	r4, r6
 8063964: e5d2         	b	0x806350c <_vfprintf_r+0x10ac> @ imm = #-0x45c
 8063966: bf00         	nop

08063968 <vfprintf>:
 8063968: b410         	push	{r4}
 806396a: 4c04         	ldr	r4, [pc, #0x10]         @ 0x806397c <vfprintf+0x14>
 806396c: 4613         	mov	r3, r2
 806396e: 460a         	mov	r2, r1
 8063970: 4601         	mov	r1, r0
 8063972: 6820         	ldr	r0, [r4]
 8063974: bc10         	pop	{r4}
 8063976: f7fe bd73    	b.w	0x8062460 <_vfprintf_r> @ imm = #-0x151a
 806397a: bf00         	nop

0806397c <$d>:
 806397c: 90 23 00 20  	.word	0x20002390

08063980 <__sbprintf>:
 8063980: b570         	push	{r4, r5, r6, lr}
 8063982: f5ad 6d8d    	sub.w	sp, sp, #0x468
 8063986: 460c         	mov	r4, r1
 8063988: 4606         	mov	r6, r0
 806398a: a91a         	add	r1, sp, #0x68
 806398c: 9100         	str	r1, [sp]
 806398e: 9104         	str	r1, [sp, #0x10]
 8063990: 89a1         	ldrh	r1, [r4, #0xc]
 8063992: f021 0102    	bic	r1, r1, #0x2
 8063996: f8ad 100c    	strh.w	r1, [sp, #0xc]
 806399a: 6e61         	ldr	r1, [r4, #0x64]
 806399c: 9119         	str	r1, [sp, #0x64]
 806399e: 89e1         	ldrh	r1, [r4, #0xe]
 80639a0: f8ad 100e    	strh.w	r1, [sp, #0xe]
 80639a4: 69e1         	ldr	r1, [r4, #0x1c]
 80639a6: 9107         	str	r1, [sp, #0x1c]
 80639a8: 6a61         	ldr	r1, [r4, #0x24]
 80639aa: 9109         	str	r1, [sp, #0x24]
 80639ac: f44f 6180    	mov.w	r1, #0x400
 80639b0: 9102         	str	r1, [sp, #0x8]
 80639b2: 9105         	str	r1, [sp, #0x14]
 80639b4: 2100         	movs	r1, #0x0
 80639b6: 9106         	str	r1, [sp, #0x18]
 80639b8: 4669         	mov	r1, sp
 80639ba: f7fe fd51    	bl	0x8062460 <_vfprintf_r> @ imm = #-0x155e
 80639be: 1e05         	subs	r5, r0, #0x0
 80639c0: db07         	blt	0x80639d2 <__sbprintf+0x52> @ imm = #0xe
 80639c2: 4669         	mov	r1, sp
 80639c4: 4630         	mov	r0, r6
 80639c6: f001 f92d    	bl	0x8064c24 <_fflush_r>   @ imm = #0x125a
 80639ca: 2800         	cmp	r0, #0x0
 80639cc: bf18         	it	ne
 80639ce: f04f 35ff    	movne.w	r5, #0xffffffff
 80639d2: f8bd 300c    	ldrh.w	r3, [sp, #0xc]
 80639d6: 065b         	lsls	r3, r3, #0x19
 80639d8: d503         	bpl	0x80639e2 <__sbprintf+0x62> @ imm = #0x6
 80639da: 89a3         	ldrh	r3, [r4, #0xc]
 80639dc: f043 0340    	orr	r3, r3, #0x40
 80639e0: 81a3         	strh	r3, [r4, #0xc]
 80639e2: 4628         	mov	r0, r5
 80639e4: f50d 6d8d    	add.w	sp, sp, #0x468
 80639e8: bd70         	pop	{r4, r5, r6, pc}
 80639ea: bf00         	nop

080639ec <__swsetup_r>:
 80639ec: b538         	push	{r3, r4, r5, lr}
 80639ee: 4b33         	ldr	r3, [pc, #0xcc]         @ 0x8063abc <__swsetup_r+0xd0>
 80639f0: 4605         	mov	r5, r0
 80639f2: 460c         	mov	r4, r1
 80639f4: 681b         	ldr	r3, [r3]
 80639f6: b10b         	cbz	r3, 0x80639fc <__swsetup_r+0x10> @ imm = #0x2
 80639f8: 6b9a         	ldr	r2, [r3, #0x38]
 80639fa: b1da         	cbz	r2, 0x8063a34 <__swsetup_r+0x48> @ imm = #0x36
 80639fc: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063a00: 0718         	lsls	r0, r3, #0x1c
 8063a02: b29a         	uxth	r2, r3
 8063a04: d51e         	bpl	0x8063a44 <__swsetup_r+0x58> @ imm = #0x3c
 8063a06: 6921         	ldr	r1, [r4, #0x10]
 8063a08: b339         	cbz	r1, 0x8063a5a <__swsetup_r+0x6e> @ imm = #0x4e
 8063a0a: f012 0001    	ands	r0, r2, #0x1
 8063a0e: d007         	beq	0x8063a20 <__swsetup_r+0x34> @ imm = #0xe
 8063a10: 2000         	movs	r0, #0x0
 8063a12: 60a0         	str	r0, [r4, #0x8]
 8063a14: 6960         	ldr	r0, [r4, #0x14]
 8063a16: 4240         	rsbs	r0, r0, #0
 8063a18: 61a0         	str	r0, [r4, #0x18]
 8063a1a: b139         	cbz	r1, 0x8063a2c <__swsetup_r+0x40> @ imm = #0xe
 8063a1c: 2000         	movs	r0, #0x0
 8063a1e: bd38         	pop	{r3, r4, r5, pc}
 8063a20: 0795         	lsls	r5, r2, #0x1e
 8063a22: bf58         	it	pl
 8063a24: 6960         	ldrpl	r0, [r4, #0x14]
 8063a26: 60a0         	str	r0, [r4, #0x8]
 8063a28: 2900         	cmp	r1, #0x0
 8063a2a: d1f7         	bne	0x8063a1c <__swsetup_r+0x30> @ imm = #-0x12
 8063a2c: 0612         	lsls	r2, r2, #0x18
 8063a2e: d43e         	bmi	0x8063aae <__swsetup_r+0xc2> @ imm = #0x7c
 8063a30: 4608         	mov	r0, r1
 8063a32: bd38         	pop	{r3, r4, r5, pc}
 8063a34: 4618         	mov	r0, r3
 8063a36: f001 fa1f    	bl	0x8064e78 <__sinit>     @ imm = #0x143e
 8063a3a: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063a3e: 0718         	lsls	r0, r3, #0x1c
 8063a40: b29a         	uxth	r2, r3
 8063a42: d4e0         	bmi	0x8063a06 <__swsetup_r+0x1a> @ imm = #-0x40
 8063a44: 06d1         	lsls	r1, r2, #0x1b
 8063a46: d52a         	bpl	0x8063a9e <__swsetup_r+0xb2> @ imm = #0x54
 8063a48: 0752         	lsls	r2, r2, #0x1d
 8063a4a: d414         	bmi	0x8063a76 <__swsetup_r+0x8a> @ imm = #0x28
 8063a4c: 6921         	ldr	r1, [r4, #0x10]
 8063a4e: f043 0308    	orr	r3, r3, #0x8
 8063a52: b29a         	uxth	r2, r3
 8063a54: 81a3         	strh	r3, [r4, #0xc]
 8063a56: 2900         	cmp	r1, #0x0
 8063a58: d1d7         	bne	0x8063a0a <__swsetup_r+0x1e> @ imm = #-0x52
 8063a5a: f402 7020    	and	r0, r2, #0x280
 8063a5e: f5b0 7f00    	cmp.w	r0, #0x200
 8063a62: d0d2         	beq	0x8063a0a <__swsetup_r+0x1e> @ imm = #-0x5c
 8063a64: 4621         	mov	r1, r4
 8063a66: 4628         	mov	r0, r5
 8063a68: f001 fbc8    	bl	0x80651fc <__smakebuf_r> @ imm = #0x1790
 8063a6c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063a70: 6921         	ldr	r1, [r4, #0x10]
 8063a72: b29a         	uxth	r2, r3
 8063a74: e7c9         	b	0x8063a0a <__swsetup_r+0x1e> @ imm = #-0x6e
 8063a76: 6b21         	ldr	r1, [r4, #0x30]
 8063a78: b151         	cbz	r1, 0x8063a90 <__swsetup_r+0xa4> @ imm = #0x14
 8063a7a: f104 0240    	add.w	r2, r4, #0x40
 8063a7e: 4291         	cmp	r1, r2
 8063a80: d004         	beq	0x8063a8c <__swsetup_r+0xa0> @ imm = #0x8
 8063a82: 4628         	mov	r0, r5
 8063a84: f001 fa68    	bl	0x8064f58 <_free_r>     @ imm = #0x14d0
 8063a88: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8063a8c: 2200         	movs	r2, #0x0
 8063a8e: 6322         	str	r2, [r4, #0x30]
 8063a90: 2200         	movs	r2, #0x0
 8063a92: 6921         	ldr	r1, [r4, #0x10]
 8063a94: f023 0324    	bic	r3, r3, #0x24
 8063a98: e9c4 1200    	strd	r1, r2, [r4]
 8063a9c: e7d7         	b	0x8063a4e <__swsetup_r+0x62> @ imm = #-0x52
 8063a9e: 2209         	movs	r2, #0x9
 8063aa0: f043 0340    	orr	r3, r3, #0x40
 8063aa4: f04f 30ff    	mov.w	r0, #0xffffffff
 8063aa8: 602a         	str	r2, [r5]
 8063aaa: 81a3         	strh	r3, [r4, #0xc]
 8063aac: bd38         	pop	{r3, r4, r5, pc}
 8063aae: f043 0340    	orr	r3, r3, #0x40
 8063ab2: f04f 30ff    	mov.w	r0, #0xffffffff
 8063ab6: 81a3         	strh	r3, [r4, #0xc]
 8063ab8: bd38         	pop	{r3, r4, r5, pc}
 8063aba: bf00         	nop

08063abc <$d>:
 8063abc: 90 23 00 20  	.word	0x20002390

08063ac0 <quorem>:
 8063ac0: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8063ac4: 6903         	ldr	r3, [r0, #0x10]
 8063ac6: b085         	sub	sp, #0x14
 8063ac8: 690c         	ldr	r4, [r1, #0x10]
 8063aca: 9101         	str	r1, [sp, #0x4]
 8063acc: 42a3         	cmp	r3, r4
 8063ace: f2c0 808c    	blt.w	0x8063bea <quorem+0x12a> @ imm = #0x118
 8063ad2: 3c01         	subs	r4, #0x1
 8063ad4: f101 0514    	add.w	r5, r1, #0x14
 8063ad8: f100 0814    	add.w	r8, r0, #0x14
 8063adc: 4681         	mov	r9, r0
 8063ade: 00a3         	lsls	r3, r4, #0x2
 8063ae0: f858 2024    	ldr.w	r2, [r8, r4, lsl #2]
 8063ae4: eb08 0184    	add.w	r1, r8, r4, lsl #2
 8063ae8: 9302         	str	r3, [sp, #0x8]
 8063aea: eb05 0784    	add.w	r7, r5, r4, lsl #2
 8063aee: f855 3024    	ldr.w	r3, [r5, r4, lsl #2]
 8063af2: 9103         	str	r1, [sp, #0xc]
 8063af4: 3301         	adds	r3, #0x1
 8063af6: 429a         	cmp	r2, r3
 8063af8: fbb2 f6f3    	udiv	r6, r2, r3
 8063afc: d33c         	blo	0x8063b78 <quorem+0xb8> @ imm = #0x78
 8063afe: 2100         	movs	r1, #0x0
 8063b00: 46ae         	mov	lr, r5
 8063b02: 4640         	mov	r0, r8
 8063b04: 460a         	mov	r2, r1
 8063b06: f85e 3b04    	ldr	r3, [lr], #4
 8063b0a: f8d0 a000    	ldr.w	r10, [r0]
 8063b0e: fa1f fc83    	uxth.w	r12, r3
 8063b12: 4577         	cmp	r7, lr
 8063b14: ea4f 4313    	lsr.w	r3, r3, #0x10
 8063b18: fb06 110c    	mla	r1, r6, r12, r1
 8063b1c: fa1f fb8a    	uxth.w	r11, r10
 8063b20: ea4f 4c11    	lsr.w	r12, r1, #0x10
 8063b24: fb06 cc03    	mla	r12, r6, r3, r12
 8063b28: b28b         	uxth	r3, r1
 8063b2a: eba2 0203    	sub.w	r2, r2, r3
 8063b2e: ea4f 411c    	lsr.w	r1, r12, #0x10
 8063b32: eb02 030b    	add.w	r3, r2, r11
 8063b36: fa1f f28c    	uxth.w	r2, r12
 8063b3a: ebc2 421a    	rsb	r2, r2, r10, lsr #16
 8063b3e: eb02 4223    	add.w	r2, r2, r3, asr #16
 8063b42: b29b         	uxth	r3, r3
 8063b44: ea43 4302    	orr.w	r3, r3, r2, lsl #16
 8063b48: ea4f 4222    	asr.w	r2, r2, #0x10
 8063b4c: f840 3b04    	str	r3, [r0], #4
 8063b50: d2d9         	bhs	0x8063b06 <quorem+0x46> @ imm = #-0x4e
 8063b52: 9b02         	ldr	r3, [sp, #0x8]
 8063b54: f858 3003    	ldr.w	r3, [r8, r3]
 8063b58: b973         	cbnz	r3, 0x8063b78 <quorem+0xb8> @ imm = #0x1c
 8063b5a: 9b03         	ldr	r3, [sp, #0xc]
 8063b5c: 3b04         	subs	r3, #0x4
 8063b5e: 4598         	cmp	r8, r3
 8063b60: d304         	blo	0x8063b6c <quorem+0xac> @ imm = #0x8
 8063b62: e007         	b	0x8063b74 <quorem+0xb4> @ imm = #0xe
 8063b64: 4598         	cmp	r8, r3
 8063b66: f104 34ff    	add.w	r4, r4, #0xffffffff
 8063b6a: d203         	bhs	0x8063b74 <quorem+0xb4> @ imm = #0x6
 8063b6c: f853 2904    	ldr	r2, [r3], #-4
 8063b70: 2a00         	cmp	r2, #0x0
 8063b72: d0f7         	beq	0x8063b64 <quorem+0xa4> @ imm = #-0x12
 8063b74: f8c9 4010    	str.w	r4, [r9, #0x10]
 8063b78: 9901         	ldr	r1, [sp, #0x4]
 8063b7a: 4648         	mov	r0, r9
 8063b7c: f002 f9b2    	bl	0x8065ee4 <__mcmp>      @ imm = #0x2364
 8063b80: 2800         	cmp	r0, #0x0
 8063b82: db2e         	blt	0x8063be2 <quorem+0x122> @ imm = #0x5c
 8063b84: 3601         	adds	r6, #0x1
 8063b86: 4640         	mov	r0, r8
 8063b88: 2300         	movs	r3, #0x0
 8063b8a: f855 1b04    	ldr	r1, [r5], #4
 8063b8e: f8d0 c000    	ldr.w	r12, [r0]
 8063b92: b28a         	uxth	r2, r1
 8063b94: 42af         	cmp	r7, r5
 8063b96: ea4f 4111    	lsr.w	r1, r1, #0x10
 8063b9a: eba3 0202    	sub.w	r2, r3, r2
 8063b9e: fa1f fe8c    	uxth.w	lr, r12
 8063ba2: ebc1 431c    	rsb	r3, r1, r12, lsr #16
 8063ba6: 4472         	add	r2, lr
 8063ba8: eb03 4322    	add.w	r3, r3, r2, asr #16
 8063bac: b292         	uxth	r2, r2
 8063bae: ea42 4203    	orr.w	r2, r2, r3, lsl #16
 8063bb2: ea4f 4323    	asr.w	r3, r3, #0x10
 8063bb6: f840 2b04    	str	r2, [r0], #4
 8063bba: d2e6         	bhs	0x8063b8a <quorem+0xca> @ imm = #-0x34
 8063bbc: f858 2024    	ldr.w	r2, [r8, r4, lsl #2]
 8063bc0: eb08 0384    	add.w	r3, r8, r4, lsl #2
 8063bc4: b96a         	cbnz	r2, 0x8063be2 <quorem+0x122> @ imm = #0x1a
 8063bc6: 3b04         	subs	r3, #0x4
 8063bc8: 4598         	cmp	r8, r3
 8063bca: d304         	blo	0x8063bd6 <quorem+0x116> @ imm = #0x8
 8063bcc: e007         	b	0x8063bde <quorem+0x11e> @ imm = #0xe
 8063bce: 4598         	cmp	r8, r3
 8063bd0: f104 34ff    	add.w	r4, r4, #0xffffffff
 8063bd4: d203         	bhs	0x8063bde <quorem+0x11e> @ imm = #0x6
 8063bd6: f853 2904    	ldr	r2, [r3], #-4
 8063bda: 2a00         	cmp	r2, #0x0
 8063bdc: d0f7         	beq	0x8063bce <quorem+0x10e> @ imm = #-0x12
 8063bde: f8c9 4010    	str.w	r4, [r9, #0x10]
 8063be2: 4630         	mov	r0, r6
 8063be4: b005         	add	sp, #0x14
 8063be6: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8063bea: 2000         	movs	r0, #0x0
 8063bec: b005         	add	sp, #0x14
 8063bee: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8063bf2: bf00         	nop

08063bf4 <_dtoa_r>:
 8063bf4: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8063bf8: 6c01         	ldr	r1, [r0, #0x40]
 8063bfa: b09b         	sub	sp, #0x6c
 8063bfc: 4616         	mov	r6, r2
 8063bfe: 461f         	mov	r7, r3
 8063c00: 4604         	mov	r4, r0
 8063c02: 9d27         	ldr	r5, [sp, #0x9c]
 8063c04: e9cd 6702    	strd	r6, r7, [sp, #8]
 8063c08: b141         	cbz	r1, 0x8063c1c <_dtoa_r+0x28> @ imm = #0x10
 8063c0a: 6c42         	ldr	r2, [r0, #0x44]
 8063c0c: 2301         	movs	r3, #0x1
 8063c0e: 4093         	lsls	r3, r2
 8063c10: 604a         	str	r2, [r1, #0x4]
 8063c12: 608b         	str	r3, [r1, #0x8]
 8063c14: f001 feb0    	bl	0x8065978 <_Bfree>      @ imm = #0x1d60
 8063c18: 2300         	movs	r3, #0x0
 8063c1a: 6423         	str	r3, [r4, #0x40]
 8063c1c: f1b7 0900    	subs.w	r9, r7, #0x0
 8063c20: f2c0 80b4    	blt.w	0x8063d8c <_dtoa_r+0x198> @ imm = #0x168
 8063c24: 2300         	movs	r3, #0x0
 8063c26: 602b         	str	r3, [r5]
 8063c28: 4b79         	ldr	r3, [pc, #0x1e4]        @ 0x8063e10 <_dtoa_r+0x21c>
 8063c2a: ea33 0309    	bics.w	r3, r3, r9
 8063c2e: f000 80b8    	beq.w	0x8063da2 <_dtoa_r+0x1ae> @ imm = #0x170
 8063c32: e9dd 2302    	ldrd	r2, r3, [sp, #8]
 8063c36: 4610         	mov	r0, r2
 8063c38: 4619         	mov	r1, r3
 8063c3a: 2200         	movs	r2, #0x0
 8063c3c: 2300         	movs	r3, #0x0
 8063c3e: e9cd 010a    	strd	r0, r1, [sp, #40]
 8063c42: f005 f837    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x506e
 8063c46: 4680         	mov	r8, r0
 8063c48: b178         	cbz	r0, 0x8063c6a <_dtoa_r+0x76> @ imm = #0x1e
 8063c4a: 2301         	movs	r3, #0x1
 8063c4c: 9a26         	ldr	r2, [sp, #0x98]
 8063c4e: 6013         	str	r3, [r2]
 8063c50: 9b28         	ldr	r3, [sp, #0xa0]
 8063c52: 2b00         	cmp	r3, #0x0
 8063c54: f000 8269    	beq.w	0x806412a <_dtoa_r+0x536> @ imm = #0x4d2
 8063c58: 4b6e         	ldr	r3, [pc, #0x1b8]        @ 0x8063e14 <_dtoa_r+0x220>
 8063c5a: f103 39ff    	add.w	r9, r3, #0xffffffff
 8063c5e: 9a28         	ldr	r2, [sp, #0xa0]
 8063c60: 6013         	str	r3, [r2]
 8063c62: 4648         	mov	r0, r9
 8063c64: b01b         	add	sp, #0x6c
 8063c66: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8063c6a: ab18         	add	r3, sp, #0x60
 8063c6c: 4620         	mov	r0, r4
 8063c6e: e9dd ab0a    	ldrd	r10, r11, [sp, #40]
 8063c72: 9301         	str	r3, [sp, #0x4]
 8063c74: ab19         	add	r3, sp, #0x64
 8063c76: 4652         	mov	r2, r10
 8063c78: 9300         	str	r3, [sp]
 8063c7a: 465b         	mov	r3, r11
 8063c7c: f002 fa84    	bl	0x8066188 <__d2b>       @ imm = #0x2508
 8063c80: 900c         	str	r0, [sp, #0x30]
 8063c82: ea5f 5519    	lsrs.w	r5, r9, #0x14
 8063c86: f040 809e    	bne.w	0x8063dc6 <_dtoa_r+0x1d2> @ imm = #0x13c
 8063c8a: e9dd 8518    	ldrd	r8, r5, [sp, #96]
 8063c8e: 4445         	add	r5, r8
 8063c90: f205 4032    	addw	r0, r5, #0x432
 8063c94: 2820         	cmp	r0, #0x20
 8063c96: f340 824e    	ble.w	0x8064136 <_dtoa_r+0x542> @ imm = #0x49c
 8063c9a: f1c0 0040    	rsb.w	r0, r0, #0x40
 8063c9e: fa09 f900    	lsl.w	r9, r9, r0
 8063ca2: f205 4012    	addw	r0, r5, #0x412
 8063ca6: fa26 f000    	lsr.w	r0, r6, r0
 8063caa: ea49 0000    	orr.w	r0, r9, r0
 8063cae: f004 fd1f    	bl	0x80686f0 <__floatunsidf> @ imm = #0x4a3e
 8063cb2: 3d01         	subs	r5, #0x1
 8063cb4: 2301         	movs	r3, #0x1
 8063cb6: f1a1 71f8    	sub.w	r1, r1, #0x1f00000
 8063cba: 9312         	str	r3, [sp, #0x48]
 8063cbc: 2200         	movs	r2, #0x0
 8063cbe: 4b56         	ldr	r3, [pc, #0x158]        @ 0x8063e18 <_dtoa_r+0x224>
 8063cc0: f004 fbd8    	bl	0x8068474 <__subdf3>    @ imm = #0x47b0
 8063cc4: a34c         	adr	r3, #304 <_dtoa_r+0x120>
 8063cc6: e9d3 2300    	ldrd	r2, r3, [r3]
 8063cca: f004 fd8b    	bl	0x80687e4 <__muldf3>    @ imm = #0x4b16
 8063cce: a34c         	adr	r3, #304 <_dtoa_r+0x12a>
 8063cd0: e9d3 2300    	ldrd	r2, r3, [r3]
 8063cd4: f004 fbd0    	bl	0x8068478 <__aeabi_dadd> @ imm = #0x47a0
 8063cd8: 4606         	mov	r6, r0
 8063cda: 460f         	mov	r7, r1
 8063cdc: 4628         	mov	r0, r5
 8063cde: f004 fd17    	bl	0x8068710 <__floatsidf> @ imm = #0x4a2e
 8063ce2: a349         	adr	r3, #292 <_dtoa_r+0x13b>
 8063ce4: e9d3 2300    	ldrd	r2, r3, [r3]
 8063ce8: f004 fd7c    	bl	0x80687e4 <__muldf3>    @ imm = #0x4af8
 8063cec: 4602         	mov	r2, r0
 8063cee: 460b         	mov	r3, r1
 8063cf0: 4630         	mov	r0, r6
 8063cf2: 4639         	mov	r1, r7
 8063cf4: f004 fbc0    	bl	0x8068478 <__aeabi_dadd> @ imm = #0x4780
 8063cf8: 4606         	mov	r6, r0
 8063cfa: 460f         	mov	r7, r1
 8063cfc: f005 f822    	bl	0x8068d44 <__fixdfsi>   @ imm = #0x5044
 8063d00: 2200         	movs	r2, #0x0
 8063d02: 4681         	mov	r9, r0
 8063d04: 9005         	str	r0, [sp, #0x14]
 8063d06: 2300         	movs	r3, #0x0
 8063d08: 4630         	mov	r0, r6
 8063d0a: 4639         	mov	r1, r7
 8063d0c: f004 ffdc    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x4fb8
 8063d10: 2800         	cmp	r0, #0x0
 8063d12: f040 81fc    	bne.w	0x806410e <_dtoa_r+0x51a> @ imm = #0x3f8
 8063d16: 9e05         	ldr	r6, [sp, #0x14]
 8063d18: 2e16         	cmp	r6, #0x16
 8063d1a: f200 81ea    	bhi.w	0x80640f2 <_dtoa_r+0x4fe> @ imm = #0x3d4
 8063d1e: 4b3f         	ldr	r3, [pc, #0xfc]         @ 0x8063e1c <_dtoa_r+0x228>
 8063d20: eb03 03c6    	add.w	r3, r3, r6, lsl #3
 8063d24: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 8063d28: e9d3 2300    	ldrd	r2, r3, [r3]
 8063d2c: f004 ffcc    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x4f98
 8063d30: 2800         	cmp	r0, #0x0
 8063d32: d079         	beq	0x8063e28 <_dtoa_r+0x234> @ imm = #0xf2
 8063d34: 1e73         	subs	r3, r6, #0x1
 8063d36: eba8 0505    	sub.w	r5, r8, r5
 8063d3a: 9305         	str	r3, [sp, #0x14]
 8063d3c: 2300         	movs	r3, #0x0
 8063d3e: 930f         	str	r3, [sp, #0x3c]
 8063d40: 1e6b         	subs	r3, r5, #0x1
 8063d42: 9307         	str	r3, [sp, #0x1c]
 8063d44: f100 81dd    	bmi.w	0x8064102 <_dtoa_r+0x50e> @ imm = #0x3ba
 8063d48: 2300         	movs	r3, #0x0
 8063d4a: 9309         	str	r3, [sp, #0x24]
 8063d4c: 9b05         	ldr	r3, [sp, #0x14]
 8063d4e: 2b00         	cmp	r3, #0x0
 8063d50: da72         	bge	0x8063e38 <_dtoa_r+0x244> @ imm = #0xe4
 8063d52: 9b05         	ldr	r3, [sp, #0x14]
 8063d54: 9a09         	ldr	r2, [sp, #0x24]
 8063d56: 9306         	str	r3, [sp, #0x18]
 8063d58: 1ad2         	subs	r2, r2, r3
 8063d5a: 9209         	str	r2, [sp, #0x24]
 8063d5c: 425a         	rsbs	r2, r3, #0
 8063d5e: 2300         	movs	r3, #0x0
 8063d60: 920e         	str	r2, [sp, #0x38]
 8063d62: 9305         	str	r3, [sp, #0x14]
 8063d64: 9b24         	ldr	r3, [sp, #0x90]
 8063d66: 2b09         	cmp	r3, #0x9
 8063d68: d870         	bhi	0x8063e4c <_dtoa_r+0x258> @ imm = #0xe0
 8063d6a: 2b05         	cmp	r3, #0x5
 8063d6c: f340 81e8    	ble.w	0x8064140 <_dtoa_r+0x54c> @ imm = #0x3d0
 8063d70: 3b04         	subs	r3, #0x4
 8063d72: 2500         	movs	r5, #0x0
 8063d74: 9324         	str	r3, [sp, #0x90]
 8063d76: 9b24         	ldr	r3, [sp, #0x90]
 8063d78: 3b02         	subs	r3, #0x2
 8063d7a: 2b03         	cmp	r3, #0x3
 8063d7c: f200 853b    	bhi.w	0x80647f6 <_dtoa_r+0xc02> @ imm = #0xa76
 8063d80: e8df f013    	tbh	[pc, r3, lsl #1]

08063d84 <$d>:
 8063d84: a5 03 a2 03  	.word	0x03a203a5
 8063d88: 98 03 7c 03  	.word	0x037c0398

08063d8c <$t>:
 8063d8c: 2301         	movs	r3, #0x1
 8063d8e: f029 4900    	bic	r9, r9, #0x80000000
 8063d92: 602b         	str	r3, [r5]
 8063d94: 4b1e         	ldr	r3, [pc, #0x78]         @ 0x8063e10 <_dtoa_r+0x21c>
 8063d96: f8cd 900c    	str.w	r9, [sp, #0xc]
 8063d9a: ea33 0309    	bics.w	r3, r3, r9
 8063d9e: f47f af48    	bne.w	0x8063c32 <_dtoa_r+0x3e> @ imm = #-0x170
 8063da2: f242 730f    	movw	r3, #0x270f
 8063da6: f3c9 0913    	ubfx	r9, r9, #0x0, #0x14
 8063daa: 9a26         	ldr	r2, [sp, #0x98]
 8063dac: 6013         	str	r3, [r2]
 8063dae: ea59 0306    	orrs.w	r3, r9, r6
 8063db2: d116         	bne	0x8063de2 <_dtoa_r+0x1ee> @ imm = #0x2c
 8063db4: 9b28         	ldr	r3, [sp, #0xa0]
 8063db6: f8df 9068    	ldr.w	r9, [pc, #0x68]         @ 0x8063e20 <_dtoa_r+0x22c>
 8063dba: 2b00         	cmp	r3, #0x0
 8063dbc: f43f af51    	beq.w	0x8063c62 <_dtoa_r+0x6e> @ imm = #-0x15e
 8063dc0: f109 0308    	add.w	r3, r9, #0x8
 8063dc4: e74b         	b	0x8063c5e <_dtoa_r+0x6a> @ imm = #-0x16a
 8063dc6: f3cb 0313    	ubfx	r3, r11, #0x0, #0x14
 8063dca: f8cd 8048    	str.w	r8, [sp, #0x48]
 8063dce: f2a5 35ff    	subw	r5, r5, #0x3ff
 8063dd2: f8dd 8060    	ldr.w	r8, [sp, #0x60]
 8063dd6: f043 517f    	orr	r1, r3, #0x3fc00000
 8063dda: 4650         	mov	r0, r10
 8063ddc: f441 1140    	orr	r1, r1, #0x300000
 8063de0: e76c         	b	0x8063cbc <_dtoa_r+0xc8> @ imm = #-0x128
 8063de2: 9b28         	ldr	r3, [sp, #0xa0]
 8063de4: f8df 903c    	ldr.w	r9, [pc, #0x3c]         @ 0x8063e24 <_dtoa_r+0x230>
 8063de8: 2b00         	cmp	r3, #0x0
 8063dea: f43f af3a    	beq.w	0x8063c62 <_dtoa_r+0x6e> @ imm = #-0x18c
 8063dee: f109 0303    	add.w	r3, r9, #0x3
 8063df2: e734         	b	0x8063c5e <_dtoa_r+0x6a> @ imm = #-0x198
 8063df4: f3af 8000    	nop.w

08063df8 <$d>:
 8063df8: 61 43 6f 63  	.word	0x636f4361
 8063dfc: a7 87 d2 3f  	.word	0x3fd287a7
 8063e00: b3 c8 60 8b  	.word	0x8b60c8b3
 8063e04: 28 8a c6 3f  	.word	0x3fc68a28
 8063e08: fb 79 9f 50  	.word	0x509f79fb
 8063e0c: 13 44 d3 3f  	.word	0x3fd34413
 8063e10: 00 00 f0 7f  	.word	0x7ff00000
 8063e14: 0d a1 06 08  	.word	0x0806a10d
 8063e18: 00 00 f8 3f  	.word	0x3ff80000
 8063e1c: d0 a1 06 08  	.word	0x0806a1d0
 8063e20: 34 a1 06 08  	.word	0x0806a134
 8063e24: 30 a1 06 08  	.word	0x0806a130

08063e28 <$t>:
 8063e28: eba8 0505    	sub.w	r5, r8, r5
 8063e2c: 1e6b         	subs	r3, r5, #0x1
 8063e2e: 9307         	str	r3, [sp, #0x1c]
 8063e30: f100 84c9    	bmi.w	0x80647c6 <_dtoa_r+0xbd2> @ imm = #0x992
 8063e34: 900f         	str	r0, [sp, #0x3c]
 8063e36: 9009         	str	r0, [sp, #0x24]
 8063e38: 9b07         	ldr	r3, [sp, #0x1c]
 8063e3a: 9a05         	ldr	r2, [sp, #0x14]
 8063e3c: 4413         	add	r3, r2
 8063e3e: e9cd 2306    	strd	r2, r3, [sp, #24]
 8063e42: 2300         	movs	r3, #0x0
 8063e44: 930e         	str	r3, [sp, #0x38]
 8063e46: 9b24         	ldr	r3, [sp, #0x90]
 8063e48: 2b09         	cmp	r3, #0x9
 8063e4a: d98e         	bls	0x8063d6a <_dtoa_r+0x176> @ imm = #-0xe4
 8063e4c: 2300         	movs	r3, #0x0
 8063e4e: 2501         	movs	r5, #0x1
 8063e50: e9cd 3324    	strd	r3, r3, [sp, #144]
 8063e54: f04f 33ff    	mov.w	r3, #0xffffffff
 8063e58: 950d         	str	r5, [sp, #0x34]
 8063e5a: 9308         	str	r3, [sp, #0x20]
 8063e5c: 2100         	movs	r1, #0x0
 8063e5e: 9b08         	ldr	r3, [sp, #0x20]
 8063e60: 6461         	str	r1, [r4, #0x44]
 8063e62: 9313         	str	r3, [sp, #0x4c]
 8063e64: 4620         	mov	r0, r4
 8063e66: f001 fd61    	bl	0x806592c <_Balloc>     @ imm = #0x1ac2
 8063e6a: 9004         	str	r0, [sp, #0x10]
 8063e6c: 2800         	cmp	r0, #0x0
 8063e6e: f000 8627    	beq.w	0x8064ac0 <_dtoa_r+0xecc> @ imm = #0xc4e
 8063e72: 9b08         	ldr	r3, [sp, #0x20]
 8063e74: 2b0e         	cmp	r3, #0xe
 8063e76: bf8c         	ite	hi
 8063e78: 2500         	movhi	r5, #0x0
 8063e7a: f005 0501    	andls	r5, r5, #0x1
 8063e7e: 9b04         	ldr	r3, [sp, #0x10]
 8063e80: 6423         	str	r3, [r4, #0x40]
 8063e82: 2d00         	cmp	r5, #0x0
 8063e84: f000 8109    	beq.w	0x806409a <_dtoa_r+0x4a6> @ imm = #0x212
 8063e88: 9906         	ldr	r1, [sp, #0x18]
 8063e8a: 2900         	cmp	r1, #0x0
 8063e8c: f340 826c    	ble.w	0x8064368 <_dtoa_r+0x774> @ imm = #0x4d8
 8063e90: 4bac         	ldr	r3, [pc, #0x2b0]        @ 0x8064144 <_dtoa_r+0x550>
 8063e92: f001 020f    	and	r2, r1, #0xf
 8063e96: 05c8         	lsls	r0, r1, #0x17
 8063e98: ea4f 1521    	asr.w	r5, r1, #0x4
 8063e9c: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 8063ea0: e9d3 6700    	ldrd	r6, r7, [r3]
 8063ea4: f140 82e5    	bpl.w	0x8064472 <_dtoa_r+0x87e> @ imm = #0x5ca
 8063ea8: 4ba7         	ldr	r3, [pc, #0x29c]        @ 0x8064148 <_dtoa_r+0x554>
 8063eaa: f005 050f    	and	r5, r5, #0xf
 8063eae: f04f 0803    	mov.w	r8, #0x3
 8063eb2: e9d3 2308    	ldrd	r2, r3, [r3, #32]
 8063eb6: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 8063eba: f004 fdbd    	bl	0x8068a38 <__divdf3>    @ imm = #0x4b7a
 8063ebe: 4682         	mov	r10, r0
 8063ec0: 468b         	mov	r11, r1
 8063ec2: b18d         	cbz	r5, 0x8063ee8 <_dtoa_r+0x2f4> @ imm = #0x22
 8063ec4: f8df 9280    	ldr.w	r9, [pc, #0x280]        @ 0x8064148 <_dtoa_r+0x554>
 8063ec8: 07e9         	lsls	r1, r5, #0x1f
 8063eca: d509         	bpl	0x8063ee0 <_dtoa_r+0x2ec> @ imm = #0x12
 8063ecc: 4630         	mov	r0, r6
 8063ece: 4639         	mov	r1, r7
 8063ed0: f108 0801    	add.w	r8, r8, #0x1
 8063ed4: e9d9 2300    	ldrd	r2, r3, [r9]
 8063ed8: f004 fc84    	bl	0x80687e4 <__muldf3>    @ imm = #0x4908
 8063edc: 4606         	mov	r6, r0
 8063ede: 460f         	mov	r7, r1
 8063ee0: 106d         	asrs	r5, r5, #0x1
 8063ee2: f109 0908    	add.w	r9, r9, #0x8
 8063ee6: d1ef         	bne	0x8063ec8 <_dtoa_r+0x2d4> @ imm = #-0x22
 8063ee8: 4632         	mov	r2, r6
 8063eea: 463b         	mov	r3, r7
 8063eec: 4650         	mov	r0, r10
 8063eee: 4659         	mov	r1, r11
 8063ef0: f004 fda2    	bl	0x8068a38 <__divdf3>    @ imm = #0x4b44
 8063ef4: e9cd 0110    	strd	r0, r1, [sp, #64]
 8063ef8: 9b0f         	ldr	r3, [sp, #0x3c]
 8063efa: b153         	cbz	r3, 0x8063f12 <_dtoa_r+0x31e> @ imm = #0x14
 8063efc: 2200         	movs	r2, #0x0
 8063efe: 4b93         	ldr	r3, [pc, #0x24c]        @ 0x806414c <_dtoa_r+0x558>
 8063f00: e9dd 5610    	ldrd	r5, r6, [sp, #64]
 8063f04: 4628         	mov	r0, r5
 8063f06: 4631         	mov	r1, r6
 8063f08: f004 fede    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x4dbc
 8063f0c: 2800         	cmp	r0, #0x0
 8063f0e: f040 8432    	bne.w	0x8064776 <_dtoa_r+0xb82> @ imm = #0x864
 8063f12: 4640         	mov	r0, r8
 8063f14: f004 fbfc    	bl	0x8068710 <__floatsidf> @ imm = #0x47f8
 8063f18: e9dd 2310    	ldrd	r2, r3, [sp, #64]
 8063f1c: f004 fc62    	bl	0x80687e4 <__muldf3>    @ imm = #0x48c4
 8063f20: 4b8b         	ldr	r3, [pc, #0x22c]        @ 0x8064150 <_dtoa_r+0x55c>
 8063f22: 2200         	movs	r2, #0x0
 8063f24: f004 faa8    	bl	0x8068478 <__aeabi_dadd> @ imm = #0x4550
 8063f28: 9b08         	ldr	r3, [sp, #0x20]
 8063f2a: 4680         	mov	r8, r0
 8063f2c: f1a1 7950    	sub.w	r9, r1, #0x3400000
 8063f30: 2b00         	cmp	r3, #0x0
 8063f32: f000 8098    	beq.w	0x8064066 <_dtoa_r+0x472> @ imm = #0x130
 8063f36: 9b06         	ldr	r3, [sp, #0x18]
 8063f38: 9315         	str	r3, [sp, #0x54]
 8063f3a: 9b08         	ldr	r3, [sp, #0x20]
 8063f3c: 9314         	str	r3, [sp, #0x50]
 8063f3e: 9b0d         	ldr	r3, [sp, #0x34]
 8063f40: 2b00         	cmp	r3, #0x0
 8063f42: f000 82c7    	beq.w	0x80644d4 <_dtoa_r+0x8e0> @ imm = #0x58e
 8063f46: 9a14         	ldr	r2, [sp, #0x50]
 8063f48: 2000         	movs	r0, #0x0
 8063f4a: 4b7e         	ldr	r3, [pc, #0x1f8]        @ 0x8064144 <_dtoa_r+0x550>
 8063f4c: 4981         	ldr	r1, [pc, #0x204]        @ 0x8064154 <_dtoa_r+0x560>
 8063f4e: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 8063f52: 9d04         	ldr	r5, [sp, #0x10]
 8063f54: e953 2302    	ldrd	r2, r3, [r3, #-8]
 8063f58: f004 fd6e    	bl	0x8068a38 <__divdf3>    @ imm = #0x4adc
 8063f5c: 4642         	mov	r2, r8
 8063f5e: 464b         	mov	r3, r9
 8063f60: f004 fa88    	bl	0x8068474 <__subdf3>    @ imm = #0x4510
 8063f64: 4682         	mov	r10, r0
 8063f66: 468b         	mov	r11, r1
 8063f68: e9dd 8910    	ldrd	r8, r9, [sp, #64]
 8063f6c: 4649         	mov	r1, r9
 8063f6e: 4640         	mov	r0, r8
 8063f70: f004 fee8    	bl	0x8068d44 <__fixdfsi>   @ imm = #0x4dd0
 8063f74: 4607         	mov	r7, r0
 8063f76: f004 fbcb    	bl	0x8068710 <__floatsidf> @ imm = #0x4796
 8063f7a: 4602         	mov	r2, r0
 8063f7c: 3730         	adds	r7, #0x30
 8063f7e: 460b         	mov	r3, r1
 8063f80: 4640         	mov	r0, r8
 8063f82: 4649         	mov	r1, r9
 8063f84: f004 fa76    	bl	0x8068474 <__subdf3>    @ imm = #0x44ec
 8063f88: f805 7b01    	strb	r7, [r5], #1
 8063f8c: 4606         	mov	r6, r0
 8063f8e: 460f         	mov	r7, r1
 8063f90: 4650         	mov	r0, r10
 8063f92: 4659         	mov	r1, r11
 8063f94: 4632         	mov	r2, r6
 8063f96: 463b         	mov	r3, r7
 8063f98: f004 feb4    	bl	0x8068d04 <__aeabi_dcmpgt> @ imm = #0x4d68
 8063f9c: 2800         	cmp	r0, #0x0
 8063f9e: f040 84e4    	bne.w	0x806496a <_dtoa_r+0xd76> @ imm = #0x9c8
 8063fa2: f04f 0800    	mov.w	r8, #0x0
 8063fa6: f8dd 9050    	ldr.w	r9, [sp, #0x50]
 8063faa: 9410         	str	r4, [sp, #0x40]
 8063fac: e02b         	b	0x8064006 <_dtoa_r+0x412> @ imm = #0x56
 8063fae: f108 0801    	add.w	r8, r8, #0x1
 8063fb2: 45c8         	cmp	r8, r9
 8063fb4: f280 84fa    	bge.w	0x80649ac <_dtoa_r+0xdb8> @ imm = #0x9f4
 8063fb8: 4650         	mov	r0, r10
 8063fba: 4659         	mov	r1, r11
 8063fbc: 2200         	movs	r2, #0x0
 8063fbe: 4b66         	ldr	r3, [pc, #0x198]        @ 0x8064158 <_dtoa_r+0x564>
 8063fc0: f004 fc10    	bl	0x80687e4 <__muldf3>    @ imm = #0x4820
 8063fc4: 2200         	movs	r2, #0x0
 8063fc6: 4b64         	ldr	r3, [pc, #0x190]        @ 0x8064158 <_dtoa_r+0x564>
 8063fc8: 4682         	mov	r10, r0
 8063fca: 468b         	mov	r11, r1
 8063fcc: 4630         	mov	r0, r6
 8063fce: 4639         	mov	r1, r7
 8063fd0: f004 fc08    	bl	0x80687e4 <__muldf3>    @ imm = #0x4810
 8063fd4: 460f         	mov	r7, r1
 8063fd6: 4606         	mov	r6, r0
 8063fd8: f004 feb4    	bl	0x8068d44 <__fixdfsi>   @ imm = #0x4d68
 8063fdc: 4604         	mov	r4, r0
 8063fde: f004 fb97    	bl	0x8068710 <__floatsidf> @ imm = #0x472e
 8063fe2: 4602         	mov	r2, r0
 8063fe4: 460b         	mov	r3, r1
 8063fe6: 3430         	adds	r4, #0x30
 8063fe8: 4630         	mov	r0, r6
 8063fea: 4639         	mov	r1, r7
 8063fec: f004 fa42    	bl	0x8068474 <__subdf3>    @ imm = #0x4484
 8063ff0: 4652         	mov	r2, r10
 8063ff2: 465b         	mov	r3, r11
 8063ff4: f805 4b01    	strb	r4, [r5], #1
 8063ff8: 4606         	mov	r6, r0
 8063ffa: 460f         	mov	r7, r1
 8063ffc: f004 fe64    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x4cc8
 8064000: 2800         	cmp	r0, #0x0
 8064002: f040 84b1    	bne.w	0x8064968 <_dtoa_r+0xd74> @ imm = #0x962
 8064006: 4632         	mov	r2, r6
 8064008: 463b         	mov	r3, r7
 806400a: 2000         	movs	r0, #0x0
 806400c: 494f         	ldr	r1, [pc, #0x13c]        @ 0x806414c <_dtoa_r+0x558>
 806400e: f004 fa31    	bl	0x8068474 <__subdf3>    @ imm = #0x4462
 8064012: 4652         	mov	r2, r10
 8064014: 465b         	mov	r3, r11
 8064016: f004 fe57    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x4cae
 806401a: 2800         	cmp	r0, #0x0
 806401c: d0c7         	beq	0x8063fae <_dtoa_r+0x3ba> @ imm = #-0x72
 806401e: 9904         	ldr	r1, [sp, #0x10]
 8064020: 9c10         	ldr	r4, [sp, #0x40]
 8064022: e002         	b	0x806402a <_dtoa_r+0x436> @ imm = #0x4
 8064024: 42a9         	cmp	r1, r5
 8064026: f000 8475    	beq.w	0x8064914 <_dtoa_r+0xd20> @ imm = #0x8ea
 806402a: 462a         	mov	r2, r5
 806402c: f815 3d01    	ldrb	r3, [r5, #-1]!
 8064030: 2b39         	cmp	r3, #0x39
 8064032: d0f7         	beq	0x8064024 <_dtoa_r+0x430> @ imm = #-0x12
 8064034: 3301         	adds	r3, #0x1
 8064036: 9104         	str	r1, [sp, #0x10]
 8064038: b2db         	uxtb	r3, r3
 806403a: 702b         	strb	r3, [r5]
 806403c: 9b15         	ldr	r3, [sp, #0x54]
 806403e: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 8064042: 3301         	adds	r3, #0x1
 8064044: 9204         	str	r2, [sp, #0x10]
 8064046: 9306         	str	r3, [sp, #0x18]
 8064048: e100         	b	0x806424c <_dtoa_r+0x658> @ imm = #0x200
 806404a: 4640         	mov	r0, r8
 806404c: f004 fb60    	bl	0x8068710 <__floatsidf> @ imm = #0x46c0
 8064050: e9dd 2310    	ldrd	r2, r3, [sp, #64]
 8064054: f004 fbc6    	bl	0x80687e4 <__muldf3>    @ imm = #0x478c
 8064058: 2200         	movs	r2, #0x0
 806405a: 4b3d         	ldr	r3, [pc, #0xf4]         @ 0x8064150 <_dtoa_r+0x55c>
 806405c: f004 fa0c    	bl	0x8068478 <__aeabi_dadd> @ imm = #0x4418
 8064060: 4680         	mov	r8, r0
 8064062: f1a1 7950    	sub.w	r9, r1, #0x3400000
 8064066: 2200         	movs	r2, #0x0
 8064068: 4b3c         	ldr	r3, [pc, #0xf0]         @ 0x806415c <_dtoa_r+0x568>
 806406a: e9dd 0110    	ldrd	r0, r1, [sp, #64]
 806406e: f004 fa01    	bl	0x8068474 <__subdf3>    @ imm = #0x4402
 8064072: 4642         	mov	r2, r8
 8064074: 464b         	mov	r3, r9
 8064076: 4682         	mov	r10, r0
 8064078: 468b         	mov	r11, r1
 806407a: f004 fe43    	bl	0x8068d04 <__aeabi_dcmpgt> @ imm = #0x4c86
 806407e: 4606         	mov	r6, r0
 8064080: 2800         	cmp	r0, #0x0
 8064082: f040 836a    	bne.w	0x806475a <_dtoa_r+0xb66> @ imm = #0x6d4
 8064086: 4642         	mov	r2, r8
 8064088: f109 4300    	add.w	r3, r9, #0x80000000
 806408c: 4650         	mov	r0, r10
 806408e: 4659         	mov	r1, r11
 8064090: f004 fe1a    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x4c34
 8064094: 2800         	cmp	r0, #0x0
 8064096: f040 81b4    	bne.w	0x8064402 <_dtoa_r+0x80e> @ imm = #0x368
 806409a: 9b19         	ldr	r3, [sp, #0x64]
 806409c: 2b00         	cmp	r3, #0x0
 806409e: db03         	blt	0x80640a8 <_dtoa_r+0x4b4> @ imm = #0x6
 80640a0: 9a06         	ldr	r2, [sp, #0x18]
 80640a2: 2a0e         	cmp	r2, #0xe
 80640a4: f340 818d    	ble.w	0x80643c2 <_dtoa_r+0x7ce> @ imm = #0x31a
 80640a8: 9a0d         	ldr	r2, [sp, #0x34]
 80640aa: 2a00         	cmp	r2, #0x0
 80640ac: d05a         	beq	0x8064164 <_dtoa_r+0x570> @ imm = #0xb4
 80640ae: 9a24         	ldr	r2, [sp, #0x90]
 80640b0: 2a01         	cmp	r2, #0x1
 80640b2: f340 838a    	ble.w	0x80647ca <_dtoa_r+0xbd6> @ imm = #0x714
 80640b6: 9b08         	ldr	r3, [sp, #0x20]
 80640b8: 1e5a         	subs	r2, r3, #0x1
 80640ba: 9b0e         	ldr	r3, [sp, #0x38]
 80640bc: 4293         	cmp	r3, r2
 80640be: f280 8328    	bge.w	0x8064712 <_dtoa_r+0xb1e> @ imm = #0x650
 80640c2: 9b0e         	ldr	r3, [sp, #0x38]
 80640c4: 2600         	movs	r6, #0x0
 80640c6: 9905         	ldr	r1, [sp, #0x14]
 80640c8: 1ad3         	subs	r3, r2, r3
 80640ca: 920e         	str	r2, [sp, #0x38]
 80640cc: 4419         	add	r1, r3
 80640ce: 9105         	str	r1, [sp, #0x14]
 80640d0: 9b08         	ldr	r3, [sp, #0x20]
 80640d2: 2b00         	cmp	r3, #0x0
 80640d4: f2c0 8419    	blt.w	0x806490a <_dtoa_r+0xd16> @ imm = #0x832
 80640d8: 9a07         	ldr	r2, [sp, #0x1c]
 80640da: 441a         	add	r2, r3
 80640dc: 9207         	str	r2, [sp, #0x1c]
 80640de: 9a09         	ldr	r2, [sp, #0x24]
 80640e0: 4617         	mov	r7, r2
 80640e2: 441a         	add	r2, r3
 80640e4: 9209         	str	r2, [sp, #0x24]
 80640e6: 2101         	movs	r1, #0x1
 80640e8: 4620         	mov	r0, r4
 80640ea: f001 fd49    	bl	0x8065b80 <__i2b>       @ imm = #0x1a92
 80640ee: 4605         	mov	r5, r0
 80640f0: e03b         	b	0x806416a <_dtoa_r+0x576> @ imm = #0x76
 80640f2: 2301         	movs	r3, #0x1
 80640f4: eba8 0505    	sub.w	r5, r8, r5
 80640f8: 930f         	str	r3, [sp, #0x3c]
 80640fa: 1e6b         	subs	r3, r5, #0x1
 80640fc: 9307         	str	r3, [sp, #0x1c]
 80640fe: f57f ae23    	bpl.w	0x8063d48 <_dtoa_r+0x154> @ imm = #-0x3ba
 8064102: f1c5 0301    	rsb.w	r3, r5, #0x1
 8064106: 9309         	str	r3, [sp, #0x24]
 8064108: 2300         	movs	r3, #0x0
 806410a: 9307         	str	r3, [sp, #0x1c]
 806410c: e61e         	b	0x8063d4c <_dtoa_r+0x158> @ imm = #-0x3c4
 806410e: 4648         	mov	r0, r9
 8064110: f004 fafe    	bl	0x8068710 <__floatsidf> @ imm = #0x45fc
 8064114: 4632         	mov	r2, r6
 8064116: 463b         	mov	r3, r7
 8064118: f004 fdcc    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x4b98
 806411c: 2800         	cmp	r0, #0x0
 806411e: f47f adfa    	bne.w	0x8063d16 <_dtoa_r+0x122> @ imm = #-0x40c
 8064122: f109 33ff    	add.w	r3, r9, #0xffffffff
 8064126: 9305         	str	r3, [sp, #0x14]
 8064128: e5f5         	b	0x8063d16 <_dtoa_r+0x122> @ imm = #-0x416
 806412a: f8df 9034    	ldr.w	r9, [pc, #0x34]         @ 0x8064160 <_dtoa_r+0x56c>
 806412e: 4648         	mov	r0, r9
 8064130: b01b         	add	sp, #0x6c
 8064132: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8064136: f1c0 0020    	rsb.w	r0, r0, #0x20
 806413a: fa06 f000    	lsl.w	r0, r6, r0
 806413e: e5b6         	b	0x8063cae <_dtoa_r+0xba> @ imm = #-0x494
 8064140: 2501         	movs	r5, #0x1
 8064142: e618         	b	0x8063d76 <_dtoa_r+0x182> @ imm = #-0x3d0

08064144 <$d>:
 8064144: d0 a1 06 08  	.word	0x0806a1d0
 8064148: c0 a2 06 08  	.word	0x0806a2c0
 806414c: 00 00 f0 3f  	.word	0x3ff00000
 8064150: 00 00 1c 40  	.word	0x401c0000
 8064154: 00 00 e0 3f  	.word	0x3fe00000
 8064158: 00 00 24 40  	.word	0x40240000
 806415c: 00 00 14 40  	.word	0x40140000
 8064160: 0c a1 06 08  	.word	0x0806a10c

08064164 <$t>:
 8064164: 9e0e         	ldr	r6, [sp, #0x38]
 8064166: 9f09         	ldr	r7, [sp, #0x24]
 8064168: 9d0d         	ldr	r5, [sp, #0x34]
 806416a: 2f00         	cmp	r7, #0x0
 806416c: dd0c         	ble	0x8064188 <_dtoa_r+0x594> @ imm = #0x18
 806416e: 9907         	ldr	r1, [sp, #0x1c]
 8064170: 2900         	cmp	r1, #0x0
 8064172: 460b         	mov	r3, r1
 8064174: dd08         	ble	0x8064188 <_dtoa_r+0x594> @ imm = #0x10
 8064176: 42b9         	cmp	r1, r7
 8064178: 9a09         	ldr	r2, [sp, #0x24]
 806417a: bfa8         	it	ge
 806417c: 463b         	movge	r3, r7
 806417e: 1ad2         	subs	r2, r2, r3
 8064180: 1aff         	subs	r7, r7, r3
 8064182: 1acb         	subs	r3, r1, r3
 8064184: 9209         	str	r2, [sp, #0x24]
 8064186: 9307         	str	r3, [sp, #0x1c]
 8064188: 9b0e         	ldr	r3, [sp, #0x38]
 806418a: b153         	cbz	r3, 0x80641a2 <_dtoa_r+0x5ae> @ imm = #0x14
 806418c: 9b0d         	ldr	r3, [sp, #0x34]
 806418e: 2b00         	cmp	r3, #0x0
 8064190: f000 832a    	beq.w	0x80647e8 <_dtoa_r+0xbf4> @ imm = #0x654
 8064194: 2e00         	cmp	r6, #0x0
 8064196: f300 82a9    	bgt.w	0x80646ec <_dtoa_r+0xaf8> @ imm = #0x552
 806419a: 9b0e         	ldr	r3, [sp, #0x38]
 806419c: 1b9a         	subs	r2, r3, r6
 806419e: f040 82ba    	bne.w	0x8064716 <_dtoa_r+0xb22> @ imm = #0x574
 80641a2: 2101         	movs	r1, #0x1
 80641a4: 4620         	mov	r0, r4
 80641a6: f001 fceb    	bl	0x8065b80 <__i2b>       @ imm = #0x19d6
 80641aa: 9a05         	ldr	r2, [sp, #0x14]
 80641ac: 4606         	mov	r6, r0
 80641ae: 2a00         	cmp	r2, #0x0
 80641b0: f300 8129    	bgt.w	0x8064406 <_dtoa_r+0x812> @ imm = #0x252
 80641b4: 9b24         	ldr	r3, [sp, #0x90]
 80641b6: 2b01         	cmp	r3, #0x1
 80641b8: f340 82d2    	ble.w	0x8064760 <_dtoa_r+0xb6c> @ imm = #0x5a4
 80641bc: f04f 0900    	mov.w	r9, #0x0
 80641c0: 9b05         	ldr	r3, [sp, #0x14]
 80641c2: 2b00         	cmp	r3, #0x0
 80641c4: f040 812a    	bne.w	0x806441c <_dtoa_r+0x828> @ imm = #0x254
 80641c8: 2301         	movs	r3, #0x1
 80641ca: 9907         	ldr	r1, [sp, #0x1c]
 80641cc: 440b         	add	r3, r1
 80641ce: f013 031f    	ands	r3, r3, #0x1f
 80641d2: d04e         	beq	0x8064272 <_dtoa_r+0x67e> @ imm = #0x9c
 80641d4: f1c3 0220    	rsb.w	r2, r3, #0x20
 80641d8: 2a04         	cmp	r2, #0x4
 80641da: f340 8464    	ble.w	0x8064aa6 <_dtoa_r+0xeb2> @ imm = #0x8c8
 80641de: f1c3 031c    	rsb.w	r3, r3, #0x1c
 80641e2: 9a09         	ldr	r2, [sp, #0x24]
 80641e4: 4419         	add	r1, r3
 80641e6: 441a         	add	r2, r3
 80641e8: 441f         	add	r7, r3
 80641ea: 9209         	str	r2, [sp, #0x24]
 80641ec: 9107         	str	r1, [sp, #0x1c]
 80641ee: 9b09         	ldr	r3, [sp, #0x24]
 80641f0: 2b00         	cmp	r3, #0x0
 80641f2: dd05         	ble	0x8064200 <_dtoa_r+0x60c> @ imm = #0xa
 80641f4: 990c         	ldr	r1, [sp, #0x30]
 80641f6: 461a         	mov	r2, r3
 80641f8: 4620         	mov	r0, r4
 80641fa: f001 fdff    	bl	0x8065dfc <__lshift>    @ imm = #0x1bfe
 80641fe: 900c         	str	r0, [sp, #0x30]
 8064200: 9b07         	ldr	r3, [sp, #0x1c]
 8064202: 2b00         	cmp	r3, #0x0
 8064204: dd05         	ble	0x8064212 <_dtoa_r+0x61e> @ imm = #0xa
 8064206: 4631         	mov	r1, r6
 8064208: 461a         	mov	r2, r3
 806420a: 4620         	mov	r0, r4
 806420c: f001 fdf6    	bl	0x8065dfc <__lshift>    @ imm = #0x1bec
 8064210: 4606         	mov	r6, r0
 8064212: 9b0f         	ldr	r3, [sp, #0x3c]
 8064214: 2b00         	cmp	r3, #0x0
 8064216: f040 810a    	bne.w	0x806442e <_dtoa_r+0x83a> @ imm = #0x214
 806421a: 9b08         	ldr	r3, [sp, #0x20]
 806421c: 2b00         	cmp	r3, #0x0
 806421e: dc31         	bgt	0x8064284 <_dtoa_r+0x690> @ imm = #0x62
 8064220: 9b24         	ldr	r3, [sp, #0x90]
 8064222: 2b02         	cmp	r3, #0x2
 8064224: dd2e         	ble	0x8064284 <_dtoa_r+0x690> @ imm = #0x5c
 8064226: 9b08         	ldr	r3, [sp, #0x20]
 8064228: 2b00         	cmp	r3, #0x0
 806422a: f000 81c3    	beq.w	0x80645b4 <_dtoa_r+0x9c0> @ imm = #0x386
 806422e: 9b25         	ldr	r3, [sp, #0x94]
 8064230: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 8064234: 43df         	mvns	r7, r3
 8064236: 4631         	mov	r1, r6
 8064238: 4620         	mov	r0, r4
 806423a: f001 fb9d    	bl	0x8065978 <_Bfree>      @ imm = #0x173a
 806423e: 1c7b         	adds	r3, r7, #0x1
 8064240: 9306         	str	r3, [sp, #0x18]
 8064242: b11d         	cbz	r5, 0x806424c <_dtoa_r+0x658> @ imm = #0x6
 8064244: 4629         	mov	r1, r5
 8064246: 4620         	mov	r0, r4
 8064248: f001 fb96    	bl	0x8065978 <_Bfree>      @ imm = #0x172c
 806424c: 990c         	ldr	r1, [sp, #0x30]
 806424e: 4620         	mov	r0, r4
 8064250: f001 fb92    	bl	0x8065978 <_Bfree>      @ imm = #0x1724
 8064254: 2300         	movs	r3, #0x0
 8064256: 9a04         	ldr	r2, [sp, #0x10]
 8064258: 9906         	ldr	r1, [sp, #0x18]
 806425a: 7013         	strb	r3, [r2]
 806425c: 9b26         	ldr	r3, [sp, #0x98]
 806425e: 6019         	str	r1, [r3]
 8064260: 9b28         	ldr	r3, [sp, #0xa0]
 8064262: 2b00         	cmp	r3, #0x0
 8064264: f43f acfd    	beq.w	0x8063c62 <_dtoa_r+0x6e> @ imm = #-0x606
 8064268: 4648         	mov	r0, r9
 806426a: 601a         	str	r2, [r3]
 806426c: b01b         	add	sp, #0x6c
 806426e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8064272: 231c         	movs	r3, #0x1c
 8064274: 9a09         	ldr	r2, [sp, #0x24]
 8064276: 441f         	add	r7, r3
 8064278: 441a         	add	r2, r3
 806427a: 9209         	str	r2, [sp, #0x24]
 806427c: 9a07         	ldr	r2, [sp, #0x1c]
 806427e: 441a         	add	r2, r3
 8064280: 9207         	str	r2, [sp, #0x1c]
 8064282: e7b4         	b	0x80641ee <_dtoa_r+0x5fa> @ imm = #-0x98
 8064284: 9b0d         	ldr	r3, [sp, #0x34]
 8064286: 2b00         	cmp	r3, #0x0
 8064288: f000 81aa    	beq.w	0x80645e0 <_dtoa_r+0x9ec> @ imm = #0x354
 806428c: 2f00         	cmp	r7, #0x0
 806428e: f300 8248    	bgt.w	0x8064722 <_dtoa_r+0xb2e> @ imm = #0x490
 8064292: f1b9 0f00    	cmp.w	r9, #0x0
 8064296: f040 8372    	bne.w	0x806497e <_dtoa_r+0xd8a> @ imm = #0x6e4
 806429a: 46aa         	mov	r10, r5
 806429c: 9b02         	ldr	r3, [sp, #0x8]
 806429e: f8dd 8010    	ldr.w	r8, [sp, #0x10]
 80642a2: f003 0301    	and	r3, r3, #0x1
 80642a6: 9a08         	ldr	r2, [sp, #0x20]
 80642a8: f8dd b030    	ldr.w	r11, [sp, #0x30]
 80642ac: 9302         	str	r3, [sp, #0x8]
 80642ae: f108 33ff    	add.w	r3, r8, #0xffffffff
 80642b2: 441a         	add	r2, r3
 80642b4: 9208         	str	r2, [sp, #0x20]
 80642b6: 4631         	mov	r1, r6
 80642b8: 4658         	mov	r0, r11
 80642ba: f7ff fc01    	bl	0x8063ac0 <quorem>      @ imm = #-0x7fe
 80642be: 4629         	mov	r1, r5
 80642c0: 4681         	mov	r9, r0
 80642c2: 4658         	mov	r0, r11
 80642c4: f001 fe0e    	bl	0x8065ee4 <__mcmp>      @ imm = #0x1c1c
 80642c8: 4652         	mov	r2, r10
 80642ca: 4631         	mov	r1, r6
 80642cc: 4607         	mov	r7, r0
 80642ce: 4620         	mov	r0, r4
 80642d0: f001 fe28    	bl	0x8065f24 <__mdiff>     @ imm = #0x1c50
 80642d4: 68c2         	ldr	r2, [r0, #0xc]
 80642d6: 4601         	mov	r1, r0
 80642d8: f109 0330    	add.w	r3, r9, #0x30
 80642dc: 2a00         	cmp	r2, #0x0
 80642de: f040 822a    	bne.w	0x8064736 <_dtoa_r+0xb42> @ imm = #0x454
 80642e2: 9005         	str	r0, [sp, #0x14]
 80642e4: 4658         	mov	r0, r11
 80642e6: 9307         	str	r3, [sp, #0x1c]
 80642e8: f001 fdfc    	bl	0x8065ee4 <__mcmp>      @ imm = #0x1bf8
 80642ec: 9905         	ldr	r1, [sp, #0x14]
 80642ee: 9005         	str	r0, [sp, #0x14]
 80642f0: 4620         	mov	r0, r4
 80642f2: f001 fb41    	bl	0x8065978 <_Bfree>      @ imm = #0x1682
 80642f6: 9b24         	ldr	r3, [sp, #0x90]
 80642f8: 9a05         	ldr	r2, [sp, #0x14]
 80642fa: ea42 0103    	orr.w	r1, r2, r3
 80642fe: 9b02         	ldr	r3, [sp, #0x8]
 8064300: 430b         	orrs	r3, r1
 8064302: 9b07         	ldr	r3, [sp, #0x1c]
 8064304: f000 839b    	beq.w	0x8064a3e <_dtoa_r+0xe4a> @ imm = #0x736
 8064308: 2f00         	cmp	r7, #0x0
 806430a: f2c0 830e    	blt.w	0x806492a <_dtoa_r+0xd36> @ imm = #0x61c
 806430e: 9924         	ldr	r1, [sp, #0x90]
 8064310: 430f         	orrs	r7, r1
 8064312: 9902         	ldr	r1, [sp, #0x8]
 8064314: 4339         	orrs	r1, r7
 8064316: f000 8308    	beq.w	0x806492a <_dtoa_r+0xd36> @ imm = #0x610
 806431a: 2a00         	cmp	r2, #0x0
 806431c: f300 8370    	bgt.w	0x8064a00 <_dtoa_r+0xe0c> @ imm = #0x6e0
 8064320: 9908         	ldr	r1, [sp, #0x20]
 8064322: f108 0701    	add.w	r7, r8, #0x1
 8064326: f888 3000    	strb.w	r3, [r8]
 806432a: 4541         	cmp	r1, r8
 806432c: f000 8370    	beq.w	0x8064a10 <_dtoa_r+0xe1c> @ imm = #0x6e0
 8064330: 4659         	mov	r1, r11
 8064332: 2300         	movs	r3, #0x0
 8064334: 220a         	movs	r2, #0xa
 8064336: 4620         	mov	r0, r4
 8064338: f001 fb28    	bl	0x806598c <__multadd>   @ imm = #0x1650
 806433c: 4555         	cmp	r5, r10
 806433e: 4683         	mov	r11, r0
 8064340: 4629         	mov	r1, r5
 8064342: f04f 0300    	mov.w	r3, #0x0
 8064346: f04f 020a    	mov.w	r2, #0xa
 806434a: 4620         	mov	r0, r4
 806434c: f000 81fa    	beq.w	0x8064744 <_dtoa_r+0xb50> @ imm = #0x3f4
 8064350: f001 fb1c    	bl	0x806598c <__multadd>   @ imm = #0x1638
 8064354: 4651         	mov	r1, r10
 8064356: 4605         	mov	r5, r0
 8064358: 2300         	movs	r3, #0x0
 806435a: 220a         	movs	r2, #0xa
 806435c: 4620         	mov	r0, r4
 806435e: f001 fb15    	bl	0x806598c <__multadd>   @ imm = #0x162a
 8064362: 46b8         	mov	r8, r7
 8064364: 4682         	mov	r10, r0
 8064366: e7a6         	b	0x80642b6 <_dtoa_r+0x6c2> @ imm = #-0xb4
 8064368: f000 81a0    	beq.w	0x80646ac <_dtoa_r+0xab8> @ imm = #0x340
 806436c: 9b06         	ldr	r3, [sp, #0x18]
 806436e: 425e         	rsbs	r6, r3, #0
 8064370: 4bb8         	ldr	r3, [pc, #0x2e0]        @ 0x8064654 <_dtoa_r+0xa60>
 8064372: f006 020f    	and	r2, r6, #0xf
 8064376: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 806437a: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 806437e: e9d3 2300    	ldrd	r2, r3, [r3]
 8064382: f004 fa2f    	bl	0x80687e4 <__muldf3>    @ imm = #0x445e
 8064386: 4682         	mov	r10, r0
 8064388: 1136         	asrs	r6, r6, #0x4
 806438a: 468b         	mov	r11, r1
 806438c: f000 8378    	beq.w	0x8064a80 <_dtoa_r+0xe8c> @ imm = #0x6f0
 8064390: 4fb1         	ldr	r7, [pc, #0x2c4]        @ 0x8064658 <_dtoa_r+0xa64>
 8064392: 2300         	movs	r3, #0x0
 8064394: f04f 0802    	mov.w	r8, #0x2
 8064398: 07f2         	lsls	r2, r6, #0x1f
 806439a: d506         	bpl	0x80643aa <_dtoa_r+0x7b6> @ imm = #0xc
 806439c: f108 0801    	add.w	r8, r8, #0x1
 80643a0: e9d7 2300    	ldrd	r2, r3, [r7]
 80643a4: f004 fa1e    	bl	0x80687e4 <__muldf3>    @ imm = #0x443c
 80643a8: 462b         	mov	r3, r5
 80643aa: 1076         	asrs	r6, r6, #0x1
 80643ac: f107 0708    	add.w	r7, r7, #0x8
 80643b0: d1f2         	bne	0x8064398 <_dtoa_r+0x7a4> @ imm = #-0x1c
 80643b2: e9cd 0110    	strd	r0, r1, [sp, #64]
 80643b6: 2b00         	cmp	r3, #0x0
 80643b8: f47f ad9e    	bne.w	0x8063ef8 <_dtoa_r+0x304> @ imm = #-0x4c4
 80643bc: e9cd ab10    	strd	r10, r11, [sp, #64]
 80643c0: e59a         	b	0x8063ef8 <_dtoa_r+0x304> @ imm = #-0x4cc
 80643c2: 4ba4         	ldr	r3, [pc, #0x290]        @ 0x8064654 <_dtoa_r+0xa60>
 80643c4: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 80643c8: e9d3 ab00    	ldrd	r10, r11, [r3]
 80643cc: 9b25         	ldr	r3, [sp, #0x94]
 80643ce: 2b00         	cmp	r3, #0x0
 80643d0: f280 822d    	bge.w	0x806482e <_dtoa_r+0xc3a> @ imm = #0x45a
 80643d4: 9e08         	ldr	r6, [sp, #0x20]
 80643d6: 2e00         	cmp	r6, #0x0
 80643d8: f300 8229    	bgt.w	0x806482e <_dtoa_r+0xc3a> @ imm = #0x452
 80643dc: 2e00         	cmp	r6, #0x0
 80643de: f040 81a7    	bne.w	0x8064730 <_dtoa_r+0xb3c> @ imm = #0x34e
 80643e2: 2200         	movs	r2, #0x0
 80643e4: 4b9d         	ldr	r3, [pc, #0x274]        @ 0x806465c <_dtoa_r+0xa68>
 80643e6: 4650         	mov	r0, r10
 80643e8: 4659         	mov	r1, r11
 80643ea: f004 f9fb    	bl	0x80687e4 <__muldf3>    @ imm = #0x43f6
 80643ee: 4602         	mov	r2, r0
 80643f0: 460b         	mov	r3, r1
 80643f2: e9dd 010a    	ldrd	r0, r1, [sp, #40]
 80643f6: f004 fc71    	bl	0x8068cdc <__aeabi_dcmple> @ imm = #0x48e2
 80643fa: 2800         	cmp	r0, #0x0
 80643fc: f000 81ae    	beq.w	0x806475c <_dtoa_r+0xb68> @ imm = #0x35c
 8064400: 9e08         	ldr	r6, [sp, #0x20]
 8064402: 4635         	mov	r5, r6
 8064404: e713         	b	0x806422e <_dtoa_r+0x63a> @ imm = #-0x1da
 8064406: 4601         	mov	r1, r0
 8064408: 4620         	mov	r0, r4
 806440a: f001 fc97    	bl	0x8065d3c <__pow5mult>  @ imm = #0x192e
 806440e: 9b24         	ldr	r3, [sp, #0x90]
 8064410: 4606         	mov	r6, r0
 8064412: 2b01         	cmp	r3, #0x1
 8064414: f340 8151    	ble.w	0x80646ba <_dtoa_r+0xac6> @ imm = #0x2a2
 8064418: f04f 0900    	mov.w	r9, #0x0
 806441c: 6933         	ldr	r3, [r6, #0x10]
 806441e: eb06 0383    	add.w	r3, r6, r3, lsl #2
 8064422: 6918         	ldr	r0, [r3, #0x10]
 8064424: f001 fb5c    	bl	0x8065ae0 <__hi0bits>   @ imm = #0x16b8
 8064428: f1c0 0320    	rsb.w	r3, r0, #0x20
 806442c: e6cd         	b	0x80641ca <_dtoa_r+0x5d6> @ imm = #-0x266
 806442e: 4631         	mov	r1, r6
 8064430: 980c         	ldr	r0, [sp, #0x30]
 8064432: f001 fd57    	bl	0x8065ee4 <__mcmp>      @ imm = #0x1aae
 8064436: 2800         	cmp	r0, #0x0
 8064438: f6bf aeef    	bge.w	0x806421a <_dtoa_r+0x626> @ imm = #-0x222
 806443c: 2300         	movs	r3, #0x0
 806443e: 990c         	ldr	r1, [sp, #0x30]
 8064440: 220a         	movs	r2, #0xa
 8064442: 4620         	mov	r0, r4
 8064444: f001 faa2    	bl	0x806598c <__multadd>   @ imm = #0x1544
 8064448: 9b06         	ldr	r3, [sp, #0x18]
 806444a: 900c         	str	r0, [sp, #0x30]
 806444c: f103 38ff    	add.w	r8, r3, #0xffffffff
 8064450: 9b0d         	ldr	r3, [sp, #0x34]
 8064452: 2b00         	cmp	r3, #0x0
 8064454: f040 8301    	bne.w	0x8064a5a <_dtoa_r+0xe66> @ imm = #0x602
 8064458: 9b13         	ldr	r3, [sp, #0x4c]
 806445a: 2b00         	cmp	r3, #0x0
 806445c: f300 82fa    	bgt.w	0x8064a54 <_dtoa_r+0xe60> @ imm = #0x5f4
 8064460: 9b24         	ldr	r3, [sp, #0x90]
 8064462: 2b02         	cmp	r3, #0x2
 8064464: f340 82f6    	ble.w	0x8064a54 <_dtoa_r+0xe60> @ imm = #0x5ec
 8064468: 9b13         	ldr	r3, [sp, #0x4c]
 806446a: f8cd 8018    	str.w	r8, [sp, #0x18]
 806446e: 9308         	str	r3, [sp, #0x20]
 8064470: e6d9         	b	0x8064226 <_dtoa_r+0x632> @ imm = #-0x24e
 8064472: f04f 0802    	mov.w	r8, #0x2
 8064476: e9dd ab0a    	ldrd	r10, r11, [sp, #40]
 806447a: e522         	b	0x8063ec2 <_dtoa_r+0x2ce> @ imm = #-0x5bc
 806447c: 2301         	movs	r3, #0x1
 806447e: 930d         	str	r3, [sp, #0x34]
 8064480: 9b25         	ldr	r3, [sp, #0x94]
 8064482: 9a06         	ldr	r2, [sp, #0x18]
 8064484: 4413         	add	r3, r2
 8064486: 9313         	str	r3, [sp, #0x4c]
 8064488: 3301         	adds	r3, #0x1
 806448a: 2b01         	cmp	r3, #0x1
 806448c: 4618         	mov	r0, r3
 806448e: 9308         	str	r3, [sp, #0x20]
 8064490: bfb8         	it	lt
 8064492: 2001         	movlt	r0, #0x1
 8064494: 2100         	movs	r1, #0x0
 8064496: 2817         	cmp	r0, #0x17
 8064498: 6461         	str	r1, [r4, #0x44]
 806449a: f77f ace3    	ble.w	0x8063e64 <_dtoa_r+0x270> @ imm = #-0x63a
 806449e: 2201         	movs	r2, #0x1
 80644a0: 2304         	movs	r3, #0x4
 80644a2: 005b         	lsls	r3, r3, #0x1
 80644a4: 4611         	mov	r1, r2
 80644a6: 3201         	adds	r2, #0x1
 80644a8: f103 0614    	add.w	r6, r3, #0x14
 80644ac: 4286         	cmp	r6, r0
 80644ae: d9f8         	bls	0x80644a2 <_dtoa_r+0x8ae> @ imm = #-0x10
 80644b0: 6461         	str	r1, [r4, #0x44]
 80644b2: e4d7         	b	0x8063e64 <_dtoa_r+0x270> @ imm = #-0x652
 80644b4: 2301         	movs	r3, #0x1
 80644b6: 930d         	str	r3, [sp, #0x34]
 80644b8: 9b25         	ldr	r3, [sp, #0x94]
 80644ba: 2b00         	cmp	r3, #0x0
 80644bc: f340 8148    	ble.w	0x8064750 <_dtoa_r+0xb5c> @ imm = #0x290
 80644c0: 4618         	mov	r0, r3
 80644c2: 9313         	str	r3, [sp, #0x4c]
 80644c4: 9308         	str	r3, [sp, #0x20]
 80644c6: e7e5         	b	0x8064494 <_dtoa_r+0x8a0> @ imm = #-0x36
 80644c8: 2300         	movs	r3, #0x0
 80644ca: 930d         	str	r3, [sp, #0x34]
 80644cc: e7d8         	b	0x8064480 <_dtoa_r+0x88c> @ imm = #-0x50
 80644ce: 2300         	movs	r3, #0x0
 80644d0: 930d         	str	r3, [sp, #0x34]
 80644d2: e7f1         	b	0x80644b8 <_dtoa_r+0x8c4> @ imm = #-0x1e
 80644d4: 464b         	mov	r3, r9
 80644d6: 495f         	ldr	r1, [pc, #0x17c]        @ 0x8064654 <_dtoa_r+0xa60>
 80644d8: f8dd 9050    	ldr.w	r9, [sp, #0x50]
 80644dc: 4642         	mov	r2, r8
 80644de: f8dd 8010    	ldr.w	r8, [sp, #0x10]
 80644e2: eb01 01c9    	add.w	r1, r1, r9, lsl #3
 80644e6: e951 0102    	ldrd	r0, r1, [r1, #-8]
 80644ea: f004 f97b    	bl	0x80687e4 <__muldf3>    @ imm = #0x42f6
 80644ee: e9dd 6710    	ldrd	r6, r7, [sp, #64]
 80644f2: e9cd 0116    	strd	r0, r1, [sp, #88]
 80644f6: 4639         	mov	r1, r7
 80644f8: 4630         	mov	r0, r6
 80644fa: f004 fc23    	bl	0x8068d44 <__fixdfsi>   @ imm = #0x4846
 80644fe: 4605         	mov	r5, r0
 8064500: f004 f906    	bl	0x8068710 <__floatsidf> @ imm = #0x420c
 8064504: 460b         	mov	r3, r1
 8064506: 4602         	mov	r2, r0
 8064508: 4639         	mov	r1, r7
 806450a: 4630         	mov	r0, r6
 806450c: 3530         	adds	r5, #0x30
 806450e: f003 ffb1    	bl	0x8068474 <__subdf3>    @ imm = #0x3f62
 8064512: 464b         	mov	r3, r9
 8064514: 4606         	mov	r6, r0
 8064516: 460f         	mov	r7, r1
 8064518: 2b01         	cmp	r3, #0x1
 806451a: f808 5b01    	strb	r5, [r8], #1
 806451e: f000 8297    	beq.w	0x8064a50 <_dtoa_r+0xe5c> @ imm = #0x52e
 8064522: 9d14         	ldr	r5, [sp, #0x50]
 8064524: f04f 0a00    	mov.w	r10, #0x0
 8064528: 9b04         	ldr	r3, [sp, #0x10]
 806452a: 46a1         	mov	r9, r4
 806452c: f8df b130    	ldr.w	r11, [pc, #0x130]       @ 0x8064660 <_dtoa_r+0xa6c>
 8064530: 441d         	add	r5, r3
 8064532: 4652         	mov	r2, r10
 8064534: 465b         	mov	r3, r11
 8064536: 4630         	mov	r0, r6
 8064538: 4639         	mov	r1, r7
 806453a: f004 f953    	bl	0x80687e4 <__muldf3>    @ imm = #0x42a6
 806453e: 460f         	mov	r7, r1
 8064540: 4606         	mov	r6, r0
 8064542: f004 fbff    	bl	0x8068d44 <__fixdfsi>   @ imm = #0x47fe
 8064546: 4604         	mov	r4, r0
 8064548: f004 f8e2    	bl	0x8068710 <__floatsidf> @ imm = #0x41c4
 806454c: 4602         	mov	r2, r0
 806454e: 460b         	mov	r3, r1
 8064550: 3430         	adds	r4, #0x30
 8064552: 4630         	mov	r0, r6
 8064554: 4639         	mov	r1, r7
 8064556: f003 ff8d    	bl	0x8068474 <__subdf3>    @ imm = #0x3f1a
 806455a: f808 4b01    	strb	r4, [r8], #1
 806455e: 45a8         	cmp	r8, r5
 8064560: 4606         	mov	r6, r0
 8064562: 460f         	mov	r7, r1
 8064564: d1e5         	bne	0x8064532 <_dtoa_r+0x93e> @ imm = #-0x36
 8064566: 464c         	mov	r4, r9
 8064568: 2200         	movs	r2, #0x0
 806456a: 4b3e         	ldr	r3, [pc, #0xf8]         @ 0x8064664 <_dtoa_r+0xa70>
 806456c: e9dd 8916    	ldrd	r8, r9, [sp, #88]
 8064570: 4640         	mov	r0, r8
 8064572: 4649         	mov	r1, r9
 8064574: f003 ff80    	bl	0x8068478 <__aeabi_dadd> @ imm = #0x3f00
 8064578: 4602         	mov	r2, r0
 806457a: 460b         	mov	r3, r1
 806457c: 4630         	mov	r0, r6
 806457e: 4639         	mov	r1, r7
 8064580: f004 fbc0    	bl	0x8068d04 <__aeabi_dcmpgt> @ imm = #0x4780
 8064584: 2800         	cmp	r0, #0x0
 8064586: f040 81f7    	bne.w	0x8064978 <_dtoa_r+0xd84> @ imm = #0x3ee
 806458a: 4642         	mov	r2, r8
 806458c: 464b         	mov	r3, r9
 806458e: 2000         	movs	r0, #0x0
 8064590: 4934         	ldr	r1, [pc, #0xd0]         @ 0x8064664 <_dtoa_r+0xa70>
 8064592: f003 ff6f    	bl	0x8068474 <__subdf3>    @ imm = #0x3ede
 8064596: 4602         	mov	r2, r0
 8064598: 460b         	mov	r3, r1
 806459a: 4630         	mov	r0, r6
 806459c: 4639         	mov	r1, r7
 806459e: f004 fb93    	bl	0x8068cc8 <__aeabi_dcmplt> @ imm = #0x4726
 80645a2: 2800         	cmp	r0, #0x0
 80645a4: f43f ad79    	beq.w	0x806409a <_dtoa_r+0x4a6> @ imm = #-0x50e
 80645a8: 462a         	mov	r2, r5
 80645aa: f815 3d01    	ldrb	r3, [r5, #-1]!
 80645ae: 2b30         	cmp	r3, #0x30
 80645b0: d0fa         	beq	0x80645a8 <_dtoa_r+0x9b4> @ imm = #-0xc
 80645b2: e543         	b	0x806403c <_dtoa_r+0x448> @ imm = #-0x57a
 80645b4: 4631         	mov	r1, r6
 80645b6: 2205         	movs	r2, #0x5
 80645b8: 4620         	mov	r0, r4
 80645ba: f001 f9e7    	bl	0x806598c <__multadd>   @ imm = #0x13ce
 80645be: 4606         	mov	r6, r0
 80645c0: 980c         	ldr	r0, [sp, #0x30]
 80645c2: 4631         	mov	r1, r6
 80645c4: f001 fc8e    	bl	0x8065ee4 <__mcmp>      @ imm = #0x191c
 80645c8: 2800         	cmp	r0, #0x0
 80645ca: f77f ae30    	ble.w	0x806422e <_dtoa_r+0x63a> @ imm = #-0x3a0
 80645ce: 9804         	ldr	r0, [sp, #0x10]
 80645d0: 2331         	movs	r3, #0x31
 80645d2: 9f06         	ldr	r7, [sp, #0x18]
 80645d4: 4681         	mov	r9, r0
 80645d6: f800 3b01    	strb	r3, [r0], #1
 80645da: 3701         	adds	r7, #0x1
 80645dc: 9004         	str	r0, [sp, #0x10]
 80645de: e62a         	b	0x8064236 <_dtoa_r+0x642> @ imm = #-0x3ac
 80645e0: 9b06         	ldr	r3, [sp, #0x18]
 80645e2: 3301         	adds	r3, #0x1
 80645e4: 9306         	str	r3, [sp, #0x18]
 80645e6: f8dd 8010    	ldr.w	r8, [sp, #0x10]
 80645ea: 2701         	movs	r7, #0x1
 80645ec: f8dd a030    	ldr.w	r10, [sp, #0x30]
 80645f0: f8dd b020    	ldr.w	r11, [sp, #0x20]
 80645f4: e007         	b	0x8064606 <_dtoa_r+0xa12> @ imm = #0xe
 80645f6: 4651         	mov	r1, r10
 80645f8: 2300         	movs	r3, #0x0
 80645fa: 220a         	movs	r2, #0xa
 80645fc: 4620         	mov	r0, r4
 80645fe: f001 f9c5    	bl	0x806598c <__multadd>   @ imm = #0x138a
 8064602: 3701         	adds	r7, #0x1
 8064604: 4682         	mov	r10, r0
 8064606: 4631         	mov	r1, r6
 8064608: 4650         	mov	r0, r10
 806460a: f7ff fa59    	bl	0x8063ac0 <quorem>      @ imm = #-0xb4e
 806460e: 455f         	cmp	r7, r11
 8064610: f100 0930    	add.w	r9, r0, #0x30
 8064614: f808 9b01    	strb	r9, [r8], #1
 8064618: dbed         	blt	0x80645f6 <_dtoa_r+0xa02> @ imm = #-0x26
 806461a: 9b08         	ldr	r3, [sp, #0x20]
 806461c: 2700         	movs	r7, #0x0
 806461e: f8cd a030    	str.w	r10, [sp, #0x30]
 8064622: 2b00         	cmp	r3, #0x0
 8064624: bfcc         	ite	gt
 8064626: 469b         	movgt	r11, r3
 8064628: f04f 0b01    	movle.w	r11, #0x1
 806462c: 9b04         	ldr	r3, [sp, #0x10]
 806462e: 449b         	add	r11, r3
 8064630: 990c         	ldr	r1, [sp, #0x30]
 8064632: 2201         	movs	r2, #0x1
 8064634: 4620         	mov	r0, r4
 8064636: f001 fbe1    	bl	0x8065dfc <__lshift>    @ imm = #0x17c2
 806463a: 4631         	mov	r1, r6
 806463c: 900c         	str	r0, [sp, #0x30]
 806463e: f001 fc51    	bl	0x8065ee4 <__mcmp>      @ imm = #0x18a2
 8064642: 2800         	cmp	r0, #0x0
 8064644: f340 814a    	ble.w	0x80648dc <_dtoa_r+0xce8> @ imm = #0x294
 8064648: f81b 3c01    	ldrb	r3, [r11, #-1]
 806464c: f10b 3bff    	add.w	r11, r11, #0xffffffff
 8064650: 9a04         	ldr	r2, [sp, #0x10]
 8064652: e00e         	b	0x8064672 <_dtoa_r+0xa7e> @ imm = #0x1c

08064654 <$d>:
 8064654: d0 a1 06 08  	.word	0x0806a1d0
 8064658: c0 a2 06 08  	.word	0x0806a2c0
 806465c: 00 00 14 40  	.word	0x40140000
 8064660: 00 00 24 40  	.word	0x40240000
 8064664: 00 00 e0 3f  	.word	0x3fe00000

08064668 <$t>:
 8064668: 455a         	cmp	r2, r11
 806466a: f000 8147    	beq.w	0x80648fc <_dtoa_r+0xd08> @ imm = #0x28e
 806466e: f81b 3d01    	ldrb	r3, [r11, #-1]!
 8064672: 2b39         	cmp	r3, #0x39
 8064674: f10b 0801    	add.w	r8, r11, #0x1
 8064678: d0f6         	beq	0x8064668 <_dtoa_r+0xa74> @ imm = #-0x14
 806467a: 3301         	adds	r3, #0x1
 806467c: f88b 3000    	strb.w	r3, [r11]
 8064680: 4631         	mov	r1, r6
 8064682: 4620         	mov	r0, r4
 8064684: f001 f978    	bl	0x8065978 <_Bfree>      @ imm = #0x12f0
 8064688: 2d00         	cmp	r5, #0x0
 806468a: f000 8132    	beq.w	0x80648f2 <_dtoa_r+0xcfe> @ imm = #0x264
 806468e: 2f00         	cmp	r7, #0x0
 8064690: f000 8203    	beq.w	0x8064a9a <_dtoa_r+0xea6> @ imm = #0x406
 8064694: 42af         	cmp	r7, r5
 8064696: f000 8200    	beq.w	0x8064a9a <_dtoa_r+0xea6> @ imm = #0x400
 806469a: 4639         	mov	r1, r7
 806469c: 4620         	mov	r0, r4
 806469e: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 80646a2: f8cd 8010    	str.w	r8, [sp, #0x10]
 80646a6: f001 f967    	bl	0x8065978 <_Bfree>      @ imm = #0x12ce
 80646aa: e5cb         	b	0x8064244 <_dtoa_r+0x650> @ imm = #-0x46a
 80646ac: e9dd 230a    	ldrd	r2, r3, [sp, #40]
 80646b0: f04f 0802    	mov.w	r8, #0x2
 80646b4: e9cd 2310    	strd	r2, r3, [sp, #64]
 80646b8: e41e         	b	0x8063ef8 <_dtoa_r+0x304> @ imm = #-0x7c4
 80646ba: 9b02         	ldr	r3, [sp, #0x8]
 80646bc: 2b00         	cmp	r3, #0x0
 80646be: f47f aeab    	bne.w	0x8064418 <_dtoa_r+0x824> @ imm = #-0x2aa
 80646c2: e9dd 1202    	ldrd	r1, r2, [sp, #8]
 80646c6: f3c2 0313    	ubfx	r3, r2, #0x0, #0x14
 80646ca: 2b00         	cmp	r3, #0x0
 80646cc: f47f aea4    	bne.w	0x8064418 <_dtoa_r+0x824> @ imm = #-0x2b8
 80646d0: 4bb8         	ldr	r3, [pc, #0x2e0]        @ 0x80649b4 <_dtoa_r+0xdc0>
 80646d2: 4013         	ands	r3, r2
 80646d4: 2b00         	cmp	r3, #0x0
 80646d6: f000 81a5    	beq.w	0x8064a24 <_dtoa_r+0xe30> @ imm = #0x34a
 80646da: 9b09         	ldr	r3, [sp, #0x24]
 80646dc: f04f 0901    	mov.w	r9, #0x1
 80646e0: 3301         	adds	r3, #0x1
 80646e2: 9309         	str	r3, [sp, #0x24]
 80646e4: 9b07         	ldr	r3, [sp, #0x1c]
 80646e6: 3301         	adds	r3, #0x1
 80646e8: 9307         	str	r3, [sp, #0x1c]
 80646ea: e569         	b	0x80641c0 <_dtoa_r+0x5cc> @ imm = #-0x52e
 80646ec: 4629         	mov	r1, r5
 80646ee: 4632         	mov	r2, r6
 80646f0: 4620         	mov	r0, r4
 80646f2: f001 fb23    	bl	0x8065d3c <__pow5mult>  @ imm = #0x1646
 80646f6: f8dd 8030    	ldr.w	r8, [sp, #0x30]
 80646fa: 4605         	mov	r5, r0
 80646fc: 4620         	mov	r0, r4
 80646fe: 4642         	mov	r2, r8
 8064700: 4629         	mov	r1, r5
 8064702: f001 fa6b    	bl	0x8065bdc <__multiply>  @ imm = #0x14d6
 8064706: 4641         	mov	r1, r8
 8064708: 900c         	str	r0, [sp, #0x30]
 806470a: 4620         	mov	r0, r4
 806470c: f001 f934    	bl	0x8065978 <_Bfree>      @ imm = #0x1268
 8064710: e543         	b	0x806419a <_dtoa_r+0x5a6> @ imm = #-0x57a
 8064712: 1a9e         	subs	r6, r3, r2
 8064714: e4dc         	b	0x80640d0 <_dtoa_r+0x4dc> @ imm = #-0x648
 8064716: 990c         	ldr	r1, [sp, #0x30]
 8064718: 4620         	mov	r0, r4
 806471a: f001 fb0f    	bl	0x8065d3c <__pow5mult>  @ imm = #0x161e
 806471e: 900c         	str	r0, [sp, #0x30]
 8064720: e53f         	b	0x80641a2 <_dtoa_r+0x5ae> @ imm = #-0x582
 8064722: 4629         	mov	r1, r5
 8064724: 463a         	mov	r2, r7
 8064726: 4620         	mov	r0, r4
 8064728: f001 fb68    	bl	0x8065dfc <__lshift>    @ imm = #0x16d0
 806472c: 4605         	mov	r5, r0
 806472e: e5b0         	b	0x8064292 <_dtoa_r+0x69e> @ imm = #-0x4a0
 8064730: 2600         	movs	r6, #0x0
 8064732: 4635         	mov	r5, r6
 8064734: e57b         	b	0x806422e <_dtoa_r+0x63a> @ imm = #-0x50a
 8064736: 4620         	mov	r0, r4
 8064738: 9305         	str	r3, [sp, #0x14]
 806473a: f001 f91d    	bl	0x8065978 <_Bfree>      @ imm = #0x123a
 806473e: 2201         	movs	r2, #0x1
 8064740: 9b05         	ldr	r3, [sp, #0x14]
 8064742: e5e1         	b	0x8064308 <_dtoa_r+0x714> @ imm = #-0x43e
 8064744: f001 f922    	bl	0x806598c <__multadd>   @ imm = #0x1244
 8064748: 46b8         	mov	r8, r7
 806474a: 4605         	mov	r5, r0
 806474c: 4682         	mov	r10, r0
 806474e: e5b2         	b	0x80642b6 <_dtoa_r+0x6c2> @ imm = #-0x49c
 8064750: 2301         	movs	r3, #0x1
 8064752: 9325         	str	r3, [sp, #0x94]
 8064754: 9308         	str	r3, [sp, #0x20]
 8064756: f7ff bb81    	b.w	0x8063e5c <_dtoa_r+0x268> @ imm = #-0x8fe
 806475a: 2600         	movs	r6, #0x0
 806475c: 4635         	mov	r5, r6
 806475e: e736         	b	0x80645ce <_dtoa_r+0x9da> @ imm = #-0x194
 8064760: e9dd 1202    	ldrd	r1, r2, [sp, #8]
 8064764: 2900         	cmp	r1, #0x0
 8064766: f47f ad29    	bne.w	0x80641bc <_dtoa_r+0x5c8> @ imm = #-0x5ae
 806476a: f3c2 0313    	ubfx	r3, r2, #0x0, #0x14
 806476e: 2b00         	cmp	r3, #0x0
 8064770: f47f ad24    	bne.w	0x80641bc <_dtoa_r+0x5c8> @ imm = #-0x5b8
 8064774: e7ac         	b	0x80646d0 <_dtoa_r+0xadc> @ imm = #-0xa8
 8064776: 9b08         	ldr	r3, [sp, #0x20]
 8064778: 2b00         	cmp	r3, #0x0
 806477a: f43f ac66    	beq.w	0x806404a <_dtoa_r+0x456> @ imm = #-0x734
 806477e: 9b13         	ldr	r3, [sp, #0x4c]
 8064780: 2b00         	cmp	r3, #0x0
 8064782: f77f ac8a    	ble.w	0x806409a <_dtoa_r+0x4a6> @ imm = #-0x6ec
 8064786: 9a06         	ldr	r2, [sp, #0x18]
 8064788: 4628         	mov	r0, r5
 806478a: 4631         	mov	r1, r6
 806478c: 3a01         	subs	r2, #0x1
 806478e: e9cd 3214    	strd	r3, r2, [sp, #80]
 8064792: 4b89         	ldr	r3, [pc, #0x224]        @ 0x80649b8 <_dtoa_r+0xdc4>
 8064794: 2200         	movs	r2, #0x0
 8064796: f004 f825    	bl	0x80687e4 <__muldf3>    @ imm = #0x404a
 806479a: 4602         	mov	r2, r0
 806479c: 460e         	mov	r6, r1
 806479e: f108 0001    	add.w	r0, r8, #0x1
 80647a2: 4615         	mov	r5, r2
 80647a4: e9cd 5610    	strd	r5, r6, [sp, #64]
 80647a8: f003 ffb2    	bl	0x8068710 <__floatsidf> @ imm = #0x3f64
 80647ac: 462a         	mov	r2, r5
 80647ae: 4633         	mov	r3, r6
 80647b0: f004 f818    	bl	0x80687e4 <__muldf3>    @ imm = #0x4030
 80647b4: 2200         	movs	r2, #0x0
 80647b6: 4b81         	ldr	r3, [pc, #0x204]        @ 0x80649bc <_dtoa_r+0xdc8>
 80647b8: f003 fe5e    	bl	0x8068478 <__aeabi_dadd> @ imm = #0x3cbc
 80647bc: 4680         	mov	r8, r0
 80647be: f1a1 7950    	sub.w	r9, r1, #0x3400000
 80647c2: f7ff bbbc    	b.w	0x8063f3e <_dtoa_r+0x34a> @ imm = #-0x888
 80647c6: 900f         	str	r0, [sp, #0x3c]
 80647c8: e49b         	b	0x8064102 <_dtoa_r+0x50e> @ imm = #-0x6ca
 80647ca: 9a12         	ldr	r2, [sp, #0x48]
 80647cc: 2a00         	cmp	r2, #0x0
 80647ce: f000 80a8    	beq.w	0x8064922 <_dtoa_r+0xd2e> @ imm = #0x150
 80647d2: f203 4333    	addw	r3, r3, #0x433
 80647d6: 9a07         	ldr	r2, [sp, #0x1c]
 80647d8: 9e0e         	ldr	r6, [sp, #0x38]
 80647da: 441a         	add	r2, r3
 80647dc: 9207         	str	r2, [sp, #0x1c]
 80647de: 9a09         	ldr	r2, [sp, #0x24]
 80647e0: 4617         	mov	r7, r2
 80647e2: 441a         	add	r2, r3
 80647e4: 9209         	str	r2, [sp, #0x24]
 80647e6: e47e         	b	0x80640e6 <_dtoa_r+0x4f2> @ imm = #-0x704
 80647e8: 990c         	ldr	r1, [sp, #0x30]
 80647ea: 4620         	mov	r0, r4
 80647ec: 9a0e         	ldr	r2, [sp, #0x38]
 80647ee: f001 faa5    	bl	0x8065d3c <__pow5mult>  @ imm = #0x154a
 80647f2: 900c         	str	r0, [sp, #0x30]
 80647f4: e4d5         	b	0x80641a2 <_dtoa_r+0x5ae> @ imm = #-0x656
 80647f6: 2100         	movs	r1, #0x0
 80647f8: 4620         	mov	r0, r4
 80647fa: 6461         	str	r1, [r4, #0x44]
 80647fc: f001 f896    	bl	0x806592c <_Balloc>     @ imm = #0x112c
 8064800: 9004         	str	r0, [sp, #0x10]
 8064802: 2800         	cmp	r0, #0x0
 8064804: f000 815c    	beq.w	0x8064ac0 <_dtoa_r+0xecc> @ imm = #0x2b8
 8064808: 9a06         	ldr	r2, [sp, #0x18]
 806480a: 9b04         	ldr	r3, [sp, #0x10]
 806480c: 2a0e         	cmp	r2, #0xe
 806480e: 6423         	str	r3, [r4, #0x40]
 8064810: 9b19         	ldr	r3, [sp, #0x64]
 8064812: f300 815c    	bgt.w	0x8064ace <_dtoa_r+0xeda> @ imm = #0x2b8
 8064816: 2b00         	cmp	r3, #0x0
 8064818: f2c0 8159    	blt.w	0x8064ace <_dtoa_r+0xeda> @ imm = #0x2b2
 806481c: 9a06         	ldr	r2, [sp, #0x18]
 806481e: 4b68         	ldr	r3, [pc, #0x1a0]        @ 0x80649c0 <_dtoa_r+0xdcc>
 8064820: eb03 03c2    	add.w	r3, r3, r2, lsl #3
 8064824: f04f 32ff    	mov.w	r2, #0xffffffff
 8064828: e9d3 ab00    	ldrd	r10, r11, [r3]
 806482c: 9208         	str	r2, [sp, #0x20]
 806482e: 4652         	mov	r2, r10
 8064830: 465b         	mov	r3, r11
 8064832: 9d04         	ldr	r5, [sp, #0x10]
 8064834: e9dd 670a    	ldrd	r6, r7, [sp, #40]
 8064838: 4630         	mov	r0, r6
 806483a: 4639         	mov	r1, r7
 806483c: f004 f8fc    	bl	0x8068a38 <__divdf3>    @ imm = #0x41f8
 8064840: f004 fa80    	bl	0x8068d44 <__fixdfsi>   @ imm = #0x4500
 8064844: 4680         	mov	r8, r0
 8064846: f003 ff63    	bl	0x8068710 <__floatsidf> @ imm = #0x3ec6
 806484a: 4652         	mov	r2, r10
 806484c: 465b         	mov	r3, r11
 806484e: f003 ffc9    	bl	0x80687e4 <__muldf3>    @ imm = #0x3f92
 8064852: 460b         	mov	r3, r1
 8064854: 4602         	mov	r2, r0
 8064856: 4639         	mov	r1, r7
 8064858: 4630         	mov	r0, r6
 806485a: f003 fe0b    	bl	0x8068474 <__subdf3>    @ imm = #0x3c16
 806485e: f108 0330    	add.w	r3, r8, #0x30
 8064862: f805 3b01    	strb	r3, [r5], #1
 8064866: 9b08         	ldr	r3, [sp, #0x20]
 8064868: 2b01         	cmp	r3, #0x1
 806486a: f000 80ac    	beq.w	0x80649c6 <_dtoa_r+0xdd2> @ imm = #0x158
 806486e: 9402         	str	r4, [sp, #0x8]
 8064870: f04f 0901    	mov.w	r9, #0x1
 8064874: 9c08         	ldr	r4, [sp, #0x20]
 8064876: e01d         	b	0x80648b4 <_dtoa_r+0xcc0> @ imm = #0x3a
 8064878: 4652         	mov	r2, r10
 806487a: 465b         	mov	r3, r11
 806487c: 4630         	mov	r0, r6
 806487e: 4639         	mov	r1, r7
 8064880: f004 f8da    	bl	0x8068a38 <__divdf3>    @ imm = #0x41b4
 8064884: f109 0901    	add.w	r9, r9, #0x1
 8064888: f004 fa5c    	bl	0x8068d44 <__fixdfsi>   @ imm = #0x44b8
 806488c: 4680         	mov	r8, r0
 806488e: f003 ff3f    	bl	0x8068710 <__floatsidf> @ imm = #0x3e7e
 8064892: 4652         	mov	r2, r10
 8064894: 465b         	mov	r3, r11
 8064896: f003 ffa5    	bl	0x80687e4 <__muldf3>    @ imm = #0x3f4a
 806489a: 460b         	mov	r3, r1
 806489c: 4602         	mov	r2, r0
 806489e: 4639         	mov	r1, r7
 80648a0: 4630         	mov	r0, r6
 80648a2: f003 fde7    	bl	0x8068474 <__subdf3>    @ imm = #0x3bce
 80648a6: f108 0330    	add.w	r3, r8, #0x30
 80648aa: 45a1         	cmp	r9, r4
 80648ac: f805 3b01    	strb	r3, [r5], #1
 80648b0: f000 8088    	beq.w	0x80649c4 <_dtoa_r+0xdd0> @ imm = #0x110
 80648b4: 2200         	movs	r2, #0x0
 80648b6: 4b40         	ldr	r3, [pc, #0x100]        @ 0x80649b8 <_dtoa_r+0xdc4>
 80648b8: f003 ff94    	bl	0x80687e4 <__muldf3>    @ imm = #0x3f28
 80648bc: 2200         	movs	r2, #0x0
 80648be: 2300         	movs	r3, #0x0
 80648c0: 4606         	mov	r6, r0
 80648c2: 460f         	mov	r7, r1
 80648c4: f004 f9f6    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x43ec
 80648c8: 2800         	cmp	r0, #0x0
 80648ca: d0d5         	beq	0x8064878 <_dtoa_r+0xc84> @ imm = #-0x56
 80648cc: 9c02         	ldr	r4, [sp, #0x8]
 80648ce: 9b06         	ldr	r3, [sp, #0x18]
 80648d0: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 80648d4: 3301         	adds	r3, #0x1
 80648d6: 9504         	str	r5, [sp, #0x10]
 80648d8: 9306         	str	r3, [sp, #0x18]
 80648da: e4b7         	b	0x806424c <_dtoa_r+0x658> @ imm = #-0x692
 80648dc: d103         	bne	0x80648e6 <_dtoa_r+0xcf2> @ imm = #0x6
 80648de: f019 0f01    	tst.w	r9, #0x1
 80648e2: f47f aeb1    	bne.w	0x8064648 <_dtoa_r+0xa54> @ imm = #-0x29e
 80648e6: 46d8         	mov	r8, r11
 80648e8: f81b 3d01    	ldrb	r3, [r11, #-1]!
 80648ec: 2b30         	cmp	r3, #0x30
 80648ee: d0fa         	beq	0x80648e6 <_dtoa_r+0xcf2> @ imm = #-0xc
 80648f0: e6c6         	b	0x8064680 <_dtoa_r+0xa8c> @ imm = #-0x274
 80648f2: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 80648f6: f8cd 8010    	str.w	r8, [sp, #0x10]
 80648fa: e4a7         	b	0x806424c <_dtoa_r+0x658> @ imm = #-0x6b2
 80648fc: 9b06         	ldr	r3, [sp, #0x18]
 80648fe: 9a04         	ldr	r2, [sp, #0x10]
 8064900: 3301         	adds	r3, #0x1
 8064902: 9306         	str	r3, [sp, #0x18]
 8064904: 2331         	movs	r3, #0x31
 8064906: 7013         	strb	r3, [r2]
 8064908: e6ba         	b	0x8064680 <_dtoa_r+0xa8c> @ imm = #-0x28c
 806490a: e9dd 2308    	ldrd	r2, r3, [sp, #32]
 806490e: 1a9f         	subs	r7, r3, r2
 8064910: f7ff bbe9    	b.w	0x80640e6 <_dtoa_r+0x4f2> @ imm = #-0x82e
 8064914: 9b15         	ldr	r3, [sp, #0x54]
 8064916: 9104         	str	r1, [sp, #0x10]
 8064918: 3301         	adds	r3, #0x1
 806491a: 9315         	str	r3, [sp, #0x54]
 806491c: 2331         	movs	r3, #0x31
 806491e: f7ff bb8c    	b.w	0x806403a <_dtoa_r+0x446> @ imm = #-0x8e8
 8064922: 9b18         	ldr	r3, [sp, #0x60]
 8064924: f1c3 0336    	rsb.w	r3, r3, #0x36
 8064928: e755         	b	0x80647d6 <_dtoa_r+0xbe2> @ imm = #-0x156
 806492a: 2a00         	cmp	r2, #0x0
 806492c: 4659         	mov	r1, r11
 806492e: f8cd b030    	str.w	r11, [sp, #0x30]
 8064932: 46cb         	mov	r11, r9
 8064934: 4699         	mov	r9, r3
 8064936: dd0f         	ble	0x8064958 <_dtoa_r+0xd64> @ imm = #0x1e
 8064938: 2201         	movs	r2, #0x1
 806493a: 4620         	mov	r0, r4
 806493c: f001 fa5e    	bl	0x8065dfc <__lshift>    @ imm = #0x14bc
 8064940: 4631         	mov	r1, r6
 8064942: 900c         	str	r0, [sp, #0x30]
 8064944: f001 face    	bl	0x8065ee4 <__mcmp>      @ imm = #0x159c
 8064948: 2800         	cmp	r0, #0x0
 806494a: f340 809f    	ble.w	0x8064a8c <_dtoa_r+0xe98> @ imm = #0x13e
 806494e: f1b9 0f39    	cmp.w	r9, #0x39
 8064952: d06a         	beq	0x8064a2a <_dtoa_r+0xe36> @ imm = #0xd4
 8064954: f10b 0931    	add.w	r9, r11, #0x31
 8064958: f808 9b01    	strb	r9, [r8], #1
 806495c: 9b06         	ldr	r3, [sp, #0x18]
 806495e: 462f         	mov	r7, r5
 8064960: 4655         	mov	r5, r10
 8064962: 3301         	adds	r3, #0x1
 8064964: 9306         	str	r3, [sp, #0x18]
 8064966: e68b         	b	0x8064680 <_dtoa_r+0xa8c> @ imm = #-0x2ea
 8064968: 9c10         	ldr	r4, [sp, #0x40]
 806496a: 9b15         	ldr	r3, [sp, #0x54]
 806496c: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 8064970: 3301         	adds	r3, #0x1
 8064972: 9504         	str	r5, [sp, #0x10]
 8064974: 9306         	str	r3, [sp, #0x18]
 8064976: e469         	b	0x806424c <_dtoa_r+0x658> @ imm = #-0x72e
 8064978: 9904         	ldr	r1, [sp, #0x10]
 806497a: f7ff bb56    	b.w	0x806402a <_dtoa_r+0x436> @ imm = #-0x954
 806497e: 6869         	ldr	r1, [r5, #0x4]
 8064980: 4620         	mov	r0, r4
 8064982: f000 ffd3    	bl	0x806592c <_Balloc>     @ imm = #0xfa6
 8064986: 4607         	mov	r7, r0
 8064988: 2800         	cmp	r0, #0x0
 806498a: f000 8092    	beq.w	0x8064ab2 <_dtoa_r+0xebe> @ imm = #0x124
 806498e: 692b         	ldr	r3, [r5, #0x10]
 8064990: f105 010c    	add.w	r1, r5, #0xc
 8064994: 300c         	adds	r0, #0xc
 8064996: 3302         	adds	r3, #0x2
 8064998: 009a         	lsls	r2, r3, #0x2
 806499a: f7fd fc75    	bl	0x8062288 <memcpy>      @ imm = #-0x2716
 806499e: 4639         	mov	r1, r7
 80649a0: 2201         	movs	r2, #0x1
 80649a2: 4620         	mov	r0, r4
 80649a4: f001 fa2a    	bl	0x8065dfc <__lshift>    @ imm = #0x1454
 80649a8: 4682         	mov	r10, r0
 80649aa: e477         	b	0x806429c <_dtoa_r+0x6a8> @ imm = #-0x712
 80649ac: 9c10         	ldr	r4, [sp, #0x40]
 80649ae: f7ff bb74    	b.w	0x806409a <_dtoa_r+0x4a6> @ imm = #-0x918
 80649b2: bf00         	nop

080649b4 <$d>:
 80649b4: 00 00 f0 7f  	.word	0x7ff00000
 80649b8: 00 00 24 40  	.word	0x40240000
 80649bc: 00 00 1c 40  	.word	0x401c0000
 80649c0: d0 a1 06 08  	.word	0x0806a1d0

080649c4 <$t>:
 80649c4: 9c02         	ldr	r4, [sp, #0x8]
 80649c6: 4602         	mov	r2, r0
 80649c8: 460b         	mov	r3, r1
 80649ca: f003 fd55    	bl	0x8068478 <__aeabi_dadd> @ imm = #0x3aaa
 80649ce: 4652         	mov	r2, r10
 80649d0: 465b         	mov	r3, r11
 80649d2: 4606         	mov	r6, r0
 80649d4: 460f         	mov	r7, r1
 80649d6: f004 f995    	bl	0x8068d04 <__aeabi_dcmpgt> @ imm = #0x432a
 80649da: b960         	cbnz	r0, 0x80649f6 <_dtoa_r+0xe02> @ imm = #0x18
 80649dc: 4652         	mov	r2, r10
 80649de: 465b         	mov	r3, r11
 80649e0: 4630         	mov	r0, r6
 80649e2: 4639         	mov	r1, r7
 80649e4: f004 f966    	bl	0x8068cb4 <__aeabi_dcmpeq> @ imm = #0x42cc
 80649e8: 2800         	cmp	r0, #0x0
 80649ea: f43f af70    	beq.w	0x80648ce <_dtoa_r+0xcda> @ imm = #-0x120
 80649ee: f018 0f01    	tst.w	r8, #0x1
 80649f2: f43f af6c    	beq.w	0x80648ce <_dtoa_r+0xcda> @ imm = #-0x128
 80649f6: 9b06         	ldr	r3, [sp, #0x18]
 80649f8: 9904         	ldr	r1, [sp, #0x10]
 80649fa: 9315         	str	r3, [sp, #0x54]
 80649fc: f7ff bb15    	b.w	0x806402a <_dtoa_r+0x436> @ imm = #-0x9d6
 8064a00: 2b39         	cmp	r3, #0x39
 8064a02: f8cd b030    	str.w	r11, [sp, #0x30]
 8064a06: d010         	beq	0x8064a2a <_dtoa_r+0xe36> @ imm = #0x20
 8064a08: 3301         	adds	r3, #0x1
 8064a0a: f808 3b01    	strb	r3, [r8], #1
 8064a0e: e7a5         	b	0x806495c <_dtoa_r+0xd68> @ imm = #-0xb6
 8064a10: 4699         	mov	r9, r3
 8064a12: 9b06         	ldr	r3, [sp, #0x18]
 8064a14: f8cd b030    	str.w	r11, [sp, #0x30]
 8064a18: 46bb         	mov	r11, r7
 8064a1a: 3301         	adds	r3, #0x1
 8064a1c: 462f         	mov	r7, r5
 8064a1e: 4655         	mov	r5, r10
 8064a20: 9306         	str	r3, [sp, #0x18]
 8064a22: e605         	b	0x8064630 <_dtoa_r+0xa3c> @ imm = #-0x3f6
 8064a24: 4699         	mov	r9, r3
 8064a26: f7ff bbcb    	b.w	0x80641c0 <_dtoa_r+0x5cc> @ imm = #-0x86a
 8064a2a: 9b06         	ldr	r3, [sp, #0x18]
 8064a2c: 46c3         	mov	r11, r8
 8064a2e: 462f         	mov	r7, r5
 8064a30: 4655         	mov	r5, r10
 8064a32: 3301         	adds	r3, #0x1
 8064a34: 9306         	str	r3, [sp, #0x18]
 8064a36: 2339         	movs	r3, #0x39
 8064a38: f80b 3b01    	strb	r3, [r11], #1
 8064a3c: e606         	b	0x806464c <_dtoa_r+0xa58> @ imm = #-0x3f4
 8064a3e: 2b39         	cmp	r3, #0x39
 8064a40: f8cd b030    	str.w	r11, [sp, #0x30]
 8064a44: 46cb         	mov	r11, r9
 8064a46: 4699         	mov	r9, r3
 8064a48: d0ef         	beq	0x8064a2a <_dtoa_r+0xe36> @ imm = #-0x22
 8064a4a: 2f00         	cmp	r7, #0x0
 8064a4c: dc82         	bgt	0x8064954 <_dtoa_r+0xd60> @ imm = #-0xfc
 8064a4e: e783         	b	0x8064958 <_dtoa_r+0xd64> @ imm = #-0xfa
 8064a50: 4645         	mov	r5, r8
 8064a52: e589         	b	0x8064568 <_dtoa_r+0x974> @ imm = #-0x4ee
 8064a54: 9b13         	ldr	r3, [sp, #0x4c]
 8064a56: 9308         	str	r3, [sp, #0x20]
 8064a58: e5c5         	b	0x80645e6 <_dtoa_r+0x9f2> @ imm = #-0x476
 8064a5a: 4629         	mov	r1, r5
 8064a5c: 2300         	movs	r3, #0x0
 8064a5e: 220a         	movs	r2, #0xa
 8064a60: 4620         	mov	r0, r4
 8064a62: f000 ff93    	bl	0x806598c <__multadd>   @ imm = #0xf26
 8064a66: 9b13         	ldr	r3, [sp, #0x4c]
 8064a68: 4605         	mov	r5, r0
 8064a6a: 2b00         	cmp	r3, #0x0
 8064a6c: dc03         	bgt	0x8064a76 <_dtoa_r+0xe82> @ imm = #0x6
 8064a6e: 9b24         	ldr	r3, [sp, #0x90]
 8064a70: 2b02         	cmp	r3, #0x2
 8064a72: f73f acf9    	bgt.w	0x8064468 <_dtoa_r+0x874> @ imm = #-0x60e
 8064a76: 9b13         	ldr	r3, [sp, #0x4c]
 8064a78: f8cd 8018    	str.w	r8, [sp, #0x18]
 8064a7c: 9308         	str	r3, [sp, #0x20]
 8064a7e: e405         	b	0x806428c <_dtoa_r+0x698> @ imm = #-0x7f6
 8064a80: f04f 0802    	mov.w	r8, #0x2
 8064a84: e9cd ab10    	strd	r10, r11, [sp, #64]
 8064a88: f7ff ba36    	b.w	0x8063ef8 <_dtoa_r+0x304> @ imm = #-0xb94
 8064a8c: f47f af64    	bne.w	0x8064958 <_dtoa_r+0xd64> @ imm = #-0x138
 8064a90: f019 0f01    	tst.w	r9, #0x1
 8064a94: f47f af5b    	bne.w	0x806494e <_dtoa_r+0xd5a> @ imm = #-0x14a
 8064a98: e75e         	b	0x8064958 <_dtoa_r+0xd64> @ imm = #-0x144
 8064a9a: f8dd 9010    	ldr.w	r9, [sp, #0x10]
 8064a9e: f8cd 8010    	str.w	r8, [sp, #0x10]
 8064aa2: f7ff bbcf    	b.w	0x8064244 <_dtoa_r+0x650> @ imm = #-0x862
 8064aa6: f43f aba2    	beq.w	0x80641ee <_dtoa_r+0x5fa> @ imm = #-0x8bc
 8064aaa: f1c3 033c    	rsb.w	r3, r3, #0x3c
 8064aae: f7ff bbe1    	b.w	0x8064274 <_dtoa_r+0x680> @ imm = #-0x83e
 8064ab2: 4602         	mov	r2, r0
 8064ab4: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x8064ae4 <_dtoa_r+0xef0>
 8064ab6: f240 21ea    	movw	r1, #0x2ea
 8064aba: 480b         	ldr	r0, [pc, #0x2c]         @ 0x8064ae8 <_dtoa_r+0xef4>
 8064abc: f002 fb6e    	bl	0x806719c <__assert_func> @ imm = #0x26dc
 8064ac0: 4b08         	ldr	r3, [pc, #0x20]         @ 0x8064ae4 <_dtoa_r+0xef0>
 8064ac2: 2200         	movs	r2, #0x0
 8064ac4: f44f 71d5    	mov.w	r1, #0x1aa
 8064ac8: 4807         	ldr	r0, [pc, #0x1c]         @ 0x8064ae8 <_dtoa_r+0xef4>
 8064aca: f002 fb67    	bl	0x806719c <__assert_func> @ imm = #0x26ce
 8064ace: 2200         	movs	r2, #0x0
 8064ad0: 2101         	movs	r1, #0x1
 8064ad2: 9225         	str	r2, [sp, #0x94]
 8064ad4: f04f 32ff    	mov.w	r2, #0xffffffff
 8064ad8: 910d         	str	r1, [sp, #0x34]
 8064ada: 9208         	str	r2, [sp, #0x20]
 8064adc: 9213         	str	r2, [sp, #0x4c]
 8064ade: f7ff bae6    	b.w	0x80640ae <_dtoa_r+0x4ba> @ imm = #-0xa34
 8064ae2: bf00         	nop

08064ae4 <$d>:
 8064ae4: 40 a1 06 08  	.word	0x0806a140
 8064ae8: 54 a1 06 08  	.word	0x0806a154

08064aec <__sflush_r>:
 8064aec: f9b1 200c    	ldrsh.w	r2, [r1, #0xc]
 8064af0: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 8064af2: 460c         	mov	r4, r1
 8064af4: 0711         	lsls	r1, r2, #0x1c
 8064af6: 4607         	mov	r7, r0
 8064af8: d42e         	bmi	0x8064b58 <__sflush_r+0x6c> @ imm = #0x5c
 8064afa: 6863         	ldr	r3, [r4, #0x4]
 8064afc: f442 6200    	orr	r2, r2, #0x800
 8064b00: 2b00         	cmp	r3, #0x0
 8064b02: 81a2         	strh	r2, [r4, #0xc]
 8064b04: dd46         	ble	0x8064b94 <__sflush_r+0xa8> @ imm = #0x8c
 8064b06: 6aa5         	ldr	r5, [r4, #0x28]
 8064b08: 2d00         	cmp	r5, #0x0
 8064b0a: d041         	beq	0x8064b90 <__sflush_r+0xa4> @ imm = #0x82
 8064b0c: 2300         	movs	r3, #0x0
 8064b0e: 683e         	ldr	r6, [r7]
 8064b10: 603b         	str	r3, [r7]
 8064b12: b293         	uxth	r3, r2
 8064b14: f412 5280    	ands	r2, r2, #0x1000
 8064b18: d140         	bne	0x8064b9c <__sflush_r+0xb0> @ imm = #0x80
 8064b1a: 2301         	movs	r3, #0x1
 8064b1c: 69e1         	ldr	r1, [r4, #0x1c]
 8064b1e: 4638         	mov	r0, r7
 8064b20: 47a8         	blx	r5
 8064b22: 1c42         	adds	r2, r0, #0x1
 8064b24: d071         	beq	0x8064c0a <__sflush_r+0x11e> @ imm = #0xe2
 8064b26: 89a3         	ldrh	r3, [r4, #0xc]
 8064b28: 6aa5         	ldr	r5, [r4, #0x28]
 8064b2a: 075b         	lsls	r3, r3, #0x1d
 8064b2c: d505         	bpl	0x8064b3a <__sflush_r+0x4e> @ imm = #0xa
 8064b2e: 6863         	ldr	r3, [r4, #0x4]
 8064b30: 1ac0         	subs	r0, r0, r3
 8064b32: 6b23         	ldr	r3, [r4, #0x30]
 8064b34: b10b         	cbz	r3, 0x8064b3a <__sflush_r+0x4e> @ imm = #0x2
 8064b36: 6be3         	ldr	r3, [r4, #0x3c]
 8064b38: 1ac0         	subs	r0, r0, r3
 8064b3a: 4602         	mov	r2, r0
 8064b3c: 2300         	movs	r3, #0x0
 8064b3e: 69e1         	ldr	r1, [r4, #0x1c]
 8064b40: 4638         	mov	r0, r7
 8064b42: 47a8         	blx	r5
 8064b44: 1c45         	adds	r5, r0, #0x1
 8064b46: d132         	bne	0x8064bae <__sflush_r+0xc2> @ imm = #0x64
 8064b48: 683a         	ldr	r2, [r7]
 8064b4a: 2a1d         	cmp	r2, #0x1d
 8064b4c: d94a         	bls	0x8064be4 <__sflush_r+0xf8> @ imm = #0x94
 8064b4e: 89a3         	ldrh	r3, [r4, #0xc]
 8064b50: f043 0340    	orr	r3, r3, #0x40
 8064b54: 81a3         	strh	r3, [r4, #0xc]
 8064b56: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064b58: 6926         	ldr	r6, [r4, #0x10]
 8064b5a: b1ce         	cbz	r6, 0x8064b90 <__sflush_r+0xa4> @ imm = #0x32
 8064b5c: b293         	uxth	r3, r2
 8064b5e: 6825         	ldr	r5, [r4]
 8064b60: 6026         	str	r6, [r4]
 8064b62: 0799         	lsls	r1, r3, #0x1e
 8064b64: eba5 0506    	sub.w	r5, r5, r6
 8064b68: bf0c         	ite	eq
 8064b6a: 6963         	ldreq	r3, [r4, #0x14]
 8064b6c: 2300         	movne	r3, #0x0
 8064b6e: 60a3         	str	r3, [r4, #0x8]
 8064b70: e00c         	b	0x8064b8c <__sflush_r+0xa0> @ imm = #0x18
 8064b72: 462b         	mov	r3, r5
 8064b74: 4632         	mov	r2, r6
 8064b76: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 8064b7a: 4638         	mov	r0, r7
 8064b7c: 69e1         	ldr	r1, [r4, #0x1c]
 8064b7e: 47e0         	blx	r12
 8064b80: f1b0 0c00    	subs.w	r12, r0, #0x0
 8064b84: eba5 050c    	sub.w	r5, r5, r12
 8064b88: 4466         	add	r6, r12
 8064b8a: dd09         	ble	0x8064ba0 <__sflush_r+0xb4> @ imm = #0x12
 8064b8c: 2d00         	cmp	r5, #0x0
 8064b8e: dcf0         	bgt	0x8064b72 <__sflush_r+0x86> @ imm = #-0x20
 8064b90: 2000         	movs	r0, #0x0
 8064b92: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064b94: 6be3         	ldr	r3, [r4, #0x3c]
 8064b96: 2b00         	cmp	r3, #0x0
 8064b98: dcb5         	bgt	0x8064b06 <__sflush_r+0x1a> @ imm = #-0x96
 8064b9a: e7f9         	b	0x8064b90 <__sflush_r+0xa4> @ imm = #-0xe
 8064b9c: 6d20         	ldr	r0, [r4, #0x50]
 8064b9e: e7c4         	b	0x8064b2a <__sflush_r+0x3e> @ imm = #-0x78
 8064ba0: 89a3         	ldrh	r3, [r4, #0xc]
 8064ba2: f04f 30ff    	mov.w	r0, #0xffffffff
 8064ba6: f043 0340    	orr	r3, r3, #0x40
 8064baa: 81a3         	strh	r3, [r4, #0xc]
 8064bac: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064bae: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8064bb2: 2200         	movs	r2, #0x0
 8064bb4: f423 6300    	bic	r3, r3, #0x800
 8064bb8: 6062         	str	r2, [r4, #0x4]
 8064bba: 6922         	ldr	r2, [r4, #0x10]
 8064bbc: 81a3         	strh	r3, [r4, #0xc]
 8064bbe: 6022         	str	r2, [r4]
 8064bc0: 04da         	lsls	r2, r3, #0x13
 8064bc2: d500         	bpl	0x8064bc6 <__sflush_r+0xda> @ imm = #0x0
 8064bc4: 6520         	str	r0, [r4, #0x50]
 8064bc6: 6b21         	ldr	r1, [r4, #0x30]
 8064bc8: 603e         	str	r6, [r7]
 8064bca: 2900         	cmp	r1, #0x0
 8064bcc: d0e0         	beq	0x8064b90 <__sflush_r+0xa4> @ imm = #-0x40
 8064bce: f104 0340    	add.w	r3, r4, #0x40
 8064bd2: 4299         	cmp	r1, r3
 8064bd4: d002         	beq	0x8064bdc <__sflush_r+0xf0> @ imm = #0x4
 8064bd6: 4638         	mov	r0, r7
 8064bd8: f000 f9be    	bl	0x8064f58 <_free_r>     @ imm = #0x37c
 8064bdc: 2300         	movs	r3, #0x0
 8064bde: 4618         	mov	r0, r3
 8064be0: 6323         	str	r3, [r4, #0x30]
 8064be2: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064be4: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x8064c20 <__sflush_r+0x134>
 8064be6: 40d3         	lsrs	r3, r2
 8064be8: 43db         	mvns	r3, r3
 8064bea: f013 0301    	ands	r3, r3, #0x1
 8064bee: d1ae         	bne	0x8064b4e <__sflush_r+0x62> @ imm = #-0xa4
 8064bf0: 6063         	str	r3, [r4, #0x4]
 8064bf2: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8064bf6: 6921         	ldr	r1, [r4, #0x10]
 8064bf8: f423 6300    	bic	r3, r3, #0x800
 8064bfc: 6021         	str	r1, [r4]
 8064bfe: 81a3         	strh	r3, [r4, #0xc]
 8064c00: 04db         	lsls	r3, r3, #0x13
 8064c02: d5e0         	bpl	0x8064bc6 <__sflush_r+0xda> @ imm = #-0x40
 8064c04: 2a00         	cmp	r2, #0x0
 8064c06: d1de         	bne	0x8064bc6 <__sflush_r+0xda> @ imm = #-0x44
 8064c08: e7dc         	b	0x8064bc4 <__sflush_r+0xd8> @ imm = #-0x48
 8064c0a: 683b         	ldr	r3, [r7]
 8064c0c: 2b00         	cmp	r3, #0x0
 8064c0e: d08a         	beq	0x8064b26 <__sflush_r+0x3a> @ imm = #-0xec
 8064c10: 2b1d         	cmp	r3, #0x1d
 8064c12: d001         	beq	0x8064c18 <__sflush_r+0x12c> @ imm = #0x2
 8064c14: 2b16         	cmp	r3, #0x16
 8064c16: d19a         	bne	0x8064b4e <__sflush_r+0x62> @ imm = #-0xcc
 8064c18: 2000         	movs	r0, #0x0
 8064c1a: 603e         	str	r6, [r7]
 8064c1c: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064c1e: bf00         	nop

08064c20 <$d>:
 8064c20: 01 00 40 20  	.word	0x20400001

08064c24 <_fflush_r>:
 8064c24: b538         	push	{r3, r4, r5, lr}
 8064c26: 4604         	mov	r4, r0
 8064c28: 460d         	mov	r5, r1
 8064c2a: b108         	cbz	r0, 0x8064c30 <_fflush_r+0xc> @ imm = #0x2
 8064c2c: 6b83         	ldr	r3, [r0, #0x38]
 8064c2e: b11b         	cbz	r3, 0x8064c38 <_fflush_r+0x14> @ imm = #0x6
 8064c30: f9b5 000c    	ldrsh.w	r0, [r5, #0xc]
 8064c34: b930         	cbnz	r0, 0x8064c44 <_fflush_r+0x20> @ imm = #0xc
 8064c36: bd38         	pop	{r3, r4, r5, pc}
 8064c38: f000 f91e    	bl	0x8064e78 <__sinit>     @ imm = #0x23c
 8064c3c: f9b5 000c    	ldrsh.w	r0, [r5, #0xc]
 8064c40: 2800         	cmp	r0, #0x0
 8064c42: d0f8         	beq	0x8064c36 <_fflush_r+0x12> @ imm = #-0x10
 8064c44: 4629         	mov	r1, r5
 8064c46: 4620         	mov	r0, r4
 8064c48: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8064c4c: f7ff bf4e    	b.w	0x8064aec <__sflush_r>  @ imm = #-0x164

08064c50 <fflush>:
 8064c50: b538         	push	{r3, r4, r5, lr}
 8064c52: b1b8         	cbz	r0, 0x8064c84 <fflush+0x34> @ imm = #0x2e
 8064c54: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x8064c94 <fflush+0x44>
 8064c56: 4604         	mov	r4, r0
 8064c58: 681d         	ldr	r5, [r3]
 8064c5a: b10d         	cbz	r5, 0x8064c60 <fflush+0x10> @ imm = #0x2
 8064c5c: 6bab         	ldr	r3, [r5, #0x38]
 8064c5e: b14b         	cbz	r3, 0x8064c74 <fflush+0x24> @ imm = #0x12
 8064c60: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 8064c64: b900         	cbnz	r0, 0x8064c68 <fflush+0x18> @ imm = #0x0
 8064c66: bd38         	pop	{r3, r4, r5, pc}
 8064c68: 4621         	mov	r1, r4
 8064c6a: 4628         	mov	r0, r5
 8064c6c: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8064c70: f7ff bf3c    	b.w	0x8064aec <__sflush_r>  @ imm = #-0x188
 8064c74: 4628         	mov	r0, r5
 8064c76: f000 f8ff    	bl	0x8064e78 <__sinit>     @ imm = #0x1fe
 8064c7a: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 8064c7e: 2800         	cmp	r0, #0x0
 8064c80: d0f1         	beq	0x8064c66 <fflush+0x16> @ imm = #-0x1e
 8064c82: e7f1         	b	0x8064c68 <fflush+0x18> @ imm = #-0x1e
 8064c84: 4b04         	ldr	r3, [pc, #0x10]         @ 0x8064c98 <fflush+0x48>
 8064c86: 4905         	ldr	r1, [pc, #0x14]         @ 0x8064c9c <fflush+0x4c>
 8064c88: 6818         	ldr	r0, [r3]
 8064c8a: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8064c8e: f000 ba89    	b.w	0x80651a4 <_fwalk_reent> @ imm = #0x512
 8064c92: bf00         	nop

08064c94 <$d>:
 8064c94: 90 23 00 20  	.word	0x20002390
 8064c98: 88 a1 06 08  	.word	0x0806a188
 8064c9c: 25 4c 06 08  	.word	0x08064c25

08064ca0 <__fp_lock>:
 8064ca0: 2000         	movs	r0, #0x0
 8064ca2: 4770         	bx	lr

08064ca4 <_cleanup_r>:
 8064ca4: 4901         	ldr	r1, [pc, #0x4]          @ 0x8064cac <_cleanup_r+0x8>
 8064ca6: f000 ba7d    	b.w	0x80651a4 <_fwalk_reent> @ imm = #0x4fa
 8064caa: bf00         	nop

08064cac <$d>:
 8064cac: cd 72 06 08  	.word	0x080672cd

08064cb0 <__fp_unlock>:
 8064cb0: 2000         	movs	r0, #0x0
 8064cb2: 4770         	bx	lr

08064cb4 <__sinit.part.0>:
 8064cb4: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8064cb8: 492d         	ldr	r1, [pc, #0xb4]         @ 0x8064d70 <__sinit.part.0+0xbc>
 8064cba: 2400         	movs	r4, #0x0
 8064cbc: 6846         	ldr	r6, [r0, #0x4]
 8064cbe: 4607         	mov	r7, r0
 8064cc0: 2304         	movs	r3, #0x4
 8064cc2: 2203         	movs	r2, #0x3
 8064cc4: f500 703b    	add.w	r0, r0, #0x2ec
 8064cc8: 63f9         	str	r1, [r7, #0x3c]
 8064cca: 4621         	mov	r1, r4
 8064ccc: f8df b0a4    	ldr.w	r11, [pc, #0xa4]        @ 0x8064d74 <__sinit.part.0+0xc0>
 8064cd0: f8c7 02e8    	str.w	r0, [r7, #0x2e8]
 8064cd4: f106 005c    	add.w	r0, r6, #0x5c
 8064cd8: f8df a09c    	ldr.w	r10, [pc, #0x9c]        @ 0x8064d78 <__sinit.part.0+0xc4>
 8064cdc: f8df 909c    	ldr.w	r9, [pc, #0x9c]         @ 0x8064d7c <__sinit.part.0+0xc8>
 8064ce0: f8df 809c    	ldr.w	r8, [pc, #0x9c]         @ 0x8064d80 <__sinit.part.0+0xcc>
 8064ce4: e9c7 42b8    	strd	r4, r2, [r7, #736]
 8064ce8: 2208         	movs	r2, #0x8
 8064cea: 6674         	str	r4, [r6, #0x64]
 8064cec: 61b4         	str	r4, [r6, #0x18]
 8064cee: e9c6 4302    	strd	r4, r3, [r6, #8]
 8064cf2: e9c6 4400    	strd	r4, r4, [r6]
 8064cf6: e9c6 4404    	strd	r4, r4, [r6, #16]
 8064cfa: f7fd fb3b    	bl	0x8062374 <memset>      @ imm = #-0x298a
 8064cfe: 68bd         	ldr	r5, [r7, #0x8]
 8064d00: 4b20         	ldr	r3, [pc, #0x80]         @ 0x8064d84 <__sinit.part.0+0xd0>
 8064d02: 2208         	movs	r2, #0x8
 8064d04: f8c6 a024    	str.w	r10, [r6, #0x24]
 8064d08: 4621         	mov	r1, r4
 8064d0a: f8c6 9028    	str.w	r9, [r6, #0x28]
 8064d0e: f105 005c    	add.w	r0, r5, #0x5c
 8064d12: f8c6 802c    	str.w	r8, [r6, #0x2c]
 8064d16: e9c6 6b07    	strd	r6, r11, [r6, #28]
 8064d1a: 60eb         	str	r3, [r5, #0xc]
 8064d1c: 666c         	str	r4, [r5, #0x64]
 8064d1e: 60ac         	str	r4, [r5, #0x8]
 8064d20: 61ac         	str	r4, [r5, #0x18]
 8064d22: e9c5 4400    	strd	r4, r4, [r5]
 8064d26: e9c5 4404    	strd	r4, r4, [r5, #16]
 8064d2a: f7fd fb23    	bl	0x8062374 <memset>      @ imm = #-0x29ba
 8064d2e: 4b16         	ldr	r3, [pc, #0x58]         @ 0x8064d88 <__sinit.part.0+0xd4>
 8064d30: f8c5 802c    	str.w	r8, [r5, #0x2c]
 8064d34: 4621         	mov	r1, r4
 8064d36: 2208         	movs	r2, #0x8
 8064d38: e9c5 5b07    	strd	r5, r11, [r5, #28]
 8064d3c: e9c5 a909    	strd	r10, r9, [r5, #36]
 8064d40: 68fd         	ldr	r5, [r7, #0xc]
 8064d42: 60eb         	str	r3, [r5, #0xc]
 8064d44: f105 005c    	add.w	r0, r5, #0x5c
 8064d48: 666c         	str	r4, [r5, #0x64]
 8064d4a: 60ac         	str	r4, [r5, #0x8]
 8064d4c: 61ac         	str	r4, [r5, #0x18]
 8064d4e: e9c5 4400    	strd	r4, r4, [r5]
 8064d52: e9c5 4404    	strd	r4, r4, [r5, #16]
 8064d56: f7fd fb0d    	bl	0x8062374 <memset>      @ imm = #-0x29e6
 8064d5a: 2301         	movs	r3, #0x1
 8064d5c: f8c5 a024    	str.w	r10, [r5, #0x24]
 8064d60: e9c5 5b07    	strd	r5, r11, [r5, #28]
 8064d64: e9c5 980a    	strd	r9, r8, [r5, #40]
 8064d68: 63bb         	str	r3, [r7, #0x38]
 8064d6a: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8064d6e: bf00         	nop

08064d70 <$d>:
 8064d70: a5 4c 06 08  	.word	0x08064ca5
 8064d74: c1 63 06 08  	.word	0x080663c1
 8064d78: e9 63 06 08  	.word	0x080663e9
 8064d7c: 29 64 06 08  	.word	0x08066429
 8064d80: 4d 64 06 08  	.word	0x0806644d
 8064d84: 09 00 01 00  	.word	0x00010009
 8064d88: 12 00 02 00  	.word	0x00020012

08064d8c <__sfmoreglue>:
 8064d8c: b570         	push	{r4, r5, r6, lr}
 8064d8e: 2268         	movs	r2, #0x68
 8064d90: 1e4e         	subs	r6, r1, #0x1
 8064d92: 460d         	mov	r5, r1
 8064d94: fb02 f606    	mul	r6, r2, r6
 8064d98: f106 0174    	add.w	r1, r6, #0x74
 8064d9c: f000 face    	bl	0x806533c <_malloc_r>   @ imm = #0x59c
 8064da0: 4604         	mov	r4, r0
 8064da2: b140         	cbz	r0, 0x8064db6 <__sfmoreglue+0x2a> @ imm = #0x10
 8064da4: 2100         	movs	r1, #0x0
 8064da6: 300c         	adds	r0, #0xc
 8064da8: f106 0268    	add.w	r2, r6, #0x68
 8064dac: 60a0         	str	r0, [r4, #0x8]
 8064dae: e9c4 1500    	strd	r1, r5, [r4]
 8064db2: f7fd fadf    	bl	0x8062374 <memset>      @ imm = #-0x2a42
 8064db6: 4620         	mov	r0, r4
 8064db8: bd70         	pop	{r4, r5, r6, pc}
 8064dba: bf00         	nop

08064dbc <__sfp>:
 8064dbc: 4b27         	ldr	r3, [pc, #0x9c]         @ 0x8064e5c <__sfp+0xa0>
 8064dbe: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8064dc2: 681e         	ldr	r6, [r3]
 8064dc4: 4607         	mov	r7, r0
 8064dc6: 6bb3         	ldr	r3, [r6, #0x38]
 8064dc8: b35b         	cbz	r3, 0x8064e22 <__sfp+0x66> @ imm = #0x56
 8064dca: f506 7638    	add.w	r6, r6, #0x2e0
 8064dce: f04f 0804    	mov.w	r8, #0x4
 8064dd2: e9d6 3401    	ldrd	r3, r4, [r6, #4]
 8064dd6: 3b01         	subs	r3, #0x1
 8064dd8: d504         	bpl	0x8064de4 <__sfp+0x28>  @ imm = #0x8
 8064dda: e01e         	b	0x8064e1a <__sfp+0x5e>  @ imm = #0x3c
 8064ddc: 1c5a         	adds	r2, r3, #0x1
 8064dde: f104 0468    	add.w	r4, r4, #0x68
 8064de2: d01a         	beq	0x8064e1a <__sfp+0x5e>  @ imm = #0x34
 8064de4: f9b4 500c    	ldrsh.w	r5, [r4, #0xc]
 8064de8: 3b01         	subs	r3, #0x1
 8064dea: 2d00         	cmp	r5, #0x0
 8064dec: d1f6         	bne	0x8064ddc <__sfp+0x20>  @ imm = #-0x14
 8064dee: 4b1c         	ldr	r3, [pc, #0x70]         @ 0x8064e60 <__sfp+0xa4>
 8064df0: 2208         	movs	r2, #0x8
 8064df2: 4629         	mov	r1, r5
 8064df4: f104 005c    	add.w	r0, r4, #0x5c
 8064df8: 6665         	str	r5, [r4, #0x64]
 8064dfa: 61a5         	str	r5, [r4, #0x18]
 8064dfc: e9c4 5500    	strd	r5, r5, [r4]
 8064e00: e9c4 5302    	strd	r5, r3, [r4, #8]
 8064e04: e9c4 5504    	strd	r5, r5, [r4, #16]
 8064e08: f7fd fab4    	bl	0x8062374 <memset>      @ imm = #-0x2a98
 8064e0c: e9c4 550c    	strd	r5, r5, [r4, #48]
 8064e10: e9c4 5511    	strd	r5, r5, [r4, #68]
 8064e14: 4620         	mov	r0, r4
 8064e16: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8064e1a: 6835         	ldr	r5, [r6]
 8064e1c: b12d         	cbz	r5, 0x8064e2a <__sfp+0x6e> @ imm = #0xa
 8064e1e: 462e         	mov	r6, r5
 8064e20: e7d7         	b	0x8064dd2 <__sfp+0x16>  @ imm = #-0x52
 8064e22: 4630         	mov	r0, r6
 8064e24: f7ff ff46    	bl	0x8064cb4 <__sinit.part.0> @ imm = #-0x174
 8064e28: e7cf         	b	0x8064dca <__sfp+0xe>   @ imm = #-0x62
 8064e2a: f44f 71d6    	mov.w	r1, #0x1ac
 8064e2e: 4638         	mov	r0, r7
 8064e30: f000 fa84    	bl	0x806533c <_malloc_r>   @ imm = #0x508
 8064e34: 4604         	mov	r4, r0
 8064e36: b168         	cbz	r0, 0x8064e54 <__sfp+0x98> @ imm = #0x1a
 8064e38: 6005         	str	r5, [r0]
 8064e3a: 300c         	adds	r0, #0xc
 8064e3c: 4629         	mov	r1, r5
 8064e3e: 4625         	mov	r5, r4
 8064e40: f840 8c08    	str	r8, [r0, #-8]
 8064e44: f44f 72d0    	mov.w	r2, #0x1a0
 8064e48: 60a0         	str	r0, [r4, #0x8]
 8064e4a: f7fd fa93    	bl	0x8062374 <memset>      @ imm = #-0x2ada
 8064e4e: 6034         	str	r4, [r6]
 8064e50: 462e         	mov	r6, r5
 8064e52: e7be         	b	0x8064dd2 <__sfp+0x16>  @ imm = #-0x84
 8064e54: 230c         	movs	r3, #0xc
 8064e56: 6030         	str	r0, [r6]
 8064e58: 603b         	str	r3, [r7]
 8064e5a: e7db         	b	0x8064e14 <__sfp+0x58>  @ imm = #-0x4a

08064e5c <$d>:
 8064e5c: 88 a1 06 08  	.word	0x0806a188
 8064e60: 01 00 ff ff  	.word	0xffff0001

08064e64 <_cleanup>:
 8064e64: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064e70 <_cleanup+0xc>
 8064e66: 4903         	ldr	r1, [pc, #0xc]          @ 0x8064e74 <_cleanup+0x10>
 8064e68: 6818         	ldr	r0, [r3]
 8064e6a: f000 b99b    	b.w	0x80651a4 <_fwalk_reent> @ imm = #0x336
 8064e6e: bf00         	nop

08064e70 <$d>:
 8064e70: 88 a1 06 08  	.word	0x0806a188
 8064e74: cd 72 06 08  	.word	0x080672cd

08064e78 <__sinit>:
 8064e78: 6b83         	ldr	r3, [r0, #0x38]
 8064e7a: b103         	cbz	r3, 0x8064e7e <__sinit+0x6> @ imm = #0x0
 8064e7c: 4770         	bx	lr
 8064e7e: e719         	b	0x8064cb4 <__sinit.part.0> @ imm = #-0x1ce

08064e80 <__sfp_lock_acquire>:
 8064e80: 4770         	bx	lr
 8064e82: bf00         	nop

08064e84 <__sfp_lock_release>:
 8064e84: 4770         	bx	lr
 8064e86: bf00         	nop

08064e88 <__sinit_lock_acquire>:
 8064e88: 4770         	bx	lr
 8064e8a: bf00         	nop

08064e8c <__sinit_lock_release>:
 8064e8c: 4770         	bx	lr
 8064e8e: bf00         	nop

08064e90 <__fp_lock_all>:
 8064e90: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064e9c <__fp_lock_all+0xc>
 8064e92: 4903         	ldr	r1, [pc, #0xc]          @ 0x8064ea0 <__fp_lock_all+0x10>
 8064e94: 6818         	ldr	r0, [r3]
 8064e96: f000 b965    	b.w	0x8065164 <_fwalk>      @ imm = #0x2ca
 8064e9a: bf00         	nop

08064e9c <$d>:
 8064e9c: 90 23 00 20  	.word	0x20002390
 8064ea0: a1 4c 06 08  	.word	0x08064ca1

08064ea4 <__fp_unlock_all>:
 8064ea4: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8064eb0 <__fp_unlock_all+0xc>
 8064ea6: 4903         	ldr	r1, [pc, #0xc]          @ 0x8064eb4 <__fp_unlock_all+0x10>
 8064ea8: 6818         	ldr	r0, [r3]
 8064eaa: f000 b95b    	b.w	0x8065164 <_fwalk>      @ imm = #0x2b6
 8064eae: bf00         	nop

08064eb0 <$d>:
 8064eb0: 90 23 00 20  	.word	0x20002390
 8064eb4: b1 4c 06 08  	.word	0x08064cb1

08064eb8 <_malloc_trim_r>:
 8064eb8: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 8064eba: 4f23         	ldr	r7, [pc, #0x8c]         @ 0x8064f48 <_malloc_trim_r+0x90>
 8064ebc: 460c         	mov	r4, r1
 8064ebe: 4606         	mov	r6, r0
 8064ec0: f000 fd30    	bl	0x8065924 <__malloc_lock> @ imm = #0xa60
 8064ec4: 68ba         	ldr	r2, [r7, #0x8]
 8064ec6: f640 73ef    	movw	r3, #0xfef
 8064eca: 6855         	ldr	r5, [r2, #0x4]
 8064ecc: 1b1b         	subs	r3, r3, r4
 8064ece: 4c1f         	ldr	r4, [pc, #0x7c]         @ 0x8064f4c <_malloc_trim_r+0x94>
 8064ed0: f025 0503    	bic	r5, r5, #0x3
 8064ed4: 442b         	add	r3, r5
 8064ed6: 401c         	ands	r4, r3
 8064ed8: f5a4 5480    	sub.w	r4, r4, #0x1000
 8064edc: f5b4 5f80    	cmp.w	r4, #0x1000
 8064ee0: db07         	blt	0x8064ef2 <_malloc_trim_r+0x3a> @ imm = #0xe
 8064ee2: 2100         	movs	r1, #0x0
 8064ee4: 4630         	mov	r0, r6
 8064ee6: f001 fa59    	bl	0x806639c <_sbrk_r>     @ imm = #0x14b2
 8064eea: 68bb         	ldr	r3, [r7, #0x8]
 8064eec: 442b         	add	r3, r5
 8064eee: 4298         	cmp	r0, r3
 8064ef0: d004         	beq	0x8064efc <_malloc_trim_r+0x44> @ imm = #0x8
 8064ef2: 4630         	mov	r0, r6
 8064ef4: f000 fd18    	bl	0x8065928 <__malloc_unlock> @ imm = #0xa30
 8064ef8: 2000         	movs	r0, #0x0
 8064efa: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064efc: 4261         	rsbs	r1, r4, #0
 8064efe: 4630         	mov	r0, r6
 8064f00: f001 fa4c    	bl	0x806639c <_sbrk_r>     @ imm = #0x1498
 8064f04: 3001         	adds	r0, #0x1
 8064f06: d00d         	beq	0x8064f24 <_malloc_trim_r+0x6c> @ imm = #0x1a
 8064f08: 1b2d         	subs	r5, r5, r4
 8064f0a: 4b11         	ldr	r3, [pc, #0x44]         @ 0x8064f50 <_malloc_trim_r+0x98>
 8064f0c: 68ba         	ldr	r2, [r7, #0x8]
 8064f0e: 4630         	mov	r0, r6
 8064f10: f045 0501    	orr	r5, r5, #0x1
 8064f14: 6055         	str	r5, [r2, #0x4]
 8064f16: 681a         	ldr	r2, [r3]
 8064f18: 1b12         	subs	r2, r2, r4
 8064f1a: 601a         	str	r2, [r3]
 8064f1c: f000 fd04    	bl	0x8065928 <__malloc_unlock> @ imm = #0xa08
 8064f20: 2001         	movs	r0, #0x1
 8064f22: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8064f24: 2100         	movs	r1, #0x0
 8064f26: 4630         	mov	r0, r6
 8064f28: f001 fa38    	bl	0x806639c <_sbrk_r>     @ imm = #0x1470
 8064f2c: 68ba         	ldr	r2, [r7, #0x8]
 8064f2e: 1a83         	subs	r3, r0, r2
 8064f30: 2b0f         	cmp	r3, #0xf
 8064f32: ddde         	ble	0x8064ef2 <_malloc_trim_r+0x3a> @ imm = #-0x44
 8064f34: f043 0301    	orr	r3, r3, #0x1
 8064f38: 4905         	ldr	r1, [pc, #0x14]         @ 0x8064f50 <_malloc_trim_r+0x98>
 8064f3a: 6053         	str	r3, [r2, #0x4]
 8064f3c: 4b05         	ldr	r3, [pc, #0x14]         @ 0x8064f54 <_malloc_trim_r+0x9c>
 8064f3e: 681b         	ldr	r3, [r3]
 8064f40: 1ac0         	subs	r0, r0, r3
 8064f42: 6008         	str	r0, [r1]
 8064f44: e7d5         	b	0x8064ef2 <_malloc_trim_r+0x3a> @ imm = #-0x56
 8064f46: bf00         	nop

08064f48 <$d>:
 8064f48: c0 27 00 20  	.word	0x200027c0
 8064f4c: 00 f0 ff ff  	.word	0xfffff000
 8064f50: 6c 3f 00 20  	.word	0x20003f6c
 8064f54: c8 2b 00 20  	.word	0x20002bc8

08064f58 <_free_r>:
 8064f58: 2900         	cmp	r1, #0x0
 8064f5a: d061         	beq	0x8065020 <_free_r+0xc8> @ imm = #0xc2
 8064f5c: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 8064f5e: 460c         	mov	r4, r1
 8064f60: 4606         	mov	r6, r0
 8064f62: f000 fcdf    	bl	0x8065924 <__malloc_lock> @ imm = #0x9be
 8064f66: 4f7c         	ldr	r7, [pc, #0x1f0]        @ 0x8065158 <_free_r+0x200>
 8064f68: f854 2c04    	ldr	r2, [r4, #-4]
 8064f6c: f1a4 0508    	sub.w	r5, r4, #0x8
 8064f70: 68b8         	ldr	r0, [r7, #0x8]
 8064f72: f022 0101    	bic	r1, r2, #0x1
 8064f76: eb05 0c01    	add.w	r12, r5, r1
 8064f7a: f8dc 3004    	ldr.w	r3, [r12, #0x4]
 8064f7e: 4560         	cmp	r0, r12
 8064f80: f023 0303    	bic	r3, r3, #0x3
 8064f84: f000 808b    	beq.w	0x806509e <_free_r+0x146> @ imm = #0x116
 8064f88: 07d2         	lsls	r2, r2, #0x1f
 8064f8a: f8cc 3004    	str.w	r3, [r12, #0x4]
 8064f8e: d432         	bmi	0x8064ff6 <_free_r+0x9e> @ imm = #0x64
 8064f90: f854 2c08    	ldr	r2, [r4, #-8]
 8064f94: f107 0008    	add.w	r0, r7, #0x8
 8064f98: 1aad         	subs	r5, r5, r2
 8064f9a: 4411         	add	r1, r2
 8064f9c: 68aa         	ldr	r2, [r5, #0x8]
 8064f9e: 4282         	cmp	r2, r0
 8064fa0: d06a         	beq	0x8065078 <_free_r+0x120> @ imm = #0xd4
 8064fa2: eb0c 0403    	add.w	r4, r12, r3
 8064fa6: f8d4 e004    	ldr.w	lr, [r4, #0x4]
 8064faa: 68ec         	ldr	r4, [r5, #0xc]
 8064fac: f01e 0f01    	tst.w	lr, #0x1
 8064fb0: 60d4         	str	r4, [r2, #0xc]
 8064fb2: 60a2         	str	r2, [r4, #0x8]
 8064fb4: f000 8097    	beq.w	0x80650e6 <_free_r+0x18e> @ imm = #0x12e
 8064fb8: f041 0301    	orr	r3, r1, #0x1
 8064fbc: 606b         	str	r3, [r5, #0x4]
 8064fbe: f8cc 1000    	str.w	r1, [r12]
 8064fc2: f5b1 7f00    	cmp.w	r1, #0x200
 8064fc6: d235         	bhs	0x8065034 <_free_r+0xdc> @ imm = #0x6a
 8064fc8: 094a         	lsrs	r2, r1, #0x5
 8064fca: 08cb         	lsrs	r3, r1, #0x3
 8064fcc: 2101         	movs	r1, #0x1
 8064fce: 3301         	adds	r3, #0x1
 8064fd0: 4091         	lsls	r1, r2
 8064fd2: 687a         	ldr	r2, [r7, #0x4]
 8064fd4: 4311         	orrs	r1, r2
 8064fd6: eb07 02c3    	add.w	r2, r7, r3, lsl #3
 8064fda: 6079         	str	r1, [r7, #0x4]
 8064fdc: 3a08         	subs	r2, #0x8
 8064fde: f857 1033    	ldr.w	r1, [r7, r3, lsl #3]
 8064fe2: e9c5 1202    	strd	r1, r2, [r5, #8]
 8064fe6: f847 5033    	str.w	r5, [r7, r3, lsl #3]
 8064fea: 60cd         	str	r5, [r1, #0xc]
 8064fec: 4630         	mov	r0, r6
 8064fee: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 8064ff2: f000 bc99    	b.w	0x8065928 <__malloc_unlock> @ imm = #0x932
 8064ff6: eb0c 0203    	add.w	r2, r12, r3
 8064ffa: 6852         	ldr	r2, [r2, #0x4]
 8064ffc: 07d0         	lsls	r0, r2, #0x1f
 8064ffe: d410         	bmi	0x8065022 <_free_r+0xca> @ imm = #0x20
 8065000: 4419         	add	r1, r3
 8065002: f107 0008    	add.w	r0, r7, #0x8
 8065006: f8dc 3008    	ldr.w	r3, [r12, #0x8]
 806500a: 4283         	cmp	r3, r0
 806500c: d073         	beq	0x80650f6 <_free_r+0x19e> @ imm = #0xe6
 806500e: f8dc 200c    	ldr.w	r2, [r12, #0xc]
 8065012: 60da         	str	r2, [r3, #0xc]
 8065014: 6093         	str	r3, [r2, #0x8]
 8065016: f041 0301    	orr	r3, r1, #0x1
 806501a: 606b         	str	r3, [r5, #0x4]
 806501c: 5069         	str	r1, [r5, r1]
 806501e: e7d0         	b	0x8064fc2 <_free_r+0x6a> @ imm = #-0x60
 8065020: 4770         	bx	lr
 8065022: f041 0301    	orr	r3, r1, #0x1
 8065026: f5b1 7f00    	cmp.w	r1, #0x200
 806502a: f844 3c04    	str	r3, [r4, #-4]
 806502e: f8cc 1000    	str.w	r1, [r12]
 8065032: d3c9         	blo	0x8064fc8 <_free_r+0x70> @ imm = #-0x6e
 8065034: f5b1 6f20    	cmp.w	r1, #0xa00
 8065038: ea4f 2351    	lsr.w	r3, r1, #0x9
 806503c: d248         	bhs	0x80650d0 <_free_r+0x178> @ imm = #0x90
 806503e: 098b         	lsrs	r3, r1, #0x6
 8065040: f103 0039    	add.w	r0, r3, #0x39
 8065044: f103 0238    	add.w	r2, r3, #0x38
 8065048: 00c3         	lsls	r3, r0, #0x3
 806504a: 18f8         	adds	r0, r7, r3
 806504c: 58fb         	ldr	r3, [r7, r3]
 806504e: 3808         	subs	r0, #0x8
 8065050: 4298         	cmp	r0, r3
 8065052: d059         	beq	0x8065108 <_free_r+0x1b0> @ imm = #0xb2
 8065054: 685a         	ldr	r2, [r3, #0x4]
 8065056: f022 0203    	bic	r2, r2, #0x3
 806505a: 428a         	cmp	r2, r1
 806505c: d902         	bls	0x8065064 <_free_r+0x10c> @ imm = #0x4
 806505e: 689b         	ldr	r3, [r3, #0x8]
 8065060: 4298         	cmp	r0, r3
 8065062: d1f7         	bne	0x8065054 <_free_r+0xfc> @ imm = #-0x12
 8065064: 68d8         	ldr	r0, [r3, #0xc]
 8065066: e9c5 3002    	strd	r3, r0, [r5, #8]
 806506a: 6085         	str	r5, [r0, #0x8]
 806506c: 4630         	mov	r0, r6
 806506e: 60dd         	str	r5, [r3, #0xc]
 8065070: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 8065074: f000 bc58    	b.w	0x8065928 <__malloc_unlock> @ imm = #0x8b0
 8065078: eb0c 0203    	add.w	r2, r12, r3
 806507c: 6852         	ldr	r2, [r2, #0x4]
 806507e: 07d2         	lsls	r2, r2, #0x1f
 8065080: d463         	bmi	0x806514a <_free_r+0x1f2> @ imm = #0xc6
 8065082: 440b         	add	r3, r1
 8065084: 4630         	mov	r0, r6
 8065086: e9dc 1202    	ldrd	r1, r2, [r12, #8]
 806508a: 60ca         	str	r2, [r1, #0xc]
 806508c: 6091         	str	r1, [r2, #0x8]
 806508e: f043 0201    	orr	r2, r3, #0x1
 8065092: 606a         	str	r2, [r5, #0x4]
 8065094: 50eb         	str	r3, [r5, r3]
 8065096: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 806509a: f000 bc45    	b.w	0x8065928 <__malloc_unlock> @ imm = #0x88a
 806509e: 440b         	add	r3, r1
 80650a0: 07d1         	lsls	r1, r2, #0x1f
 80650a2: d407         	bmi	0x80650b4 <_free_r+0x15c> @ imm = #0xe
 80650a4: f854 2c08    	ldr	r2, [r4, #-8]
 80650a8: 1aad         	subs	r5, r5, r2
 80650aa: 4413         	add	r3, r2
 80650ac: e9d5 1202    	ldrd	r1, r2, [r5, #8]
 80650b0: 60ca         	str	r2, [r1, #0xc]
 80650b2: 6091         	str	r1, [r2, #0x8]
 80650b4: f043 0201    	orr	r2, r3, #0x1
 80650b8: 606a         	str	r2, [r5, #0x4]
 80650ba: 4a28         	ldr	r2, [pc, #0xa0]         @ 0x806515c <_free_r+0x204>
 80650bc: 60bd         	str	r5, [r7, #0x8]
 80650be: 6812         	ldr	r2, [r2]
 80650c0: 429a         	cmp	r2, r3
 80650c2: d893         	bhi	0x8064fec <_free_r+0x94> @ imm = #-0xda
 80650c4: 4b26         	ldr	r3, [pc, #0x98]         @ 0x8065160 <_free_r+0x208>
 80650c6: 4630         	mov	r0, r6
 80650c8: 6819         	ldr	r1, [r3]
 80650ca: f7ff fef5    	bl	0x8064eb8 <_malloc_trim_r> @ imm = #-0x216
 80650ce: e78d         	b	0x8064fec <_free_r+0x94> @ imm = #-0xe6
 80650d0: 2b14         	cmp	r3, #0x14
 80650d2: d90a         	bls	0x80650ea <_free_r+0x192> @ imm = #0x14
 80650d4: 2b54         	cmp	r3, #0x54
 80650d6: d81f         	bhi	0x8065118 <_free_r+0x1c0> @ imm = #0x3e
 80650d8: 0b0b         	lsrs	r3, r1, #0xc
 80650da: f103 006f    	add.w	r0, r3, #0x6f
 80650de: f103 026e    	add.w	r2, r3, #0x6e
 80650e2: 00c3         	lsls	r3, r0, #0x3
 80650e4: e7b1         	b	0x806504a <_free_r+0xf2> @ imm = #-0x9e
 80650e6: 4419         	add	r1, r3
 80650e8: e78d         	b	0x8065006 <_free_r+0xae> @ imm = #-0xe6
 80650ea: f103 005c    	add.w	r0, r3, #0x5c
 80650ee: f103 025b    	add.w	r2, r3, #0x5b
 80650f2: 00c3         	lsls	r3, r0, #0x3
 80650f4: e7a9         	b	0x806504a <_free_r+0xf2> @ imm = #-0xae
 80650f6: f041 0301    	orr	r3, r1, #0x1
 80650fa: e9c7 5504    	strd	r5, r5, [r7, #16]
 80650fe: e9c5 0002    	strd	r0, r0, [r5, #8]
 8065102: 606b         	str	r3, [r5, #0x4]
 8065104: 5069         	str	r1, [r5, r1]
 8065106: e771         	b	0x8064fec <_free_r+0x94> @ imm = #-0x11e
 8065108: 2101         	movs	r1, #0x1
 806510a: 1092         	asrs	r2, r2, #0x2
 806510c: fa01 f202    	lsl.w	r2, r1, r2
 8065110: 6879         	ldr	r1, [r7, #0x4]
 8065112: 430a         	orrs	r2, r1
 8065114: 607a         	str	r2, [r7, #0x4]
 8065116: e7a6         	b	0x8065066 <_free_r+0x10e> @ imm = #-0xb4
 8065118: f5b3 7faa    	cmp.w	r3, #0x154
 806511c: d806         	bhi	0x806512c <_free_r+0x1d4> @ imm = #0xc
 806511e: 0bcb         	lsrs	r3, r1, #0xf
 8065120: f103 0078    	add.w	r0, r3, #0x78
 8065124: f103 0277    	add.w	r2, r3, #0x77
 8065128: 00c3         	lsls	r3, r0, #0x3
 806512a: e78e         	b	0x806504a <_free_r+0xf2> @ imm = #-0xe4
 806512c: f240 5254    	movw	r2, #0x554
 8065130: 4293         	cmp	r3, r2
 8065132: d806         	bhi	0x8065142 <_free_r+0x1ea> @ imm = #0xc
 8065134: 0c8b         	lsrs	r3, r1, #0x12
 8065136: f103 007d    	add.w	r0, r3, #0x7d
 806513a: f103 027c    	add.w	r2, r3, #0x7c
 806513e: 00c3         	lsls	r3, r0, #0x3
 8065140: e783         	b	0x806504a <_free_r+0xf2> @ imm = #-0xfa
 8065142: f44f 737e    	mov.w	r3, #0x3f8
 8065146: 227e         	movs	r2, #0x7e
 8065148: e77f         	b	0x806504a <_free_r+0xf2> @ imm = #-0x102
 806514a: f041 0301    	orr	r3, r1, #0x1
 806514e: 606b         	str	r3, [r5, #0x4]
 8065150: f8cc 1000    	str.w	r1, [r12]
 8065154: e74a         	b	0x8064fec <_free_r+0x94> @ imm = #-0x16c
 8065156: bf00         	nop

08065158 <$d>:
 8065158: c0 27 00 20  	.word	0x200027c0
 806515c: cc 2b 00 20  	.word	0x20002bcc
 8065160: 68 3f 00 20  	.word	0x20003f68

08065164 <_fwalk>:
 8065164: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8065168: 2600         	movs	r6, #0x0
 806516a: 4688         	mov	r8, r1
 806516c: f500 7738    	add.w	r7, r0, #0x2e0
 8065170: e9d7 5401    	ldrd	r5, r4, [r7, #4]
 8065174: 3d01         	subs	r5, #0x1
 8065176: d40e         	bmi	0x8065196 <_fwalk+0x32> @ imm = #0x1c
 8065178: 89a3         	ldrh	r3, [r4, #0xc]
 806517a: 3d01         	subs	r5, #0x1
 806517c: 2b01         	cmp	r3, #0x1
 806517e: d906         	bls	0x806518e <_fwalk+0x2a> @ imm = #0xc
 8065180: f9b4 300e    	ldrsh.w	r3, [r4, #0xe]
 8065184: 4620         	mov	r0, r4
 8065186: 3301         	adds	r3, #0x1
 8065188: d001         	beq	0x806518e <_fwalk+0x2a> @ imm = #0x2
 806518a: 47c0         	blx	r8
 806518c: 4306         	orrs	r6, r0
 806518e: 1c6b         	adds	r3, r5, #0x1
 8065190: f104 0468    	add.w	r4, r4, #0x68
 8065194: d1f0         	bne	0x8065178 <_fwalk+0x14> @ imm = #-0x20
 8065196: 683f         	ldr	r7, [r7]
 8065198: 2f00         	cmp	r7, #0x0
 806519a: d1e9         	bne	0x8065170 <_fwalk+0xc>  @ imm = #-0x2e
 806519c: 4630         	mov	r0, r6
 806519e: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 80651a2: bf00         	nop

080651a4 <_fwalk_reent>:
 80651a4: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
 80651a8: 2600         	movs	r6, #0x0
 80651aa: 4681         	mov	r9, r0
 80651ac: 4688         	mov	r8, r1
 80651ae: f500 7738    	add.w	r7, r0, #0x2e0
 80651b2: e9d7 5401    	ldrd	r5, r4, [r7, #4]
 80651b6: 3d01         	subs	r5, #0x1
 80651b8: d40f         	bmi	0x80651da <_fwalk_reent+0x36> @ imm = #0x1e
 80651ba: 89a3         	ldrh	r3, [r4, #0xc]
 80651bc: 3d01         	subs	r5, #0x1
 80651be: 2b01         	cmp	r3, #0x1
 80651c0: d907         	bls	0x80651d2 <_fwalk_reent+0x2e> @ imm = #0xe
 80651c2: f9b4 300e    	ldrsh.w	r3, [r4, #0xe]
 80651c6: 4621         	mov	r1, r4
 80651c8: 4648         	mov	r0, r9
 80651ca: 3301         	adds	r3, #0x1
 80651cc: d001         	beq	0x80651d2 <_fwalk_reent+0x2e> @ imm = #0x2
 80651ce: 47c0         	blx	r8
 80651d0: 4306         	orrs	r6, r0
 80651d2: 1c6b         	adds	r3, r5, #0x1
 80651d4: f104 0468    	add.w	r4, r4, #0x68
 80651d8: d1ef         	bne	0x80651ba <_fwalk_reent+0x16> @ imm = #-0x22
 80651da: 683f         	ldr	r7, [r7]
 80651dc: 2f00         	cmp	r7, #0x0
 80651de: d1e8         	bne	0x80651b2 <_fwalk_reent+0xe> @ imm = #-0x30
 80651e0: 4630         	mov	r0, r6
 80651e2: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
 80651e6: bf00         	nop

080651e8 <__localeconv_l>:
 80651e8: 30f0         	adds	r0, #0xf0
 80651ea: 4770         	bx	lr

080651ec <_localeconv_r>:
 80651ec: 4800         	ldr	r0, [pc, #0x0]          @ 0x80651f0 <_localeconv_r+0x4>
 80651ee: 4770         	bx	lr

080651f0 <$d>:
 80651f0: c0 2c 00 20  	.word	0x20002cc0

080651f4 <localeconv>:
 80651f4: 4800         	ldr	r0, [pc, #0x0]          @ 0x80651f8 <localeconv+0x4>
 80651f6: 4770         	bx	lr

080651f8 <$d>:
 80651f8: c0 2c 00 20  	.word	0x20002cc0

080651fc <__smakebuf_r>:
 80651fc: 898b         	ldrh	r3, [r1, #0xc]
 80651fe: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8065202: 460c         	mov	r4, r1
 8065204: 0799         	lsls	r1, r3, #0x1e
 8065206: b096         	sub	sp, #0x58
 8065208: d508         	bpl	0x806521c <__smakebuf_r+0x20> @ imm = #0x10
 806520a: f104 0343    	add.w	r3, r4, #0x43
 806520e: 2201         	movs	r2, #0x1
 8065210: 6023         	str	r3, [r4]
 8065212: e9c4 3204    	strd	r3, r2, [r4, #16]
 8065216: b016         	add	sp, #0x58
 8065218: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 806521c: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 8065220: 4606         	mov	r6, r0
 8065222: 2900         	cmp	r1, #0x0
 8065224: db27         	blt	0x8065276 <__smakebuf_r+0x7a> @ imm = #0x4e
 8065226: 466a         	mov	r2, sp
 8065228: f002 f92e    	bl	0x8067488 <_fstat_r>    @ imm = #0x225c
 806522c: 2800         	cmp	r0, #0x0
 806522e: db21         	blt	0x8065274 <__smakebuf_r+0x78> @ imm = #0x42
 8065230: 9d01         	ldr	r5, [sp, #0x4]
 8065232: f44f 6880    	mov.w	r8, #0x400
 8065236: f44f 6700    	mov.w	r7, #0x800
 806523a: f405 4570    	and	r5, r5, #0xf000
 806523e: f5a5 5500    	sub.w	r5, r5, #0x2000
 8065242: fab5 f585    	clz	r5, r5
 8065246: 096d         	lsrs	r5, r5, #0x5
 8065248: 4641         	mov	r1, r8
 806524a: 4630         	mov	r0, r6
 806524c: f000 f876    	bl	0x806533c <_malloc_r>   @ imm = #0xec
 8065250: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8065254: b1f0         	cbz	r0, 0x8065294 <__smakebuf_r+0x98> @ imm = #0x3c
 8065256: f043 0380    	orr	r3, r3, #0x80
 806525a: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x80652d8 <__smakebuf_r+0xdc>
 806525c: 63f2         	str	r2, [r6, #0x3c]
 806525e: f8c4 8014    	str.w	r8, [r4, #0x14]
 8065262: 81a3         	strh	r3, [r4, #0xc]
 8065264: 6020         	str	r0, [r4]
 8065266: 6120         	str	r0, [r4, #0x10]
 8065268: bb35         	cbnz	r5, 0x80652b8 <__smakebuf_r+0xbc> @ imm = #0x4c
 806526a: 433b         	orrs	r3, r7
 806526c: 81a3         	strh	r3, [r4, #0xc]
 806526e: b016         	add	sp, #0x58
 8065270: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8065274: 89a3         	ldrh	r3, [r4, #0xc]
 8065276: f013 0580    	ands	r5, r3, #0x80
 806527a: d019         	beq	0x80652b0 <__smakebuf_r+0xb4> @ imm = #0x32
 806527c: f04f 0840    	mov.w	r8, #0x40
 8065280: 2500         	movs	r5, #0x0
 8065282: 4630         	mov	r0, r6
 8065284: 4641         	mov	r1, r8
 8065286: 462f         	mov	r7, r5
 8065288: f000 f858    	bl	0x806533c <_malloc_r>   @ imm = #0xb0
 806528c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8065290: 2800         	cmp	r0, #0x0
 8065292: d1e0         	bne	0x8065256 <__smakebuf_r+0x5a> @ imm = #-0x40
 8065294: 059a         	lsls	r2, r3, #0x16
 8065296: d4be         	bmi	0x8065216 <__smakebuf_r+0x1a> @ imm = #-0x84
 8065298: f023 0303    	bic	r3, r3, #0x3
 806529c: f104 0243    	add.w	r2, r4, #0x43
 80652a0: 2101         	movs	r1, #0x1
 80652a2: f043 0302    	orr	r3, r3, #0x2
 80652a6: 6022         	str	r2, [r4]
 80652a8: e9c4 2104    	strd	r2, r1, [r4, #16]
 80652ac: 81a3         	strh	r3, [r4, #0xc]
 80652ae: e7b2         	b	0x8065216 <__smakebuf_r+0x1a> @ imm = #-0x9c
 80652b0: f44f 6880    	mov.w	r8, #0x400
 80652b4: 462f         	mov	r7, r5
 80652b6: e7c7         	b	0x8065248 <__smakebuf_r+0x4c> @ imm = #-0x72
 80652b8: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 80652bc: 4630         	mov	r0, r6
 80652be: f002 fa6f    	bl	0x80677a0 <_isatty_r>   @ imm = #0x24de
 80652c2: b910         	cbnz	r0, 0x80652ca <__smakebuf_r+0xce> @ imm = #0x4
 80652c4: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 80652c8: e7cf         	b	0x806526a <__smakebuf_r+0x6e> @ imm = #-0x62
 80652ca: 89a3         	ldrh	r3, [r4, #0xc]
 80652cc: f023 0303    	bic	r3, r3, #0x3
 80652d0: f043 0301    	orr	r3, r3, #0x1
 80652d4: b21b         	sxth	r3, r3
 80652d6: e7c8         	b	0x806526a <__smakebuf_r+0x6e> @ imm = #-0x70

080652d8 <$d>:
 80652d8: a5 4c 06 08  	.word	0x08064ca5

080652dc <__swhatbuf_r>:
 80652dc: b570         	push	{r4, r5, r6, lr}
 80652de: 460c         	mov	r4, r1
 80652e0: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 80652e4: b096         	sub	sp, #0x58
 80652e6: 4615         	mov	r5, r2
 80652e8: 2900         	cmp	r1, #0x0
 80652ea: 461e         	mov	r6, r3
 80652ec: db14         	blt	0x8065318 <__swhatbuf_r+0x3c> @ imm = #0x28
 80652ee: 466a         	mov	r2, sp
 80652f0: f002 f8ca    	bl	0x8067488 <_fstat_r>    @ imm = #0x2194
 80652f4: 2800         	cmp	r0, #0x0
 80652f6: db0f         	blt	0x8065318 <__swhatbuf_r+0x3c> @ imm = #0x1e
 80652f8: 9a01         	ldr	r2, [sp, #0x4]
 80652fa: f44f 6380    	mov.w	r3, #0x400
 80652fe: f44f 6000    	mov.w	r0, #0x800
 8065302: f402 4270    	and	r2, r2, #0xf000
 8065306: f5a2 5200    	sub.w	r2, r2, #0x2000
 806530a: fab2 f282    	clz	r2, r2
 806530e: 0952         	lsrs	r2, r2, #0x5
 8065310: 6032         	str	r2, [r6]
 8065312: 602b         	str	r3, [r5]
 8065314: b016         	add	sp, #0x58
 8065316: bd70         	pop	{r4, r5, r6, pc}
 8065318: f9b4 100c    	ldrsh.w	r1, [r4, #0xc]
 806531c: 2300         	movs	r3, #0x0
 806531e: f011 0080    	ands	r0, r1, #0x80
 8065322: 6033         	str	r3, [r6]
 8065324: d004         	beq	0x8065330 <__swhatbuf_r+0x54> @ imm = #0x8
 8065326: 2240         	movs	r2, #0x40
 8065328: 4618         	mov	r0, r3
 806532a: 602a         	str	r2, [r5]
 806532c: b016         	add	sp, #0x58
 806532e: bd70         	pop	{r4, r5, r6, pc}
 8065330: f44f 6380    	mov.w	r3, #0x400
 8065334: 602b         	str	r3, [r5]
 8065336: b016         	add	sp, #0x58
 8065338: bd70         	pop	{r4, r5, r6, pc}
 806533a: bf00         	nop

0806533c <_malloc_r>:
 806533c: f101 030b    	add.w	r3, r1, #0xb
 8065340: 2b16         	cmp	r3, #0x16
 8065342: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8065346: 4605         	mov	r5, r0
 8065348: b083         	sub	sp, #0xc
 806534a: d824         	bhi	0x8065396 <_malloc_r+0x5a> @ imm = #0x48
 806534c: 2910         	cmp	r1, #0x10
 806534e: f200 80fc    	bhi.w	0x806554a <_malloc_r+0x20e> @ imm = #0x1f8
 8065352: f000 fae7    	bl	0x8065924 <__malloc_lock> @ imm = #0x5ce
 8065356: 2410         	movs	r4, #0x10
 8065358: 2218         	movs	r2, #0x18
 806535a: 2002         	movs	r0, #0x2
 806535c: 4ec4         	ldr	r6, [pc, #0x310]        @ 0x8065670 <_malloc_r+0x334>
 806535e: 4432         	add	r2, r6
 8065360: 6853         	ldr	r3, [r2, #0x4]
 8065362: f1a2 0108    	sub.w	r1, r2, #0x8
 8065366: 428b         	cmp	r3, r1
 8065368: f000 80f6    	beq.w	0x8065558 <_malloc_r+0x21c> @ imm = #0x1ec
 806536c: 685a         	ldr	r2, [r3, #0x4]
 806536e: 4628         	mov	r0, r5
 8065370: f022 0203    	bic	r2, r2, #0x3
 8065374: e9d3 4102    	ldrd	r4, r1, [r3, #8]
 8065378: 441a         	add	r2, r3
 806537a: 60e1         	str	r1, [r4, #0xc]
 806537c: 608c         	str	r4, [r1, #0x8]
 806537e: f103 0408    	add.w	r4, r3, #0x8
 8065382: 6853         	ldr	r3, [r2, #0x4]
 8065384: f043 0301    	orr	r3, r3, #0x1
 8065388: 6053         	str	r3, [r2, #0x4]
 806538a: f000 facd    	bl	0x8065928 <__malloc_unlock> @ imm = #0x59a
 806538e: 4620         	mov	r0, r4
 8065390: b003         	add	sp, #0xc
 8065392: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8065396: 2b00         	cmp	r3, #0x0
 8065398: f023 0407    	bic	r4, r3, #0x7
 806539c: f2c0 80d5    	blt.w	0x806554a <_malloc_r+0x20e> @ imm = #0x1aa
 80653a0: 42a1         	cmp	r1, r4
 80653a2: f200 80d2    	bhi.w	0x806554a <_malloc_r+0x20e> @ imm = #0x1a4
 80653a6: f000 fabd    	bl	0x8065924 <__malloc_lock> @ imm = #0x57a
 80653aa: f5b4 7ffc    	cmp.w	r4, #0x1f8
 80653ae: f0c0 81c2    	blo.w	0x8065736 <_malloc_r+0x3fa> @ imm = #0x384
 80653b2: 0a63         	lsrs	r3, r4, #0x9
 80653b4: f000 813a    	beq.w	0x806562c <_malloc_r+0x2f0> @ imm = #0x274
 80653b8: 2b04         	cmp	r3, #0x4
 80653ba: f200 8198    	bhi.w	0x80656ee <_malloc_r+0x3b2> @ imm = #0x330
 80653be: 09a3         	lsrs	r3, r4, #0x6
 80653c0: f103 0039    	add.w	r0, r3, #0x39
 80653c4: f103 0738    	add.w	r7, r3, #0x38
 80653c8: 00c3         	lsls	r3, r0, #0x3
 80653ca: 4ea9         	ldr	r6, [pc, #0x2a4]        @ 0x8065670 <_malloc_r+0x334>
 80653cc: 4433         	add	r3, r6
 80653ce: f1a3 0c08    	sub.w	r12, r3, #0x8
 80653d2: 685b         	ldr	r3, [r3, #0x4]
 80653d4: 459c         	cmp	r12, r3
 80653d6: d107         	bne	0x80653e8 <_malloc_r+0xac> @ imm = #0xe
 80653d8: e0c3         	b	0x8065562 <_malloc_r+0x226> @ imm = #0x186
 80653da: 2900         	cmp	r1, #0x0
 80653dc: f280 8150    	bge.w	0x8065680 <_malloc_r+0x344> @ imm = #0x2a0
 80653e0: 68db         	ldr	r3, [r3, #0xc]
 80653e2: 459c         	cmp	r12, r3
 80653e4: f000 80bd    	beq.w	0x8065562 <_malloc_r+0x226> @ imm = #0x17a
 80653e8: 685a         	ldr	r2, [r3, #0x4]
 80653ea: f022 0203    	bic	r2, r2, #0x3
 80653ee: 1b11         	subs	r1, r2, r4
 80653f0: 290f         	cmp	r1, #0xf
 80653f2: ddf2         	ble	0x80653da <_malloc_r+0x9e> @ imm = #-0x1c
 80653f4: 6933         	ldr	r3, [r6, #0x10]
 80653f6: 4638         	mov	r0, r7
 80653f8: f8df e278    	ldr.w	lr, [pc, #0x278]        @ 0x8065674 <_malloc_r+0x338>
 80653fc: 4573         	cmp	r3, lr
 80653fe: f040 80b6    	bne.w	0x806556e <_malloc_r+0x232> @ imm = #0x16c
 8065402: 1083         	asrs	r3, r0, #0x2
 8065404: 2101         	movs	r1, #0x1
 8065406: 6872         	ldr	r2, [r6, #0x4]
 8065408: 4099         	lsls	r1, r3
 806540a: 4291         	cmp	r1, r2
 806540c: f240 80d8    	bls.w	0x80655c0 <_malloc_r+0x284> @ imm = #0x1b0
 8065410: 68b7         	ldr	r7, [r6, #0x8]
 8065412: 687b         	ldr	r3, [r7, #0x4]
 8065414: f023 0903    	bic	r9, r3, #0x3
 8065418: eba9 0304    	sub.w	r3, r9, r4
 806541c: 2b0f         	cmp	r3, #0xf
 806541e: dd02         	ble	0x8065426 <_malloc_r+0xea> @ imm = #0x4
 8065420: 454c         	cmp	r4, r9
 8065422: f240 8113    	bls.w	0x806564c <_malloc_r+0x310> @ imm = #0x226
 8065426: f8df a250    	ldr.w	r10, [pc, #0x250]       @ 0x8065678 <_malloc_r+0x33c>
 806542a: eb07 0309    	add.w	r3, r7, r9
 806542e: f8d6 1408    	ldr.w	r1, [r6, #0x408]
 8065432: f8da 2000    	ldr.w	r2, [r10]
 8065436: 3101         	adds	r1, #0x1
 8065438: 4422         	add	r2, r4
 806543a: f000 81ca    	beq.w	0x80657d2 <_malloc_r+0x496> @ imm = #0x394
 806543e: f241 010f    	movw	r1, #0x100f
 8065442: f8df 8238    	ldr.w	r8, [pc, #0x238]        @ 0x806567c <_malloc_r+0x340>
 8065446: 4411         	add	r1, r2
 8065448: ea01 0808    	and.w	r8, r1, r8
 806544c: 4641         	mov	r1, r8
 806544e: 4628         	mov	r0, r5
 8065450: 9300         	str	r3, [sp]
 8065452: f000 ffa3    	bl	0x806639c <_sbrk_r>     @ imm = #0xf46
 8065456: f1b0 3fff    	cmp.w	r0, #0xffffffff
 806545a: 4683         	mov	r11, r0
 806545c: 9b00         	ldr	r3, [sp]
 806545e: f000 81a7    	beq.w	0x80657b0 <_malloc_r+0x474> @ imm = #0x34e
 8065462: 42b7         	cmp	r7, r6
 8065464: d002         	beq	0x806546c <_malloc_r+0x130> @ imm = #0x4
 8065466: 4283         	cmp	r3, r0
 8065468: f200 81a2    	bhi.w	0x80657b0 <_malloc_r+0x474> @ imm = #0x344
 806546c: f8da 1004    	ldr.w	r1, [r10, #0x4]
 8065470: 455b         	cmp	r3, r11
 8065472: 4441         	add	r1, r8
 8065474: f8ca 1004    	str.w	r1, [r10, #0x4]
 8065478: f000 819d    	beq.w	0x80657b6 <_malloc_r+0x47a> @ imm = #0x33a
 806547c: f8d6 2408    	ldr.w	r2, [r6, #0x408]
 8065480: 3201         	adds	r2, #0x1
 8065482: f000 81a3    	beq.w	0x80657cc <_malloc_r+0x490> @ imm = #0x346
 8065486: ebab 0303    	sub.w	r3, r11, r3
 806548a: 4419         	add	r1, r3
 806548c: f8ca 1004    	str.w	r1, [r10, #0x4]
 8065490: f01b 0307    	ands	r3, r11, #0x7
 8065494: f000 81a7    	beq.w	0x80657e6 <_malloc_r+0x4aa> @ imm = #0x34e
 8065498: f1c3 0208    	rsb.w	r2, r3, #0x8
 806549c: 4628         	mov	r0, r5
 806549e: 9300         	str	r3, [sp]
 80654a0: 4493         	add	r11, r2
 80654a2: f241 0208    	movw	r2, #0x1008
 80654a6: 44d8         	add	r8, r11
 80654a8: 1ad2         	subs	r2, r2, r3
 80654aa: eba2 0108    	sub.w	r1, r2, r8
 80654ae: f3c1 010b    	ubfx	r1, r1, #0x0, #0xc
 80654b2: 9101         	str	r1, [sp, #0x4]
 80654b4: f000 ff72    	bl	0x806639c <_sbrk_r>     @ imm = #0xee4
 80654b8: 1c42         	adds	r2, r0, #0x1
 80654ba: 9b00         	ldr	r3, [sp]
 80654bc: f000 81d9    	beq.w	0x8065872 <_malloc_r+0x536> @ imm = #0x3b2
 80654c0: eba0 000b    	sub.w	r0, r0, r11
 80654c4: 9901         	ldr	r1, [sp, #0x4]
 80654c6: eb00 0801    	add.w	r8, r0, r1
 80654ca: f8da 2004    	ldr.w	r2, [r10, #0x4]
 80654ce: f048 0301    	orr	r3, r8, #0x1
 80654d2: 42b7         	cmp	r7, r6
 80654d4: f8c6 b008    	str.w	r11, [r6, #0x8]
 80654d8: 4411         	add	r1, r2
 80654da: f8cb 3004    	str.w	r3, [r11, #0x4]
 80654de: f8ca 1004    	str.w	r1, [r10, #0x4]
 80654e2: f000 81a2    	beq.w	0x806582a <_malloc_r+0x4ee> @ imm = #0x344
 80654e6: f1b9 0f0f    	cmp.w	r9, #0xf
 80654ea: f240 81a0    	bls.w	0x806582e <_malloc_r+0x4f2> @ imm = #0x340
 80654ee: 687b         	ldr	r3, [r7, #0x4]
 80654f0: f1a9 020c    	sub.w	r2, r9, #0xc
 80654f4: 2005         	movs	r0, #0x5
 80654f6: f022 0207    	bic	r2, r2, #0x7
 80654fa: f003 0301    	and	r3, r3, #0x1
 80654fe: 4313         	orrs	r3, r2
 8065500: 2a0f         	cmp	r2, #0xf
 8065502: 607b         	str	r3, [r7, #0x4]
 8065504: eb07 0302    	add.w	r3, r7, r2
 8065508: e9c3 0001    	strd	r0, r0, [r3, #4]
 806550c: f200 81a7    	bhi.w	0x806585e <_malloc_r+0x522> @ imm = #0x34e
 8065510: f8db 3004    	ldr.w	r3, [r11, #0x4]
 8065514: 465f         	mov	r7, r11
 8065516: f8da 202c    	ldr.w	r2, [r10, #0x2c]
 806551a: 428a         	cmp	r2, r1
 806551c: f8da 2030    	ldr.w	r2, [r10, #0x30]
 8065520: bf38         	it	lo
 8065522: f8ca 102c    	strlo.w	r1, [r10, #0x2c]
 8065526: 428a         	cmp	r2, r1
 8065528: bf38         	it	lo
 806552a: f8ca 1030    	strlo.w	r1, [r10, #0x30]
 806552e: f023 0803    	bic	r8, r3, #0x3
 8065532: 4544         	cmp	r4, r8
 8065534: eba8 0304    	sub.w	r3, r8, r4
 8065538: d802         	bhi	0x8065540 <_malloc_r+0x204> @ imm = #0x4
 806553a: 2b0f         	cmp	r3, #0xf
 806553c: f300 8086    	bgt.w	0x806564c <_malloc_r+0x310> @ imm = #0x10c
 8065540: 4628         	mov	r0, r5
 8065542: 2400         	movs	r4, #0x0
 8065544: f000 f9f0    	bl	0x8065928 <__malloc_unlock> @ imm = #0x3e0
 8065548: e721         	b	0x806538e <_malloc_r+0x52> @ imm = #-0x1be
 806554a: 2400         	movs	r4, #0x0
 806554c: 230c         	movs	r3, #0xc
 806554e: 4620         	mov	r0, r4
 8065550: 602b         	str	r3, [r5]
 8065552: b003         	add	sp, #0xc
 8065554: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8065558: 68d3         	ldr	r3, [r2, #0xc]
 806555a: 429a         	cmp	r2, r3
 806555c: f47f af06    	bne.w	0x806536c <_malloc_r+0x30> @ imm = #-0x1f4
 8065560: 3002         	adds	r0, #0x2
 8065562: 6933         	ldr	r3, [r6, #0x10]
 8065564: f8df e10c    	ldr.w	lr, [pc, #0x10c]        @ 0x8065674 <_malloc_r+0x338>
 8065568: 4573         	cmp	r3, lr
 806556a: f43f af4a    	beq.w	0x8065402 <_malloc_r+0xc6> @ imm = #-0x16c
 806556e: 6859         	ldr	r1, [r3, #0x4]
 8065570: f021 0103    	bic	r1, r1, #0x3
 8065574: 1b0a         	subs	r2, r1, r4
 8065576: 2a0f         	cmp	r2, #0xf
 8065578: f300 80e1    	bgt.w	0x806573e <_malloc_r+0x402> @ imm = #0x1c2
 806557c: 2a00         	cmp	r2, #0x0
 806557e: e9c6 ee04    	strd	lr, lr, [r6, #16]
 8065582: da58         	bge	0x8065636 <_malloc_r+0x2fa> @ imm = #0xb0
 8065584: f5b1 7f00    	cmp.w	r1, #0x200
 8065588: f080 808c    	bhs.w	0x80656a4 <_malloc_r+0x368> @ imm = #0x118
 806558c: ea4f 0cd1    	lsr.w	r12, r1, #0x3
 8065590: 2201         	movs	r2, #0x1
 8065592: 0949         	lsrs	r1, r1, #0x5
 8065594: f10c 0c01    	add.w	r12, r12, #0x1
 8065598: 408a         	lsls	r2, r1
 806559a: 6871         	ldr	r1, [r6, #0x4]
 806559c: f856 703c    	ldr.w	r7, [r6, r12, lsl #3]
 80655a0: 430a         	orrs	r2, r1
 80655a2: eb06 01cc    	add.w	r1, r6, r12, lsl #3
 80655a6: 3908         	subs	r1, #0x8
 80655a8: 6072         	str	r2, [r6, #0x4]
 80655aa: e9c3 7102    	strd	r7, r1, [r3, #8]
 80655ae: f846 303c    	str.w	r3, [r6, r12, lsl #3]
 80655b2: 60fb         	str	r3, [r7, #0xc]
 80655b4: 1083         	asrs	r3, r0, #0x2
 80655b6: 2101         	movs	r1, #0x1
 80655b8: 4099         	lsls	r1, r3
 80655ba: 4291         	cmp	r1, r2
 80655bc: f63f af28    	bhi.w	0x8065410 <_malloc_r+0xd4> @ imm = #-0x1b0
 80655c0: 4211         	tst	r1, r2
 80655c2: d105         	bne	0x80655d0 <_malloc_r+0x294> @ imm = #0xa
 80655c4: f020 0003    	bic	r0, r0, #0x3
 80655c8: 0049         	lsls	r1, r1, #0x1
 80655ca: 3004         	adds	r0, #0x4
 80655cc: 4211         	tst	r1, r2
 80655ce: d0fb         	beq	0x80655c8 <_malloc_r+0x28c> @ imm = #-0xa
 80655d0: eb06 09c0    	add.w	r9, r6, r0, lsl #3
 80655d4: 4680         	mov	r8, r0
 80655d6: 46cc         	mov	r12, r9
 80655d8: f8dc 700c    	ldr.w	r7, [r12, #0xc]
 80655dc: 45bc         	cmp	r12, r7
 80655de: d107         	bne	0x80655f0 <_malloc_r+0x2b4> @ imm = #0xe
 80655e0: e091         	b	0x8065706 <_malloc_r+0x3ca> @ imm = #0x122
 80655e2: 2b00         	cmp	r3, #0x0
 80655e4: f280 8098    	bge.w	0x8065718 <_malloc_r+0x3dc> @ imm = #0x130
 80655e8: 68ff         	ldr	r7, [r7, #0xc]
 80655ea: 45bc         	cmp	r12, r7
 80655ec: f000 808b    	beq.w	0x8065706 <_malloc_r+0x3ca> @ imm = #0x116
 80655f0: 687a         	ldr	r2, [r7, #0x4]
 80655f2: f022 0203    	bic	r2, r2, #0x3
 80655f6: 1b13         	subs	r3, r2, r4
 80655f8: 2b0f         	cmp	r3, #0xf
 80655fa: ddf2         	ble	0x80655e2 <_malloc_r+0x2a6> @ imm = #-0x1c
 80655fc: 1939         	adds	r1, r7, r4
 80655fe: f044 0401    	orr	r4, r4, #0x1
 8065602: 4628         	mov	r0, r5
 8065604: 607c         	str	r4, [r7, #0x4]
 8065606: f043 0401    	orr	r4, r3, #0x1
 806560a: e9d7 c502    	ldrd	r12, r5, [r7, #8]
 806560e: f8cc 500c    	str.w	r5, [r12, #0xc]
 8065612: f8c5 c008    	str.w	r12, [r5, #0x8]
 8065616: e9c6 1104    	strd	r1, r1, [r6, #16]
 806561a: 604c         	str	r4, [r1, #0x4]
 806561c: f107 0408    	add.w	r4, r7, #0x8
 8065620: e9c1 ee02    	strd	lr, lr, [r1, #8]
 8065624: 50bb         	str	r3, [r7, r2]
 8065626: f000 f97f    	bl	0x8065928 <__malloc_unlock> @ imm = #0x2fe
 806562a: e6b0         	b	0x806538e <_malloc_r+0x52> @ imm = #-0x2a0
 806562c: f44f 7300    	mov.w	r3, #0x200
 8065630: 2040         	movs	r0, #0x40
 8065632: 273f         	movs	r7, #0x3f
 8065634: e6c9         	b	0x80653ca <_malloc_r+0x8e> @ imm = #-0x26e
 8065636: 4419         	add	r1, r3
 8065638: f103 0408    	add.w	r4, r3, #0x8
 806563c: 4628         	mov	r0, r5
 806563e: 684b         	ldr	r3, [r1, #0x4]
 8065640: f043 0301    	orr	r3, r3, #0x1
 8065644: 604b         	str	r3, [r1, #0x4]
 8065646: f000 f96f    	bl	0x8065928 <__malloc_unlock> @ imm = #0x2de
 806564a: e6a0         	b	0x806538e <_malloc_r+0x52> @ imm = #-0x2c0
 806564c: 193a         	adds	r2, r7, r4
 806564e: f044 0401    	orr	r4, r4, #0x1
 8065652: f043 0301    	orr	r3, r3, #0x1
 8065656: 4628         	mov	r0, r5
 8065658: 607c         	str	r4, [r7, #0x4]
 806565a: f107 0408    	add.w	r4, r7, #0x8
 806565e: 60b2         	str	r2, [r6, #0x8]
 8065660: 6053         	str	r3, [r2, #0x4]
 8065662: f000 f961    	bl	0x8065928 <__malloc_unlock> @ imm = #0x2c2
 8065666: 4620         	mov	r0, r4
 8065668: b003         	add	sp, #0xc
 806566a: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806566e: bf00         	nop

08065670 <$d>:
 8065670: c0 27 00 20  	.word	0x200027c0
 8065674: c8 27 00 20  	.word	0x200027c8
 8065678: 68 3f 00 20  	.word	0x20003f68
 806567c: 00 f0 ff ff  	.word	0xfffff000

08065680 <$t>:
 8065680: 441a         	add	r2, r3
 8065682: f103 0408    	add.w	r4, r3, #0x8
 8065686: 4628         	mov	r0, r5
 8065688: e9d3 6102    	ldrd	r6, r1, [r3, #8]
 806568c: 6853         	ldr	r3, [r2, #0x4]
 806568e: 60f1         	str	r1, [r6, #0xc]
 8065690: f043 0301    	orr	r3, r3, #0x1
 8065694: 608e         	str	r6, [r1, #0x8]
 8065696: 6053         	str	r3, [r2, #0x4]
 8065698: f000 f946    	bl	0x8065928 <__malloc_unlock> @ imm = #0x28c
 806569c: 4620         	mov	r0, r4
 806569e: b003         	add	sp, #0xc
 80656a0: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80656a4: f5b1 6f20    	cmp.w	r1, #0xa00
 80656a8: ea4f 2251    	lsr.w	r2, r1, #0x9
 80656ac: d359         	blo	0x8065762 <_malloc_r+0x426> @ imm = #0xb2
 80656ae: 2a14         	cmp	r2, #0x14
 80656b0: f200 80a9    	bhi.w	0x8065806 <_malloc_r+0x4ca> @ imm = #0x152
 80656b4: f102 075c    	add.w	r7, r2, #0x5c
 80656b8: 325b         	adds	r2, #0x5b
 80656ba: 00ff         	lsls	r7, r7, #0x3
 80656bc: eb06 0c07    	add.w	r12, r6, r7
 80656c0: 59f7         	ldr	r7, [r6, r7]
 80656c2: f1ac 0c08    	sub.w	r12, r12, #0x8
 80656c6: 45bc         	cmp	r12, r7
 80656c8: f000 8086    	beq.w	0x80657d8 <_malloc_r+0x49c> @ imm = #0x10c
 80656cc: 687a         	ldr	r2, [r7, #0x4]
 80656ce: f022 0203    	bic	r2, r2, #0x3
 80656d2: 428a         	cmp	r2, r1
 80656d4: d902         	bls	0x80656dc <_malloc_r+0x3a0> @ imm = #0x4
 80656d6: 68bf         	ldr	r7, [r7, #0x8]
 80656d8: 45bc         	cmp	r12, r7
 80656da: d1f7         	bne	0x80656cc <_malloc_r+0x390> @ imm = #-0x12
 80656dc: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80656e0: 6872         	ldr	r2, [r6, #0x4]
 80656e2: e9c3 7c02    	strd	r7, r12, [r3, #8]
 80656e6: f8cc 3008    	str.w	r3, [r12, #0x8]
 80656ea: 60fb         	str	r3, [r7, #0xc]
 80656ec: e762         	b	0x80655b4 <_malloc_r+0x278> @ imm = #-0x13c
 80656ee: 2b14         	cmp	r3, #0x14
 80656f0: d93d         	bls	0x806576e <_malloc_r+0x432> @ imm = #0x7a
 80656f2: 2b54         	cmp	r3, #0x54
 80656f4: f200 808f    	bhi.w	0x8065816 <_malloc_r+0x4da> @ imm = #0x11e
 80656f8: 0b23         	lsrs	r3, r4, #0xc
 80656fa: f103 006f    	add.w	r0, r3, #0x6f
 80656fe: f103 076e    	add.w	r7, r3, #0x6e
 8065702: 00c3         	lsls	r3, r0, #0x3
 8065704: e661         	b	0x80653ca <_malloc_r+0x8e> @ imm = #-0x33e
 8065706: f108 0801    	add.w	r8, r8, #0x1
 806570a: f10c 0c08    	add.w	r12, r12, #0x8
 806570e: f018 0f03    	tst.w	r8, #0x3
 8065712: f47f af61    	bne.w	0x80655d8 <_malloc_r+0x29c> @ imm = #-0x13e
 8065716: e035         	b	0x8065784 <_malloc_r+0x448> @ imm = #0x6a
 8065718: 443a         	add	r2, r7
 806571a: 463c         	mov	r4, r7
 806571c: 68f9         	ldr	r1, [r7, #0xc]
 806571e: 4628         	mov	r0, r5
 8065720: 6853         	ldr	r3, [r2, #0x4]
 8065722: f043 0301    	orr	r3, r3, #0x1
 8065726: 6053         	str	r3, [r2, #0x4]
 8065728: f854 3f08    	ldr	r3, [r4, #8]!
 806572c: 60d9         	str	r1, [r3, #0xc]
 806572e: 608b         	str	r3, [r1, #0x8]
 8065730: f000 f8fa    	bl	0x8065928 <__malloc_unlock> @ imm = #0x1f4
 8065734: e62b         	b	0x806538e <_malloc_r+0x52> @ imm = #-0x3aa
 8065736: 08e0         	lsrs	r0, r4, #0x3
 8065738: f104 0208    	add.w	r2, r4, #0x8
 806573c: e60e         	b	0x806535c <_malloc_r+0x20> @ imm = #-0x3e4
 806573e: 4628         	mov	r0, r5
 8065740: 191d         	adds	r5, r3, r4
 8065742: f044 0401    	orr	r4, r4, #0x1
 8065746: 605c         	str	r4, [r3, #0x4]
 8065748: f042 0401    	orr	r4, r2, #0x1
 806574c: e9c6 5504    	strd	r5, r5, [r6, #16]
 8065750: 606c         	str	r4, [r5, #0x4]
 8065752: f103 0408    	add.w	r4, r3, #0x8
 8065756: e9c5 ee02    	strd	lr, lr, [r5, #8]
 806575a: 505a         	str	r2, [r3, r1]
 806575c: f000 f8e4    	bl	0x8065928 <__malloc_unlock> @ imm = #0x1c8
 8065760: e615         	b	0x806538e <_malloc_r+0x52> @ imm = #-0x3d6
 8065762: 098a         	lsrs	r2, r1, #0x6
 8065764: f102 0739    	add.w	r7, r2, #0x39
 8065768: 3238         	adds	r2, #0x38
 806576a: 00ff         	lsls	r7, r7, #0x3
 806576c: e7a6         	b	0x80656bc <_malloc_r+0x380> @ imm = #-0xb4
 806576e: f103 005c    	add.w	r0, r3, #0x5c
 8065772: f103 075b    	add.w	r7, r3, #0x5b
 8065776: 00c3         	lsls	r3, r0, #0x3
 8065778: e627         	b	0x80653ca <_malloc_r+0x8e> @ imm = #-0x3b2
 806577a: f859 3908    	ldr	r3, [r9], #-8
 806577e: 454b         	cmp	r3, r9
 8065780: f040 8090    	bne.w	0x80658a4 <_malloc_r+0x568> @ imm = #0x120
 8065784: f010 0f03    	tst.w	r0, #0x3
 8065788: f100 30ff    	add.w	r0, r0, #0xffffffff
 806578c: d1f5         	bne	0x806577a <_malloc_r+0x43e> @ imm = #-0x16
 806578e: 6873         	ldr	r3, [r6, #0x4]
 8065790: ea23 0301    	bic.w	r3, r3, r1
 8065794: 6073         	str	r3, [r6, #0x4]
 8065796: 0049         	lsls	r1, r1, #0x1
 8065798: f43f ae3a    	beq.w	0x8065410 <_malloc_r+0xd4> @ imm = #-0x38c
 806579c: 4299         	cmp	r1, r3
 806579e: d903         	bls	0x80657a8 <_malloc_r+0x46c> @ imm = #0x6
 80657a0: e636         	b	0x8065410 <_malloc_r+0xd4> @ imm = #-0x394
 80657a2: 0049         	lsls	r1, r1, #0x1
 80657a4: f108 0804    	add.w	r8, r8, #0x4
 80657a8: 4219         	tst	r1, r3
 80657aa: d0fa         	beq	0x80657a2 <_malloc_r+0x466> @ imm = #-0xc
 80657ac: 4640         	mov	r0, r8
 80657ae: e70f         	b	0x80655d0 <_malloc_r+0x294> @ imm = #-0x1e2
 80657b0: 68b7         	ldr	r7, [r6, #0x8]
 80657b2: 687b         	ldr	r3, [r7, #0x4]
 80657b4: e6bb         	b	0x806552e <_malloc_r+0x1f2> @ imm = #-0x28a
 80657b6: f3c3 020b    	ubfx	r2, r3, #0x0, #0xc
 80657ba: 2a00         	cmp	r2, #0x0
 80657bc: f47f ae5e    	bne.w	0x806547c <_malloc_r+0x140> @ imm = #-0x344
 80657c0: 44c8         	add	r8, r9
 80657c2: 68b7         	ldr	r7, [r6, #0x8]
 80657c4: f048 0301    	orr	r3, r8, #0x1
 80657c8: 607b         	str	r3, [r7, #0x4]
 80657ca: e6a4         	b	0x8065516 <_malloc_r+0x1da> @ imm = #-0x2b8
 80657cc: f8c6 b408    	str.w	r11, [r6, #0x408]
 80657d0: e65e         	b	0x8065490 <_malloc_r+0x154> @ imm = #-0x344
 80657d2: f102 0810    	add.w	r8, r2, #0x10
 80657d6: e639         	b	0x806544c <_malloc_r+0x110> @ imm = #-0x38e
 80657d8: 1092         	asrs	r2, r2, #0x2
 80657da: 2101         	movs	r1, #0x1
 80657dc: 4091         	lsls	r1, r2
 80657de: 6872         	ldr	r2, [r6, #0x4]
 80657e0: 430a         	orrs	r2, r1
 80657e2: 6072         	str	r2, [r6, #0x4]
 80657e4: e77d         	b	0x80656e2 <_malloc_r+0x3a6> @ imm = #-0x106
 80657e6: eb0b 0108    	add.w	r1, r11, r8
 80657ea: 4628         	mov	r0, r5
 80657ec: 9300         	str	r3, [sp]
 80657ee: 4249         	rsbs	r1, r1, #0
 80657f0: f3c1 010b    	ubfx	r1, r1, #0x0, #0xc
 80657f4: 9101         	str	r1, [sp, #0x4]
 80657f6: f000 fdd1    	bl	0x806639c <_sbrk_r>     @ imm = #0xba2
 80657fa: 1c43         	adds	r3, r0, #0x1
 80657fc: 9b00         	ldr	r3, [sp]
 80657fe: f47f ae5f    	bne.w	0x80654c0 <_malloc_r+0x184> @ imm = #-0x342
 8065802: 4619         	mov	r1, r3
 8065804: e661         	b	0x80654ca <_malloc_r+0x18e> @ imm = #-0x33e
 8065806: 2a54         	cmp	r2, #0x54
 8065808: d815         	bhi	0x8065836 <_malloc_r+0x4fa> @ imm = #0x2a
 806580a: 0b0a         	lsrs	r2, r1, #0xc
 806580c: f102 076f    	add.w	r7, r2, #0x6f
 8065810: 326e         	adds	r2, #0x6e
 8065812: 00ff         	lsls	r7, r7, #0x3
 8065814: e752         	b	0x80656bc <_malloc_r+0x380> @ imm = #-0x15c
 8065816: f5b3 7faa    	cmp.w	r3, #0x154
 806581a: d815         	bhi	0x8065848 <_malloc_r+0x50c> @ imm = #0x2a
 806581c: 0be3         	lsrs	r3, r4, #0xf
 806581e: f103 0078    	add.w	r0, r3, #0x78
 8065822: f103 0777    	add.w	r7, r3, #0x77
 8065826: 00c3         	lsls	r3, r0, #0x3
 8065828: e5cf         	b	0x80653ca <_malloc_r+0x8e> @ imm = #-0x462
 806582a: 465f         	mov	r7, r11
 806582c: e673         	b	0x8065516 <_malloc_r+0x1da> @ imm = #-0x31a
 806582e: 2301         	movs	r3, #0x1
 8065830: f8cb 3004    	str.w	r3, [r11, #0x4]
 8065834: e684         	b	0x8065540 <_malloc_r+0x204> @ imm = #-0x2f8
 8065836: f5b2 7faa    	cmp.w	r2, #0x154
 806583a: d820         	bhi	0x806587e <_malloc_r+0x542> @ imm = #0x40
 806583c: 0bca         	lsrs	r2, r1, #0xf
 806583e: f102 0778    	add.w	r7, r2, #0x78
 8065842: 3277         	adds	r2, #0x77
 8065844: 00ff         	lsls	r7, r7, #0x3
 8065846: e739         	b	0x80656bc <_malloc_r+0x380> @ imm = #-0x18e
 8065848: f240 5254    	movw	r2, #0x554
 806584c: 4293         	cmp	r3, r2
 806584e: d820         	bhi	0x8065892 <_malloc_r+0x556> @ imm = #0x40
 8065850: 0ca3         	lsrs	r3, r4, #0x12
 8065852: f103 007d    	add.w	r0, r3, #0x7d
 8065856: f103 077c    	add.w	r7, r3, #0x7c
 806585a: 00c3         	lsls	r3, r0, #0x3
 806585c: e5b5         	b	0x80653ca <_malloc_r+0x8e> @ imm = #-0x496
 806585e: f107 0108    	add.w	r1, r7, #0x8
 8065862: 4628         	mov	r0, r5
 8065864: f7ff fb78    	bl	0x8064f58 <_free_r>     @ imm = #-0x910
 8065868: 68b7         	ldr	r7, [r6, #0x8]
 806586a: f8da 1004    	ldr.w	r1, [r10, #0x4]
 806586e: 687b         	ldr	r3, [r7, #0x4]
 8065870: e651         	b	0x8065516 <_malloc_r+0x1da> @ imm = #-0x35e
 8065872: 3b08         	subs	r3, #0x8
 8065874: 2100         	movs	r1, #0x0
 8065876: 4498         	add	r8, r3
 8065878: eba8 080b    	sub.w	r8, r8, r11
 806587c: e625         	b	0x80654ca <_malloc_r+0x18e> @ imm = #-0x3b6
 806587e: f240 5754    	movw	r7, #0x554
 8065882: 42ba         	cmp	r2, r7
 8065884: d80a         	bhi	0x806589c <_malloc_r+0x560> @ imm = #0x14
 8065886: 0c8a         	lsrs	r2, r1, #0x12
 8065888: f102 077d    	add.w	r7, r2, #0x7d
 806588c: 327c         	adds	r2, #0x7c
 806588e: 00ff         	lsls	r7, r7, #0x3
 8065890: e714         	b	0x80656bc <_malloc_r+0x380> @ imm = #-0x1d8
 8065892: f44f 737e    	mov.w	r3, #0x3f8
 8065896: 207f         	movs	r0, #0x7f
 8065898: 277e         	movs	r7, #0x7e
 806589a: e596         	b	0x80653ca <_malloc_r+0x8e> @ imm = #-0x4d4
 806589c: f44f 777e    	mov.w	r7, #0x3f8
 80658a0: 227e         	movs	r2, #0x7e
 80658a2: e70b         	b	0x80656bc <_malloc_r+0x380> @ imm = #-0x1ea
 80658a4: 6873         	ldr	r3, [r6, #0x4]
 80658a6: e776         	b	0x8065796 <_malloc_r+0x45a> @ imm = #-0x114

080658a8 <memchr>:
 80658a8: b510         	push	{r4, lr}
 80658aa: fa5f fe81    	uxtb.w	lr, r1
 80658ae: 0781         	lsls	r1, r0, #0x1e
 80658b0: d010         	beq	0x80658d4 <memchr+0x2c> @ imm = #0x20
 80658b2: 4603         	mov	r3, r0
 80658b4: 1e51         	subs	r1, r2, #0x1
 80658b6: b922         	cbnz	r2, 0x80658c2 <memchr+0x1a> @ imm = #0x8
 80658b8: e00a         	b	0x80658d0 <memchr+0x28> @ imm = #0x14
 80658ba: 079a         	lsls	r2, r3, #0x1e
 80658bc: d00c         	beq	0x80658d8 <memchr+0x30> @ imm = #0x18
 80658be: 3901         	subs	r1, #0x1
 80658c0: d306         	blo	0x80658d0 <memchr+0x28> @ imm = #0xc
 80658c2: 4618         	mov	r0, r3
 80658c4: f813 2b01    	ldrb	r2, [r3], #1
 80658c8: 4572         	cmp	r2, lr
 80658ca: 469c         	mov	r12, r3
 80658cc: d1f5         	bne	0x80658ba <memchr+0x12> @ imm = #-0x16
 80658ce: bd10         	pop	{r4, pc}
 80658d0: 2000         	movs	r0, #0x0
 80658d2: bd10         	pop	{r4, pc}
 80658d4: 4684         	mov	r12, r0
 80658d6: 4611         	mov	r1, r2
 80658d8: 2903         	cmp	r1, #0x3
 80658da: d80c         	bhi	0x80658f6 <memchr+0x4e> @ imm = #0x18
 80658dc: 2900         	cmp	r1, #0x0
 80658de: d0f7         	beq	0x80658d0 <memchr+0x28> @ imm = #-0x12
 80658e0: eb0c 0301    	add.w	r3, r12, r1
 80658e4: e001         	b	0x80658ea <memchr+0x42> @ imm = #0x2
 80658e6: 459c         	cmp	r12, r3
 80658e8: d0f2         	beq	0x80658d0 <memchr+0x28> @ imm = #-0x1c
 80658ea: 4660         	mov	r0, r12
 80658ec: f81c 2b01    	ldrb	r2, [r12], #1
 80658f0: 4572         	cmp	r2, lr
 80658f2: d1f8         	bne	0x80658e6 <memchr+0x3e> @ imm = #-0x10
 80658f4: bd10         	pop	{r4, pc}
 80658f6: ea4e 240e    	orr.w	r4, lr, lr, lsl #8
 80658fa: 4662         	mov	r2, r12
 80658fc: ea44 4404    	orr.w	r4, r4, r4, lsl #16
 8065900: 4694         	mov	r12, r2
 8065902: 3204         	adds	r2, #0x4
 8065904: f8dc 3000    	ldr.w	r3, [r12]
 8065908: 4063         	eors	r3, r4
 806590a: f1a3 3001    	sub.w	r0, r3, #0x1010101
 806590e: ea20 0303    	bic.w	r3, r0, r3
 8065912: f013 3f80    	tst.w	r3, #0x80808080
 8065916: d1e3         	bne	0x80658e0 <memchr+0x38> @ imm = #-0x3a
 8065918: 3904         	subs	r1, #0x4
 806591a: 4694         	mov	r12, r2
 806591c: 2903         	cmp	r1, #0x3
 806591e: d8ef         	bhi	0x8065900 <memchr+0x58> @ imm = #-0x22
 8065920: e7dc         	b	0x80658dc <memchr+0x34> @ imm = #-0x48
 8065922: bf00         	nop

08065924 <__malloc_lock>:
 8065924: 4770         	bx	lr
 8065926: bf00         	nop

08065928 <__malloc_unlock>:
 8065928: 4770         	bx	lr
 806592a: bf00         	nop

0806592c <_Balloc>:
 806592c: b538         	push	{r3, r4, r5, lr}
 806592e: 6cc3         	ldr	r3, [r0, #0x4c]
 8065930: 4605         	mov	r5, r0
 8065932: 460c         	mov	r4, r1
 8065934: b14b         	cbz	r3, 0x806594a <_Balloc+0x1e> @ imm = #0x12
 8065936: f853 0024    	ldr.w	r0, [r3, r4, lsl #2]
 806593a: b180         	cbz	r0, 0x806595e <_Balloc+0x32> @ imm = #0x20
 806593c: 6802         	ldr	r2, [r0]
 806593e: f843 2024    	str.w	r2, [r3, r4, lsl #2]
 8065942: 2300         	movs	r3, #0x0
 8065944: e9c0 3303    	strd	r3, r3, [r0, #12]
 8065948: bd38         	pop	{r3, r4, r5, pc}
 806594a: 2221         	movs	r2, #0x21
 806594c: 2104         	movs	r1, #0x4
 806594e: f001 fc49    	bl	0x80671e4 <_calloc_r>   @ imm = #0x1892
 8065952: 4603         	mov	r3, r0
 8065954: 64e8         	str	r0, [r5, #0x4c]
 8065956: 2800         	cmp	r0, #0x0
 8065958: d1ed         	bne	0x8065936 <_Balloc+0xa> @ imm = #-0x26
 806595a: 2000         	movs	r0, #0x0
 806595c: bd38         	pop	{r3, r4, r5, pc}
 806595e: 2101         	movs	r1, #0x1
 8065960: 4628         	mov	r0, r5
 8065962: fa01 f504    	lsl.w	r5, r1, r4
 8065966: 1d6a         	adds	r2, r5, #0x5
 8065968: 0092         	lsls	r2, r2, #0x2
 806596a: f001 fc3b    	bl	0x80671e4 <_calloc_r>   @ imm = #0x1876
 806596e: 2800         	cmp	r0, #0x0
 8065970: d0f3         	beq	0x806595a <_Balloc+0x2e> @ imm = #-0x1a
 8065972: e9c0 4501    	strd	r4, r5, [r0, #4]
 8065976: e7e4         	b	0x8065942 <_Balloc+0x16> @ imm = #-0x38

08065978 <_Bfree>:
 8065978: b131         	cbz	r1, 0x8065988 <_Bfree+0x10> @ imm = #0xc
 806597a: 6cc3         	ldr	r3, [r0, #0x4c]
 806597c: 684a         	ldr	r2, [r1, #0x4]
 806597e: f853 0022    	ldr.w	r0, [r3, r2, lsl #2]
 8065982: 6008         	str	r0, [r1]
 8065984: f843 1022    	str.w	r1, [r3, r2, lsl #2]
 8065988: 4770         	bx	lr
 806598a: bf00         	nop

0806598c <__multadd>:
 806598c: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8065990: 4680         	mov	r8, r0
 8065992: 460f         	mov	r7, r1
 8065994: 461d         	mov	r5, r3
 8065996: 690e         	ldr	r6, [r1, #0x10]
 8065998: f101 0e14    	add.w	lr, r1, #0x14
 806599c: 2000         	movs	r0, #0x0
 806599e: f8de 1000    	ldr.w	r1, [lr]
 80659a2: 3001         	adds	r0, #0x1
 80659a4: b28b         	uxth	r3, r1
 80659a6: 4286         	cmp	r6, r0
 80659a8: ea4f 4111    	lsr.w	r1, r1, #0x10
 80659ac: fb02 5303    	mla	r3, r2, r3, r5
 80659b0: ea4f 4c13    	lsr.w	r12, r3, #0x10
 80659b4: b29b         	uxth	r3, r3
 80659b6: fb02 cc01    	mla	r12, r2, r1, r12
 80659ba: eb03 430c    	add.w	r3, r3, r12, lsl #16
 80659be: ea4f 451c    	lsr.w	r5, r12, #0x10
 80659c2: f84e 3b04    	str	r3, [lr], #4
 80659c6: dcea         	bgt	0x806599e <__multadd+0x12> @ imm = #-0x2c
 80659c8: b13d         	cbz	r5, 0x80659da <__multadd+0x4e> @ imm = #0xe
 80659ca: 68bb         	ldr	r3, [r7, #0x8]
 80659cc: 42b3         	cmp	r3, r6
 80659ce: dd07         	ble	0x80659e0 <__multadd+0x54> @ imm = #0xe
 80659d0: eb07 0386    	add.w	r3, r7, r6, lsl #2
 80659d4: 3601         	adds	r6, #0x1
 80659d6: 615d         	str	r5, [r3, #0x14]
 80659d8: 613e         	str	r6, [r7, #0x10]
 80659da: 4638         	mov	r0, r7
 80659dc: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 80659e0: 6879         	ldr	r1, [r7, #0x4]
 80659e2: 4640         	mov	r0, r8
 80659e4: 3101         	adds	r1, #0x1
 80659e6: f7ff ffa1    	bl	0x806592c <_Balloc>     @ imm = #-0xbe
 80659ea: 4604         	mov	r4, r0
 80659ec: b1b0         	cbz	r0, 0x8065a1c <__multadd+0x90> @ imm = #0x2c
 80659ee: 693a         	ldr	r2, [r7, #0x10]
 80659f0: f107 010c    	add.w	r1, r7, #0xc
 80659f4: 300c         	adds	r0, #0xc
 80659f6: 3202         	adds	r2, #0x2
 80659f8: 0092         	lsls	r2, r2, #0x2
 80659fa: f7fc fc45    	bl	0x8062288 <memcpy>      @ imm = #-0x3776
 80659fe: f8d8 304c    	ldr.w	r3, [r8, #0x4c]
 8065a02: 687a         	ldr	r2, [r7, #0x4]
 8065a04: f853 1022    	ldr.w	r1, [r3, r2, lsl #2]
 8065a08: 6039         	str	r1, [r7]
 8065a0a: f843 7022    	str.w	r7, [r3, r2, lsl #2]
 8065a0e: 4627         	mov	r7, r4
 8065a10: eb07 0386    	add.w	r3, r7, r6, lsl #2
 8065a14: 3601         	adds	r6, #0x1
 8065a16: 615d         	str	r5, [r3, #0x14]
 8065a18: 613e         	str	r6, [r7, #0x10]
 8065a1a: e7de         	b	0x80659da <__multadd+0x4e> @ imm = #-0x44
 8065a1c: 4602         	mov	r2, r0
 8065a1e: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8065a28 <__multadd+0x9c>
 8065a20: 21b5         	movs	r1, #0xb5
 8065a22: 4802         	ldr	r0, [pc, #0x8]          @ 0x8065a2c <__multadd+0xa0>
 8065a24: f001 fbba    	bl	0x806719c <__assert_func> @ imm = #0x1774

08065a28 <$d>:
 8065a28: 40 a1 06 08  	.word	0x0806a140
 8065a2c: 8c a1 06 08  	.word	0x0806a18c

08065a30 <__s2b>:
 8065a30: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
 8065a34: 461e         	mov	r6, r3
 8065a36: 460c         	mov	r4, r1
 8065a38: 4617         	mov	r7, r2
 8065a3a: 4926         	ldr	r1, [pc, #0x98]         @ 0x8065ad4 <__s2b+0xa4>
 8065a3c: f103 0208    	add.w	r2, r3, #0x8
 8065a40: 2e09         	cmp	r6, #0x9
 8065a42: 4605         	mov	r5, r0
 8065a44: fb81 3102    	smull	r3, r1, r1, r2
 8065a48: ea4f 73e2    	asr.w	r3, r2, #0x1f
 8065a4c: ebc3 0361    	rsb	r3, r3, r1, asr #1
 8065a50: dd38         	ble	0x8065ac4 <__s2b+0x94>  @ imm = #0x70
 8065a52: f04f 0c01    	mov.w	r12, #0x1
 8065a56: 2100         	movs	r1, #0x0
 8065a58: ea4f 0c4c    	lsl.w	r12, r12, #0x1
 8065a5c: 3101         	adds	r1, #0x1
 8065a5e: 4563         	cmp	r3, r12
 8065a60: dcfa         	bgt	0x8065a58 <__s2b+0x28>  @ imm = #-0xc
 8065a62: 4628         	mov	r0, r5
 8065a64: f7ff ff62    	bl	0x806592c <_Balloc>     @ imm = #-0x13c
 8065a68: 4601         	mov	r1, r0
 8065a6a: b368         	cbz	r0, 0x8065ac8 <__s2b+0x98> @ imm = #0x5a
 8065a6c: 9b08         	ldr	r3, [sp, #0x20]
 8065a6e: 2f09         	cmp	r7, #0x9
 8065a70: 6143         	str	r3, [r0, #0x14]
 8065a72: f04f 0301    	mov.w	r3, #0x1
 8065a76: 6103         	str	r3, [r0, #0x10]
 8065a78: dc12         	bgt	0x8065aa0 <__s2b+0x70>  @ imm = #0x24
 8065a7a: 340a         	adds	r4, #0xa
 8065a7c: 2709         	movs	r7, #0x9
 8065a7e: 42be         	cmp	r6, r7
 8065a80: dd0b         	ble	0x8065a9a <__s2b+0x6a>  @ imm = #0x16
 8065a82: 1bf6         	subs	r6, r6, r7
 8065a84: 4426         	add	r6, r4
 8065a86: f814 3b01    	ldrb	r3, [r4], #1
 8065a8a: 220a         	movs	r2, #0xa
 8065a8c: 4628         	mov	r0, r5
 8065a8e: 3b30         	subs	r3, #0x30
 8065a90: f7ff ff7c    	bl	0x806598c <__multadd>   @ imm = #-0x108
 8065a94: 42a6         	cmp	r6, r4
 8065a96: 4601         	mov	r1, r0
 8065a98: d1f5         	bne	0x8065a86 <__s2b+0x56>  @ imm = #-0x16
 8065a9a: 4608         	mov	r0, r1
 8065a9c: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
 8065aa0: f104 0909    	add.w	r9, r4, #0x9
 8065aa4: 443c         	add	r4, r7
 8065aa6: 46c8         	mov	r8, r9
 8065aa8: f818 3b01    	ldrb	r3, [r8], #1
 8065aac: 220a         	movs	r2, #0xa
 8065aae: 4628         	mov	r0, r5
 8065ab0: 3b30         	subs	r3, #0x30
 8065ab2: f7ff ff6b    	bl	0x806598c <__multadd>   @ imm = #-0x12a
 8065ab6: 45a0         	cmp	r8, r4
 8065ab8: 4601         	mov	r1, r0
 8065aba: d1f5         	bne	0x8065aa8 <__s2b+0x78>  @ imm = #-0x16
 8065abc: f1a7 0408    	sub.w	r4, r7, #0x8
 8065ac0: 444c         	add	r4, r9
 8065ac2: e7dc         	b	0x8065a7e <__s2b+0x4e>  @ imm = #-0x48
 8065ac4: 2100         	movs	r1, #0x0
 8065ac6: e7cc         	b	0x8065a62 <__s2b+0x32>  @ imm = #-0x68
 8065ac8: 4602         	mov	r2, r0
 8065aca: 4b03         	ldr	r3, [pc, #0xc]          @ 0x8065ad8 <__s2b+0xa8>
 8065acc: 21ce         	movs	r1, #0xce
 8065ace: 4803         	ldr	r0, [pc, #0xc]          @ 0x8065adc <__s2b+0xac>
 8065ad0: f001 fb64    	bl	0x806719c <__assert_func> @ imm = #0x16c8

08065ad4 <$d>:
 8065ad4: 39 8e e3 38  	.word	0x38e38e39
 8065ad8: 40 a1 06 08  	.word	0x0806a140
 8065adc: 8c a1 06 08  	.word	0x0806a18c

08065ae0 <__hi0bits>:
 8065ae0: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0x8065b20 <__hi0bits+0x40>
 8065ae2: 4603         	mov	r3, r0
 8065ae4: 4002         	ands	r2, r0
 8065ae6: b9ca         	cbnz	r2, 0x8065b1c <__hi0bits+0x3c> @ imm = #0x32
 8065ae8: 0403         	lsls	r3, r0, #0x10
 8065aea: 2010         	movs	r0, #0x10
 8065aec: f013 4f7f    	tst.w	r3, #0xff000000
 8065af0: d101         	bne	0x8065af6 <__hi0bits+0x16> @ imm = #0x2
 8065af2: 3008         	adds	r0, #0x8
 8065af4: 021b         	lsls	r3, r3, #0x8
 8065af6: f013 4f70    	tst.w	r3, #0xf0000000
 8065afa: d101         	bne	0x8065b00 <__hi0bits+0x20> @ imm = #0x2
 8065afc: 3004         	adds	r0, #0x4
 8065afe: 011b         	lsls	r3, r3, #0x4
 8065b00: f013 4f40    	tst.w	r3, #0xc0000000
 8065b04: d101         	bne	0x8065b0a <__hi0bits+0x2a> @ imm = #0x2
 8065b06: 3002         	adds	r0, #0x2
 8065b08: 009b         	lsls	r3, r3, #0x2
 8065b0a: 2b00         	cmp	r3, #0x0
 8065b0c: db05         	blt	0x8065b1a <__hi0bits+0x3a> @ imm = #0xa
 8065b0e: f013 4f80    	tst.w	r3, #0x40000000
 8065b12: f100 0001    	add.w	r0, r0, #0x1
 8065b16: bf08         	it	eq
 8065b18: 2020         	moveq	r0, #0x20
 8065b1a: 4770         	bx	lr
 8065b1c: 2000         	movs	r0, #0x0
 8065b1e: e7e5         	b	0x8065aec <__hi0bits+0xc> @ imm = #-0x36

08065b20 <$d>:
 8065b20: 00 00 ff ff  	.word	0xffff0000

08065b24 <__lo0bits>:
 8065b24: 6803         	ldr	r3, [r0]
 8065b26: 4602         	mov	r2, r0
 8065b28: f013 0007    	ands	r0, r3, #0x7
 8065b2c: d007         	beq	0x8065b3e <__lo0bits+0x1a> @ imm = #0xe
 8065b2e: 07d9         	lsls	r1, r3, #0x1f
 8065b30: d41d         	bmi	0x8065b6e <__lo0bits+0x4a> @ imm = #0x3a
 8065b32: 0798         	lsls	r0, r3, #0x1e
 8065b34: d51f         	bpl	0x8065b76 <__lo0bits+0x52> @ imm = #0x3e
 8065b36: 085b         	lsrs	r3, r3, #0x1
 8065b38: 2001         	movs	r0, #0x1
 8065b3a: 6013         	str	r3, [r2]
 8065b3c: 4770         	bx	lr
 8065b3e: b299         	uxth	r1, r3
 8065b40: b909         	cbnz	r1, 0x8065b46 <__lo0bits+0x22> @ imm = #0x2
 8065b42: 0c1b         	lsrs	r3, r3, #0x10
 8065b44: 2010         	movs	r0, #0x10
 8065b46: b2d9         	uxtb	r1, r3
 8065b48: b909         	cbnz	r1, 0x8065b4e <__lo0bits+0x2a> @ imm = #0x2
 8065b4a: 3008         	adds	r0, #0x8
 8065b4c: 0a1b         	lsrs	r3, r3, #0x8
 8065b4e: 0719         	lsls	r1, r3, #0x1c
 8065b50: d101         	bne	0x8065b56 <__lo0bits+0x32> @ imm = #0x2
 8065b52: 3004         	adds	r0, #0x4
 8065b54: 091b         	lsrs	r3, r3, #0x4
 8065b56: 0799         	lsls	r1, r3, #0x1e
 8065b58: d101         	bne	0x8065b5e <__lo0bits+0x3a> @ imm = #0x2
 8065b5a: 3002         	adds	r0, #0x2
 8065b5c: 089b         	lsrs	r3, r3, #0x2
 8065b5e: 07d9         	lsls	r1, r3, #0x1f
 8065b60: d403         	bmi	0x8065b6a <__lo0bits+0x46> @ imm = #0x6
 8065b62: 085b         	lsrs	r3, r3, #0x1
 8065b64: f100 0001    	add.w	r0, r0, #0x1
 8065b68: d003         	beq	0x8065b72 <__lo0bits+0x4e> @ imm = #0x6
 8065b6a: 6013         	str	r3, [r2]
 8065b6c: 4770         	bx	lr
 8065b6e: 2000         	movs	r0, #0x0
 8065b70: 4770         	bx	lr
 8065b72: 2020         	movs	r0, #0x20
 8065b74: 4770         	bx	lr
 8065b76: 089b         	lsrs	r3, r3, #0x2
 8065b78: 2002         	movs	r0, #0x2
 8065b7a: 6013         	str	r3, [r2]
 8065b7c: 4770         	bx	lr
 8065b7e: bf00         	nop

08065b80 <__i2b>:
 8065b80: b538         	push	{r3, r4, r5, lr}
 8065b82: 6cc3         	ldr	r3, [r0, #0x4c]
 8065b84: 4604         	mov	r4, r0
 8065b86: 460d         	mov	r5, r1
 8065b88: b14b         	cbz	r3, 0x8065b9e <__i2b+0x1e> @ imm = #0x12
 8065b8a: 6858         	ldr	r0, [r3, #0x4]
 8065b8c: b1b0         	cbz	r0, 0x8065bbc <__i2b+0x3c> @ imm = #0x2c
 8065b8e: 6802         	ldr	r2, [r0]
 8065b90: 605a         	str	r2, [r3, #0x4]
 8065b92: 2200         	movs	r2, #0x0
 8065b94: 2301         	movs	r3, #0x1
 8065b96: 6145         	str	r5, [r0, #0x14]
 8065b98: e9c0 2303    	strd	r2, r3, [r0, #12]
 8065b9c: bd38         	pop	{r3, r4, r5, pc}
 8065b9e: 2221         	movs	r2, #0x21
 8065ba0: 2104         	movs	r1, #0x4
 8065ba2: f001 fb1f    	bl	0x80671e4 <_calloc_r>   @ imm = #0x163e
 8065ba6: 4603         	mov	r3, r0
 8065ba8: 64e0         	str	r0, [r4, #0x4c]
 8065baa: 2800         	cmp	r0, #0x0
 8065bac: d1ed         	bne	0x8065b8a <__i2b+0xa>   @ imm = #-0x26
 8065bae: 4b09         	ldr	r3, [pc, #0x24]         @ 0x8065bd4 <__i2b+0x54>
 8065bb0: 2200         	movs	r2, #0x0
 8065bb2: f44f 71a0    	mov.w	r1, #0x140
 8065bb6: 4808         	ldr	r0, [pc, #0x20]         @ 0x8065bd8 <__i2b+0x58>
 8065bb8: f001 faf0    	bl	0x806719c <__assert_func> @ imm = #0x15e0
 8065bbc: 221c         	movs	r2, #0x1c
 8065bbe: 2101         	movs	r1, #0x1
 8065bc0: 4620         	mov	r0, r4
 8065bc2: f001 fb0f    	bl	0x80671e4 <_calloc_r>   @ imm = #0x161e
 8065bc6: 2800         	cmp	r0, #0x0
 8065bc8: d0f1         	beq	0x8065bae <__i2b+0x2e>  @ imm = #-0x1e
 8065bca: 2201         	movs	r2, #0x1
 8065bcc: 2302         	movs	r3, #0x2
 8065bce: e9c0 2301    	strd	r2, r3, [r0, #4]
 8065bd2: e7de         	b	0x8065b92 <__i2b+0x12>  @ imm = #-0x44

08065bd4 <$d>:
 8065bd4: 40 a1 06 08  	.word	0x0806a140
 8065bd8: 8c a1 06 08  	.word	0x0806a18c

08065bdc <__multiply>:
 8065bdc: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8065be0: 690e         	ldr	r6, [r1, #0x10]
 8065be2: b085         	sub	sp, #0x14
 8065be4: 6915         	ldr	r5, [r2, #0x10]
 8065be6: 4688         	mov	r8, r1
 8065be8: 4614         	mov	r4, r2
 8065bea: 42ae         	cmp	r6, r5
 8065bec: db05         	blt	0x8065bfa <__multiply+0x1e> @ imm = #0xa
 8065bee: 462a         	mov	r2, r5
 8065bf0: 4623         	mov	r3, r4
 8065bf2: 4635         	mov	r5, r6
 8065bf4: 460c         	mov	r4, r1
 8065bf6: 4616         	mov	r6, r2
 8065bf8: 4698         	mov	r8, r3
 8065bfa: 19af         	adds	r7, r5, r6
 8065bfc: e9d4 1301    	ldrd	r1, r3, [r4, #4]
 8065c00: 42bb         	cmp	r3, r7
 8065c02: bfb8         	it	lt
 8065c04: 3101         	addlt	r1, #0x1
 8065c06: f7ff fe91    	bl	0x806592c <_Balloc>     @ imm = #-0x2de
 8065c0a: 9001         	str	r0, [sp, #0x4]
 8065c0c: 2800         	cmp	r0, #0x0
 8065c0e: f000 8089    	beq.w	0x8065d24 <__multiply+0x148> @ imm = #0x112
 8065c12: 9b01         	ldr	r3, [sp, #0x4]
 8065c14: f103 0914    	add.w	r9, r3, #0x14
 8065c18: eb09 0a87    	add.w	r10, r9, r7, lsl #2
 8065c1c: 45d1         	cmp	r9, r10
 8065c1e: d205         	bhs	0x8065c2c <__multiply+0x50> @ imm = #0xa
 8065c20: 464b         	mov	r3, r9
 8065c22: 2200         	movs	r2, #0x0
 8065c24: f843 2b04    	str	r2, [r3], #4
 8065c28: 459a         	cmp	r10, r3
 8065c2a: d8fb         	bhi	0x8065c24 <__multiply+0x48> @ imm = #-0xa
 8065c2c: f108 0814    	add.w	r8, r8, #0x14
 8065c30: f104 0314    	add.w	r3, r4, #0x14
 8065c34: eb08 0b86    	add.w	r11, r8, r6, lsl #2
 8065c38: 461a         	mov	r2, r3
 8065c3a: eb03 0585    	add.w	r5, r3, r5, lsl #2
 8065c3e: 45d8         	cmp	r8, r11
 8065c40: d261         	bhs	0x8065d06 <__multiply+0x12a> @ imm = #0xc2
 8065c42: 1b2b         	subs	r3, r5, r4
 8065c44: 3415         	adds	r4, #0x15
 8065c46: 46ac         	mov	r12, r5
 8065c48: 3b15         	subs	r3, #0x15
 8065c4a: f023 0303    	bic	r3, r3, #0x3
 8065c4e: 3304         	adds	r3, #0x4
 8065c50: 42a5         	cmp	r5, r4
 8065c52: bf38         	it	lo
 8065c54: 2304         	movlo	r3, #0x4
 8065c56: e9cd a702    	strd	r10, r7, [sp, #8]
 8065c5a: 461f         	mov	r7, r3
 8065c5c: 4692         	mov	r10, r2
 8065c5e: e005         	b	0x8065c6c <__multiply+0x90> @ imm = #0xa
 8065c60: 0c00         	lsrs	r0, r0, #0x10
 8065c62: d12b         	bne	0x8065cbc <__multiply+0xe0> @ imm = #0x56
 8065c64: 45c3         	cmp	r11, r8
 8065c66: f109 0904    	add.w	r9, r9, #0x4
 8065c6a: d94a         	bls	0x8065d02 <__multiply+0x126> @ imm = #0x94
 8065c6c: f858 0b04    	ldr	r0, [r8], #4
 8065c70: b285         	uxth	r5, r0
 8065c72: 2d00         	cmp	r5, #0x0
 8065c74: d0f4         	beq	0x8065c60 <__multiply+0x84> @ imm = #-0x18
 8065c76: 4656         	mov	r6, r10
 8065c78: 464c         	mov	r4, r9
 8065c7a: 2300         	movs	r3, #0x0
 8065c7c: f856 0b04    	ldr	r0, [r6], #4
 8065c80: 6821         	ldr	r1, [r4]
 8065c82: b282         	uxth	r2, r0
 8065c84: 45b4         	cmp	r12, r6
 8065c86: fa1f fe81    	uxth.w	lr, r1
 8065c8a: ea4f 4010    	lsr.w	r0, r0, #0x10
 8065c8e: fb05 ee02    	mla	lr, r5, r2, lr
 8065c92: ea4f 4211    	lsr.w	r2, r1, #0x10
 8065c96: 4473         	add	r3, lr
 8065c98: fb05 2200    	mla	r2, r5, r0, r2
 8065c9c: eb02 4213    	add.w	r2, r2, r3, lsr #16
 8065ca0: b29b         	uxth	r3, r3
 8065ca2: ea43 4302    	orr.w	r3, r3, r2, lsl #16
 8065ca6: f844 3b04    	str	r3, [r4], #4
 8065caa: ea4f 4312    	lsr.w	r3, r2, #0x10
 8065cae: d8e5         	bhi	0x8065c7c <__multiply+0xa0> @ imm = #-0x36
 8065cb0: f849 3007    	str.w	r3, [r9, r7]
 8065cb4: f858 0c04    	ldr	r0, [r8, #-4]
 8065cb8: 0c00         	lsrs	r0, r0, #0x10
 8065cba: d0d3         	beq	0x8065c64 <__multiply+0x88> @ imm = #-0x5a
 8065cbc: f8d9 3000    	ldr.w	r3, [r9]
 8065cc0: 4654         	mov	r4, r10
 8065cc2: 464d         	mov	r5, r9
 8065cc4: 2200         	movs	r2, #0x0
 8065cc6: 4619         	mov	r1, r3
 8065cc8: 8826         	ldrh	r6, [r4]
 8065cca: 0c09         	lsrs	r1, r1, #0x10
 8065ccc: b29b         	uxth	r3, r3
 8065cce: fb00 1106    	mla	r1, r0, r6, r1
 8065cd2: 440a         	add	r2, r1
 8065cd4: ea43 4302    	orr.w	r3, r3, r2, lsl #16
 8065cd8: f845 3b04    	str	r3, [r5], #4
 8065cdc: f854 6b04    	ldr	r6, [r4], #4
 8065ce0: 6829         	ldr	r1, [r5]
 8065ce2: 0c36         	lsrs	r6, r6, #0x10
 8065ce4: 45a4         	cmp	r12, r4
 8065ce6: b28b         	uxth	r3, r1
 8065ce8: fb00 3306    	mla	r3, r0, r6, r3
 8065cec: eb03 4312    	add.w	r3, r3, r2, lsr #16
 8065cf0: ea4f 4213    	lsr.w	r2, r3, #0x10
 8065cf4: d8e8         	bhi	0x8065cc8 <__multiply+0xec> @ imm = #-0x30
 8065cf6: 45c3         	cmp	r11, r8
 8065cf8: f849 3007    	str.w	r3, [r9, r7]
 8065cfc: f109 0904    	add.w	r9, r9, #0x4
 8065d00: d8b4         	bhi	0x8065c6c <__multiply+0x90> @ imm = #-0x98
 8065d02: e9dd a702    	ldrd	r10, r7, [sp, #8]
 8065d06: 2f00         	cmp	r7, #0x0
 8065d08: dc02         	bgt	0x8065d10 <__multiply+0x134> @ imm = #0x4
 8065d0a: e005         	b	0x8065d18 <__multiply+0x13c> @ imm = #0xa
 8065d0c: 3f01         	subs	r7, #0x1
 8065d0e: d003         	beq	0x8065d18 <__multiply+0x13c> @ imm = #0x6
 8065d10: f85a 3d04    	ldr	r3, [r10, #-4]!
 8065d14: 2b00         	cmp	r3, #0x0
 8065d16: d0f9         	beq	0x8065d0c <__multiply+0x130> @ imm = #-0xe
 8065d18: 9b01         	ldr	r3, [sp, #0x4]
 8065d1a: 4618         	mov	r0, r3
 8065d1c: 611f         	str	r7, [r3, #0x10]
 8065d1e: b005         	add	sp, #0x14
 8065d20: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8065d24: 4602         	mov	r2, r0
 8065d26: 4b03         	ldr	r3, [pc, #0xc]          @ 0x8065d34 <__multiply+0x158>
 8065d28: f240 115d    	movw	r1, #0x15d
 8065d2c: 4802         	ldr	r0, [pc, #0x8]          @ 0x8065d38 <__multiply+0x15c>
 8065d2e: f001 fa35    	bl	0x806719c <__assert_func> @ imm = #0x146a
 8065d32: bf00         	nop

08065d34 <$d>:
 8065d34: 40 a1 06 08  	.word	0x0806a140
 8065d38: 8c a1 06 08  	.word	0x0806a18c

08065d3c <__pow5mult>:
 8065d3c: f012 0303    	ands	r3, r2, #0x3
 8065d40: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8065d44: 4614         	mov	r4, r2
 8065d46: 4606         	mov	r6, r0
 8065d48: d132         	bne	0x8065db0 <__pow5mult+0x74> @ imm = #0x64
 8065d4a: 460d         	mov	r5, r1
 8065d4c: 10a4         	asrs	r4, r4, #0x2
 8065d4e: d020         	beq	0x8065d92 <__pow5mult+0x56> @ imm = #0x40
 8065d50: f8d6 8048    	ldr.w	r8, [r6, #0x48]
 8065d54: f1b8 0f00    	cmp.w	r8, #0x0
 8065d58: d033         	beq	0x8065dc2 <__pow5mult+0x86> @ imm = #0x66
 8065d5a: 07e3         	lsls	r3, r4, #0x1f
 8065d5c: f04f 0700    	mov.w	r7, #0x0
 8065d60: d407         	bmi	0x8065d72 <__pow5mult+0x36> @ imm = #0xe
 8065d62: 1064         	asrs	r4, r4, #0x1
 8065d64: d015         	beq	0x8065d92 <__pow5mult+0x56> @ imm = #0x2a
 8065d66: f8d8 0000    	ldr.w	r0, [r8]
 8065d6a: b1a8         	cbz	r0, 0x8065d98 <__pow5mult+0x5c> @ imm = #0x2a
 8065d6c: 4680         	mov	r8, r0
 8065d6e: 07e3         	lsls	r3, r4, #0x1f
 8065d70: d5f7         	bpl	0x8065d62 <__pow5mult+0x26> @ imm = #-0x12
 8065d72: 4642         	mov	r2, r8
 8065d74: 4629         	mov	r1, r5
 8065d76: 4630         	mov	r0, r6
 8065d78: f7ff ff30    	bl	0x8065bdc <__multiply>  @ imm = #-0x1a0
 8065d7c: b1b5         	cbz	r5, 0x8065dac <__pow5mult+0x70> @ imm = #0x2c
 8065d7e: 6869         	ldr	r1, [r5, #0x4]
 8065d80: 1064         	asrs	r4, r4, #0x1
 8065d82: 6cf3         	ldr	r3, [r6, #0x4c]
 8065d84: f853 2021    	ldr.w	r2, [r3, r1, lsl #2]
 8065d88: 602a         	str	r2, [r5]
 8065d8a: f843 5021    	str.w	r5, [r3, r1, lsl #2]
 8065d8e: 4605         	mov	r5, r0
 8065d90: d1e9         	bne	0x8065d66 <__pow5mult+0x2a> @ imm = #-0x2e
 8065d92: 4628         	mov	r0, r5
 8065d94: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8065d98: 4642         	mov	r2, r8
 8065d9a: 4641         	mov	r1, r8
 8065d9c: 4630         	mov	r0, r6
 8065d9e: f7ff ff1d    	bl	0x8065bdc <__multiply>  @ imm = #-0x1c6
 8065da2: f8c8 0000    	str.w	r0, [r8]
 8065da6: 4680         	mov	r8, r0
 8065da8: 6007         	str	r7, [r0]
 8065daa: e7e0         	b	0x8065d6e <__pow5mult+0x32> @ imm = #-0x40
 8065dac: 4605         	mov	r5, r0
 8065dae: e7d8         	b	0x8065d62 <__pow5mult+0x26> @ imm = #-0x50
 8065db0: 3b01         	subs	r3, #0x1
 8065db2: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0x8065df0 <__pow5mult+0xb4>
 8065db4: f852 2023    	ldr.w	r2, [r2, r3, lsl #2]
 8065db8: 2300         	movs	r3, #0x0
 8065dba: f7ff fde7    	bl	0x806598c <__multadd>   @ imm = #-0x432
 8065dbe: 4605         	mov	r5, r0
 8065dc0: e7c4         	b	0x8065d4c <__pow5mult+0x10> @ imm = #-0x78
 8065dc2: 2101         	movs	r1, #0x1
 8065dc4: 4630         	mov	r0, r6
 8065dc6: f7ff fdb1    	bl	0x806592c <_Balloc>     @ imm = #-0x49e
 8065dca: 4680         	mov	r8, r0
 8065dcc: b140         	cbz	r0, 0x8065de0 <__pow5mult+0xa4> @ imm = #0x10
 8065dce: 2301         	movs	r3, #0x1
 8065dd0: f240 2271    	movw	r2, #0x271
 8065dd4: e9c0 3204    	strd	r3, r2, [r0, #16]
 8065dd8: 2300         	movs	r3, #0x0
 8065dda: 64b0         	str	r0, [r6, #0x48]
 8065ddc: 6003         	str	r3, [r0]
 8065dde: e7bc         	b	0x8065d5a <__pow5mult+0x1e> @ imm = #-0x88
 8065de0: 4602         	mov	r2, r0
 8065de2: 4b04         	ldr	r3, [pc, #0x10]         @ 0x8065df4 <__pow5mult+0xb8>
 8065de4: f44f 71a0    	mov.w	r1, #0x140
 8065de8: 4803         	ldr	r0, [pc, #0xc]          @ 0x8065df8 <__pow5mult+0xbc>
 8065dea: f001 f9d7    	bl	0x806719c <__assert_func> @ imm = #0x13ae
 8065dee: bf00         	nop

08065df0 <$d>:
 8065df0: c0 a1 06 08  	.word	0x0806a1c0
 8065df4: 40 a1 06 08  	.word	0x0806a140
 8065df8: 8c a1 06 08  	.word	0x0806a18c

08065dfc <__lshift>:
 8065dfc: e92d 47f0    	push.w	{r4, r5, r6, r7, r8, r9, r10, lr}
 8065e00: 460c         	mov	r4, r1
 8065e02: 4690         	mov	r8, r2
 8065e04: 4607         	mov	r7, r0
 8065e06: ea4f 1962    	asr.w	r9, r2, #0x5
 8065e0a: 6926         	ldr	r6, [r4, #0x10]
 8065e0c: 68a3         	ldr	r3, [r4, #0x8]
 8065e0e: eb06 1662    	add.w	r6, r6, r2, asr #5
 8065e12: 6849         	ldr	r1, [r1, #0x4]
 8065e14: 1c75         	adds	r5, r6, #0x1
 8065e16: 429d         	cmp	r5, r3
 8065e18: dd03         	ble	0x8065e22 <__lshift+0x26> @ imm = #0x6
 8065e1a: 005b         	lsls	r3, r3, #0x1
 8065e1c: 3101         	adds	r1, #0x1
 8065e1e: 429d         	cmp	r5, r3
 8065e20: dcfb         	bgt	0x8065e1a <__lshift+0x1e> @ imm = #-0xa
 8065e22: 4638         	mov	r0, r7
 8065e24: f7ff fd82    	bl	0x806592c <_Balloc>     @ imm = #-0x4fc
 8065e28: 2800         	cmp	r0, #0x0
 8065e2a: d050         	beq	0x8065ece <__lshift+0xd2> @ imm = #0xa0
 8065e2c: f1b9 0f00    	cmp.w	r9, #0x0
 8065e30: f100 0c14    	add.w	r12, r0, #0x14
 8065e34: dd0e         	ble	0x8065e54 <__lshift+0x58> @ imm = #0x1c
 8065e36: f109 0205    	add.w	r2, r9, #0x5
 8065e3a: 4663         	mov	r3, r12
 8065e3c: 2100         	movs	r1, #0x0
 8065e3e: ea4f 0e82    	lsl.w	lr, r2, #0x2
 8065e42: eb00 0282    	add.w	r2, r0, r2, lsl #2
 8065e46: f843 1b04    	str	r1, [r3], #4
 8065e4a: 4293         	cmp	r3, r2
 8065e4c: d1fb         	bne	0x8065e46 <__lshift+0x4a> @ imm = #-0xa
 8065e4e: f1ae 0314    	sub.w	r3, lr, #0x14
 8065e52: 449c         	add	r12, r3
 8065e54: f104 0314    	add.w	r3, r4, #0x14
 8065e58: 6921         	ldr	r1, [r4, #0x10]
 8065e5a: f018 081f    	ands	r8, r8, #0x1f
 8065e5e: eb03 0181    	add.w	r1, r3, r1, lsl #2
 8065e62: d02b         	beq	0x8065ebc <__lshift+0xc0> @ imm = #0x56
 8065e64: f1c8 0920    	rsb.w	r9, r8, #0x20
 8065e68: 46e6         	mov	lr, r12
 8065e6a: f04f 0a00    	mov.w	r10, #0x0
 8065e6e: 681a         	ldr	r2, [r3]
 8065e70: fa02 f208    	lsl.w	r2, r2, r8
 8065e74: ea42 020a    	orr.w	r2, r2, r10
 8065e78: f84e 2b04    	str	r2, [lr], #4
 8065e7c: f853 2b04    	ldr	r2, [r3], #4
 8065e80: 4299         	cmp	r1, r3
 8065e82: fa22 fa09    	lsr.w	r10, r2, r9
 8065e86: d8f2         	bhi	0x8065e6e <__lshift+0x72> @ imm = #-0x1c
 8065e88: 1b0b         	subs	r3, r1, r4
 8065e8a: f104 0215    	add.w	r2, r4, #0x15
 8065e8e: f1ba 0f00    	cmp.w	r10, #0x0
 8065e92: bf18         	it	ne
 8065e94: 462e         	movne	r6, r5
 8065e96: 3b15         	subs	r3, #0x15
 8065e98: f023 0303    	bic	r3, r3, #0x3
 8065e9c: 3304         	adds	r3, #0x4
 8065e9e: 4291         	cmp	r1, r2
 8065ea0: bf38         	it	lo
 8065ea2: 2304         	movlo	r3, #0x4
 8065ea4: f84c a003    	str.w	r10, [r12, r3]
 8065ea8: 6cfb         	ldr	r3, [r7, #0x4c]
 8065eaa: 6862         	ldr	r2, [r4, #0x4]
 8065eac: 6106         	str	r6, [r0, #0x10]
 8065eae: f853 1022    	ldr.w	r1, [r3, r2, lsl #2]
 8065eb2: 6021         	str	r1, [r4]
 8065eb4: f843 4022    	str.w	r4, [r3, r2, lsl #2]
 8065eb8: e8bd 87f0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, pc}
 8065ebc: f1ac 0c04    	sub.w	r12, r12, #0x4
 8065ec0: f853 2b04    	ldr	r2, [r3], #4
 8065ec4: 4299         	cmp	r1, r3
 8065ec6: f84c 2f04    	str	r2, [r12, #4]!
 8065eca: d8f9         	bhi	0x8065ec0 <__lshift+0xc4> @ imm = #-0xe
 8065ecc: e7ec         	b	0x8065ea8 <__lshift+0xac> @ imm = #-0x28
 8065ece: 4602         	mov	r2, r0
 8065ed0: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8065edc <__lshift+0xe0>
 8065ed2: f240 11d9    	movw	r1, #0x1d9
 8065ed6: 4802         	ldr	r0, [pc, #0x8]          @ 0x8065ee0 <__lshift+0xe4>
 8065ed8: f001 f960    	bl	0x806719c <__assert_func> @ imm = #0x12c0

08065edc <$d>:
 8065edc: 40 a1 06 08  	.word	0x0806a140
 8065ee0: 8c a1 06 08  	.word	0x0806a18c

08065ee4 <__mcmp>:
 8065ee4: 4684         	mov	r12, r0
 8065ee6: 690b         	ldr	r3, [r1, #0x10]
 8065ee8: 6900         	ldr	r0, [r0, #0x10]
 8065eea: 1ac0         	subs	r0, r0, r3
 8065eec: d115         	bne	0x8065f1a <__mcmp+0x36> @ imm = #0x2a
 8065eee: f10c 0c14    	add.w	r12, r12, #0x14
 8065ef2: 3114         	adds	r1, #0x14
 8065ef4: eb0c 0283    	add.w	r2, r12, r3, lsl #2
 8065ef8: eb01 0383    	add.w	r3, r1, r3, lsl #2
 8065efc: b410         	push	{r4}
 8065efe: e001         	b	0x8065f04 <__mcmp+0x20> @ imm = #0x2
 8065f00: 4594         	cmp	r12, r2
 8065f02: d208         	bhs	0x8065f16 <__mcmp+0x32> @ imm = #0x10
 8065f04: f852 4d04    	ldr	r4, [r2, #-4]!
 8065f08: f853 1d04    	ldr	r1, [r3, #-4]!
 8065f0c: 428c         	cmp	r4, r1
 8065f0e: d0f7         	beq	0x8065f00 <__mcmp+0x1c> @ imm = #-0x12
 8065f10: d204         	bhs	0x8065f1c <__mcmp+0x38> @ imm = #0x8
 8065f12: f04f 30ff    	mov.w	r0, #0xffffffff
 8065f16: bc10         	pop	{r4}
 8065f18: 4770         	bx	lr
 8065f1a: 4770         	bx	lr
 8065f1c: 2001         	movs	r0, #0x1
 8065f1e: bc10         	pop	{r4}
 8065f20: 4770         	bx	lr
 8065f22: bf00         	nop

08065f24 <__mdiff>:
 8065f24: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8065f28: 690e         	ldr	r6, [r1, #0x10]
 8065f2a: 460d         	mov	r5, r1
 8065f2c: 6913         	ldr	r3, [r2, #0x10]
 8065f2e: 4617         	mov	r7, r2
 8065f30: 1af6         	subs	r6, r6, r3
 8065f32: 2e00         	cmp	r6, #0x0
 8065f34: d17a         	bne	0x806602c <__mdiff+0x108> @ imm = #0xf4
 8065f36: f101 0c14    	add.w	r12, r1, #0x14
 8065f3a: 3214         	adds	r2, #0x14
 8065f3c: eb02 0283    	add.w	r2, r2, r3, lsl #2
 8065f40: eb0c 0383    	add.w	r3, r12, r3, lsl #2
 8065f44: e001         	b	0x8065f4a <__mdiff+0x26> @ imm = #0x2
 8065f46: 459c         	cmp	r12, r3
 8065f48: d273         	bhs	0x8066032 <__mdiff+0x10e> @ imm = #0xe6
 8065f4a: f853 1d04    	ldr	r1, [r3, #-4]!
 8065f4e: f852 4d04    	ldr	r4, [r2, #-4]!
 8065f52: 42a1         	cmp	r1, r4
 8065f54: d0f7         	beq	0x8065f46 <__mdiff+0x22> @ imm = #-0x12
 8065f56: d364         	blo	0x8066022 <__mdiff+0xfe> @ imm = #0xc8
 8065f58: 6869         	ldr	r1, [r5, #0x4]
 8065f5a: f7ff fce7    	bl	0x806592c <_Balloc>     @ imm = #-0x632
 8065f5e: 2800         	cmp	r0, #0x0
 8065f60: d071         	beq	0x8066046 <__mdiff+0x122> @ imm = #0xe2
 8065f62: 692c         	ldr	r4, [r5, #0x10]
 8065f64: f105 0814    	add.w	r8, r5, #0x14
 8065f68: f107 0e14    	add.w	lr, r7, #0x14
 8065f6c: 693a         	ldr	r2, [r7, #0x10]
 8065f6e: f100 0914    	add.w	r9, r0, #0x14
 8065f72: f105 0c10    	add.w	r12, r5, #0x10
 8065f76: 60c6         	str	r6, [r0, #0xc]
 8065f78: eb0e 0282    	add.w	r2, lr, r2, lsl #2
 8065f7c: eb08 0684    	add.w	r6, r8, r4, lsl #2
 8065f80: f04f 0a00    	mov.w	r10, #0x0
 8065f84: 464d         	mov	r5, r9
 8065f86: f85c bf04    	ldr	r11, [r12, #4]!
 8065f8a: f85e 1b04    	ldr	r1, [lr], #4
 8065f8e: fa1f f38b    	uxth.w	r3, r11
 8065f92: 4572         	cmp	r2, lr
 8065f94: 4453         	add	r3, r10
 8065f96: fa1f fa81    	uxth.w	r10, r1
 8065f9a: ea4f 4111    	lsr.w	r1, r1, #0x10
 8065f9e: eba3 030a    	sub.w	r3, r3, r10
 8065fa2: ebc1 411b    	rsb	r1, r1, r11, lsr #16
 8065fa6: eb01 4123    	add.w	r1, r1, r3, asr #16
 8065faa: b29b         	uxth	r3, r3
 8065fac: ea4f 4a21    	asr.w	r10, r1, #0x10
 8065fb0: ea43 4301    	orr.w	r3, r3, r1, lsl #16
 8065fb4: f845 3b04    	str	r3, [r5], #4
 8065fb8: d8e5         	bhi	0x8065f86 <__mdiff+0x62> @ imm = #-0x36
 8065fba: 1bd1         	subs	r1, r2, r7
 8065fbc: 3715         	adds	r7, #0x15
 8065fbe: 42ba         	cmp	r2, r7
 8065fc0: f1a1 0215    	sub.w	r2, r1, #0x15
 8065fc4: f022 0103    	bic	r1, r2, #0x3
 8065fc8: 460a         	mov	r2, r1
 8065fca: f101 0104    	add.w	r1, r1, #0x4
 8065fce: bf3c         	itt	lo
 8065fd0: 2104         	movlo	r1, #0x4
 8065fd2: 2200         	movlo	r2, #0x0
 8065fd4: 4488         	add	r8, r1
 8065fd6: 444a         	add	r2, r9
 8065fd8: 4489         	add	r9, r1
 8065fda: 4546         	cmp	r6, r8
 8065fdc: d918         	bls	0x8066010 <__mdiff+0xec> @ imm = #0x30
 8065fde: 464d         	mov	r5, r9
 8065fe0: 4642         	mov	r2, r8
 8065fe2: f852 1b04    	ldr	r1, [r2], #4
 8065fe6: b28b         	uxth	r3, r1
 8065fe8: 4296         	cmp	r6, r2
 8065fea: 4453         	add	r3, r10
 8065fec: ea4f 4a23    	asr.w	r10, r3, #0x10
 8065ff0: b29b         	uxth	r3, r3
 8065ff2: eb0a 4111    	add.w	r1, r10, r1, lsr #16
 8065ff6: ea43 4301    	orr.w	r3, r3, r1, lsl #16
 8065ffa: ea4f 4a21    	asr.w	r10, r1, #0x10
 8065ffe: f845 3b04    	str	r3, [r5], #4
 8066002: d8ee         	bhi	0x8065fe2 <__mdiff+0xbe> @ imm = #-0x24
 8066004: 1e72         	subs	r2, r6, #0x1
 8066006: eba2 0808    	sub.w	r8, r2, r8
 806600a: f028 0203    	bic	r2, r8, #0x3
 806600e: 444a         	add	r2, r9
 8066010: b923         	cbnz	r3, 0x806601c <__mdiff+0xf8> @ imm = #0x8
 8066012: f852 3d04    	ldr	r3, [r2, #-4]!
 8066016: 3c01         	subs	r4, #0x1
 8066018: 2b00         	cmp	r3, #0x0
 806601a: d0fa         	beq	0x8066012 <__mdiff+0xee> @ imm = #-0xc
 806601c: 6104         	str	r4, [r0, #0x10]
 806601e: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8066022: 462b         	mov	r3, r5
 8066024: 2601         	movs	r6, #0x1
 8066026: 463d         	mov	r5, r7
 8066028: 461f         	mov	r7, r3
 806602a: e795         	b	0x8065f58 <__mdiff+0x34> @ imm = #-0xd6
 806602c: dbf9         	blt	0x8066022 <__mdiff+0xfe> @ imm = #-0xe
 806602e: 2600         	movs	r6, #0x0
 8066030: e792         	b	0x8065f58 <__mdiff+0x34> @ imm = #-0xdc
 8066032: 2100         	movs	r1, #0x0
 8066034: f7ff fc7a    	bl	0x806592c <_Balloc>     @ imm = #-0x70c
 8066038: b160         	cbz	r0, 0x8066054 <__mdiff+0x130> @ imm = #0x18
 806603a: 2201         	movs	r2, #0x1
 806603c: 2300         	movs	r3, #0x0
 806603e: e9c0 2304    	strd	r2, r3, [r0, #16]
 8066042: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8066046: 4602         	mov	r2, r0
 8066048: 4b06         	ldr	r3, [pc, #0x18]         @ 0x8066064 <__mdiff+0x140>
 806604a: f44f 7110    	mov.w	r1, #0x240
 806604e: 4806         	ldr	r0, [pc, #0x18]         @ 0x8066068 <__mdiff+0x144>
 8066050: f001 f8a4    	bl	0x806719c <__assert_func> @ imm = #0x1148
 8066054: 4602         	mov	r2, r0
 8066056: 4b03         	ldr	r3, [pc, #0xc]          @ 0x8066064 <__mdiff+0x140>
 8066058: f240 2132    	movw	r1, #0x232
 806605c: 4802         	ldr	r0, [pc, #0x8]          @ 0x8066068 <__mdiff+0x144>
 806605e: f001 f89d    	bl	0x806719c <__assert_func> @ imm = #0x113a
 8066062: bf00         	nop

08066064 <$d>:
 8066064: 40 a1 06 08  	.word	0x0806a140
 8066068: 8c a1 06 08  	.word	0x0806a18c

0806606c <__ulp>:
 806606c: 4b10         	ldr	r3, [pc, #0x40]         @ 0x80660b0 <__ulp+0x44>
 806606e: 400b         	ands	r3, r1
 8066070: f1a3 7350    	sub.w	r3, r3, #0x3400000
 8066074: 2b00         	cmp	r3, #0x0
 8066076: dd02         	ble	0x806607e <__ulp+0x12>  @ imm = #0x4
 8066078: 2000         	movs	r0, #0x0
 806607a: 4619         	mov	r1, r3
 806607c: 4770         	bx	lr
 806607e: 425b         	rsbs	r3, r3, #0
 8066080: f1b3 7fa0    	cmp.w	r3, #0x1400000
 8066084: ea4f 5223    	asr.w	r2, r3, #0x14
 8066088: da05         	bge	0x8066096 <__ulp+0x2a>  @ imm = #0xa
 806608a: f44f 2300    	mov.w	r3, #0x80000
 806608e: 2000         	movs	r0, #0x0
 8066090: fa43 f102    	asr.w	r1, r3, r2
 8066094: 4770         	bx	lr
 8066096: 3a14         	subs	r2, #0x14
 8066098: 2100         	movs	r1, #0x0
 806609a: 2a1e         	cmp	r2, #0x1e
 806609c: dd02         	ble	0x80660a4 <__ulp+0x38>  @ imm = #0x4
 806609e: 2201         	movs	r2, #0x1
 80660a0: 4610         	mov	r0, r2
 80660a2: 4770         	bx	lr
 80660a4: f04f 4300    	mov.w	r3, #0x80000000
 80660a8: fa23 f202    	lsr.w	r2, r3, r2
 80660ac: 4610         	mov	r0, r2
 80660ae: 4770         	bx	lr

080660b0 <$d>:
 80660b0: 00 00 f0 7f  	.word	0x7ff00000

080660b4 <__b2d>:
 80660b4: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 80660b8: 6907         	ldr	r7, [r0, #0x10]
 80660ba: f100 0614    	add.w	r6, r0, #0x14
 80660be: 460c         	mov	r4, r1
 80660c0: eb06 0787    	add.w	r7, r6, r7, lsl #2
 80660c4: f857 1c04    	ldr	r1, [r7, #-4]
 80660c8: f1a7 0804    	sub.w	r8, r7, #0x4
 80660cc: 4608         	mov	r0, r1
 80660ce: f7ff fd07    	bl	0x8065ae0 <__hi0bits>   @ imm = #-0x5f2
 80660d2: f1c0 0320    	rsb.w	r3, r0, #0x20
 80660d6: 280a         	cmp	r0, #0xa
 80660d8: 6023         	str	r3, [r4]
 80660da: dd38         	ble	0x806614e <__b2d+0x9a>  @ imm = #0x70
 80660dc: 4546         	cmp	r6, r8
 80660de: d220         	bhs	0x8066122 <__b2d+0x6e>  @ imm = #0x40
 80660e0: f1b0 030b    	subs.w	r3, r0, #0xb
 80660e4: f857 2c08    	ldr	r2, [r7, #-8]
 80660e8: d028         	beq	0x806613c <__b2d+0x88>  @ imm = #0x50
 80660ea: f1c3 0c20    	rsb.w	r12, r3, #0x20
 80660ee: fa01 f003    	lsl.w	r0, r1, r3
 80660f2: f1a7 0108    	sub.w	r1, r7, #0x8
 80660f6: fa22 f40c    	lsr.w	r4, r2, r12
 80660fa: 428e         	cmp	r6, r1
 80660fc: ea40 0004    	orr.w	r0, r0, r4
 8066100: f040 557f    	orr	r5, r0, #0x3fc00000
 8066104: f445 1540    	orr	r5, r5, #0x300000
 8066108: d23a         	bhs	0x8066180 <__b2d+0xcc>  @ imm = #0x74
 806610a: fa02 f003    	lsl.w	r0, r2, r3
 806610e: f857 3c0c    	ldr	r3, [r7, #-12]
 8066112: fa23 f30c    	lsr.w	r3, r3, r12
 8066116: 4303         	orrs	r3, r0
 8066118: 461c         	mov	r4, r3
 806611a: 4620         	mov	r0, r4
 806611c: 4629         	mov	r1, r5
 806611e: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8066122: f1b0 030b    	subs.w	r3, r0, #0xb
 8066126: d008         	beq	0x806613a <__b2d+0x86>  @ imm = #0x10
 8066128: fa01 f003    	lsl.w	r0, r1, r3
 806612c: 2300         	movs	r3, #0x0
 806612e: f040 557f    	orr	r5, r0, #0x3fc00000
 8066132: 461c         	mov	r4, r3
 8066134: f445 1540    	orr	r5, r5, #0x300000
 8066138: e7ef         	b	0x806611a <__b2d+0x66>  @ imm = #-0x22
 806613a: 461a         	mov	r2, r3
 806613c: f041 557f    	orr	r5, r1, #0x3fc00000
 8066140: 4614         	mov	r4, r2
 8066142: f445 1540    	orr	r5, r5, #0x300000
 8066146: 4620         	mov	r0, r4
 8066148: 4629         	mov	r1, r5
 806614a: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 806614e: f1c0 030b    	rsb.w	r3, r0, #0xb
 8066152: 4546         	cmp	r6, r8
 8066154: fa21 f203    	lsr.w	r2, r1, r3
 8066158: f042 557f    	orr	r5, r2, #0x3fc00000
 806615c: f445 1540    	orr	r5, r5, #0x300000
 8066160: d30a         	blo	0x8066178 <__b2d+0xc4>  @ imm = #0x14
 8066162: 2200         	movs	r2, #0x0
 8066164: f100 0315    	add.w	r3, r0, #0x15
 8066168: fa01 f303    	lsl.w	r3, r1, r3
 806616c: 4629         	mov	r1, r5
 806616e: ea43 0402    	orr.w	r4, r3, r2
 8066172: 4620         	mov	r0, r4
 8066174: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 8066178: f857 2c08    	ldr	r2, [r7, #-8]
 806617c: 40da         	lsrs	r2, r3
 806617e: e7f1         	b	0x8066164 <__b2d+0xb0>  @ imm = #-0x1e
 8066180: fa02 f303    	lsl.w	r3, r2, r3
 8066184: 461c         	mov	r4, r3
 8066186: e7c8         	b	0x806611a <__b2d+0x66>  @ imm = #-0x70

08066188 <__d2b>:
 8066188: b570         	push	{r4, r5, r6, lr}
 806618a: 2101         	movs	r1, #0x1
 806618c: b082         	sub	sp, #0x8
 806618e: 4616         	mov	r6, r2
 8066190: 461d         	mov	r5, r3
 8066192: f7ff fbcb    	bl	0x806592c <_Balloc>     @ imm = #-0x86a
 8066196: 4604         	mov	r4, r0
 8066198: 2800         	cmp	r0, #0x0
 806619a: d04c         	beq	0x8066236 <__d2b+0xae>  @ imm = #0x98
 806619c: 462b         	mov	r3, r5
 806619e: f3c5 550a    	ubfx	r5, r5, #0x14, #0xb
 80661a2: f3c3 0313    	ubfx	r3, r3, #0x0, #0x14
 80661a6: b10d         	cbz	r5, 0x80661ac <__d2b+0x24> @ imm = #0x2
 80661a8: f443 1380    	orr	r3, r3, #0x100000
 80661ac: 2e00         	cmp	r6, #0x0
 80661ae: 9301         	str	r3, [sp, #0x4]
 80661b0: d022         	beq	0x80661f8 <__d2b+0x70>  @ imm = #0x44
 80661b2: 4668         	mov	r0, sp
 80661b4: 9600         	str	r6, [sp]
 80661b6: f7ff fcb5    	bl	0x8065b24 <__lo0bits>   @ imm = #-0x696
 80661ba: 2800         	cmp	r0, #0x0
 80661bc: d037         	beq	0x806622e <__d2b+0xa6>  @ imm = #0x6e
 80661be: 9b01         	ldr	r3, [sp, #0x4]
 80661c0: f1c0 0220    	rsb.w	r2, r0, #0x20
 80661c4: 9900         	ldr	r1, [sp]
 80661c6: fa03 f202    	lsl.w	r2, r3, r2
 80661ca: 40c3         	lsrs	r3, r0
 80661cc: 430a         	orrs	r2, r1
 80661ce: 9301         	str	r3, [sp, #0x4]
 80661d0: 6162         	str	r2, [r4, #0x14]
 80661d2: 2b00         	cmp	r3, #0x0
 80661d4: 61a3         	str	r3, [r4, #0x18]
 80661d6: bf14         	ite	ne
 80661d8: 2102         	movne	r1, #0x2
 80661da: 2101         	moveq	r1, #0x1
 80661dc: 6121         	str	r1, [r4, #0x10]
 80661de: b1b5         	cbz	r5, 0x806620e <__d2b+0x86> @ imm = #0x2c
 80661e0: f2a5 4333    	subw	r3, r5, #0x433
 80661e4: f1c0 0235    	rsb.w	r2, r0, #0x35
 80661e8: 4418         	add	r0, r3
 80661ea: 9b06         	ldr	r3, [sp, #0x18]
 80661ec: 6018         	str	r0, [r3]
 80661ee: 4620         	mov	r0, r4
 80661f0: 9b07         	ldr	r3, [sp, #0x1c]
 80661f2: 601a         	str	r2, [r3]
 80661f4: b002         	add	sp, #0x8
 80661f6: bd70         	pop	{r4, r5, r6, pc}
 80661f8: a801         	add	r0, sp, #0x4
 80661fa: f7ff fc93    	bl	0x8065b24 <__lo0bits>   @ imm = #-0x6da
 80661fe: 2301         	movs	r3, #0x1
 8066200: 9a01         	ldr	r2, [sp, #0x4]
 8066202: 3020         	adds	r0, #0x20
 8066204: 4619         	mov	r1, r3
 8066206: 6123         	str	r3, [r4, #0x10]
 8066208: 6162         	str	r2, [r4, #0x14]
 806620a: 2d00         	cmp	r5, #0x0
 806620c: d1e8         	bne	0x80661e0 <__d2b+0x58>  @ imm = #-0x30
 806620e: eb04 0381    	add.w	r3, r4, r1, lsl #2
 8066212: 9a06         	ldr	r2, [sp, #0x18]
 8066214: f2a0 4032    	subw	r0, r0, #0x432
 8066218: 6010         	str	r0, [r2]
 806621a: 6918         	ldr	r0, [r3, #0x10]
 806621c: f7ff fc60    	bl	0x8065ae0 <__hi0bits>   @ imm = #-0x740
 8066220: 9b07         	ldr	r3, [sp, #0x1c]
 8066222: ebc0 1141    	rsb	r1, r0, r1, lsl #5
 8066226: 4620         	mov	r0, r4
 8066228: 6019         	str	r1, [r3]
 806622a: b002         	add	sp, #0x8
 806622c: bd70         	pop	{r4, r5, r6, pc}
 806622e: e9dd 2300    	ldrd	r2, r3, [sp]
 8066232: 6162         	str	r2, [r4, #0x14]
 8066234: e7cd         	b	0x80661d2 <__d2b+0x4a>  @ imm = #-0x66
 8066236: 4602         	mov	r2, r0
 8066238: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8066244 <__d2b+0xbc>
 806623a: f240 310a    	movw	r1, #0x30a
 806623e: 4802         	ldr	r0, [pc, #0x8]          @ 0x8066248 <__d2b+0xc0>
 8066240: f000 ffac    	bl	0x806719c <__assert_func> @ imm = #0xf58

08066244 <$d>:
 8066244: 40 a1 06 08  	.word	0x0806a140
 8066248: 8c a1 06 08  	.word	0x0806a18c

0806624c <__ratio>:
 806624c: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
 8066250: b083         	sub	sp, #0xc
 8066252: 460f         	mov	r7, r1
 8066254: 4680         	mov	r8, r0
 8066256: 4669         	mov	r1, sp
 8066258: f7ff ff2c    	bl	0x80660b4 <__b2d>       @ imm = #-0x1a8
 806625c: 4604         	mov	r4, r0
 806625e: 460d         	mov	r5, r1
 8066260: 4638         	mov	r0, r7
 8066262: a901         	add	r1, sp, #0x4
 8066264: f7ff ff26    	bl	0x80660b4 <__b2d>       @ imm = #-0x1b4
 8066268: f8d8 3010    	ldr.w	r3, [r8, #0x10]
 806626c: 693a         	ldr	r2, [r7, #0x10]
 806626e: 460f         	mov	r7, r1
 8066270: 4606         	mov	r6, r0
 8066272: 1a9a         	subs	r2, r3, r2
 8066274: e9dd 1300    	ldrd	r1, r3, [sp]
 8066278: 1acb         	subs	r3, r1, r3
 806627a: eb03 1342    	add.w	r3, r3, r2, lsl #5
 806627e: 2b00         	cmp	r3, #0x0
 8066280: dd0b         	ble	0x806629a <__ratio+0x4e> @ imm = #0x16
 8066282: eb05 5903    	add.w	r9, r5, r3, lsl #20
 8066286: 464d         	mov	r5, r9
 8066288: 4632         	mov	r2, r6
 806628a: 463b         	mov	r3, r7
 806628c: 4620         	mov	r0, r4
 806628e: 4629         	mov	r1, r5
 8066290: f002 fbd2    	bl	0x8068a38 <__divdf3>    @ imm = #0x27a4
 8066294: b003         	add	sp, #0xc
 8066296: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 806629a: ebc3 3303    	rsb	r3, r3, r3, lsl #12
 806629e: eb07 5103    	add.w	r1, r7, r3, lsl #20
 80662a2: 460f         	mov	r7, r1
 80662a4: e7f0         	b	0x8066288 <__ratio+0x3c> @ imm = #-0x20
 80662a6: bf00         	nop

080662a8 <_mprec_log10>:
 80662a8: 2817         	cmp	r0, #0x17
 80662aa: b570         	push	{r4, r5, r6, lr}
 80662ac: 4606         	mov	r6, r0
 80662ae: dd0a         	ble	0x80662c6 <_mprec_log10+0x1e> @ imm = #0x14
 80662b0: 2000         	movs	r0, #0x0
 80662b2: 4908         	ldr	r1, [pc, #0x20]         @ 0x80662d4 <_mprec_log10+0x2c>
 80662b4: 2400         	movs	r4, #0x0
 80662b6: 4d08         	ldr	r5, [pc, #0x20]         @ 0x80662d8 <_mprec_log10+0x30>
 80662b8: 4622         	mov	r2, r4
 80662ba: 462b         	mov	r3, r5
 80662bc: f002 fa92    	bl	0x80687e4 <__muldf3>    @ imm = #0x2524
 80662c0: 3e01         	subs	r6, #0x1
 80662c2: d1f9         	bne	0x80662b8 <_mprec_log10+0x10> @ imm = #-0xe
 80662c4: bd70         	pop	{r4, r5, r6, pc}
 80662c6: 4b05         	ldr	r3, [pc, #0x14]         @ 0x80662dc <_mprec_log10+0x34>
 80662c8: eb03 06c0    	add.w	r6, r3, r0, lsl #3
 80662cc: e9d6 0104    	ldrd	r0, r1, [r6, #16]
 80662d0: bd70         	pop	{r4, r5, r6, pc}
 80662d2: bf00         	nop

080662d4 <$d>:
 80662d4: 00 00 f0 3f  	.word	0x3ff00000
 80662d8: 00 00 24 40  	.word	0x40240000
 80662dc: c0 a1 06 08  	.word	0x0806a1c0

080662e0 <__copybits>:
 80662e0: 3901         	subs	r1, #0x1
 80662e2: f102 0314    	add.w	r3, r2, #0x14
 80662e6: ea4f 1c61    	asr.w	r12, r1, #0x5
 80662ea: 6911         	ldr	r1, [r2, #0x10]
 80662ec: eb03 0181    	add.w	r1, r3, r1, lsl #2
 80662f0: f10c 0c01    	add.w	r12, r12, #0x1
 80662f4: 428b         	cmp	r3, r1
 80662f6: eb00 0c8c    	add.w	r12, r0, r12, lsl #2
 80662fa: d216         	bhs	0x806632a <__copybits+0x4a> @ imm = #0x2c
 80662fc: b510         	push	{r4, lr}
 80662fe: f1a0 0e04    	sub.w	lr, r0, #0x4
 8066302: f853 4b04    	ldr	r4, [r3], #4
 8066306: 4299         	cmp	r1, r3
 8066308: f84e 4f04    	str	r4, [lr, #4]!
 806630c: d8f9         	bhi	0x8066302 <__copybits+0x22> @ imm = #-0xe
 806630e: 1a8b         	subs	r3, r1, r2
 8066310: 3b15         	subs	r3, #0x15
 8066312: f023 0303    	bic	r3, r3, #0x3
 8066316: 3304         	adds	r3, #0x4
 8066318: 4418         	add	r0, r3
 806631a: 4584         	cmp	r12, r0
 806631c: d904         	bls	0x8066328 <__copybits+0x48> @ imm = #0x8
 806631e: 2300         	movs	r3, #0x0
 8066320: f840 3b04    	str	r3, [r0], #4
 8066324: 4584         	cmp	r12, r0
 8066326: d8fb         	bhi	0x8066320 <__copybits+0x40> @ imm = #-0xa
 8066328: bd10         	pop	{r4, pc}
 806632a: 4584         	cmp	r12, r0
 806632c: d905         	bls	0x806633a <__copybits+0x5a> @ imm = #0xa
 806632e: 2300         	movs	r3, #0x0
 8066330: f840 3b04    	str	r3, [r0], #4
 8066334: 4584         	cmp	r12, r0
 8066336: d8fb         	bhi	0x8066330 <__copybits+0x50> @ imm = #-0xa
 8066338: 4770         	bx	lr
 806633a: 4770         	bx	lr

0806633c <__any_on>:
 806633c: 6903         	ldr	r3, [r0, #0x10]
 806633e: 114a         	asrs	r2, r1, #0x5
 8066340: 3014         	adds	r0, #0x14
 8066342: 4293         	cmp	r3, r2
 8066344: da09         	bge	0x806635a <__any_on+0x1e> @ imm = #0x12
 8066346: eb00 0383    	add.w	r3, r0, r3, lsl #2
 806634a: e002         	b	0x8066352 <__any_on+0x16> @ imm = #0x4
 806634c: f853 2d04    	ldr	r2, [r3, #-4]!
 8066350: b9c2         	cbnz	r2, 0x8066384 <__any_on+0x48> @ imm = #0x30
 8066352: 4283         	cmp	r3, r0
 8066354: d8fa         	bhi	0x806634c <__any_on+0x10> @ imm = #-0xc
 8066356: 2000         	movs	r0, #0x0
 8066358: 4770         	bx	lr
 806635a: dd10         	ble	0x806637e <__any_on+0x42> @ imm = #0x20
 806635c: f011 011f    	ands	r1, r1, #0x1f
 8066360: d00d         	beq	0x806637e <__any_on+0x42> @ imm = #0x1a
 8066362: eb00 0382    	add.w	r3, r0, r2, lsl #2
 8066366: b410         	push	{r4}
 8066368: f850 4022    	ldr.w	r4, [r0, r2, lsl #2]
 806636c: fa24 f201    	lsr.w	r2, r4, r1
 8066370: fa02 f101    	lsl.w	r1, r2, r1
 8066374: 428c         	cmp	r4, r1
 8066376: d00b         	beq	0x8066390 <__any_on+0x54> @ imm = #0x16
 8066378: 2001         	movs	r0, #0x1
 806637a: bc10         	pop	{r4}
 806637c: 4770         	bx	lr
 806637e: eb00 0382    	add.w	r3, r0, r2, lsl #2
 8066382: e7e6         	b	0x8066352 <__any_on+0x16> @ imm = #-0x34
 8066384: 2001         	movs	r0, #0x1
 8066386: 4770         	bx	lr
 8066388: f853 2d04    	ldr	r2, [r3, #-4]!
 806638c: 2a00         	cmp	r2, #0x0
 806638e: d1f3         	bne	0x8066378 <__any_on+0x3c> @ imm = #-0x1a
 8066390: 4283         	cmp	r3, r0
 8066392: d8f9         	bhi	0x8066388 <__any_on+0x4c> @ imm = #-0xe
 8066394: 2000         	movs	r0, #0x0
 8066396: bc10         	pop	{r4}
 8066398: 4770         	bx	lr
 806639a: bf00         	nop

0806639c <_sbrk_r>:
 806639c: b538         	push	{r3, r4, r5, lr}
 806639e: 2200         	movs	r2, #0x0
 80663a0: 4d06         	ldr	r5, [pc, #0x18]         @ 0x80663bc <_sbrk_r+0x20>
 80663a2: 4604         	mov	r4, r0
 80663a4: 4608         	mov	r0, r1
 80663a6: 602a         	str	r2, [r5]
 80663a8: f002 f846    	bl	0x8068438 <_sbrk>       @ imm = #0x208c
 80663ac: 1c43         	adds	r3, r0, #0x1
 80663ae: d000         	beq	0x80663b2 <_sbrk_r+0x16> @ imm = #0x0
 80663b0: bd38         	pop	{r3, r4, r5, pc}
 80663b2: 682b         	ldr	r3, [r5]
 80663b4: 2b00         	cmp	r3, #0x0
 80663b6: d0fb         	beq	0x80663b0 <_sbrk_r+0x14> @ imm = #-0xa
 80663b8: 6023         	str	r3, [r4]
 80663ba: bd38         	pop	{r3, r4, r5, pc}

080663bc <$d>:
 80663bc: 9c 3f 00 20  	.word	0x20003f9c

080663c0 <__sread>:
 80663c0: b510         	push	{r4, lr}
 80663c2: 460c         	mov	r4, r1
 80663c4: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 80663c8: f001 faf4    	bl	0x80679b4 <_read_r>     @ imm = #0x15e8
 80663cc: 2800         	cmp	r0, #0x0
 80663ce: db03         	blt	0x80663d8 <__sread+0x18> @ imm = #0x6
 80663d0: 6d23         	ldr	r3, [r4, #0x50]
 80663d2: 4403         	add	r3, r0
 80663d4: 6523         	str	r3, [r4, #0x50]
 80663d6: bd10         	pop	{r4, pc}
 80663d8: 89a3         	ldrh	r3, [r4, #0xc]
 80663da: f423 5380    	bic	r3, r3, #0x1000
 80663de: 81a3         	strh	r3, [r4, #0xc]
 80663e0: bd10         	pop	{r4, pc}
 80663e2: bf00         	nop

080663e4 <__seofread>:
 80663e4: 2000         	movs	r0, #0x0
 80663e6: 4770         	bx	lr

080663e8 <__swrite>:
 80663e8: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 80663ec: 460c         	mov	r4, r1
 80663ee: f9b1 100c    	ldrsh.w	r1, [r1, #0xc]
 80663f2: 461f         	mov	r7, r3
 80663f4: 4605         	mov	r5, r0
 80663f6: 05cb         	lsls	r3, r1, #0x17
 80663f8: 4616         	mov	r6, r2
 80663fa: d40b         	bmi	0x8066414 <__swrite+0x2c> @ imm = #0x16
 80663fc: f421 5180    	bic	r1, r1, #0x1000
 8066400: 463b         	mov	r3, r7
 8066402: 4632         	mov	r2, r6
 8066404: 4628         	mov	r0, r5
 8066406: 81a1         	strh	r1, [r4, #0xc]
 8066408: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 806640c: e8bd 41f0    	pop.w	{r4, r5, r6, r7, r8, lr}
 8066410: f000 beae    	b.w	0x8067170 <_write_r>    @ imm = #0xd5c
 8066414: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 8066418: 2302         	movs	r3, #0x2
 806641a: 2200         	movs	r2, #0x0
 806641c: f001 fa18    	bl	0x8067850 <_lseek_r>    @ imm = #0x1430
 8066420: f9b4 100c    	ldrsh.w	r1, [r4, #0xc]
 8066424: e7ea         	b	0x80663fc <__swrite+0x14> @ imm = #-0x2c
 8066426: bf00         	nop

08066428 <__sseek>:
 8066428: b510         	push	{r4, lr}
 806642a: 460c         	mov	r4, r1
 806642c: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 8066430: f001 fa0e    	bl	0x8067850 <_lseek_r>    @ imm = #0x141c
 8066434: 1c42         	adds	r2, r0, #0x1
 8066436: 89a3         	ldrh	r3, [r4, #0xc]
 8066438: d004         	beq	0x8066444 <__sseek+0x1c> @ imm = #0x8
 806643a: f443 5380    	orr	r3, r3, #0x1000
 806643e: 6520         	str	r0, [r4, #0x50]
 8066440: 81a3         	strh	r3, [r4, #0xc]
 8066442: bd10         	pop	{r4, pc}
 8066444: f423 5380    	bic	r3, r3, #0x1000
 8066448: 81a3         	strh	r3, [r4, #0xc]
 806644a: bd10         	pop	{r4, pc}

0806644c <__sclose>:
 806644c: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 8066450: f000 bef8    	b.w	0x8067244 <_close_r>    @ imm = #0xdf0

08066454 <strlen>:
 8066454: f020 0103    	bic	r1, r0, #0x3
 8066458: f010 0003    	ands	r0, r0, #0x3
 806645c: f1c0 0000    	rsb.w	r0, r0, #0x0
 8066460: f851 3b04    	ldr	r3, [r1], #4
 8066464: f100 0c04    	add.w	r12, r0, #0x4
 8066468: ea4f 0ccc    	lsl.w	r12, r12, #0x3
 806646c: f06f 0200    	mvn	r2, #0x0
 8066470: bf1c         	itt	ne
 8066472: fa22 f20c    	lsrne.w	r2, r2, r12
 8066476: 4313         	orrne	r3, r2
 8066478: f04f 0c01    	mov.w	r12, #0x1
 806647c: ea4c 2c0c    	orr.w	r12, r12, r12, lsl #8
 8066480: ea4c 4c0c    	orr.w	r12, r12, r12, lsl #16
 8066484: eba3 020c    	sub.w	r2, r3, r12
 8066488: ea22 0203    	bic.w	r2, r2, r3
 806648c: ea12 12cc    	ands.w	r2, r2, r12, lsl #7
 8066490: bf04         	itt	eq
 8066492: f851 3b04    	ldreq	r3, [r1], #4
 8066496: 3004         	addeq	r0, #0x4
 8066498: d0f4         	beq	0x8066484 <strlen+0x30> @ imm = #-0x18
 806649a: f1c2 0100    	rsb.w	r1, r2, #0x0
 806649e: ea02 0201    	and.w	r2, r2, r1
 80664a2: fab2 f282    	clz	r2, r2
 80664a6: f1c2 021f    	rsb.w	r2, r2, #0x1f
 80664aa: eb00 00d2    	add.w	r0, r0, r2, lsr #3
 80664ae: 4770         	bx	lr

080664b0 <__sprint_r.part.0>:
 80664b0: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80664b4: 6e4b         	ldr	r3, [r1, #0x64]
 80664b6: 4690         	mov	r8, r2
 80664b8: 049c         	lsls	r4, r3, #0x12
 80664ba: d52c         	bpl	0x8066516 <__sprint_r.part.0+0x66> @ imm = #0x58
 80664bc: 6893         	ldr	r3, [r2, #0x8]
 80664be: 6812         	ldr	r2, [r2]
 80664c0: b33b         	cbz	r3, 0x8066512 <__sprint_r.part.0+0x62> @ imm = #0x4e
 80664c2: 468b         	mov	r11, r1
 80664c4: 4606         	mov	r6, r0
 80664c6: f102 0908    	add.w	r9, r2, #0x8
 80664ca: e959 5a02    	ldrd	r5, r10, [r9, #-8]
 80664ce: ea5f 079a    	lsrs.w	r7, r10, #0x2
 80664d2: d014         	beq	0x80664fe <__sprint_r.part.0+0x4e> @ imm = #0x28
 80664d4: 3d04         	subs	r5, #0x4
 80664d6: 2400         	movs	r4, #0x0
 80664d8: e001         	b	0x80664de <__sprint_r.part.0+0x2e> @ imm = #0x2
 80664da: 42a7         	cmp	r7, r4
 80664dc: d00d         	beq	0x80664fa <__sprint_r.part.0+0x4a> @ imm = #0x1a
 80664de: 465a         	mov	r2, r11
 80664e0: f855 1f04    	ldr	r1, [r5, #4]!
 80664e4: 4630         	mov	r0, r6
 80664e6: 3401         	adds	r4, #0x1
 80664e8: f000 ff9c    	bl	0x8067424 <_fputwc_r>   @ imm = #0xf38
 80664ec: 1c43         	adds	r3, r0, #0x1
 80664ee: d1f4         	bne	0x80664da <__sprint_r.part.0+0x2a> @ imm = #-0x18
 80664f0: 2300         	movs	r3, #0x0
 80664f2: e9c8 3301    	strd	r3, r3, [r8, #4]
 80664f6: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80664fa: f8d8 3008    	ldr.w	r3, [r8, #0x8]
 80664fe: f02a 0a03    	bic	r10, r10, #0x3
 8066502: f109 0908    	add.w	r9, r9, #0x8
 8066506: eba3 030a    	sub.w	r3, r3, r10
 806650a: f8c8 3008    	str.w	r3, [r8, #0x8]
 806650e: 2b00         	cmp	r3, #0x0
 8066510: d1db         	bne	0x80664ca <__sprint_r.part.0+0x1a> @ imm = #-0x4a
 8066512: 2000         	movs	r0, #0x0
 8066514: e7ec         	b	0x80664f0 <__sprint_r.part.0+0x40> @ imm = #-0x28
 8066516: f000 ffcd    	bl	0x80674b4 <__sfvwrite_r> @ imm = #0xf9a
 806651a: 2300         	movs	r3, #0x0
 806651c: e9c8 3301    	strd	r3, r3, [r8, #4]
 8066520: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

08066524 <__sprint_r>:
 8066524: b410         	push	{r4}
 8066526: 6894         	ldr	r4, [r2, #0x8]
 8066528: b10c         	cbz	r4, 0x806652e <__sprint_r+0xa> @ imm = #0x2
 806652a: bc10         	pop	{r4}
 806652c: e7c0         	b	0x80664b0 <__sprint_r.part.0> @ imm = #-0x80
 806652e: 4620         	mov	r0, r4
 8066530: 6054         	str	r4, [r2, #0x4]
 8066532: bc10         	pop	{r4}
 8066534: 4770         	bx	lr
 8066536: bf00         	nop

08066538 <_vfiprintf_r>:
 8066538: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 806653c: b0ab         	sub	sp, #0xac
 806653e: 461c         	mov	r4, r3
 8066540: 468b         	mov	r11, r1
 8066542: 4617         	mov	r7, r2
 8066544: 4680         	mov	r8, r0
 8066546: 9306         	str	r3, [sp, #0x18]
 8066548: b118         	cbz	r0, 0x8066552 <_vfiprintf_r+0x1a> @ imm = #0x6
 806654a: 6b83         	ldr	r3, [r0, #0x38]
 806654c: 2b00         	cmp	r3, #0x0
 806654e: f000 8224    	beq.w	0x806699a <_vfiprintf_r+0x462> @ imm = #0x448
 8066552: f9bb 100c    	ldrsh.w	r1, [r11, #0xc]
 8066556: 048e         	lsls	r6, r1, #0x12
 8066558: b28a         	uxth	r2, r1
 806655a: d40a         	bmi	0x8066572 <_vfiprintf_r+0x3a> @ imm = #0x14
 806655c: f441 5200    	orr	r2, r1, #0x2000
 8066560: f8db 3064    	ldr.w	r3, [r11, #0x64]
 8066564: f8ab 200c    	strh.w	r2, [r11, #0xc]
 8066568: f423 5300    	bic	r3, r3, #0x2000
 806656c: b292         	uxth	r2, r2
 806656e: f8cb 3064    	str.w	r3, [r11, #0x64]
 8066572: 0715         	lsls	r5, r2, #0x1c
 8066574: f140 80b0    	bpl.w	0x80666d8 <_vfiprintf_r+0x1a0> @ imm = #0x160
 8066578: f8db 3010    	ldr.w	r3, [r11, #0x10]
 806657c: 2b00         	cmp	r3, #0x0
 806657e: f000 80ab    	beq.w	0x80666d8 <_vfiprintf_r+0x1a0> @ imm = #0x156
 8066582: f002 021a    	and	r2, r2, #0x1a
 8066586: 2a0a         	cmp	r2, #0xa
 8066588: f000 80b4    	beq.w	0x80666f4 <_vfiprintf_r+0x1bc> @ imm = #0x168
 806658c: ab1a         	add	r3, sp, #0x68
 806658e: f10d 0968    	add.w	r9, sp, #0x68
 8066592: 930d         	str	r3, [sp, #0x34]
 8066594: 2300         	movs	r3, #0x0
 8066596: e9cd 330e    	strd	r3, r3, [sp, #56]
 806659a: 9309         	str	r3, [sp, #0x24]
 806659c: 9305         	str	r3, [sp, #0x14]
 806659e: 783b         	ldrb	r3, [r7]
 80665a0: 463c         	mov	r4, r7
 80665a2: b1d3         	cbz	r3, 0x80665da <_vfiprintf_r+0xa2> @ imm = #0x34
 80665a4: 2b25         	cmp	r3, #0x25
 80665a6: d018         	beq	0x80665da <_vfiprintf_r+0xa2> @ imm = #0x30
 80665a8: 4625         	mov	r5, r4
 80665aa: f814 3f01    	ldrb	r3, [r4, #1]!
 80665ae: b10b         	cbz	r3, 0x80665b4 <_vfiprintf_r+0x7c> @ imm = #0x2
 80665b0: 2b25         	cmp	r3, #0x25
 80665b2: d1f9         	bne	0x80665a8 <_vfiprintf_r+0x70> @ imm = #-0xe
 80665b4: 1be6         	subs	r6, r4, r7
 80665b6: d010         	beq	0x80665da <_vfiprintf_r+0xa2> @ imm = #0x20
 80665b8: 9b0e         	ldr	r3, [sp, #0x38]
 80665ba: 9a0f         	ldr	r2, [sp, #0x3c]
 80665bc: 3301         	adds	r3, #0x1
 80665be: 4432         	add	r2, r6
 80665c0: 2b07         	cmp	r3, #0x7
 80665c2: 930e         	str	r3, [sp, #0x38]
 80665c4: 920f         	str	r2, [sp, #0x3c]
 80665c6: e9c9 7600    	strd	r7, r6, [r9]
 80665ca: f300 8175    	bgt.w	0x80668b8 <_vfiprintf_r+0x380> @ imm = #0x2ea
 80665ce: f109 0908    	add.w	r9, r9, #0x8
 80665d2: 9b05         	ldr	r3, [sp, #0x14]
 80665d4: 4433         	add	r3, r6
 80665d6: 9305         	str	r3, [sp, #0x14]
 80665d8: 786b         	ldrb	r3, [r5, #0x1]
 80665da: 2b00         	cmp	r3, #0x0
 80665dc: f000 8178    	beq.w	0x80668d0 <_vfiprintf_r+0x398> @ imm = #0x2f0
 80665e0: 2100         	movs	r1, #0x0
 80665e2: f04f 0200    	mov.w	r2, #0x0
 80665e6: 1c67         	adds	r7, r4, #0x1
 80665e8: 7863         	ldrb	r3, [r4, #0x1]
 80665ea: f04f 3aff    	mov.w	r10, #0xffffffff
 80665ee: 4608         	mov	r0, r1
 80665f0: 460d         	mov	r5, r1
 80665f2: f88d 202f    	strb.w	r2, [sp, #0x2f]
 80665f6: 9104         	str	r1, [sp, #0x10]
 80665f8: 3701         	adds	r7, #0x1
 80665fa: f1a3 0220    	sub.w	r2, r3, #0x20
 80665fe: 2a58         	cmp	r2, #0x58
 8066600: f200 8173    	bhi.w	0x80668ea <_vfiprintf_r+0x3b2> @ imm = #0x2e6
 8066604: e8df f012    	tbh	[pc, r2, lsl #1]

08066608 <$d>:
 8066608: 77 02 71 01  	.word	0x01710277
 806660c: 71 01 73 02  	.word	0x02730171
 8066610: 71 01 71 01  	.word	0x01710171
 8066614: 71 01 71 01  	.word	0x01710171
 8066618: 71 01 71 01  	.word	0x01710171
 806661c: d7 01 6f 02  	.word	0x026f01d7
 8066620: 71 01 e2 01  	.word	0x01e20171
 8066624: 3b 02 71 01  	.word	0x0171023b
 8066628: 6b 02 59 00  	.word	0x0059026b
 806662c: 59 00 59 00  	.word	0x00590059
 8066630: 59 00 59 00  	.word	0x00590059
 8066634: 59 00 59 00  	.word	0x00590059
 8066638: 59 00 59 00  	.word	0x00590059
 806663c: 71 01 71 01  	.word	0x01710171
 8066640: 71 01 71 01  	.word	0x01710171
 8066644: 71 01 71 01  	.word	0x01710171
 8066648: 71 01 71 01  	.word	0x01710171
 806664c: 71 01 71 01  	.word	0x01710171
 8066650: 54 02 71 01  	.word	0x01710254
 8066654: 71 01 71 01  	.word	0x01710171
 8066658: 71 01 71 01  	.word	0x01710171
 806665c: 71 01 71 01  	.word	0x01710171
 8066660: 71 01 71 01  	.word	0x01710171
 8066664: 71 01 94 00  	.word	0x00940171
 8066668: 71 01 71 01  	.word	0x01710171
 806666c: 71 01 71 01  	.word	0x01710171
 8066670: 71 01 84 00  	.word	0x00840171
 8066674: 71 01 71 01  	.word	0x01710171
 8066678: ab 02 71 01  	.word	0x017102ab
 806667c: 71 01 71 01  	.word	0x01710171
 8066680: 71 01 71 01  	.word	0x01710171
 8066684: 71 01 71 01  	.word	0x01710171
 8066688: 71 01 71 01  	.word	0x01710171
 806668c: 71 01 9c 02  	.word	0x029c0171
 8066690: 9e 01 71 01  	.word	0x0171019e
 8066694: 71 01 71 01  	.word	0x01710171
 8066698: 7e 02 9e 01  	.word	0x019e027e
 806669c: 71 01 71 01  	.word	0x01710171
 80666a0: 95 02 71 01  	.word	0x01710295
 80666a4: 82 02 96 00  	.word	0x00960282
 80666a8: 2a 02 26 02  	.word	0x0226022a
 80666ac: 71 01 07 02  	.word	0x02070171
 80666b0: 71 01 86 00  	.word	0x00860171
 80666b4: 71 01 71 01  	.word	0x01710171
 80666b8: e6 01        	.short	0x01e6

080666ba <$t>:
 80666ba: f1a3 0230    	sub.w	r2, r3, #0x30
 80666be: 2400         	movs	r4, #0x0
 80666c0: eb04 0484    	add.w	r4, r4, r4, lsl #2
 80666c4: f817 3b01    	ldrb	r3, [r7], #1
 80666c8: eb02 0444    	add.w	r4, r2, r4, lsl #1
 80666cc: f1a3 0230    	sub.w	r2, r3, #0x30
 80666d0: 2a09         	cmp	r2, #0x9
 80666d2: d9f5         	bls	0x80666c0 <_vfiprintf_r+0x188> @ imm = #-0x16
 80666d4: 9404         	str	r4, [sp, #0x10]
 80666d6: e790         	b	0x80665fa <_vfiprintf_r+0xc2> @ imm = #-0xe0
 80666d8: 4659         	mov	r1, r11
 80666da: 4640         	mov	r0, r8
 80666dc: f7fd f986    	bl	0x80639ec <__swsetup_r> @ imm = #-0x2cf4
 80666e0: 2800         	cmp	r0, #0x0
 80666e2: f040 84ef    	bne.w	0x80670c4 <_vfiprintf_r+0xb8c> @ imm = #0x9de
 80666e6: f8bb 200c    	ldrh.w	r2, [r11, #0xc]
 80666ea: f002 021a    	and	r2, r2, #0x1a
 80666ee: 2a0a         	cmp	r2, #0xa
 80666f0: f47f af4c    	bne.w	0x806658c <_vfiprintf_r+0x54> @ imm = #-0x168
 80666f4: f9bb 300e    	ldrsh.w	r3, [r11, #0xe]
 80666f8: 2b00         	cmp	r3, #0x0
 80666fa: f6ff af47    	blt.w	0x806658c <_vfiprintf_r+0x54> @ imm = #-0x172
 80666fe: 4623         	mov	r3, r4
 8066700: 463a         	mov	r2, r7
 8066702: 4659         	mov	r1, r11
 8066704: 4640         	mov	r0, r8
 8066706: b02b         	add	sp, #0xac
 8066708: e8bd 4ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 806670c: f000 bcfa    	b.w	0x8067104 <__sbprintf>  @ imm = #0x9f4
 8066710: f045 0510    	orr	r5, r5, #0x10
 8066714: f015 0120    	ands	r1, r5, #0x20
 8066718: 9a06         	ldr	r2, [sp, #0x18]
 806671a: f000 8106    	beq.w	0x806692a <_vfiprintf_r+0x3f2> @ imm = #0x20c
 806671e: 3207         	adds	r2, #0x7
 8066720: 2301         	movs	r3, #0x1
 8066722: f022 0207    	bic	r2, r2, #0x7
 8066726: 6851         	ldr	r1, [r2, #0x4]
 8066728: f852 0b08    	ldr	r0, [r2], #8
 806672c: 9206         	str	r2, [sp, #0x18]
 806672e: e00e         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #0x1c
 8066730: f045 0510    	orr	r5, r5, #0x10
 8066734: f015 0120    	ands	r1, r5, #0x20
 8066738: f000 80ea    	beq.w	0x8066910 <_vfiprintf_r+0x3d8> @ imm = #0x1d4
 806673c: 9a06         	ldr	r2, [sp, #0x18]
 806673e: 2300         	movs	r3, #0x0
 8066740: 3207         	adds	r2, #0x7
 8066742: f022 0207    	bic	r2, r2, #0x7
 8066746: 6851         	ldr	r1, [r2, #0x4]
 8066748: f852 0b08    	ldr	r0, [r2], #8
 806674c: 9206         	str	r2, [sp, #0x18]
 806674e: f04f 0200    	mov.w	r2, #0x0
 8066752: 2600         	movs	r6, #0x0
 8066754: f88d 202f    	strb.w	r2, [sp, #0x2f]
 8066758: f1ba 3fff    	cmp.w	r10, #0xffffffff
 806675c: f000 8223    	beq.w	0x8066ba6 <_vfiprintf_r+0x66e> @ imm = #0x446
 8066760: f025 0280    	bic	r2, r5, #0x80
 8066764: 9202         	str	r2, [sp, #0x8]
 8066766: ea50 0201    	orrs.w	r2, r0, r1
 806676a: f040 821b    	bne.w	0x8066ba4 <_vfiprintf_r+0x66c> @ imm = #0x436
 806676e: f1ba 0200    	subs.w	r2, r10, #0x0
 8066772: bf18         	it	ne
 8066774: 2201         	movne	r2, #0x1
 8066776: f1ba 0f00    	cmp.w	r10, #0x0
 806677a: f040 8213    	bne.w	0x8066ba4 <_vfiprintf_r+0x66c> @ imm = #0x426
 806677e: 2b00         	cmp	r3, #0x0
 8066780: f040 8399    	bne.w	0x8066eb6 <_vfiprintf_r+0x97e> @ imm = #0x732
 8066784: f015 0201    	ands	r2, r5, #0x1
 8066788: 469a         	mov	r10, r3
 806678a: 9203         	str	r2, [sp, #0xc]
 806678c: f000 83c7    	beq.w	0x8066f1e <_vfiprintf_r+0x9e6> @ imm = #0x78e
 8066790: 2330         	movs	r3, #0x30
 8066792: f10d 0467    	add.w	r4, sp, #0x67
 8066796: f88d 3067    	strb.w	r3, [sp, #0x67]
 806679a: 9b03         	ldr	r3, [sp, #0xc]
 806679c: 4553         	cmp	r3, r10
 806679e: bfb8         	it	lt
 80667a0: 4653         	movlt	r3, r10
 80667a2: 9301         	str	r3, [sp, #0x4]
 80667a4: b10e         	cbz	r6, 0x80667aa <_vfiprintf_r+0x272> @ imm = #0x2
 80667a6: 3301         	adds	r3, #0x1
 80667a8: 9301         	str	r3, [sp, #0x4]
 80667aa: 9b02         	ldr	r3, [sp, #0x8]
 80667ac: f013 0302    	ands	r3, r3, #0x2
 80667b0: 9307         	str	r3, [sp, #0x1c]
 80667b2: d002         	beq	0x80667ba <_vfiprintf_r+0x282> @ imm = #0x4
 80667b4: 9b01         	ldr	r3, [sp, #0x4]
 80667b6: 3302         	adds	r3, #0x2
 80667b8: 9301         	str	r3, [sp, #0x4]
 80667ba: 9b02         	ldr	r3, [sp, #0x8]
 80667bc: f013 0384    	ands	r3, r3, #0x84
 80667c0: 9308         	str	r3, [sp, #0x20]
 80667c2: d105         	bne	0x80667d0 <_vfiprintf_r+0x298> @ imm = #0xa
 80667c4: 9b04         	ldr	r3, [sp, #0x10]
 80667c6: 9a01         	ldr	r2, [sp, #0x4]
 80667c8: 1a9d         	subs	r5, r3, r2
 80667ca: 2d00         	cmp	r5, #0x0
 80667cc: f300 82de    	bgt.w	0x8066d8c <_vfiprintf_r+0x854> @ imm = #0x5bc
 80667d0: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 80667d4: 1c51         	adds	r1, r2, #0x1
 80667d6: f89d 002f    	ldrb.w	r0, [sp, #0x2f]
 80667da: b190         	cbz	r0, 0x8066802 <_vfiprintf_r+0x2ca> @ imm = #0x24
 80667dc: f10d 022f    	add.w	r2, sp, #0x2f
 80667e0: f10c 0c01    	add.w	r12, r12, #0x1
 80667e4: 2907         	cmp	r1, #0x7
 80667e6: f8c9 2000    	str.w	r2, [r9]
 80667ea: f04f 0201    	mov.w	r2, #0x1
 80667ee: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 80667f2: f8c9 2004    	str.w	r2, [r9, #0x4]
 80667f6: f300 82aa    	bgt.w	0x8066d4e <_vfiprintf_r+0x816> @ imm = #0x554
 80667fa: 460a         	mov	r2, r1
 80667fc: f109 0908    	add.w	r9, r9, #0x8
 8066800: 3101         	adds	r1, #0x1
 8066802: 9b07         	ldr	r3, [sp, #0x1c]
 8066804: b1eb         	cbz	r3, 0x8066842 <_vfiprintf_r+0x30a> @ imm = #0x3a
 8066806: ab0c         	add	r3, sp, #0x30
 8066808: f10c 0c02    	add.w	r12, r12, #0x2
 806680c: 2907         	cmp	r1, #0x7
 806680e: f8c9 3000    	str.w	r3, [r9]
 8066812: f04f 0302    	mov.w	r3, #0x2
 8066816: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 806681a: f8c9 3004    	str.w	r3, [r9, #0x4]
 806681e: f340 82b0    	ble.w	0x8066d82 <_vfiprintf_r+0x84a> @ imm = #0x560
 8066822: f1bc 0f00    	cmp.w	r12, #0x0
 8066826: f000 835d    	beq.w	0x8066ee4 <_vfiprintf_r+0x9ac> @ imm = #0x6ba
 806682a: aa0d         	add	r2, sp, #0x34
 806682c: 4659         	mov	r1, r11
 806682e: 4640         	mov	r0, r8
 8066830: f7ff fe3e    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x384
 8066834: 2800         	cmp	r0, #0x0
 8066836: d14f         	bne	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #0x9e
 8066838: f10d 0968    	add.w	r9, sp, #0x68
 806683c: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 8066840: 1c51         	adds	r1, r2, #0x1
 8066842: 9b08         	ldr	r3, [sp, #0x20]
 8066844: 2b80         	cmp	r3, #0x80
 8066846: f000 81e1    	beq.w	0x8066c0c <_vfiprintf_r+0x6d4> @ imm = #0x3c2
 806684a: 9b03         	ldr	r3, [sp, #0xc]
 806684c: ebaa 0603    	sub.w	r6, r10, r3
 8066850: 2e00         	cmp	r6, #0x0
 8066852: f300 8238    	bgt.w	0x8066cc6 <_vfiprintf_r+0x78e> @ imm = #0x470
 8066856: 9a03         	ldr	r2, [sp, #0xc]
 8066858: 2907         	cmp	r1, #0x7
 806685a: f8c9 4000    	str.w	r4, [r9]
 806685e: eb02 030c    	add.w	r3, r2, r12
 8066862: f8c9 2004    	str.w	r2, [r9, #0x4]
 8066866: e9cd 130e    	strd	r1, r3, [sp, #56]
 806686a: f340 8198    	ble.w	0x8066b9e <_vfiprintf_r+0x666> @ imm = #0x330
 806686e: 2b00         	cmp	r3, #0x0
 8066870: f000 82cc    	beq.w	0x8066e0c <_vfiprintf_r+0x8d4> @ imm = #0x598
 8066874: aa0d         	add	r2, sp, #0x34
 8066876: 4659         	mov	r1, r11
 8066878: 4640         	mov	r0, r8
 806687a: f7ff fe19    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x3ce
 806687e: bb58         	cbnz	r0, 0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #0x56
 8066880: 9b0f         	ldr	r3, [sp, #0x3c]
 8066882: f10d 0968    	add.w	r9, sp, #0x68
 8066886: 9a02         	ldr	r2, [sp, #0x8]
 8066888: 0752         	lsls	r2, r2, #0x1d
 806688a: d505         	bpl	0x8066898 <_vfiprintf_r+0x360> @ imm = #0xa
 806688c: 9a04         	ldr	r2, [sp, #0x10]
 806688e: 9901         	ldr	r1, [sp, #0x4]
 8066890: 1a54         	subs	r4, r2, r1
 8066892: 2c00         	cmp	r4, #0x0
 8066894: f300 82c5    	bgt.w	0x8066e22 <_vfiprintf_r+0x8ea> @ imm = #0x58a
 8066898: 9801         	ldr	r0, [sp, #0x4]
 806689a: e9dd 1204    	ldrd	r1, r2, [sp, #16]
 806689e: 4281         	cmp	r1, r0
 80668a0: bfac         	ite	ge
 80668a2: 1852         	addge	r2, r2, r1
 80668a4: 1812         	addlt	r2, r2, r0
 80668a6: 9205         	str	r2, [sp, #0x14]
 80668a8: 2b00         	cmp	r3, #0x0
 80668aa: f040 8247    	bne.w	0x8066d3c <_vfiprintf_r+0x804> @ imm = #0x48e
 80668ae: 2300         	movs	r3, #0x0
 80668b0: f10d 0968    	add.w	r9, sp, #0x68
 80668b4: 930e         	str	r3, [sp, #0x38]
 80668b6: e672         	b	0x806659e <_vfiprintf_r+0x66> @ imm = #-0x31c
 80668b8: 2a00         	cmp	r2, #0x0
 80668ba: f000 832b    	beq.w	0x8066f14 <_vfiprintf_r+0x9dc> @ imm = #0x656
 80668be: aa0d         	add	r2, sp, #0x34
 80668c0: 4659         	mov	r1, r11
 80668c2: 4640         	mov	r0, r8
 80668c4: f7ff fdf4    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x418
 80668c8: b930         	cbnz	r0, 0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #0xc
 80668ca: f10d 0968    	add.w	r9, sp, #0x68
 80668ce: e680         	b	0x80665d2 <_vfiprintf_r+0x9a> @ imm = #-0x300
 80668d0: 9b0f         	ldr	r3, [sp, #0x3c]
 80668d2: 2b00         	cmp	r3, #0x0
 80668d4: f040 83ca    	bne.w	0x806706c <_vfiprintf_r+0xb34> @ imm = #0x794
 80668d8: f8bb 300c    	ldrh.w	r3, [r11, #0xc]
 80668dc: 065b         	lsls	r3, r3, #0x19
 80668de: f100 83f1    	bmi.w	0x80670c4 <_vfiprintf_r+0xb8c> @ imm = #0x7e2
 80668e2: 9805         	ldr	r0, [sp, #0x14]
 80668e4: b02b         	add	sp, #0xac
 80668e6: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80668ea: 2900         	cmp	r1, #0x0
 80668ec: f040 83bb    	bne.w	0x8067066 <_vfiprintf_r+0xb2e> @ imm = #0x776
 80668f0: 2b00         	cmp	r3, #0x0
 80668f2: d0ed         	beq	0x80668d0 <_vfiprintf_r+0x398> @ imm = #-0x26
 80668f4: f88d 3040    	strb.w	r3, [sp, #0x40]
 80668f8: f04f 0300    	mov.w	r3, #0x0
 80668fc: ac10         	add	r4, sp, #0x40
 80668fe: f88d 302f    	strb.w	r3, [sp, #0x2f]
 8066902: 2301         	movs	r3, #0x1
 8066904: 9301         	str	r3, [sp, #0x4]
 8066906: 9303         	str	r3, [sp, #0xc]
 8066908: f04f 0a00    	mov.w	r10, #0x0
 806690c: 9502         	str	r5, [sp, #0x8]
 806690e: e74c         	b	0x80667aa <_vfiprintf_r+0x272> @ imm = #-0x168
 8066910: f015 0310    	ands	r3, r5, #0x10
 8066914: d144         	bne	0x80669a0 <_vfiprintf_r+0x468> @ imm = #0x88
 8066916: f015 0140    	ands	r1, r5, #0x40
 806691a: d041         	beq	0x80669a0 <_vfiprintf_r+0x468> @ imm = #0x82
 806691c: 9a06         	ldr	r2, [sp, #0x18]
 806691e: 4619         	mov	r1, r3
 8066920: f852 0b04    	ldr	r0, [r2], #4
 8066924: b280         	uxth	r0, r0
 8066926: 9206         	str	r2, [sp, #0x18]
 8066928: e711         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #-0x1de
 806692a: f015 0310    	ands	r3, r5, #0x10
 806692e: d13d         	bne	0x80669ac <_vfiprintf_r+0x474> @ imm = #0x7a
 8066930: f015 0140    	ands	r1, r5, #0x40
 8066934: d03a         	beq	0x80669ac <_vfiprintf_r+0x474> @ imm = #0x74
 8066936: f852 0b04    	ldr	r0, [r2], #4
 806693a: 4619         	mov	r1, r3
 806693c: 2301         	movs	r3, #0x1
 806693e: b280         	uxth	r0, r0
 8066940: 9206         	str	r2, [sp, #0x18]
 8066942: e704         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #-0x1f8
 8066944: 2900         	cmp	r1, #0x0
 8066946: f040 83a5    	bne.w	0x8067094 <_vfiprintf_r+0xb5c> @ imm = #0x74a
 806694a: 06a8         	lsls	r0, r5, #0x1a
 806694c: 9b06         	ldr	r3, [sp, #0x18]
 806694e: f140 80b8    	bpl.w	0x8066ac2 <_vfiprintf_r+0x58a> @ imm = #0x170
 8066952: 3307         	adds	r3, #0x7
 8066954: f023 0307    	bic	r3, r3, #0x7
 8066958: 461a         	mov	r2, r3
 806695a: 685b         	ldr	r3, [r3, #0x4]
 806695c: f852 0b08    	ldr	r0, [r2], #8
 8066960: 4619         	mov	r1, r3
 8066962: 9206         	str	r2, [sp, #0x18]
 8066964: 2b00         	cmp	r3, #0x0
 8066966: f2c0 82e1    	blt.w	0x8066f2c <_vfiprintf_r+0x9f4> @ imm = #0x5c2
 806696a: f1ba 3fff    	cmp.w	r10, #0xffffffff
 806696e: f000 82a6    	beq.w	0x8066ebe <_vfiprintf_r+0x986> @ imm = #0x54c
 8066972: f025 0380    	bic	r3, r5, #0x80
 8066976: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 806697a: 9302         	str	r3, [sp, #0x8]
 806697c: f1ba 0f00    	cmp.w	r10, #0x0
 8066980: f040 837a    	bne.w	0x8067078 <_vfiprintf_r+0xb40> @ imm = #0x6f4
 8066984: ea50 0301    	orrs.w	r3, r0, r1
 8066988: bf14         	ite	ne
 806698a: 2301         	movne	r3, #0x1
 806698c: 2300         	moveq	r3, #0x0
 806698e: f040 8373    	bne.w	0x8067078 <_vfiprintf_r+0xb40> @ imm = #0x6e6
 8066992: 469a         	mov	r10, r3
 8066994: ac1a         	add	r4, sp, #0x68
 8066996: 9303         	str	r3, [sp, #0xc]
 8066998: e6ff         	b	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x202
 806699a: f7fe fa6d    	bl	0x8064e78 <__sinit>     @ imm = #-0x1b26
 806699e: e5d8         	b	0x8066552 <_vfiprintf_r+0x1a> @ imm = #-0x450
 80669a0: 9b06         	ldr	r3, [sp, #0x18]
 80669a2: f853 0b04    	ldr	r0, [r3], #4
 80669a6: 9306         	str	r3, [sp, #0x18]
 80669a8: 460b         	mov	r3, r1
 80669aa: e6d0         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #-0x260
 80669ac: f852 0b04    	ldr	r0, [r2], #4
 80669b0: 2301         	movs	r3, #0x1
 80669b2: 9206         	str	r2, [sp, #0x18]
 80669b4: e6cb         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #-0x26a
 80669b6: 9b06         	ldr	r3, [sp, #0x18]
 80669b8: f853 2b04    	ldr	r2, [r3], #4
 80669bc: 2a00         	cmp	r2, #0x0
 80669be: 9204         	str	r2, [sp, #0x10]
 80669c0: f280 82d3    	bge.w	0x8066f6a <_vfiprintf_r+0xa32> @ imm = #0x5a6
 80669c4: 9a04         	ldr	r2, [sp, #0x10]
 80669c6: 9306         	str	r3, [sp, #0x18]
 80669c8: 4252         	rsbs	r2, r2, #0
 80669ca: 9204         	str	r2, [sp, #0x10]
 80669cc: f045 0504    	orr	r5, r5, #0x4
 80669d0: 783b         	ldrb	r3, [r7]
 80669d2: e611         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x3de
 80669d4: 2900         	cmp	r1, #0x0
 80669d6: f040 8354    	bne.w	0x8067082 <_vfiprintf_r+0xb4a> @ imm = #0x6a8
 80669da: 4a92         	ldr	r2, [pc, #0x248]        @ 0x8066c24 <_vfiprintf_r+0x6ec>
 80669dc: f015 0120    	ands	r1, r5, #0x20
 80669e0: 9209         	str	r2, [sp, #0x24]
 80669e2: f000 80c5    	beq.w	0x8066b70 <_vfiprintf_r+0x638> @ imm = #0x18a
 80669e6: 9a06         	ldr	r2, [sp, #0x18]
 80669e8: 3207         	adds	r2, #0x7
 80669ea: f022 0207    	bic	r2, r2, #0x7
 80669ee: 6851         	ldr	r1, [r2, #0x4]
 80669f0: f852 0b08    	ldr	r0, [r2], #8
 80669f4: 9206         	str	r2, [sp, #0x18]
 80669f6: 07ec         	lsls	r4, r5, #0x1f
 80669f8: d50b         	bpl	0x8066a12 <_vfiprintf_r+0x4da> @ imm = #0x16
 80669fa: ea50 0201    	orrs.w	r2, r0, r1
 80669fe: d008         	beq	0x8066a12 <_vfiprintf_r+0x4da> @ imm = #0x10
 8066a00: f88d 3031    	strb.w	r3, [sp, #0x31]
 8066a04: 2330         	movs	r3, #0x30
 8066a06: f045 0502    	orr	r5, r5, #0x2
 8066a0a: f88d 3030    	strb.w	r3, [sp, #0x30]
 8066a0e: 2302         	movs	r3, #0x2
 8066a10: e69d         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #-0x2c6
 8066a12: 2302         	movs	r3, #0x2
 8066a14: e69b         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #-0x2ca
 8066a16: 9e06         	ldr	r6, [sp, #0x18]
 8066a18: f04f 0300    	mov.w	r3, #0x0
 8066a1c: f856 4b04    	ldr	r4, [r6], #4
 8066a20: f88d 302f    	strb.w	r3, [sp, #0x2f]
 8066a24: 2c00         	cmp	r4, #0x0
 8066a26: f000 8305    	beq.w	0x8067034 <_vfiprintf_r+0xafc> @ imm = #0x60a
 8066a2a: f1ba 3fff    	cmp.w	r10, #0xffffffff
 8066a2e: f000 82b7    	beq.w	0x8066fa0 <_vfiprintf_r+0xa68> @ imm = #0x56e
 8066a32: 4652         	mov	r2, r10
 8066a34: 2100         	movs	r1, #0x0
 8066a36: 4620         	mov	r0, r4
 8066a38: f7fe ff36    	bl	0x80658a8 <memchr>      @ imm = #-0x1194
 8066a3c: 2800         	cmp	r0, #0x0
 8066a3e: f000 832c    	beq.w	0x806709a <_vfiprintf_r+0xb62> @ imm = #0x658
 8066a42: 1b03         	subs	r3, r0, r4
 8066a44: 9606         	str	r6, [sp, #0x18]
 8066a46: f04f 0a00    	mov.w	r10, #0x0
 8066a4a: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 8066a4e: 9303         	str	r3, [sp, #0xc]
 8066a50: 9502         	str	r5, [sp, #0x8]
 8066a52: e6a2         	b	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x2bc
 8066a54: f045 0520    	orr	r5, r5, #0x20
 8066a58: 783b         	ldrb	r3, [r7]
 8066a5a: e5cd         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x466
 8066a5c: 9b06         	ldr	r3, [sp, #0x18]
 8066a5e: 2230         	movs	r2, #0x30
 8066a60: f045 0502    	orr	r5, r5, #0x2
 8066a64: 2100         	movs	r1, #0x0
 8066a66: f853 0b04    	ldr	r0, [r3], #4
 8066a6a: f88d 2030    	strb.w	r2, [sp, #0x30]
 8066a6e: 9306         	str	r3, [sp, #0x18]
 8066a70: 2378         	movs	r3, #0x78
 8066a72: f88d 3031    	strb.w	r3, [sp, #0x31]
 8066a76: 4b6b         	ldr	r3, [pc, #0x1ac]        @ 0x8066c24 <_vfiprintf_r+0x6ec>
 8066a78: 9309         	str	r3, [sp, #0x24]
 8066a7a: 2302         	movs	r3, #0x2
 8066a7c: e667         	b	0x806674e <_vfiprintf_r+0x216> @ imm = #-0x332
 8066a7e: 463c         	mov	r4, r7
 8066a80: f814 3b01    	ldrb	r3, [r4], #1
 8066a84: 2b2a         	cmp	r3, #0x2a
 8066a86: f000 8321    	beq.w	0x80670cc <_vfiprintf_r+0xb94> @ imm = #0x642
 8066a8a: f1a3 0230    	sub.w	r2, r3, #0x30
 8066a8e: 4627         	mov	r7, r4
 8066a90: f04f 0a00    	mov.w	r10, #0x0
 8066a94: 2a09         	cmp	r2, #0x9
 8066a96: f63f adb0    	bhi.w	0x80665fa <_vfiprintf_r+0xc2> @ imm = #-0x4a0
 8066a9a: eb0a 0a8a    	add.w	r10, r10, r10, lsl #2
 8066a9e: f817 3b01    	ldrb	r3, [r7], #1
 8066aa2: eb02 0a4a    	add.w	r10, r2, r10, lsl #1
 8066aa6: f1a3 0230    	sub.w	r2, r3, #0x30
 8066aaa: 2a09         	cmp	r2, #0x9
 8066aac: d9f5         	bls	0x8066a9a <_vfiprintf_r+0x562> @ imm = #-0x16
 8066aae: e5a4         	b	0x80665fa <_vfiprintf_r+0xc2> @ imm = #-0x4b8
 8066ab0: 2900         	cmp	r1, #0x0
 8066ab2: f040 82ec    	bne.w	0x806708e <_vfiprintf_r+0xb56> @ imm = #0x5d8
 8066ab6: f045 0510    	orr	r5, r5, #0x10
 8066aba: 9b06         	ldr	r3, [sp, #0x18]
 8066abc: 06a8         	lsls	r0, r5, #0x1a
 8066abe: f53f af48    	bmi.w	0x8066952 <_vfiprintf_r+0x41a> @ imm = #-0x170
 8066ac2: f853 0b04    	ldr	r0, [r3], #4
 8066ac6: 06e9         	lsls	r1, r5, #0x1b
 8066ac8: 9306         	str	r3, [sp, #0x18]
 8066aca: f100 822a    	bmi.w	0x8066f22 <_vfiprintf_r+0x9ea> @ imm = #0x454
 8066ace: 066a         	lsls	r2, r5, #0x19
 8066ad0: f140 8227    	bpl.w	0x8066f22 <_vfiprintf_r+0x9ea> @ imm = #0x44e
 8066ad4: f340 31c0    	sbfx	r1, r0, #0xf, #0x1
 8066ad8: b200         	sxth	r0, r0
 8066ada: 460b         	mov	r3, r1
 8066adc: e742         	b	0x8066964 <_vfiprintf_r+0x42c> @ imm = #-0x17c
 8066ade: f045 0580    	orr	r5, r5, #0x80
 8066ae2: 783b         	ldrb	r3, [r7]
 8066ae4: e588         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x4f0
 8066ae6: 783b         	ldrb	r3, [r7]
 8066ae8: 2101         	movs	r1, #0x1
 8066aea: 202b         	movs	r0, #0x2b
 8066aec: e584         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x4f8
 8066aee: f045 0501    	orr	r5, r5, #0x1
 8066af2: 783b         	ldrb	r3, [r7]
 8066af4: e580         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x500
 8066af6: 783b         	ldrb	r3, [r7]
 8066af8: 2800         	cmp	r0, #0x0
 8066afa: f47f ad7d    	bne.w	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x506
 8066afe: 2101         	movs	r1, #0x1
 8066b00: 2020         	movs	r0, #0x20
 8066b02: e579         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x50e
 8066b04: f045 0540    	orr	r5, r5, #0x40
 8066b08: 783b         	ldrb	r3, [r7]
 8066b0a: e575         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x516
 8066b0c: 2900         	cmp	r1, #0x0
 8066b0e: f040 82bb    	bne.w	0x8067088 <_vfiprintf_r+0xb50> @ imm = #0x576
 8066b12: 06ab         	lsls	r3, r5, #0x1a
 8066b14: f100 8232    	bmi.w	0x8066f7c <_vfiprintf_r+0xa44> @ imm = #0x464
 8066b18: 06ee         	lsls	r6, r5, #0x1b
 8066b1a: f100 825e    	bmi.w	0x8066fda <_vfiprintf_r+0xaa2> @ imm = #0x4bc
 8066b1e: 066d         	lsls	r5, r5, #0x19
 8066b20: f140 825b    	bpl.w	0x8066fda <_vfiprintf_r+0xaa2> @ imm = #0x4b6
 8066b24: 9b06         	ldr	r3, [sp, #0x18]
 8066b26: 9905         	ldr	r1, [sp, #0x14]
 8066b28: f853 2b04    	ldr	r2, [r3], #4
 8066b2c: 8011         	strh	r1, [r2]
 8066b2e: 9306         	str	r3, [sp, #0x18]
 8066b30: e535         	b	0x806659e <_vfiprintf_r+0x66> @ imm = #-0x596
 8066b32: 783b         	ldrb	r3, [r7]
 8066b34: 2b6c         	cmp	r3, #0x6c
 8066b36: f000 8277    	beq.w	0x8067028 <_vfiprintf_r+0xaf0> @ imm = #0x4ee
 8066b3a: f045 0510    	orr	r5, r5, #0x10
 8066b3e: e55b         	b	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x54a
 8066b40: 9b06         	ldr	r3, [sp, #0x18]
 8066b42: f04f 0200    	mov.w	r2, #0x0
 8066b46: 2101         	movs	r1, #0x1
 8066b48: ac10         	add	r4, sp, #0x40
 8066b4a: f88d 202f    	strb.w	r2, [sp, #0x2f]
 8066b4e: f853 2b04    	ldr	r2, [r3], #4
 8066b52: 9101         	str	r1, [sp, #0x4]
 8066b54: f88d 2040    	strb.w	r2, [sp, #0x40]
 8066b58: 9306         	str	r3, [sp, #0x18]
 8066b5a: 9103         	str	r1, [sp, #0xc]
 8066b5c: e6d4         	b	0x8066908 <_vfiprintf_r+0x3d0> @ imm = #-0x258
 8066b5e: 2900         	cmp	r1, #0x0
 8066b60: f040 828c    	bne.w	0x806707c <_vfiprintf_r+0xb44> @ imm = #0x518
 8066b64: 4a30         	ldr	r2, [pc, #0xc0]         @ 0x8066c28 <_vfiprintf_r+0x6f0>
 8066b66: f015 0120    	ands	r1, r5, #0x20
 8066b6a: 9209         	str	r2, [sp, #0x24]
 8066b6c: f47f af3b    	bne.w	0x80669e6 <_vfiprintf_r+0x4ae> @ imm = #-0x18a
 8066b70: f015 0210    	ands	r2, r5, #0x10
 8066b74: f040 81e3    	bne.w	0x8066f3e <_vfiprintf_r+0xa06> @ imm = #0x3c6
 8066b78: f015 0140    	ands	r1, r5, #0x40
 8066b7c: f000 81df    	beq.w	0x8066f3e <_vfiprintf_r+0xa06> @ imm = #0x3be
 8066b80: 9c06         	ldr	r4, [sp, #0x18]
 8066b82: 4611         	mov	r1, r2
 8066b84: f854 0b04    	ldr	r0, [r4], #4
 8066b88: b280         	uxth	r0, r0
 8066b8a: 9406         	str	r4, [sp, #0x18]
 8066b8c: e733         	b	0x80669f6 <_vfiprintf_r+0x4be> @ imm = #-0x19a
 8066b8e: 9b03         	ldr	r3, [sp, #0xc]
 8066b90: 2201         	movs	r2, #0x1
 8066b92: f10d 0968    	add.w	r9, sp, #0x68
 8066b96: 941a         	str	r4, [sp, #0x68]
 8066b98: 931b         	str	r3, [sp, #0x6c]
 8066b9a: 930f         	str	r3, [sp, #0x3c]
 8066b9c: 920e         	str	r2, [sp, #0x38]
 8066b9e: f109 0908    	add.w	r9, r9, #0x8
 8066ba2: e670         	b	0x8066886 <_vfiprintf_r+0x34e> @ imm = #-0x320
 8066ba4: 9d02         	ldr	r5, [sp, #0x8]
 8066ba6: 2b01         	cmp	r3, #0x1
 8066ba8: f000 818b    	beq.w	0x8066ec2 <_vfiprintf_r+0x98a> @ imm = #0x316
 8066bac: 2b02         	cmp	r3, #0x2
 8066bae: ac1a         	add	r4, sp, #0x68
 8066bb0: d111         	bne	0x8066bd6 <_vfiprintf_r+0x69e> @ imm = #0x22
 8066bb2: 9a09         	ldr	r2, [sp, #0x24]
 8066bb4: f000 030f    	and	r3, r0, #0xf
 8066bb8: 0900         	lsrs	r0, r0, #0x4
 8066bba: 5cd3         	ldrb	r3, [r2, r3]
 8066bbc: ea40 7001    	orr.w	r0, r0, r1, lsl #28
 8066bc0: 0909         	lsrs	r1, r1, #0x4
 8066bc2: f804 3d01    	strb	r3, [r4, #-1]!
 8066bc6: ea50 0301    	orrs.w	r3, r0, r1
 8066bca: d1f3         	bne	0x8066bb4 <_vfiprintf_r+0x67c> @ imm = #-0x1a
 8066bcc: ab1a         	add	r3, sp, #0x68
 8066bce: 9502         	str	r5, [sp, #0x8]
 8066bd0: 1b1b         	subs	r3, r3, r4
 8066bd2: 9303         	str	r3, [sp, #0xc]
 8066bd4: e5e1         	b	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x43e
 8066bd6: f000 0307    	and	r3, r0, #0x7
 8066bda: 08c0         	lsrs	r0, r0, #0x3
 8066bdc: 4622         	mov	r2, r4
 8066bde: ea40 7041    	orr.w	r0, r0, r1, lsl #29
 8066be2: 3330         	adds	r3, #0x30
 8066be4: 08c9         	lsrs	r1, r1, #0x3
 8066be6: f804 3d01    	strb	r3, [r4, #-1]!
 8066bea: ea50 0c01    	orrs.w	r12, r0, r1
 8066bee: d1f2         	bne	0x8066bd6 <_vfiprintf_r+0x69e> @ imm = #-0x1c
 8066bf0: 2b30         	cmp	r3, #0x30
 8066bf2: d0eb         	beq	0x8066bcc <_vfiprintf_r+0x694> @ imm = #-0x2a
 8066bf4: 07e8         	lsls	r0, r5, #0x1f
 8066bf6: d5e9         	bpl	0x8066bcc <_vfiprintf_r+0x694> @ imm = #-0x2e
 8066bf8: 2330         	movs	r3, #0x30
 8066bfa: 3a02         	subs	r2, #0x2
 8066bfc: 9502         	str	r5, [sp, #0x8]
 8066bfe: f804 3c01    	strb	r3, [r4, #-1]
 8066c02: ab1a         	add	r3, sp, #0x68
 8066c04: 4614         	mov	r4, r2
 8066c06: 1a9b         	subs	r3, r3, r2
 8066c08: 9303         	str	r3, [sp, #0xc]
 8066c0a: e5c6         	b	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x474
 8066c0c: 9b04         	ldr	r3, [sp, #0x10]
 8066c0e: 9801         	ldr	r0, [sp, #0x4]
 8066c10: 1a1e         	subs	r6, r3, r0
 8066c12: 2e00         	cmp	r6, #0x0
 8066c14: f77f ae19    	ble.w	0x806684a <_vfiprintf_r+0x312> @ imm = #-0x3ce
 8066c18: 2e10         	cmp	r6, #0x10
 8066c1a: f340 8250    	ble.w	0x80670be <_vfiprintf_r+0xb86> @ imm = #0x4a0
 8066c1e: 4d03         	ldr	r5, [pc, #0xc]          @ 0x8066c2c <_vfiprintf_r+0x6f4>
 8066c20: 4660         	mov	r0, r12
 8066c22: e012         	b	0x8066c4a <_vfiprintf_r+0x712> @ imm = #0x24

08066c24 <$d>:
 8066c24: dc a0 06 08  	.word	0x0806a0dc
 8066c28: f0 a0 06 08  	.word	0x0806a0f0
 8066c2c: f8 a2 06 08  	.word	0x0806a2f8

08066c30 <$t>:
 8066c30: 4659         	mov	r1, r11
 8066c32: 4640         	mov	r0, r8
 8066c34: f7ff fc3c    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x788
 8066c38: 2800         	cmp	r0, #0x0
 8066c3a: f47f ae4d    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x366
 8066c3e: e9dd 200e    	ldrd	r2, r0, [sp, #56]
 8066c42: 1c51         	adds	r1, r2, #0x1
 8066c44: 3e10         	subs	r6, #0x10
 8066c46: 2e10         	cmp	r6, #0x10
 8066c48: dd19         	ble	0x8066c7e <_vfiprintf_r+0x746> @ imm = #0x32
 8066c4a: 1c53         	adds	r3, r2, #0x1
 8066c4c: 2110         	movs	r1, #0x10
 8066c4e: 3010         	adds	r0, #0x10
 8066c50: f8c9 5000    	str.w	r5, [r9]
 8066c54: 2b07         	cmp	r3, #0x7
 8066c56: f8c9 1004    	str.w	r1, [r9, #0x4]
 8066c5a: f102 0102    	add.w	r1, r2, #0x2
 8066c5e: f109 0908    	add.w	r9, r9, #0x8
 8066c62: 461a         	mov	r2, r3
 8066c64: e9cd 300e    	strd	r3, r0, [sp, #56]
 8066c68: ddec         	ble	0x8066c44 <_vfiprintf_r+0x70c> @ imm = #-0x28
 8066c6a: aa0d         	add	r2, sp, #0x34
 8066c6c: f10d 0968    	add.w	r9, sp, #0x68
 8066c70: 2800         	cmp	r0, #0x0
 8066c72: d1dd         	bne	0x8066c30 <_vfiprintf_r+0x6f8> @ imm = #-0x46
 8066c74: 3e10         	subs	r6, #0x10
 8066c76: 2101         	movs	r1, #0x1
 8066c78: 4602         	mov	r2, r0
 8066c7a: 2e10         	cmp	r6, #0x10
 8066c7c: dce5         	bgt	0x8066c4a <_vfiprintf_r+0x712> @ imm = #-0x36
 8066c7e: 4684         	mov	r12, r0
 8066c80: 4608         	mov	r0, r1
 8066c82: 44b4         	add	r12, r6
 8066c84: 2807         	cmp	r0, #0x7
 8066c86: f8c9 5000    	str.w	r5, [r9]
 8066c8a: f8c9 6004    	str.w	r6, [r9, #0x4]
 8066c8e: e9cd 0c0e    	strd	r0, r12, [sp, #56]
 8066c92: f340 816e    	ble.w	0x8066f72 <_vfiprintf_r+0xa3a> @ imm = #0x2dc
 8066c96: f1bc 0f00    	cmp.w	r12, #0x0
 8066c9a: f000 81d4    	beq.w	0x8067046 <_vfiprintf_r+0xb0e> @ imm = #0x3a8
 8066c9e: aa0d         	add	r2, sp, #0x34
 8066ca0: 4659         	mov	r1, r11
 8066ca2: 4640         	mov	r0, r8
 8066ca4: f7ff fc04    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x7f8
 8066ca8: 2800         	cmp	r0, #0x0
 8066caa: f47f ae15    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x3d6
 8066cae: 9b03         	ldr	r3, [sp, #0xc]
 8066cb0: f10d 0968    	add.w	r9, sp, #0x68
 8066cb4: ebaa 0603    	sub.w	r6, r10, r3
 8066cb8: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 8066cbc: 2e00         	cmp	r6, #0x0
 8066cbe: f102 0101    	add.w	r1, r2, #0x1
 8066cc2: f77f adc8    	ble.w	0x8066856 <_vfiprintf_r+0x31e> @ imm = #-0x470
 8066cc6: 2e10         	cmp	r6, #0x10
 8066cc8: 4dbb         	ldr	r5, [pc, #0x2ec]        @ 0x8066fb8 <_vfiprintf_r+0xa80>
 8066cca: dd29         	ble	0x8066d20 <_vfiprintf_r+0x7e8> @ imm = #0x52
 8066ccc: 9407         	str	r4, [sp, #0x1c]
 8066cce: f04f 0a10    	mov.w	r10, #0x10
 8066cd2: 4664         	mov	r4, r12
 8066cd4: e00a         	b	0x8066cec <_vfiprintf_r+0x7b4> @ imm = #0x14
 8066cd6: f7ff fbeb    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x82a
 8066cda: 2800         	cmp	r0, #0x0
 8066cdc: f47f adfc    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x408
 8066ce0: e9dd 240e    	ldrd	r2, r4, [sp, #56]
 8066ce4: 1c51         	adds	r1, r2, #0x1
 8066ce6: 3e10         	subs	r6, #0x10
 8066ce8: 2e10         	cmp	r6, #0x10
 8066cea: dd17         	ble	0x8066d1c <_vfiprintf_r+0x7e4> @ imm = #0x2e
 8066cec: 1c53         	adds	r3, r2, #0x1
 8066cee: 3410         	adds	r4, #0x10
 8066cf0: 1c91         	adds	r1, r2, #0x2
 8066cf2: 2b07         	cmp	r3, #0x7
 8066cf4: 461a         	mov	r2, r3
 8066cf6: e9c9 5a00    	strd	r5, r10, [r9]
 8066cfa: e9cd 340e    	strd	r3, r4, [sp, #56]
 8066cfe: f109 0908    	add.w	r9, r9, #0x8
 8066d02: ddf0         	ble	0x8066ce6 <_vfiprintf_r+0x7ae> @ imm = #-0x20
 8066d04: aa0d         	add	r2, sp, #0x34
 8066d06: 4659         	mov	r1, r11
 8066d08: 4640         	mov	r0, r8
 8066d0a: f10d 0968    	add.w	r9, sp, #0x68
 8066d0e: 2c00         	cmp	r4, #0x0
 8066d10: d1e1         	bne	0x8066cd6 <_vfiprintf_r+0x79e> @ imm = #-0x3e
 8066d12: 3e10         	subs	r6, #0x10
 8066d14: 2101         	movs	r1, #0x1
 8066d16: 4622         	mov	r2, r4
 8066d18: 2e10         	cmp	r6, #0x10
 8066d1a: dce7         	bgt	0x8066cec <_vfiprintf_r+0x7b4> @ imm = #-0x32
 8066d1c: 46a4         	mov	r12, r4
 8066d1e: 9c07         	ldr	r4, [sp, #0x1c]
 8066d20: 44b4         	add	r12, r6
 8066d22: 2907         	cmp	r1, #0x7
 8066d24: f8c9 5000    	str.w	r5, [r9]
 8066d28: f8c9 6004    	str.w	r6, [r9, #0x4]
 8066d2c: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 8066d30: f300 80dd    	bgt.w	0x8066eee <_vfiprintf_r+0x9b6> @ imm = #0x1ba
 8066d34: f109 0908    	add.w	r9, r9, #0x8
 8066d38: 3101         	adds	r1, #0x1
 8066d3a: e58c         	b	0x8066856 <_vfiprintf_r+0x31e> @ imm = #-0x4e8
 8066d3c: aa0d         	add	r2, sp, #0x34
 8066d3e: 4659         	mov	r1, r11
 8066d40: 4640         	mov	r0, r8
 8066d42: f7ff fbb5    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x896
 8066d46: 2800         	cmp	r0, #0x0
 8066d48: f43f adb1    	beq.w	0x80668ae <_vfiprintf_r+0x376> @ imm = #-0x49e
 8066d4c: e5c4         	b	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x478
 8066d4e: f1bc 0f00    	cmp.w	r12, #0x0
 8066d52: f000 80c4    	beq.w	0x8066ede <_vfiprintf_r+0x9a6> @ imm = #0x188
 8066d56: aa0d         	add	r2, sp, #0x34
 8066d58: 4659         	mov	r1, r11
 8066d5a: 4640         	mov	r0, r8
 8066d5c: f7ff fba8    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x8b0
 8066d60: 2800         	cmp	r0, #0x0
 8066d62: f47f adb9    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x48e
 8066d66: f10d 0968    	add.w	r9, sp, #0x68
 8066d6a: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 8066d6e: 1c51         	adds	r1, r2, #0x1
 8066d70: e547         	b	0x8066802 <_vfiprintf_r+0x2ca> @ imm = #-0x572
 8066d72: 2302         	movs	r3, #0x2
 8066d74: 2101         	movs	r1, #0x1
 8066d76: f10d 0968    	add.w	r9, sp, #0x68
 8066d7a: 469c         	mov	r12, r3
 8066d7c: 931b         	str	r3, [sp, #0x6c]
 8066d7e: ab0c         	add	r3, sp, #0x30
 8066d80: 931a         	str	r3, [sp, #0x68]
 8066d82: 460a         	mov	r2, r1
 8066d84: f109 0908    	add.w	r9, r9, #0x8
 8066d88: 1c51         	adds	r1, r2, #0x1
 8066d8a: e55a         	b	0x8066842 <_vfiprintf_r+0x30a> @ imm = #-0x54c
 8066d8c: 2d10         	cmp	r5, #0x10
 8066d8e: f340 818d    	ble.w	0x80670ac <_vfiprintf_r+0xb74> @ imm = #0x31a
 8066d92: 4e8a         	ldr	r6, [pc, #0x228]        @ 0x8066fbc <_vfiprintf_r+0xa84>
 8066d94: 2310         	movs	r3, #0x10
 8066d96: e9dd c00e    	ldrd	r12, r0, [sp, #56]
 8066d9a: 4662         	mov	r2, r12
 8066d9c: e00d         	b	0x8066dba <_vfiprintf_r+0x882> @ imm = #0x1a
 8066d9e: 4640         	mov	r0, r8
 8066da0: f7ff fb86    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x8f4
 8066da4: 2800         	cmp	r0, #0x0
 8066da6: f47f ad97    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x4d2
 8066daa: 2310         	movs	r3, #0x10
 8066dac: e9dd 200e    	ldrd	r2, r0, [sp, #56]
 8066db0: f102 0c01    	add.w	r12, r2, #0x1
 8066db4: 3d10         	subs	r5, #0x10
 8066db6: 2d10         	cmp	r5, #0x10
 8066db8: dd18         	ble	0x8066dec <_vfiprintf_r+0x8b4> @ imm = #0x30
 8066dba: 1c51         	adds	r1, r2, #0x1
 8066dbc: 3010         	adds	r0, #0x10
 8066dbe: f102 0c02    	add.w	r12, r2, #0x2
 8066dc2: 2907         	cmp	r1, #0x7
 8066dc4: 460a         	mov	r2, r1
 8066dc6: e9c9 6300    	strd	r6, r3, [r9]
 8066dca: e9cd 100e    	strd	r1, r0, [sp, #56]
 8066dce: f109 0908    	add.w	r9, r9, #0x8
 8066dd2: ddef         	ble	0x8066db4 <_vfiprintf_r+0x87c> @ imm = #-0x22
 8066dd4: aa0d         	add	r2, sp, #0x34
 8066dd6: 4659         	mov	r1, r11
 8066dd8: f10d 0968    	add.w	r9, sp, #0x68
 8066ddc: 2800         	cmp	r0, #0x0
 8066dde: d1de         	bne	0x8066d9e <_vfiprintf_r+0x866> @ imm = #-0x44
 8066de0: 3d10         	subs	r5, #0x10
 8066de2: 4602         	mov	r2, r0
 8066de4: f04f 0c01    	mov.w	r12, #0x1
 8066de8: 2d10         	cmp	r5, #0x10
 8066dea: dce6         	bgt	0x8066dba <_vfiprintf_r+0x882> @ imm = #-0x34
 8066dec: 4662         	mov	r2, r12
 8066dee: eb05 0c00    	add.w	r12, r5, r0
 8066df2: 2a07         	cmp	r2, #0x7
 8066df4: f8c9 6000    	str.w	r6, [r9]
 8066df8: f8c9 5004    	str.w	r5, [r9, #0x4]
 8066dfc: e9cd 2c0e    	strd	r2, r12, [sp, #56]
 8066e00: f300 80a2    	bgt.w	0x8066f48 <_vfiprintf_r+0xa10> @ imm = #0x144
 8066e04: f109 0908    	add.w	r9, r9, #0x8
 8066e08: 1c51         	adds	r1, r2, #0x1
 8066e0a: e4e4         	b	0x80667d6 <_vfiprintf_r+0x29e> @ imm = #-0x638
 8066e0c: 9a02         	ldr	r2, [sp, #0x8]
 8066e0e: 930e         	str	r3, [sp, #0x38]
 8066e10: 0751         	lsls	r1, r2, #0x1d
 8066e12: d547         	bpl	0x8066ea4 <_vfiprintf_r+0x96c> @ imm = #0x8e
 8066e14: 9a04         	ldr	r2, [sp, #0x10]
 8066e16: 9901         	ldr	r1, [sp, #0x4]
 8066e18: 1a54         	subs	r4, r2, r1
 8066e1a: 2c00         	cmp	r4, #0x0
 8066e1c: dd42         	ble	0x8066ea4 <_vfiprintf_r+0x96c> @ imm = #0x84
 8066e1e: f10d 0968    	add.w	r9, sp, #0x68
 8066e22: 2c10         	cmp	r4, #0x10
 8066e24: f340 8147    	ble.w	0x80670b6 <_vfiprintf_r+0xb7e> @ imm = #0x28e
 8066e28: 990e         	ldr	r1, [sp, #0x38]
 8066e2a: 2510         	movs	r5, #0x10
 8066e2c: 4e63         	ldr	r6, [pc, #0x18c]        @ 0x8066fbc <_vfiprintf_r+0xa84>
 8066e2e: 4608         	mov	r0, r1
 8066e30: e00e         	b	0x8066e50 <_vfiprintf_r+0x918> @ imm = #0x1c
 8066e32: 4659         	mov	r1, r11
 8066e34: 4640         	mov	r0, r8
 8066e36: f7ff fb3b    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x98a
 8066e3a: 2800         	cmp	r0, #0x0
 8066e3c: f47f ad4c    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x568
 8066e40: f10d 0968    	add.w	r9, sp, #0x68
 8066e44: e9dd 030e    	ldrd	r0, r3, [sp, #56]
 8066e48: 1c41         	adds	r1, r0, #0x1
 8066e4a: 3c10         	subs	r4, #0x10
 8066e4c: 2c10         	cmp	r4, #0x10
 8066e4e: dd15         	ble	0x8066e7c <_vfiprintf_r+0x944> @ imm = #0x2a
 8066e50: 1c42         	adds	r2, r0, #0x1
 8066e52: 3310         	adds	r3, #0x10
 8066e54: 1c81         	adds	r1, r0, #0x2
 8066e56: 2a07         	cmp	r2, #0x7
 8066e58: 4610         	mov	r0, r2
 8066e5a: e9c9 6500    	strd	r6, r5, [r9]
 8066e5e: e9cd 230e    	strd	r2, r3, [sp, #56]
 8066e62: f109 0908    	add.w	r9, r9, #0x8
 8066e66: ddf0         	ble	0x8066e4a <_vfiprintf_r+0x912> @ imm = #-0x20
 8066e68: aa0d         	add	r2, sp, #0x34
 8066e6a: 2b00         	cmp	r3, #0x0
 8066e6c: d1e1         	bne	0x8066e32 <_vfiprintf_r+0x8fa> @ imm = #-0x3e
 8066e6e: 3c10         	subs	r4, #0x10
 8066e70: 2101         	movs	r1, #0x1
 8066e72: 4618         	mov	r0, r3
 8066e74: f10d 0968    	add.w	r9, sp, #0x68
 8066e78: 2c10         	cmp	r4, #0x10
 8066e7a: dce9         	bgt	0x8066e50 <_vfiprintf_r+0x918> @ imm = #-0x2e
 8066e7c: 4608         	mov	r0, r1
 8066e7e: 4423         	add	r3, r4
 8066e80: 2807         	cmp	r0, #0x7
 8066e82: e9c9 6400    	strd	r6, r4, [r9]
 8066e86: e9cd 030e    	strd	r0, r3, [sp, #56]
 8066e8a: f77f ad05    	ble.w	0x8066898 <_vfiprintf_r+0x360> @ imm = #-0x5f6
 8066e8e: b14b         	cbz	r3, 0x8066ea4 <_vfiprintf_r+0x96c> @ imm = #0x12
 8066e90: aa0d         	add	r2, sp, #0x34
 8066e92: 4659         	mov	r1, r11
 8066e94: 4640         	mov	r0, r8
 8066e96: f7ff fb0b    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0x9ea
 8066e9a: 2800         	cmp	r0, #0x0
 8066e9c: f47f ad1c    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x5c8
 8066ea0: 9b0f         	ldr	r3, [sp, #0x3c]
 8066ea2: e4f9         	b	0x8066898 <_vfiprintf_r+0x360> @ imm = #-0x60e
 8066ea4: e9dd 2304    	ldrd	r2, r3, [sp, #16]
 8066ea8: 9901         	ldr	r1, [sp, #0x4]
 8066eaa: 428a         	cmp	r2, r1
 8066eac: bfac         	ite	ge
 8066eae: 189b         	addge	r3, r3, r2
 8066eb0: 185b         	addlt	r3, r3, r1
 8066eb2: 9305         	str	r3, [sp, #0x14]
 8066eb4: e4fb         	b	0x80668ae <_vfiprintf_r+0x376> @ imm = #-0x60a
 8066eb6: 4692         	mov	r10, r2
 8066eb8: ac1a         	add	r4, sp, #0x68
 8066eba: 9203         	str	r2, [sp, #0xc]
 8066ebc: e46d         	b	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x726
 8066ebe: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 8066ec2: 280a         	cmp	r0, #0xa
 8066ec4: f171 0300    	sbcs	r3, r1, #0x0
 8066ec8: f080 808f    	bhs.w	0x8066fea <_vfiprintf_r+0xab2> @ imm = #0x11e
 8066ecc: 3030         	adds	r0, #0x30
 8066ece: 2301         	movs	r3, #0x1
 8066ed0: f10d 0467    	add.w	r4, sp, #0x67
 8066ed4: 9502         	str	r5, [sp, #0x8]
 8066ed6: f88d 0067    	strb.w	r0, [sp, #0x67]
 8066eda: 9303         	str	r3, [sp, #0xc]
 8066edc: e45d         	b	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x746
 8066ede: 9b07         	ldr	r3, [sp, #0x1c]
 8066ee0: 2b00         	cmp	r3, #0x0
 8066ee2: d155         	bne	0x8066f90 <_vfiprintf_r+0xa58> @ imm = #0xaa
 8066ee4: 2101         	movs	r1, #0x1
 8066ee6: 4662         	mov	r2, r12
 8066ee8: f10d 0968    	add.w	r9, sp, #0x68
 8066eec: e4a9         	b	0x8066842 <_vfiprintf_r+0x30a> @ imm = #-0x6ae
 8066eee: f1bc 0f00    	cmp.w	r12, #0x0
 8066ef2: f43f ae4c    	beq.w	0x8066b8e <_vfiprintf_r+0x656> @ imm = #-0x368
 8066ef6: aa0d         	add	r2, sp, #0x34
 8066ef8: 4659         	mov	r1, r11
 8066efa: 4640         	mov	r0, r8
 8066efc: f7ff fad8    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0xa50
 8066f00: 2800         	cmp	r0, #0x0
 8066f02: f47f ace9    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x62e
 8066f06: 990e         	ldr	r1, [sp, #0x38]
 8066f08: f10d 0968    	add.w	r9, sp, #0x68
 8066f0c: f8dd c03c    	ldr.w	r12, [sp, #0x3c]
 8066f10: 3101         	adds	r1, #0x1
 8066f12: e4a0         	b	0x8066856 <_vfiprintf_r+0x31e> @ imm = #-0x6c0
 8066f14: f10d 0968    	add.w	r9, sp, #0x68
 8066f18: 920e         	str	r2, [sp, #0x38]
 8066f1a: f7ff bb5a    	b.w	0x80665d2 <_vfiprintf_r+0x9a> @ imm = #-0x94c
 8066f1e: ac1a         	add	r4, sp, #0x68
 8066f20: e43b         	b	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x78a
 8066f22: 17c1         	asrs	r1, r0, #0x1f
 8066f24: 460b         	mov	r3, r1
 8066f26: 2b00         	cmp	r3, #0x0
 8066f28: f6bf ad1f    	bge.w	0x806696a <_vfiprintf_r+0x432> @ imm = #-0x5c2
 8066f2c: 232d         	movs	r3, #0x2d
 8066f2e: 4240         	rsbs	r0, r0, #0
 8066f30: 461e         	mov	r6, r3
 8066f32: f88d 302f    	strb.w	r3, [sp, #0x2f]
 8066f36: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 8066f3a: 2301         	movs	r3, #0x1
 8066f3c: e40c         	b	0x8066758 <_vfiprintf_r+0x220> @ imm = #-0x7e8
 8066f3e: 9a06         	ldr	r2, [sp, #0x18]
 8066f40: f852 0b04    	ldr	r0, [r2], #4
 8066f44: 9206         	str	r2, [sp, #0x18]
 8066f46: e556         	b	0x80669f6 <_vfiprintf_r+0x4be> @ imm = #-0x554
 8066f48: f1bc 0f00    	cmp.w	r12, #0x0
 8066f4c: d038         	beq	0x8066fc0 <_vfiprintf_r+0xa88> @ imm = #0x70
 8066f4e: aa0d         	add	r2, sp, #0x34
 8066f50: 4659         	mov	r1, r11
 8066f52: 4640         	mov	r0, r8
 8066f54: f7ff faac    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0xaa8
 8066f58: 2800         	cmp	r0, #0x0
 8066f5a: f47f acbd    	bne.w	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x686
 8066f5e: f10d 0968    	add.w	r9, sp, #0x68
 8066f62: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 8066f66: 1c51         	adds	r1, r2, #0x1
 8066f68: e435         	b	0x80667d6 <_vfiprintf_r+0x29e> @ imm = #-0x796
 8066f6a: 9306         	str	r3, [sp, #0x18]
 8066f6c: 783b         	ldrb	r3, [r7]
 8066f6e: f7ff bb43    	b.w	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0x97a
 8066f72: f109 0908    	add.w	r9, r9, #0x8
 8066f76: 1c41         	adds	r1, r0, #0x1
 8066f78: 4602         	mov	r2, r0
 8066f7a: e466         	b	0x806684a <_vfiprintf_r+0x312> @ imm = #-0x734
 8066f7c: e9dd 0305    	ldrd	r0, r3, [sp, #20]
 8066f80: f853 1b04    	ldr	r1, [r3], #4
 8066f84: 17c2         	asrs	r2, r0, #0x1f
 8066f86: 9306         	str	r3, [sp, #0x18]
 8066f88: e9c1 0200    	strd	r0, r2, [r1]
 8066f8c: f7ff bb07    	b.w	0x806659e <_vfiprintf_r+0x66> @ imm = #-0x9f2
 8066f90: 2302         	movs	r3, #0x2
 8066f92: f10d 0968    	add.w	r9, sp, #0x68
 8066f96: 469c         	mov	r12, r3
 8066f98: 931b         	str	r3, [sp, #0x6c]
 8066f9a: ab0c         	add	r3, sp, #0x30
 8066f9c: 931a         	str	r3, [sp, #0x68]
 8066f9e: e6f1         	b	0x8066d84 <_vfiprintf_r+0x84c> @ imm = #-0x21e
 8066fa0: 4620         	mov	r0, r4
 8066fa2: 9606         	str	r6, [sp, #0x18]
 8066fa4: 9502         	str	r5, [sp, #0x8]
 8066fa6: f04f 0a00    	mov.w	r10, #0x0
 8066faa: f7ff fa53    	bl	0x8066454 <strlen>      @ imm = #-0xb5a
 8066fae: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 8066fb2: 9003         	str	r0, [sp, #0xc]
 8066fb4: f7ff bbf1    	b.w	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x81e

08066fb8 <$d>:
 8066fb8: f8 a2 06 08  	.word	0x0806a2f8
 8066fbc: e8 a2 06 08  	.word	0x0806a2e8

08066fc0 <$t>:
 8066fc0: f89d 202f    	ldrb.w	r2, [sp, #0x2f]
 8066fc4: 2a00         	cmp	r2, #0x0
 8066fc6: d144         	bne	0x8067052 <_vfiprintf_r+0xb1a> @ imm = #0x88
 8066fc8: 9b07         	ldr	r3, [sp, #0x1c]
 8066fca: 2b00         	cmp	r3, #0x0
 8066fcc: f47f aed1    	bne.w	0x8066d72 <_vfiprintf_r+0x83a> @ imm = #-0x25e
 8066fd0: 4662         	mov	r2, r12
 8066fd2: 2101         	movs	r1, #0x1
 8066fd4: f10d 0968    	add.w	r9, sp, #0x68
 8066fd8: e437         	b	0x806684a <_vfiprintf_r+0x312> @ imm = #-0x792
 8066fda: 9b06         	ldr	r3, [sp, #0x18]
 8066fdc: 9905         	ldr	r1, [sp, #0x14]
 8066fde: f853 2b04    	ldr	r2, [r3], #4
 8066fe2: 6011         	str	r1, [r2]
 8066fe4: 9306         	str	r3, [sp, #0x18]
 8066fe6: f7ff bada    	b.w	0x806659e <_vfiprintf_r+0x66> @ imm = #-0xa4c
 8066fea: ac1a         	add	r4, sp, #0x68
 8066fec: e9cd 5a01    	strd	r5, r10, [sp, #4]
 8066ff0: 220a         	movs	r2, #0xa
 8066ff2: 2300         	movs	r3, #0x0
 8066ff4: 4682         	mov	r10, r0
 8066ff6: 460d         	mov	r5, r1
 8066ff8: f001 fecc    	bl	0x8068d94 <__aeabi_uldivmod> @ imm = #0x1d98
 8066ffc: 3230         	adds	r2, #0x30
 8066ffe: 2300         	movs	r3, #0x0
 8067000: 4650         	mov	r0, r10
 8067002: f804 2d01    	strb	r2, [r4, #-1]!
 8067006: 4629         	mov	r1, r5
 8067008: 220a         	movs	r2, #0xa
 806700a: f001 fec3    	bl	0x8068d94 <__aeabi_uldivmod> @ imm = #0x1d86
 806700e: f1ba 0f0a    	cmp.w	r10, #0xa
 8067012: f175 0300    	sbcs	r3, r5, #0x0
 8067016: d2eb         	bhs	0x8066ff0 <_vfiprintf_r+0xab8> @ imm = #-0x2a
 8067018: ab1a         	add	r3, sp, #0x68
 806701a: e9dd 5a01    	ldrd	r5, r10, [sp, #4]
 806701e: 1b1b         	subs	r3, r3, r4
 8067020: 9502         	str	r5, [sp, #0x8]
 8067022: 9303         	str	r3, [sp, #0xc]
 8067024: f7ff bbb9    	b.w	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x88e
 8067028: 787b         	ldrb	r3, [r7, #0x1]
 806702a: f045 0520    	orr	r5, r5, #0x20
 806702e: 3701         	adds	r7, #0x1
 8067030: f7ff bae2    	b.w	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0xa3c
 8067034: 4653         	mov	r3, r10
 8067036: 4c2a         	ldr	r4, [pc, #0xa8]         @ 0x80670e0 <_vfiprintf_r+0xba8>
 8067038: 9606         	str	r6, [sp, #0x18]
 806703a: 2b06         	cmp	r3, #0x6
 806703c: bf28         	it	hs
 806703e: 2306         	movhs	r3, #0x6
 8067040: 9303         	str	r3, [sp, #0xc]
 8067042: 9301         	str	r3, [sp, #0x4]
 8067044: e460         	b	0x8066908 <_vfiprintf_r+0x3d0> @ imm = #-0x740
 8067046: 2101         	movs	r1, #0x1
 8067048: 4662         	mov	r2, r12
 806704a: f10d 0968    	add.w	r9, sp, #0x68
 806704e: f7ff bbfc    	b.w	0x806684a <_vfiprintf_r+0x312> @ imm = #-0x808
 8067052: 2101         	movs	r1, #0x1
 8067054: f10d 022f    	add.w	r2, sp, #0x2f
 8067058: f10d 0968    	add.w	r9, sp, #0x68
 806705c: 468c         	mov	r12, r1
 806705e: 911b         	str	r1, [sp, #0x6c]
 8067060: 921a         	str	r2, [sp, #0x68]
 8067062: f7ff bbca    	b.w	0x80667fa <_vfiprintf_r+0x2c2> @ imm = #-0x86c
 8067066: f88d 002f    	strb.w	r0, [sp, #0x2f]
 806706a: e441         	b	0x80668f0 <_vfiprintf_r+0x3b8> @ imm = #-0x77e
 806706c: aa0d         	add	r2, sp, #0x34
 806706e: 4659         	mov	r1, r11
 8067070: 4640         	mov	r0, r8
 8067072: f7ff fa1d    	bl	0x80664b0 <__sprint_r.part.0> @ imm = #-0xbc6
 8067076: e42f         	b	0x80668d8 <_vfiprintf_r+0x3a0> @ imm = #-0x7a2
 8067078: 9d02         	ldr	r5, [sp, #0x8]
 806707a: e722         	b	0x8066ec2 <_vfiprintf_r+0x98a> @ imm = #-0x1bc
 806707c: f88d 002f    	strb.w	r0, [sp, #0x2f]
 8067080: e570         	b	0x8066b64 <_vfiprintf_r+0x62c> @ imm = #-0x520
 8067082: f88d 002f    	strb.w	r0, [sp, #0x2f]
 8067086: e4a8         	b	0x80669da <_vfiprintf_r+0x4a2> @ imm = #-0x6b0
 8067088: f88d 002f    	strb.w	r0, [sp, #0x2f]
 806708c: e541         	b	0x8066b12 <_vfiprintf_r+0x5da> @ imm = #-0x57e
 806708e: f88d 002f    	strb.w	r0, [sp, #0x2f]
 8067092: e510         	b	0x8066ab6 <_vfiprintf_r+0x57e> @ imm = #-0x5e0
 8067094: f88d 002f    	strb.w	r0, [sp, #0x2f]
 8067098: e457         	b	0x806694a <_vfiprintf_r+0x412> @ imm = #-0x752
 806709a: f8cd a00c    	str.w	r10, [sp, #0xc]
 806709e: 4682         	mov	r10, r0
 80670a0: 9606         	str	r6, [sp, #0x18]
 80670a2: 9502         	str	r5, [sp, #0x8]
 80670a4: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 80670a8: f7ff bb77    	b.w	0x806679a <_vfiprintf_r+0x262> @ imm = #-0x912
 80670ac: 9a0e         	ldr	r2, [sp, #0x38]
 80670ae: 980f         	ldr	r0, [sp, #0x3c]
 80670b0: 3201         	adds	r2, #0x1
 80670b2: 4e0c         	ldr	r6, [pc, #0x30]         @ 0x80670e4 <_vfiprintf_r+0xbac>
 80670b4: e69b         	b	0x8066dee <_vfiprintf_r+0x8b6> @ imm = #-0x2ca
 80670b6: 980e         	ldr	r0, [sp, #0x38]
 80670b8: 4e0a         	ldr	r6, [pc, #0x28]         @ 0x80670e4 <_vfiprintf_r+0xbac>
 80670ba: 3001         	adds	r0, #0x1
 80670bc: e6df         	b	0x8066e7e <_vfiprintf_r+0x946> @ imm = #-0x242
 80670be: 4608         	mov	r0, r1
 80670c0: 4d09         	ldr	r5, [pc, #0x24]         @ 0x80670e8 <_vfiprintf_r+0xbb0>
 80670c2: e5de         	b	0x8066c82 <_vfiprintf_r+0x74a> @ imm = #-0x444
 80670c4: f04f 33ff    	mov.w	r3, #0xffffffff
 80670c8: 9305         	str	r3, [sp, #0x14]
 80670ca: e40a         	b	0x80668e2 <_vfiprintf_r+0x3aa> @ imm = #-0x7ec
 80670cc: 9a06         	ldr	r2, [sp, #0x18]
 80670ce: 787b         	ldrb	r3, [r7, #0x1]
 80670d0: 4627         	mov	r7, r4
 80670d2: f852 4b04    	ldr	r4, [r2], #4
 80670d6: ea44 7ae4    	orr.w	r10, r4, r4, asr #31
 80670da: 9206         	str	r2, [sp, #0x18]
 80670dc: f7ff ba8c    	b.w	0x80665f8 <_vfiprintf_r+0xc0> @ imm = #-0xae8

080670e0 <$d>:
 80670e0: 04 a1 06 08  	.word	0x0806a104
 80670e4: e8 a2 06 08  	.word	0x0806a2e8
 80670e8: f8 a2 06 08  	.word	0x0806a2f8

080670ec <vfiprintf>:
 80670ec: b410         	push	{r4}
 80670ee: 4c04         	ldr	r4, [pc, #0x10]         @ 0x8067100 <vfiprintf+0x14>
 80670f0: 4613         	mov	r3, r2
 80670f2: 460a         	mov	r2, r1
 80670f4: 4601         	mov	r1, r0
 80670f6: 6820         	ldr	r0, [r4]
 80670f8: bc10         	pop	{r4}
 80670fa: f7ff ba1d    	b.w	0x8066538 <_vfiprintf_r> @ imm = #-0xbc6
 80670fe: bf00         	nop

08067100 <$d>:
 8067100: 90 23 00 20  	.word	0x20002390

08067104 <__sbprintf>:
 8067104: b570         	push	{r4, r5, r6, lr}
 8067106: f5ad 6d8d    	sub.w	sp, sp, #0x468
 806710a: 460c         	mov	r4, r1
 806710c: 4606         	mov	r6, r0
 806710e: a91a         	add	r1, sp, #0x68
 8067110: 9100         	str	r1, [sp]
 8067112: 9104         	str	r1, [sp, #0x10]
 8067114: 89a1         	ldrh	r1, [r4, #0xc]
 8067116: f021 0102    	bic	r1, r1, #0x2
 806711a: f8ad 100c    	strh.w	r1, [sp, #0xc]
 806711e: 6e61         	ldr	r1, [r4, #0x64]
 8067120: 9119         	str	r1, [sp, #0x64]
 8067122: 89e1         	ldrh	r1, [r4, #0xe]
 8067124: f8ad 100e    	strh.w	r1, [sp, #0xe]
 8067128: 69e1         	ldr	r1, [r4, #0x1c]
 806712a: 9107         	str	r1, [sp, #0x1c]
 806712c: 6a61         	ldr	r1, [r4, #0x24]
 806712e: 9109         	str	r1, [sp, #0x24]
 8067130: f44f 6180    	mov.w	r1, #0x400
 8067134: 9102         	str	r1, [sp, #0x8]
 8067136: 9105         	str	r1, [sp, #0x14]
 8067138: 2100         	movs	r1, #0x0
 806713a: 9106         	str	r1, [sp, #0x18]
 806713c: 4669         	mov	r1, sp
 806713e: f7ff f9fb    	bl	0x8066538 <_vfiprintf_r> @ imm = #-0xc0a
 8067142: 1e05         	subs	r5, r0, #0x0
 8067144: db07         	blt	0x8067156 <__sbprintf+0x52> @ imm = #0xe
 8067146: 4669         	mov	r1, sp
 8067148: 4630         	mov	r0, r6
 806714a: f7fd fd6b    	bl	0x8064c24 <_fflush_r>   @ imm = #-0x252a
 806714e: 2800         	cmp	r0, #0x0
 8067150: bf18         	it	ne
 8067152: f04f 35ff    	movne.w	r5, #0xffffffff
 8067156: f8bd 300c    	ldrh.w	r3, [sp, #0xc]
 806715a: 065b         	lsls	r3, r3, #0x19
 806715c: d503         	bpl	0x8067166 <__sbprintf+0x62> @ imm = #0x6
 806715e: 89a3         	ldrh	r3, [r4, #0xc]
 8067160: f043 0340    	orr	r3, r3, #0x40
 8067164: 81a3         	strh	r3, [r4, #0xc]
 8067166: 4628         	mov	r0, r5
 8067168: f50d 6d8d    	add.w	sp, sp, #0x468
 806716c: bd70         	pop	{r4, r5, r6, pc}
 806716e: bf00         	nop

08067170 <_write_r>:
 8067170: b538         	push	{r3, r4, r5, lr}
 8067172: 460c         	mov	r4, r1
 8067174: 4684         	mov	r12, r0
 8067176: 4611         	mov	r1, r2
 8067178: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x8067198 <_write_r+0x28>
 806717a: 461a         	mov	r2, r3
 806717c: 2300         	movs	r3, #0x0
 806717e: 4620         	mov	r0, r4
 8067180: 4664         	mov	r4, r12
 8067182: 602b         	str	r3, [r5]
 8067184: f001 f968    	bl	0x8068458 <_write>      @ imm = #0x12d0
 8067188: 1c43         	adds	r3, r0, #0x1
 806718a: d000         	beq	0x806718e <_write_r+0x1e> @ imm = #0x0
 806718c: bd38         	pop	{r3, r4, r5, pc}
 806718e: 682b         	ldr	r3, [r5]
 8067190: 2b00         	cmp	r3, #0x0
 8067192: d0fb         	beq	0x806718c <_write_r+0x1c> @ imm = #-0xa
 8067194: 6023         	str	r3, [r4]
 8067196: bd38         	pop	{r3, r4, r5, pc}

08067198 <$d>:
 8067198: 9c 3f 00 20  	.word	0x20003f9c

0806719c <__assert_func>:
 806719c: 4d0a         	ldr	r5, [pc, #0x28]         @ 0x80671c8 <__assert_func+0x2c>
 806719e: 4614         	mov	r4, r2
 80671a0: 461a         	mov	r2, r3
 80671a2: 4603         	mov	r3, r0
 80671a4: 682e         	ldr	r6, [r5]
 80671a6: 460d         	mov	r5, r1
 80671a8: b500         	push	{lr}
 80671aa: 68f0         	ldr	r0, [r6, #0xc]
 80671ac: b085         	sub	sp, #0x14
 80671ae: b144         	cbz	r4, 0x80671c2 <__assert_func+0x26> @ imm = #0x10
 80671b0: 4906         	ldr	r1, [pc, #0x18]         @ 0x80671cc <__assert_func+0x30>
 80671b2: 9500         	str	r5, [sp]
 80671b4: e9cd 1401    	strd	r1, r4, [sp, #4]
 80671b8: 4905         	ldr	r1, [pc, #0x14]         @ 0x80671d0 <__assert_func+0x34>
 80671ba: f000 f8cd    	bl	0x8067358 <fiprintf>    @ imm = #0x19a
 80671be: f000 ff9f    	bl	0x8068100 <abort>       @ imm = #0xf3e
 80671c2: 4904         	ldr	r1, [pc, #0x10]         @ 0x80671d4 <__assert_func+0x38>
 80671c4: 460c         	mov	r4, r1
 80671c6: e7f4         	b	0x80671b2 <__assert_func+0x16> @ imm = #-0x18

080671c8 <$d>:
 80671c8: 90 23 00 20  	.word	0x20002390
 80671cc: 08 a3 06 08  	.word	0x0806a308
 80671d0: 18 a3 06 08  	.word	0x0806a318
 80671d4: 14 a3 06 08  	.word	0x0806a314

080671d8 <__assert>:
 80671d8: b508         	push	{r3, lr}
 80671da: 4613         	mov	r3, r2
 80671dc: 2200         	movs	r2, #0x0
 80671de: f7ff ffdd    	bl	0x806719c <__assert_func> @ imm = #-0x46
 80671e2: bf00         	nop

080671e4 <_calloc_r>:
 80671e4: b510         	push	{r4, lr}
 80671e6: fb02 f101    	mul	r1, r2, r1
 80671ea: f7fe f8a7    	bl	0x806533c <_malloc_r>   @ imm = #-0x1eb2
 80671ee: 4604         	mov	r4, r0
 80671f0: b168         	cbz	r0, 0x806720e <_calloc_r+0x2a> @ imm = #0x1a
 80671f2: f850 2c04    	ldr	r2, [r0, #-4]
 80671f6: f022 0203    	bic	r2, r2, #0x3
 80671fa: 3a04         	subs	r2, #0x4
 80671fc: 2a24         	cmp	r2, #0x24
 80671fe: d814         	bhi	0x806722a <_calloc_r+0x46> @ imm = #0x28
 8067200: 2a13         	cmp	r2, #0x13
 8067202: d806         	bhi	0x8067212 <_calloc_r+0x2e> @ imm = #0xc
 8067204: 4602         	mov	r2, r0
 8067206: 2300         	movs	r3, #0x0
 8067208: e9c2 3300    	strd	r3, r3, [r2]
 806720c: 6093         	str	r3, [r2, #0x8]
 806720e: 4620         	mov	r0, r4
 8067210: bd10         	pop	{r4, pc}
 8067212: 2300         	movs	r3, #0x0
 8067214: 2a1b         	cmp	r2, #0x1b
 8067216: e9c0 3300    	strd	r3, r3, [r0]
 806721a: d90b         	bls	0x8067234 <_calloc_r+0x50> @ imm = #0x16
 806721c: 2a24         	cmp	r2, #0x24
 806721e: e9c0 3302    	strd	r3, r3, [r0, #8]
 8067222: d00a         	beq	0x806723a <_calloc_r+0x56> @ imm = #0x14
 8067224: f100 0210    	add.w	r2, r0, #0x10
 8067228: e7ed         	b	0x8067206 <_calloc_r+0x22> @ imm = #-0x26
 806722a: 2100         	movs	r1, #0x0
 806722c: f7fb f8a2    	bl	0x8062374 <memset>      @ imm = #-0x4ebc
 8067230: 4620         	mov	r0, r4
 8067232: bd10         	pop	{r4, pc}
 8067234: f100 0208    	add.w	r2, r0, #0x8
 8067238: e7e5         	b	0x8067206 <_calloc_r+0x22> @ imm = #-0x36
 806723a: f100 0218    	add.w	r2, r0, #0x18
 806723e: e9c0 3304    	strd	r3, r3, [r0, #16]
 8067242: e7e0         	b	0x8067206 <_calloc_r+0x22> @ imm = #-0x40

08067244 <_close_r>:
 8067244: b538         	push	{r3, r4, r5, lr}
 8067246: 2200         	movs	r2, #0x0
 8067248: 4d06         	ldr	r5, [pc, #0x18]         @ 0x8067264 <_close_r+0x20>
 806724a: 4604         	mov	r4, r0
 806724c: 4608         	mov	r0, r1
 806724e: 602a         	str	r2, [r5]
 8067250: f001 f8ba    	bl	0x80683c8 <_close>      @ imm = #0x1174
 8067254: 1c43         	adds	r3, r0, #0x1
 8067256: d000         	beq	0x806725a <_close_r+0x16> @ imm = #0x0
 8067258: bd38         	pop	{r3, r4, r5, pc}
 806725a: 682b         	ldr	r3, [r5]
 806725c: 2b00         	cmp	r3, #0x0
 806725e: d0fb         	beq	0x8067258 <_close_r+0x14> @ imm = #-0xa
 8067260: 6023         	str	r3, [r4]
 8067262: bd38         	pop	{r3, r4, r5, pc}

08067264 <$d>:
 8067264: 9c 3f 00 20  	.word	0x20003f9c

08067268 <_fclose_r.part.0>:
 8067268: b570         	push	{r4, r5, r6, lr}
 806726a: 460c         	mov	r4, r1
 806726c: 4606         	mov	r6, r0
 806726e: f7fd fc3d    	bl	0x8064aec <__sflush_r>  @ imm = #-0x2786
 8067272: 4605         	mov	r5, r0
 8067274: 6ae3         	ldr	r3, [r4, #0x2c]
 8067276: b133         	cbz	r3, 0x8067286 <_fclose_r.part.0+0x1e> @ imm = #0xc
 8067278: 69e1         	ldr	r1, [r4, #0x1c]
 806727a: 4630         	mov	r0, r6
 806727c: 4798         	blx	r3
 806727e: 2800         	cmp	r0, #0x0
 8067280: bfb8         	it	lt
 8067282: f04f 35ff    	movlt.w	r5, #0xffffffff
 8067286: 89a3         	ldrh	r3, [r4, #0xc]
 8067288: 061b         	lsls	r3, r3, #0x18
 806728a: d419         	bmi	0x80672c0 <_fclose_r.part.0+0x58> @ imm = #0x32
 806728c: 6b21         	ldr	r1, [r4, #0x30]
 806728e: b141         	cbz	r1, 0x80672a2 <_fclose_r.part.0+0x3a> @ imm = #0x10
 8067290: f104 0340    	add.w	r3, r4, #0x40
 8067294: 4299         	cmp	r1, r3
 8067296: d002         	beq	0x806729e <_fclose_r.part.0+0x36> @ imm = #0x4
 8067298: 4630         	mov	r0, r6
 806729a: f7fd fe5d    	bl	0x8064f58 <_free_r>     @ imm = #-0x2346
 806729e: 2300         	movs	r3, #0x0
 80672a0: 6323         	str	r3, [r4, #0x30]
 80672a2: 6c61         	ldr	r1, [r4, #0x44]
 80672a4: b121         	cbz	r1, 0x80672b0 <_fclose_r.part.0+0x48> @ imm = #0x8
 80672a6: 4630         	mov	r0, r6
 80672a8: f7fd fe56    	bl	0x8064f58 <_free_r>     @ imm = #-0x2354
 80672ac: 2300         	movs	r3, #0x0
 80672ae: 6463         	str	r3, [r4, #0x44]
 80672b0: f7fd fde6    	bl	0x8064e80 <__sfp_lock_acquire> @ imm = #-0x2434
 80672b4: 2300         	movs	r3, #0x0
 80672b6: 81a3         	strh	r3, [r4, #0xc]
 80672b8: f7fd fde4    	bl	0x8064e84 <__sfp_lock_release> @ imm = #-0x2438
 80672bc: 4628         	mov	r0, r5
 80672be: bd70         	pop	{r4, r5, r6, pc}
 80672c0: 6921         	ldr	r1, [r4, #0x10]
 80672c2: 4630         	mov	r0, r6
 80672c4: f7fd fe48    	bl	0x8064f58 <_free_r>     @ imm = #-0x2370
 80672c8: e7e0         	b	0x806728c <_fclose_r.part.0+0x24> @ imm = #-0x40
 80672ca: bf00         	nop

080672cc <_fclose_r>:
 80672cc: b1b1         	cbz	r1, 0x80672fc <_fclose_r+0x30> @ imm = #0x2c
 80672ce: b538         	push	{r3, r4, r5, lr}
 80672d0: 4605         	mov	r5, r0
 80672d2: 460c         	mov	r4, r1
 80672d4: b108         	cbz	r0, 0x80672da <_fclose_r+0xe> @ imm = #0x2
 80672d6: 6b83         	ldr	r3, [r0, #0x38]
 80672d8: b14b         	cbz	r3, 0x80672ee <_fclose_r+0x22> @ imm = #0x12
 80672da: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 80672de: b90b         	cbnz	r3, 0x80672e4 <_fclose_r+0x18> @ imm = #0x2
 80672e0: 2000         	movs	r0, #0x0
 80672e2: bd38         	pop	{r3, r4, r5, pc}
 80672e4: 4621         	mov	r1, r4
 80672e6: 4628         	mov	r0, r5
 80672e8: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 80672ec: e7bc         	b	0x8067268 <_fclose_r.part.0> @ imm = #-0x88
 80672ee: f7fd fdc3    	bl	0x8064e78 <__sinit>     @ imm = #-0x247a
 80672f2: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 80672f6: 2b00         	cmp	r3, #0x0
 80672f8: d0f2         	beq	0x80672e0 <_fclose_r+0x14> @ imm = #-0x1c
 80672fa: e7f3         	b	0x80672e4 <_fclose_r+0x18> @ imm = #-0x1a
 80672fc: 2000         	movs	r0, #0x0
 80672fe: 4770         	bx	lr

08067300 <fclose>:
 8067300: b1c0         	cbz	r0, 0x8067334 <fclose+0x34> @ imm = #0x30
 8067302: b538         	push	{r3, r4, r5, lr}
 8067304: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x8067338 <fclose+0x38>
 8067306: 4604         	mov	r4, r0
 8067308: 681d         	ldr	r5, [r3]
 806730a: b10d         	cbz	r5, 0x8067310 <fclose+0x10> @ imm = #0x2
 806730c: 6bab         	ldr	r3, [r5, #0x38]
 806730e: b14b         	cbz	r3, 0x8067324 <fclose+0x24> @ imm = #0x12
 8067310: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8067314: b90b         	cbnz	r3, 0x806731a <fclose+0x1a> @ imm = #0x2
 8067316: 2000         	movs	r0, #0x0
 8067318: bd38         	pop	{r3, r4, r5, pc}
 806731a: 4621         	mov	r1, r4
 806731c: 4628         	mov	r0, r5
 806731e: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8067322: e7a1         	b	0x8067268 <_fclose_r.part.0> @ imm = #-0xbe
 8067324: 4628         	mov	r0, r5
 8067326: f7fd fda7    	bl	0x8064e78 <__sinit>     @ imm = #-0x24b2
 806732a: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 806732e: 2b00         	cmp	r3, #0x0
 8067330: d0f1         	beq	0x8067316 <fclose+0x16> @ imm = #-0x1e
 8067332: e7f2         	b	0x806731a <fclose+0x1a> @ imm = #-0x1c
 8067334: 2000         	movs	r0, #0x0
 8067336: 4770         	bx	lr

08067338 <$d>:
 8067338: 90 23 00 20  	.word	0x20002390

0806733c <_fiprintf_r>:
 806733c: b40c         	push	{r2, r3}
 806733e: b500         	push	{lr}
 8067340: b083         	sub	sp, #0xc
 8067342: ab04         	add	r3, sp, #0x10
 8067344: f853 2b04    	ldr	r2, [r3], #4
 8067348: 9301         	str	r3, [sp, #0x4]
 806734a: f7ff f8f5    	bl	0x8066538 <_vfiprintf_r> @ imm = #-0xe16
 806734e: b003         	add	sp, #0xc
 8067350: f85d eb04    	ldr	lr, [sp], #4
 8067354: b002         	add	sp, #0x8
 8067356: 4770         	bx	lr

08067358 <fiprintf>:
 8067358: b40e         	push	{r1, r2, r3}
 806735a: b510         	push	{r4, lr}
 806735c: b083         	sub	sp, #0xc
 806735e: 4c07         	ldr	r4, [pc, #0x1c]         @ 0x806737c <fiprintf+0x24>
 8067360: 4601         	mov	r1, r0
 8067362: ab05         	add	r3, sp, #0x14
 8067364: 6820         	ldr	r0, [r4]
 8067366: f853 2b04    	ldr	r2, [r3], #4
 806736a: 9301         	str	r3, [sp, #0x4]
 806736c: f7ff f8e4    	bl	0x8066538 <_vfiprintf_r> @ imm = #-0xe38
 8067370: b003         	add	sp, #0xc
 8067372: e8bd 4010    	pop.w	{r4, lr}
 8067376: b003         	add	sp, #0xc
 8067378: 4770         	bx	lr
 806737a: bf00         	nop

0806737c <$d>:
 806737c: 90 23 00 20  	.word	0x20002390

08067380 <__fputwc>:
 8067380: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
 8067384: b083         	sub	sp, #0xc
 8067386: 4607         	mov	r7, r0
 8067388: 4688         	mov	r8, r1
 806738a: 4614         	mov	r4, r2
 806738c: f000 fa3a    	bl	0x8067804 <__locale_mb_cur_max> @ imm = #0x474
 8067390: 2801         	cmp	r0, #0x1
 8067392: d103         	bne	0x806739c <__fputwc+0x1c> @ imm = #0x6
 8067394: f108 33ff    	add.w	r3, r8, #0xffffffff
 8067398: 2bfe         	cmp	r3, #0xfe
 806739a: d932         	bls	0x8067402 <__fputwc+0x82> @ imm = #0x64
 806739c: 4642         	mov	r2, r8
 806739e: f104 035c    	add.w	r3, r4, #0x5c
 80673a2: a901         	add	r1, sp, #0x4
 80673a4: 4638         	mov	r0, r7
 80673a6: f000 fe4d    	bl	0x8068044 <_wcrtomb_r>  @ imm = #0xc9a
 80673aa: 1c42         	adds	r2, r0, #0x1
 80673ac: 4606         	mov	r6, r0
 80673ae: d033         	beq	0x8067418 <__fputwc+0x98> @ imm = #0x66
 80673b0: b368         	cbz	r0, 0x806740e <__fputwc+0x8e> @ imm = #0x5a
 80673b2: f89d c004    	ldrb.w	r12, [sp, #0x4]
 80673b6: f10d 0905    	add.w	r9, sp, #0x5
 80673ba: 2500         	movs	r5, #0x0
 80673bc: e00c         	b	0x80673d8 <__fputwc+0x58> @ imm = #0x18
 80673be: f1bc 0f0a    	cmp.w	r12, #0xa
 80673c2: d015         	beq	0x80673f0 <__fputwc+0x70> @ imm = #0x2a
 80673c4: 6823         	ldr	r3, [r4]
 80673c6: 1c5a         	adds	r2, r3, #0x1
 80673c8: 6022         	str	r2, [r4]
 80673ca: f883 c000    	strb.w	r12, [r3]
 80673ce: 3501         	adds	r5, #0x1
 80673d0: 42b5         	cmp	r5, r6
 80673d2: d21c         	bhs	0x806740e <__fputwc+0x8e> @ imm = #0x38
 80673d4: f819 cb01    	ldrb	r12, [r9], #1
 80673d8: 68a3         	ldr	r3, [r4, #0x8]
 80673da: 3b01         	subs	r3, #0x1
 80673dc: 2b00         	cmp	r3, #0x0
 80673de: 60a3         	str	r3, [r4, #0x8]
 80673e0: daf0         	bge	0x80673c4 <__fputwc+0x44> @ imm = #-0x20
 80673e2: f8d4 e018    	ldr.w	lr, [r4, #0x18]
 80673e6: 4661         	mov	r1, r12
 80673e8: 4622         	mov	r2, r4
 80673ea: 4638         	mov	r0, r7
 80673ec: 4573         	cmp	r3, lr
 80673ee: dae6         	bge	0x80673be <__fputwc+0x3e> @ imm = #-0x34
 80673f0: f000 fdc8    	bl	0x8067f84 <__swbuf_r>   @ imm = #0xb90
 80673f4: 1c43         	adds	r3, r0, #0x1
 80673f6: d1ea         	bne	0x80673ce <__fputwc+0x4e> @ imm = #-0x2c
 80673f8: 4606         	mov	r6, r0
 80673fa: 4630         	mov	r0, r6
 80673fc: b003         	add	sp, #0xc
 80673fe: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8067402: fa5f fc88    	uxtb.w	r12, r8
 8067406: 4606         	mov	r6, r0
 8067408: f88d c004    	strb.w	r12, [sp, #0x4]
 806740c: e7d3         	b	0x80673b6 <__fputwc+0x36> @ imm = #-0x5a
 806740e: 4646         	mov	r6, r8
 8067410: 4630         	mov	r0, r6
 8067412: b003         	add	sp, #0xc
 8067414: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8067418: 89a3         	ldrh	r3, [r4, #0xc]
 806741a: f043 0340    	orr	r3, r3, #0x40
 806741e: 81a3         	strh	r3, [r4, #0xc]
 8067420: e7eb         	b	0x80673fa <__fputwc+0x7a> @ imm = #-0x2a
 8067422: bf00         	nop

08067424 <_fputwc_r>:
 8067424: f9b2 300c    	ldrsh.w	r3, [r2, #0xc]
 8067428: f413 5f00    	tst.w	r3, #0x2000
 806742c: d10a         	bne	0x8067444 <_fputwc_r+0x20> @ imm = #0x14
 806742e: f443 5300    	orr	r3, r3, #0x2000
 8067432: b410         	push	{r4}
 8067434: 6e54         	ldr	r4, [r2, #0x64]
 8067436: 8193         	strh	r3, [r2, #0xc]
 8067438: f444 5400    	orr	r4, r4, #0x2000
 806743c: 6654         	str	r4, [r2, #0x64]
 806743e: bc10         	pop	{r4}
 8067440: f7ff bf9e    	b.w	0x8067380 <__fputwc>    @ imm = #-0xc4
 8067444: f7ff bf9c    	b.w	0x8067380 <__fputwc>    @ imm = #-0xc8

08067448 <fputwc>:
 8067448: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x8067484 <fputwc+0x3c>
 806744a: b570         	push	{r4, r5, r6, lr}
 806744c: 681e         	ldr	r6, [r3]
 806744e: 4605         	mov	r5, r0
 8067450: 460c         	mov	r4, r1
 8067452: b10e         	cbz	r6, 0x8067458 <fputwc+0x10> @ imm = #0x2
 8067454: 6bb3         	ldr	r3, [r6, #0x38]
 8067456: b18b         	cbz	r3, 0x806747c <fputwc+0x34> @ imm = #0x22
 8067458: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 806745c: 049a         	lsls	r2, r3, #0x12
 806745e: d406         	bmi	0x806746e <fputwc+0x26> @ imm = #0xc
 8067460: 6e62         	ldr	r2, [r4, #0x64]
 8067462: f443 5300    	orr	r3, r3, #0x2000
 8067466: f442 5200    	orr	r2, r2, #0x2000
 806746a: 81a3         	strh	r3, [r4, #0xc]
 806746c: 6662         	str	r2, [r4, #0x64]
 806746e: 4622         	mov	r2, r4
 8067470: 4629         	mov	r1, r5
 8067472: 4630         	mov	r0, r6
 8067474: e8bd 4070    	pop.w	{r4, r5, r6, lr}
 8067478: f7ff bf82    	b.w	0x8067380 <__fputwc>    @ imm = #-0xfc
 806747c: 4630         	mov	r0, r6
 806747e: f7fd fcfb    	bl	0x8064e78 <__sinit>     @ imm = #-0x260a
 8067482: e7e9         	b	0x8067458 <fputwc+0x10> @ imm = #-0x2e

08067484 <$d>:
 8067484: 90 23 00 20  	.word	0x20002390

08067488 <_fstat_r>:
 8067488: b570         	push	{r4, r5, r6, lr}
 806748a: 460c         	mov	r4, r1
 806748c: 4603         	mov	r3, r0
 806748e: 4d08         	ldr	r5, [pc, #0x20]         @ 0x80674b0 <_fstat_r+0x28>
 8067490: 2600         	movs	r6, #0x0
 8067492: 4620         	mov	r0, r4
 8067494: 4611         	mov	r1, r2
 8067496: 461c         	mov	r4, r3
 8067498: 602e         	str	r6, [r5]
 806749a: f000 ff9d    	bl	0x80683d8 <_fstat>      @ imm = #0xf3a
 806749e: 1c43         	adds	r3, r0, #0x1
 80674a0: d000         	beq	0x80674a4 <_fstat_r+0x1c> @ imm = #0x0
 80674a2: bd70         	pop	{r4, r5, r6, pc}
 80674a4: 682b         	ldr	r3, [r5]
 80674a6: 2b00         	cmp	r3, #0x0
 80674a8: d0fb         	beq	0x80674a2 <_fstat_r+0x1a> @ imm = #-0xa
 80674aa: 6023         	str	r3, [r4]
 80674ac: bd70         	pop	{r4, r5, r6, pc}
 80674ae: bf00         	nop

080674b0 <$d>:
 80674b0: 9c 3f 00 20  	.word	0x20003f9c

080674b4 <__sfvwrite_r>:
 80674b4: 6893         	ldr	r3, [r2, #0x8]
 80674b6: 2b00         	cmp	r3, #0x0
 80674b8: f000 8081    	beq.w	0x80675be <__sfvwrite_r+0x10a> @ imm = #0x102
 80674bc: f9b1 300c    	ldrsh.w	r3, [r1, #0xc]
 80674c0: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80674c4: 460c         	mov	r4, r1
 80674c6: 0719         	lsls	r1, r3, #0x1c
 80674c8: 4680         	mov	r8, r0
 80674ca: b083         	sub	sp, #0xc
 80674cc: 4617         	mov	r7, r2
 80674ce: b298         	uxth	r0, r3
 80674d0: d523         	bpl	0x806751a <__sfvwrite_r+0x66> @ imm = #0x46
 80674d2: 6923         	ldr	r3, [r4, #0x10]
 80674d4: b30b         	cbz	r3, 0x806751a <__sfvwrite_r+0x66> @ imm = #0x42
 80674d6: f010 0302    	ands	r3, r0, #0x2
 80674da: 683d         	ldr	r5, [r7]
 80674dc: d02b         	beq	0x8067536 <__sfvwrite_r+0x82> @ imm = #0x56
 80674de: f04f 0a00    	mov.w	r10, #0x0
 80674e2: f8df b2b8    	ldr.w	r11, [pc, #0x2b8]       @ 0x806779c <__sfvwrite_r+0x2e8>
 80674e6: 4656         	mov	r6, r10
 80674e8: 455e         	cmp	r6, r11
 80674ea: 4633         	mov	r3, r6
 80674ec: 4652         	mov	r2, r10
 80674ee: 4640         	mov	r0, r8
 80674f0: bf28         	it	hs
 80674f2: 465b         	movhs	r3, r11
 80674f4: 2e00         	cmp	r6, #0x0
 80674f6: d04f         	beq	0x8067598 <__sfvwrite_r+0xe4> @ imm = #0x9e
 80674f8: 69e1         	ldr	r1, [r4, #0x1c]
 80674fa: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 80674fe: 47e0         	blx	r12
 8067500: 2800         	cmp	r0, #0x0
 8067502: dd52         	ble	0x80675aa <__sfvwrite_r+0xf6> @ imm = #0xa4
 8067504: 68bb         	ldr	r3, [r7, #0x8]
 8067506: 4482         	add	r10, r0
 8067508: 1a36         	subs	r6, r6, r0
 806750a: 1a18         	subs	r0, r3, r0
 806750c: 60b8         	str	r0, [r7, #0x8]
 806750e: 2800         	cmp	r0, #0x0
 8067510: d1ea         	bne	0x80674e8 <__sfvwrite_r+0x34> @ imm = #-0x2c
 8067512: 2000         	movs	r0, #0x0
 8067514: b003         	add	sp, #0xc
 8067516: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806751a: 4621         	mov	r1, r4
 806751c: 4640         	mov	r0, r8
 806751e: f7fc fa65    	bl	0x80639ec <__swsetup_r> @ imm = #-0x3b36
 8067522: 2800         	cmp	r0, #0x0
 8067524: f040 8137    	bne.w	0x8067796 <__sfvwrite_r+0x2e2> @ imm = #0x26e
 8067528: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 806752c: 683d         	ldr	r5, [r7]
 806752e: b298         	uxth	r0, r3
 8067530: f010 0302    	ands	r3, r0, #0x2
 8067534: d1d3         	bne	0x80674de <__sfvwrite_r+0x2a> @ imm = #-0x5a
 8067536: f010 0901    	ands	r9, r0, #0x1
 806753a: d142         	bne	0x80675c2 <__sfvwrite_r+0x10e> @ imm = #0x84
 806753c: 464e         	mov	r6, r9
 806753e: b33e         	cbz	r6, 0x8067590 <__sfvwrite_r+0xdc> @ imm = #0x4e
 8067540: 0582         	lsls	r2, r0, #0x16
 8067542: f8d4 b008    	ldr.w	r11, [r4, #0x8]
 8067546: f140 8084    	bpl.w	0x8067652 <__sfvwrite_r+0x19e> @ imm = #0x108
 806754a: 45b3         	cmp	r11, r6
 806754c: 465a         	mov	r2, r11
 806754e: f200 80b4    	bhi.w	0x80676ba <__sfvwrite_r+0x206> @ imm = #0x168
 8067552: f410 6f90    	tst.w	r0, #0x480
 8067556: f040 80c1    	bne.w	0x80676dc <__sfvwrite_r+0x228> @ imm = #0x182
 806755a: 6820         	ldr	r0, [r4]
 806755c: 4649         	mov	r1, r9
 806755e: 9201         	str	r2, [sp, #0x4]
 8067560: f000 f9ac    	bl	0x80678bc <memmove>     @ imm = #0x358
 8067564: 68a3         	ldr	r3, [r4, #0x8]
 8067566: 6821         	ldr	r1, [r4]
 8067568: 46b2         	mov	r10, r6
 806756a: 9a01         	ldr	r2, [sp, #0x4]
 806756c: eba3 030b    	sub.w	r3, r3, r11
 8067570: 2600         	movs	r6, #0x0
 8067572: 440a         	add	r2, r1
 8067574: 60a3         	str	r3, [r4, #0x8]
 8067576: 6022         	str	r2, [r4]
 8067578: 68b8         	ldr	r0, [r7, #0x8]
 806757a: 44d1         	add	r9, r10
 806757c: eba0 000a    	sub.w	r0, r0, r10
 8067580: 60b8         	str	r0, [r7, #0x8]
 8067582: 2800         	cmp	r0, #0x0
 8067584: d0c5         	beq	0x8067512 <__sfvwrite_r+0x5e> @ imm = #-0x76
 8067586: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 806758a: b280         	uxth	r0, r0
 806758c: 2e00         	cmp	r6, #0x0
 806758e: d1d7         	bne	0x8067540 <__sfvwrite_r+0x8c> @ imm = #-0x52
 8067590: e9d5 9600    	ldrd	r9, r6, [r5]
 8067594: 3508         	adds	r5, #0x8
 8067596: e7d2         	b	0x806753e <__sfvwrite_r+0x8a> @ imm = #-0x5c
 8067598: e9d5 a600    	ldrd	r10, r6, [r5]
 806759c: 3508         	adds	r5, #0x8
 806759e: e7a3         	b	0x80674e8 <__sfvwrite_r+0x34> @ imm = #-0xba
 80675a0: 4621         	mov	r1, r4
 80675a2: 4640         	mov	r0, r8
 80675a4: f7fd fb3e    	bl	0x8064c24 <_fflush_r>   @ imm = #-0x2984
 80675a8: b388         	cbz	r0, 0x806760e <__sfvwrite_r+0x15a> @ imm = #0x62
 80675aa: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 80675ae: f043 0340    	orr	r3, r3, #0x40
 80675b2: f04f 30ff    	mov.w	r0, #0xffffffff
 80675b6: 81a3         	strh	r3, [r4, #0xc]
 80675b8: b003         	add	sp, #0xc
 80675ba: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80675be: 2000         	movs	r0, #0x0
 80675c0: 4770         	bx	lr
 80675c2: 461e         	mov	r6, r3
 80675c4: 46aa         	mov	r10, r5
 80675c6: 4699         	mov	r9, r3
 80675c8: 4618         	mov	r0, r3
 80675ca: 461d         	mov	r5, r3
 80675cc: b35e         	cbz	r6, 0x8067626 <__sfvwrite_r+0x172> @ imm = #0x56
 80675ce: 2800         	cmp	r0, #0x0
 80675d0: d033         	beq	0x806763a <__sfvwrite_r+0x186> @ imm = #0x66
 80675d2: 464a         	mov	r2, r9
 80675d4: 68a1         	ldr	r1, [r4, #0x8]
 80675d6: 42b2         	cmp	r2, r6
 80675d8: 6963         	ldr	r3, [r4, #0x14]
 80675da: 6820         	ldr	r0, [r4]
 80675dc: bf28         	it	hs
 80675de: 4632         	movhs	r2, r6
 80675e0: eb03 0b01    	add.w	r11, r3, r1
 80675e4: 6921         	ldr	r1, [r4, #0x10]
 80675e6: 4288         	cmp	r0, r1
 80675e8: d902         	bls	0x80675f0 <__sfvwrite_r+0x13c> @ imm = #0x4
 80675ea: 455a         	cmp	r2, r11
 80675ec: f300 80a9    	bgt.w	0x8067742 <__sfvwrite_r+0x28e> @ imm = #0x152
 80675f0: 4293         	cmp	r3, r2
 80675f2: dc66         	bgt	0x80676c2 <__sfvwrite_r+0x20e> @ imm = #0xcc
 80675f4: 462a         	mov	r2, r5
 80675f6: 69e1         	ldr	r1, [r4, #0x1c]
 80675f8: 4640         	mov	r0, r8
 80675fa: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 80675fe: 47e0         	blx	r12
 8067600: f1b0 0b00    	subs.w	r11, r0, #0x0
 8067604: ddd1         	ble	0x80675aa <__sfvwrite_r+0xf6> @ imm = #-0x5e
 8067606: ebb9 090b    	subs.w	r9, r9, r11
 806760a: d0c9         	beq	0x80675a0 <__sfvwrite_r+0xec> @ imm = #-0x6e
 806760c: 2001         	movs	r0, #0x1
 806760e: 68ba         	ldr	r2, [r7, #0x8]
 8067610: 445d         	add	r5, r11
 8067612: eba6 060b    	sub.w	r6, r6, r11
 8067616: eba2 020b    	sub.w	r2, r2, r11
 806761a: 60ba         	str	r2, [r7, #0x8]
 806761c: 2a00         	cmp	r2, #0x0
 806761e: f43f af78    	beq.w	0x8067512 <__sfvwrite_r+0x5e> @ imm = #-0x110
 8067622: 2e00         	cmp	r6, #0x0
 8067624: d1d3         	bne	0x80675ce <__sfvwrite_r+0x11a> @ imm = #-0x5a
 8067626: f10a 0308    	add.w	r3, r10, #0x8
 806762a: f853 6c04    	ldr	r6, [r3, #-4]
 806762e: 469a         	mov	r10, r3
 8067630: f853 5c08    	ldr	r5, [r3, #-8]
 8067634: 3308         	adds	r3, #0x8
 8067636: 2e00         	cmp	r6, #0x0
 8067638: d0f7         	beq	0x806762a <__sfvwrite_r+0x176> @ imm = #-0x12
 806763a: 4632         	mov	r2, r6
 806763c: 210a         	movs	r1, #0xa
 806763e: 4628         	mov	r0, r5
 8067640: f7fe f932    	bl	0x80658a8 <memchr>      @ imm = #-0x1d9c
 8067644: 2800         	cmp	r0, #0x0
 8067646: f000 809d    	beq.w	0x8067784 <__sfvwrite_r+0x2d0> @ imm = #0x13a
 806764a: 3001         	adds	r0, #0x1
 806764c: eba0 0905    	sub.w	r9, r0, r5
 8067650: e7bf         	b	0x80675d2 <__sfvwrite_r+0x11e> @ imm = #-0x82
 8067652: 6820         	ldr	r0, [r4]
 8067654: 6923         	ldr	r3, [r4, #0x10]
 8067656: 4298         	cmp	r0, r3
 8067658: d817         	bhi	0x806768a <__sfvwrite_r+0x1d6> @ imm = #0x2e
 806765a: 6963         	ldr	r3, [r4, #0x14]
 806765c: 42b3         	cmp	r3, r6
 806765e: d814         	bhi	0x806768a <__sfvwrite_r+0x1d6> @ imm = #0x28
 8067660: f06f 4200    	mvn	r2, #0x80000000
 8067664: 69e1         	ldr	r1, [r4, #0x1c]
 8067666: 4640         	mov	r0, r8
 8067668: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 806766c: 42b2         	cmp	r2, r6
 806766e: bf28         	it	hs
 8067670: 4632         	movhs	r2, r6
 8067672: fb92 f2f3    	sdiv	r2, r2, r3
 8067676: fb02 f303    	mul	r3, r2, r3
 806767a: 464a         	mov	r2, r9
 806767c: 47e0         	blx	r12
 806767e: f1b0 0a00    	subs.w	r10, r0, #0x0
 8067682: dd92         	ble	0x80675aa <__sfvwrite_r+0xf6> @ imm = #-0xdc
 8067684: eba6 060a    	sub.w	r6, r6, r10
 8067688: e776         	b	0x8067578 <__sfvwrite_r+0xc4> @ imm = #-0x114
 806768a: 45b3         	cmp	r11, r6
 806768c: 46da         	mov	r10, r11
 806768e: 4649         	mov	r1, r9
 8067690: bf28         	it	hs
 8067692: 46b2         	movhs	r10, r6
 8067694: 4652         	mov	r2, r10
 8067696: f000 f911    	bl	0x80678bc <memmove>     @ imm = #0x222
 806769a: 68a3         	ldr	r3, [r4, #0x8]
 806769c: 6822         	ldr	r2, [r4]
 806769e: eba3 030a    	sub.w	r3, r3, r10
 80676a2: 4452         	add	r2, r10
 80676a4: 60a3         	str	r3, [r4, #0x8]
 80676a6: 6022         	str	r2, [r4]
 80676a8: 2b00         	cmp	r3, #0x0
 80676aa: d1eb         	bne	0x8067684 <__sfvwrite_r+0x1d0> @ imm = #-0x2a
 80676ac: 4621         	mov	r1, r4
 80676ae: 4640         	mov	r0, r8
 80676b0: f7fd fab8    	bl	0x8064c24 <_fflush_r>   @ imm = #-0x2a90
 80676b4: 2800         	cmp	r0, #0x0
 80676b6: d0e5         	beq	0x8067684 <__sfvwrite_r+0x1d0> @ imm = #-0x36
 80676b8: e777         	b	0x80675aa <__sfvwrite_r+0xf6> @ imm = #-0x112
 80676ba: 46b3         	mov	r11, r6
 80676bc: 6820         	ldr	r0, [r4]
 80676be: 4632         	mov	r2, r6
 80676c0: e74c         	b	0x806755c <__sfvwrite_r+0xa8> @ imm = #-0x168
 80676c2: 4629         	mov	r1, r5
 80676c4: 9201         	str	r2, [sp, #0x4]
 80676c6: f000 f8f9    	bl	0x80678bc <memmove>     @ imm = #0x1f2
 80676ca: 9a01         	ldr	r2, [sp, #0x4]
 80676cc: 68a3         	ldr	r3, [r4, #0x8]
 80676ce: 4693         	mov	r11, r2
 80676d0: 1a9b         	subs	r3, r3, r2
 80676d2: 60a3         	str	r3, [r4, #0x8]
 80676d4: 6823         	ldr	r3, [r4]
 80676d6: 4413         	add	r3, r2
 80676d8: 6023         	str	r3, [r4]
 80676da: e794         	b	0x8067606 <__sfvwrite_r+0x152> @ imm = #-0xd8
 80676dc: 6823         	ldr	r3, [r4]
 80676de: 6921         	ldr	r1, [r4, #0x10]
 80676e0: eba3 0b01    	sub.w	r11, r3, r1
 80676e4: 6963         	ldr	r3, [r4, #0x14]
 80676e6: eb13 0343    	adds.w	r3, r3, r3, lsl #1
 80676ea: bf48         	it	mi
 80676ec: 3301         	addmi	r3, #0x1
 80676ee: ea4f 0a63    	asr.w	r10, r3, #0x1
 80676f2: f10b 0301    	add.w	r3, r11, #0x1
 80676f6: 4433         	add	r3, r6
 80676f8: 4652         	mov	r2, r10
 80676fa: 4553         	cmp	r3, r10
 80676fc: d901         	bls	0x8067702 <__sfvwrite_r+0x24e> @ imm = #0x2
 80676fe: 469a         	mov	r10, r3
 8067700: 461a         	mov	r2, r3
 8067702: 0543         	lsls	r3, r0, #0x15
 8067704: d52c         	bpl	0x8067760 <__sfvwrite_r+0x2ac> @ imm = #0x58
 8067706: 4611         	mov	r1, r2
 8067708: 4640         	mov	r0, r8
 806770a: f7fd fe17    	bl	0x806533c <_malloc_r>   @ imm = #-0x23d2
 806770e: 2800         	cmp	r0, #0x0
 8067710: d03b         	beq	0x806778a <__sfvwrite_r+0x2d6> @ imm = #0x76
 8067712: 465a         	mov	r2, r11
 8067714: 6921         	ldr	r1, [r4, #0x10]
 8067716: 9001         	str	r0, [sp, #0x4]
 8067718: f7fa fdb6    	bl	0x8062288 <memcpy>      @ imm = #-0x5494
 806771c: 89a2         	ldrh	r2, [r4, #0xc]
 806771e: 9b01         	ldr	r3, [sp, #0x4]
 8067720: f422 6290    	bic	r2, r2, #0x480
 8067724: f042 0280    	orr	r2, r2, #0x80
 8067728: 81a2         	strh	r2, [r4, #0xc]
 806772a: eb03 000b    	add.w	r0, r3, r11
 806772e: 6123         	str	r3, [r4, #0x10]
 8067730: ebaa 030b    	sub.w	r3, r10, r11
 8067734: 4632         	mov	r2, r6
 8067736: 46b3         	mov	r11, r6
 8067738: f8c4 a014    	str.w	r10, [r4, #0x14]
 806773c: 60a3         	str	r3, [r4, #0x8]
 806773e: 6020         	str	r0, [r4]
 8067740: e70c         	b	0x806755c <__sfvwrite_r+0xa8> @ imm = #-0x1e8
 8067742: 4629         	mov	r1, r5
 8067744: 465a         	mov	r2, r11
 8067746: f000 f8b9    	bl	0x80678bc <memmove>     @ imm = #0x172
 806774a: 6823         	ldr	r3, [r4]
 806774c: 4621         	mov	r1, r4
 806774e: 4640         	mov	r0, r8
 8067750: 445b         	add	r3, r11
 8067752: 6023         	str	r3, [r4]
 8067754: f7fd fa66    	bl	0x8064c24 <_fflush_r>   @ imm = #-0x2b34
 8067758: 2800         	cmp	r0, #0x0
 806775a: f43f af54    	beq.w	0x8067606 <__sfvwrite_r+0x152> @ imm = #-0x158
 806775e: e724         	b	0x80675aa <__sfvwrite_r+0xf6> @ imm = #-0x1b8
 8067760: 4640         	mov	r0, r8
 8067762: f000 f93d    	bl	0x80679e0 <_realloc_r>  @ imm = #0x27a
 8067766: 4603         	mov	r3, r0
 8067768: 2800         	cmp	r0, #0x0
 806776a: d1de         	bne	0x806772a <__sfvwrite_r+0x276> @ imm = #-0x44
 806776c: 6921         	ldr	r1, [r4, #0x10]
 806776e: 4640         	mov	r0, r8
 8067770: f7fd fbf2    	bl	0x8064f58 <_free_r>     @ imm = #-0x281c
 8067774: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8067778: 220c         	movs	r2, #0xc
 806777a: f023 0380    	bic	r3, r3, #0x80
 806777e: f8c8 2000    	str.w	r2, [r8]
 8067782: e714         	b	0x80675ae <__sfvwrite_r+0xfa> @ imm = #-0x1d8
 8067784: 1c72         	adds	r2, r6, #0x1
 8067786: 4691         	mov	r9, r2
 8067788: e724         	b	0x80675d4 <__sfvwrite_r+0x120> @ imm = #-0x1b8
 806778a: 220c         	movs	r2, #0xc
 806778c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8067790: f8c8 2000    	str.w	r2, [r8]
 8067794: e70b         	b	0x80675ae <__sfvwrite_r+0xfa> @ imm = #-0x1ea
 8067796: f04f 30ff    	mov.w	r0, #0xffffffff
 806779a: e6bb         	b	0x8067514 <__sfvwrite_r+0x60> @ imm = #-0x28a

0806779c <$d>:
 806779c: 00 fc ff 7f  	.word	0x7ffffc00

080677a0 <_isatty_r>:
 80677a0: b538         	push	{r3, r4, r5, lr}
 80677a2: 2200         	movs	r2, #0x0
 80677a4: 4d06         	ldr	r5, [pc, #0x18]         @ 0x80677c0 <_isatty_r+0x20>
 80677a6: 4604         	mov	r4, r0
 80677a8: 4608         	mov	r0, r1
 80677aa: 602a         	str	r2, [r5]
 80677ac: f000 fe24    	bl	0x80683f8 <_isatty>     @ imm = #0xc48
 80677b0: 1c43         	adds	r3, r0, #0x1
 80677b2: d000         	beq	0x80677b6 <_isatty_r+0x16> @ imm = #0x0
 80677b4: bd38         	pop	{r3, r4, r5, pc}
 80677b6: 682b         	ldr	r3, [r5]
 80677b8: 2b00         	cmp	r3, #0x0
 80677ba: d0fb         	beq	0x80677b4 <_isatty_r+0x14> @ imm = #-0xa
 80677bc: 6023         	str	r3, [r4]
 80677be: bd38         	pop	{r3, r4, r5, pc}

080677c0 <$d>:
 80677c0: 9c 3f 00 20  	.word	0x20003f9c

080677c4 <_setlocale_r>:
 80677c4: b142         	cbz	r2, 0x80677d8 <_setlocale_r+0x14> @ imm = #0x10
 80677c6: 490c         	ldr	r1, [pc, #0x30]         @ 0x80677f8 <_setlocale_r+0x34>
 80677c8: 4610         	mov	r0, r2
 80677ca: b510         	push	{r4, lr}
 80677cc: 4614         	mov	r4, r2
 80677ce: f000 fafb    	bl	0x8067dc8 <strcmp>      @ imm = #0x5f6
 80677d2: b918         	cbnz	r0, 0x80677dc <_setlocale_r+0x18> @ imm = #0x6
 80677d4: 4809         	ldr	r0, [pc, #0x24]         @ 0x80677fc <_setlocale_r+0x38>
 80677d6: bd10         	pop	{r4, pc}
 80677d8: 4808         	ldr	r0, [pc, #0x20]         @ 0x80677fc <_setlocale_r+0x38>
 80677da: 4770         	bx	lr
 80677dc: 4907         	ldr	r1, [pc, #0x1c]         @ 0x80677fc <_setlocale_r+0x38>
 80677de: 4620         	mov	r0, r4
 80677e0: f000 faf2    	bl	0x8067dc8 <strcmp>      @ imm = #0x5e4
 80677e4: 2800         	cmp	r0, #0x0
 80677e6: d0f5         	beq	0x80677d4 <_setlocale_r+0x10> @ imm = #-0x16
 80677e8: 4905         	ldr	r1, [pc, #0x14]         @ 0x8067800 <_setlocale_r+0x3c>
 80677ea: 4620         	mov	r0, r4
 80677ec: f000 faec    	bl	0x8067dc8 <strcmp>      @ imm = #0x5d8
 80677f0: 2800         	cmp	r0, #0x0
 80677f2: d0ef         	beq	0x80677d4 <_setlocale_r+0x10> @ imm = #-0x22
 80677f4: 2000         	movs	r0, #0x0
 80677f6: bd10         	pop	{r4, pc}

080677f8 <$d>:
 80677f8: 4c a3 06 08  	.word	0x0806a34c
 80677fc: 48 a3 06 08  	.word	0x0806a348
 8067800: 14 a3 06 08  	.word	0x0806a314

08067804 <__locale_mb_cur_max>:
 8067804: 4b01         	ldr	r3, [pc, #0x4]          @ 0x806780c <__locale_mb_cur_max+0x8>
 8067806: f893 0128    	ldrb.w	r0, [r3, #0x128]
 806780a: 4770         	bx	lr

0806780c <$d>:
 806780c: d0 2b 00 20  	.word	0x20002bd0

08067810 <setlocale>:
 8067810: b141         	cbz	r1, 0x8067824 <setlocale+0x14> @ imm = #0x10
 8067812: b510         	push	{r4, lr}
 8067814: 460c         	mov	r4, r1
 8067816: 490b         	ldr	r1, [pc, #0x2c]         @ 0x8067844 <setlocale+0x34>
 8067818: 4620         	mov	r0, r4
 806781a: f000 fad5    	bl	0x8067dc8 <strcmp>      @ imm = #0x5aa
 806781e: b918         	cbnz	r0, 0x8067828 <setlocale+0x18> @ imm = #0x6
 8067820: 4809         	ldr	r0, [pc, #0x24]         @ 0x8067848 <setlocale+0x38>
 8067822: bd10         	pop	{r4, pc}
 8067824: 4808         	ldr	r0, [pc, #0x20]         @ 0x8067848 <setlocale+0x38>
 8067826: 4770         	bx	lr
 8067828: 4907         	ldr	r1, [pc, #0x1c]         @ 0x8067848 <setlocale+0x38>
 806782a: 4620         	mov	r0, r4
 806782c: f000 facc    	bl	0x8067dc8 <strcmp>      @ imm = #0x598
 8067830: 2800         	cmp	r0, #0x0
 8067832: d0f5         	beq	0x8067820 <setlocale+0x10> @ imm = #-0x16
 8067834: 4905         	ldr	r1, [pc, #0x14]         @ 0x806784c <setlocale+0x3c>
 8067836: 4620         	mov	r0, r4
 8067838: f000 fac6    	bl	0x8067dc8 <strcmp>      @ imm = #0x58c
 806783c: 2800         	cmp	r0, #0x0
 806783e: d0ef         	beq	0x8067820 <setlocale+0x10> @ imm = #-0x22
 8067840: 2000         	movs	r0, #0x0
 8067842: bd10         	pop	{r4, pc}

08067844 <$d>:
 8067844: 4c a3 06 08  	.word	0x0806a34c
 8067848: 48 a3 06 08  	.word	0x0806a348
 806784c: 14 a3 06 08  	.word	0x0806a314

08067850 <_lseek_r>:
 8067850: b538         	push	{r3, r4, r5, lr}
 8067852: 460c         	mov	r4, r1
 8067854: 4684         	mov	r12, r0
 8067856: 4611         	mov	r1, r2
 8067858: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x8067878 <_lseek_r+0x28>
 806785a: 461a         	mov	r2, r3
 806785c: 2300         	movs	r3, #0x0
 806785e: 4620         	mov	r0, r4
 8067860: 4664         	mov	r4, r12
 8067862: 602b         	str	r3, [r5]
 8067864: f000 fdd8    	bl	0x8068418 <_lseek>      @ imm = #0xbb0
 8067868: 1c43         	adds	r3, r0, #0x1
 806786a: d000         	beq	0x806786e <_lseek_r+0x1e> @ imm = #0x0
 806786c: bd38         	pop	{r3, r4, r5, pc}
 806786e: 682b         	ldr	r3, [r5]
 8067870: 2b00         	cmp	r3, #0x0
 8067872: d0fb         	beq	0x806786c <_lseek_r+0x1c> @ imm = #-0xa
 8067874: 6023         	str	r3, [r4]
 8067876: bd38         	pop	{r3, r4, r5, pc}

08067878 <$d>:
 8067878: 9c 3f 00 20  	.word	0x20003f9c

0806787c <_mbtowc_r>:
 806787c: b410         	push	{r4}
 806787e: 4c03         	ldr	r4, [pc, #0xc]          @ 0x806788c <_mbtowc_r+0x10>
 8067880: f8d4 40e4    	ldr.w	r4, [r4, #0xe4]
 8067884: 46a4         	mov	r12, r4
 8067886: bc10         	pop	{r4}
 8067888: 4760         	bx	r12
 806788a: bf00         	nop

0806788c <$d>:
 806788c: d0 2b 00 20  	.word	0x20002bd0

08067890 <__ascii_mbtowc>:
 8067890: b082         	sub	sp, #0x8
 8067892: b149         	cbz	r1, 0x80678a8 <__ascii_mbtowc+0x18> @ imm = #0x12
 8067894: b15a         	cbz	r2, 0x80678ae <__ascii_mbtowc+0x1e> @ imm = #0x16
 8067896: b16b         	cbz	r3, 0x80678b4 <__ascii_mbtowc+0x24> @ imm = #0x1a
 8067898: 7813         	ldrb	r3, [r2]
 806789a: 600b         	str	r3, [r1]
 806789c: 7812         	ldrb	r2, [r2]
 806789e: 1e10         	subs	r0, r2, #0x0
 80678a0: bf18         	it	ne
 80678a2: 2001         	movne	r0, #0x1
 80678a4: b002         	add	sp, #0x8
 80678a6: 4770         	bx	lr
 80678a8: a901         	add	r1, sp, #0x4
 80678aa: 2a00         	cmp	r2, #0x0
 80678ac: d1f3         	bne	0x8067896 <__ascii_mbtowc+0x6> @ imm = #-0x1a
 80678ae: 4610         	mov	r0, r2
 80678b0: b002         	add	sp, #0x8
 80678b2: 4770         	bx	lr
 80678b4: f06f 0001    	mvn	r0, #0x1
 80678b8: e7f4         	b	0x80678a4 <__ascii_mbtowc+0x14> @ imm = #-0x18
 80678ba: bf00         	nop

080678bc <memmove>:
 80678bc: 4288         	cmp	r0, r1
 80678be: d90d         	bls	0x80678dc <memmove+0x20> @ imm = #0x1a
 80678c0: 188b         	adds	r3, r1, r2
 80678c2: 4283         	cmp	r3, r0
 80678c4: d90a         	bls	0x80678dc <memmove+0x20> @ imm = #0x14
 80678c6: eb00 0c02    	add.w	r12, r0, r2
 80678ca: b1ba         	cbz	r2, 0x80678fc <memmove+0x40> @ imm = #0x2e
 80678cc: 4662         	mov	r2, r12
 80678ce: f813 cd01    	ldrb	r12, [r3, #-1]!
 80678d2: 4299         	cmp	r1, r3
 80678d4: f802 cd01    	strb	r12, [r2, #-1]!
 80678d8: d1f9         	bne	0x80678ce <memmove+0x12> @ imm = #-0xe
 80678da: 4770         	bx	lr
 80678dc: 2a0f         	cmp	r2, #0xf
 80678de: d80e         	bhi	0x80678fe <memmove+0x42> @ imm = #0x1c
 80678e0: 4603         	mov	r3, r0
 80678e2: f102 3cff    	add.w	r12, r2, #0xffffffff
 80678e6: b14a         	cbz	r2, 0x80678fc <memmove+0x40> @ imm = #0x12
 80678e8: f10c 0c01    	add.w	r12, r12, #0x1
 80678ec: 3b01         	subs	r3, #0x1
 80678ee: 448c         	add	r12, r1
 80678f0: f811 2b01    	ldrb	r2, [r1], #1
 80678f4: 4561         	cmp	r1, r12
 80678f6: f803 2f01    	strb	r2, [r3, #1]!
 80678fa: d1f9         	bne	0x80678f0 <memmove+0x34> @ imm = #-0xe
 80678fc: 4770         	bx	lr
 80678fe: ea40 0301    	orr.w	r3, r0, r1
 8067902: 079b         	lsls	r3, r3, #0x1e
 8067904: d150         	bne	0x80679a8 <memmove+0xec> @ imm = #0xa0
 8067906: f1a2 0310    	sub.w	r3, r2, #0x10
 806790a: f101 0c20    	add.w	r12, r1, #0x20
 806790e: b570         	push	{r4, r5, r6, lr}
 8067910: f023 050f    	bic	r5, r3, #0xf
 8067914: f101 0e10    	add.w	lr, r1, #0x10
 8067918: f100 0410    	add.w	r4, r0, #0x10
 806791c: 091b         	lsrs	r3, r3, #0x4
 806791e: 44ac         	add	r12, r5
 8067920: f85e 5c10    	ldr	r5, [lr, #-16]
 8067924: f10e 0e10    	add.w	lr, lr, #0x10
 8067928: 3410         	adds	r4, #0x10
 806792a: f844 5c20    	str	r5, [r4, #-32]
 806792e: f85e 5c1c    	ldr	r5, [lr, #-28]
 8067932: f844 5c1c    	str	r5, [r4, #-28]
 8067936: f85e 5c18    	ldr	r5, [lr, #-24]
 806793a: f844 5c18    	str	r5, [r4, #-24]
 806793e: f85e 5c14    	ldr	r5, [lr, #-20]
 8067942: 45e6         	cmp	lr, r12
 8067944: f844 5c14    	str	r5, [r4, #-20]
 8067948: d1ea         	bne	0x8067920 <memmove+0x64> @ imm = #-0x2c
 806794a: 3301         	adds	r3, #0x1
 806794c: f012 0f0c    	tst.w	r2, #0xc
 8067950: f002 0c0f    	and	r12, r2, #0xf
 8067954: eb01 1103    	add.w	r1, r1, r3, lsl #4
 8067958: eb00 1303    	add.w	r3, r0, r3, lsl #4
 806795c: d028         	beq	0x80679b0 <memmove+0xf4> @ imm = #0x50
 806795e: f1ac 0c04    	sub.w	r12, r12, #0x4
 8067962: 1f1c         	subs	r4, r3, #0x4
 8067964: 468e         	mov	lr, r1
 8067966: f02c 0603    	bic	r6, r12, #0x3
 806796a: ea4f 0c9c    	lsr.w	r12, r12, #0x2
 806796e: 441e         	add	r6, r3
 8067970: f85e 5b04    	ldr	r5, [lr], #4
 8067974: f844 5f04    	str	r5, [r4, #4]!
 8067978: 42b4         	cmp	r4, r6
 806797a: d1f9         	bne	0x8067970 <memmove+0xb4> @ imm = #-0xe
 806797c: f10c 0c01    	add.w	r12, r12, #0x1
 8067980: f002 0203    	and	r2, r2, #0x3
 8067984: eb03 038c    	add.w	r3, r3, r12, lsl #2
 8067988: eb01 018c    	add.w	r1, r1, r12, lsl #2
 806798c: f102 3cff    	add.w	r12, r2, #0xffffffff
 8067990: b14a         	cbz	r2, 0x80679a6 <memmove+0xea> @ imm = #0x12
 8067992: f10c 0c01    	add.w	r12, r12, #0x1
 8067996: 3b01         	subs	r3, #0x1
 8067998: 448c         	add	r12, r1
 806799a: f811 2b01    	ldrb	r2, [r1], #1
 806799e: 4561         	cmp	r1, r12
 80679a0: f803 2f01    	strb	r2, [r3, #1]!
 80679a4: d1f9         	bne	0x806799a <memmove+0xde> @ imm = #-0xe
 80679a6: bd70         	pop	{r4, r5, r6, pc}
 80679a8: f102 3cff    	add.w	r12, r2, #0xffffffff
 80679ac: 4603         	mov	r3, r0
 80679ae: e79b         	b	0x80678e8 <memmove+0x2c> @ imm = #-0xca
 80679b0: 4662         	mov	r2, r12
 80679b2: e7eb         	b	0x806798c <memmove+0xd0> @ imm = #-0x2a

080679b4 <_read_r>:
 80679b4: b538         	push	{r3, r4, r5, lr}
 80679b6: 460c         	mov	r4, r1
 80679b8: 4684         	mov	r12, r0
 80679ba: 4611         	mov	r1, r2
 80679bc: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x80679dc <_read_r+0x28>
 80679be: 461a         	mov	r2, r3
 80679c0: 2300         	movs	r3, #0x0
 80679c2: 4620         	mov	r0, r4
 80679c4: 4664         	mov	r4, r12
 80679c6: 602b         	str	r3, [r5]
 80679c8: f000 fd2e    	bl	0x8068428 <_read>       @ imm = #0xa5c
 80679cc: 1c43         	adds	r3, r0, #0x1
 80679ce: d000         	beq	0x80679d2 <_read_r+0x1e> @ imm = #0x0
 80679d0: bd38         	pop	{r3, r4, r5, pc}
 80679d2: 682b         	ldr	r3, [r5]
 80679d4: 2b00         	cmp	r3, #0x0
 80679d6: d0fb         	beq	0x80679d0 <_read_r+0x1c> @ imm = #-0xa
 80679d8: 6023         	str	r3, [r4]
 80679da: bd38         	pop	{r3, r4, r5, pc}

080679dc <$d>:
 80679dc: 9c 3f 00 20  	.word	0x20003f9c

080679e0 <_realloc_r>:
 80679e0: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80679e4: 4617         	mov	r7, r2
 80679e6: 2900         	cmp	r1, #0x0
 80679e8: f000 8096    	beq.w	0x8067b18 <_realloc_r+0x138> @ imm = #0x12c
 80679ec: 460c         	mov	r4, r1
 80679ee: f107 060b    	add.w	r6, r7, #0xb
 80679f2: 4680         	mov	r8, r0
 80679f4: f7fd ff96    	bl	0x8065924 <__malloc_lock> @ imm = #-0x20d4
 80679f8: f854 1c04    	ldr	r1, [r4, #-4]
 80679fc: 2e16         	cmp	r6, #0x16
 80679fe: f1a4 0908    	sub.w	r9, r4, #0x8
 8067a02: f021 0503    	bic	r5, r1, #0x3
 8067a06: d85c         	bhi	0x8067ac2 <_realloc_r+0xe2> @ imm = #0xb8
 8067a08: 2210         	movs	r2, #0x10
 8067a0a: 2300         	movs	r3, #0x0
 8067a0c: 4616         	mov	r6, r2
 8067a0e: 42be         	cmp	r6, r7
 8067a10: f0c0 809d    	blo.w	0x8067b4e <_realloc_r+0x16e> @ imm = #0x13a
 8067a14: 2b00         	cmp	r3, #0x0
 8067a16: f040 809a    	bne.w	0x8067b4e <_realloc_r+0x16e> @ imm = #0x134
 8067a1a: 4295         	cmp	r5, r2
 8067a1c: da5b         	bge	0x8067ad6 <_realloc_r+0xf6> @ imm = #0xb6
 8067a1e: 4bbd         	ldr	r3, [pc, #0x2f4]        @ 0x8067d14 <_realloc_r+0x334>
 8067a20: eb09 0005    	add.w	r0, r9, r5
 8067a24: f8d3 c008    	ldr.w	r12, [r3, #0x8]
 8067a28: 4584         	cmp	r12, r0
 8067a2a: f000 8097    	beq.w	0x8067b5c <_realloc_r+0x17c> @ imm = #0x12e
 8067a2e: f8d0 c004    	ldr.w	r12, [r0, #0x4]
 8067a32: f02c 0301    	bic	r3, r12, #0x1
 8067a36: 4403         	add	r3, r0
 8067a38: 685b         	ldr	r3, [r3, #0x4]
 8067a3a: 07db         	lsls	r3, r3, #0x1f
 8067a3c: d461         	bmi	0x8067b02 <_realloc_r+0x122> @ imm = #0xc2
 8067a3e: f02c 0c03    	bic	r12, r12, #0x3
 8067a42: eb05 030c    	add.w	r3, r5, r12
 8067a46: 4293         	cmp	r3, r2
 8067a48: da40         	bge	0x8067acc <_realloc_r+0xec> @ imm = #0x80
 8067a4a: 07cb         	lsls	r3, r1, #0x1f
 8067a4c: d410         	bmi	0x8067a70 <_realloc_r+0x90> @ imm = #0x20
 8067a4e: f854 3c08    	ldr	r3, [r4, #-8]
 8067a52: eba9 0a03    	sub.w	r10, r9, r3
 8067a56: f8da 3004    	ldr.w	r3, [r10, #0x4]
 8067a5a: f023 0103    	bic	r1, r3, #0x3
 8067a5e: 448c         	add	r12, r1
 8067a60: 44ac         	add	r12, r5
 8067a62: 4594         	cmp	r12, r2
 8067a64: f280 80fe    	bge.w	0x8067c64 <_realloc_r+0x284> @ imm = #0x1fc
 8067a68: 186b         	adds	r3, r5, r1
 8067a6a: 4293         	cmp	r3, r2
 8067a6c: f280 80d5    	bge.w	0x8067c1a <_realloc_r+0x23a> @ imm = #0x1aa
 8067a70: 4639         	mov	r1, r7
 8067a72: 4640         	mov	r0, r8
 8067a74: f7fd fc62    	bl	0x806533c <_malloc_r>   @ imm = #-0x273c
 8067a78: 4607         	mov	r7, r0
 8067a7a: b1e0         	cbz	r0, 0x8067ab6 <_realloc_r+0xd6> @ imm = #0x38
 8067a7c: f854 3c04    	ldr	r3, [r4, #-4]
 8067a80: f1a0 0208    	sub.w	r2, r0, #0x8
 8067a84: f023 0301    	bic	r3, r3, #0x1
 8067a88: 444b         	add	r3, r9
 8067a8a: 4293         	cmp	r3, r2
 8067a8c: f000 80b4    	beq.w	0x8067bf8 <_realloc_r+0x218> @ imm = #0x168
 8067a90: 1f2a         	subs	r2, r5, #0x4
 8067a92: 2a24         	cmp	r2, #0x24
 8067a94: f200 80e2    	bhi.w	0x8067c5c <_realloc_r+0x27c> @ imm = #0x1c4
 8067a98: 2a13         	cmp	r2, #0x13
 8067a9a: f200 80b3    	bhi.w	0x8067c04 <_realloc_r+0x224> @ imm = #0x166
 8067a9e: 4603         	mov	r3, r0
 8067aa0: 4622         	mov	r2, r4
 8067aa2: 6811         	ldr	r1, [r2]
 8067aa4: 6019         	str	r1, [r3]
 8067aa6: 6851         	ldr	r1, [r2, #0x4]
 8067aa8: 6059         	str	r1, [r3, #0x4]
 8067aaa: 6892         	ldr	r2, [r2, #0x8]
 8067aac: 609a         	str	r2, [r3, #0x8]
 8067aae: 4621         	mov	r1, r4
 8067ab0: 4640         	mov	r0, r8
 8067ab2: f7fd fa51    	bl	0x8064f58 <_free_r>     @ imm = #-0x2b5e
 8067ab6: 4640         	mov	r0, r8
 8067ab8: f7fd ff36    	bl	0x8065928 <__malloc_unlock> @ imm = #-0x2194
 8067abc: 4638         	mov	r0, r7
 8067abe: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8067ac2: f026 0607    	bic	r6, r6, #0x7
 8067ac6: 4632         	mov	r2, r6
 8067ac8: 0ff3         	lsrs	r3, r6, #0x1f
 8067aca: e7a0         	b	0x8067a0e <_realloc_r+0x2e> @ imm = #-0xc0
 8067acc: 461d         	mov	r5, r3
 8067ace: e9d0 2302    	ldrd	r2, r3, [r0, #8]
 8067ad2: 60d3         	str	r3, [r2, #0xc]
 8067ad4: 609a         	str	r2, [r3, #0x8]
 8067ad6: 1bab         	subs	r3, r5, r6
 8067ad8: 2b0f         	cmp	r3, #0xf
 8067ada: d822         	bhi	0x8067b22 <_realloc_r+0x142> @ imm = #0x44
 8067adc: f8d9 3004    	ldr.w	r3, [r9, #0x4]
 8067ae0: f003 0301    	and	r3, r3, #0x1
 8067ae4: 432b         	orrs	r3, r5
 8067ae6: 444d         	add	r5, r9
 8067ae8: f8c9 3004    	str.w	r3, [r9, #0x4]
 8067aec: 686b         	ldr	r3, [r5, #0x4]
 8067aee: f043 0301    	orr	r3, r3, #0x1
 8067af2: 606b         	str	r3, [r5, #0x4]
 8067af4: 4640         	mov	r0, r8
 8067af6: 4627         	mov	r7, r4
 8067af8: f7fd ff16    	bl	0x8065928 <__malloc_unlock> @ imm = #-0x21d4
 8067afc: 4638         	mov	r0, r7
 8067afe: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8067b02: 07c9         	lsls	r1, r1, #0x1f
 8067b04: d4b4         	bmi	0x8067a70 <_realloc_r+0x90> @ imm = #-0x98
 8067b06: f854 3c08    	ldr	r3, [r4, #-8]
 8067b0a: eba9 0a03    	sub.w	r10, r9, r3
 8067b0e: f8da 1004    	ldr.w	r1, [r10, #0x4]
 8067b12: f021 0103    	bic	r1, r1, #0x3
 8067b16: e7a7         	b	0x8067a68 <_realloc_r+0x88> @ imm = #-0xb2
 8067b18: 4611         	mov	r1, r2
 8067b1a: e8bd 4ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8067b1e: f7fd bc0d    	b.w	0x806533c <_malloc_r>   @ imm = #-0x27e6
 8067b22: f8d9 1004    	ldr.w	r1, [r9, #0x4]
 8067b26: 444d         	add	r5, r9
 8067b28: f043 0301    	orr	r3, r3, #0x1
 8067b2c: 4640         	mov	r0, r8
 8067b2e: f001 0101    	and	r1, r1, #0x1
 8067b32: 4331         	orrs	r1, r6
 8067b34: f8c9 1004    	str.w	r1, [r9, #0x4]
 8067b38: eb09 0106    	add.w	r1, r9, r6
 8067b3c: 604b         	str	r3, [r1, #0x4]
 8067b3e: 3108         	adds	r1, #0x8
 8067b40: 686b         	ldr	r3, [r5, #0x4]
 8067b42: f043 0301    	orr	r3, r3, #0x1
 8067b46: 606b         	str	r3, [r5, #0x4]
 8067b48: f7fd fa06    	bl	0x8064f58 <_free_r>     @ imm = #-0x2bf4
 8067b4c: e7d2         	b	0x8067af4 <_realloc_r+0x114> @ imm = #-0x5c
 8067b4e: 230c         	movs	r3, #0xc
 8067b50: 2700         	movs	r7, #0x0
 8067b52: f8c8 3000    	str.w	r3, [r8]
 8067b56: 4638         	mov	r0, r7
 8067b58: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8067b5c: f8dc 0004    	ldr.w	r0, [r12, #0x4]
 8067b60: f020 0b03    	bic	r11, r0, #0x3
 8067b64: f106 0010    	add.w	r0, r6, #0x10
 8067b68: eb05 0c0b    	add.w	r12, r5, r11
 8067b6c: 4584         	cmp	r12, r0
 8067b6e: f280 80b3    	bge.w	0x8067cd8 <_realloc_r+0x2f8> @ imm = #0x166
 8067b72: 07c9         	lsls	r1, r1, #0x1f
 8067b74: f53f af7c    	bmi.w	0x8067a70 <_realloc_r+0x90> @ imm = #-0x108
 8067b78: f854 1c08    	ldr	r1, [r4, #-8]
 8067b7c: eba9 0a01    	sub.w	r10, r9, r1
 8067b80: f8da 1004    	ldr.w	r1, [r10, #0x4]
 8067b84: f021 0103    	bic	r1, r1, #0x3
 8067b88: 448b         	add	r11, r1
 8067b8a: 44ab         	add	r11, r5
 8067b8c: 4558         	cmp	r0, r11
 8067b8e: f73f af6b    	bgt.w	0x8067a68 <_realloc_r+0x88> @ imm = #-0x12a
 8067b92: 1f2a         	subs	r2, r5, #0x4
 8067b94: 4657         	mov	r7, r10
 8067b96: f8da 100c    	ldr.w	r1, [r10, #0xc]
 8067b9a: f857 0f08    	ldr	r0, [r7, #8]!
 8067b9e: 2a24         	cmp	r2, #0x24
 8067ba0: 60c1         	str	r1, [r0, #0xc]
 8067ba2: 6088         	str	r0, [r1, #0x8]
 8067ba4: f200 80db    	bhi.w	0x8067d5e <_realloc_r+0x37e> @ imm = #0x1b6
 8067ba8: 2a13         	cmp	r2, #0x13
 8067baa: f240 80d6    	bls.w	0x8067d5a <_realloc_r+0x37a> @ imm = #0x1ac
 8067bae: 6821         	ldr	r1, [r4]
 8067bb0: 2a1b         	cmp	r2, #0x1b
 8067bb2: f8ca 1008    	str.w	r1, [r10, #0x8]
 8067bb6: 6861         	ldr	r1, [r4, #0x4]
 8067bb8: f8ca 100c    	str.w	r1, [r10, #0xc]
 8067bbc: f200 80e0    	bhi.w	0x8067d80 <_realloc_r+0x3a0> @ imm = #0x1c0
 8067bc0: 3408         	adds	r4, #0x8
 8067bc2: f10a 0210    	add.w	r2, r10, #0x10
 8067bc6: 6821         	ldr	r1, [r4]
 8067bc8: 6011         	str	r1, [r2]
 8067bca: 6861         	ldr	r1, [r4, #0x4]
 8067bcc: 6051         	str	r1, [r2, #0x4]
 8067bce: 68a1         	ldr	r1, [r4, #0x8]
 8067bd0: 6091         	str	r1, [r2, #0x8]
 8067bd2: ebab 0206    	sub.w	r2, r11, r6
 8067bd6: eb0a 0106    	add.w	r1, r10, r6
 8067bda: 4640         	mov	r0, r8
 8067bdc: f042 0201    	orr	r2, r2, #0x1
 8067be0: 6099         	str	r1, [r3, #0x8]
 8067be2: 604a         	str	r2, [r1, #0x4]
 8067be4: f8da 3004    	ldr.w	r3, [r10, #0x4]
 8067be8: f003 0301    	and	r3, r3, #0x1
 8067bec: 431e         	orrs	r6, r3
 8067bee: f8ca 6004    	str.w	r6, [r10, #0x4]
 8067bf2: f7fd fe99    	bl	0x8065928 <__malloc_unlock> @ imm = #-0x22ce
 8067bf6: e781         	b	0x8067afc <_realloc_r+0x11c> @ imm = #-0xfe
 8067bf8: f850 3c04    	ldr	r3, [r0, #-4]
 8067bfc: f023 0303    	bic	r3, r3, #0x3
 8067c00: 441d         	add	r5, r3
 8067c02: e768         	b	0x8067ad6 <_realloc_r+0xf6> @ imm = #-0x130
 8067c04: 6823         	ldr	r3, [r4]
 8067c06: 2a1b         	cmp	r2, #0x1b
 8067c08: 6003         	str	r3, [r0]
 8067c0a: 6863         	ldr	r3, [r4, #0x4]
 8067c0c: 6043         	str	r3, [r0, #0x4]
 8067c0e: d84e         	bhi	0x8067cae <_realloc_r+0x2ce> @ imm = #0x9c
 8067c10: f104 0208    	add.w	r2, r4, #0x8
 8067c14: f100 0308    	add.w	r3, r0, #0x8
 8067c18: e743         	b	0x8067aa2 <_realloc_r+0xc2> @ imm = #-0x17a
 8067c1a: 1f2a         	subs	r2, r5, #0x4
 8067c1c: 4657         	mov	r7, r10
 8067c1e: f8da 100c    	ldr.w	r1, [r10, #0xc]
 8067c22: f857 0f08    	ldr	r0, [r7, #8]!
 8067c26: 2a24         	cmp	r2, #0x24
 8067c28: 60c1         	str	r1, [r0, #0xc]
 8067c2a: 6088         	str	r0, [r1, #0x8]
 8067c2c: d84c         	bhi	0x8067cc8 <_realloc_r+0x2e8> @ imm = #0x98
 8067c2e: 2a13         	cmp	r2, #0x13
 8067c30: d948         	bls	0x8067cc4 <_realloc_r+0x2e4> @ imm = #0x90
 8067c32: 6821         	ldr	r1, [r4]
 8067c34: 2a1b         	cmp	r2, #0x1b
 8067c36: f8ca 1008    	str.w	r1, [r10, #0x8]
 8067c3a: 6861         	ldr	r1, [r4, #0x4]
 8067c3c: f8ca 100c    	str.w	r1, [r10, #0xc]
 8067c40: d86a         	bhi	0x8067d18 <_realloc_r+0x338> @ imm = #0xd4
 8067c42: 3408         	adds	r4, #0x8
 8067c44: f10a 0210    	add.w	r2, r10, #0x10
 8067c48: 461d         	mov	r5, r3
 8067c4a: 6823         	ldr	r3, [r4]
 8067c4c: 46d1         	mov	r9, r10
 8067c4e: 6013         	str	r3, [r2]
 8067c50: 6863         	ldr	r3, [r4, #0x4]
 8067c52: 6053         	str	r3, [r2, #0x4]
 8067c54: 68a3         	ldr	r3, [r4, #0x8]
 8067c56: 463c         	mov	r4, r7
 8067c58: 6093         	str	r3, [r2, #0x8]
 8067c5a: e73c         	b	0x8067ad6 <_realloc_r+0xf6> @ imm = #-0x188
 8067c5c: 4621         	mov	r1, r4
 8067c5e: f7ff fe2d    	bl	0x80678bc <memmove>     @ imm = #-0x3a6
 8067c62: e724         	b	0x8067aae <_realloc_r+0xce> @ imm = #-0x1b8
 8067c64: e9d0 1302    	ldrd	r1, r3, [r0, #8]
 8067c68: 1f2a         	subs	r2, r5, #0x4
 8067c6a: 4657         	mov	r7, r10
 8067c6c: 60cb         	str	r3, [r1, #0xc]
 8067c6e: 6099         	str	r1, [r3, #0x8]
 8067c70: 2a24         	cmp	r2, #0x24
 8067c72: f8da 300c    	ldr.w	r3, [r10, #0xc]
 8067c76: f857 1f08    	ldr	r1, [r7, #8]!
 8067c7a: 60cb         	str	r3, [r1, #0xc]
 8067c7c: 6099         	str	r1, [r3, #0x8]
 8067c7e: d841         	bhi	0x8067d04 <_realloc_r+0x324> @ imm = #0x82
 8067c80: 2a13         	cmp	r2, #0x13
 8067c82: d93d         	bls	0x8067d00 <_realloc_r+0x320> @ imm = #0x7a
 8067c84: 6823         	ldr	r3, [r4]
 8067c86: 2a1b         	cmp	r2, #0x1b
 8067c88: f8ca 3008    	str.w	r3, [r10, #0x8]
 8067c8c: 6863         	ldr	r3, [r4, #0x4]
 8067c8e: f8ca 300c    	str.w	r3, [r10, #0xc]
 8067c92: d856         	bhi	0x8067d42 <_realloc_r+0x362> @ imm = #0xac
 8067c94: 3408         	adds	r4, #0x8
 8067c96: f10a 0310    	add.w	r3, r10, #0x10
 8067c9a: 6822         	ldr	r2, [r4]
 8067c9c: 4665         	mov	r5, r12
 8067c9e: 46d1         	mov	r9, r10
 8067ca0: 601a         	str	r2, [r3]
 8067ca2: 6862         	ldr	r2, [r4, #0x4]
 8067ca4: 605a         	str	r2, [r3, #0x4]
 8067ca6: 68a2         	ldr	r2, [r4, #0x8]
 8067ca8: 463c         	mov	r4, r7
 8067caa: 609a         	str	r2, [r3, #0x8]
 8067cac: e713         	b	0x8067ad6 <_realloc_r+0xf6> @ imm = #-0x1da
 8067cae: 68a3         	ldr	r3, [r4, #0x8]
 8067cb0: 2a24         	cmp	r2, #0x24
 8067cb2: 6083         	str	r3, [r0, #0x8]
 8067cb4: 68e3         	ldr	r3, [r4, #0xc]
 8067cb6: 60c3         	str	r3, [r0, #0xc]
 8067cb8: d03a         	beq	0x8067d30 <_realloc_r+0x350> @ imm = #0x74
 8067cba: f104 0210    	add.w	r2, r4, #0x10
 8067cbe: f100 0310    	add.w	r3, r0, #0x10
 8067cc2: e6ee         	b	0x8067aa2 <_realloc_r+0xc2> @ imm = #-0x224
 8067cc4: 463a         	mov	r2, r7
 8067cc6: e7bf         	b	0x8067c48 <_realloc_r+0x268> @ imm = #-0x82
 8067cc8: 4621         	mov	r1, r4
 8067cca: 4638         	mov	r0, r7
 8067ccc: 461d         	mov	r5, r3
 8067cce: 46d1         	mov	r9, r10
 8067cd0: 463c         	mov	r4, r7
 8067cd2: f7ff fdf3    	bl	0x80678bc <memmove>     @ imm = #-0x41a
 8067cd6: e6fe         	b	0x8067ad6 <_realloc_r+0xf6> @ imm = #-0x204
 8067cd8: eb09 0206    	add.w	r2, r9, r6
 8067cdc: ebac 0c06    	sub.w	r12, r12, r6
 8067ce0: 4640         	mov	r0, r8
 8067ce2: 4627         	mov	r7, r4
 8067ce4: 609a         	str	r2, [r3, #0x8]
 8067ce6: f04c 0301    	orr	r3, r12, #0x1
 8067cea: 6053         	str	r3, [r2, #0x4]
 8067cec: f854 3c04    	ldr	r3, [r4, #-4]
 8067cf0: f003 0301    	and	r3, r3, #0x1
 8067cf4: 431e         	orrs	r6, r3
 8067cf6: f844 6c04    	str	r6, [r4, #-4]
 8067cfa: f7fd fe15    	bl	0x8065928 <__malloc_unlock> @ imm = #-0x23d6
 8067cfe: e6fd         	b	0x8067afc <_realloc_r+0x11c> @ imm = #-0x206
 8067d00: 463b         	mov	r3, r7
 8067d02: e7ca         	b	0x8067c9a <_realloc_r+0x2ba> @ imm = #-0x6c
 8067d04: 4621         	mov	r1, r4
 8067d06: 4638         	mov	r0, r7
 8067d08: 4665         	mov	r5, r12
 8067d0a: 46d1         	mov	r9, r10
 8067d0c: 463c         	mov	r4, r7
 8067d0e: f7ff fdd5    	bl	0x80678bc <memmove>     @ imm = #-0x456
 8067d12: e6e0         	b	0x8067ad6 <_realloc_r+0xf6> @ imm = #-0x240

08067d14 <$d>:
 8067d14: c0 27 00 20  	.word	0x200027c0

08067d18 <$t>:
 8067d18: 68a1         	ldr	r1, [r4, #0x8]
 8067d1a: 2a24         	cmp	r2, #0x24
 8067d1c: f8ca 1010    	str.w	r1, [r10, #0x10]
 8067d20: 68e1         	ldr	r1, [r4, #0xc]
 8067d22: f8ca 1014    	str.w	r1, [r10, #0x14]
 8067d26: d020         	beq	0x8067d6a <_realloc_r+0x38a> @ imm = #0x40
 8067d28: 3410         	adds	r4, #0x10
 8067d2a: f10a 0218    	add.w	r2, r10, #0x18
 8067d2e: e78b         	b	0x8067c48 <_realloc_r+0x268> @ imm = #-0xea
 8067d30: 6923         	ldr	r3, [r4, #0x10]
 8067d32: f104 0218    	add.w	r2, r4, #0x18
 8067d36: 6103         	str	r3, [r0, #0x10]
 8067d38: 6963         	ldr	r3, [r4, #0x14]
 8067d3a: 6143         	str	r3, [r0, #0x14]
 8067d3c: f100 0318    	add.w	r3, r0, #0x18
 8067d40: e6af         	b	0x8067aa2 <_realloc_r+0xc2> @ imm = #-0x2a2
 8067d42: 68a3         	ldr	r3, [r4, #0x8]
 8067d44: 2a24         	cmp	r2, #0x24
 8067d46: f8ca 3010    	str.w	r3, [r10, #0x10]
 8067d4a: 68e3         	ldr	r3, [r4, #0xc]
 8067d4c: f8ca 3014    	str.w	r3, [r10, #0x14]
 8067d50: d022         	beq	0x8067d98 <_realloc_r+0x3b8> @ imm = #0x44
 8067d52: 3410         	adds	r4, #0x10
 8067d54: f10a 0318    	add.w	r3, r10, #0x18
 8067d58: e79f         	b	0x8067c9a <_realloc_r+0x2ba> @ imm = #-0xc2
 8067d5a: 463a         	mov	r2, r7
 8067d5c: e733         	b	0x8067bc6 <_realloc_r+0x1e6> @ imm = #-0x19a
 8067d5e: 4621         	mov	r1, r4
 8067d60: 4638         	mov	r0, r7
 8067d62: f7ff fdab    	bl	0x80678bc <memmove>     @ imm = #-0x4aa
 8067d66: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x8067dc4 <_realloc_r+0x3e4>
 8067d68: e733         	b	0x8067bd2 <_realloc_r+0x1f2> @ imm = #-0x19a
 8067d6a: 6922         	ldr	r2, [r4, #0x10]
 8067d6c: 3418         	adds	r4, #0x18
 8067d6e: f8ca 2018    	str.w	r2, [r10, #0x18]
 8067d72: f854 2c04    	ldr	r2, [r4, #-4]
 8067d76: f8ca 201c    	str.w	r2, [r10, #0x1c]
 8067d7a: f10a 0220    	add.w	r2, r10, #0x20
 8067d7e: e763         	b	0x8067c48 <_realloc_r+0x268> @ imm = #-0x13a
 8067d80: 68a1         	ldr	r1, [r4, #0x8]
 8067d82: 2a24         	cmp	r2, #0x24
 8067d84: f8ca 1010    	str.w	r1, [r10, #0x10]
 8067d88: 68e1         	ldr	r1, [r4, #0xc]
 8067d8a: f8ca 1014    	str.w	r1, [r10, #0x14]
 8067d8e: d00e         	beq	0x8067dae <_realloc_r+0x3ce> @ imm = #0x1c
 8067d90: 3410         	adds	r4, #0x10
 8067d92: f10a 0218    	add.w	r2, r10, #0x18
 8067d96: e716         	b	0x8067bc6 <_realloc_r+0x1e6> @ imm = #-0x1d4
 8067d98: 6923         	ldr	r3, [r4, #0x10]
 8067d9a: 3418         	adds	r4, #0x18
 8067d9c: f8ca 3018    	str.w	r3, [r10, #0x18]
 8067da0: f854 3c04    	ldr	r3, [r4, #-4]
 8067da4: f8ca 301c    	str.w	r3, [r10, #0x1c]
 8067da8: f10a 0320    	add.w	r3, r10, #0x20
 8067dac: e775         	b	0x8067c9a <_realloc_r+0x2ba> @ imm = #-0x116
 8067dae: 6922         	ldr	r2, [r4, #0x10]
 8067db0: 3418         	adds	r4, #0x18
 8067db2: f8ca 2018    	str.w	r2, [r10, #0x18]
 8067db6: f854 2c04    	ldr	r2, [r4, #-4]
 8067dba: f8ca 201c    	str.w	r2, [r10, #0x1c]
 8067dbe: f10a 0220    	add.w	r2, r10, #0x20
 8067dc2: e700         	b	0x8067bc6 <_realloc_r+0x1e6> @ imm = #-0x200

08067dc4 <$d>:
 8067dc4: c0 27 00 20  	.word	0x200027c0

08067dc8 <strcmp>:
 8067dc8: ea80 0c01    	eor.w	r12, r0, r1
 8067dcc: f01c 0f03    	tst.w	r12, #0x3
 8067dd0: d137         	bne	0x8067e42 <strcmp+0x7a> @ imm = #0x6e
 8067dd2: f010 0c03    	ands	r12, r0, #0x3
 8067dd6: f020 0003    	bic	r0, r0, #0x3
 8067dda: f021 0103    	bic	r1, r1, #0x3
 8067dde: f850 2b04    	ldr	r2, [r0], #4
 8067de2: bf08         	it	eq
 8067de4: f851 3b04    	ldreq	r3, [r1], #4
 8067de8: d00e         	beq	0x8067e08 <strcmp+0x40> @ imm = #0x1c
 8067dea: f08c 0c03    	eor	r12, r12, #0x3
 8067dee: f06f 437f    	mvn	r3, #0xff000000
 8067df2: ea4f 0ccc    	lsl.w	r12, r12, #0x3
 8067df6: fa23 fc0c    	lsr.w	r12, r3, r12
 8067dfa: f851 3b04    	ldr	r3, [r1], #4
 8067dfe: ea42 020c    	orr.w	r2, r2, r12
 8067e02: ea43 030c    	orr.w	r3, r3, r12
 8067e06: bf00         	nop
 8067e08: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8067e0c: 429a         	cmp	r2, r3
 8067e0e: bf01         	itttt	eq
 8067e10: ea2c 0c02    	biceq.w	r12, r12, r2
 8067e14: f01c 3f80    	tsteq.w	r12, #0x80808080
 8067e18: f850 2b04    	ldreq	r2, [r0], #4
 8067e1c: f851 3b04    	ldreq	r3, [r1], #4
 8067e20: d0f2         	beq	0x8067e08 <strcmp+0x40> @ imm = #-0x1c
 8067e22: ea4f 6002    	lsl.w	r0, r2, #0x18
 8067e26: ea4f 2212    	lsr.w	r2, r2, #0x8
 8067e2a: 2801         	cmp	r0, #0x1
 8067e2c: bf28         	it	hs
 8067e2e: ebb0 6f03    	cmphs.w	r0, r3, lsl #24
 8067e32: bf08         	it	eq
 8067e34: 0a1b         	lsreq	r3, r3, #0x8
 8067e36: d0f4         	beq	0x8067e22 <strcmp+0x5a> @ imm = #-0x18
 8067e38: f003 03ff    	and	r3, r3, #0xff
 8067e3c: 0e00         	lsrs	r0, r0, #0x18
 8067e3e: 1ac0         	subs	r0, r0, r3
 8067e40: 4770         	bx	lr
 8067e42: f010 0f03    	tst.w	r0, #0x3
 8067e46: d00a         	beq	0x8067e5e <strcmp+0x96> @ imm = #0x14
 8067e48: f810 2b01    	ldrb	r2, [r0], #1
 8067e4c: f811 3b01    	ldrb	r3, [r1], #1
 8067e50: 2a01         	cmp	r2, #0x1
 8067e52: bf28         	it	hs
 8067e54: 429a         	cmphs	r2, r3
 8067e56: d0f4         	beq	0x8067e42 <strcmp+0x7a> @ imm = #-0x18
 8067e58: eba2 0003    	sub.w	r0, r2, r3
 8067e5c: 4770         	bx	lr
 8067e5e: f84d 5d04    	str	r5, [sp, #-4]!
 8067e62: f850 2b04    	ldr	r2, [r0], #4
 8067e66: f001 0503    	and	r5, r1, #0x3
 8067e6a: f021 0103    	bic	r1, r1, #0x3
 8067e6e: f851 3b04    	ldr	r3, [r1], #4
 8067e72: 2d02         	cmp	r5, #0x2
 8067e74: d026         	beq	0x8067ec4 <strcmp+0xfc> @ imm = #0x4c
 8067e76: d84d         	bhi	0x8067f14 <strcmp+0x14c> @ imm = #0x9a
 8067e78: f022 457f    	bic	r5, r2, #0xff000000
 8067e7c: ebb5 2f13    	cmp.w	r5, r3, lsr #8
 8067e80: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8067e84: ea2c 0c02    	bic.w	r12, r12, r2
 8067e88: d10d         	bne	0x8067ea6 <strcmp+0xde> @ imm = #0x1a
 8067e8a: f01c 3c80    	ands	r12, r12, #0x80808080
 8067e8e: bf08         	it	eq
 8067e90: f851 3b04    	ldreq	r3, [r1], #4
 8067e94: d10a         	bne	0x8067eac <strcmp+0xe4> @ imm = #0x14
 8067e96: ea85 0502    	eor.w	r5, r5, r2
 8067e9a: ebb5 6f03    	cmp.w	r5, r3, lsl #24
 8067e9e: d10c         	bne	0x8067eba <strcmp+0xf2> @ imm = #0x18
 8067ea0: f850 2b04    	ldr	r2, [r0], #4
 8067ea4: e7e8         	b	0x8067e78 <strcmp+0xb0> @ imm = #-0x30
 8067ea6: ea4f 2313    	lsr.w	r3, r3, #0x8
 8067eaa: e05b         	b	0x8067f64 <strcmp+0x19c> @ imm = #0xb6
 8067eac: f03c 4c7f    	bics	r12, r12, #0xff000000
 8067eb0: d154         	bne	0x8067f5c <strcmp+0x194> @ imm = #0xa8
 8067eb2: 780b         	ldrb	r3, [r1]
 8067eb4: ea4f 6512    	lsr.w	r5, r2, #0x18
 8067eb8: e054         	b	0x8067f64 <strcmp+0x19c> @ imm = #0xa8
 8067eba: ea4f 6512    	lsr.w	r5, r2, #0x18
 8067ebe: f003 03ff    	and	r3, r3, #0xff
 8067ec2: e04f         	b	0x8067f64 <strcmp+0x19c> @ imm = #0x9e
 8067ec4: ea4f 4502    	lsl.w	r5, r2, #0x10
 8067ec8: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8067ecc: ea4f 4515    	lsr.w	r5, r5, #0x10
 8067ed0: ea2c 0c02    	bic.w	r12, r12, r2
 8067ed4: ebb5 4f13    	cmp.w	r5, r3, lsr #16
 8067ed8: d118         	bne	0x8067f0c <strcmp+0x144> @ imm = #0x30
 8067eda: f01c 3c80    	ands	r12, r12, #0x80808080
 8067ede: bf08         	it	eq
 8067ee0: f851 3b04    	ldreq	r3, [r1], #4
 8067ee4: d107         	bne	0x8067ef6 <strcmp+0x12e> @ imm = #0xe
 8067ee6: ea85 0502    	eor.w	r5, r5, r2
 8067eea: ebb5 4f03    	cmp.w	r5, r3, lsl #16
 8067eee: d109         	bne	0x8067f04 <strcmp+0x13c> @ imm = #0x12
 8067ef0: f850 2b04    	ldr	r2, [r0], #4
 8067ef4: e7e6         	b	0x8067ec4 <strcmp+0xfc> @ imm = #-0x34
 8067ef6: ea5f 4c0c    	lsls.w	r12, r12, #0x10
 8067efa: d12f         	bne	0x8067f5c <strcmp+0x194> @ imm = #0x5e
 8067efc: 880b         	ldrh	r3, [r1]
 8067efe: ea4f 4512    	lsr.w	r5, r2, #0x10
 8067f02: e02f         	b	0x8067f64 <strcmp+0x19c> @ imm = #0x5e
 8067f04: ea4f 4303    	lsl.w	r3, r3, #0x10
 8067f08: ea4f 4512    	lsr.w	r5, r2, #0x10
 8067f0c: ea4f 4313    	lsr.w	r3, r3, #0x10
 8067f10: e028         	b	0x8067f64 <strcmp+0x19c> @ imm = #0x50
 8067f12: bf00         	nop
 8067f14: f002 05ff    	and	r5, r2, #0xff
 8067f18: ebb5 6f13    	cmp.w	r5, r3, lsr #24
 8067f1c: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8067f20: ea2c 0c02    	bic.w	r12, r12, r2
 8067f24: d10d         	bne	0x8067f42 <strcmp+0x17a> @ imm = #0x1a
 8067f26: f01c 3c80    	ands	r12, r12, #0x80808080
 8067f2a: bf08         	it	eq
 8067f2c: f851 3b04    	ldreq	r3, [r1], #4
 8067f30: d10a         	bne	0x8067f48 <strcmp+0x180> @ imm = #0x14
 8067f32: ea85 0502    	eor.w	r5, r5, r2
 8067f36: ebb5 2f03    	cmp.w	r5, r3, lsl #8
 8067f3a: d10a         	bne	0x8067f52 <strcmp+0x18a> @ imm = #0x14
 8067f3c: f850 2b04    	ldr	r2, [r0], #4
 8067f40: e7e8         	b	0x8067f14 <strcmp+0x14c> @ imm = #-0x30
 8067f42: ea4f 6313    	lsr.w	r3, r3, #0x18
 8067f46: e00d         	b	0x8067f64 <strcmp+0x19c> @ imm = #0x1a
 8067f48: f012 0fff    	tst.w	r2, #0xff
 8067f4c: d006         	beq	0x8067f5c <strcmp+0x194> @ imm = #0xc
 8067f4e: f851 3b04    	ldr	r3, [r1], #4
 8067f52: ea4f 2512    	lsr.w	r5, r2, #0x8
 8067f56: f023 437f    	bic	r3, r3, #0xff000000
 8067f5a: e003         	b	0x8067f64 <strcmp+0x19c> @ imm = #0x6
 8067f5c: f04f 0000    	mov.w	r0, #0x0
 8067f60: bc20         	pop	{r5}
 8067f62: 4770         	bx	lr
 8067f64: f005 02ff    	and	r2, r5, #0xff
 8067f68: f003 00ff    	and	r0, r3, #0xff
 8067f6c: 2801         	cmp	r0, #0x1
 8067f6e: bf28         	it	hs
 8067f70: 4290         	cmphs	r0, r2
 8067f72: bf04         	itt	eq
 8067f74: 0a2d         	lsreq	r5, r5, #0x8
 8067f76: 0a1b         	lsreq	r3, r3, #0x8
 8067f78: d0f4         	beq	0x8067f64 <strcmp+0x19c> @ imm = #-0x18
 8067f7a: eba2 0000    	sub.w	r0, r2, r0
 8067f7e: bc20         	pop	{r5}
 8067f80: 4770         	bx	lr
 8067f82: bf00         	nop

08067f84 <__swbuf_r>:
 8067f84: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 8067f86: 460d         	mov	r5, r1
 8067f88: 4606         	mov	r6, r0
 8067f8a: 4614         	mov	r4, r2
 8067f8c: b110         	cbz	r0, 0x8067f94 <__swbuf_r+0x10> @ imm = #0x4
 8067f8e: 6b83         	ldr	r3, [r0, #0x38]
 8067f90: 2b00         	cmp	r3, #0x0
 8067f92: d043         	beq	0x806801c <__swbuf_r+0x98> @ imm = #0x86
 8067f94: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
 8067f98: 69a3         	ldr	r3, [r4, #0x18]
 8067f9a: 0717         	lsls	r7, r2, #0x1c
 8067f9c: b290         	uxth	r0, r2
 8067f9e: 60a3         	str	r3, [r4, #0x8]
 8067fa0: d51b         	bpl	0x8067fda <__swbuf_r+0x56> @ imm = #0x36
 8067fa2: 6923         	ldr	r3, [r4, #0x10]
 8067fa4: b1cb         	cbz	r3, 0x8067fda <__swbuf_r+0x56> @ imm = #0x32
 8067fa6: b2ed         	uxtb	r5, r5
 8067fa8: 0481         	lsls	r1, r0, #0x12
 8067faa: 462f         	mov	r7, r5
 8067fac: d522         	bpl	0x8067ff4 <__swbuf_r+0x70> @ imm = #0x44
 8067fae: 6822         	ldr	r2, [r4]
 8067fb0: 6961         	ldr	r1, [r4, #0x14]
 8067fb2: 1ad3         	subs	r3, r2, r3
 8067fb4: 4299         	cmp	r1, r3
 8067fb6: dd29         	ble	0x806800c <__swbuf_r+0x88> @ imm = #0x52
 8067fb8: 3301         	adds	r3, #0x1
 8067fba: 68a1         	ldr	r1, [r4, #0x8]
 8067fbc: 3901         	subs	r1, #0x1
 8067fbe: 60a1         	str	r1, [r4, #0x8]
 8067fc0: 1c51         	adds	r1, r2, #0x1
 8067fc2: 6021         	str	r1, [r4]
 8067fc4: 7015         	strb	r5, [r2]
 8067fc6: 6962         	ldr	r2, [r4, #0x14]
 8067fc8: 429a         	cmp	r2, r3
 8067fca: d02a         	beq	0x8068022 <__swbuf_r+0x9e> @ imm = #0x54
 8067fcc: 2d0a         	cmp	r5, #0xa
 8067fce: d102         	bne	0x8067fd6 <__swbuf_r+0x52> @ imm = #0x4
 8067fd0: 89a3         	ldrh	r3, [r4, #0xc]
 8067fd2: 07db         	lsls	r3, r3, #0x1f
 8067fd4: d425         	bmi	0x8068022 <__swbuf_r+0x9e> @ imm = #0x4a
 8067fd6: 4638         	mov	r0, r7
 8067fd8: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8067fda: 4621         	mov	r1, r4
 8067fdc: 4630         	mov	r0, r6
 8067fde: f7fb fd05    	bl	0x80639ec <__swsetup_r> @ imm = #-0x45f6
 8067fe2: bb20         	cbnz	r0, 0x806802e <__swbuf_r+0xaa> @ imm = #0x48
 8067fe4: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
 8067fe8: b2ed         	uxtb	r5, r5
 8067fea: 6923         	ldr	r3, [r4, #0x10]
 8067fec: b290         	uxth	r0, r2
 8067fee: 462f         	mov	r7, r5
 8067ff0: 0481         	lsls	r1, r0, #0x12
 8067ff2: d4dc         	bmi	0x8067fae <__swbuf_r+0x2a> @ imm = #-0x48
 8067ff4: f442 5200    	orr	r2, r2, #0x2000
 8067ff8: 6961         	ldr	r1, [r4, #0x14]
 8067ffa: 81a2         	strh	r2, [r4, #0xc]
 8067ffc: 6e62         	ldr	r2, [r4, #0x64]
 8067ffe: f422 5200    	bic	r2, r2, #0x2000
 8068002: 6662         	str	r2, [r4, #0x64]
 8068004: 6822         	ldr	r2, [r4]
 8068006: 1ad3         	subs	r3, r2, r3
 8068008: 4299         	cmp	r1, r3
 806800a: dcd5         	bgt	0x8067fb8 <__swbuf_r+0x34> @ imm = #-0x56
 806800c: 4621         	mov	r1, r4
 806800e: 4630         	mov	r0, r6
 8068010: f7fc fe08    	bl	0x8064c24 <_fflush_r>   @ imm = #-0x33f0
 8068014: b958         	cbnz	r0, 0x806802e <__swbuf_r+0xaa> @ imm = #0x16
 8068016: 6822         	ldr	r2, [r4]
 8068018: 2301         	movs	r3, #0x1
 806801a: e7ce         	b	0x8067fba <__swbuf_r+0x36> @ imm = #-0x64
 806801c: f7fc ff2c    	bl	0x8064e78 <__sinit>     @ imm = #-0x31a8
 8068020: e7b8         	b	0x8067f94 <__swbuf_r+0x10> @ imm = #-0x90
 8068022: 4621         	mov	r1, r4
 8068024: 4630         	mov	r0, r6
 8068026: f7fc fdfd    	bl	0x8064c24 <_fflush_r>   @ imm = #-0x3406
 806802a: 2800         	cmp	r0, #0x0
 806802c: d0d3         	beq	0x8067fd6 <__swbuf_r+0x52> @ imm = #-0x5a
 806802e: f04f 37ff    	mov.w	r7, #0xffffffff
 8068032: e7d0         	b	0x8067fd6 <__swbuf_r+0x52> @ imm = #-0x60

08068034 <__swbuf>:
 8068034: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8068040 <__swbuf+0xc>
 8068036: 460a         	mov	r2, r1
 8068038: 4601         	mov	r1, r0
 806803a: 6818         	ldr	r0, [r3]
 806803c: f7ff bfa2    	b.w	0x8067f84 <__swbuf_r>   @ imm = #-0xbc

08068040 <$d>:
 8068040: 90 23 00 20  	.word	0x20002390

08068044 <_wcrtomb_r>:
 8068044: b570         	push	{r4, r5, r6, lr}
 8068046: 4605         	mov	r5, r0
 8068048: b084         	sub	sp, #0x10
 806804a: 461c         	mov	r4, r3
 806804c: b139         	cbz	r1, 0x806805e <_wcrtomb_r+0x1a> @ imm = #0xe
 806804e: 4e0b         	ldr	r6, [pc, #0x2c]         @ 0x806807c <_wcrtomb_r+0x38>
 8068050: f8d6 60e0    	ldr.w	r6, [r6, #0xe0]
 8068054: 47b0         	blx	r6
 8068056: 1c43         	adds	r3, r0, #0x1
 8068058: d009         	beq	0x806806e <_wcrtomb_r+0x2a> @ imm = #0x12
 806805a: b004         	add	sp, #0x10
 806805c: bd70         	pop	{r4, r5, r6, pc}
 806805e: 460a         	mov	r2, r1
 8068060: 4906         	ldr	r1, [pc, #0x18]         @ 0x806807c <_wcrtomb_r+0x38>
 8068062: f8d1 60e0    	ldr.w	r6, [r1, #0xe0]
 8068066: a901         	add	r1, sp, #0x4
 8068068: 47b0         	blx	r6
 806806a: 1c43         	adds	r3, r0, #0x1
 806806c: d1f5         	bne	0x806805a <_wcrtomb_r+0x16> @ imm = #-0x16
 806806e: 2200         	movs	r2, #0x0
 8068070: 238a         	movs	r3, #0x8a
 8068072: 6022         	str	r2, [r4]
 8068074: 602b         	str	r3, [r5]
 8068076: b004         	add	sp, #0x10
 8068078: bd70         	pop	{r4, r5, r6, pc}
 806807a: bf00         	nop

0806807c <$d>:
 806807c: d0 2b 00 20  	.word	0x20002bd0

08068080 <wcrtomb>:
 8068080: b570         	push	{r4, r5, r6, lr}
 8068082: 4d11         	ldr	r5, [pc, #0x44]         @ 0x80680c8 <wcrtomb+0x48>
 8068084: 460b         	mov	r3, r1
 8068086: b084         	sub	sp, #0x10
 8068088: 4601         	mov	r1, r0
 806808a: 4614         	mov	r4, r2
 806808c: 682d         	ldr	r5, [r5]
 806808e: b150         	cbz	r0, 0x80680a6 <wcrtomb+0x26> @ imm = #0x14
 8068090: 480e         	ldr	r0, [pc, #0x38]         @ 0x80680cc <wcrtomb+0x4c>
 8068092: 461a         	mov	r2, r3
 8068094: 4623         	mov	r3, r4
 8068096: f8d0 60e0    	ldr.w	r6, [r0, #0xe0]
 806809a: 4628         	mov	r0, r5
 806809c: 47b0         	blx	r6
 806809e: 1c43         	adds	r3, r0, #0x1
 80680a0: d00b         	beq	0x80680ba <wcrtomb+0x3a> @ imm = #0x16
 80680a2: b004         	add	sp, #0x10
 80680a4: bd70         	pop	{r4, r5, r6, pc}
 80680a6: 4809         	ldr	r0, [pc, #0x24]         @ 0x80680cc <wcrtomb+0x4c>
 80680a8: 4613         	mov	r3, r2
 80680aa: 460a         	mov	r2, r1
 80680ac: a901         	add	r1, sp, #0x4
 80680ae: f8d0 60e0    	ldr.w	r6, [r0, #0xe0]
 80680b2: 4628         	mov	r0, r5
 80680b4: 47b0         	blx	r6
 80680b6: 1c43         	adds	r3, r0, #0x1
 80680b8: d1f3         	bne	0x80680a2 <wcrtomb+0x22> @ imm = #-0x1a
 80680ba: 2200         	movs	r2, #0x0
 80680bc: 238a         	movs	r3, #0x8a
 80680be: 6022         	str	r2, [r4]
 80680c0: 602b         	str	r3, [r5]
 80680c2: b004         	add	sp, #0x10
 80680c4: bd70         	pop	{r4, r5, r6, pc}
 80680c6: bf00         	nop

080680c8 <$d>:
 80680c8: 90 23 00 20  	.word	0x20002390
 80680cc: d0 2b 00 20  	.word	0x20002bd0

080680d0 <_wctomb_r>:
 80680d0: b410         	push	{r4}
 80680d2: 4c03         	ldr	r4, [pc, #0xc]          @ 0x80680e0 <_wctomb_r+0x10>
 80680d4: f8d4 40e0    	ldr.w	r4, [r4, #0xe0]
 80680d8: 46a4         	mov	r12, r4
 80680da: bc10         	pop	{r4}
 80680dc: 4760         	bx	r12
 80680de: bf00         	nop

080680e0 <$d>:
 80680e0: d0 2b 00 20  	.word	0x20002bd0

080680e4 <__ascii_wctomb>:
 80680e4: 4603         	mov	r3, r0
 80680e6: b149         	cbz	r1, 0x80680fc <__ascii_wctomb+0x18> @ imm = #0x12
 80680e8: 2aff         	cmp	r2, #0xff
 80680ea: d802         	bhi	0x80680f2 <__ascii_wctomb+0xe> @ imm = #0x4
 80680ec: 2001         	movs	r0, #0x1
 80680ee: 700a         	strb	r2, [r1]
 80680f0: 4770         	bx	lr
 80680f2: 228a         	movs	r2, #0x8a
 80680f4: f04f 30ff    	mov.w	r0, #0xffffffff
 80680f8: 601a         	str	r2, [r3]
 80680fa: 4770         	bx	lr
 80680fc: 4608         	mov	r0, r1
 80680fe: 4770         	bx	lr

08068100 <abort>:
 8068100: 2006         	movs	r0, #0x6
 8068102: b508         	push	{r3, lr}
 8068104: f000 f8a0    	bl	0x8068248 <raise>       @ imm = #0x140
 8068108: 2001         	movs	r0, #0x1
 806810a: f000 f9ad    	bl	0x8068468 <_exit>       @ imm = #0x35a
 806810e: bf00         	nop

08068110 <_init_signal_r>:
 8068110: b538         	push	{r3, r4, r5, lr}
 8068112: f8d0 42dc    	ldr.w	r4, [r0, #0x2dc]
 8068116: b10c         	cbz	r4, 0x806811c <_init_signal_r+0xc> @ imm = #0x2
 8068118: 2000         	movs	r0, #0x0
 806811a: bd38         	pop	{r3, r4, r5, pc}
 806811c: 4605         	mov	r5, r0
 806811e: 2180         	movs	r1, #0x80
 8068120: f7fd f90c    	bl	0x806533c <_malloc_r>   @ imm = #-0x2de8
 8068124: 4602         	mov	r2, r0
 8068126: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 806812a: b130         	cbz	r0, 0x806813a <_init_signal_r+0x2a> @ imm = #0xc
 806812c: 1f03         	subs	r3, r0, #0x4
 806812e: 327c         	adds	r2, #0x7c
 8068130: f843 4f04    	str	r4, [r3, #4]!
 8068134: 4293         	cmp	r3, r2
 8068136: d1fb         	bne	0x8068130 <_init_signal_r+0x20> @ imm = #-0xa
 8068138: e7ee         	b	0x8068118 <_init_signal_r+0x8> @ imm = #-0x24
 806813a: f04f 30ff    	mov.w	r0, #0xffffffff
 806813e: bd38         	pop	{r3, r4, r5, pc}

08068140 <_signal_r>:
 8068140: 291f         	cmp	r1, #0x1f
 8068142: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 8068144: 4605         	mov	r5, r0
 8068146: d809         	bhi	0x806815c <_signal_r+0x1c> @ imm = #0x12
 8068148: f8d0 62dc    	ldr.w	r6, [r0, #0x2dc]
 806814c: 460c         	mov	r4, r1
 806814e: 4617         	mov	r7, r2
 8068150: b14e         	cbz	r6, 0x8068166 <_signal_r+0x26> @ imm = #0x12
 8068152: f856 0024    	ldr.w	r0, [r6, r4, lsl #2]
 8068156: f846 7024    	str.w	r7, [r6, r4, lsl #2]
 806815a: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 806815c: 2316         	movs	r3, #0x16
 806815e: f04f 30ff    	mov.w	r0, #0xffffffff
 8068162: 602b         	str	r3, [r5]
 8068164: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8068166: 2180         	movs	r1, #0x80
 8068168: f7fd f8e8    	bl	0x806533c <_malloc_r>   @ imm = #-0x2e30
 806816c: 4606         	mov	r6, r0
 806816e: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8068172: b140         	cbz	r0, 0x8068186 <_signal_r+0x46> @ imm = #0x10
 8068174: 1f03         	subs	r3, r0, #0x4
 8068176: f100 057c    	add.w	r5, r0, #0x7c
 806817a: 2100         	movs	r1, #0x0
 806817c: f843 1f04    	str	r1, [r3, #4]!
 8068180: 429d         	cmp	r5, r3
 8068182: d1fb         	bne	0x806817c <_signal_r+0x3c> @ imm = #-0xa
 8068184: e7e5         	b	0x8068152 <_signal_r+0x12> @ imm = #-0x36
 8068186: f04f 30ff    	mov.w	r0, #0xffffffff
 806818a: bdf8         	pop	{r3, r4, r5, r6, r7, pc}

0806818c <_raise_r>:
 806818c: 291f         	cmp	r1, #0x1f
 806818e: b538         	push	{r3, r4, r5, lr}
 8068190: 4605         	mov	r5, r0
 8068192: d821         	bhi	0x80681d8 <_raise_r+0x4c> @ imm = #0x42
 8068194: f8d0 22dc    	ldr.w	r2, [r0, #0x2dc]
 8068198: 460c         	mov	r4, r1
 806819a: b16a         	cbz	r2, 0x80681b8 <_raise_r+0x2c> @ imm = #0x1a
 806819c: f852 3021    	ldr.w	r3, [r2, r1, lsl #2]
 80681a0: b153         	cbz	r3, 0x80681b8 <_raise_r+0x2c> @ imm = #0x14
 80681a2: 2b01         	cmp	r3, #0x1
 80681a4: d016         	beq	0x80681d4 <_raise_r+0x48> @ imm = #0x2c
 80681a6: 1c59         	adds	r1, r3, #0x1
 80681a8: d010         	beq	0x80681cc <_raise_r+0x40> @ imm = #0x20
 80681aa: 2500         	movs	r5, #0x0
 80681ac: 4620         	mov	r0, r4
 80681ae: f842 5024    	str.w	r5, [r2, r4, lsl #2]
 80681b2: 4798         	blx	r3
 80681b4: 4628         	mov	r0, r5
 80681b6: bd38         	pop	{r3, r4, r5, pc}
 80681b8: 4628         	mov	r0, r5
 80681ba: f000 f903    	bl	0x80683c4 <_getpid_r>   @ imm = #0x206
 80681be: 4622         	mov	r2, r4
 80681c0: 4601         	mov	r1, r0
 80681c2: 4628         	mov	r0, r5
 80681c4: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 80681c8: f000 b8e6    	b.w	0x8068398 <_kill_r>     @ imm = #0x1cc
 80681cc: 2316         	movs	r3, #0x16
 80681ce: 2001         	movs	r0, #0x1
 80681d0: 602b         	str	r3, [r5]
 80681d2: bd38         	pop	{r3, r4, r5, pc}
 80681d4: 2000         	movs	r0, #0x0
 80681d6: bd38         	pop	{r3, r4, r5, pc}
 80681d8: 2316         	movs	r3, #0x16
 80681da: f04f 30ff    	mov.w	r0, #0xffffffff
 80681de: 602b         	str	r3, [r5]
 80681e0: bd38         	pop	{r3, r4, r5, pc}
 80681e2: bf00         	nop

080681e4 <__sigtramp_r>:
 80681e4: 291f         	cmp	r1, #0x1f
 80681e6: d82c         	bhi	0x8068242 <__sigtramp_r+0x5e> @ imm = #0x58
 80681e8: f8d0 22dc    	ldr.w	r2, [r0, #0x2dc]
 80681ec: b538         	push	{r3, r4, r5, lr}
 80681ee: 460c         	mov	r4, r1
 80681f0: 4605         	mov	r5, r0
 80681f2: b182         	cbz	r2, 0x8068216 <__sigtramp_r+0x32> @ imm = #0x20
 80681f4: f852 3024    	ldr.w	r3, [r2, r4, lsl #2]
 80681f8: eb02 0284    	add.w	r2, r2, r4, lsl #2
 80681fc: b14b         	cbz	r3, 0x8068212 <__sigtramp_r+0x2e> @ imm = #0x12
 80681fe: 1c59         	adds	r1, r3, #0x1
 8068200: d01a         	beq	0x8068238 <__sigtramp_r+0x54> @ imm = #0x34
 8068202: 2b01         	cmp	r3, #0x1
 8068204: d016         	beq	0x8068234 <__sigtramp_r+0x50> @ imm = #0x2c
 8068206: 2500         	movs	r5, #0x0
 8068208: 4620         	mov	r0, r4
 806820a: 6015         	str	r5, [r2]
 806820c: 4798         	blx	r3
 806820e: 4628         	mov	r0, r5
 8068210: bd38         	pop	{r3, r4, r5, pc}
 8068212: 2001         	movs	r0, #0x1
 8068214: bd38         	pop	{r3, r4, r5, pc}
 8068216: 2180         	movs	r1, #0x80
 8068218: f7fd f890    	bl	0x806533c <_malloc_r>   @ imm = #-0x2ee0
 806821c: 4602         	mov	r2, r0
 806821e: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8068222: b158         	cbz	r0, 0x806823c <__sigtramp_r+0x58> @ imm = #0x16
 8068224: 1f03         	subs	r3, r0, #0x4
 8068226: 2100         	movs	r1, #0x0
 8068228: 307c         	adds	r0, #0x7c
 806822a: f843 1f04    	str	r1, [r3, #4]!
 806822e: 4298         	cmp	r0, r3
 8068230: d1fb         	bne	0x806822a <__sigtramp_r+0x46> @ imm = #-0xa
 8068232: e7df         	b	0x80681f4 <__sigtramp_r+0x10> @ imm = #-0x42
 8068234: 2003         	movs	r0, #0x3
 8068236: bd38         	pop	{r3, r4, r5, pc}
 8068238: 2002         	movs	r0, #0x2
 806823a: bd38         	pop	{r3, r4, r5, pc}
 806823c: f04f 30ff    	mov.w	r0, #0xffffffff
 8068240: bd38         	pop	{r3, r4, r5, pc}
 8068242: f04f 30ff    	mov.w	r0, #0xffffffff
 8068246: 4770         	bx	lr

08068248 <raise>:
 8068248: b538         	push	{r3, r4, r5, lr}
 806824a: 281f         	cmp	r0, #0x1f
 806824c: 4b14         	ldr	r3, [pc, #0x50]         @ 0x80682a0 <raise+0x58>
 806824e: 681d         	ldr	r5, [r3]
 8068250: d820         	bhi	0x8068294 <raise+0x4c>  @ imm = #0x40
 8068252: f8d5 22dc    	ldr.w	r2, [r5, #0x2dc]
 8068256: 4604         	mov	r4, r0
 8068258: b162         	cbz	r2, 0x8068274 <raise+0x2c> @ imm = #0x18
 806825a: f852 3020    	ldr.w	r3, [r2, r0, lsl #2]
 806825e: b14b         	cbz	r3, 0x8068274 <raise+0x2c> @ imm = #0x12
 8068260: 2b01         	cmp	r3, #0x1
 8068262: d015         	beq	0x8068290 <raise+0x48>  @ imm = #0x2a
 8068264: 1c59         	adds	r1, r3, #0x1
 8068266: d00f         	beq	0x8068288 <raise+0x40>  @ imm = #0x1e
 8068268: 2500         	movs	r5, #0x0
 806826a: f842 5020    	str.w	r5, [r2, r0, lsl #2]
 806826e: 4798         	blx	r3
 8068270: 4628         	mov	r0, r5
 8068272: bd38         	pop	{r3, r4, r5, pc}
 8068274: 4628         	mov	r0, r5
 8068276: f000 f8a5    	bl	0x80683c4 <_getpid_r>   @ imm = #0x14a
 806827a: 4622         	mov	r2, r4
 806827c: 4601         	mov	r1, r0
 806827e: 4628         	mov	r0, r5
 8068280: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8068284: f000 b888    	b.w	0x8068398 <_kill_r>     @ imm = #0x110
 8068288: 2316         	movs	r3, #0x16
 806828a: 2001         	movs	r0, #0x1
 806828c: 602b         	str	r3, [r5]
 806828e: bd38         	pop	{r3, r4, r5, pc}
 8068290: 2000         	movs	r0, #0x0
 8068292: bd38         	pop	{r3, r4, r5, pc}
 8068294: 2316         	movs	r3, #0x16
 8068296: f04f 30ff    	mov.w	r0, #0xffffffff
 806829a: 602b         	str	r3, [r5]
 806829c: bd38         	pop	{r3, r4, r5, pc}
 806829e: bf00         	nop

080682a0 <$d>:
 80682a0: 90 23 00 20  	.word	0x20002390

080682a4 <signal>:
 80682a4: 4b13         	ldr	r3, [pc, #0x4c]         @ 0x80682f4 <signal+0x50>
 80682a6: 281f         	cmp	r0, #0x1f
 80682a8: b570         	push	{r4, r5, r6, lr}
 80682aa: 681e         	ldr	r6, [r3]
 80682ac: d809         	bhi	0x80682c2 <signal+0x1e> @ imm = #0x12
 80682ae: 460d         	mov	r5, r1
 80682b0: f8d6 12dc    	ldr.w	r1, [r6, #0x2dc]
 80682b4: 4604         	mov	r4, r0
 80682b6: b149         	cbz	r1, 0x80682cc <signal+0x28> @ imm = #0x12
 80682b8: f851 0024    	ldr.w	r0, [r1, r4, lsl #2]
 80682bc: f841 5024    	str.w	r5, [r1, r4, lsl #2]
 80682c0: bd70         	pop	{r4, r5, r6, pc}
 80682c2: 2316         	movs	r3, #0x16
 80682c4: f04f 30ff    	mov.w	r0, #0xffffffff
 80682c8: 6033         	str	r3, [r6]
 80682ca: bd70         	pop	{r4, r5, r6, pc}
 80682cc: 2180         	movs	r1, #0x80
 80682ce: 4630         	mov	r0, r6
 80682d0: f7fd f834    	bl	0x806533c <_malloc_r>   @ imm = #-0x2f98
 80682d4: 4601         	mov	r1, r0
 80682d6: f8c6 02dc    	str.w	r0, [r6, #0x2dc]
 80682da: b140         	cbz	r0, 0x80682ee <signal+0x4a> @ imm = #0x10
 80682dc: 1f03         	subs	r3, r0, #0x4
 80682de: f100 0c7c    	add.w	r12, r0, #0x7c
 80682e2: 2200         	movs	r2, #0x0
 80682e4: f843 2f04    	str	r2, [r3, #4]!
 80682e8: 4563         	cmp	r3, r12
 80682ea: d1fb         	bne	0x80682e4 <signal+0x40> @ imm = #-0xa
 80682ec: e7e4         	b	0x80682b8 <signal+0x14> @ imm = #-0x38
 80682ee: f04f 30ff    	mov.w	r0, #0xffffffff
 80682f2: bd70         	pop	{r4, r5, r6, pc}

080682f4 <$d>:
 80682f4: 90 23 00 20  	.word	0x20002390

080682f8 <_init_signal>:
 80682f8: b538         	push	{r3, r4, r5, lr}
 80682fa: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x806832c <_init_signal+0x34>
 80682fc: 681d         	ldr	r5, [r3]
 80682fe: f8d5 42dc    	ldr.w	r4, [r5, #0x2dc]
 8068302: b10c         	cbz	r4, 0x8068308 <_init_signal+0x10> @ imm = #0x2
 8068304: 2000         	movs	r0, #0x0
 8068306: bd38         	pop	{r3, r4, r5, pc}
 8068308: 2180         	movs	r1, #0x80
 806830a: 4628         	mov	r0, r5
 806830c: f7fd f816    	bl	0x806533c <_malloc_r>   @ imm = #-0x2fd4
 8068310: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8068314: b138         	cbz	r0, 0x8068326 <_init_signal+0x2e> @ imm = #0xe
 8068316: 1f03         	subs	r3, r0, #0x4
 8068318: f100 027c    	add.w	r2, r0, #0x7c
 806831c: f843 4f04    	str	r4, [r3, #4]!
 8068320: 4293         	cmp	r3, r2
 8068322: d1fb         	bne	0x806831c <_init_signal+0x24> @ imm = #-0xa
 8068324: e7ee         	b	0x8068304 <_init_signal+0xc> @ imm = #-0x24
 8068326: f04f 30ff    	mov.w	r0, #0xffffffff
 806832a: bd38         	pop	{r3, r4, r5, pc}

0806832c <$d>:
 806832c: 90 23 00 20  	.word	0x20002390

08068330 <__sigtramp>:
 8068330: b538         	push	{r3, r4, r5, lr}
 8068332: 281f         	cmp	r0, #0x1f
 8068334: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x8068394 <__sigtramp+0x64>
 8068336: 681d         	ldr	r5, [r3]
 8068338: d828         	bhi	0x806838c <__sigtramp+0x5c> @ imm = #0x50
 806833a: f8d5 22dc    	ldr.w	r2, [r5, #0x2dc]
 806833e: 4604         	mov	r4, r0
 8068340: b182         	cbz	r2, 0x8068364 <__sigtramp+0x34> @ imm = #0x20
 8068342: f852 3024    	ldr.w	r3, [r2, r4, lsl #2]
 8068346: eb02 0284    	add.w	r2, r2, r4, lsl #2
 806834a: b14b         	cbz	r3, 0x8068360 <__sigtramp+0x30> @ imm = #0x12
 806834c: 1c59         	adds	r1, r3, #0x1
 806834e: d01b         	beq	0x8068388 <__sigtramp+0x58> @ imm = #0x36
 8068350: 2b01         	cmp	r3, #0x1
 8068352: d017         	beq	0x8068384 <__sigtramp+0x54> @ imm = #0x2e
 8068354: 2500         	movs	r5, #0x0
 8068356: 4620         	mov	r0, r4
 8068358: 6015         	str	r5, [r2]
 806835a: 4798         	blx	r3
 806835c: 4628         	mov	r0, r5
 806835e: bd38         	pop	{r3, r4, r5, pc}
 8068360: 2001         	movs	r0, #0x1
 8068362: bd38         	pop	{r3, r4, r5, pc}
 8068364: 2180         	movs	r1, #0x80
 8068366: 4628         	mov	r0, r5
 8068368: f7fc ffe8    	bl	0x806533c <_malloc_r>   @ imm = #-0x3030
 806836c: 4602         	mov	r2, r0
 806836e: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8068372: b158         	cbz	r0, 0x806838c <__sigtramp+0x5c> @ imm = #0x16
 8068374: 1f03         	subs	r3, r0, #0x4
 8068376: 2100         	movs	r1, #0x0
 8068378: 307c         	adds	r0, #0x7c
 806837a: f843 1f04    	str	r1, [r3, #4]!
 806837e: 4283         	cmp	r3, r0
 8068380: d1fb         	bne	0x806837a <__sigtramp+0x4a> @ imm = #-0xa
 8068382: e7de         	b	0x8068342 <__sigtramp+0x12> @ imm = #-0x44
 8068384: 2003         	movs	r0, #0x3
 8068386: bd38         	pop	{r3, r4, r5, pc}
 8068388: 2002         	movs	r0, #0x2
 806838a: bd38         	pop	{r3, r4, r5, pc}
 806838c: f04f 30ff    	mov.w	r0, #0xffffffff
 8068390: bd38         	pop	{r3, r4, r5, pc}
 8068392: bf00         	nop

08068394 <$d>:
 8068394: 90 23 00 20  	.word	0x20002390

08068398 <_kill_r>:
 8068398: b570         	push	{r4, r5, r6, lr}
 806839a: 460c         	mov	r4, r1
 806839c: 4603         	mov	r3, r0
 806839e: 4d08         	ldr	r5, [pc, #0x20]         @ 0x80683c0 <_kill_r+0x28>
 80683a0: 2600         	movs	r6, #0x0
 80683a2: 4620         	mov	r0, r4
 80683a4: 4611         	mov	r1, r2
 80683a6: 461c         	mov	r4, r3
 80683a8: 602e         	str	r6, [r5]
 80683aa: f000 f82d    	bl	0x8068408 <_kill>       @ imm = #0x5a
 80683ae: 1c43         	adds	r3, r0, #0x1
 80683b0: d000         	beq	0x80683b4 <_kill_r+0x1c> @ imm = #0x0
 80683b2: bd70         	pop	{r4, r5, r6, pc}
 80683b4: 682b         	ldr	r3, [r5]
 80683b6: 2b00         	cmp	r3, #0x0
 80683b8: d0fb         	beq	0x80683b2 <_kill_r+0x1a> @ imm = #-0xa
 80683ba: 6023         	str	r3, [r4]
 80683bc: bd70         	pop	{r4, r5, r6, pc}
 80683be: bf00         	nop

080683c0 <$d>:
 80683c0: 9c 3f 00 20  	.word	0x20003f9c

080683c4 <_getpid_r>:
 80683c4: f000 b810    	b.w	0x80683e8 <_getpid>     @ imm = #0x20

080683c8 <_close>:
 80683c8: 4b02         	ldr	r3, [pc, #0x8]          @ 0x80683d4 <_close+0xc>
 80683ca: 2258         	movs	r2, #0x58
 80683cc: f04f 30ff    	mov.w	r0, #0xffffffff
 80683d0: 601a         	str	r2, [r3]
 80683d2: 4770         	bx	lr

080683d4 <$d>:
 80683d4: 9c 3f 00 20  	.word	0x20003f9c

080683d8 <_fstat>:
 80683d8: 4b02         	ldr	r3, [pc, #0x8]          @ 0x80683e4 <_fstat+0xc>
 80683da: 2258         	movs	r2, #0x58
 80683dc: f04f 30ff    	mov.w	r0, #0xffffffff
 80683e0: 601a         	str	r2, [r3]
 80683e2: 4770         	bx	lr

080683e4 <$d>:
 80683e4: 9c 3f 00 20  	.word	0x20003f9c

080683e8 <_getpid>:
 80683e8: 4b02         	ldr	r3, [pc, #0x8]          @ 0x80683f4 <_getpid+0xc>
 80683ea: 2258         	movs	r2, #0x58
 80683ec: f04f 30ff    	mov.w	r0, #0xffffffff
 80683f0: 601a         	str	r2, [r3]
 80683f2: 4770         	bx	lr

080683f4 <$d>:
 80683f4: 9c 3f 00 20  	.word	0x20003f9c

080683f8 <_isatty>:
 80683f8: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8068404 <_isatty+0xc>
 80683fa: 2258         	movs	r2, #0x58
 80683fc: 2000         	movs	r0, #0x0
 80683fe: 601a         	str	r2, [r3]
 8068400: 4770         	bx	lr
 8068402: bf00         	nop

08068404 <$d>:
 8068404: 9c 3f 00 20  	.word	0x20003f9c

08068408 <_kill>:
 8068408: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8068414 <_kill+0xc>
 806840a: 2258         	movs	r2, #0x58
 806840c: f04f 30ff    	mov.w	r0, #0xffffffff
 8068410: 601a         	str	r2, [r3]
 8068412: 4770         	bx	lr

08068414 <$d>:
 8068414: 9c 3f 00 20  	.word	0x20003f9c

08068418 <_lseek>:
 8068418: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8068424 <_lseek+0xc>
 806841a: 2258         	movs	r2, #0x58
 806841c: f04f 30ff    	mov.w	r0, #0xffffffff
 8068420: 601a         	str	r2, [r3]
 8068422: 4770         	bx	lr

08068424 <$d>:
 8068424: 9c 3f 00 20  	.word	0x20003f9c

08068428 <_read>:
 8068428: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8068434 <_read+0xc>
 806842a: 2258         	movs	r2, #0x58
 806842c: f04f 30ff    	mov.w	r0, #0xffffffff
 8068430: 601a         	str	r2, [r3]
 8068432: 4770         	bx	lr

08068434 <$d>:
 8068434: 9c 3f 00 20  	.word	0x20003f9c

08068438 <_sbrk>:
 8068438: 4a05         	ldr	r2, [pc, #0x14]         @ 0x8068450 <_sbrk+0x18>
 806843a: 4603         	mov	r3, r0
 806843c: 6810         	ldr	r0, [r2]
 806843e: b110         	cbz	r0, 0x8068446 <_sbrk+0xe> @ imm = #0x4
 8068440: 4403         	add	r3, r0
 8068442: 6013         	str	r3, [r2]
 8068444: 4770         	bx	lr
 8068446: 4803         	ldr	r0, [pc, #0xc]          @ 0x8068454 <_sbrk+0x1c>
 8068448: 4403         	add	r3, r0
 806844a: 6013         	str	r3, [r2]
 806844c: 4770         	bx	lr
 806844e: bf00         	nop

08068450 <$d>:
 8068450: a0 3f 00 20  	.word	0x20003fa0
 8068454: c0 4f 00 20  	.word	0x20004fc0

08068458 <_write>:
 8068458: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8068464 <_write+0xc>
 806845a: 2258         	movs	r2, #0x58
 806845c: f04f 30ff    	mov.w	r0, #0xffffffff
 8068460: 601a         	str	r2, [r3]
 8068462: 4770         	bx	lr

08068464 <$d>:
 8068464: 9c 3f 00 20  	.word	0x20003f9c

08068468 <_exit>:
 8068468: e7fe         	b	0x8068468 <_exit>       @ imm = #-0x4
 806846a: bf00         	nop

0806846c <__aeabi_drsub>:
 806846c: f081 4100    	eor	r1, r1, #0x80000000
 8068470: e002         	b	0x8068478 <__aeabi_dadd> @ imm = #0x4
 8068472: bf00         	nop

08068474 <__subdf3>:
 8068474: f083 4300    	eor	r3, r3, #0x80000000

08068478 <__aeabi_dadd>:
 8068478: b530         	push	{r4, r5, lr}
 806847a: ea4f 0441    	lsl.w	r4, r1, #0x1
 806847e: ea4f 0543    	lsl.w	r5, r3, #0x1
 8068482: ea94 0f05    	teq.w	r4, r5
 8068486: bf08         	it	eq
 8068488: ea90 0f02    	teqeq.w	r0, r2
 806848c: bf1f         	itttt	ne
 806848e: ea54 0c00    	orrsne.w	r12, r4, r0
 8068492: ea55 0c02    	orrsne.w	r12, r5, r2
 8068496: ea7f 5c64    	mvnsne.w	r12, r4, asr #21
 806849a: ea7f 5c65    	mvnsne.w	r12, r5, asr #21
 806849e: f000 80e2    	beq.w	0x8068666 <__aeabi_dadd+0x1ee> @ imm = #0x1c4
 80684a2: ea4f 5454    	lsr.w	r4, r4, #0x15
 80684a6: ebd4 5555    	rsbs	r5, r4, r5, lsr #21
 80684aa: bfb8         	it	lt
 80684ac: 426d         	rsblt	r5, r5, #0
 80684ae: dd0c         	ble	0x80684ca <__aeabi_dadd+0x52> @ imm = #0x18
 80684b0: 442c         	add	r4, r5
 80684b2: ea80 0202    	eor.w	r2, r0, r2
 80684b6: ea81 0303    	eor.w	r3, r1, r3
 80684ba: ea82 0000    	eor.w	r0, r2, r0
 80684be: ea83 0101    	eor.w	r1, r3, r1
 80684c2: ea80 0202    	eor.w	r2, r0, r2
 80684c6: ea81 0303    	eor.w	r3, r1, r3
 80684ca: 2d36         	cmp	r5, #0x36
 80684cc: bf88         	it	hi
 80684ce: bd30         	pophi	{r4, r5, pc}
 80684d0: f011 4f00    	tst.w	r1, #0x80000000
 80684d4: ea4f 3101    	lsl.w	r1, r1, #0xc
 80684d8: f44f 1c80    	mov.w	r12, #0x100000
 80684dc: ea4c 3111    	orr.w	r1, r12, r1, lsr #12
 80684e0: d002         	beq	0x80684e8 <__aeabi_dadd+0x70> @ imm = #0x4
 80684e2: 4240         	rsbs	r0, r0, #0
 80684e4: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 80684e8: f013 4f00    	tst.w	r3, #0x80000000
 80684ec: ea4f 3303    	lsl.w	r3, r3, #0xc
 80684f0: ea4c 3313    	orr.w	r3, r12, r3, lsr #12
 80684f4: d002         	beq	0x80684fc <__aeabi_dadd+0x84> @ imm = #0x4
 80684f6: 4252         	rsbs	r2, r2, #0
 80684f8: eb63 0343    	sbc.w	r3, r3, r3, lsl #1
 80684fc: ea94 0f05    	teq.w	r4, r5
 8068500: f000 80a7    	beq.w	0x8068652 <__aeabi_dadd+0x1da> @ imm = #0x14e
 8068504: f1a4 0401    	sub.w	r4, r4, #0x1
 8068508: f1d5 0e20    	rsbs.w	lr, r5, #0x20
 806850c: db0d         	blt	0x806852a <__aeabi_dadd+0xb2> @ imm = #0x1a
 806850e: fa02 fc0e    	lsl.w	r12, r2, lr
 8068512: fa22 f205    	lsr.w	r2, r2, r5
 8068516: 1880         	adds	r0, r0, r2
 8068518: f141 0100    	adc	r1, r1, #0x0
 806851c: fa03 f20e    	lsl.w	r2, r3, lr
 8068520: 1880         	adds	r0, r0, r2
 8068522: fa43 f305    	asr.w	r3, r3, r5
 8068526: 4159         	adcs	r1, r3
 8068528: e00e         	b	0x8068548 <__aeabi_dadd+0xd0> @ imm = #0x1c
 806852a: f1a5 0520    	sub.w	r5, r5, #0x20
 806852e: f10e 0e20    	add.w	lr, lr, #0x20
 8068532: 2a01         	cmp	r2, #0x1
 8068534: fa03 fc0e    	lsl.w	r12, r3, lr
 8068538: bf28         	it	hs
 806853a: f04c 0c02    	orrhs	r12, r12, #0x2
 806853e: fa43 f305    	asr.w	r3, r3, r5
 8068542: 18c0         	adds	r0, r0, r3
 8068544: eb51 71e3    	adcs.w	r1, r1, r3, asr #31
 8068548: f001 4500    	and	r5, r1, #0x80000000
 806854c: d507         	bpl	0x806855e <__aeabi_dadd+0xe6> @ imm = #0xe
 806854e: f04f 0e00    	mov.w	lr, #0x0
 8068552: f1dc 0c00    	rsbs.w	r12, r12, #0x0
 8068556: eb7e 0000    	sbcs.w	r0, lr, r0
 806855a: eb6e 0101    	sbc.w	r1, lr, r1
 806855e: f5b1 1f80    	cmp.w	r1, #0x100000
 8068562: d31b         	blo	0x806859c <__aeabi_dadd+0x124> @ imm = #0x36
 8068564: f5b1 1f00    	cmp.w	r1, #0x200000
 8068568: d30c         	blo	0x8068584 <__aeabi_dadd+0x10c> @ imm = #0x18
 806856a: 0849         	lsrs	r1, r1, #0x1
 806856c: ea5f 0030    	rrxs	r0, r0
 8068570: ea4f 0c3c    	rrx	r12, r12
 8068574: f104 0401    	add.w	r4, r4, #0x1
 8068578: ea4f 5244    	lsl.w	r2, r4, #0x15
 806857c: f512 0f80    	cmn.w	r2, #0x400000
 8068580: f080 809a    	bhs.w	0x80686b8 <__aeabi_dadd+0x240> @ imm = #0x134
 8068584: f1bc 4f00    	cmp.w	r12, #0x80000000
 8068588: bf08         	it	eq
 806858a: ea5f 0c50    	lsrseq.w	r12, r0, #0x1
 806858e: f150 0000    	adcs	r0, r0, #0x0
 8068592: eb41 5104    	adc.w	r1, r1, r4, lsl #20
 8068596: ea41 0105    	orr.w	r1, r1, r5
 806859a: bd30         	pop	{r4, r5, pc}
 806859c: ea5f 0c4c    	lsls.w	r12, r12, #0x1
 80685a0: 4140         	adcs	r0, r0
 80685a2: eb41 0101    	adc.w	r1, r1, r1
 80685a6: 3c01         	subs	r4, #0x1
 80685a8: bf28         	it	hs
 80685aa: f5b1 1f80    	cmphs.w	r1, #0x100000
 80685ae: d2e9         	bhs	0x8068584 <__aeabi_dadd+0x10c> @ imm = #-0x2e
 80685b0: f091 0f00    	teq.w	r1, #0x0
 80685b4: bf04         	itt	eq
 80685b6: 4601         	moveq	r1, r0
 80685b8: 2000         	moveq	r0, #0x0
 80685ba: fab1 f381    	clz	r3, r1
 80685be: bf08         	it	eq
 80685c0: 3320         	addeq	r3, #0x20
 80685c2: f1a3 030b    	sub.w	r3, r3, #0xb
 80685c6: f1b3 0220    	subs.w	r2, r3, #0x20
 80685ca: da0c         	bge	0x80685e6 <__aeabi_dadd+0x16e> @ imm = #0x18
 80685cc: 320c         	adds	r2, #0xc
 80685ce: dd08         	ble	0x80685e2 <__aeabi_dadd+0x16a> @ imm = #0x10
 80685d0: f102 0c14    	add.w	r12, r2, #0x14
 80685d4: f1c2 020c    	rsb.w	r2, r2, #0xc
 80685d8: fa01 f00c    	lsl.w	r0, r1, r12
 80685dc: fa21 f102    	lsr.w	r1, r1, r2
 80685e0: e00c         	b	0x80685fc <__aeabi_dadd+0x184> @ imm = #0x18
 80685e2: f102 0214    	add.w	r2, r2, #0x14
 80685e6: bfd8         	it	le
 80685e8: f1c2 0c20    	rsble.w	r12, r2, #0x20
 80685ec: fa01 f102    	lsl.w	r1, r1, r2
 80685f0: fa20 fc0c    	lsr.w	r12, r0, r12
 80685f4: bfdc         	itt	le
 80685f6: ea41 010c    	orrle.w	r1, r1, r12
 80685fa: 4090         	lslle	r0, r2
 80685fc: 1ae4         	subs	r4, r4, r3
 80685fe: bfa2         	ittt	ge
 8068600: eb01 5104    	addge.w	r1, r1, r4, lsl #20
 8068604: 4329         	orrge	r1, r5
 8068606: bd30         	popge	{r4, r5, pc}
 8068608: ea6f 0404    	mvn.w	r4, r4
 806860c: 3c1f         	subs	r4, #0x1f
 806860e: da1c         	bge	0x806864a <__aeabi_dadd+0x1d2> @ imm = #0x38
 8068610: 340c         	adds	r4, #0xc
 8068612: dc0e         	bgt	0x8068632 <__aeabi_dadd+0x1ba> @ imm = #0x1c
 8068614: f104 0414    	add.w	r4, r4, #0x14
 8068618: f1c4 0220    	rsb.w	r2, r4, #0x20
 806861c: fa20 f004    	lsr.w	r0, r0, r4
 8068620: fa01 f302    	lsl.w	r3, r1, r2
 8068624: ea40 0003    	orr.w	r0, r0, r3
 8068628: fa21 f304    	lsr.w	r3, r1, r4
 806862c: ea45 0103    	orr.w	r1, r5, r3
 8068630: bd30         	pop	{r4, r5, pc}
 8068632: f1c4 040c    	rsb.w	r4, r4, #0xc
 8068636: f1c4 0220    	rsb.w	r2, r4, #0x20
 806863a: fa20 f002    	lsr.w	r0, r0, r2
 806863e: fa01 f304    	lsl.w	r3, r1, r4
 8068642: ea40 0003    	orr.w	r0, r0, r3
 8068646: 4629         	mov	r1, r5
 8068648: bd30         	pop	{r4, r5, pc}
 806864a: fa21 f004    	lsr.w	r0, r1, r4
 806864e: 4629         	mov	r1, r5
 8068650: bd30         	pop	{r4, r5, pc}
 8068652: f094 0f00    	teq.w	r4, #0x0
 8068656: f483 1380    	eor	r3, r3, #0x100000
 806865a: bf06         	itte	eq
 806865c: f481 1180    	eoreq	r1, r1, #0x100000
 8068660: 3401         	addeq	r4, #0x1
 8068662: 3d01         	subne	r5, #0x1
 8068664: e74e         	b	0x8068504 <__aeabi_dadd+0x8c> @ imm = #-0x164
 8068666: ea7f 5c64    	mvns.w	r12, r4, asr #21
 806866a: bf18         	it	ne
 806866c: ea7f 5c65    	mvnsne.w	r12, r5, asr #21
 8068670: d029         	beq	0x80686c6 <__aeabi_dadd+0x24e> @ imm = #0x52
 8068672: ea94 0f05    	teq.w	r4, r5
 8068676: bf08         	it	eq
 8068678: ea90 0f02    	teqeq.w	r0, r2
 806867c: d005         	beq	0x806868a <__aeabi_dadd+0x212> @ imm = #0xa
 806867e: ea54 0c00    	orrs.w	r12, r4, r0
 8068682: bf04         	itt	eq
 8068684: 4619         	moveq	r1, r3
 8068686: 4610         	moveq	r0, r2
 8068688: bd30         	pop	{r4, r5, pc}
 806868a: ea91 0f03    	teq.w	r1, r3
 806868e: bf1e         	ittt	ne
 8068690: 2100         	movne	r1, #0x0
 8068692: 2000         	movne	r0, #0x0
 8068694: bd30         	popne	{r4, r5, pc}
 8068696: ea5f 5c54    	lsrs.w	r12, r4, #0x15
 806869a: d105         	bne	0x80686a8 <__aeabi_dadd+0x230> @ imm = #0xa
 806869c: 0040         	lsls	r0, r0, #0x1
 806869e: 4149         	adcs	r1, r1
 80686a0: bf28         	it	hs
 80686a2: f041 4100    	orrhs	r1, r1, #0x80000000
 80686a6: bd30         	pop	{r4, r5, pc}
 80686a8: f514 0480    	adds.w	r4, r4, #0x400000
 80686ac: bf3c         	itt	lo
 80686ae: f501 1180    	addlo.w	r1, r1, #0x100000
 80686b2: bd30         	poplo	{r4, r5, pc}
 80686b4: f001 4500    	and	r5, r1, #0x80000000
 80686b8: f045 41fe    	orr	r1, r5, #0x7f000000
 80686bc: f441 0170    	orr	r1, r1, #0xf00000
 80686c0: f04f 0000    	mov.w	r0, #0x0
 80686c4: bd30         	pop	{r4, r5, pc}
 80686c6: ea7f 5c64    	mvns.w	r12, r4, asr #21
 80686ca: bf1a         	itte	ne
 80686cc: 4619         	movne	r1, r3
 80686ce: 4610         	movne	r0, r2
 80686d0: ea7f 5c65    	mvnseq.w	r12, r5, asr #21
 80686d4: bf1c         	itt	ne
 80686d6: 460b         	movne	r3, r1
 80686d8: 4602         	movne	r2, r0
 80686da: ea50 3401    	orrs.w	r4, r0, r1, lsl #12
 80686de: bf06         	itte	eq
 80686e0: ea52 3503    	orrseq.w	r5, r2, r3, lsl #12
 80686e4: ea91 0f03    	teqeq.w	r1, r3
 80686e8: f441 2100    	orrne	r1, r1, #0x80000
 80686ec: bd30         	pop	{r4, r5, pc}
 80686ee: bf00         	nop

080686f0 <__floatunsidf>:
 80686f0: f090 0f00    	teq.w	r0, #0x0
 80686f4: bf04         	itt	eq
 80686f6: 2100         	moveq	r1, #0x0
 80686f8: 4770         	bxeq	lr
 80686fa: b530         	push	{r4, r5, lr}
 80686fc: f44f 6480    	mov.w	r4, #0x400
 8068700: f104 0432    	add.w	r4, r4, #0x32
 8068704: f04f 0500    	mov.w	r5, #0x0
 8068708: f04f 0100    	mov.w	r1, #0x0
 806870c: e750         	b	0x80685b0 <__aeabi_dadd+0x138> @ imm = #-0x160
 806870e: bf00         	nop

08068710 <__floatsidf>:
 8068710: f090 0f00    	teq.w	r0, #0x0
 8068714: bf04         	itt	eq
 8068716: 2100         	moveq	r1, #0x0
 8068718: 4770         	bxeq	lr
 806871a: b530         	push	{r4, r5, lr}
 806871c: f44f 6480    	mov.w	r4, #0x400
 8068720: f104 0432    	add.w	r4, r4, #0x32
 8068724: f010 4500    	ands	r5, r0, #0x80000000
 8068728: bf48         	it	mi
 806872a: 4240         	rsbmi	r0, r0, #0
 806872c: f04f 0100    	mov.w	r1, #0x0
 8068730: e73e         	b	0x80685b0 <__aeabi_dadd+0x138> @ imm = #-0x184
 8068732: bf00         	nop

08068734 <__extendsfdf2>:
 8068734: 0042         	lsls	r2, r0, #0x1
 8068736: ea4f 01e2    	asr.w	r1, r2, #0x3
 806873a: ea4f 0131    	rrx	r1, r1
 806873e: ea4f 7002    	lsl.w	r0, r2, #0x1c
 8068742: bf1f         	itttt	ne
 8068744: f012 437f    	andsne	r3, r2, #0xff000000
 8068748: f093 4f7f    	teqne.w	r3, #0xff000000
 806874c: f081 5160    	eorne	r1, r1, #0x38000000
 8068750: 4770         	bxne	lr
 8068752: f032 427f    	bics	r2, r2, #0xff000000
 8068756: bf08         	it	eq
 8068758: 4770         	bxeq	lr
 806875a: f093 4f7f    	teq.w	r3, #0xff000000
 806875e: bf04         	itt	eq
 8068760: f441 2100    	orreq	r1, r1, #0x80000
 8068764: 4770         	bxeq	lr
 8068766: b530         	push	{r4, r5, lr}
 8068768: f44f 7460    	mov.w	r4, #0x380
 806876c: f001 4500    	and	r5, r1, #0x80000000
 8068770: f021 4100    	bic	r1, r1, #0x80000000
 8068774: e71c         	b	0x80685b0 <__aeabi_dadd+0x138> @ imm = #-0x1c8
 8068776: bf00         	nop

08068778 <__floatundidf>:
 8068778: ea50 0201    	orrs.w	r2, r0, r1
 806877c: bf08         	it	eq
 806877e: 4770         	bxeq	lr
 8068780: b530         	push	{r4, r5, lr}
 8068782: f04f 0500    	mov.w	r5, #0x0
 8068786: e00a         	b	0x806879e <__floatdidf+0x16> @ imm = #0x14

08068788 <__floatdidf>:
 8068788: ea50 0201    	orrs.w	r2, r0, r1
 806878c: bf08         	it	eq
 806878e: 4770         	bxeq	lr
 8068790: b530         	push	{r4, r5, lr}
 8068792: f011 4500    	ands	r5, r1, #0x80000000
 8068796: d502         	bpl	0x806879e <__floatdidf+0x16> @ imm = #0x4
 8068798: 4240         	rsbs	r0, r0, #0
 806879a: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 806879e: f44f 6480    	mov.w	r4, #0x400
 80687a2: f104 0432    	add.w	r4, r4, #0x32
 80687a6: ea5f 5c91    	lsrs.w	r12, r1, #0x16
 80687aa: f43f aed8    	beq.w	0x806855e <__aeabi_dadd+0xe6> @ imm = #-0x250
 80687ae: f04f 0203    	mov.w	r2, #0x3
 80687b2: ea5f 0cdc    	lsrs.w	r12, r12, #0x3
 80687b6: bf18         	it	ne
 80687b8: 3203         	addne	r2, #0x3
 80687ba: ea5f 0cdc    	lsrs.w	r12, r12, #0x3
 80687be: bf18         	it	ne
 80687c0: 3203         	addne	r2, #0x3
 80687c2: eb02 02dc    	add.w	r2, r2, r12, lsr #3
 80687c6: f1c2 0320    	rsb.w	r3, r2, #0x20
 80687ca: fa00 fc03    	lsl.w	r12, r0, r3
 80687ce: fa20 f002    	lsr.w	r0, r0, r2
 80687d2: fa01 fe03    	lsl.w	lr, r1, r3
 80687d6: ea40 000e    	orr.w	r0, r0, lr
 80687da: fa21 f102    	lsr.w	r1, r1, r2
 80687de: 4414         	add	r4, r2
 80687e0: e6bd         	b	0x806855e <__aeabi_dadd+0xe6> @ imm = #-0x286
 80687e2: bf00         	nop

080687e4 <__muldf3>:
 80687e4: b570         	push	{r4, r5, r6, lr}
 80687e6: f04f 0cff    	mov.w	r12, #0xff
 80687ea: f44c 6ce0    	orr	r12, r12, #0x700
 80687ee: ea1c 5411    	ands.w	r4, r12, r1, lsr #20
 80687f2: bf1d         	ittte	ne
 80687f4: ea1c 5513    	andsne.w	r5, r12, r3, lsr #20
 80687f8: ea94 0f0c    	teqne.w	r4, r12
 80687fc: ea95 0f0c    	teqne.w	r5, r12
 8068800: f000 f8de    	bleq	0x80689c0 <__muldf3+0x1dc> @ imm = #0x1bc
 8068804: 442c         	add	r4, r5
 8068806: ea81 0603    	eor.w	r6, r1, r3
 806880a: ea21 514c    	bic.w	r1, r1, r12, lsl #21
 806880e: ea23 534c    	bic.w	r3, r3, r12, lsl #21
 8068812: ea50 3501    	orrs.w	r5, r0, r1, lsl #12
 8068816: bf18         	it	ne
 8068818: ea52 3503    	orrsne.w	r5, r2, r3, lsl #12
 806881c: f441 1180    	orr	r1, r1, #0x100000
 8068820: f443 1380    	orr	r3, r3, #0x100000
 8068824: d038         	beq	0x8068898 <__muldf3+0xb4> @ imm = #0x70
 8068826: fba0 ce02    	umull	r12, lr, r0, r2
 806882a: f04f 0500    	mov.w	r5, #0x0
 806882e: fbe1 e502    	umlal	lr, r5, r1, r2
 8068832: f006 4200    	and	r2, r6, #0x80000000
 8068836: fbe0 e503    	umlal	lr, r5, r0, r3
 806883a: f04f 0600    	mov.w	r6, #0x0
 806883e: fbe1 5603    	umlal	r5, r6, r1, r3
 8068842: f09c 0f00    	teq.w	r12, #0x0
 8068846: bf18         	it	ne
 8068848: f04e 0e01    	orrne	lr, lr, #0x1
 806884c: f1a4 04ff    	sub.w	r4, r4, #0xff
 8068850: f5b6 7f00    	cmp.w	r6, #0x200
 8068854: f564 7440    	sbc	r4, r4, #0x300
 8068858: d204         	bhs	0x8068864 <__muldf3+0x80> @ imm = #0x8
 806885a: ea5f 0e4e    	lsls.w	lr, lr, #0x1
 806885e: 416d         	adcs	r5, r5
 8068860: eb46 0606    	adc.w	r6, r6, r6
 8068864: ea42 21c6    	orr.w	r1, r2, r6, lsl #11
 8068868: ea41 5155    	orr.w	r1, r1, r5, lsr #21
 806886c: ea4f 20c5    	lsl.w	r0, r5, #0xb
 8068870: ea40 505e    	orr.w	r0, r0, lr, lsr #21
 8068874: ea4f 2ece    	lsl.w	lr, lr, #0xb
 8068878: f1b4 0cfd    	subs.w	r12, r4, #0xfd
 806887c: bf88         	it	hi
 806887e: f5bc 6fe0    	cmphi.w	r12, #0x700
 8068882: d81e         	bhi	0x80688c2 <__muldf3+0xde> @ imm = #0x3c
 8068884: f1be 4f00    	cmp.w	lr, #0x80000000
 8068888: bf08         	it	eq
 806888a: ea5f 0e50    	lsrseq.w	lr, r0, #0x1
 806888e: f150 0000    	adcs	r0, r0, #0x0
 8068892: eb41 5104    	adc.w	r1, r1, r4, lsl #20
 8068896: bd70         	pop	{r4, r5, r6, pc}
 8068898: f006 4600    	and	r6, r6, #0x80000000
 806889c: ea46 0101    	orr.w	r1, r6, r1
 80688a0: ea40 0002    	orr.w	r0, r0, r2
 80688a4: ea81 0103    	eor.w	r1, r1, r3
 80688a8: ebb4 045c    	subs.w	r4, r4, r12, lsr #1
 80688ac: bfc2         	ittt	gt
 80688ae: ebd4 050c    	rsbsgt	r5, r4, r12
 80688b2: ea41 5104    	orrgt.w	r1, r1, r4, lsl #20
 80688b6: bd70         	popgt	{r4, r5, r6, pc}
 80688b8: f441 1180    	orr	r1, r1, #0x100000
 80688bc: f04f 0e00    	mov.w	lr, #0x0
 80688c0: 3c01         	subs	r4, #0x1
 80688c2: f300 80ab    	bgt.w	0x8068a1c <__muldf3+0x238> @ imm = #0x156
 80688c6: f114 0f36    	cmn.w	r4, #0x36
 80688ca: bfde         	ittt	le
 80688cc: 2000         	movle	r0, #0x0
 80688ce: f001 4100    	andle	r1, r1, #0x80000000
 80688d2: bd70         	pople	{r4, r5, r6, pc}
 80688d4: f1c4 0400    	rsb.w	r4, r4, #0x0
 80688d8: 3c20         	subs	r4, #0x20
 80688da: da35         	bge	0x8068948 <__muldf3+0x164> @ imm = #0x6a
 80688dc: 340c         	adds	r4, #0xc
 80688de: dc1b         	bgt	0x8068918 <__muldf3+0x134> @ imm = #0x36
 80688e0: f104 0414    	add.w	r4, r4, #0x14
 80688e4: f1c4 0520    	rsb.w	r5, r4, #0x20
 80688e8: fa00 f305    	lsl.w	r3, r0, r5
 80688ec: fa20 f004    	lsr.w	r0, r0, r4
 80688f0: fa01 f205    	lsl.w	r2, r1, r5
 80688f4: ea40 0002    	orr.w	r0, r0, r2
 80688f8: f001 4200    	and	r2, r1, #0x80000000
 80688fc: f021 4100    	bic	r1, r1, #0x80000000
 8068900: eb10 70d3    	adds.w	r0, r0, r3, lsr #31
 8068904: fa21 f604    	lsr.w	r6, r1, r4
 8068908: eb42 0106    	adc.w	r1, r2, r6
 806890c: ea5e 0e43    	orrs.w	lr, lr, r3, lsl #1
 8068910: bf08         	it	eq
 8068912: ea20 70d3    	biceq.w	r0, r0, r3, lsr #31
 8068916: bd70         	pop	{r4, r5, r6, pc}
 8068918: f1c4 040c    	rsb.w	r4, r4, #0xc
 806891c: f1c4 0520    	rsb.w	r5, r4, #0x20
 8068920: fa00 f304    	lsl.w	r3, r0, r4
 8068924: fa20 f005    	lsr.w	r0, r0, r5
 8068928: fa01 f204    	lsl.w	r2, r1, r4
 806892c: ea40 0002    	orr.w	r0, r0, r2
 8068930: f001 4100    	and	r1, r1, #0x80000000
 8068934: eb10 70d3    	adds.w	r0, r0, r3, lsr #31
 8068938: f141 0100    	adc	r1, r1, #0x0
 806893c: ea5e 0e43    	orrs.w	lr, lr, r3, lsl #1
 8068940: bf08         	it	eq
 8068942: ea20 70d3    	biceq.w	r0, r0, r3, lsr #31
 8068946: bd70         	pop	{r4, r5, r6, pc}
 8068948: f1c4 0520    	rsb.w	r5, r4, #0x20
 806894c: fa00 f205    	lsl.w	r2, r0, r5
 8068950: ea4e 0e02    	orr.w	lr, lr, r2
 8068954: fa20 f304    	lsr.w	r3, r0, r4
 8068958: fa01 f205    	lsl.w	r2, r1, r5
 806895c: ea43 0302    	orr.w	r3, r3, r2
 8068960: fa21 f004    	lsr.w	r0, r1, r4
 8068964: f001 4100    	and	r1, r1, #0x80000000
 8068968: fa21 f204    	lsr.w	r2, r1, r4
 806896c: ea20 0002    	bic.w	r0, r0, r2
 8068970: eb00 70d3    	add.w	r0, r0, r3, lsr #31
 8068974: ea5e 0e43    	orrs.w	lr, lr, r3, lsl #1
 8068978: bf08         	it	eq
 806897a: ea20 70d3    	biceq.w	r0, r0, r3, lsr #31
 806897e: bd70         	pop	{r4, r5, r6, pc}
 8068980: f094 0f00    	teq.w	r4, #0x0
 8068984: d10f         	bne	0x80689a6 <__muldf3+0x1c2> @ imm = #0x1e
 8068986: f001 4600    	and	r6, r1, #0x80000000
 806898a: 0040         	lsls	r0, r0, #0x1
 806898c: eb41 0101    	adc.w	r1, r1, r1
 8068990: f411 1f80    	tst.w	r1, #0x100000
 8068994: bf08         	it	eq
 8068996: 3c01         	subeq	r4, #0x1
 8068998: d0f7         	beq	0x806898a <__muldf3+0x1a6> @ imm = #-0x12
 806899a: ea41 0106    	orr.w	r1, r1, r6
 806899e: f095 0f00    	teq.w	r5, #0x0
 80689a2: bf18         	it	ne
 80689a4: 4770         	bxne	lr
 80689a6: f003 4600    	and	r6, r3, #0x80000000
 80689aa: 0052         	lsls	r2, r2, #0x1
 80689ac: eb43 0303    	adc.w	r3, r3, r3
 80689b0: f413 1f80    	tst.w	r3, #0x100000
 80689b4: bf08         	it	eq
 80689b6: 3d01         	subeq	r5, #0x1
 80689b8: d0f7         	beq	0x80689aa <__muldf3+0x1c6> @ imm = #-0x12
 80689ba: ea43 0306    	orr.w	r3, r3, r6
 80689be: 4770         	bx	lr
 80689c0: ea94 0f0c    	teq.w	r4, r12
 80689c4: ea0c 5513    	and.w	r5, r12, r3, lsr #20
 80689c8: bf18         	it	ne
 80689ca: ea95 0f0c    	teqne.w	r5, r12
 80689ce: d00c         	beq	0x80689ea <__muldf3+0x206> @ imm = #0x18
 80689d0: ea50 0641    	orrs.w	r6, r0, r1, lsl #1
 80689d4: bf18         	it	ne
 80689d6: ea52 0643    	orrsne.w	r6, r2, r3, lsl #1
 80689da: d1d1         	bne	0x8068980 <__muldf3+0x19c> @ imm = #-0x5e
 80689dc: ea81 0103    	eor.w	r1, r1, r3
 80689e0: f001 4100    	and	r1, r1, #0x80000000
 80689e4: f04f 0000    	mov.w	r0, #0x0
 80689e8: bd70         	pop	{r4, r5, r6, pc}
 80689ea: ea50 0641    	orrs.w	r6, r0, r1, lsl #1
 80689ee: bf06         	itte	eq
 80689f0: 4610         	moveq	r0, r2
 80689f2: 4619         	moveq	r1, r3
 80689f4: ea52 0643    	orrsne.w	r6, r2, r3, lsl #1
 80689f8: d019         	beq	0x8068a2e <__muldf3+0x24a> @ imm = #0x32
 80689fa: ea94 0f0c    	teq.w	r4, r12
 80689fe: d102         	bne	0x8068a06 <__muldf3+0x222> @ imm = #0x4
 8068a00: ea50 3601    	orrs.w	r6, r0, r1, lsl #12
 8068a04: d113         	bne	0x8068a2e <__muldf3+0x24a> @ imm = #0x26
 8068a06: ea95 0f0c    	teq.w	r5, r12
 8068a0a: d105         	bne	0x8068a18 <__muldf3+0x234> @ imm = #0xa
 8068a0c: ea52 3603    	orrs.w	r6, r2, r3, lsl #12
 8068a10: bf1c         	itt	ne
 8068a12: 4610         	movne	r0, r2
 8068a14: 4619         	movne	r1, r3
 8068a16: d10a         	bne	0x8068a2e <__muldf3+0x24a> @ imm = #0x14
 8068a18: ea81 0103    	eor.w	r1, r1, r3
 8068a1c: f001 4100    	and	r1, r1, #0x80000000
 8068a20: f041 41fe    	orr	r1, r1, #0x7f000000
 8068a24: f441 0170    	orr	r1, r1, #0xf00000
 8068a28: f04f 0000    	mov.w	r0, #0x0
 8068a2c: bd70         	pop	{r4, r5, r6, pc}
 8068a2e: f041 41fe    	orr	r1, r1, #0x7f000000
 8068a32: f441 0178    	orr	r1, r1, #0xf80000
 8068a36: bd70         	pop	{r4, r5, r6, pc}

08068a38 <__divdf3>:
 8068a38: b570         	push	{r4, r5, r6, lr}
 8068a3a: f04f 0cff    	mov.w	r12, #0xff
 8068a3e: f44c 6ce0    	orr	r12, r12, #0x700
 8068a42: ea1c 5411    	ands.w	r4, r12, r1, lsr #20
 8068a46: bf1d         	ittte	ne
 8068a48: ea1c 5513    	andsne.w	r5, r12, r3, lsr #20
 8068a4c: ea94 0f0c    	teqne.w	r4, r12
 8068a50: ea95 0f0c    	teqne.w	r5, r12
 8068a54: f000 f8a7    	bleq	0x8068ba6 <__divdf3+0x16e> @ imm = #0x14e
 8068a58: eba4 0405    	sub.w	r4, r4, r5
 8068a5c: ea81 0e03    	eor.w	lr, r1, r3
 8068a60: ea52 3503    	orrs.w	r5, r2, r3, lsl #12
 8068a64: ea4f 3101    	lsl.w	r1, r1, #0xc
 8068a68: f000 8088    	beq.w	0x8068b7c <__divdf3+0x144> @ imm = #0x110
 8068a6c: ea4f 3303    	lsl.w	r3, r3, #0xc
 8068a70: f04f 5580    	mov.w	r5, #0x10000000
 8068a74: ea45 1313    	orr.w	r3, r5, r3, lsr #4
 8068a78: ea43 6312    	orr.w	r3, r3, r2, lsr #24
 8068a7c: ea4f 2202    	lsl.w	r2, r2, #0x8
 8068a80: ea45 1511    	orr.w	r5, r5, r1, lsr #4
 8068a84: ea45 6510    	orr.w	r5, r5, r0, lsr #24
 8068a88: ea4f 2600    	lsl.w	r6, r0, #0x8
 8068a8c: f00e 4100    	and	r1, lr, #0x80000000
 8068a90: 429d         	cmp	r5, r3
 8068a92: bf08         	it	eq
 8068a94: 4296         	cmpeq	r6, r2
 8068a96: f144 04fd    	adc	r4, r4, #0xfd
 8068a9a: f504 7440    	add.w	r4, r4, #0x300
 8068a9e: d202         	bhs	0x8068aa6 <__divdf3+0x6e> @ imm = #0x4
 8068aa0: 085b         	lsrs	r3, r3, #0x1
 8068aa2: ea4f 0232    	rrx	r2, r2
 8068aa6: 1ab6         	subs	r6, r6, r2
 8068aa8: eb65 0503    	sbc.w	r5, r5, r3
 8068aac: 085b         	lsrs	r3, r3, #0x1
 8068aae: ea4f 0232    	rrx	r2, r2
 8068ab2: f44f 1080    	mov.w	r0, #0x100000
 8068ab6: f44f 2c00    	mov.w	r12, #0x80000
 8068aba: ebb6 0e02    	subs.w	lr, r6, r2
 8068abe: eb75 0e03    	sbcs.w	lr, r5, r3
 8068ac2: bf22         	ittt	hs
 8068ac4: 1ab6         	subhs	r6, r6, r2
 8068ac6: 4675         	movhs	r5, lr
 8068ac8: ea40 000c    	orrhs.w	r0, r0, r12
 8068acc: 085b         	lsrs	r3, r3, #0x1
 8068ace: ea4f 0232    	rrx	r2, r2
 8068ad2: ebb6 0e02    	subs.w	lr, r6, r2
 8068ad6: eb75 0e03    	sbcs.w	lr, r5, r3
 8068ada: bf22         	ittt	hs
 8068adc: 1ab6         	subhs	r6, r6, r2
 8068ade: 4675         	movhs	r5, lr
 8068ae0: ea40 005c    	orrhs.w	r0, r0, r12, lsr #1
 8068ae4: 085b         	lsrs	r3, r3, #0x1
 8068ae6: ea4f 0232    	rrx	r2, r2
 8068aea: ebb6 0e02    	subs.w	lr, r6, r2
 8068aee: eb75 0e03    	sbcs.w	lr, r5, r3
 8068af2: bf22         	ittt	hs
 8068af4: 1ab6         	subhs	r6, r6, r2
 8068af6: 4675         	movhs	r5, lr
 8068af8: ea40 009c    	orrhs.w	r0, r0, r12, lsr #2
 8068afc: 085b         	lsrs	r3, r3, #0x1
 8068afe: ea4f 0232    	rrx	r2, r2
 8068b02: ebb6 0e02    	subs.w	lr, r6, r2
 8068b06: eb75 0e03    	sbcs.w	lr, r5, r3
 8068b0a: bf22         	ittt	hs
 8068b0c: 1ab6         	subhs	r6, r6, r2
 8068b0e: 4675         	movhs	r5, lr
 8068b10: ea40 00dc    	orrhs.w	r0, r0, r12, lsr #3
 8068b14: ea55 0e06    	orrs.w	lr, r5, r6
 8068b18: d018         	beq	0x8068b4c <__divdf3+0x114> @ imm = #0x30
 8068b1a: ea4f 1505    	lsl.w	r5, r5, #0x4
 8068b1e: ea45 7516    	orr.w	r5, r5, r6, lsr #28
 8068b22: ea4f 1606    	lsl.w	r6, r6, #0x4
 8068b26: ea4f 03c3    	lsl.w	r3, r3, #0x3
 8068b2a: ea43 7352    	orr.w	r3, r3, r2, lsr #29
 8068b2e: ea4f 02c2    	lsl.w	r2, r2, #0x3
 8068b32: ea5f 1c1c    	lsrs.w	r12, r12, #0x4
 8068b36: d1c0         	bne	0x8068aba <__divdf3+0x82> @ imm = #-0x80
 8068b38: f411 1f80    	tst.w	r1, #0x100000
 8068b3c: d10b         	bne	0x8068b56 <__divdf3+0x11e> @ imm = #0x16
 8068b3e: ea41 0100    	orr.w	r1, r1, r0
 8068b42: f04f 0000    	mov.w	r0, #0x0
 8068b46: f04f 4c00    	mov.w	r12, #0x80000000
 8068b4a: e7b6         	b	0x8068aba <__divdf3+0x82> @ imm = #-0x94
 8068b4c: f411 1f80    	tst.w	r1, #0x100000
 8068b50: bf04         	itt	eq
 8068b52: 4301         	orreq	r1, r0
 8068b54: 2000         	moveq	r0, #0x0
 8068b56: f1b4 0cfd    	subs.w	r12, r4, #0xfd
 8068b5a: bf88         	it	hi
 8068b5c: f5bc 6fe0    	cmphi.w	r12, #0x700
 8068b60: f63f aeaf    	bhi.w	0x80688c2 <__muldf3+0xde> @ imm = #-0x2a2
 8068b64: ebb5 0c03    	subs.w	r12, r5, r3
 8068b68: bf04         	itt	eq
 8068b6a: ebb6 0c02    	subseq.w	r12, r6, r2
 8068b6e: ea5f 0c50    	lsrseq.w	r12, r0, #0x1
 8068b72: f150 0000    	adcs	r0, r0, #0x0
 8068b76: eb41 5104    	adc.w	r1, r1, r4, lsl #20
 8068b7a: bd70         	pop	{r4, r5, r6, pc}
 8068b7c: f00e 4e00    	and	lr, lr, #0x80000000
 8068b80: ea4e 3111    	orr.w	r1, lr, r1, lsr #12
 8068b84: eb14 045c    	adds.w	r4, r4, r12, lsr #1
 8068b88: bfc2         	ittt	gt
 8068b8a: ebd4 050c    	rsbsgt	r5, r4, r12
 8068b8e: ea41 5104    	orrgt.w	r1, r1, r4, lsl #20
 8068b92: bd70         	popgt	{r4, r5, r6, pc}
 8068b94: f441 1180    	orr	r1, r1, #0x100000
 8068b98: f04f 0e00    	mov.w	lr, #0x0
 8068b9c: 3c01         	subs	r4, #0x1
 8068b9e: e690         	b	0x80688c2 <__muldf3+0xde> @ imm = #-0x2e0
 8068ba0: ea45 0e06    	orr.w	lr, r5, r6
 8068ba4: e68d         	b	0x80688c2 <__muldf3+0xde> @ imm = #-0x2e6
 8068ba6: ea0c 5513    	and.w	r5, r12, r3, lsr #20
 8068baa: ea94 0f0c    	teq.w	r4, r12
 8068bae: bf08         	it	eq
 8068bb0: ea95 0f0c    	teqeq.w	r5, r12
 8068bb4: f43f af3b    	beq.w	0x8068a2e <__muldf3+0x24a> @ imm = #-0x18a
 8068bb8: ea94 0f0c    	teq.w	r4, r12
 8068bbc: d10a         	bne	0x8068bd4 <__divdf3+0x19c> @ imm = #0x14
 8068bbe: ea50 3401    	orrs.w	r4, r0, r1, lsl #12
 8068bc2: f47f af34    	bne.w	0x8068a2e <__muldf3+0x24a> @ imm = #-0x198
 8068bc6: ea95 0f0c    	teq.w	r5, r12
 8068bca: f47f af25    	bne.w	0x8068a18 <__muldf3+0x234> @ imm = #-0x1b6
 8068bce: 4610         	mov	r0, r2
 8068bd0: 4619         	mov	r1, r3
 8068bd2: e72c         	b	0x8068a2e <__muldf3+0x24a> @ imm = #-0x1a8
 8068bd4: ea95 0f0c    	teq.w	r5, r12
 8068bd8: d106         	bne	0x8068be8 <__divdf3+0x1b0> @ imm = #0xc
 8068bda: ea52 3503    	orrs.w	r5, r2, r3, lsl #12
 8068bde: f43f aefd    	beq.w	0x80689dc <__muldf3+0x1f8> @ imm = #-0x206
 8068be2: 4610         	mov	r0, r2
 8068be4: 4619         	mov	r1, r3
 8068be6: e722         	b	0x8068a2e <__muldf3+0x24a> @ imm = #-0x1bc
 8068be8: ea50 0641    	orrs.w	r6, r0, r1, lsl #1
 8068bec: bf18         	it	ne
 8068bee: ea52 0643    	orrsne.w	r6, r2, r3, lsl #1
 8068bf2: f47f aec5    	bne.w	0x8068980 <__muldf3+0x19c> @ imm = #-0x276
 8068bf6: ea50 0441    	orrs.w	r4, r0, r1, lsl #1
 8068bfa: f47f af0d    	bne.w	0x8068a18 <__muldf3+0x234> @ imm = #-0x1e6
 8068bfe: ea52 0543    	orrs.w	r5, r2, r3, lsl #1
 8068c02: f47f aeeb    	bne.w	0x80689dc <__muldf3+0x1f8> @ imm = #-0x22a
 8068c06: e712         	b	0x8068a2e <__muldf3+0x24a> @ imm = #-0x1dc

08068c08 <__gtdf2>:
 8068c08: f04f 3cff    	mov.w	r12, #0xffffffff
 8068c0c: e006         	b	0x8068c1c <__nedf2+0x4> @ imm = #0xc
 8068c0e: bf00         	nop

08068c10 <__ltdf2>:
 8068c10: f04f 0c01    	mov.w	r12, #0x1
 8068c14: e002         	b	0x8068c1c <__nedf2+0x4> @ imm = #0x4
 8068c16: bf00         	nop

08068c18 <__nedf2>:
 8068c18: f04f 0c01    	mov.w	r12, #0x1
 8068c1c: f84d cd04    	str	r12, [sp, #-4]!
 8068c20: ea4f 0c41    	lsl.w	r12, r1, #0x1
 8068c24: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8068c28: ea4f 0c43    	lsl.w	r12, r3, #0x1
 8068c2c: bf18         	it	ne
 8068c2e: ea7f 5c6c    	mvnsne.w	r12, r12, asr #21
 8068c32: d01b         	beq	0x8068c6c <__nedf2+0x54> @ imm = #0x36
 8068c34: b001         	add	sp, #0x4
 8068c36: ea50 0c41    	orrs.w	r12, r0, r1, lsl #1
 8068c3a: bf0c         	ite	eq
 8068c3c: ea52 0c43    	orrseq.w	r12, r2, r3, lsl #1
 8068c40: ea91 0f03    	teqne.w	r1, r3
 8068c44: bf02         	ittt	eq
 8068c46: ea90 0f02    	teqeq.w	r0, r2
 8068c4a: 2000         	moveq	r0, #0x0
 8068c4c: 4770         	bxeq	lr
 8068c4e: f110 0f00    	cmn.w	r0, #0x0
 8068c52: ea91 0f03    	teq.w	r1, r3
 8068c56: bf58         	it	pl
 8068c58: 4299         	cmppl	r1, r3
 8068c5a: bf08         	it	eq
 8068c5c: 4290         	cmpeq	r0, r2
 8068c5e: bf2c         	ite	hs
 8068c60: 17d8         	asrhs	r0, r3, #0x1f
 8068c62: ea6f 70e3    	mvnlo.w	r0, r3, asr #31
 8068c66: f040 0001    	orr	r0, r0, #0x1
 8068c6a: 4770         	bx	lr
 8068c6c: ea4f 0c41    	lsl.w	r12, r1, #0x1
 8068c70: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8068c74: d102         	bne	0x8068c7c <__nedf2+0x64> @ imm = #0x4
 8068c76: ea50 3c01    	orrs.w	r12, r0, r1, lsl #12
 8068c7a: d107         	bne	0x8068c8c <__nedf2+0x74> @ imm = #0xe
 8068c7c: ea4f 0c43    	lsl.w	r12, r3, #0x1
 8068c80: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8068c84: d1d6         	bne	0x8068c34 <__nedf2+0x1c> @ imm = #-0x54
 8068c86: ea52 3c03    	orrs.w	r12, r2, r3, lsl #12
 8068c8a: d0d3         	beq	0x8068c34 <__nedf2+0x1c> @ imm = #-0x5a
 8068c8c: f85d 0b04    	ldr	r0, [sp], #4
 8068c90: 4770         	bx	lr
 8068c92: bf00         	nop

08068c94 <__aeabi_cdrcmple>:
 8068c94: 4684         	mov	r12, r0
 8068c96: 4610         	mov	r0, r2
 8068c98: 4662         	mov	r2, r12
 8068c9a: 468c         	mov	r12, r1
 8068c9c: 4619         	mov	r1, r3
 8068c9e: 4663         	mov	r3, r12
 8068ca0: e000         	b	0x8068ca4 <__aeabi_cdcmple> @ imm = #0x0
 8068ca2: bf00         	nop

08068ca4 <__aeabi_cdcmple>:
 8068ca4: b501         	push	{r0, lr}
 8068ca6: f7ff ffb7    	bl	0x8068c18 <__nedf2>     @ imm = #-0x92
 8068caa: 2800         	cmp	r0, #0x0
 8068cac: bf48         	it	mi
 8068cae: f110 0f00    	cmnmi.w	r0, #0x0
 8068cb2: bd01         	pop	{r0, pc}

08068cb4 <__aeabi_dcmpeq>:
 8068cb4: f84d ed08    	str	lr, [sp, #-8]!
 8068cb8: f7ff fff4    	bl	0x8068ca4 <__aeabi_cdcmple> @ imm = #-0x18
 8068cbc: bf0c         	ite	eq
 8068cbe: 2001         	moveq	r0, #0x1
 8068cc0: 2000         	movne	r0, #0x0
 8068cc2: f85d fb08    	ldr	pc, [sp], #8
 8068cc6: bf00         	nop

08068cc8 <__aeabi_dcmplt>:
 8068cc8: f84d ed08    	str	lr, [sp, #-8]!
 8068ccc: f7ff ffea    	bl	0x8068ca4 <__aeabi_cdcmple> @ imm = #-0x2c
 8068cd0: bf34         	ite	lo
 8068cd2: 2001         	movlo	r0, #0x1
 8068cd4: 2000         	movhs	r0, #0x0
 8068cd6: f85d fb08    	ldr	pc, [sp], #8
 8068cda: bf00         	nop

08068cdc <__aeabi_dcmple>:
 8068cdc: f84d ed08    	str	lr, [sp, #-8]!
 8068ce0: f7ff ffe0    	bl	0x8068ca4 <__aeabi_cdcmple> @ imm = #-0x40
 8068ce4: bf94         	ite	ls
 8068ce6: 2001         	movls	r0, #0x1
 8068ce8: 2000         	movhi	r0, #0x0
 8068cea: f85d fb08    	ldr	pc, [sp], #8
 8068cee: bf00         	nop

08068cf0 <__aeabi_dcmpge>:
 8068cf0: f84d ed08    	str	lr, [sp, #-8]!
 8068cf4: f7ff ffce    	bl	0x8068c94 <__aeabi_cdrcmple> @ imm = #-0x64
 8068cf8: bf94         	ite	ls
 8068cfa: 2001         	movls	r0, #0x1
 8068cfc: 2000         	movhi	r0, #0x0
 8068cfe: f85d fb08    	ldr	pc, [sp], #8
 8068d02: bf00         	nop

08068d04 <__aeabi_dcmpgt>:
 8068d04: f84d ed08    	str	lr, [sp, #-8]!
 8068d08: f7ff ffc4    	bl	0x8068c94 <__aeabi_cdrcmple> @ imm = #-0x78
 8068d0c: bf34         	ite	lo
 8068d0e: 2001         	movlo	r0, #0x1
 8068d10: 2000         	movhs	r0, #0x0
 8068d12: f85d fb08    	ldr	pc, [sp], #8
 8068d16: bf00         	nop

08068d18 <__unorddf2>:
 8068d18: ea4f 0c41    	lsl.w	r12, r1, #0x1
 8068d1c: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8068d20: d102         	bne	0x8068d28 <__unorddf2+0x10> @ imm = #0x4
 8068d22: ea50 3c01    	orrs.w	r12, r0, r1, lsl #12
 8068d26: d10a         	bne	0x8068d3e <__unorddf2+0x26> @ imm = #0x14
 8068d28: ea4f 0c43    	lsl.w	r12, r3, #0x1
 8068d2c: ea7f 5c6c    	mvns.w	r12, r12, asr #21
 8068d30: d102         	bne	0x8068d38 <__unorddf2+0x20> @ imm = #0x4
 8068d32: ea52 3c03    	orrs.w	r12, r2, r3, lsl #12
 8068d36: d102         	bne	0x8068d3e <__unorddf2+0x26> @ imm = #0x4
 8068d38: f04f 0000    	mov.w	r0, #0x0
 8068d3c: 4770         	bx	lr
 8068d3e: f04f 0001    	mov.w	r0, #0x1
 8068d42: 4770         	bx	lr

08068d44 <__fixdfsi>:
 8068d44: ea4f 0241    	lsl.w	r2, r1, #0x1
 8068d48: f512 1200    	adds.w	r2, r2, #0x200000
 8068d4c: d215         	bhs	0x8068d7a <__fixdfsi+0x36> @ imm = #0x2a
 8068d4e: d511         	bpl	0x8068d74 <__fixdfsi+0x30> @ imm = #0x22
 8068d50: f46f 7378    	mvn	r3, #0x3e0
 8068d54: ebb3 5262    	subs.w	r2, r3, r2, asr #21
 8068d58: d912         	bls	0x8068d80 <__fixdfsi+0x3c> @ imm = #0x24
 8068d5a: ea4f 23c1    	lsl.w	r3, r1, #0xb
 8068d5e: f043 4300    	orr	r3, r3, #0x80000000
 8068d62: ea43 5350    	orr.w	r3, r3, r0, lsr #21
 8068d66: f011 4f00    	tst.w	r1, #0x80000000
 8068d6a: fa23 f002    	lsr.w	r0, r3, r2
 8068d6e: bf18         	it	ne
 8068d70: 4240         	rsbne	r0, r0, #0
 8068d72: 4770         	bx	lr
 8068d74: f04f 0000    	mov.w	r0, #0x0
 8068d78: 4770         	bx	lr
 8068d7a: ea50 3001    	orrs.w	r0, r0, r1, lsl #12
 8068d7e: d105         	bne	0x8068d8c <__fixdfsi+0x48> @ imm = #0xa
 8068d80: f011 4000    	ands	r0, r1, #0x80000000
 8068d84: bf08         	it	eq
 8068d86: f06f 4000    	mvneq	r0, #0x80000000
 8068d8a: 4770         	bx	lr
 8068d8c: f04f 0000    	mov.w	r0, #0x0
 8068d90: 4770         	bx	lr
 8068d92: bf00         	nop

08068d94 <__aeabi_uldivmod>:
 8068d94: b953         	cbnz	r3, 0x8068dac <__aeabi_uldivmod+0x18> @ imm = #0x14
 8068d96: b94a         	cbnz	r2, 0x8068dac <__aeabi_uldivmod+0x18> @ imm = #0x12
 8068d98: 2900         	cmp	r1, #0x0
 8068d9a: bf08         	it	eq
 8068d9c: 2800         	cmpeq	r0, #0x0
 8068d9e: bf1c         	itt	ne
 8068da0: f04f 31ff    	movne.w	r1, #0xffffffff
 8068da4: f04f 30ff    	movne.w	r0, #0xffffffff
 8068da8: f001 b932    	b.w	0x806a010 <__aeabi_ldiv0> @ imm = #0x1264
 8068dac: f1ad 0c08    	sub.w	r12, sp, #0x8
 8068db0: e96d ce04    	strd	r12, lr, [sp, #-16]!
 8068db4: f000 f806    	bl	0x8068dc4 <__udivmoddi4> @ imm = #0xc
 8068db8: f8dd e004    	ldr.w	lr, [sp, #0x4]
 8068dbc: e9dd 2302    	ldrd	r2, r3, [sp, #8]
 8068dc0: b004         	add	sp, #0x10
 8068dc2: 4770         	bx	lr

08068dc4 <__udivmoddi4>:
 8068dc4: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8068dc8: 9e09         	ldr	r6, [sp, #0x24]
 8068dca: 460d         	mov	r5, r1
 8068dcc: 4604         	mov	r4, r0
 8068dce: 460f         	mov	r7, r1
 8068dd0: 2b00         	cmp	r3, #0x0
 8068dd2: d147         	bne	0x8068e64 <__udivmoddi4+0xa0> @ imm = #0x8e
 8068dd4: 428a         	cmp	r2, r1
 8068dd6: 4694         	mov	r12, r2
 8068dd8: d95f         	bls	0x8068e9a <__udivmoddi4+0xd6> @ imm = #0xbe
 8068dda: fab2 f382    	clz	r3, r2
 8068dde: b143         	cbz	r3, 0x8068df2 <__udivmoddi4+0x2e> @ imm = #0x10
 8068de0: f1c3 0120    	rsb.w	r1, r3, #0x20
 8068de4: 409f         	lsls	r7, r3
 8068de6: fa02 fc03    	lsl.w	r12, r2, r3
 8068dea: 409c         	lsls	r4, r3
 8068dec: fa20 f101    	lsr.w	r1, r0, r1
 8068df0: 430f         	orrs	r7, r1
 8068df2: ea4f 451c    	lsr.w	r5, r12, #0x10
 8068df6: fa1f fe8c    	uxth.w	lr, r12
 8068dfa: 0c22         	lsrs	r2, r4, #0x10
 8068dfc: fbb7 f1f5    	udiv	r1, r7, r5
 8068e00: fb05 7711    	mls	r7, r5, r1, r7
 8068e04: fb01 f00e    	mul	r0, r1, lr
 8068e08: ea42 4207    	orr.w	r2, r2, r7, lsl #16
 8068e0c: 4290         	cmp	r0, r2
 8068e0e: d908         	bls	0x8068e22 <__udivmoddi4+0x5e> @ imm = #0x10
 8068e10: eb1c 0202    	adds.w	r2, r12, r2
 8068e14: f101 37ff    	add.w	r7, r1, #0xffffffff
 8068e18: d202         	bhs	0x8068e20 <__udivmoddi4+0x5c> @ imm = #0x4
 8068e1a: 4290         	cmp	r0, r2
 8068e1c: f200 8134    	bhi.w	0x8069088 <__udivmoddi4+0x2c4> @ imm = #0x268
 8068e20: 4639         	mov	r1, r7
 8068e22: 1a12         	subs	r2, r2, r0
 8068e24: b2a4         	uxth	r4, r4
 8068e26: fbb2 f0f5    	udiv	r0, r2, r5
 8068e2a: fb05 2210    	mls	r2, r5, r0, r2
 8068e2e: fb00 fe0e    	mul	lr, r0, lr
 8068e32: ea44 4402    	orr.w	r4, r4, r2, lsl #16
 8068e36: 45a6         	cmp	lr, r4
 8068e38: d908         	bls	0x8068e4c <__udivmoddi4+0x88> @ imm = #0x10
 8068e3a: eb1c 0404    	adds.w	r4, r12, r4
 8068e3e: f100 32ff    	add.w	r2, r0, #0xffffffff
 8068e42: d202         	bhs	0x8068e4a <__udivmoddi4+0x86> @ imm = #0x4
 8068e44: 45a6         	cmp	lr, r4
 8068e46: f200 8119    	bhi.w	0x806907c <__udivmoddi4+0x2b8> @ imm = #0x232
 8068e4a: 4610         	mov	r0, r2
 8068e4c: ea40 4001    	orr.w	r0, r0, r1, lsl #16
 8068e50: eba4 040e    	sub.w	r4, r4, lr
 8068e54: 2100         	movs	r1, #0x0
 8068e56: b11e         	cbz	r6, 0x8068e60 <__udivmoddi4+0x9c> @ imm = #0x6
 8068e58: 40dc         	lsrs	r4, r3
 8068e5a: 2300         	movs	r3, #0x0
 8068e5c: e9c6 4300    	strd	r4, r3, [r6]
 8068e60: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8068e64: 428b         	cmp	r3, r1
 8068e66: d908         	bls	0x8068e7a <__udivmoddi4+0xb6> @ imm = #0x10
 8068e68: 2e00         	cmp	r6, #0x0
 8068e6a: f000 80fb    	beq.w	0x8069064 <__udivmoddi4+0x2a0> @ imm = #0x1f6
 8068e6e: 2100         	movs	r1, #0x0
 8068e70: e9c6 0500    	strd	r0, r5, [r6]
 8068e74: 4608         	mov	r0, r1
 8068e76: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8068e7a: fab3 f183    	clz	r1, r3
 8068e7e: 2900         	cmp	r1, #0x0
 8068e80: d14b         	bne	0x8068f1a <__udivmoddi4+0x156> @ imm = #0x96
 8068e82: 42ab         	cmp	r3, r5
 8068e84: f0c0 80f1    	blo.w	0x806906a <__udivmoddi4+0x2a6> @ imm = #0x1e2
 8068e88: 4282         	cmp	r2, r0
 8068e8a: f240 80ee    	bls.w	0x806906a <__udivmoddi4+0x2a6> @ imm = #0x1dc
 8068e8e: 4608         	mov	r0, r1
 8068e90: 2e00         	cmp	r6, #0x0
 8068e92: d0e5         	beq	0x8068e60 <__udivmoddi4+0x9c> @ imm = #-0x36
 8068e94: e9c6 4700    	strd	r4, r7, [r6]
 8068e98: e7e2         	b	0x8068e60 <__udivmoddi4+0x9c> @ imm = #-0x3c
 8068e9a: b902         	cbnz	r2, 0x8068e9e <__udivmoddi4+0xda> @ imm = #0x0
 8068e9c: deff         	udf	#0xff
 8068e9e: fab2 f382    	clz	r3, r2
 8068ea2: 2b00         	cmp	r3, #0x0
 8068ea4: f040 809d    	bne.w	0x8068fe2 <__udivmoddi4+0x21e> @ imm = #0x13a
 8068ea8: 1a8d         	subs	r5, r1, r2
 8068eaa: ea4f 4e12    	lsr.w	lr, r2, #0x10
 8068eae: b297         	uxth	r7, r2
 8068eb0: 2101         	movs	r1, #0x1
 8068eb2: fbb5 f2fe    	udiv	r2, r5, lr
 8068eb6: fb0e 5012    	mls	r0, lr, r2, r5
 8068eba: 0c25         	lsrs	r5, r4, #0x10
 8068ebc: ea45 4500    	orr.w	r5, r5, r0, lsl #16
 8068ec0: fb07 f002    	mul	r0, r7, r2
 8068ec4: 42a8         	cmp	r0, r5
 8068ec6: d90f         	bls	0x8068ee8 <__udivmoddi4+0x124> @ imm = #0x1e
 8068ec8: eb1c 0505    	adds.w	r5, r12, r5
 8068ecc: f102 38ff    	add.w	r8, r2, #0xffffffff
 8068ed0: bf2c         	ite	hs
 8068ed2: f04f 0901    	movhs.w	r9, #0x1
 8068ed6: f04f 0900    	movlo.w	r9, #0x0
 8068eda: 42a8         	cmp	r0, r5
 8068edc: d903         	bls	0x8068ee6 <__udivmoddi4+0x122> @ imm = #0x6
 8068ede: f1b9 0f00    	cmp.w	r9, #0x0
 8068ee2: f000 80ce    	beq.w	0x8069082 <__udivmoddi4+0x2be> @ imm = #0x19c
 8068ee6: 4642         	mov	r2, r8
 8068ee8: 1a2d         	subs	r5, r5, r0
 8068eea: b2a4         	uxth	r4, r4
 8068eec: fbb5 f0fe    	udiv	r0, r5, lr
 8068ef0: fb0e 5510    	mls	r5, lr, r0, r5
 8068ef4: fb00 f707    	mul	r7, r0, r7
 8068ef8: ea44 4405    	orr.w	r4, r4, r5, lsl #16
 8068efc: 42a7         	cmp	r7, r4
 8068efe: d908         	bls	0x8068f12 <__udivmoddi4+0x14e> @ imm = #0x10
 8068f00: eb1c 0404    	adds.w	r4, r12, r4
 8068f04: f100 35ff    	add.w	r5, r0, #0xffffffff
 8068f08: d202         	bhs	0x8068f10 <__udivmoddi4+0x14c> @ imm = #0x4
 8068f0a: 42a7         	cmp	r7, r4
 8068f0c: f200 80b3    	bhi.w	0x8069076 <__udivmoddi4+0x2b2> @ imm = #0x166
 8068f10: 4628         	mov	r0, r5
 8068f12: 1be4         	subs	r4, r4, r7
 8068f14: ea40 4002    	orr.w	r0, r0, r2, lsl #16
 8068f18: e79d         	b	0x8068e56 <__udivmoddi4+0x92> @ imm = #-0xc6
 8068f1a: f1c1 0720    	rsb.w	r7, r1, #0x20
 8068f1e: 408b         	lsls	r3, r1
 8068f20: fa05 f401    	lsl.w	r4, r5, r1
 8068f24: fa22 fc07    	lsr.w	r12, r2, r7
 8068f28: 40fd         	lsrs	r5, r7
 8068f2a: 408a         	lsls	r2, r1
 8068f2c: ea4c 0c03    	orr.w	r12, r12, r3
 8068f30: fa20 f307    	lsr.w	r3, r0, r7
 8068f34: ea4f 491c    	lsr.w	r9, r12, #0x10
 8068f38: 431c         	orrs	r4, r3
 8068f3a: fa1f fe8c    	uxth.w	lr, r12
 8068f3e: fa00 f301    	lsl.w	r3, r0, r1
 8068f42: 0c20         	lsrs	r0, r4, #0x10
 8068f44: fbb5 f8f9    	udiv	r8, r5, r9
 8068f48: fb09 5518    	mls	r5, r9, r8, r5
 8068f4c: ea40 4505    	orr.w	r5, r0, r5, lsl #16
 8068f50: fb08 f00e    	mul	r0, r8, lr
 8068f54: 42a8         	cmp	r0, r5
 8068f56: d90f         	bls	0x8068f78 <__udivmoddi4+0x1b4> @ imm = #0x1e
 8068f58: eb1c 0505    	adds.w	r5, r12, r5
 8068f5c: f108 3aff    	add.w	r10, r8, #0xffffffff
 8068f60: bf2c         	ite	hs
 8068f62: f04f 0b01    	movhs.w	r11, #0x1
 8068f66: f04f 0b00    	movlo.w	r11, #0x0
 8068f6a: 42a8         	cmp	r0, r5
 8068f6c: d903         	bls	0x8068f76 <__udivmoddi4+0x1b2> @ imm = #0x6
 8068f6e: f1bb 0f00    	cmp.w	r11, #0x0
 8068f72: f000 808c    	beq.w	0x806908e <__udivmoddi4+0x2ca> @ imm = #0x118
 8068f76: 46d0         	mov	r8, r10
 8068f78: 1a2d         	subs	r5, r5, r0
 8068f7a: b2a4         	uxth	r4, r4
 8068f7c: fbb5 f0f9    	udiv	r0, r5, r9
 8068f80: fb09 5510    	mls	r5, r9, r0, r5
 8068f84: fb00 fe0e    	mul	lr, r0, lr
 8068f88: ea44 4505    	orr.w	r5, r4, r5, lsl #16
 8068f8c: 45ae         	cmp	lr, r5
 8068f8e: d907         	bls	0x8068fa0 <__udivmoddi4+0x1dc> @ imm = #0xe
 8068f90: eb1c 0505    	adds.w	r5, r12, r5
 8068f94: f100 34ff    	add.w	r4, r0, #0xffffffff
 8068f98: d201         	bhs	0x8068f9e <__udivmoddi4+0x1da> @ imm = #0x2
 8068f9a: 45ae         	cmp	lr, r5
 8068f9c: d87e         	bhi	0x806909c <__udivmoddi4+0x2d8> @ imm = #0xfc
 8068f9e: 4620         	mov	r0, r4
 8068fa0: ea40 4008    	orr.w	r0, r0, r8, lsl #16
 8068fa4: eba5 050e    	sub.w	r5, r5, lr
 8068fa8: fba0 9802    	umull	r9, r8, r0, r2
 8068fac: 4545         	cmp	r5, r8
 8068fae: 464c         	mov	r4, r9
 8068fb0: 46c6         	mov	lr, r8
 8068fb2: d302         	blo	0x8068fba <__udivmoddi4+0x1f6> @ imm = #0x4
 8068fb4: d106         	bne	0x8068fc4 <__udivmoddi4+0x200> @ imm = #0xc
 8068fb6: 454b         	cmp	r3, r9
 8068fb8: d204         	bhs	0x8068fc4 <__udivmoddi4+0x200> @ imm = #0x8
 8068fba: 3801         	subs	r0, #0x1
 8068fbc: ebb9 0402    	subs.w	r4, r9, r2
 8068fc0: eb68 0e0c    	sbc.w	lr, r8, r12
 8068fc4: 2e00         	cmp	r6, #0x0
 8068fc6: d06f         	beq	0x80690a8 <__udivmoddi4+0x2e4> @ imm = #0xde
 8068fc8: 1b1a         	subs	r2, r3, r4
 8068fca: eb65 050e    	sbc.w	r5, r5, lr
 8068fce: fa22 f301    	lsr.w	r3, r2, r1
 8068fd2: fa05 f707    	lsl.w	r7, r5, r7
 8068fd6: 40cd         	lsrs	r5, r1
 8068fd8: 2100         	movs	r1, #0x0
 8068fda: 431f         	orrs	r7, r3
 8068fdc: e9c6 7500    	strd	r7, r5, [r6]
 8068fe0: e73e         	b	0x8068e60 <__udivmoddi4+0x9c> @ imm = #-0x184
 8068fe2: fa02 fc03    	lsl.w	r12, r2, r3
 8068fe6: f1c3 0020    	rsb.w	r0, r3, #0x20
 8068fea: fa01 f203    	lsl.w	r2, r1, r3
 8068fee: ea4f 4e1c    	lsr.w	lr, r12, #0x10
 8068ff2: 40c1         	lsrs	r1, r0
 8068ff4: fa24 f500    	lsr.w	r5, r4, r0
 8068ff8: fa1f f78c    	uxth.w	r7, r12
 8068ffc: 409c         	lsls	r4, r3
 8068ffe: 4315         	orrs	r5, r2
 8069000: fbb1 f0fe    	udiv	r0, r1, lr
 8069004: 0c2a         	lsrs	r2, r5, #0x10
 8069006: fb0e 1110    	mls	r1, lr, r0, r1
 806900a: ea42 4201    	orr.w	r2, r2, r1, lsl #16
 806900e: fb00 f107    	mul	r1, r0, r7
 8069012: 4291         	cmp	r1, r2
 8069014: d90e         	bls	0x8069034 <__udivmoddi4+0x270> @ imm = #0x1c
 8069016: eb1c 0202    	adds.w	r2, r12, r2
 806901a: f100 38ff    	add.w	r8, r0, #0xffffffff
 806901e: bf2c         	ite	hs
 8069020: f04f 0901    	movhs.w	r9, #0x1
 8069024: f04f 0900    	movlo.w	r9, #0x0
 8069028: 4291         	cmp	r1, r2
 806902a: d902         	bls	0x8069032 <__udivmoddi4+0x26e> @ imm = #0x4
 806902c: f1b9 0f00    	cmp.w	r9, #0x0
 8069030: d031         	beq	0x8069096 <__udivmoddi4+0x2d2> @ imm = #0x62
 8069032: 4640         	mov	r0, r8
 8069034: 1a52         	subs	r2, r2, r1
 8069036: b2ad         	uxth	r5, r5
 8069038: fbb2 f1fe    	udiv	r1, r2, lr
 806903c: fb0e 2211    	mls	r2, lr, r1, r2
 8069040: ea45 4502    	orr.w	r5, r5, r2, lsl #16
 8069044: fb01 f207    	mul	r2, r1, r7
 8069048: 42aa         	cmp	r2, r5
 806904a: d907         	bls	0x806905c <__udivmoddi4+0x298> @ imm = #0xe
 806904c: eb1c 0505    	adds.w	r5, r12, r5
 8069050: f101 38ff    	add.w	r8, r1, #0xffffffff
 8069054: d201         	bhs	0x806905a <__udivmoddi4+0x296> @ imm = #0x2
 8069056: 42aa         	cmp	r2, r5
 8069058: d823         	bhi	0x80690a2 <__udivmoddi4+0x2de> @ imm = #0x46
 806905a: 4641         	mov	r1, r8
 806905c: 1aad         	subs	r5, r5, r2
 806905e: ea41 4100    	orr.w	r1, r1, r0, lsl #16
 8069062: e726         	b	0x8068eb2 <__udivmoddi4+0xee> @ imm = #-0x1b4
 8069064: 4631         	mov	r1, r6
 8069066: 4630         	mov	r0, r6
 8069068: e6fa         	b	0x8068e60 <__udivmoddi4+0x9c> @ imm = #-0x20c
 806906a: 1a84         	subs	r4, r0, r2
 806906c: eb65 0303    	sbc.w	r3, r5, r3
 8069070: 2001         	movs	r0, #0x1
 8069072: 461f         	mov	r7, r3
 8069074: e70c         	b	0x8068e90 <__udivmoddi4+0xcc> @ imm = #-0x1e8
 8069076: 4464         	add	r4, r12
 8069078: 3802         	subs	r0, #0x2
 806907a: e74a         	b	0x8068f12 <__udivmoddi4+0x14e> @ imm = #-0x16c
 806907c: 4464         	add	r4, r12
 806907e: 3802         	subs	r0, #0x2
 8069080: e6e4         	b	0x8068e4c <__udivmoddi4+0x88> @ imm = #-0x238
 8069082: 3a02         	subs	r2, #0x2
 8069084: 4465         	add	r5, r12
 8069086: e72f         	b	0x8068ee8 <__udivmoddi4+0x124> @ imm = #-0x1a2
 8069088: 3902         	subs	r1, #0x2
 806908a: 4462         	add	r2, r12
 806908c: e6c9         	b	0x8068e22 <__udivmoddi4+0x5e> @ imm = #-0x26e
 806908e: f1a8 0802    	sub.w	r8, r8, #0x2
 8069092: 4465         	add	r5, r12
 8069094: e770         	b	0x8068f78 <__udivmoddi4+0x1b4> @ imm = #-0x120
 8069096: 3802         	subs	r0, #0x2
 8069098: 4462         	add	r2, r12
 806909a: e7cb         	b	0x8069034 <__udivmoddi4+0x270> @ imm = #-0x6a
 806909c: 3802         	subs	r0, #0x2
 806909e: 4465         	add	r5, r12
 80690a0: e77e         	b	0x8068fa0 <__udivmoddi4+0x1dc> @ imm = #-0x104
 80690a2: 3902         	subs	r1, #0x2
 80690a4: 4465         	add	r5, r12
 80690a6: e7d9         	b	0x806905c <__udivmoddi4+0x298> @ imm = #-0x4e
 80690a8: 4631         	mov	r1, r6
 80690aa: e6d9         	b	0x8068e60 <__udivmoddi4+0x9c> @ imm = #-0x24e

080690ac <selfrel_offset31>:
 80690ac: 6803         	ldr	r3, [r0]
 80690ae: 005a         	lsls	r2, r3, #0x1
 80690b0: bf4c         	ite	mi
 80690b2: f043 4300    	orrmi	r3, r3, #0x80000000
 80690b6: f023 4300    	bicpl	r3, r3, #0x80000000
 80690ba: 4418         	add	r0, r3
 80690bc: 4770         	bx	lr
 80690be: bf00         	nop

080690c0 <search_EIT_table>:
 80690c0: e92d 47f0    	push.w	{r4, r5, r6, r7, r8, r9, r10, lr}
 80690c4: b339         	cbz	r1, 0x8069116 <search_EIT_table+0x56> @ imm = #0x4e
 80690c6: f101 38ff    	add.w	r8, r1, #0xffffffff
 80690ca: 4606         	mov	r6, r0
 80690cc: 4617         	mov	r7, r2
 80690ce: f04f 0900    	mov.w	r9, #0x0
 80690d2: 4645         	mov	r5, r8
 80690d4: eb19 0105    	adds.w	r1, r9, r5
 80690d8: bf48         	it	mi
 80690da: 3101         	addmi	r1, #0x1
 80690dc: 1049         	asrs	r1, r1, #0x1
 80690de: eb06 0ac1    	add.w	r10, r6, r1, lsl #3
 80690e2: 00cc         	lsls	r4, r1, #0x3
 80690e4: 4650         	mov	r0, r10
 80690e6: f7ff ffe1    	bl	0x80690ac <selfrel_offset31> @ imm = #-0x3e
 80690ea: 3408         	adds	r4, #0x8
 80690ec: 4588         	cmp	r8, r1
 80690ee: 4603         	mov	r3, r0
 80690f0: eb06 0004    	add.w	r0, r6, r4
 80690f4: d009         	beq	0x806910a <search_EIT_table+0x4a> @ imm = #0x12
 80690f6: 42bb         	cmp	r3, r7
 80690f8: d809         	bhi	0x806910e <search_EIT_table+0x4e> @ imm = #0x12
 80690fa: f7ff ffd7    	bl	0x80690ac <selfrel_offset31> @ imm = #-0x52
 80690fe: 3801         	subs	r0, #0x1
 8069100: f101 0901    	add.w	r9, r1, #0x1
 8069104: 42b8         	cmp	r0, r7
 8069106: d3e5         	blo	0x80690d4 <search_EIT_table+0x14> @ imm = #-0x36
 8069108: e007         	b	0x806911a <search_EIT_table+0x5a> @ imm = #0xe
 806910a: 42bb         	cmp	r3, r7
 806910c: d905         	bls	0x806911a <search_EIT_table+0x5a> @ imm = #0xa
 806910e: 4589         	cmp	r9, r1
 8069110: f101 35ff    	add.w	r5, r1, #0xffffffff
 8069114: d1de         	bne	0x80690d4 <search_EIT_table+0x14> @ imm = #-0x44
 8069116: f04f 0a00    	mov.w	r10, #0x0
 806911a: 4650         	mov	r0, r10
 806911c: e8bd 87f0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, pc}

08069120 <__gnu_unwind_get_pr_addr>:
 8069120: 2801         	cmp	r0, #0x1
 8069122: d007         	beq	0x8069134 <__gnu_unwind_get_pr_addr+0x14> @ imm = #0xe
 8069124: 2802         	cmp	r0, #0x2
 8069126: d007         	beq	0x8069138 <__gnu_unwind_get_pr_addr+0x18> @ imm = #0xe
 8069128: 2800         	cmp	r0, #0x0
 806912a: 4b04         	ldr	r3, [pc, #0x10]         @ 0x806913c <__gnu_unwind_get_pr_addr+0x1c>
 806912c: bf14         	ite	ne
 806912e: 2000         	movne	r0, #0x0
 8069130: 4618         	moveq	r0, r3
 8069132: 4770         	bx	lr
 8069134: 4802         	ldr	r0, [pc, #0x8]          @ 0x8069140 <__gnu_unwind_get_pr_addr+0x20>
 8069136: 4770         	bx	lr
 8069138: 4802         	ldr	r0, [pc, #0x8]          @ 0x8069144 <__gnu_unwind_get_pr_addr+0x24>
 806913a: 4770         	bx	lr

0806913c <$d>:
 806913c: 31 98 06 08  	.word	0x08069831
 8069140: 35 98 06 08  	.word	0x08069835
 8069144: 39 98 06 08  	.word	0x08069839

08069148 <get_eit_entry>:
 8069148: 4b23         	ldr	r3, [pc, #0x8c]         @ 0x80691d8 <get_eit_entry+0x90>
 806914a: b530         	push	{r4, r5, lr}
 806914c: 4604         	mov	r4, r0
 806914e: b083         	sub	sp, #0xc
 8069150: 1e8d         	subs	r5, r1, #0x2
 8069152: b343         	cbz	r3, 0x80691a6 <get_eit_entry+0x5e> @ imm = #0x50
 8069154: a901         	add	r1, sp, #0x4
 8069156: 4628         	mov	r0, r5
 8069158: f3af 8000    	nop.w
 806915c: b1f0         	cbz	r0, 0x806919c <get_eit_entry+0x54> @ imm = #0x3c
 806915e: 9901         	ldr	r1, [sp, #0x4]
 8069160: 462a         	mov	r2, r5
 8069162: f7ff ffad    	bl	0x80690c0 <search_EIT_table> @ imm = #-0xa6
 8069166: 4601         	mov	r1, r0
 8069168: b1c0         	cbz	r0, 0x806919c <get_eit_entry+0x54> @ imm = #0x30
 806916a: f7ff ff9f    	bl	0x80690ac <selfrel_offset31> @ imm = #-0xc2
 806916e: 684b         	ldr	r3, [r1, #0x4]
 8069170: 64a0         	str	r0, [r4, #0x48]
 8069172: 2b01         	cmp	r3, #0x1
 8069174: d02c         	beq	0x80691d0 <get_eit_entry+0x88> @ imm = #0x58
 8069176: 2b00         	cmp	r3, #0x0
 8069178: f101 0004    	add.w	r0, r1, #0x4
 806917c: db24         	blt	0x80691c8 <get_eit_entry+0x80> @ imm = #0x48
 806917e: f7ff ff95    	bl	0x80690ac <selfrel_offset31> @ imm = #-0xd6
 8069182: 2300         	movs	r3, #0x0
 8069184: e9c4 0313    	strd	r0, r3, [r4, #76]
 8069188: 6803         	ldr	r3, [r0]
 806918a: 2b00         	cmp	r3, #0x0
 806918c: db11         	blt	0x80691b2 <get_eit_entry+0x6a> @ imm = #0x22
 806918e: f7ff ff8d    	bl	0x80690ac <selfrel_offset31> @ imm = #-0xe6
 8069192: 4603         	mov	r3, r0
 8069194: 2000         	movs	r0, #0x0
 8069196: 6123         	str	r3, [r4, #0x10]
 8069198: b003         	add	sp, #0xc
 806919a: bd30         	pop	{r4, r5, pc}
 806919c: 2300         	movs	r3, #0x0
 806919e: 2009         	movs	r0, #0x9
 80691a0: 6123         	str	r3, [r4, #0x10]
 80691a2: b003         	add	sp, #0xc
 80691a4: bd30         	pop	{r4, r5, pc}
 80691a6: 480d         	ldr	r0, [pc, #0x34]         @ 0x80691dc <get_eit_entry+0x94>
 80691a8: 490d         	ldr	r1, [pc, #0x34]         @ 0x80691e0 <get_eit_entry+0x98>
 80691aa: 1a09         	subs	r1, r1, r0
 80691ac: 10c9         	asrs	r1, r1, #0x3
 80691ae: 9101         	str	r1, [sp, #0x4]
 80691b0: e7d6         	b	0x8069160 <get_eit_entry+0x18> @ imm = #-0x54
 80691b2: f3c3 6003    	ubfx	r0, r3, #0x18, #0x4
 80691b6: f7ff ffb3    	bl	0x8069120 <__gnu_unwind_get_pr_addr> @ imm = #-0x9a
 80691ba: 2800         	cmp	r0, #0x0
 80691bc: 6120         	str	r0, [r4, #0x10]
 80691be: bf14         	ite	ne
 80691c0: 2000         	movne	r0, #0x0
 80691c2: 2009         	moveq	r0, #0x9
 80691c4: b003         	add	sp, #0xc
 80691c6: bd30         	pop	{r4, r5, pc}
 80691c8: 2301         	movs	r3, #0x1
 80691ca: e9c4 0313    	strd	r0, r3, [r4, #76]
 80691ce: e7db         	b	0x8069188 <get_eit_entry+0x40> @ imm = #-0x4a
 80691d0: 2300         	movs	r3, #0x0
 80691d2: 2005         	movs	r0, #0x5
 80691d4: 6123         	str	r3, [r4, #0x10]
 80691d6: e7df         	b	0x8069198 <get_eit_entry+0x50> @ imm = #-0x42

080691d8 <$d>:
 80691d8: 00 00 00 00  	.word	0x00000000
 80691dc: 78 a4 06 08  	.word	0x0806a478
 80691e0: 40 a5 06 08  	.word	0x0806a540

080691e4 <restore_non_core_regs>:
 80691e4: 6803         	ldr	r3, [r0]
 80691e6: 07da         	lsls	r2, r3, #0x1f
 80691e8: b510         	push	{r4, lr}
 80691ea: 4604         	mov	r4, r0
 80691ec: d406         	bmi	0x80691fc <restore_non_core_regs+0x18> @ imm = #0xc
 80691ee: 079b         	lsls	r3, r3, #0x1e
 80691f0: f100 0048    	add.w	r0, r0, #0x48
 80691f4: d509         	bpl	0x806920a <restore_non_core_regs+0x26> @ imm = #0x12
 80691f6: f000 fc8f    	bl	0x8069b18 <__gnu_Unwind_Restore_VFP_D> @ imm = #0x91e
 80691fa: 6823         	ldr	r3, [r4]
 80691fc: 0759         	lsls	r1, r3, #0x1d
 80691fe: d509         	bpl	0x8069214 <restore_non_core_regs+0x30> @ imm = #0x12
 8069200: 071a         	lsls	r2, r3, #0x1c
 8069202: d50e         	bpl	0x8069222 <restore_non_core_regs+0x3e> @ imm = #0x1c
 8069204: 06db         	lsls	r3, r3, #0x1b
 8069206: d513         	bpl	0x8069230 <restore_non_core_regs+0x4c> @ imm = #0x26
 8069208: bd10         	pop	{r4, pc}
 806920a: f000 fc7d    	bl	0x8069b08 <__gnu_Unwind_Restore_VFP> @ imm = #0x8fa
 806920e: 6823         	ldr	r3, [r4]
 8069210: 0759         	lsls	r1, r3, #0x1d
 8069212: d4f5         	bmi	0x8069200 <restore_non_core_regs+0x1c> @ imm = #-0x16
 8069214: f104 00d0    	add.w	r0, r4, #0xd0
 8069218: f000 fc86    	bl	0x8069b28 <__gnu_Unwind_Restore_VFP_D_16_to_31> @ imm = #0x90c
 806921c: 6823         	ldr	r3, [r4]
 806921e: 071a         	lsls	r2, r3, #0x1c
 8069220: d4f0         	bmi	0x8069204 <restore_non_core_regs+0x20> @ imm = #-0x20
 8069222: f504 70a8    	add.w	r0, r4, #0x150
 8069226: f000 fc87    	bl	0x8069b38 <__gnu_Unwind_Restore_WMMXD> @ imm = #0x90e
 806922a: 6823         	ldr	r3, [r4]
 806922c: 06db         	lsls	r3, r3, #0x1b
 806922e: d4eb         	bmi	0x8069208 <restore_non_core_regs+0x24> @ imm = #-0x2a
 8069230: f504 70e8    	add.w	r0, r4, #0x1d0
 8069234: e8bd 4010    	pop.w	{r4, lr}
 8069238: f000 bcc2    	b.w	0x8069bc0 <__gnu_Unwind_Restore_WMMXC> @ imm = #0x984

0806923c <__gnu_unwind_24bit.constprop.0>:
 806923c: 2009         	movs	r0, #0x9
 806923e: 4770         	bx	lr

08069240 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8069240: 4603         	mov	r3, r0
 8069242: 6800         	ldr	r0, [r0]
 8069244: b100         	cbz	r0, 0x8069248 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8> @ imm = #0x0
 8069246: 4418         	add	r0, r3
 8069248: 4770         	bx	lr
 806924a: bf00         	nop

0806924c <_Unwind_DebugHook>:
 806924c: 4770         	bx	lr
 806924e: bf00         	nop

08069250 <unwind_phase2>:
 8069250: b570         	push	{r4, r5, r6, lr}
 8069252: 4604         	mov	r4, r0
 8069254: 460e         	mov	r6, r1
 8069256: 6c31         	ldr	r1, [r6, #0x40]
 8069258: 4620         	mov	r0, r4
 806925a: f7ff ff75    	bl	0x8069148 <get_eit_entry> @ imm = #-0x116
 806925e: 4605         	mov	r5, r0
 8069260: b998         	cbnz	r0, 0x806928a <unwind_phase2+0x3a> @ imm = #0x26
 8069262: f8d6 c040    	ldr.w	r12, [r6, #0x40]
 8069266: 4632         	mov	r2, r6
 8069268: 6923         	ldr	r3, [r4, #0x10]
 806926a: 4621         	mov	r1, r4
 806926c: 2001         	movs	r0, #0x1
 806926e: f8c4 c014    	str.w	r12, [r4, #0x14]
 8069272: 4798         	blx	r3
 8069274: 2808         	cmp	r0, #0x8
 8069276: d0ee         	beq	0x8069256 <unwind_phase2+0x6> @ imm = #-0x24
 8069278: 2807         	cmp	r0, #0x7
 806927a: d106         	bne	0x806928a <unwind_phase2+0x3a> @ imm = #0xc
 806927c: 4628         	mov	r0, r5
 806927e: 6c31         	ldr	r1, [r6, #0x40]
 8069280: f7ff ffe4    	bl	0x806924c <_Unwind_DebugHook> @ imm = #-0x38
 8069284: 1d30         	adds	r0, r6, #0x4
 8069286: f000 fc33    	bl	0x8069af0 <restore_core_regs> @ imm = #0x866
 806928a: f7fe ff39    	bl	0x8068100 <abort>       @ imm = #-0x118e
 806928e: bf00         	nop

08069290 <unwind_phase2_forced>:
 8069290: e92d 47f0    	push.w	{r4, r5, r6, r7, r8, r9, r10, lr}
 8069294: f101 0c04    	add.w	r12, r1, #0x4
 8069298: f5ad 7d74    	sub.w	sp, sp, #0x3d0
 806929c: 68c7         	ldr	r7, [r0, #0xc]
 806929e: 4606         	mov	r6, r0
 80692a0: f8d0 8018    	ldr.w	r8, [r0, #0x18]
 80692a4: 4614         	mov	r4, r2
 80692a6: f10d 0e14    	add.w	lr, sp, #0x14
 80692aa: ad04         	add	r5, sp, #0x10
 80692ac: f04f 0900    	mov.w	r9, #0x0
 80692b0: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
 80692b4: e8ae 000f    	stm.w	lr!, {r0, r1, r2, r3}
 80692b8: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
 80692bc: e8ae 000f    	stm.w	lr!, {r0, r1, r2, r3}
 80692c0: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
 80692c4: e8ae 000f    	stm.w	lr!, {r0, r1, r2, r3}
 80692c8: e89c 000f    	ldm.w	r12, {r0, r1, r2, r3}
 80692cc: e88e 000f    	stm.w	lr, {r0, r1, r2, r3}
 80692d0: f8c5 9000    	str.w	r9, [r5]
 80692d4: e023         	b	0x806931e <unwind_phase2_forced+0x8e> @ imm = #0x46
 80692d6: 6c2b         	ldr	r3, [r5, #0x40]
 80692d8: f44f 72f0    	mov.w	r2, #0x1e0
 80692dc: 4629         	mov	r1, r5
 80692de: a87c         	add	r0, sp, #0x1f0
 80692e0: 6173         	str	r3, [r6, #0x14]
 80692e2: f7f8 ffd1    	bl	0x8062288 <memcpy>      @ imm = #-0x705e
 80692e6: aa7c         	add	r2, sp, #0x1f0
 80692e8: 4631         	mov	r1, r6
 80692ea: 6933         	ldr	r3, [r6, #0x10]
 80692ec: 4650         	mov	r0, r10
 80692ee: 4798         	blx	r3
 80692f0: 9b8a         	ldr	r3, [sp, #0x228]
 80692f2: 4621         	mov	r1, r4
 80692f4: 4681         	mov	r9, r0
 80692f6: 9303         	str	r3, [sp, #0xc]
 80692f8: 4632         	mov	r2, r6
 80692fa: 9c03         	ldr	r4, [sp, #0xc]
 80692fc: 4633         	mov	r3, r6
 80692fe: 2001         	movs	r0, #0x1
 8069300: 646c         	str	r4, [r5, #0x44]
 8069302: e9cd 5800    	strd	r5, r8, [sp]
 8069306: 47b8         	blx	r7
 8069308: 4604         	mov	r4, r0
 806930a: b9e8         	cbnz	r0, 0x8069348 <unwind_phase2_forced+0xb8> @ imm = #0x3a
 806930c: f44f 72f0    	mov.w	r2, #0x1e0
 8069310: a97c         	add	r1, sp, #0x1f0
 8069312: 4628         	mov	r0, r5
 8069314: f7f8 ffb8    	bl	0x8062288 <memcpy>      @ imm = #-0x7090
 8069318: f1b9 0f08    	cmp.w	r9, #0x8
 806931c: d11b         	bne	0x8069356 <unwind_phase2_forced+0xc6> @ imm = #0x36
 806931e: 3409         	adds	r4, #0x9
 8069320: 6c29         	ldr	r1, [r5, #0x40]
 8069322: 4630         	mov	r0, r6
 8069324: f7ff ff10    	bl	0x8069148 <get_eit_entry> @ imm = #-0x1e0
 8069328: 4681         	mov	r9, r0
 806932a: fa5f fa84    	uxtb.w	r10, r4
 806932e: 2800         	cmp	r0, #0x0
 8069330: d0d1         	beq	0x80692d6 <unwind_phase2_forced+0x46> @ imm = #-0x5e
 8069332: 6bac         	ldr	r4, [r5, #0x38]
 8069334: 4633         	mov	r3, r6
 8069336: 4632         	mov	r2, r6
 8069338: f04a 0110    	orr	r1, r10, #0x10
 806933c: 646c         	str	r4, [r5, #0x44]
 806933e: 2001         	movs	r0, #0x1
 8069340: e9cd 5800    	strd	r5, r8, [sp]
 8069344: 47b8         	blx	r7
 8069346: b108         	cbz	r0, 0x806934c <unwind_phase2_forced+0xbc> @ imm = #0x2
 8069348: f04f 0909    	mov.w	r9, #0x9
 806934c: 4648         	mov	r0, r9
 806934e: f50d 7d74    	add.w	sp, sp, #0x3d0
 8069352: e8bd 87f0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, pc}
 8069356: f1b9 0f07    	cmp.w	r9, #0x7
 806935a: d1f5         	bne	0x8069348 <unwind_phase2_forced+0xb8> @ imm = #-0x16
 806935c: 4620         	mov	r0, r4
 806935e: 6c29         	ldr	r1, [r5, #0x40]
 8069360: f7ff ff74    	bl	0x806924c <_Unwind_DebugHook> @ imm = #-0x118
 8069364: a805         	add	r0, sp, #0x14
 8069366: f000 fbc3    	bl	0x8069af0 <restore_core_regs> @ imm = #0x786
 806936a: bf00         	nop

0806936c <_Unwind_GetCFA>:
 806936c: 6c40         	ldr	r0, [r0, #0x44]
 806936e: 4770         	bx	lr

08069370 <__gnu_Unwind_RaiseException>:
 8069370: b5f0         	push	{r4, r5, r6, r7, lr}
 8069372: 6bcb         	ldr	r3, [r1, #0x3c]
 8069374: b0f9         	sub	sp, #0x1e4
 8069376: f101 0c04    	add.w	r12, r1, #0x4
 806937a: 460e         	mov	r6, r1
 806937c: 640b         	str	r3, [r1, #0x40]
 806937e: ac01         	add	r4, sp, #0x4
 8069380: 4605         	mov	r5, r0
 8069382: f04f 37ff    	mov.w	r7, #0xffffffff
 8069386: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
 806938a: c40f         	stm	r4!, {r0, r1, r2, r3}
 806938c: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
 8069390: c40f         	stm	r4!, {r0, r1, r2, r3}
 8069392: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
 8069396: c40f         	stm	r4!, {r0, r1, r2, r3}
 8069398: e89c 000f    	ldm.w	r12, {r0, r1, r2, r3}
 806939c: e884 000f    	stm.w	r4, {r0, r1, r2, r3}
 80693a0: 9700         	str	r7, [sp]
 80693a2: e006         	b	0x80693b2 <__gnu_Unwind_RaiseException+0x42> @ imm = #0xc
 80693a4: 692b         	ldr	r3, [r5, #0x10]
 80693a6: 466a         	mov	r2, sp
 80693a8: 4629         	mov	r1, r5
 80693aa: 4798         	blx	r3
 80693ac: 2808         	cmp	r0, #0x8
 80693ae: 4604         	mov	r4, r0
 80693b0: d108         	bne	0x80693c4 <__gnu_Unwind_RaiseException+0x54> @ imm = #0x10
 80693b2: 9910         	ldr	r1, [sp, #0x40]
 80693b4: 4628         	mov	r0, r5
 80693b6: f7ff fec7    	bl	0x8069148 <get_eit_entry> @ imm = #-0x272
 80693ba: 2800         	cmp	r0, #0x0
 80693bc: d0f2         	beq	0x80693a4 <__gnu_Unwind_RaiseException+0x34> @ imm = #-0x1c
 80693be: 2009         	movs	r0, #0x9
 80693c0: b079         	add	sp, #0x1e4
 80693c2: bdf0         	pop	{r4, r5, r6, r7, pc}
 80693c4: 4668         	mov	r0, sp
 80693c6: f7ff ff0d    	bl	0x80691e4 <restore_non_core_regs> @ imm = #-0x1e6
 80693ca: 2c06         	cmp	r4, #0x6
 80693cc: d1f7         	bne	0x80693be <__gnu_Unwind_RaiseException+0x4e> @ imm = #-0x12
 80693ce: 4631         	mov	r1, r6
 80693d0: 4628         	mov	r0, r5
 80693d2: f7ff ff3d    	bl	0x8069250 <unwind_phase2> @ imm = #-0x186
 80693d6: bf00         	nop

080693d8 <__gnu_Unwind_ForcedUnwind>:
 80693d8: b410         	push	{r4}
 80693da: 6bdc         	ldr	r4, [r3, #0x3c]
 80693dc: 60c1         	str	r1, [r0, #0xc]
 80693de: 4619         	mov	r1, r3
 80693e0: 6182         	str	r2, [r0, #0x18]
 80693e2: 2200         	movs	r2, #0x0
 80693e4: 641c         	str	r4, [r3, #0x40]
 80693e6: bc10         	pop	{r4}
 80693e8: e752         	b	0x8069290 <unwind_phase2_forced> @ imm = #-0x15c
 80693ea: bf00         	nop

080693ec <__gnu_Unwind_Resume>:
 80693ec: b570         	push	{r4, r5, r6, lr}
 80693ee: 6943         	ldr	r3, [r0, #0x14]
 80693f0: 68c6         	ldr	r6, [r0, #0xc]
 80693f2: 640b         	str	r3, [r1, #0x40]
 80693f4: b9ae         	cbnz	r6, 0x8069422 <__gnu_Unwind_Resume+0x36> @ imm = #0x2a
 80693f6: 6903         	ldr	r3, [r0, #0x10]
 80693f8: 460a         	mov	r2, r1
 80693fa: 4604         	mov	r4, r0
 80693fc: 460d         	mov	r5, r1
 80693fe: 4601         	mov	r1, r0
 8069400: 2002         	movs	r0, #0x2
 8069402: 4798         	blx	r3
 8069404: 2807         	cmp	r0, #0x7
 8069406: d005         	beq	0x8069414 <__gnu_Unwind_Resume+0x28> @ imm = #0xa
 8069408: 2808         	cmp	r0, #0x8
 806940a: d10f         	bne	0x806942c <__gnu_Unwind_Resume+0x40> @ imm = #0x1e
 806940c: 4629         	mov	r1, r5
 806940e: 4620         	mov	r0, r4
 8069410: f7ff ff1e    	bl	0x8069250 <unwind_phase2> @ imm = #-0x1c4
 8069414: 4630         	mov	r0, r6
 8069416: 6c29         	ldr	r1, [r5, #0x40]
 8069418: f7ff ff18    	bl	0x806924c <_Unwind_DebugHook> @ imm = #-0x1d0
 806941c: 1d28         	adds	r0, r5, #0x4
 806941e: f000 fb67    	bl	0x8069af0 <restore_core_regs> @ imm = #0x6ce
 8069422: 2201         	movs	r2, #0x1
 8069424: f7ff ff34    	bl	0x8069290 <unwind_phase2_forced> @ imm = #-0x198
 8069428: f7fe fe6a    	bl	0x8068100 <abort>       @ imm = #-0x132c
 806942c: f7fe fe68    	bl	0x8068100 <abort>       @ imm = #-0x1330

08069430 <__gnu_Unwind_Resume_or_Rethrow>:
 8069430: 68c2         	ldr	r2, [r0, #0xc]
 8069432: b12a         	cbz	r2, 0x8069440 <__gnu_Unwind_Resume_or_Rethrow+0x10> @ imm = #0xa
 8069434: f8d1 c03c    	ldr.w	r12, [r1, #0x3c]
 8069438: 2200         	movs	r2, #0x0
 806943a: f8c1 c040    	str.w	r12, [r1, #0x40]
 806943e: e727         	b	0x8069290 <unwind_phase2_forced> @ imm = #-0x1b2
 8069440: e796         	b	0x8069370 <__gnu_Unwind_RaiseException> @ imm = #-0xd4
 8069442: bf00         	nop

08069444 <_Unwind_Complete>:
 8069444: 4770         	bx	lr
 8069446: bf00         	nop

08069448 <_Unwind_DeleteException>:
 8069448: 6883         	ldr	r3, [r0, #0x8]
 806944a: 4601         	mov	r1, r0
 806944c: b10b         	cbz	r3, 0x8069452 <_Unwind_DeleteException+0xa> @ imm = #0x2
 806944e: 2001         	movs	r0, #0x1
 8069450: 4718         	bx	r3
 8069452: 4770         	bx	lr

08069454 <_Unwind_VRS_Get>:
 8069454: 2901         	cmp	r1, #0x1
 8069456: d015         	beq	0x8069484 <_Unwind_VRS_Get+0x30> @ imm = #0x2a
 8069458: d80c         	bhi	0x8069474 <_Unwind_VRS_Get+0x20> @ imm = #0x18
 806945a: b98b         	cbnz	r3, 0x8069480 <_Unwind_VRS_Get+0x2c> @ imm = #0x22
 806945c: 2a0f         	cmp	r2, #0xf
 806945e: bf94         	ite	ls
 8069460: 2100         	movls	r1, #0x0
 8069462: 2101         	movhi	r1, #0x1
 8069464: b961         	cbnz	r1, 0x8069480 <_Unwind_VRS_Get+0x2c> @ imm = #0x18
 8069466: eb00 0282    	add.w	r2, r0, r2, lsl #2
 806946a: 4608         	mov	r0, r1
 806946c: 6853         	ldr	r3, [r2, #0x4]
 806946e: 9a00         	ldr	r2, [sp]
 8069470: 6013         	str	r3, [r2]
 8069472: 4770         	bx	lr
 8069474: 3903         	subs	r1, #0x3
 8069476: 2901         	cmp	r1, #0x1
 8069478: bf94         	ite	ls
 806947a: 2001         	movls	r0, #0x1
 806947c: 2002         	movhi	r0, #0x2
 806947e: 4770         	bx	lr
 8069480: 2002         	movs	r0, #0x2
 8069482: 4770         	bx	lr
 8069484: 4608         	mov	r0, r1
 8069486: 4770         	bx	lr

08069488 <_Unwind_GetGR>:
 8069488: b510         	push	{r4, lr}
 806948a: b084         	sub	sp, #0x10
 806948c: 2300         	movs	r3, #0x0
 806948e: 460a         	mov	r2, r1
 8069490: ac03         	add	r4, sp, #0xc
 8069492: 4619         	mov	r1, r3
 8069494: 9400         	str	r4, [sp]
 8069496: f7ff ffdd    	bl	0x8069454 <_Unwind_VRS_Get> @ imm = #-0x46
 806949a: 9803         	ldr	r0, [sp, #0xc]
 806949c: b004         	add	sp, #0x10
 806949e: bd10         	pop	{r4, pc}

080694a0 <_Unwind_VRS_Set>:
 80694a0: 2901         	cmp	r1, #0x1
 80694a2: d015         	beq	0x80694d0 <_Unwind_VRS_Set+0x30> @ imm = #0x2a
 80694a4: d80c         	bhi	0x80694c0 <_Unwind_VRS_Set+0x20> @ imm = #0x18
 80694a6: b98b         	cbnz	r3, 0x80694cc <_Unwind_VRS_Set+0x2c> @ imm = #0x22
 80694a8: 2a0f         	cmp	r2, #0xf
 80694aa: bf94         	ite	ls
 80694ac: 2100         	movls	r1, #0x0
 80694ae: 2101         	movhi	r1, #0x1
 80694b0: b961         	cbnz	r1, 0x80694cc <_Unwind_VRS_Set+0x2c> @ imm = #0x18
 80694b2: 9b00         	ldr	r3, [sp]
 80694b4: eb00 0282    	add.w	r2, r0, r2, lsl #2
 80694b8: 4608         	mov	r0, r1
 80694ba: 681b         	ldr	r3, [r3]
 80694bc: 6053         	str	r3, [r2, #0x4]
 80694be: 4770         	bx	lr
 80694c0: 3903         	subs	r1, #0x3
 80694c2: 2901         	cmp	r1, #0x1
 80694c4: bf94         	ite	ls
 80694c6: 2001         	movls	r0, #0x1
 80694c8: 2002         	movhi	r0, #0x2
 80694ca: 4770         	bx	lr
 80694cc: 2002         	movs	r0, #0x2
 80694ce: 4770         	bx	lr
 80694d0: 4608         	mov	r0, r1
 80694d2: 4770         	bx	lr

080694d4 <_Unwind_SetGR>:
 80694d4: b510         	push	{r4, lr}
 80694d6: b084         	sub	sp, #0x10
 80694d8: 2300         	movs	r3, #0x0
 80694da: ac03         	add	r4, sp, #0xc
 80694dc: 9203         	str	r2, [sp, #0xc]
 80694de: 460a         	mov	r2, r1
 80694e0: 4619         	mov	r1, r3
 80694e2: 9400         	str	r4, [sp]
 80694e4: f7ff ffdc    	bl	0x80694a0 <_Unwind_VRS_Set> @ imm = #-0x48
 80694e8: b004         	add	sp, #0x10
 80694ea: bd10         	pop	{r4, pc}

080694ec <__gnu_Unwind_Backtrace>:
 80694ec: b5f0         	push	{r4, r5, r6, r7, lr}
 80694ee: 6bd3         	ldr	r3, [r2, #0x3c]
 80694f0: f5ad 7d0f    	sub.w	sp, sp, #0x23c
 80694f4: 1d14         	adds	r4, r2, #0x4
 80694f6: 4606         	mov	r6, r0
 80694f8: 6413         	str	r3, [r2, #0x40]
 80694fa: f10d 0c5c    	add.w	r12, sp, #0x5c
 80694fe: 460d         	mov	r5, r1
 8069500: f04f 37ff    	mov.w	r7, #0xffffffff
 8069504: cc0f         	ldm	r4!, {r0, r1, r2, r3}
 8069506: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
 806950a: cc0f         	ldm	r4!, {r0, r1, r2, r3}
 806950c: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
 8069510: cc0f         	ldm	r4!, {r0, r1, r2, r3}
 8069512: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
 8069516: e894 000f    	ldm.w	r4, {r0, r1, r2, r3}
 806951a: e88c 000f    	stm.w	r12, {r0, r1, r2, r3}
 806951e: 9716         	str	r7, [sp, #0x58]
 8069520: e010         	b	0x8069544 <__gnu_Unwind_Backtrace+0x58> @ imm = #0x20
 8069522: f7ff ffd7    	bl	0x80694d4 <_Unwind_SetGR> @ imm = #-0x52
 8069526: 4629         	mov	r1, r5
 8069528: a816         	add	r0, sp, #0x58
 806952a: 47b0         	blx	r6
 806952c: 4603         	mov	r3, r0
 806952e: aa16         	add	r2, sp, #0x58
 8069530: 4669         	mov	r1, sp
 8069532: 2008         	movs	r0, #0x8
 8069534: b983         	cbnz	r3, 0x8069558 <__gnu_Unwind_Backtrace+0x6c> @ imm = #0x20
 8069536: 9b04         	ldr	r3, [sp, #0x10]
 8069538: 4798         	blx	r3
 806953a: 2805         	cmp	r0, #0x5
 806953c: 4604         	mov	r4, r0
 806953e: d00c         	beq	0x806955a <__gnu_Unwind_Backtrace+0x6e> @ imm = #0x18
 8069540: 2809         	cmp	r0, #0x9
 8069542: d00a         	beq	0x806955a <__gnu_Unwind_Backtrace+0x6e> @ imm = #0x14
 8069544: 9926         	ldr	r1, [sp, #0x98]
 8069546: 4668         	mov	r0, sp
 8069548: f7ff fdfe    	bl	0x8069148 <get_eit_entry> @ imm = #-0x404
 806954c: 4603         	mov	r3, r0
 806954e: 466a         	mov	r2, sp
 8069550: 210c         	movs	r1, #0xc
 8069552: a816         	add	r0, sp, #0x58
 8069554: 2b00         	cmp	r3, #0x0
 8069556: d0e4         	beq	0x8069522 <__gnu_Unwind_Backtrace+0x36> @ imm = #-0x38
 8069558: 2409         	movs	r4, #0x9
 806955a: a816         	add	r0, sp, #0x58
 806955c: f7ff fe42    	bl	0x80691e4 <restore_non_core_regs> @ imm = #-0x37c
 8069560: 4620         	mov	r0, r4
 8069562: f50d 7d0f    	add.w	sp, sp, #0x23c
 8069566: bdf0         	pop	{r4, r5, r6, r7, pc}

08069568 <__gnu_unwind_pr_common>:
 8069568: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 806956c: 6ccc         	ldr	r4, [r1, #0x4c]
 806956e: b089         	sub	sp, #0x24
 8069570: 461e         	mov	r6, r3
 8069572: 460d         	mov	r5, r1
 8069574: f854 3b04    	ldr	r3, [r4], #4
 8069578: 4617         	mov	r7, r2
 806957a: f000 0803    	and	r8, r0, #0x3
 806957e: 9406         	str	r4, [sp, #0x18]
 8069580: 2e00         	cmp	r6, #0x0
 8069582: d07f         	beq	0x8069684 <__gnu_unwind_pr_common+0x11c> @ imm = #0xfe
 8069584: 0c1a         	lsrs	r2, r3, #0x10
 8069586: 041b         	lsls	r3, r3, #0x10
 8069588: f88d 201d    	strb.w	r2, [sp, #0x1d]
 806958c: b2d2         	uxtb	r2, r2
 806958e: 9305         	str	r3, [sp, #0x14]
 8069590: 2302         	movs	r3, #0x2
 8069592: eb04 0482    	add.w	r4, r4, r2, lsl #2
 8069596: f88d 301c    	strb.w	r3, [sp, #0x1c]
 806959a: f1b8 0f02    	cmp.w	r8, #0x2
 806959e: 6d2b         	ldr	r3, [r5, #0x50]
 80695a0: bf08         	it	eq
 80695a2: 6bac         	ldreq	r4, [r5, #0x38]
 80695a4: f013 0301    	ands	r3, r3, #0x1
 80695a8: d008         	beq	0x80695bc <__gnu_unwind_pr_common+0x54> @ imm = #0x10
 80695aa: a905         	add	r1, sp, #0x14
 80695ac: 4638         	mov	r0, r7
 80695ae: f000 fba1    	bl	0x8069cf4 <__gnu_unwind_execute> @ imm = #0x742
 80695b2: bb90         	cbnz	r0, 0x806961a <__gnu_unwind_pr_common+0xb2> @ imm = #0x64
 80695b4: 2008         	movs	r0, #0x8
 80695b6: b009         	add	sp, #0x24
 80695b8: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80695bc: f8d4 a000    	ldr.w	r10, [r4]
 80695c0: f1ba 0f00    	cmp.w	r10, #0x0
 80695c4: d0f1         	beq	0x80695aa <__gnu_unwind_pr_common+0x42> @ imm = #-0x1e
 80695c6: 9301         	str	r3, [sp, #0x4]
 80695c8: f000 0308    	and	r3, r0, #0x8
 80695cc: 9302         	str	r3, [sp, #0x8]
 80695ce: 2e02         	cmp	r6, #0x2
 80695d0: d054         	beq	0x806967c <__gnu_unwind_pr_common+0x114> @ imm = #0xa8
 80695d2: f8b4 a000    	ldrh.w	r10, [r4]
 80695d6: 3404         	adds	r4, #0x4
 80695d8: f834 9c02    	ldrh	r9, [r4, #-2]
 80695dc: 6cab         	ldr	r3, [r5, #0x48]
 80695de: f029 0b01    	bic	r11, r9, #0x1
 80695e2: 210f         	movs	r1, #0xf
 80695e4: 4638         	mov	r0, r7
 80695e6: 449b         	add	r11, r3
 80695e8: f7ff ff4e    	bl	0x8069488 <_Unwind_GetGR> @ imm = #-0x164
 80695ec: 4583         	cmp	r11, r0
 80695ee: d818         	bhi	0x8069622 <__gnu_unwind_pr_common+0xba> @ imm = #0x30
 80695f0: f02a 0301    	bic	r3, r10, #0x1
 80695f4: 449b         	add	r11, r3
 80695f6: 4583         	cmp	r11, r0
 80695f8: d913         	bls	0x8069622 <__gnu_unwind_pr_common+0xba> @ imm = #0x26
 80695fa: ea4f 0349    	lsl.w	r3, r9, #0x1
 80695fe: f00a 0a01    	and	r10, r10, #0x1
 8069602: f003 0302    	and	r3, r3, #0x2
 8069606: ea43 030a    	orr.w	r3, r3, r10
 806960a: 2b01         	cmp	r3, #0x1
 806960c: f000 80bf    	beq.w	0x806978e <__gnu_unwind_pr_common+0x226> @ imm = #0x17e
 8069610: 2b02         	cmp	r3, #0x2
 8069612: f000 8089    	beq.w	0x8069728 <__gnu_unwind_pr_common+0x1c0> @ imm = #0x112
 8069616: 2b00         	cmp	r3, #0x0
 8069618: d04d         	beq	0x80696b6 <__gnu_unwind_pr_common+0x14e> @ imm = #0x9a
 806961a: 2009         	movs	r0, #0x9
 806961c: b009         	add	sp, #0x24
 806961e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8069622: ea4f 0349    	lsl.w	r3, r9, #0x1
 8069626: f00a 0a01    	and	r10, r10, #0x1
 806962a: f003 0302    	and	r3, r3, #0x2
 806962e: ea43 030a    	orr.w	r3, r3, r10
 8069632: 2b01         	cmp	r3, #0x1
 8069634: d03a         	beq	0x80696ac <__gnu_unwind_pr_common+0x144> @ imm = #0x74
 8069636: 2b02         	cmp	r3, #0x2
 8069638: d02a         	beq	0x8069690 <__gnu_unwind_pr_common+0x128> @ imm = #0x54
 806963a: 2b00         	cmp	r3, #0x0
 806963c: d1ed         	bne	0x806961a <__gnu_unwind_pr_common+0xb2> @ imm = #-0x26
 806963e: 3404         	adds	r4, #0x4
 8069640: f8d4 a000    	ldr.w	r10, [r4]
 8069644: f1ba 0f00    	cmp.w	r10, #0x0
 8069648: d1c1         	bne	0x80695ce <__gnu_unwind_pr_common+0x66> @ imm = #-0x7e
 806964a: a905         	add	r1, sp, #0x14
 806964c: 4638         	mov	r0, r7
 806964e: f000 fb51    	bl	0x8069cf4 <__gnu_unwind_execute> @ imm = #0x6a2
 8069652: 2800         	cmp	r0, #0x0
 8069654: d1e1         	bne	0x806961a <__gnu_unwind_pr_common+0xb2> @ imm = #-0x3e
 8069656: 9b01         	ldr	r3, [sp, #0x4]
 8069658: 2b00         	cmp	r3, #0x0
 806965a: d0ab         	beq	0x80695b4 <__gnu_unwind_pr_common+0x4c> @ imm = #-0xaa
 806965c: 210f         	movs	r1, #0xf
 806965e: 4638         	mov	r0, r7
 8069660: f7ff ff12    	bl	0x8069488 <_Unwind_GetGR> @ imm = #-0x1dc
 8069664: 210e         	movs	r1, #0xe
 8069666: 4602         	mov	r2, r0
 8069668: 4638         	mov	r0, r7
 806966a: f7ff ff33    	bl	0x80694d4 <_Unwind_SetGR> @ imm = #-0x19a
 806966e: 4638         	mov	r0, r7
 8069670: 4a6e         	ldr	r2, [pc, #0x1b8]        @ 0x806982c <__gnu_unwind_pr_common+0x2c4>
 8069672: 210f         	movs	r1, #0xf
 8069674: f7ff ff2e    	bl	0x80694d4 <_Unwind_SetGR> @ imm = #-0x1a4
 8069678: 2007         	movs	r0, #0x7
 806967a: e7cf         	b	0x806961c <__gnu_unwind_pr_common+0xb4> @ imm = #-0x62
 806967c: f8d4 9004    	ldr.w	r9, [r4, #0x4]
 8069680: 3408         	adds	r4, #0x8
 8069682: e7ab         	b	0x80695dc <__gnu_unwind_pr_common+0x74> @ imm = #-0xaa
 8069684: 021b         	lsls	r3, r3, #0x8
 8069686: 9305         	str	r3, [sp, #0x14]
 8069688: 2303         	movs	r3, #0x3
 806968a: f8ad 301c    	strh.w	r3, [sp, #0x1c]
 806968e: e784         	b	0x806959a <__gnu_unwind_pr_common+0x32> @ imm = #-0xf8
 8069690: 6823         	ldr	r3, [r4]
 8069692: f023 4b00    	bic	r11, r3, #0x80000000
 8069696: f1b8 0f00    	cmp.w	r8, #0x0
 806969a: d121         	bne	0x80696e0 <__gnu_unwind_pr_common+0x178> @ imm = #0x42
 806969c: 2b00         	cmp	r3, #0x0
 806969e: da00         	bge	0x80696a2 <__gnu_unwind_pr_common+0x13a> @ imm = #0x0
 80696a0: 3404         	adds	r4, #0x4
 80696a2: f10b 0b01    	add.w	r11, r11, #0x1
 80696a6: eb04 048b    	add.w	r4, r4, r11, lsl #2
 80696aa: e7c9         	b	0x8069640 <__gnu_unwind_pr_common+0xd8> @ imm = #-0x6e
 80696ac: f1b8 0f00    	cmp.w	r8, #0x0
 80696b0: d120         	bne	0x80696f4 <__gnu_unwind_pr_common+0x18c> @ imm = #0x40
 80696b2: 3408         	adds	r4, #0x8
 80696b4: e7c4         	b	0x8069640 <__gnu_unwind_pr_common+0xd8> @ imm = #-0x78
 80696b6: f1b8 0f00    	cmp.w	r8, #0x0
 80696ba: d0c0         	beq	0x806963e <__gnu_unwind_pr_common+0xd6> @ imm = #-0x80
 80696bc: 4620         	mov	r0, r4
 80696be: 3404         	adds	r4, #0x4
 80696c0: f7ff fcf4    	bl	0x80690ac <selfrel_offset31> @ imm = #-0x618
 80696c4: 4606         	mov	r6, r0
 80696c6: 63ac         	str	r4, [r5, #0x38]
 80696c8: 4628         	mov	r0, r5
 80696ca: f3af 8000    	nop.w
 80696ce: 2800         	cmp	r0, #0x0
 80696d0: d0a3         	beq	0x806961a <__gnu_unwind_pr_common+0xb2> @ imm = #-0xba
 80696d2: 4638         	mov	r0, r7
 80696d4: 4632         	mov	r2, r6
 80696d6: 210f         	movs	r1, #0xf
 80696d8: f7ff fefc    	bl	0x80694d4 <_Unwind_SetGR> @ imm = #-0x208
 80696dc: 2007         	movs	r0, #0x7
 80696de: e79d         	b	0x806961c <__gnu_unwind_pr_common+0xb4> @ imm = #-0xc6
 80696e0: f8d5 9020    	ldr.w	r9, [r5, #0x20]
 80696e4: 210d         	movs	r1, #0xd
 80696e6: 4638         	mov	r0, r7
 80696e8: f7ff fece    	bl	0x8069488 <_Unwind_GetGR> @ imm = #-0x264
 80696ec: 4581         	cmp	r9, r0
 80696ee: d079         	beq	0x80697e4 <__gnu_unwind_pr_common+0x27c> @ imm = #0xf2
 80696f0: 6823         	ldr	r3, [r4]
 80696f2: e7d3         	b	0x806969c <__gnu_unwind_pr_common+0x134> @ imm = #-0x5a
 80696f4: f8d5 9020    	ldr.w	r9, [r5, #0x20]
 80696f8: 210d         	movs	r1, #0xd
 80696fa: 4638         	mov	r0, r7
 80696fc: f7ff fec4    	bl	0x8069488 <_Unwind_GetGR> @ imm = #-0x278
 8069700: 4581         	cmp	r9, r0
 8069702: d1d6         	bne	0x80696b2 <__gnu_unwind_pr_common+0x14a> @ imm = #-0x54
 8069704: 6aab         	ldr	r3, [r5, #0x28]
 8069706: 429c         	cmp	r4, r3
 8069708: d1d3         	bne	0x80696b2 <__gnu_unwind_pr_common+0x14a> @ imm = #-0x5a
 806970a: 4620         	mov	r0, r4
 806970c: 210f         	movs	r1, #0xf
 806970e: f7ff fccd    	bl	0x80690ac <selfrel_offset31> @ imm = #-0x666
 8069712: 4602         	mov	r2, r0
 8069714: 4638         	mov	r0, r7
 8069716: f7ff fedd    	bl	0x80694d4 <_Unwind_SetGR> @ imm = #-0x246
 806971a: 4638         	mov	r0, r7
 806971c: 462a         	mov	r2, r5
 806971e: 2100         	movs	r1, #0x0
 8069720: f7ff fed8    	bl	0x80694d4 <_Unwind_SetGR> @ imm = #-0x250
 8069724: 2007         	movs	r0, #0x7
 8069726: e779         	b	0x806961c <__gnu_unwind_pr_common+0xb4> @ imm = #-0x10e
 8069728: 6823         	ldr	r3, [r4]
 806972a: f023 4b00    	bic	r11, r3, #0x80000000
 806972e: f1b8 0f00    	cmp.w	r8, #0x0
 8069732: d1d5         	bne	0x80696e0 <__gnu_unwind_pr_common+0x178> @ imm = #-0x56
 8069734: 9a02         	ldr	r2, [sp, #0x8]
 8069736: b112         	cbz	r2, 0x806973e <__gnu_unwind_pr_common+0x1d6> @ imm = #0x4
 8069738: f1bb 0f00    	cmp.w	r11, #0x0
 806973c: d1ae         	bne	0x806969c <__gnu_unwind_pr_common+0x134> @ imm = #-0xa4
 806973e: f105 0358    	add.w	r3, r5, #0x58
 8069742: f8cd 800c    	str.w	r8, [sp, #0xc]
 8069746: f104 0a04    	add.w	r10, r4, #0x4
 806974a: 46b0         	mov	r8, r6
 806974c: f04f 0900    	mov.w	r9, #0x0
 8069750: 461e         	mov	r6, r3
 8069752: e00d         	b	0x8069770 <__gnu_unwind_pr_common+0x208> @ imm = #0x1a
 8069754: 4650         	mov	r0, r10
 8069756: 9604         	str	r6, [sp, #0x10]
 8069758: 2200         	movs	r2, #0x0
 806975a: f7ff fd71    	bl	0x8069240 <_Unwind_decode_typeinfo_ptr.constprop.0> @ imm = #-0x51e
 806975e: ab04         	add	r3, sp, #0x10
 8069760: 4601         	mov	r1, r0
 8069762: 4628         	mov	r0, r5
 8069764: f10a 0a04    	add.w	r10, r10, #0x4
 8069768: f3af 8000    	nop.w
 806976c: 2800         	cmp	r0, #0x0
 806976e: d14a         	bne	0x8069806 <__gnu_unwind_pr_common+0x29e> @ imm = #0x94
 8069770: 45d9         	cmp	r9, r11
 8069772: f109 0901    	add.w	r9, r9, #0x1
 8069776: d1ed         	bne	0x8069754 <__gnu_unwind_pr_common+0x1ec> @ imm = #-0x26
 8069778: 210d         	movs	r1, #0xd
 806977a: 4638         	mov	r0, r7
 806977c: f7ff fe84    	bl	0x8069488 <_Unwind_GetGR> @ imm = #-0x2f8
 8069780: 9b04         	ldr	r3, [sp, #0x10]
 8069782: 4602         	mov	r2, r0
 8069784: 2006         	movs	r0, #0x6
 8069786: 622a         	str	r2, [r5, #0x20]
 8069788: e9c5 3409    	strd	r3, r4, [r5, #36]
 806978c: e746         	b	0x806961c <__gnu_unwind_pr_common+0xb4> @ imm = #-0x174
 806978e: f1b8 0f00    	cmp.w	r8, #0x0
 8069792: d1af         	bne	0x80696f4 <__gnu_unwind_pr_common+0x18c> @ imm = #-0xa2
 8069794: 6863         	ldr	r3, [r4, #0x4]
 8069796: 6822         	ldr	r2, [r4]
 8069798: 1c99         	adds	r1, r3, #0x2
 806979a: ea4f 72d2    	lsr.w	r2, r2, #0x1f
 806979e: f43f af3c    	beq.w	0x806961a <__gnu_unwind_pr_common+0xb2> @ imm = #-0x188
 80697a2: f105 0158    	add.w	r1, r5, #0x58
 80697a6: 3301         	adds	r3, #0x1
 80697a8: 9104         	str	r1, [sp, #0x10]
 80697aa: d031         	beq	0x8069810 <__gnu_unwind_pr_common+0x2a8> @ imm = #0x62
 80697ac: 1d20         	adds	r0, r4, #0x4
 80697ae: f7ff fd47    	bl	0x8069240 <_Unwind_decode_typeinfo_ptr.constprop.0> @ imm = #-0x572
 80697b2: ab04         	add	r3, sp, #0x10
 80697b4: 4601         	mov	r1, r0
 80697b6: 4628         	mov	r0, r5
 80697b8: f3af 8000    	nop.w
 80697bc: 2800         	cmp	r0, #0x0
 80697be: f43f af78    	beq.w	0x80696b2 <__gnu_unwind_pr_common+0x14a> @ imm = #-0x110
 80697c2: 4681         	mov	r9, r0
 80697c4: 210d         	movs	r1, #0xd
 80697c6: 4638         	mov	r0, r7
 80697c8: f7ff fe5e    	bl	0x8069488 <_Unwind_GetGR> @ imm = #-0x344
 80697cc: f1b9 0f02    	cmp.w	r9, #0x2
 80697d0: 6228         	str	r0, [r5, #0x20]
 80697d2: d122         	bne	0x806981a <__gnu_unwind_pr_common+0x2b2> @ imm = #0x44
 80697d4: 462b         	mov	r3, r5
 80697d6: 9a04         	ldr	r2, [sp, #0x10]
 80697d8: f843 2f2c    	str	r2, [r3, #44]!
 80697dc: 626b         	str	r3, [r5, #0x24]
 80697de: 2006         	movs	r0, #0x6
 80697e0: 62ac         	str	r4, [r5, #0x28]
 80697e2: e71b         	b	0x806961c <__gnu_unwind_pr_common+0xb4> @ imm = #-0x1ca
 80697e4: 6aab         	ldr	r3, [r5, #0x28]
 80697e6: 429c         	cmp	r4, r3
 80697e8: d182         	bne	0x80696f0 <__gnu_unwind_pr_common+0x188> @ imm = #-0xfc
 80697ea: 2304         	movs	r3, #0x4
 80697ec: 2200         	movs	r2, #0x0
 80697ee: f8c5 b028    	str.w	r11, [r5, #0x28]
 80697f2: e9c5 230b    	strd	r2, r3, [r5, #44]
 80697f6: 18e3         	adds	r3, r4, r3
 80697f8: 636b         	str	r3, [r5, #0x34]
 80697fa: 6823         	ldr	r3, [r4]
 80697fc: 2b00         	cmp	r3, #0x0
 80697fe: db0f         	blt	0x8069820 <__gnu_unwind_pr_common+0x2b8> @ imm = #0x1e
 8069800: 2301         	movs	r3, #0x1
 8069802: 9301         	str	r3, [sp, #0x4]
 8069804: e74d         	b	0x80696a2 <__gnu_unwind_pr_common+0x13a> @ imm = #-0x166
 8069806: 4646         	mov	r6, r8
 8069808: 6823         	ldr	r3, [r4]
 806980a: f8dd 800c    	ldr.w	r8, [sp, #0xc]
 806980e: e745         	b	0x806969c <__gnu_unwind_pr_common+0x134> @ imm = #-0x176
 8069810: 210d         	movs	r1, #0xd
 8069812: 4638         	mov	r0, r7
 8069814: f7ff fe38    	bl	0x8069488 <_Unwind_GetGR> @ imm = #-0x390
 8069818: 6228         	str	r0, [r5, #0x20]
 806981a: 9b04         	ldr	r3, [sp, #0x10]
 806981c: 626b         	str	r3, [r5, #0x24]
 806981e: e7de         	b	0x80697de <__gnu_unwind_pr_common+0x276> @ imm = #-0x44
 8069820: f10b 0001    	add.w	r0, r11, #0x1
 8069824: 210f         	movs	r1, #0xf
 8069826: eb04 0080    	add.w	r0, r4, r0, lsl #2
 806982a: e770         	b	0x806970e <__gnu_unwind_pr_common+0x1a6> @ imm = #-0x120

0806982c <$d>:
 806982c: 00 00 00 00  	.word	0x00000000

08069830 <__aeabi_unwind_cpp_pr0>:
 8069830: 2300         	movs	r3, #0x0
 8069832: e699         	b	0x8069568 <__gnu_unwind_pr_common> @ imm = #-0x2ce

08069834 <__aeabi_unwind_cpp_pr1>:
 8069834: 2301         	movs	r3, #0x1
 8069836: e697         	b	0x8069568 <__gnu_unwind_pr_common> @ imm = #-0x2d2

08069838 <__aeabi_unwind_cpp_pr2>:
 8069838: 2302         	movs	r3, #0x2
 806983a: e695         	b	0x8069568 <__gnu_unwind_pr_common> @ imm = #-0x2d6

0806983c <_Unwind_VRS_Pop>:
 806983c: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
 8069840: 4606         	mov	r6, r0
 8069842: b0c3         	sub	sp, #0x10c
 8069844: 4615         	mov	r5, r2
 8069846: 461c         	mov	r4, r3
 8069848: 2904         	cmp	r1, #0x4
 806984a: f200 80c2    	bhi.w	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0x184
 806984e: e8df f001    	tbb	[pc, r1]

08069852 <$d>:
 8069852: a3 59 c0 2c  	.word	0x2cc059a3
 8069856: 03           	.byte	0x03

08069857 <$d>:
 8069857: 00           	.byte	0x00

08069858 <$t>:
 8069858: 2c00         	cmp	r4, #0x0
 806985a: f040 80ba    	bne.w	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0x174
 806985e: 2a10         	cmp	r2, #0x10
 8069860: f200 80b7    	bhi.w	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0x16e
 8069864: 6803         	ldr	r3, [r0]
 8069866: 06df         	lsls	r7, r3, #0x1b
 8069868: f100 80b7    	bmi.w	0x80699da <_Unwind_VRS_Pop+0x19e> @ imm = #0x16e
 806986c: af20         	add	r7, sp, #0x80
 806986e: 4638         	mov	r0, r7
 8069870: f000 f9b0    	bl	0x8069bd4 <__gnu_Unwind_Save_WMMXC> @ imm = #0x360
 8069874: 6bb4         	ldr	r4, [r6, #0x38]
 8069876: 4639         	mov	r1, r7
 8069878: 2300         	movs	r3, #0x0
 806987a: f04f 0c01    	mov.w	r12, #0x1
 806987e: fa0c f203    	lsl.w	r2, r12, r3
 8069882: 4620         	mov	r0, r4
 8069884: 3301         	adds	r3, #0x1
 8069886: 422a         	tst	r2, r5
 8069888: d003         	beq	0x8069892 <_Unwind_VRS_Pop+0x56> @ imm = #0x6
 806988a: f850 2b04    	ldr	r2, [r0], #4
 806988e: 4604         	mov	r4, r0
 8069890: 600a         	str	r2, [r1]
 8069892: 2b04         	cmp	r3, #0x4
 8069894: f101 0104    	add.w	r1, r1, #0x4
 8069898: d1f1         	bne	0x806987e <_Unwind_VRS_Pop+0x42> @ imm = #-0x1e
 806989a: 4638         	mov	r0, r7
 806989c: 63b4         	str	r4, [r6, #0x38]
 806989e: f000 f98f    	bl	0x8069bc0 <__gnu_Unwind_Restore_WMMXC> @ imm = #0x31e
 80698a2: 2000         	movs	r0, #0x0
 80698a4: b043         	add	sp, #0x10c
 80698a6: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 80698aa: 2c03         	cmp	r4, #0x3
 80698ac: f040 8091    	bne.w	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0x122
 80698b0: fa1f f882    	uxth.w	r8, r2
 80698b4: 0c14         	lsrs	r4, r2, #0x10
 80698b6: eb08 4512    	add.w	r5, r8, r2, lsr #16
 80698ba: 2d10         	cmp	r5, #0x10
 80698bc: f200 8089    	bhi.w	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0x112
 80698c0: 6803         	ldr	r3, [r0]
 80698c2: 071a         	lsls	r2, r3, #0x1c
 80698c4: f100 80cd    	bmi.w	0x8069a62 <_Unwind_VRS_Pop+0x226> @ imm = #0x19a
 80698c8: af20         	add	r7, sp, #0x80
 80698ca: 4638         	mov	r0, r7
 80698cc: f000 f956    	bl	0x8069b7c <__gnu_Unwind_Save_WMMXD> @ imm = #0x2ac
 80698d0: 6bb5         	ldr	r5, [r6, #0x38]
 80698d2: eb07 01c4    	add.w	r1, r7, r4, lsl #3
 80698d6: f1b8 0f00    	cmp.w	r8, #0x0
 80698da: d00b         	beq	0x80698f4 <_Unwind_VRS_Pop+0xb8> @ imm = #0x16
 80698dc: 460b         	mov	r3, r1
 80698de: eb01 01c8    	add.w	r1, r1, r8, lsl #3
 80698e2: ea4f 08c8    	lsl.w	r8, r8, #0x3
 80698e6: 1ae8         	subs	r0, r5, r3
 80698e8: 581a         	ldr	r2, [r3, r0]
 80698ea: f843 2b04    	str	r2, [r3], #4
 80698ee: 428b         	cmp	r3, r1
 80698f0: d1fa         	bne	0x80698e8 <_Unwind_VRS_Pop+0xac> @ imm = #-0xc
 80698f2: 4445         	add	r5, r8
 80698f4: 4638         	mov	r0, r7
 80698f6: 63b5         	str	r5, [r6, #0x38]
 80698f8: f000 f91e    	bl	0x8069b38 <__gnu_Unwind_Restore_WMMXD> @ imm = #0x23c
 80698fc: 2000         	movs	r0, #0x0
 80698fe: b043         	add	sp, #0x10c
 8069900: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8069904: f004 03fb    	and	r3, r4, #0xfb
 8069908: ea4f 4812    	lsr.w	r8, r2, #0x10
 806990c: b295         	uxth	r5, r2
 806990e: 2b01         	cmp	r3, #0x1
 8069910: d15f         	bne	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0xbe
 8069912: 2c01         	cmp	r4, #0x1
 8069914: eb08 0905    	add.w	r9, r8, r5
 8069918: d058         	beq	0x80699cc <_Unwind_VRS_Pop+0x190> @ imm = #0xb0
 806991a: f1b9 0f20    	cmp.w	r9, #0x20
 806991e: d858         	bhi	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0xb0
 8069920: f1b8 0f0f    	cmp.w	r8, #0xf
 8069924: d975         	bls	0x8069a12 <_Unwind_VRS_Pop+0x1d6> @ imm = #0xea
 8069926: 2c05         	cmp	r4, #0x5
 8069928: 46a9         	mov	r9, r5
 806992a: f000 80a4    	beq.w	0x8069a76 <_Unwind_VRS_Pop+0x23a> @ imm = #0x148
 806992e: 2d00         	cmp	r5, #0x0
 8069930: d14f         	bne	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0x9e
 8069932: 6bb3         	ldr	r3, [r6, #0x38]
 8069934: b365         	cbz	r5, 0x8069990 <_Unwind_VRS_Pop+0x154> @ imm = #0x58
 8069936: af20         	add	r7, sp, #0x80
 8069938: f04f 0900    	mov.w	r9, #0x0
 806993c: eb07 07c8    	add.w	r7, r7, r8, lsl #3
 8069940: eb03 05c5    	add.w	r5, r3, r5, lsl #3
 8069944: 3f04         	subs	r7, #0x4
 8069946: f853 1b04    	ldr	r1, [r3], #4
 806994a: 429d         	cmp	r5, r3
 806994c: f847 1f04    	str	r1, [r7, #4]!
 8069950: d1f9         	bne	0x8069946 <_Unwind_VRS_Pop+0x10a> @ imm = #-0xe
 8069952: f1b9 0f00    	cmp.w	r9, #0x0
 8069956: d00f         	beq	0x8069978 <_Unwind_VRS_Pop+0x13c> @ imm = #0x1e
 8069958: 466f         	mov	r7, sp
 806995a: 4641         	mov	r1, r8
 806995c: eb03 05c9    	add.w	r5, r3, r9, lsl #3
 8069960: 2910         	cmp	r1, #0x10
 8069962: bf38         	it	lo
 8069964: 2110         	movlo	r1, #0x10
 8069966: eb07 01c1    	add.w	r1, r7, r1, lsl #3
 806996a: 3984         	subs	r1, #0x84
 806996c: f853 0b04    	ldr	r0, [r3], #4
 8069970: 429d         	cmp	r5, r3
 8069972: f841 0f04    	str	r0, [r1, #4]!
 8069976: d1f9         	bne	0x806996c <_Unwind_VRS_Pop+0x130> @ imm = #-0xe
 8069978: 2c01         	cmp	r4, #0x1
 806997a: d07a         	beq	0x8069a72 <_Unwind_VRS_Pop+0x236> @ imm = #0xf4
 806997c: f1b8 0f0f    	cmp.w	r8, #0xf
 8069980: 63b5         	str	r5, [r6, #0x38]
 8069982: d96a         	bls	0x8069a5a <_Unwind_VRS_Pop+0x21e> @ imm = #0xd4
 8069984: f1b9 0f00    	cmp.w	r9, #0x0
 8069988: d002         	beq	0x8069990 <_Unwind_VRS_Pop+0x154> @ imm = #0x4
 806998a: 4668         	mov	r0, sp
 806998c: f000 f8cc    	bl	0x8069b28 <__gnu_Unwind_Restore_VFP_D_16_to_31> @ imm = #0x198
 8069990: 2000         	movs	r0, #0x0
 8069992: b043         	add	sp, #0x10c
 8069994: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8069998: b9dc         	cbnz	r4, 0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #0x36
 806999a: 6b87         	ldr	r7, [r0, #0x38]
 806999c: 4623         	mov	r3, r4
 806999e: fa1f fc82    	uxth.w	r12, r2
 80699a2: 2001         	movs	r0, #0x1
 80699a4: 1d34         	adds	r4, r6, #0x4
 80699a6: fa00 f103    	lsl.w	r1, r0, r3
 80699aa: 463a         	mov	r2, r7
 80699ac: ea11 0f0c    	tst.w	r1, r12
 80699b0: d004         	beq	0x80699bc <_Unwind_VRS_Pop+0x180> @ imm = #0x8
 80699b2: f852 1b04    	ldr	r1, [r2], #4
 80699b6: 4617         	mov	r7, r2
 80699b8: f844 1023    	str.w	r1, [r4, r3, lsl #2]
 80699bc: 3301         	adds	r3, #0x1
 80699be: 2b10         	cmp	r3, #0x10
 80699c0: d1f1         	bne	0x80699a6 <_Unwind_VRS_Pop+0x16a> @ imm = #-0x1e
 80699c2: f415 5000    	ands	r0, r5, #0x2000
 80699c6: d1e3         	bne	0x8069990 <_Unwind_VRS_Pop+0x154> @ imm = #-0x3a
 80699c8: 63b7         	str	r7, [r6, #0x38]
 80699ca: e003         	b	0x80699d4 <_Unwind_VRS_Pop+0x198> @ imm = #0x6
 80699cc: f1b9 0f10    	cmp.w	r9, #0x10
 80699d0: d90b         	bls	0x80699ea <_Unwind_VRS_Pop+0x1ae> @ imm = #0x16
 80699d2: 2002         	movs	r0, #0x2
 80699d4: b043         	add	sp, #0x10c
 80699d6: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 80699da: f023 0310    	bic	r3, r3, #0x10
 80699de: f500 70e8    	add.w	r0, r0, #0x1d0
 80699e2: 6033         	str	r3, [r6]
 80699e4: f000 f8f6    	bl	0x8069bd4 <__gnu_Unwind_Save_WMMXC> @ imm = #0x1ec
 80699e8: e740         	b	0x806986c <_Unwind_VRS_Pop+0x30> @ imm = #-0x180
 80699ea: f1b8 0f0f    	cmp.w	r8, #0xf
 80699ee: d8f0         	bhi	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #-0x20
 80699f0: 6803         	ldr	r3, [r0]
 80699f2: 07d8         	lsls	r0, r3, #0x1f
 80699f4: d450         	bmi	0x8069a98 <_Unwind_VRS_Pop+0x25c> @ imm = #0xa0
 80699f6: af20         	add	r7, sp, #0x80
 80699f8: 4638         	mov	r0, r7
 80699fa: f000 f889    	bl	0x8069b10 <__gnu_Unwind_Save_VFP> @ imm = #0x112
 80699fe: 6bb3         	ldr	r3, [r6, #0x38]
 8069a00: 2d00         	cmp	r5, #0x0
 8069a02: d199         	bne	0x8069938 <_Unwind_VRS_Pop+0xfc> @ imm = #-0xce
 8069a04: 461d         	mov	r5, r3
 8069a06: 3504         	adds	r5, #0x4
 8069a08: 4638         	mov	r0, r7
 8069a0a: 63b5         	str	r5, [r6, #0x38]
 8069a0c: f000 f87c    	bl	0x8069b08 <__gnu_Unwind_Restore_VFP> @ imm = #0xf8
 8069a10: e7be         	b	0x8069990 <_Unwind_VRS_Pop+0x154> @ imm = #-0x84
 8069a12: f1b9 0f10    	cmp.w	r9, #0x10
 8069a16: d958         	bls	0x8069aca <_Unwind_VRS_Pop+0x28e> @ imm = #0xb0
 8069a18: 2c05         	cmp	r4, #0x5
 8069a1a: d1da         	bne	0x80699d2 <_Unwind_VRS_Pop+0x196> @ imm = #-0x4c
 8069a1c: 6833         	ldr	r3, [r6]
 8069a1e: f1a9 0910    	sub.w	r9, r9, #0x10
 8069a22: 07dd         	lsls	r5, r3, #0x1f
 8069a24: d509         	bpl	0x8069a3a <_Unwind_VRS_Pop+0x1fe> @ imm = #0x12
 8069a26: f023 0301    	bic	r3, r3, #0x1
 8069a2a: 4630         	mov	r0, r6
 8069a2c: f043 0302    	orr	r3, r3, #0x2
 8069a30: f840 3b48    	str	r3, [r0], #72
 8069a34: f000 f874    	bl	0x8069b20 <__gnu_Unwind_Save_VFP_D> @ imm = #0xe8
 8069a38: 6833         	ldr	r3, [r6]
 8069a3a: 0759         	lsls	r1, r3, #0x1d
 8069a3c: d421         	bmi	0x8069a82 <_Unwind_VRS_Pop+0x246> @ imm = #0x42
 8069a3e: a820         	add	r0, sp, #0x80
 8069a40: f000 f86e    	bl	0x8069b20 <__gnu_Unwind_Save_VFP_D> @ imm = #0xdc
 8069a44: 466f         	mov	r7, sp
 8069a46: f1c8 0510    	rsb.w	r5, r8, #0x10
 8069a4a: 4638         	mov	r0, r7
 8069a4c: f000 f870    	bl	0x8069b30 <__gnu_Unwind_Save_VFP_D_16_to_31> @ imm = #0xe0
 8069a50: 2d00         	cmp	r5, #0x0
 8069a52: 6bb3         	ldr	r3, [r6, #0x38]
 8069a54: dd81         	ble	0x806995a <_Unwind_VRS_Pop+0x11e> @ imm = #-0xfe
 8069a56: af20         	add	r7, sp, #0x80
 8069a58: e770         	b	0x806993c <_Unwind_VRS_Pop+0x100> @ imm = #-0x120
 8069a5a: a820         	add	r0, sp, #0x80
 8069a5c: f000 f85c    	bl	0x8069b18 <__gnu_Unwind_Restore_VFP_D> @ imm = #0xb8
 8069a60: e790         	b	0x8069984 <_Unwind_VRS_Pop+0x148> @ imm = #-0xe0
 8069a62: f023 0308    	bic	r3, r3, #0x8
 8069a66: f500 70a8    	add.w	r0, r0, #0x150
 8069a6a: 6033         	str	r3, [r6]
 8069a6c: f000 f886    	bl	0x8069b7c <__gnu_Unwind_Save_WMMXD> @ imm = #0x10c
 8069a70: e72a         	b	0x80698c8 <_Unwind_VRS_Pop+0x8c> @ imm = #-0x1ac
 8069a72: af20         	add	r7, sp, #0x80
 8069a74: e7c7         	b	0x8069a06 <_Unwind_VRS_Pop+0x1ca> @ imm = #-0x72
 8069a76: 2d00         	cmp	r5, #0x0
 8069a78: f43f af5b    	beq.w	0x8069932 <_Unwind_VRS_Pop+0xf6> @ imm = #-0x14a
 8069a7c: 6833         	ldr	r3, [r6]
 8069a7e: 075a         	lsls	r2, r3, #0x1d
 8069a80: d5e0         	bpl	0x8069a44 <_Unwind_VRS_Pop+0x208> @ imm = #-0x40
 8069a82: f023 0304    	bic	r3, r3, #0x4
 8069a86: 4630         	mov	r0, r6
 8069a88: f840 3bd0    	str	r3, [r0], #208
 8069a8c: f000 f850    	bl	0x8069b30 <__gnu_Unwind_Save_VFP_D_16_to_31> @ imm = #0xa0
 8069a90: f1b8 0f0f    	cmp.w	r8, #0xf
 8069a94: d8d6         	bhi	0x8069a44 <_Unwind_VRS_Pop+0x208> @ imm = #-0x54
 8069a96: e7d2         	b	0x8069a3e <_Unwind_VRS_Pop+0x202> @ imm = #-0x5c
 8069a98: f023 0303    	bic	r3, r3, #0x3
 8069a9c: 4630         	mov	r0, r6
 8069a9e: f840 3b48    	str	r3, [r0], #72
 8069aa2: f000 f835    	bl	0x8069b10 <__gnu_Unwind_Save_VFP> @ imm = #0x6a
 8069aa6: 2c01         	cmp	r4, #0x1
 8069aa8: d0a5         	beq	0x80699f6 <_Unwind_VRS_Pop+0x1ba> @ imm = #-0xb6
 8069aaa: f1b8 0f0f    	cmp.w	r8, #0xf
 8069aae: f63f af40    	bhi.w	0x8069932 <_Unwind_VRS_Pop+0xf6> @ imm = #-0x180
 8069ab2: af20         	add	r7, sp, #0x80
 8069ab4: 4638         	mov	r0, r7
 8069ab6: f000 f833    	bl	0x8069b20 <__gnu_Unwind_Save_VFP_D> @ imm = #0x66
 8069aba: 6bb3         	ldr	r3, [r6, #0x38]
 8069abc: 2d00         	cmp	r5, #0x0
 8069abe: f47f af3b    	bne.w	0x8069938 <_Unwind_VRS_Pop+0xfc> @ imm = #-0x18a
 8069ac2: 4638         	mov	r0, r7
 8069ac4: f000 f828    	bl	0x8069b18 <__gnu_Unwind_Restore_VFP_D> @ imm = #0x50
 8069ac8: e762         	b	0x8069990 <_Unwind_VRS_Pop+0x154> @ imm = #-0x13c
 8069aca: 6833         	ldr	r3, [r6]
 8069acc: 07d9         	lsls	r1, r3, #0x1f
 8069ace: d5ea         	bpl	0x8069aa6 <_Unwind_VRS_Pop+0x26a> @ imm = #-0x2c
 8069ad0: 2c05         	cmp	r4, #0x5
 8069ad2: d1e1         	bne	0x8069a98 <_Unwind_VRS_Pop+0x25c> @ imm = #-0x3e
 8069ad4: f023 0301    	bic	r3, r3, #0x1
 8069ad8: 4630         	mov	r0, r6
 8069ada: af20         	add	r7, sp, #0x80
 8069adc: f043 0302    	orr	r3, r3, #0x2
 8069ae0: f840 3b48    	str	r3, [r0], #72
 8069ae4: f000 f81c    	bl	0x8069b20 <__gnu_Unwind_Save_VFP_D> @ imm = #0x38
 8069ae8: 4638         	mov	r0, r7
 8069aea: f000 f819    	bl	0x8069b20 <__gnu_Unwind_Save_VFP_D> @ imm = #0x32
 8069aee: e7e4         	b	0x8069aba <_Unwind_VRS_Pop+0x27e> @ imm = #-0x38

08069af0 <restore_core_regs>:
 8069af0: f100 0134    	add.w	r1, r0, #0x34
 8069af4: e891 0038    	ldm.w	r1, {r3, r4, r5}
 8069af8: 469c         	mov	r12, r3
 8069afa: 46a6         	mov	lr, r4
 8069afc: f84c 5d04    	str	r5, [r12, #-4]!
 8069b00: e890 0fff    	ldm.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11}
 8069b04: 46e5         	mov	sp, r12
 8069b06: bd00         	pop	{pc}

08069b08 <__gnu_Unwind_Restore_VFP>:
 8069b08: ec90 0b21    	<unknown>
 8069b0c: 4770         	bx	lr
 8069b0e: bf00         	nop

08069b10 <__gnu_Unwind_Save_VFP>:
 8069b10: ec80 0b21    	<unknown>
 8069b14: 4770         	bx	lr
 8069b16: bf00         	nop

08069b18 <__gnu_Unwind_Restore_VFP_D>:
 8069b18: ec90 0b20    	<unknown>
 8069b1c: 4770         	bx	lr
 8069b1e: bf00         	nop

08069b20 <__gnu_Unwind_Save_VFP_D>:
 8069b20: ec80 0b20    	<unknown>
 8069b24: 4770         	bx	lr
 8069b26: bf00         	nop

08069b28 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8069b28: ecd0 0b20    	<unknown>
 8069b2c: 4770         	bx	lr
 8069b2e: bf00         	nop

08069b30 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8069b30: ecc0 0b20    	<unknown>
 8069b34: 4770         	bx	lr
 8069b36: bf00         	nop

08069b38 <__gnu_Unwind_Restore_WMMXD>:
 8069b38: ecf0 0102    	ldcl	p1, c0, [r0], #8
 8069b3c: ecf0 1102    	ldcl	p1, c1, [r0], #8
 8069b40: ecf0 2102    	ldcl	p1, c2, [r0], #8
 8069b44: ecf0 3102    	ldcl	p1, c3, [r0], #8
 8069b48: ecf0 4102    	ldcl	p1, c4, [r0], #8
 8069b4c: ecf0 5102    	ldcl	p1, c5, [r0], #8
 8069b50: ecf0 6102    	ldcl	p1, c6, [r0], #8
 8069b54: ecf0 7102    	ldcl	p1, c7, [r0], #8
 8069b58: ecf0 8102    	ldcl	p1, c8, [r0], #8
 8069b5c: ecf0 9102    	ldcl	p1, c9, [r0], #8
 8069b60: ecf0 a102    	ldcl	p1, c10, [r0], #8
 8069b64: ecf0 b102    	ldcl	p1, c11, [r0], #8
 8069b68: ecf0 c102    	ldcl	p1, c12, [r0], #8
 8069b6c: ecf0 d102    	ldcl	p1, c13, [r0], #8
 8069b70: ecf0 e102    	ldcl	p1, c14, [r0], #8
 8069b74: ecf0 f102    	ldcl	p1, c15, [r0], #8
 8069b78: 4770         	bx	lr
 8069b7a: bf00         	nop

08069b7c <__gnu_Unwind_Save_WMMXD>:
 8069b7c: ece0 0102    	stcl	p1, c0, [r0], #8
 8069b80: ece0 1102    	stcl	p1, c1, [r0], #8
 8069b84: ece0 2102    	stcl	p1, c2, [r0], #8
 8069b88: ece0 3102    	stcl	p1, c3, [r0], #8
 8069b8c: ece0 4102    	stcl	p1, c4, [r0], #8
 8069b90: ece0 5102    	stcl	p1, c5, [r0], #8
 8069b94: ece0 6102    	stcl	p1, c6, [r0], #8
 8069b98: ece0 7102    	stcl	p1, c7, [r0], #8
 8069b9c: ece0 8102    	stcl	p1, c8, [r0], #8
 8069ba0: ece0 9102    	stcl	p1, c9, [r0], #8
 8069ba4: ece0 a102    	stcl	p1, c10, [r0], #8
 8069ba8: ece0 b102    	stcl	p1, c11, [r0], #8
 8069bac: ece0 c102    	stcl	p1, c12, [r0], #8
 8069bb0: ece0 d102    	stcl	p1, c13, [r0], #8
 8069bb4: ece0 e102    	stcl	p1, c14, [r0], #8
 8069bb8: ece0 f102    	stcl	p1, c15, [r0], #8
 8069bbc: 4770         	bx	lr
 8069bbe: bf00         	nop

08069bc0 <__gnu_Unwind_Restore_WMMXC>:
 8069bc0: fcb0 8101    	ldc2	p1, c8, [r0], #4
 8069bc4: fcb0 9101    	ldc2	p1, c9, [r0], #4
 8069bc8: fcb0 a101    	ldc2	p1, c10, [r0], #4
 8069bcc: fcb0 b101    	ldc2	p1, c11, [r0], #4
 8069bd0: 4770         	bx	lr
 8069bd2: bf00         	nop

08069bd4 <__gnu_Unwind_Save_WMMXC>:
 8069bd4: fca0 8101    	stc2	p1, c8, [r0], #4
 8069bd8: fca0 9101    	stc2	p1, c9, [r0], #4
 8069bdc: fca0 a101    	stc2	p1, c10, [r0], #4
 8069be0: fca0 b101    	stc2	p1, c11, [r0], #4
 8069be4: 4770         	bx	lr
 8069be6: bf00         	nop

08069be8 <___Unwind_RaiseException>:
 8069be8: 46ec         	mov	r12, sp
 8069bea: b500         	push	{lr}
 8069bec: e92d 5000    	push.w	{r12, lr}
 8069bf0: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
 8069bf4: f04f 0300    	mov.w	r3, #0x0
 8069bf8: e92d 000c    	push.w	{r2, r3}
 8069bfc: a901         	add	r1, sp, #0x4
 8069bfe: f7ff fbb7    	bl	0x8069370 <__gnu_Unwind_RaiseException> @ imm = #-0x892
 8069c02: f8dd e040    	ldr.w	lr, [sp, #0x40]
 8069c06: b012         	add	sp, #0x48
 8069c08: 4770         	bx	lr
 8069c0a: bf00         	nop

08069c0c <___Unwind_Resume>:
 8069c0c: 46ec         	mov	r12, sp
 8069c0e: b500         	push	{lr}
 8069c10: e92d 5000    	push.w	{r12, lr}
 8069c14: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
 8069c18: f04f 0300    	mov.w	r3, #0x0
 8069c1c: e92d 000c    	push.w	{r2, r3}
 8069c20: a901         	add	r1, sp, #0x4
 8069c22: f7ff fbe3    	bl	0x80693ec <__gnu_Unwind_Resume> @ imm = #-0x83a
 8069c26: f8dd e040    	ldr.w	lr, [sp, #0x40]
 8069c2a: b012         	add	sp, #0x48
 8069c2c: 4770         	bx	lr
 8069c2e: bf00         	nop

08069c30 <___Unwind_Resume_or_Rethrow>:
 8069c30: 46ec         	mov	r12, sp
 8069c32: b500         	push	{lr}
 8069c34: e92d 5000    	push.w	{r12, lr}
 8069c38: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
 8069c3c: f04f 0300    	mov.w	r3, #0x0
 8069c40: e92d 000c    	push.w	{r2, r3}
 8069c44: a901         	add	r1, sp, #0x4
 8069c46: f7ff fbf3    	bl	0x8069430 <__gnu_Unwind_Resume_or_Rethrow> @ imm = #-0x81a
 8069c4a: f8dd e040    	ldr.w	lr, [sp, #0x40]
 8069c4e: b012         	add	sp, #0x48
 8069c50: 4770         	bx	lr
 8069c52: bf00         	nop

08069c54 <___Unwind_ForcedUnwind>:
 8069c54: 46ec         	mov	r12, sp
 8069c56: b500         	push	{lr}
 8069c58: e92d 5000    	push.w	{r12, lr}
 8069c5c: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
 8069c60: f04f 0300    	mov.w	r3, #0x0
 8069c64: e92d 000c    	push.w	{r2, r3}
 8069c68: ab01         	add	r3, sp, #0x4
 8069c6a: f7ff fbb5    	bl	0x80693d8 <__gnu_Unwind_ForcedUnwind> @ imm = #-0x896
 8069c6e: f8dd e040    	ldr.w	lr, [sp, #0x40]
 8069c72: b012         	add	sp, #0x48
 8069c74: 4770         	bx	lr
 8069c76: bf00         	nop

08069c78 <___Unwind_Backtrace>:
 8069c78: 46ec         	mov	r12, sp
 8069c7a: b500         	push	{lr}
 8069c7c: e92d 5000    	push.w	{r12, lr}
 8069c80: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
 8069c84: f04f 0300    	mov.w	r3, #0x0
 8069c88: e92d 000c    	push.w	{r2, r3}
 8069c8c: aa01         	add	r2, sp, #0x4
 8069c8e: f7ff fc2d    	bl	0x80694ec <__gnu_Unwind_Backtrace> @ imm = #-0x7a6
 8069c92: f8dd e040    	ldr.w	lr, [sp, #0x40]
 8069c96: b012         	add	sp, #0x48
 8069c98: 4770         	bx	lr
 8069c9a: bf00         	nop

08069c9c <next_unwind_byte>:
 8069c9c: 7a02         	ldrb	r2, [r0, #0x8]
 8069c9e: 4603         	mov	r3, r0
 8069ca0: b98a         	cbnz	r2, 0x8069cc6 <next_unwind_byte+0x2a> @ imm = #0x22
 8069ca2: 7a42         	ldrb	r2, [r0, #0x9]
 8069ca4: b1b2         	cbz	r2, 0x8069cd4 <next_unwind_byte+0x38> @ imm = #0x2c
 8069ca6: 6841         	ldr	r1, [r0, #0x4]
 8069ca8: 3a01         	subs	r2, #0x1
 8069caa: f04f 0c03    	mov.w	r12, #0x3
 8069cae: b410         	push	{r4}
 8069cb0: 7242         	strb	r2, [r0, #0x9]
 8069cb2: 1d0c         	adds	r4, r1, #0x4
 8069cb4: 6808         	ldr	r0, [r1]
 8069cb6: f883 c008    	strb.w	r12, [r3, #0x8]
 8069cba: 0202         	lsls	r2, r0, #0x8
 8069cbc: 605c         	str	r4, [r3, #0x4]
 8069cbe: 0e00         	lsrs	r0, r0, #0x18
 8069cc0: bc10         	pop	{r4}
 8069cc2: 601a         	str	r2, [r3]
 8069cc4: 4770         	bx	lr
 8069cc6: 6800         	ldr	r0, [r0]
 8069cc8: 3a01         	subs	r2, #0x1
 8069cca: 721a         	strb	r2, [r3, #0x8]
 8069ccc: 0202         	lsls	r2, r0, #0x8
 8069cce: 0e00         	lsrs	r0, r0, #0x18
 8069cd0: 601a         	str	r2, [r3]
 8069cd2: 4770         	bx	lr
 8069cd4: 20b0         	movs	r0, #0xb0
 8069cd6: 4770         	bx	lr

08069cd8 <_Unwind_GetGR.constprop.0>:
 8069cd8: b510         	push	{r4, lr}
 8069cda: b084         	sub	sp, #0x10
 8069cdc: 2300         	movs	r3, #0x0
 8069cde: 220c         	movs	r2, #0xc
 8069ce0: ac03         	add	r4, sp, #0xc
 8069ce2: 4619         	mov	r1, r3
 8069ce4: 9400         	str	r4, [sp]
 8069ce6: f7ff fbb5    	bl	0x8069454 <_Unwind_VRS_Get> @ imm = #-0x896
 8069cea: 9803         	ldr	r0, [sp, #0xc]
 8069cec: b004         	add	sp, #0x10
 8069cee: bd10         	pop	{r4, pc}

08069cf0 <unwind_UCB_from_context>:
 8069cf0: e7f2         	b	0x8069cd8 <_Unwind_GetGR.constprop.0> @ imm = #-0x1c
 8069cf2: bf00         	nop

08069cf4 <__gnu_unwind_execute>:
 8069cf4: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
 8069cf8: f04f 0800    	mov.w	r8, #0x0
 8069cfc: b085         	sub	sp, #0x14
 8069cfe: 4606         	mov	r6, r0
 8069d00: 460d         	mov	r5, r1
 8069d02: 4628         	mov	r0, r5
 8069d04: f7ff ffca    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x6c
 8069d08: 28b0         	cmp	r0, #0xb0
 8069d0a: 4604         	mov	r4, r0
 8069d0c: f000 80bc    	beq.w	0x8069e88 <__gnu_unwind_execute+0x194> @ imm = #0x178
 8069d10: 0607         	lsls	r7, r0, #0x18
 8069d12: d520         	bpl	0x8069d56 <__gnu_unwind_execute+0x62> @ imm = #0x40
 8069d14: f000 03f0    	and	r3, r0, #0xf0
 8069d18: 2b80         	cmp	r3, #0x80
 8069d1a: d04e         	beq	0x8069dba <__gnu_unwind_execute+0xc6> @ imm = #0x9c
 8069d1c: 2b90         	cmp	r3, #0x90
 8069d1e: d037         	beq	0x8069d90 <__gnu_unwind_execute+0x9c> @ imm = #0x6e
 8069d20: 2ba0         	cmp	r3, #0xa0
 8069d22: d061         	beq	0x8069de8 <__gnu_unwind_execute+0xf4> @ imm = #0xc2
 8069d24: 2bb0         	cmp	r3, #0xb0
 8069d26: d076         	beq	0x8069e16 <__gnu_unwind_execute+0x122> @ imm = #0xec
 8069d28: 2bc0         	cmp	r3, #0xc0
 8069d2a: f000 808d    	beq.w	0x8069e48 <__gnu_unwind_execute+0x154> @ imm = #0x11a
 8069d2e: f000 03f8    	and	r3, r0, #0xf8
 8069d32: 2bd0         	cmp	r3, #0xd0
 8069d34: d10b         	bne	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #0x16
 8069d36: f000 0207    	and	r2, r0, #0x7
 8069d3a: 2305         	movs	r3, #0x5
 8069d3c: 2101         	movs	r1, #0x1
 8069d3e: 4630         	mov	r0, r6
 8069d40: 3201         	adds	r2, #0x1
 8069d42: f442 2200    	orr	r2, r2, #0x80000
 8069d46: f7ff fd79    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x50e
 8069d4a: 2800         	cmp	r0, #0x0
 8069d4c: d0d9         	beq	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x4e
 8069d4e: 2009         	movs	r0, #0x9
 8069d50: b005         	add	sp, #0x14
 8069d52: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 8069d56: 0083         	lsls	r3, r0, #0x2
 8069d58: f10d 090c    	add.w	r9, sp, #0xc
 8069d5c: 220d         	movs	r2, #0xd
 8069d5e: 4630         	mov	r0, r6
 8069d60: b2db         	uxtb	r3, r3
 8069d62: f8cd 9000    	str.w	r9, [sp]
 8069d66: 1d1f         	adds	r7, r3, #0x4
 8069d68: 2300         	movs	r3, #0x0
 8069d6a: 4619         	mov	r1, r3
 8069d6c: f7ff fb72    	bl	0x8069454 <_Unwind_VRS_Get> @ imm = #-0x91c
 8069d70: 9b03         	ldr	r3, [sp, #0xc]
 8069d72: 0660         	lsls	r0, r4, #0x19
 8069d74: f04f 020d    	mov.w	r2, #0xd
 8069d78: 4630         	mov	r0, r6
 8069d7a: f8cd 9000    	str.w	r9, [sp]
 8069d7e: bf4c         	ite	mi
 8069d80: 1bdf         	submi	r7, r3, r7
 8069d82: 18ff         	addpl	r7, r7, r3
 8069d84: 2300         	movs	r3, #0x0
 8069d86: 9703         	str	r7, [sp, #0xc]
 8069d88: 4619         	mov	r1, r3
 8069d8a: f7ff fb89    	bl	0x80694a0 <_Unwind_VRS_Set> @ imm = #-0x8ee
 8069d8e: e7b8         	b	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x90
 8069d90: f000 030d    	and	r3, r0, #0xd
 8069d94: 2b0d         	cmp	r3, #0xd
 8069d96: d0da         	beq	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x4c
 8069d98: af03         	add	r7, sp, #0xc
 8069d9a: 2300         	movs	r3, #0x0
 8069d9c: f000 020f    	and	r2, r0, #0xf
 8069da0: 4630         	mov	r0, r6
 8069da2: 4619         	mov	r1, r3
 8069da4: 9700         	str	r7, [sp]
 8069da6: f7ff fb55    	bl	0x8069454 <_Unwind_VRS_Get> @ imm = #-0x956
 8069daa: 2300         	movs	r3, #0x0
 8069dac: 220d         	movs	r2, #0xd
 8069dae: 4630         	mov	r0, r6
 8069db0: 4619         	mov	r1, r3
 8069db2: 9700         	str	r7, [sp]
 8069db4: f7ff fb74    	bl	0x80694a0 <_Unwind_VRS_Set> @ imm = #-0x918
 8069db8: e7a3         	b	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0xba
 8069dba: 0224         	lsls	r4, r4, #0x8
 8069dbc: 4628         	mov	r0, r5
 8069dbe: f7ff ff6d    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x126
 8069dc2: 4320         	orrs	r0, r4
 8069dc4: f5b0 4f00    	cmp.w	r0, #0x8000
 8069dc8: d0c1         	beq	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x7e
 8069dca: 0104         	lsls	r4, r0, #0x4
 8069dcc: 2300         	movs	r3, #0x0
 8069dce: 4630         	mov	r0, r6
 8069dd0: b2a2         	uxth	r2, r4
 8069dd2: 4619         	mov	r1, r3
 8069dd4: f7ff fd32    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x59c
 8069dd8: 2800         	cmp	r0, #0x0
 8069dda: d1b8         	bne	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x90
 8069ddc: f414 4f00    	tst.w	r4, #0x8000
 8069de0: bf18         	it	ne
 8069de2: f04f 0801    	movne.w	r8, #0x1
 8069de6: e78c         	b	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0xe8
 8069de8: 43c2         	mvns	r2, r0
 8069dea: 0701         	lsls	r1, r0, #0x1c
 8069dec: 4630         	mov	r0, r6
 8069dee: f002 0307    	and	r3, r2, #0x7
 8069df2: f44f 627f    	mov.w	r2, #0xff0
 8069df6: fa42 f203    	asr.w	r2, r2, r3
 8069dfa: f04f 0300    	mov.w	r3, #0x0
 8069dfe: f402 627f    	and	r2, r2, #0xff0
 8069e02: 4619         	mov	r1, r3
 8069e04: bf48         	it	mi
 8069e06: f442 4280    	orrmi	r2, r2, #0x4000
 8069e0a: f7ff fd17    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x5d2
 8069e0e: 2800         	cmp	r0, #0x0
 8069e10: f43f af77    	beq.w	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x112
 8069e14: e79b         	b	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0xca
 8069e16: 28b1         	cmp	r0, #0xb1
 8069e18: d03b         	beq	0x8069e92 <__gnu_unwind_execute+0x19e> @ imm = #0x76
 8069e1a: 28b2         	cmp	r0, #0xb2
 8069e1c: f000 80a1    	beq.w	0x8069f62 <__gnu_unwind_execute+0x26e> @ imm = #0x142
 8069e20: 28b3         	cmp	r0, #0xb3
 8069e22: d041         	beq	0x8069ea8 <__gnu_unwind_execute+0x1b4> @ imm = #0x82
 8069e24: f000 03fc    	and	r3, r0, #0xfc
 8069e28: 2bb4         	cmp	r3, #0xb4
 8069e2a: d090         	beq	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0xe0
 8069e2c: f000 0207    	and	r2, r0, #0x7
 8069e30: 2301         	movs	r3, #0x1
 8069e32: 441a         	add	r2, r3
 8069e34: f442 2200    	orr	r2, r2, #0x80000
 8069e38: 4619         	mov	r1, r3
 8069e3a: 4630         	mov	r0, r6
 8069e3c: f7ff fcfe    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x604
 8069e40: 2800         	cmp	r0, #0x0
 8069e42: f43f af5e    	beq.w	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x144
 8069e46: e782         	b	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0xfc
 8069e48: 28c6         	cmp	r0, #0xc6
 8069e4a: d051         	beq	0x8069ef0 <__gnu_unwind_execute+0x1fc> @ imm = #0xa2
 8069e4c: 28c7         	cmp	r0, #0xc7
 8069e4e: d062         	beq	0x8069f16 <__gnu_unwind_execute+0x222> @ imm = #0xc4
 8069e50: f000 03f8    	and	r3, r0, #0xf8
 8069e54: 2bc0         	cmp	r3, #0xc0
 8069e56: d071         	beq	0x8069f3c <__gnu_unwind_execute+0x248> @ imm = #0xe2
 8069e58: 28c8         	cmp	r0, #0xc8
 8069e5a: d076         	beq	0x8069f4a <__gnu_unwind_execute+0x256> @ imm = #0xec
 8069e5c: 28c9         	cmp	r0, #0xc9
 8069e5e: f47f af76    	bne.w	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x114
 8069e62: 4628         	mov	r0, r5
 8069e64: f7ff ff1a    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x1cc
 8069e68: 0302         	lsls	r2, r0, #0xc
 8069e6a: f000 000f    	and	r0, r0, #0xf
 8069e6e: f402 2270    	and	r2, r2, #0xf0000
 8069e72: 3001         	adds	r0, #0x1
 8069e74: 4302         	orrs	r2, r0
 8069e76: 2101         	movs	r1, #0x1
 8069e78: 2305         	movs	r3, #0x5
 8069e7a: 4630         	mov	r0, r6
 8069e7c: f7ff fcde    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x644
 8069e80: 2800         	cmp	r0, #0x0
 8069e82: f43f af3e    	beq.w	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x184
 8069e86: e762         	b	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x13c
 8069e88: f1b8 0f00    	cmp.w	r8, #0x0
 8069e8c: d01f         	beq	0x8069ece <__gnu_unwind_execute+0x1da> @ imm = #0x3e
 8069e8e: 2000         	movs	r0, #0x0
 8069e90: e75e         	b	0x8069d50 <__gnu_unwind_execute+0x5c> @ imm = #-0x144
 8069e92: 4628         	mov	r0, r5
 8069e94: f7ff ff02    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x1fc
 8069e98: 4602         	mov	r2, r0
 8069e9a: 2800         	cmp	r0, #0x0
 8069e9c: f43f af57    	beq.w	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x152
 8069ea0: f010 03f0    	ands	r3, r0, #0xf0
 8069ea4: d0c8         	beq	0x8069e38 <__gnu_unwind_execute+0x144> @ imm = #-0x70
 8069ea6: e752         	b	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x15c
 8069ea8: 4628         	mov	r0, r5
 8069eaa: f7ff fef7    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x212
 8069eae: f000 030f    	and	r3, r0, #0xf
 8069eb2: 0302         	lsls	r2, r0, #0xc
 8069eb4: 4630         	mov	r0, r6
 8069eb6: 3301         	adds	r3, #0x1
 8069eb8: f402 2270    	and	r2, r2, #0xf0000
 8069ebc: 431a         	orrs	r2, r3
 8069ebe: 2301         	movs	r3, #0x1
 8069ec0: 4619         	mov	r1, r3
 8069ec2: f7ff fcbb    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x68a
 8069ec6: 2800         	cmp	r0, #0x0
 8069ec8: f43f af1b    	beq.w	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x1ca
 8069ecc: e73f         	b	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x182
 8069ece: ac03         	add	r4, sp, #0xc
 8069ed0: 4643         	mov	r3, r8
 8069ed2: 220e         	movs	r2, #0xe
 8069ed4: 4641         	mov	r1, r8
 8069ed6: 4630         	mov	r0, r6
 8069ed8: 9400         	str	r4, [sp]
 8069eda: f7ff fabb    	bl	0x8069454 <_Unwind_VRS_Get> @ imm = #-0xa8a
 8069ede: 4643         	mov	r3, r8
 8069ee0: 220f         	movs	r2, #0xf
 8069ee2: 4630         	mov	r0, r6
 8069ee4: 4641         	mov	r1, r8
 8069ee6: 9400         	str	r4, [sp]
 8069ee8: f7ff fada    	bl	0x80694a0 <_Unwind_VRS_Set> @ imm = #-0xa4c
 8069eec: 4640         	mov	r0, r8
 8069eee: e72f         	b	0x8069d50 <__gnu_unwind_execute+0x5c> @ imm = #-0x1a2
 8069ef0: 4628         	mov	r0, r5
 8069ef2: f7ff fed3    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x25a
 8069ef6: f000 030f    	and	r3, r0, #0xf
 8069efa: 0302         	lsls	r2, r0, #0xc
 8069efc: 4630         	mov	r0, r6
 8069efe: 3301         	adds	r3, #0x1
 8069f00: f402 2270    	and	r2, r2, #0xf0000
 8069f04: 431a         	orrs	r2, r3
 8069f06: 2303         	movs	r3, #0x3
 8069f08: 4619         	mov	r1, r3
 8069f0a: f7ff fc97    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x6d2
 8069f0e: 2800         	cmp	r0, #0x0
 8069f10: f43f aef7    	beq.w	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x212
 8069f14: e71b         	b	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x1ca
 8069f16: 4628         	mov	r0, r5
 8069f18: f7ff fec0    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x280
 8069f1c: 4602         	mov	r2, r0
 8069f1e: 2800         	cmp	r0, #0x0
 8069f20: f43f af15    	beq.w	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x1d6
 8069f24: f010 03f0    	ands	r3, r0, #0xf0
 8069f28: f47f af11    	bne.w	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x1de
 8069f2c: 2104         	movs	r1, #0x4
 8069f2e: 4630         	mov	r0, r6
 8069f30: f7ff fc84    	bl	0x806983c <_Unwind_VRS_Pop> @ imm = #-0x6f8
 8069f34: 2800         	cmp	r0, #0x0
 8069f36: f43f aee4    	beq.w	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x238
 8069f3a: e708         	b	0x8069d4e <__gnu_unwind_execute+0x5a> @ imm = #-0x1f0
 8069f3c: f000 020f    	and	r2, r0, #0xf
 8069f40: 2303         	movs	r3, #0x3
 8069f42: 3201         	adds	r2, #0x1
 8069f44: f442 2220    	orr	r2, r2, #0xa0000
 8069f48: e776         	b	0x8069e38 <__gnu_unwind_execute+0x144> @ imm = #-0x114
 8069f4a: 4628         	mov	r0, r5
 8069f4c: f7ff fea6    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x2b4
 8069f50: f000 02f0    	and	r2, r0, #0xf0
 8069f54: f000 030f    	and	r3, r0, #0xf
 8069f58: 3210         	adds	r2, #0x10
 8069f5a: 3301         	adds	r3, #0x1
 8069f5c: ea43 3202    	orr.w	r2, r3, r2, lsl #12
 8069f60: e789         	b	0x8069e76 <__gnu_unwind_execute+0x182> @ imm = #-0xee
 8069f62: 2300         	movs	r3, #0x0
 8069f64: f10d 090c    	add.w	r9, sp, #0xc
 8069f68: 220d         	movs	r2, #0xd
 8069f6a: 4630         	mov	r0, r6
 8069f6c: 4619         	mov	r1, r3
 8069f6e: f8cd 9000    	str.w	r9, [sp]
 8069f72: f7ff fa6f    	bl	0x8069454 <_Unwind_VRS_Get> @ imm = #-0xb22
 8069f76: 4628         	mov	r0, r5
 8069f78: f7ff fe90    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x2e0
 8069f7c: 0602         	lsls	r2, r0, #0x18
 8069f7e: f04f 0402    	mov.w	r4, #0x2
 8069f82: d50b         	bpl	0x8069f9c <__gnu_unwind_execute+0x2a8> @ imm = #0x16
 8069f84: f000 007f    	and	r0, r0, #0x7f
 8069f88: 9b03         	ldr	r3, [sp, #0xc]
 8069f8a: 40a0         	lsls	r0, r4
 8069f8c: 3407         	adds	r4, #0x7
 8069f8e: 4418         	add	r0, r3
 8069f90: 9003         	str	r0, [sp, #0xc]
 8069f92: 4628         	mov	r0, r5
 8069f94: f7ff fe82    	bl	0x8069c9c <next_unwind_byte> @ imm = #-0x2fc
 8069f98: 0603         	lsls	r3, r0, #0x18
 8069f9a: d4f3         	bmi	0x8069f84 <__gnu_unwind_execute+0x290> @ imm = #-0x1a
 8069f9c: 9b03         	ldr	r3, [sp, #0xc]
 8069f9e: f000 027f    	and	r2, r0, #0x7f
 8069fa2: f8cd 9000    	str.w	r9, [sp]
 8069fa6: 4630         	mov	r0, r6
 8069fa8: 40a2         	lsls	r2, r4
 8069faa: f503 7301    	add.w	r3, r3, #0x204
 8069fae: 441a         	add	r2, r3
 8069fb0: 2300         	movs	r3, #0x0
 8069fb2: 9203         	str	r2, [sp, #0xc]
 8069fb4: 4619         	mov	r1, r3
 8069fb6: 220d         	movs	r2, #0xd
 8069fb8: f7ff fa72    	bl	0x80694a0 <_Unwind_VRS_Set> @ imm = #-0xb1c
 8069fbc: e6a1         	b	0x8069d02 <__gnu_unwind_execute+0xe> @ imm = #-0x2be
 8069fbe: bf00         	nop

08069fc0 <__gnu_unwind_frame>:
 8069fc0: 6cc2         	ldr	r2, [r0, #0x4c]
 8069fc2: 460b         	mov	r3, r1
 8069fc4: f04f 0c03    	mov.w	r12, #0x3
 8069fc8: 4618         	mov	r0, r3
 8069fca: 3208         	adds	r2, #0x8
 8069fcc: f852 3c04    	ldr	r3, [r2, #-4]
 8069fd0: b500         	push	{lr}
 8069fd2: b085         	sub	sp, #0x14
 8069fd4: 9202         	str	r2, [sp, #0x8]
 8069fd6: a901         	add	r1, sp, #0x4
 8069fd8: 0e1a         	lsrs	r2, r3, #0x18
 8069fda: f88d c00c    	strb.w	r12, [sp, #0xc]
 8069fde: 021b         	lsls	r3, r3, #0x8
 8069fe0: f88d 200d    	strb.w	r2, [sp, #0xd]
 8069fe4: 9301         	str	r3, [sp, #0x4]
 8069fe6: f7ff fe85    	bl	0x8069cf4 <__gnu_unwind_execute> @ imm = #-0x2f6
 8069fea: b005         	add	sp, #0x14
 8069fec: f85d fb04    	ldr	pc, [sp], #4

08069ff0 <_Unwind_GetRegionStart>:
 8069ff0: b508         	push	{r3, lr}
 8069ff2: f7ff fe7d    	bl	0x8069cf0 <unwind_UCB_from_context> @ imm = #-0x306
 8069ff6: 6c80         	ldr	r0, [r0, #0x48]
 8069ff8: bd08         	pop	{r3, pc}
 8069ffa: bf00         	nop

08069ffc <_Unwind_GetLanguageSpecificData>:
 8069ffc: b508         	push	{r3, lr}
 8069ffe: f7ff fe77    	bl	0x8069cf0 <unwind_UCB_from_context> @ imm = #-0x312
 806a002: 6cc0         	ldr	r0, [r0, #0x4c]
 806a004: 79c3         	ldrb	r3, [r0, #0x7]
 806a006: 3302         	adds	r3, #0x2
 806a008: eb00 0083    	add.w	r0, r0, r3, lsl #2
 806a00c: bd08         	pop	{r3, pc}
 806a00e: bf00         	nop

0806a010 <__aeabi_ldiv0>:
 806a010: 4770         	bx	lr
 806a012: bf00         	nop

0806a014 <$d>:
 806a014: 00 00 00 00  	.word	0x00000000
 806a018: 00 00 00 00  	.word	0x00000000
 806a01c: 01 02 03 04  	.word	0x04030201
 806a020: 06 07 08 09  	.word	0x09080706

0806a024 <$d>:
 806a024: a0 86 01 00  	.word	0x000186a0
 806a028: 40 0d 03 00  	.word	0x00030d40
 806a02c: 80 1a 06 00  	.word	0x00061a80
 806a030: 00 35 0c 00  	.word	0x000c3500
 806a034: 40 42 0f 00  	.word	0x000f4240
 806a038: 80 84 1e 00  	.word	0x001e8480
 806a03c: 00 09 3d 00  	.word	0x003d0900
 806a040: 00 12 7a 00  	.word	0x007a1200
 806a044: 00 24 f4 00  	.word	0x00f42400
 806a048: 00 36 6e 01  	.word	0x016e3600
 806a04c: 00 48 e8 01  	.word	0x01e84800
 806a050: 00 6c dc 02  	.word	0x02dc6c00
 806a054: 00 00 00 00  	.word	0x00000000
 806a058: 00 00 00 00  	.word	0x00000000
 806a05c: 00 00 00 00  	.word	0x00000000
 806a060: 00 00 00 00  	.word	0x00000000

0806a064 <$d>:
 806a064: 30 78 25 78  	.word	0x78257830
 806a068: 0a 00 74 65  	.word	0x6574000a
 806a06c: 73 74 54 68  	.word	0x68547473
 806a070: 72 65 61 64  	.word	0x64616572
 806a074: 00 00 00 00  	.word	0x00000000

0806a078 <$d>:
 806a078: 25 1f 06 08  	.word	0x08061f25
 806a07c: 6a a0 06 08  	.word	0x0806a06a
 806a080: 80 00 00 00  	.word	0x00000080
 806a084: 00 00 00 00  	.word	0x00000000
 806a088: 01 00 00 00  	.word	0x00000001
 806a08c: 60 3d 00 20  	.word	0x20003d60
 806a090: 00 00 02 42  	.word	0x42020000
 806a094: 00 20 00 00  	.word	0x00002000
 806a098: 02 00 00 00  	.word	0x00000002
 806a09c: 00 00 00 00  	.word	0x00000000
 806a0a0: 00 00 00 00  	.word	0x00000000
 806a0a4: 00 00 00 00  	.word	0x00000000
 806a0a8: 00 00 00 00  	.word	0x00000000
 806a0ac: 00 00 00 00  	.word	0x00000000
 806a0b0: 00 00 00 00  	.word	0x00000000

0806a0b4 <$d>:
 806a0b4: 0f 00 00 00  	.word	0x0000000f

0806a0b8 <$d>:
 806a0b8: 49 44 4c 45  	.word	0x454c4449
 806a0bc: 00           	.byte	0x00

0806a0bd <$d>:
 806a0bd: 54 6d 72 20  	.word	0x20726d54
 806a0c1: 53 76 63 00  	.word	0x00637653
 806a0c5: 54 6d 72 51  	.word	0x51726d54
 806a0c9: 00 00        	.short	0x0000
 806a0cb: 00           	.byte	0x00

0806a0cc <$d>:
 806a0cc: 49 4e 46 00  	.word	0x00464e49
 806a0d0: 69 6e 66 00  	.word	0x00666e69
 806a0d4: 4e 41 4e 00  	.word	0x004e414e
 806a0d8: 6e 61 6e 00  	.word	0x006e616e
 806a0dc: 30 31 32 33  	.word	0x33323130
 806a0e0: 34 35 36 37  	.word	0x37363534
 806a0e4: 38 39 61 62  	.word	0x62613938
 806a0e8: 63 64 65 66  	.word	0x66656463
 806a0ec: 00 00 00 00  	.word	0x00000000

0806a0f0 <$d>:
 806a0f0: 30 31 32 33  	.word	0x33323130
 806a0f4: 34 35 36 37  	.word	0x37363534
 806a0f8: 38 39 41 42  	.word	0x42413938
 806a0fc: 43 44 45 46  	.word	0x46454443
 806a100: 00 00 00 00  	.word	0x00000000
 806a104: 28 6e 75 6c  	.word	0x6c756e28
 806a108: 6c 29 00 00  	.word	0x0000296c
 806a10c: 30 00 00 00  	.word	0x00000030

0806a110 <$d>:
 806a110: 20 20 20 20  	.word	0x20202020
 806a114: 20 20 20 20  	.word	0x20202020
 806a118: 20 20 20 20  	.word	0x20202020
 806a11c: 20 20 20 20  	.word	0x20202020

0806a120 <zeroes.0>:
 806a120: 30 30 30 30 30 30 30 30         00000000
 806a128: 30 30 30 30 30 30 30 30         00000000

0806a130 <$d>:
 806a130: 4e 61 4e 00  	.word	0x004e614e
 806a134: 49 6e 66 69  	.word	0x69666e49
 806a138: 6e 69 74 79  	.word	0x7974696e
 806a13c: 00 00 00 00  	.word	0x00000000

0806a140 <$d>:
 806a140: 42 61 6c 6c  	.word	0x6c6c6142
 806a144: 6f 63 20 73  	.word	0x7320636f
 806a148: 75 63 63 65  	.word	0x65636375
 806a14c: 65 64 65 64  	.word	0x64656465
 806a150: 00 00 00 00  	.word	0x00000000
 806a154: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 806a158: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 806a15c: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 806a160: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 806a164: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 806a168: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 806a16c: 6e 65 77 6c  	.word	0x6c77656e
 806a170: 69 62 2f 6c  	.word	0x6c2f6269
 806a174: 69 62 63 2f  	.word	0x2f636269
 806a178: 73 74 64 6c  	.word	0x6c647473
 806a17c: 69 62 2f 64  	.word	0x642f6269
 806a180: 74 6f 61 2e  	.word	0x2e616f74
 806a184: 63 00 00 00  	.word	0x00000063

0806a188 <$d>:
 806a188: 98 23 00 20  	.word	0x20002398
 806a18c: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 806a190: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 806a194: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 806a198: 2e 2e 2f 2e  	.word	0x2e2f2e2e
 806a19c: 2e 2f 2e 2e  	.word	0x2e2e2f2e
 806a1a0: 2f 2e 2e 2f  	.word	0x2f2e2e2f
 806a1a4: 6e 65 77 6c  	.word	0x6c77656e
 806a1a8: 69 62 2f 6c  	.word	0x6c2f6269
 806a1ac: 69 62 63 2f  	.word	0x2f636269
 806a1b0: 73 74 64 6c  	.word	0x6c647473
 806a1b4: 69 62 2f 6d  	.word	0x6d2f6269
 806a1b8: 70 72 65 63  	.word	0x63657270
 806a1bc: 2e 63 00 00  	.word	0x0000632e

0806a1c0 <$d>:
 806a1c0: 05 00 00 00  	.word	0x00000005
 806a1c4: 19 00 00 00  	.word	0x00000019
 806a1c8: 7d 00 00 00  	.word	0x0000007d
 806a1cc: 00 00 00 00  	.word	0x00000000

0806a1d0 <__mprec_tens>:
 806a1d0: 00 00 00 00 00 00 f0 3f         .......?
 806a1d8: 00 00 00 00 00 00 24 40         ......$@
 806a1e0: 00 00 00 00 00 00 59 40         ......Y@
 806a1e8: 00 00 00 00 00 40 8f 40         .....@.@
 806a1f0: 00 00 00 00 00 88 c3 40         .......@
 806a1f8: 00 00 00 00 00 6a f8 40         .....j.@
 806a200: 00 00 00 00 80 84 2e 41         .......A
 806a208: 00 00 00 00 d0 12 63 41         ......cA
 806a210: 00 00 00 00 84 d7 97 41         .......A
 806a218: 00 00 00 00 65 cd cd 41         ....e..A
 806a220: 00 00 00 20 5f a0 02 42         ... _..B
 806a228: 00 00 00 e8 76 48 37 42         ....vH7B
 806a230: 00 00 00 a2 94 1a 6d 42         ......mB
 806a238: 00 00 40 e5 9c 30 a2 42         ..@..0.B
 806a240: 00 00 90 1e c4 bc d6 42         .......B
 806a248: 00 00 34 26 f5 6b 0c 43         ..4&.k.C
 806a250: 00 80 e0 37 79 c3 41 43         ...7y.AC
 806a258: 00 a0 d8 85 57 34 76 43         ....W4vC
 806a260: 00 c8 4e 67 6d c1 ab 43         ..Ngm..C
 806a268: 00 3d 91 60 e4 58 e1 43         .=.`.X.C
 806a270: 40 8c b5 78 1d af 15 44         @..x...D
 806a278: 50 ef e2 d6 e4 1a 4b 44         P.....KD
 806a280: 92 d5 4d 06 cf f0 80 44         ..M....D
 806a288: f6 4a e1 c7 02 2d b5 44         .J...-.D
 806a290: b4 9d d9 79 43 78 ea 44         ...yCx.D

0806a298 <__mprec_tinytens>:
 806a298: bc 89 d8 97 b2 d2 9c 3c         .......<
 806a2a0: 33 a7 a8 d5 23 f6 49 39         3...#.I9
 806a2a8: 3d a7 f4 44 fd 0f a5 32         =..D...2
 806a2b0: 9d 97 8c cf 08 ba 5b 25         ......[%
 806a2b8: 43 6f ac 64 28 06 c8 0a         Co.d(...

0806a2c0 <__mprec_bigtens>:
 806a2c0: 00 80 e0 37 79 c3 41 43         ...7y.AC
 806a2c8: 17 6e 05 b5 b5 b8 93 46         .n.....F
 806a2d0: f5 f9 3f e9 03 4f 38 4d         ..?..O8M
 806a2d8: 32 1d 30 f9 48 77 82 5a         2.0.Hw.Z
 806a2e0: 3c bf 73 7f dd 4f 15 75         <.s..O.u

0806a2e8 <$d>:
 806a2e8: 20 20 20 20  	.word	0x20202020
 806a2ec: 20 20 20 20  	.word	0x20202020
 806a2f0: 20 20 20 20  	.word	0x20202020
 806a2f4: 20 20 20 20  	.word	0x20202020

0806a2f8 <zeroes.0>:
 806a2f8: 30 30 30 30 30 30 30 30         00000000
 806a300: 30 30 30 30 30 30 30 30         00000000
 806a308: 2c 20 66 75 6e 63 74 69         , functi
 806a310: 6f 6e 3a 20                     on: 

0806a314 <$d>:
 806a314: 00 00 00 00  	.word	0x00000000
 806a318: 61 73 73 65  	.word	0x65737361
 806a31c: 72 74 69 6f  	.word	0x6f697472
 806a320: 6e 20 22 25  	.word	0x2522206e
 806a324: 73 22 20 66  	.word	0x66202273
 806a328: 61 69 6c 65  	.word	0x656c6961
 806a32c: 64 3a 20 66  	.word	0x66203a64
 806a330: 69 6c 65 20  	.word	0x20656c69
 806a334: 22 25 73 22  	.word	0x22732522
 806a338: 2c 20 6c 69  	.word	0x696c202c
 806a33c: 6e 65 20 25  	.word	0x2520656e
 806a340: 64 25 73 25  	.word	0x25732564
 806a344: 73 0a 00 00  	.word	0x00000a73

0806a348 <$d>:
 806a348: 43 00 00 00  	.word	0x00000043
 806a34c: 50 4f 53 49  	.word	0x49534f50
 806a350: 58 00 00 00  	.word	0x00000058
 806a354: 2e 00 00 00  	.word	0x0000002e

0806a358 <$d>:
 806a358: 00 20 20 20  	.word	0x20202000
 806a35c: 20 20 20 20  	.word	0x20202020
 806a360: 20 20 28 28  	.word	0x28282020
 806a364: 28 28 28 20  	.word	0x20282828
 806a368: 20 20 20 20  	.word	0x20202020
 806a36c: 20 20 20 20  	.word	0x20202020
 806a370: 20 20 20 20  	.word	0x20202020
 806a374: 20 20 20 20  	.word	0x20202020
 806a378: 20 88 10 10  	.word	0x10108820
 806a37c: 10 10 10 10  	.word	0x10101010
 806a380: 10 10 10 10  	.word	0x10101010
 806a384: 10 10 10 10  	.word	0x10101010
 806a388: 10 04 04 04  	.word	0x04040410
 806a38c: 04 04 04 04  	.word	0x04040404
 806a390: 04 04 04 10  	.word	0x10040404
 806a394: 10 10 10 10  	.word	0x10101010
 806a398: 10 10 41 41  	.word	0x41411010
 806a39c: 41 41 41 41  	.word	0x41414141
 806a3a0: 01 01 01 01  	.word	0x01010101
 806a3a4: 01 01 01 01  	.word	0x01010101
 806a3a8: 01 01 01 01  	.word	0x01010101
 806a3ac: 01 01 01 01  	.word	0x01010101
 806a3b0: 01 01 01 01  	.word	0x01010101
 806a3b4: 10 10 10 10  	.word	0x10101010
 806a3b8: 10 10 42 42  	.word	0x42421010
 806a3bc: 42 42 42 42  	.word	0x42424242
 806a3c0: 02 02 02 02  	.word	0x02020202
 806a3c4: 02 02 02 02  	.word	0x02020202
 806a3c8: 02 02 02 02  	.word	0x02020202
 806a3cc: 02 02 02 02  	.word	0x02020202
 806a3d0: 02 02 02 02  	.word	0x02020202
 806a3d4: 10 10 10 10  	.word	0x10101010
 806a3d8: 20 00 00 00  	.word	0x00000020
 806a3dc: 00 00 00 00  	.word	0x00000000
 806a3e0: 00 00 00 00  	.word	0x00000000
 806a3e4: 00 00 00 00  	.word	0x00000000
 806a3e8: 00 00 00 00  	.word	0x00000000
 806a3ec: 00 00 00 00  	.word	0x00000000
 806a3f0: 00 00 00 00  	.word	0x00000000
 806a3f4: 00 00 00 00  	.word	0x00000000
 806a3f8: 00 00 00 00  	.word	0x00000000
 806a3fc: 00 00 00 00  	.word	0x00000000
 806a400: 00 00 00 00  	.word	0x00000000
 806a404: 00 00 00 00  	.word	0x00000000
 806a408: 00 00 00 00  	.word	0x00000000
 806a40c: 00 00 00 00  	.word	0x00000000
 806a410: 00 00 00 00  	.word	0x00000000
 806a414: 00 00 00 00  	.word	0x00000000
 806a418: 00 00 00 00  	.word	0x00000000
 806a41c: 00 00 00 00  	.word	0x00000000
 806a420: 00 00 00 00  	.word	0x00000000
 806a424: 00 00 00 00  	.word	0x00000000
 806a428: 00 00 00 00  	.word	0x00000000
 806a42c: 00 00 00 00  	.word	0x00000000
 806a430: 00 00 00 00  	.word	0x00000000
 806a434: 00 00 00 00  	.word	0x00000000
 806a438: 00 00 00 00  	.word	0x00000000
 806a43c: 00 00 00 00  	.word	0x00000000
 806a440: 00 00 00 00  	.word	0x00000000
 806a444: 00 00 00 00  	.word	0x00000000
 806a448: 00 00 00 00  	.word	0x00000000
 806a44c: 00 00 00 00  	.word	0x00000000
 806a450: 00 00 00 00  	.word	0x00000000
 806a454: 00 00 00 00  	.word	0x00000000
 806a458: 00 00 00 00  	.word	0x00000000
 806a45c: 00 00        	.short	0x0000
 806a45e: 00           	.byte	0x00

0806a45f <__unprivileged_flash_end__>:
 806a45f: 00           	.byte	0x00
